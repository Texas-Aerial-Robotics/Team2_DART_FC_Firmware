
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3c8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d50  0800e668  0800e668  0000f668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080103b8  080103b8  000113b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080103c0  080103c0  000113c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080103c4  080103c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  080103c8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d8  240001e0  080105a4  000121e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240006b8  080105a4  000126b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019406  00000000  00000000  0001220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f31  00000000  00000000  0002b610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001350  00000000  00000000  0002e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0d  00000000  00000000  0002f898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038f19  00000000  00000000  000307a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018e90  00000000  00000000  000696be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169869  00000000  00000000  0008254e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ebdb7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068e0  00000000  00000000  001ebdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001f26dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e650 	.word	0x0800e650

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800e650 	.word	0x0800e650

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float q[4], float gx, float gy, float gz, float ax, float ay, float az) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b092      	sub	sp, #72	@ 0x48
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	61f8      	str	r0, [r7, #28]
 8000aac:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ab0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000ab4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000ab8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000abc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000ac0:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ac8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad0:	d10e      	bne.n	8000af0 <MahonyAHRSupdateIMU+0x4c>
 8000ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ad6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ade:	d107      	bne.n	8000af0 <MahonyAHRSupdateIMU+0x4c>
 8000ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aec:	f000 8136 	beq.w	8000d5c <MahonyAHRSupdateIMU+0x2b8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000af8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000afc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b10:	eeb0 0a67 	vmov.f32	s0, s15
 8000b14:	f000 fa3c 	bl	8000f90 <invSqrt>
 8000b18:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8000b1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b20:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b28:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8000b2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b38:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8000b3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b40:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b48:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	ed93 7a00 	vldr	s14, [r3]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	330c      	adds	r3, #12
 8000b58:	edd3 7a00 	vldr	s15, [r3]
 8000b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	edd3 6a00 	vldr	s13, [r3]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3308      	adds	r3, #8
 8000b6a:	edd3 7a00 	vldr	s15, [r3]
 8000b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b76:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	ed93 7a00 	vldr	s14, [r3]
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3304      	adds	r3, #4
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	edd3 6a00 	vldr	s13, [r3]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	330c      	adds	r3, #12
 8000b98:	edd3 7a00 	vldr	s15, [r3]
 8000b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	ed93 7a00 	vldr	s14, [r3]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
 8000bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000bbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	330c      	adds	r3, #12
 8000bc4:	edd3 6a00 	vldr	s13, [r3]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	330c      	adds	r3, #12
 8000bcc:	edd3 7a00 	vldr	s15, [r3]
 8000bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8000bdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000be0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000be8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 8000bfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c00:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c08:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c0c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c18:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8000c1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c20:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c28:	edd7 6a02 	vldr	s13, [r7, #8]
 8000c2c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c38:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8000c3c:	4bcd      	ldr	r3, [pc, #820]	@ (8000f74 <MahonyAHRSupdateIMU+0x4d0>)
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4a:	dd54      	ble.n	8000cf6 <MahonyAHRSupdateIMU+0x252>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8000c4c:	4bc9      	ldr	r3, [pc, #804]	@ (8000f74 <MahonyAHRSupdateIMU+0x4d0>)
 8000c4e:	ed93 7a00 	vldr	s14, [r3]
 8000c52:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5a:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8000f78 <MahonyAHRSupdateIMU+0x4d4>
 8000c5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c62:	4bc6      	ldr	r3, [pc, #792]	@ (8000f7c <MahonyAHRSupdateIMU+0x4d8>)
 8000c64:	edd3 7a00 	vldr	s15, [r3]
 8000c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6c:	4bc3      	ldr	r3, [pc, #780]	@ (8000f7c <MahonyAHRSupdateIMU+0x4d8>)
 8000c6e:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8000c72:	4bc0      	ldr	r3, [pc, #768]	@ (8000f74 <MahonyAHRSupdateIMU+0x4d0>)
 8000c74:	ed93 7a00 	vldr	s14, [r3]
 8000c78:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c80:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8000f78 <MahonyAHRSupdateIMU+0x4d4>
 8000c84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c88:	4bbd      	ldr	r3, [pc, #756]	@ (8000f80 <MahonyAHRSupdateIMU+0x4dc>)
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c92:	4bbb      	ldr	r3, [pc, #748]	@ (8000f80 <MahonyAHRSupdateIMU+0x4dc>)
 8000c94:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8000c98:	4bb6      	ldr	r3, [pc, #728]	@ (8000f74 <MahonyAHRSupdateIMU+0x4d0>)
 8000c9a:	ed93 7a00 	vldr	s14, [r3]
 8000c9e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000f78 <MahonyAHRSupdateIMU+0x4d4>
 8000caa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cae:	4bb5      	ldr	r3, [pc, #724]	@ (8000f84 <MahonyAHRSupdateIMU+0x4e0>)
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb8:	4bb2      	ldr	r3, [pc, #712]	@ (8000f84 <MahonyAHRSupdateIMU+0x4e0>)
 8000cba:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8000cbe:	4baf      	ldr	r3, [pc, #700]	@ (8000f7c <MahonyAHRSupdateIMU+0x4d8>)
 8000cc0:	edd3 7a00 	vldr	s15, [r3]
 8000cc4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ccc:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8000cd0:	4bab      	ldr	r3, [pc, #684]	@ (8000f80 <MahonyAHRSupdateIMU+0x4dc>)
 8000cd2:	edd3 7a00 	vldr	s15, [r3]
 8000cd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cde:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8000ce2:	4ba8      	ldr	r3, [pc, #672]	@ (8000f84 <MahonyAHRSupdateIMU+0x4e0>)
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf0:	edc7 7a04 	vstr	s15, [r7, #16]
 8000cf4:	e00b      	b.n	8000d0e <MahonyAHRSupdateIMU+0x26a>
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8000cf6:	4ba1      	ldr	r3, [pc, #644]	@ (8000f7c <MahonyAHRSupdateIMU+0x4d8>)
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8000cfe:	4ba0      	ldr	r3, [pc, #640]	@ (8000f80 <MahonyAHRSupdateIMU+0x4dc>)
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8000d06:	4b9f      	ldr	r3, [pc, #636]	@ (8000f84 <MahonyAHRSupdateIMU+0x4e0>)
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8000d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8000f88 <MahonyAHRSupdateIMU+0x4e4>)
 8000d10:	ed93 7a00 	vldr	s14, [r3]
 8000d14:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d24:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8000d28:	4b97      	ldr	r3, [pc, #604]	@ (8000f88 <MahonyAHRSupdateIMU+0x4e4>)
 8000d2a:	ed93 7a00 	vldr	s14, [r3]
 8000d2e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d36:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3e:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8000d42:	4b91      	ldr	r3, [pc, #580]	@ (8000f88 <MahonyAHRSupdateIMU+0x4e4>)
 8000d44:	ed93 7a00 	vldr	s14, [r3]
 8000d48:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d50:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d58:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8000d5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d60:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000f8c <MahonyAHRSupdateIMU+0x4e8>
 8000d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d68:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * (1.0f / sampleFreq));
 8000d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d70:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8000f8c <MahonyAHRSupdateIMU+0x4e8>
 8000d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d78:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * (1.0f / sampleFreq));
 8000d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d80:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000f8c <MahonyAHRSupdateIMU+0x4e8>
 8000d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d88:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q[0];
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000da8:	eef1 6a67 	vneg.f32	s13, s15
 8000dac:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000db4:	ed97 6a08 	vldr	s12, [r7, #32]
 8000db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	330c      	adds	r3, #12
 8000dc8:	ed93 6a00 	vldr	s12, [r3]
 8000dcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dd4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	ed93 7a00 	vldr	s14, [r3]
 8000dea:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000dee:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000df6:	ed97 6a08 	vldr	s12, [r7, #32]
 8000dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	330c      	adds	r3, #12
 8000e0a:	ed93 6a00 	vldr	s12, [r3]
 8000e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e22:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3308      	adds	r3, #8
 8000e2a:	ed93 7a00 	vldr	s14, [r3]
 8000e2e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e3a:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e46:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	330c      	adds	r3, #12
 8000e4e:	ed93 6a00 	vldr	s12, [r3]
 8000e52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3308      	adds	r3, #8
 8000e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e66:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	330c      	adds	r3, #12
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e7e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e8e:	ed97 6a08 	vldr	s12, [r7, #32]
 8000e92:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea6:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	ed93 7a00 	vldr	s14, [r3]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	edd3 6a00 	vldr	s13, [r3]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	edd3 6a00 	vldr	s13, [r3]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3308      	adds	r3, #8
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	330c      	adds	r3, #12
 8000eee:	edd3 6a00 	vldr	s13, [r3]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	f000 f843 	bl	8000f90 <invSqrt>
 8000f0a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	ed93 7a00 	vldr	s14, [r3]
 8000f14:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	ed93 7a00 	vldr	s14, [r3]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f36:	edc3 7a00 	vstr	s15, [r3]
	q[2] *= recipNorm;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	ed93 7a00 	vldr	s14, [r3]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3308      	adds	r3, #8
 8000f46:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4e:	edc3 7a00 	vstr	s15, [r3]
	q[3] *= recipNorm;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	330c      	adds	r3, #12
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	330c      	adds	r3, #12
 8000f5e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	edc3 7a00 	vstr	s15, [r3]
}
 8000f6a:	bf00      	nop
 8000f6c:	3748      	adds	r7, #72	@ 0x48
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	240001fc 	.word	0x240001fc
 8000f78:	3b5a740e 	.word	0x3b5a740e
 8000f7c:	24000200 	.word	0x24000200
 8000f80:	24000204 	.word	0x24000204
 8000f84:	24000208 	.word	0x24000208
 8000f88:	24000000 	.word	0x24000000
 8000f8c:	3ada740e 	.word	0x3ada740e

08000f90 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	105a      	asrs	r2, r3, #1
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <invSqrt+0x74>)
 8000fbc:	1a9b      	subs	r3, r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000fc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fe4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	ee07 3a90 	vmov	s15, r3
}
 8000ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	5f3759df 	.word	0x5f3759df

08001008 <bmp388_quantize_calibration>:
volatile double altitude;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (double)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 800100c:	4b7c      	ldr	r3, [pc, #496]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001018:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 80011a8 <bmp388_quantize_calibration+0x1a0>
 800101c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001020:	4b78      	ldr	r3, [pc, #480]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001022:	ed83 7b00 	vstr	d7, [r3]
  quantized_bmp388_calib.par_t2 = (double)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8001026:	4b76      	ldr	r3, [pc, #472]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001028:	885b      	ldrh	r3, [r3, #2]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001032:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 80011b0 <bmp388_quantize_calibration+0x1a8>
 8001036:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800103a:	4b72      	ldr	r3, [pc, #456]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 800103c:	ed83 7b02 	vstr	d7, [r3, #8]
  quantized_bmp388_calib.par_t3 = (double)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8001040:	4b6f      	ldr	r3, [pc, #444]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001042:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800104e:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 80011b8 <bmp388_quantize_calibration+0x1b0>
 8001052:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001056:	4b6b      	ldr	r3, [pc, #428]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001058:	ed83 7b04 	vstr	d7, [r3, #16]

  quantized_bmp388_calib.par_p1 = ((double)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 800105c:	4b68      	ldr	r3, [pc, #416]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 800105e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800106a:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 80011c0 <bmp388_quantize_calibration+0x1b8>
 800106e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001072:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 80011c8 <bmp388_quantize_calibration+0x1c0>
 8001076:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107a:	4b62      	ldr	r3, [pc, #392]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 800107c:	ed83 7b06 	vstr	d7, [r3, #24]
  quantized_bmp388_calib.par_p2 = ((double)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8001080:	4b5f      	ldr	r3, [pc, #380]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001082:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800108e:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 80011c0 <bmp388_quantize_calibration+0x1b8>
 8001092:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001096:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 80011d0 <bmp388_quantize_calibration+0x1c8>
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	4b59      	ldr	r3, [pc, #356]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 80010a0:	ed83 7b08 	vstr	d7, [r3, #32]
  quantized_bmp388_calib.par_p3 = (double)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 80010a4:	4b56      	ldr	r3, [pc, #344]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 80010a6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010b2:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80011d8 <bmp388_quantize_calibration+0x1d0>
 80010b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ba:	4b52      	ldr	r3, [pc, #328]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 80010bc:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p4 = (double)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 80010c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 80010c2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010ce:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80011e0 <bmp388_quantize_calibration+0x1d8>
 80010d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 80010d8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p5 = (double)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 80010dc:	4b48      	ldr	r3, [pc, #288]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 80010de:	899b      	ldrh	r3, [r3, #12]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010e8:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80010ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010f0:	4b44      	ldr	r3, [pc, #272]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 80010f2:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  quantized_bmp388_calib.par_p6 = (double)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 80010f6:	4b42      	ldr	r3, [pc, #264]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 80010f8:	89db      	ldrh	r3, [r3, #14]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001102:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 80011e8 <bmp388_quantize_calibration+0x1e0>
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 800110c:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
  quantized_bmp388_calib.par_p7 = (double)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 8001110:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001112:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800111e:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 80011a8 <bmp388_quantize_calibration+0x1a0>
 8001122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001126:	4b37      	ldr	r3, [pc, #220]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001128:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  quantized_bmp388_calib.par_p8 = (double)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 800112c:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 800112e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113a:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80011f0 <bmp388_quantize_calibration+0x1e8>
 800113e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001142:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001144:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
  quantized_bmp388_calib.par_p9 = (double)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 800114a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001156:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 80011b8 <bmp388_quantize_calibration+0x1b0>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001160:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
  quantized_bmp388_calib.par_p10 = (double)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001166:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001172:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80011b8 <bmp388_quantize_calibration+0x1b0>
 8001176:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800117a:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 800117c:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
  quantized_bmp388_calib.par_p11 = (double)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001182:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800118e:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80011f8 <bmp388_quantize_calibration+0x1f0>
 8001192:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001198:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40700000 	.word	0x40700000
 80011b0:	00000000 	.word	0x00000000
 80011b4:	41d00000 	.word	0x41d00000
 80011b8:	00000000 	.word	0x00000000
 80011bc:	42f00000 	.word	0x42f00000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40d00000 	.word	0x40d00000
 80011c8:	00000000 	.word	0x00000000
 80011cc:	41300000 	.word	0x41300000
 80011d0:	00000000 	.word	0x00000000
 80011d4:	41c00000 	.word	0x41c00000
 80011d8:	00000000 	.word	0x00000000
 80011dc:	41f00000 	.word	0x41f00000
 80011e0:	00000000 	.word	0x00000000
 80011e4:	42400000 	.word	0x42400000
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40500000 	.word	0x40500000
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40e00000 	.word	0x40e00000
 80011f8:	00000000 	.word	0x00000000
 80011fc:	44000000 	.word	0x44000000
 8001200:	2400020c 	.word	0x2400020c
 8001204:	24000228 	.word	0x24000228

08001208 <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2140      	movs	r1, #64	@ 0x40
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <bmp388_write_reg+0x44>)
 800121e:	f002 f98b 	bl	8003538 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001222:	1df9      	adds	r1, r7, #7
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	2201      	movs	r2, #1
 8001228:	4809      	ldr	r0, [pc, #36]	@ (8001250 <bmp388_write_reg+0x48>)
 800122a:	f005 f90f 	bl	800644c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800122e:	1db9      	adds	r1, r7, #6
 8001230:	2364      	movs	r3, #100	@ 0x64
 8001232:	2201      	movs	r2, #1
 8001234:	4806      	ldr	r0, [pc, #24]	@ (8001250 <bmp388_write_reg+0x48>)
 8001236:	f005 f909 	bl	800644c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2140      	movs	r1, #64	@ 0x40
 800123e:	4803      	ldr	r0, [pc, #12]	@ (800124c <bmp388_write_reg+0x44>)
 8001240:	f002 f97a 	bl	8003538 <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58020000 	.word	0x58020000
 8001250:	24000348 	.word	0x24000348

08001254 <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
  uint8_t dummy;
  uint8_t temp_data = 0x80 | reg;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800126a:	b2db      	uxtb	r3, r3
 800126c:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2140      	movs	r1, #64	@ 0x40
 8001272:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <bmp388_read_reg+0x7c>)
 8001274:	f002 f960 	bl	8003538 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8001278:	f107 010d 	add.w	r1, r7, #13
 800127c:	2364      	movs	r3, #100	@ 0x64
 800127e:	2201      	movs	r2, #1
 8001280:	4814      	ldr	r0, [pc, #80]	@ (80012d4 <bmp388_read_reg+0x80>)
 8001282:	f005 f8e3 	bl	800644c <HAL_SPI_Transmit>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <bmp388_read_reg+0x40>
    Error_Handler();
 8001290:	f000 fed4 	bl	800203c <Error_Handler>
  HAL_SPI_Receive(&hspi2, &dummy, 1, 100);
 8001294:	f107 010e 	add.w	r1, r7, #14
 8001298:	2364      	movs	r3, #100	@ 0x64
 800129a:	2201      	movs	r2, #1
 800129c:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <bmp388_read_reg+0x80>)
 800129e:	f005 fac3 	bl	8006828 <HAL_SPI_Receive>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	2364      	movs	r3, #100	@ 0x64
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	480a      	ldr	r0, [pc, #40]	@ (80012d4 <bmp388_read_reg+0x80>)
 80012ac:	f005 fabc 	bl	8006828 <HAL_SPI_Receive>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <bmp388_read_reg+0x6a>
    Error_Handler();
 80012ba:	f000 febf 	bl	800203c <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2140      	movs	r1, #64	@ 0x40
 80012c2:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <bmp388_read_reg+0x7c>)
 80012c4:	f002 f938 	bl	8003538 <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	58020000 	.word	0x58020000
 80012d4:	24000348 	.word	0x24000348

080012d8 <bmp388_setup>:
void bmp388_setup()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  bmp388_write_reg(0x7E, 0xB6); // Soft reset
 80012de:	21b6      	movs	r1, #182	@ 0xb6
 80012e0:	207e      	movs	r0, #126	@ 0x7e
 80012e2:	f7ff ff91 	bl	8001208 <bmp388_write_reg>
  HAL_Delay(10); // Wait for reset to complete
 80012e6:	200a      	movs	r0, #10
 80012e8:	f001 fdbe 	bl	8002e68 <HAL_Delay>
  uint8_t calib_data[21];
  uint8_t chip[2];
  bmp388_read_reg(0x31, calib_data, 21);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2215      	movs	r2, #21
 80012f2:	4619      	mov	r1, r3
 80012f4:	2031      	movs	r0, #49	@ 0x31
 80012f6:	f7ff ffad 	bl	8001254 <bmp388_read_reg>
  bmp388_read_reg(0x00, chip, 2);
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2202      	movs	r2, #2
 80012fe:	4619      	mov	r1, r3
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff ffa7 	bl	8001254 <bmp388_read_reg>
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 8001306:	7a3b      	ldrb	r3, [r7, #8]
 8001308:	b21a      	sxth	r2, r3
 800130a:	7a7b      	ldrb	r3, [r7, #9]
 800130c:	b21b      	sxth	r3, r3
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b3b      	ldr	r3, [pc, #236]	@ (8001408 <bmp388_setup+0x130>)
 800131a:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 800131c:	7abb      	ldrb	r3, [r7, #10]
 800131e:	b21a      	sxth	r2, r3
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	b21b      	sxth	r3, r3
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <bmp388_setup+0x130>)
 8001330:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 8001332:	7b3b      	ldrb	r3, [r7, #12]
 8001334:	b25a      	sxtb	r2, r3
 8001336:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <bmp388_setup+0x130>)
 8001338:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 800133a:	7b7b      	ldrb	r3, [r7, #13]
 800133c:	b21a      	sxth	r2, r3
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	b21b      	sxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <bmp388_setup+0x130>)
 800134c:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	b21a      	sxth	r2, r3
 8001352:	7c3b      	ldrb	r3, [r7, #16]
 8001354:	b21b      	sxth	r3, r3
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <bmp388_setup+0x130>)
 8001360:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8001362:	7c7b      	ldrb	r3, [r7, #17]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <bmp388_setup+0x130>)
 8001368:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 800136a:	7cbb      	ldrb	r3, [r7, #18]
 800136c:	b25a      	sxtb	r2, r3
 800136e:	4b26      	ldr	r3, [pc, #152]	@ (8001408 <bmp388_setup+0x130>)
 8001370:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8001372:	7cfb      	ldrb	r3, [r7, #19]
 8001374:	b21a      	sxth	r2, r3
 8001376:	7d3b      	ldrb	r3, [r7, #20]
 8001378:	b21b      	sxth	r3, r3
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <bmp388_setup+0x130>)
 8001386:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8001388:	7d7b      	ldrb	r3, [r7, #21]
 800138a:	b21a      	sxth	r2, r3
 800138c:	7dbb      	ldrb	r3, [r7, #22]
 800138e:	b21b      	sxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <bmp388_setup+0x130>)
 800139c:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <bmp388_setup+0x130>)
 80013a4:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 80013a6:	7e3b      	ldrb	r3, [r7, #24]
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <bmp388_setup+0x130>)
 80013ac:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 80013ae:	7e7b      	ldrb	r3, [r7, #25]
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7ebb      	ldrb	r3, [r7, #26]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <bmp388_setup+0x130>)
 80013c0:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 80013c2:	7efb      	ldrb	r3, [r7, #27]
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <bmp388_setup+0x130>)
 80013c8:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 80013ca:	7f3b      	ldrb	r3, [r7, #28]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <bmp388_setup+0x130>)
 80013d0:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 80013d2:	f7ff fe19 	bl	8001008 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1A, 0x00);
 80013d6:	2100      	movs	r1, #0
 80013d8:	201a      	movs	r0, #26
 80013da:	f7ff ff15 	bl	8001208 <bmp388_write_reg>
  bmp388_write_reg(0x1B, 0x33);  // normal mode, temp pressure on by default with it
 80013de:	2133      	movs	r1, #51	@ 0x33
 80013e0:	201b      	movs	r0, #27
 80013e2:	f7ff ff11 	bl	8001208 <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 80013e6:	2103      	movs	r1, #3
 80013e8:	201c      	movs	r0, #28
 80013ea:	f7ff ff0d 	bl	8001208 <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 80013ee:	2102      	movs	r1, #2
 80013f0:	201d      	movs	r0, #29
 80013f2:	f7ff ff09 	bl	8001208 <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x04);  // coefficient for IIR filter, ideally low value for the dart
 80013f6:	2104      	movs	r1, #4
 80013f8:	201f      	movs	r0, #31
 80013fa:	f7ff ff05 	bl	8001208 <bmp388_write_reg>
}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2400020c 	.word	0x2400020c

0800140c <bmp388_read_raw_data>:

void bmp388_read_raw_data()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  uint8_t data[6];
  bmp388_read_reg(0x04, data, 6); // 0x04-0x06 pressure, 0x07-0x09 temperature
 8001412:	463b      	mov	r3, r7
 8001414:	2206      	movs	r2, #6
 8001416:	4619      	mov	r1, r3
 8001418:	2004      	movs	r0, #4
 800141a:	f7ff ff1b 	bl	8001254 <bmp388_read_reg>
  bmp388_rawData.pressure = (((int32_t)data[2] << 16) | ((int32_t)data[1] << 8) | ((int32_t)data[0]));
 800141e:	78bb      	ldrb	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	787b      	ldrb	r3, [r7, #1]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	4313      	orrs	r3, r2
 8001428:	783a      	ldrb	r2, [r7, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <bmp388_read_raw_data+0x44>)
 8001430:	605a      	str	r2, [r3, #4]
  bmp388_rawData.temperature = (((int32_t)data[5] << 16) | ((int32_t)data[4] << 8) | ((int32_t)data[3]));
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	4313      	orrs	r3, r2
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	4313      	orrs	r3, r2
 8001440:	461a      	mov	r2, r3
 8001442:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <bmp388_read_raw_data+0x44>)
 8001444:	601a      	str	r2, [r3, #0]

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	240002a0 	.word	0x240002a0

08001454 <bmp388_compensated_temperature>:

// the math performed in both functions are directly from the datasheet
static double bmp388_compensated_temperature(uint32_t raw_temp)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  double partial_data1 = (double)(raw_temp)-quantized_bmp388_calib.par_t1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 8001468:	ed93 7b00 	vldr	d7, [r3]
 800146c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001470:	ed87 7b04 	vstr	d7, [r7, #16]
  double partial_data2 = partial_data1 * quantized_bmp388_calib.par_t2;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 8001476:	ed93 7b02 	vldr	d7, [r3, #8]
 800147a:	ed97 6b04 	vldr	d6, [r7, #16]
 800147e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001482:	ed87 7b02 	vstr	d7, [r7, #8]
  quantized_bmp388_calib.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantized_bmp388_calib.par_t3;
 8001486:	ed97 7b04 	vldr	d7, [r7, #16]
 800148a:	ee27 6b07 	vmul.f64	d6, d7, d7
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 8001490:	ed93 7b04 	vldr	d7, [r3, #16]
 8001494:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001498:	ed97 7b02 	vldr	d7, [r7, #8]
 800149c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 80014a2:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
  return quantized_bmp388_calib.t_lin;
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 80014a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80014ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80014b0:	eeb0 0b47 	vmov.f64	d0, d7
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	24000228 	.word	0x24000228

080014c4 <bmp388_compensated_pressure>:

static double bmp388_compensated_pressure(uint32_t raw_pressure)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b091      	sub	sp, #68	@ 0x44
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  double pressure;
  double partial_data1, partial_data2, partial_data3, partial_data4;
  double partial_out1, partial_out2;

  partial_data1 = quantized_bmp388_calib.par_p6 * quantized_bmp388_calib.t_lin;
 80014cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014ce:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 80014d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014d4:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014dc:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p7 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 80014e0:	4b69      	ldr	r3, [pc, #420]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014e2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80014e6:	4b68      	ldr	r3, [pc, #416]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014e8:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014f0:	4b65      	ldr	r3, [pc, #404]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014f2:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014fa:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p8 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 80014fe:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001500:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8001504:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001506:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800150a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800150e:	4b5e      	ldr	r3, [pc, #376]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001510:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001514:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001518:	4b5b      	ldr	r3, [pc, #364]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800151a:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800151e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001522:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out1 = quantized_bmp388_calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8001526:	4b58      	ldr	r3, [pc, #352]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001528:	ed93 6b0e 	vldr	d6, [r3, #56]	@ 0x38
 800152c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001538:	ee36 7b07 	vadd.f64	d7, d6, d7
 800153c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001540:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001544:	ed87 7b08 	vstr	d7, [r7, #32]

  partial_data1 = quantized_bmp388_calib.par_p2 * quantized_bmp388_calib.t_lin;
 8001548:	4b4f      	ldr	r3, [pc, #316]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800154a:	ed93 6b08 	vldr	d6, [r3, #32]
 800154e:	4b4e      	ldr	r3, [pc, #312]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001550:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001554:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001558:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p3 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 800155c:	4b4a      	ldr	r3, [pc, #296]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800155e:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8001562:	4b49      	ldr	r3, [pc, #292]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001564:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001568:	ee26 6b07 	vmul.f64	d6, d6, d7
 800156c:	4b46      	ldr	r3, [pc, #280]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800156e:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001572:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001576:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p4 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 800157a:	4b43      	ldr	r3, [pc, #268]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800157c:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001580:	4b41      	ldr	r3, [pc, #260]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001582:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001586:	ee26 6b07 	vmul.f64	d6, d6, d7
 800158a:	4b3f      	ldr	r3, [pc, #252]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800158c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001590:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001594:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001596:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800159a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800159e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out2 = (double)raw_pressure * (quantized_bmp388_calib.par_p1 + partial_data1 + partial_data2 + partial_data3);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015ac:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80015ae:	ed93 5b06 	vldr	d5, [r3, #24]
 80015b2:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80015b6:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015ba:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80015be:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015c2:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80015c6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015ce:	ed87 7b06 	vstr	d7, [r7, #24]

  partial_data1 = (double)raw_pressure * (double)raw_pressure;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015ea:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p9 + quantized_bmp388_calib.par_p10 * quantized_bmp388_calib.t_lin;
 80015ee:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80015f0:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80015f6:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80015fa:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80015fc:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001600:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001604:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001608:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = partial_data1 * partial_data2;
 800160c:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8001610:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001614:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001618:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_data4 = partial_data3 + ((double)raw_pressure * (double)raw_pressure * (double)raw_pressure) * quantized_bmp388_calib.par_p11;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001630:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800163e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001644:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8001648:	ee26 7b07 	vmul.f64	d7, d6, d7
 800164c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001650:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001654:	ed87 7b04 	vstr	d7, [r7, #16]

  pressure = partial_out1 + partial_out2 + partial_data4;
 8001658:	ed97 6b08 	vldr	d6, [r7, #32]
 800165c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001660:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001664:	ed97 6b04 	vldr	d6, [r7, #16]
 8001668:	ee36 7b07 	vadd.f64	d7, d6, d7
 800166c:	ed87 7b02 	vstr	d7, [r7, #8]

  return pressure;
 8001670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001674:	ec43 2b17 	vmov	d7, r2, r3
}
 8001678:	eeb0 0b47 	vmov.f64	d0, d7
 800167c:	3744      	adds	r7, #68	@ 0x44
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	24000228 	.word	0x24000228
 800168c:	00000000 	.word	0x00000000

08001690 <bmp388_getAltitude>:
double bmp388_getAltitude(double pressure)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	ed87 0b00 	vstr	d0, [r7]
	double altitude = 44330 * (1-pow(pressure/1019.0e2, 0.190294)); // pressure divided by pressure of sea level at austin
 800169a:	ed97 7b00 	vldr	d7, [r7]
 800169e:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80016e0 <bmp388_getAltitude+0x50>
 80016a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80016a6:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 80016e8 <bmp388_getAltitude+0x58>
 80016aa:	eeb0 0b46 	vmov.f64	d0, d6
 80016ae:	f00c faab 	bl	800dc08 <pow>
 80016b2:	eeb0 7b40 	vmov.f64	d7, d0
 80016b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80016ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016be:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80016f0 <bmp388_getAltitude+0x60>
 80016c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016c6:	ed87 7b02 	vstr	d7, [r7, #8]
	return altitude;
 80016ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80016d2:	eeb0 0b47 	vmov.f64	d0, d7
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	f3af 8000 	nop.w
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40f8e0c0 	.word	0x40f8e0c0
 80016e8:	c55000c9 	.word	0xc55000c9
 80016ec:	3fc85b8d 	.word	0x3fc85b8d
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40e5a540 	.word	0x40e5a540

080016f8 <bmp388_getData>:

void bmp388_getData()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  bmp388_read_raw_data();
 80016fc:	f7ff fe86 	bl	800140c <bmp388_read_raw_data>
  bmp388_processedData.temperature = bmp388_compensated_temperature(bmp388_rawData.temperature);
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <bmp388_getData+0x4c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fea5 	bl	8001454 <bmp388_compensated_temperature>
 800170a:	eeb0 7b40 	vmov.f64	d7, d0
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <bmp388_getData+0x50>)
 8001710:	ed83 7b00 	vstr	d7, [r3]
  bmp388_processedData.pressure = bmp388_compensated_pressure(bmp388_rawData.pressure);
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <bmp388_getData+0x4c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fed3 	bl	80014c4 <bmp388_compensated_pressure>
 800171e:	eeb0 7b40 	vmov.f64	d7, d0
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <bmp388_getData+0x50>)
 8001724:	ed83 7b02 	vstr	d7, [r3, #8]
  altitude = bmp388_getAltitude(bmp388_processedData.pressure);
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <bmp388_getData+0x50>)
 800172a:	ed93 7b02 	vldr	d7, [r3, #8]
 800172e:	eeb0 0b47 	vmov.f64	d0, d7
 8001732:	f7ff ffad 	bl	8001690 <bmp388_getAltitude>
 8001736:	eeb0 7b40 	vmov.f64	d7, d0
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <bmp388_getData+0x54>)
 800173c:	ed83 7b00 	vstr	d7, [r3]
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	240002a0 	.word	0x240002a0
 8001748:	240002a8 	.word	0x240002a8
 800174c:	240002b8 	.word	0x240002b8

08001750 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001758:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800175c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001768:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800176c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001770:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00b      	beq.n	8001790 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001778:	e000      	b.n	800177c <ITM_SendChar+0x2c>
    {
      __NOP();
 800177a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800177c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f9      	beq.n	800177a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001786:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001790:	687b      	ldr	r3, [r7, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80017a6:	f000 fc1d 	bl	8001fe4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017aa:	f001 facb 	bl	8002d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ae:	f000 f85f 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b2:	f000 fadf 	bl	8001d74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017b6:	f000 fa91 	bl	8001cdc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017ba:	f000 f8d5 	bl	8001968 <MX_SPI1_Init>
  MX_TIM2_Init();
 80017be:	f000 fa3f 	bl	8001c40 <MX_TIM2_Init>
  MX_SPI2_Init();
 80017c2:	f000 f929 	bl	8001a18 <MX_SPI2_Init>
  MX_TIM1_Init();
 80017c6:	f000 f97f 	bl	8001ac8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 80017ca:	4822      	ldr	r0, [pc, #136]	@ (8001854 <main+0xb4>)
 80017cc:	f005 fbde 	bl	8006f8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80017d0:	4821      	ldr	r0, [pc, #132]	@ (8001858 <main+0xb8>)
 80017d2:	f005 fbdb 	bl	8006f8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Enable TIM1 Channel 1 interrupt
 80017d6:	2100      	movs	r1, #0
 80017d8:	481f      	ldr	r0, [pc, #124]	@ (8001858 <main+0xb8>)
 80017da:	f005 fcb1 	bl	8007140 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Enable TIM1 Channel 1 interrupt
 80017de:	2104      	movs	r1, #4
 80017e0:	481d      	ldr	r0, [pc, #116]	@ (8001858 <main+0xb8>)
 80017e2:	f005 fcad 	bl	8007140 <HAL_TIM_PWM_Start>
  char buffer[40] = {'\0'};
 80017e6:	463b      	mov	r3, r7
 80017e8:	2228      	movs	r2, #40	@ 0x28
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f009 fc85 	bl	800b0fc <memset>
  mpu9250_setup();
 80017f2:	f000 fc8b 	bl	800210c <mpu9250_setup>
  bmp388_setup();
 80017f6:	f7ff fd6f 	bl	80012d8 <bmp388_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <main+0xbc>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <main+0x72>
	  {
		  timer_flag = 0;	//reset timer flag
 8001804:	4b15      	ldr	r3, [pc, #84]	@ (800185c <main+0xbc>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

		  mpu9250_getProcessedAngle();
 800180a:	f000 fd61 	bl	80022d0 <mpu9250_getProcessedAngle>
		  bmp388_getData();
 800180e:	f7ff ff73 	bl	80016f8 <bmp388_getData>
	  }

	  if(update_ccr){
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <main+0xc0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ee      	beq.n	80017fa <main+0x5a>
		  update_ccr = 0; //reset update ccr flag
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <main+0xc0>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]

		  duty1=setDutyCH1(&htim1, imu_angles.pitch);
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <main+0xc4>)
 8001824:	edd3 7a01 	vldr	s15, [r3, #4]
 8001828:	eeb0 0a67 	vmov.f32	s0, s15
 800182c:	480a      	ldr	r0, [pc, #40]	@ (8001858 <main+0xb8>)
 800182e:	f000 faf5 	bl	8001e1c <setDutyCH1>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <main+0xc8>)
 8001838:	801a      	strh	r2, [r3, #0]
		  duty2=setDutyCH2(&htim1, imu_angles.roll);
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <main+0xc4>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	eeb0 0a67 	vmov.f32	s0, s15
 8001844:	4804      	ldr	r0, [pc, #16]	@ (8001858 <main+0xb8>)
 8001846:	f000 fb3d 	bl	8001ec4 <setDutyCH2>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b07      	ldr	r3, [pc, #28]	@ (800186c <main+0xcc>)
 8001850:	801a      	strh	r2, [r3, #0]
	  if(timer_flag)
 8001852:	e7d2      	b.n	80017fa <main+0x5a>
 8001854:	2400041c 	.word	0x2400041c
 8001858:	240003d0 	.word	0x240003d0
 800185c:	240004fc 	.word	0x240004fc
 8001860:	240004fd 	.word	0x240004fd
 8001864:	24000548 	.word	0x24000548
 8001868:	240004fe 	.word	0x240004fe
 800186c:	24000500 	.word	0x24000500

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b09c      	sub	sp, #112	@ 0x70
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187a:	224c      	movs	r2, #76	@ 0x4c
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f009 fc3c 	bl	800b0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2220      	movs	r2, #32
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f009 fc36 	bl	800b0fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001890:	2002      	movs	r0, #2
 8001892:	f001 fe6b 	bl	800356c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <SystemClock_Config+0xf0>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a30      	ldr	r2, [pc, #192]	@ (8001960 <SystemClock_Config+0xf0>)
 80018a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018a4:	6193      	str	r3, [r2, #24]
 80018a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001960 <SystemClock_Config+0xf0>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <SystemClock_Config+0xf4>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <SystemClock_Config+0xf4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80018bc:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <SystemClock_Config+0xf4>)
 80018be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018c8:	bf00      	nop
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <SystemClock_Config+0xf0>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018d6:	d1f8      	bne.n	80018ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d8:	2302      	movs	r3, #2
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018dc:	2301      	movs	r3, #1
 80018de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e0:	2340      	movs	r3, #64	@ 0x40
 80018e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e4:	2302      	movs	r3, #2
 80018e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e8:	2300      	movs	r3, #0
 80018ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018ec:	2304      	movs	r3, #4
 80018ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018f0:	233c      	movs	r3, #60	@ 0x3c
 80018f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018f4:	2302      	movs	r3, #2
 80018f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80018f8:	2305      	movs	r3, #5
 80018fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001900:	230c      	movs	r3, #12
 8001902:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001904:	2300      	movs	r3, #0
 8001906:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fe65 	bl	80035e0 <HAL_RCC_OscConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800191c:	f000 fb8e 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001920:	233f      	movs	r3, #63	@ 0x3f
 8001922:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001924:	2303      	movs	r3, #3
 8001926:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800192c:	2308      	movs	r3, #8
 800192e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001930:	2340      	movs	r3, #64	@ 0x40
 8001932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001934:	2340      	movs	r3, #64	@ 0x40
 8001936:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800193c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800193e:	2340      	movs	r3, #64	@ 0x40
 8001940:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2104      	movs	r1, #4
 8001946:	4618      	mov	r0, r3
 8001948:	f002 faa4 	bl	8003e94 <HAL_RCC_ClockConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001952:	f000 fb73 	bl	800203c <Error_Handler>
  }
}
 8001956:	bf00      	nop
 8001958:	3770      	adds	r7, #112	@ 0x70
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	58024800 	.word	0x58024800
 8001964:	58000400 	.word	0x58000400

08001968 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 800196e:	4a29      	ldr	r2, [pc, #164]	@ (8001a14 <MX_SPI1_Init+0xac>)
 8001970:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001972:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 8001974:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001978:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800197a:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001980:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 8001982:	2207      	movs	r2, #7
 8001984:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 8001988:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800198c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 8001990:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001996:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 8001998:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800199c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_SPI1_Init+0xa8>)
 80019fe:	f004 fc01 	bl	8006204 <HAL_SPI_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001a08:	f000 fb18 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	240002c0 	.word	0x240002c0
 8001a14:	40013000 	.word	0x40013000

08001a18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a1c:	4b28      	ldr	r3, [pc, #160]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a1e:	4a29      	ldr	r2, [pc, #164]	@ (8001ac4 <MX_SPI2_Init+0xac>)
 8001a20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a22:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2a:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a30:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a32:	2207      	movs	r2, #7
 8001a34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a50:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001a54:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a74:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <MX_SPI2_Init+0xa8>)
 8001aae:	f004 fba9 	bl	8006204 <HAL_SPI_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001ab8:	f000 fac0 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	24000348 	.word	0x24000348
 8001ac4:	40003800 	.word	0x40003800

08001ac8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b09a      	sub	sp, #104	@ 0x68
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	222c      	movs	r2, #44	@ 0x2c
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f009 fafa 	bl	800b0fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b08:	4b4b      	ldr	r3, [pc, #300]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c3c <MX_TIM1_Init+0x174>)
 8001b0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b10:	2277      	movs	r2, #119	@ 0x77
 8001b12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b48      	ldr	r3, [pc, #288]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001b1a:	4b47      	ldr	r3, [pc, #284]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b1c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b45      	ldr	r3, [pc, #276]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b28:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b42      	ldr	r3, [pc, #264]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b34:	4840      	ldr	r0, [pc, #256]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b36:	f005 f9d2 	bl	8006ede <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b40:	f000 fa7c 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b48:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4839      	ldr	r0, [pc, #228]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b52:	f005 fe1f 	bl	8007794 <HAL_TIM_ConfigClockSource>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b5c:	f000 fa6e 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b60:	4835      	ldr	r0, [pc, #212]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b62:	f005 fa8b 	bl	800707c <HAL_TIM_PWM_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b6c:	f000 fa66 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b80:	4619      	mov	r1, r3
 8001b82:	482d      	ldr	r0, [pc, #180]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001b84:	f006 fb60 	bl	8008248 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b8e:	f000 fa55 	bl	800203c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b92:	2360      	movs	r3, #96	@ 0x60
 8001b94:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1500;
 8001b96:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481f      	ldr	r0, [pc, #124]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001bba:	f005 fcd7 	bl	800756c <HAL_TIM_PWM_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001bc4:	f000 fa3a 	bl	800203c <Error_Handler>
  }
  sConfigOC.Pulse = 1500-1;
 8001bc8:	f240 53db 	movw	r3, #1499	@ 0x5db
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4818      	ldr	r0, [pc, #96]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001bd8:	f005 fcc8 	bl	800756c <HAL_TIM_PWM_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001be2:	f000 fa2b 	bl	800203c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001c1c:	f006 fba2 	bl	8008364 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001c26:	f000 fa09 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c2a:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <MX_TIM1_Init+0x170>)
 8001c2c:	f000 fe46 	bl	80028bc <HAL_TIM_MspPostInit>

}
 8001c30:	bf00      	nop
 8001c32:	3768      	adds	r7, #104	@ 0x68
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	240003d0 	.word	0x240003d0
 8001c3c:	40010000 	.word	0x40010000

08001c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c68:	f240 321f 	movw	r2, #799	@ 0x31f
 8001c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c88:	4813      	ldr	r0, [pc, #76]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c8a:	f005 f928 	bl	8006ede <HAL_TIM_Base_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c94:	f000 f9d2 	bl	800203c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001ca6:	f005 fd75 	bl	8007794 <HAL_TIM_ConfigClockSource>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001cb0:	f000 f9c4 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001cc2:	f006 fac1 	bl	8008248 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ccc:	f000 f9b6 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2400041c 	.word	0x2400041c

08001cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001ce2:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <MX_USART2_UART_Init+0x94>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d24:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d26:	f006 fbb9 	bl	800849c <HAL_UART_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d30:	f000 f984 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d34:	2100      	movs	r1, #0
 8001d36:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d38:	f007 fbc1 	bl	80094be <HAL_UARTEx_SetTxFifoThreshold>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d42:	f000 f97b 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d46:	2100      	movs	r1, #0
 8001d48:	4808      	ldr	r0, [pc, #32]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d4a:	f007 fbf6 	bl	800953a <HAL_UARTEx_SetRxFifoThreshold>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d54:	f000 f972 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <MX_USART2_UART_Init+0x90>)
 8001d5a:	f007 fb77 	bl	800944c <HAL_UARTEx_DisableFifoMode>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d64:	f000 f96a 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	24000468 	.word	0x24000468
 8001d70:	40004400 	.word	0x40004400

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d90:	4a20      	ldr	r2, [pc, #128]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	4a11      	ldr	r2, [pc, #68]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <MX_GPIO_Init+0xa0>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2160      	movs	r1, #96	@ 0x60
 8001de8:	480b      	ldr	r0, [pc, #44]	@ (8001e18 <MX_GPIO_Init+0xa4>)
 8001dea:	f001 fba5 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 8001dee:	2360      	movs	r3, #96	@ 0x60
 8001df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	4619      	mov	r1, r3
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <MX_GPIO_Init+0xa4>)
 8001e06:	f001 f9e7 	bl	80031d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e0a:	bf00      	nop
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	58024400 	.word	0x58024400
 8001e18:	58020000 	.word	0x58020000

08001e1c <setDutyCH1>:
    double dt = current_time - previous_time;
    previous_time = current_time;  // Update for the next call
    return dt;
}

uint16_t setDutyCH1(TIM_HandleTypeDef *htim, float angle) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	ed87 0a00 	vstr	s0, [r7]
    // Limit range from -90 to 90 degrees
    if (angle < -90.0f) angle = -90.0f;
 8001e28:	edd7 7a00 	vldr	s15, [r7]
 8001e2c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001ea8 <setDutyCH1+0x8c>
 8001e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d501      	bpl.n	8001e3e <setDutyCH1+0x22>
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eac <setDutyCH1+0x90>)
 8001e3c:	603b      	str	r3, [r7, #0]
    if (angle > 90.0f) angle = 90.0f;
 8001e3e:	edd7 7a00 	vldr	s15, [r7]
 8001e42:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001eb0 <setDutyCH1+0x94>
 8001e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	dd01      	ble.n	8001e54 <setDutyCH1+0x38>
 8001e50:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <setDutyCH1+0x98>)
 8001e52:	603b      	str	r3, [r7, #0]

    // Convert angle to a range between 0-180 degrees (just for testing purposes)
    float transformed_angle = angle + 90.0f;
 8001e54:	edd7 7a00 	vldr	s15, [r7]
 8001e58:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001eb0 <setDutyCH1+0x94>
 8001e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e60:	edc7 7a05 	vstr	s15, [r7, #20]

    // Calculate the PWM pulse width in microseconds (1000 µs to 2000 µs; total period is 20000 µs)
    // Assume minimum pulse is 0.6ms and the maximum pulse is 2.4ms
    float pulseTime = (transformed_angle * 1800.0f) / 180.0f + 600.0f;
 8001e64:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e68:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001eb8 <setDutyCH1+0x9c>
 8001e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e70:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001ebc <setDutyCH1+0xa0>
 8001e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e78:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001ec0 <setDutyCH1+0xa4>
 8001e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e80:	edc7 7a04 	vstr	s15, [r7, #16]

    // Convert pulse width in µs to CCR value
    uint16_t ccrValue = (uint16_t)(pulseTime);
 8001e84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8c:	ee17 3a90 	vmov	r3, s15
 8001e90:	81fb      	strh	r3, [r7, #14]

    htim->Instance->CCR1 = ccrValue;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	89fa      	ldrh	r2, [r7, #14]
 8001e98:	635a      	str	r2, [r3, #52]	@ 0x34
    return ccrValue;
 8001e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	c2b40000 	.word	0xc2b40000
 8001eac:	c2b40000 	.word	0xc2b40000
 8001eb0:	42b40000 	.word	0x42b40000
 8001eb4:	42b40000 	.word	0x42b40000
 8001eb8:	44e10000 	.word	0x44e10000
 8001ebc:	43340000 	.word	0x43340000
 8001ec0:	44160000 	.word	0x44160000

08001ec4 <setDutyCH2>:

uint16_t setDutyCH2(TIM_HandleTypeDef *htim, float angle) {
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	ed87 0a00 	vstr	s0, [r7]
    // Limit range from -90 to 90 degrees
    if (angle < -90.0f) angle = -90.0f;
 8001ed0:	edd7 7a00 	vldr	s15, [r7]
 8001ed4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001f50 <setDutyCH2+0x8c>
 8001ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d501      	bpl.n	8001ee6 <setDutyCH2+0x22>
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <setDutyCH2+0x90>)
 8001ee4:	603b      	str	r3, [r7, #0]
    if (angle > 90.0f) angle = 90.0f;
 8001ee6:	edd7 7a00 	vldr	s15, [r7]
 8001eea:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001f58 <setDutyCH2+0x94>
 8001eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	dd01      	ble.n	8001efc <setDutyCH2+0x38>
 8001ef8:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <setDutyCH2+0x98>)
 8001efa:	603b      	str	r3, [r7, #0]

    // Convert angle to a range between 0-180 degrees
    float transformed_angle = angle + 90.0f;
 8001efc:	edd7 7a00 	vldr	s15, [r7]
 8001f00:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001f58 <setDutyCH2+0x94>
 8001f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f08:	edc7 7a05 	vstr	s15, [r7, #20]

    // Calculate the PWM pulse width in microseconds (1000 µs to 2000 µs; total period is 20000 µs)
    // Assume minimum pulse is 0.6ms and the maximum pulse is 2.4ms
    float pulseTime = (transformed_angle * 1800.0f) / 180.0f + 600.0f;
 8001f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f10:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001f60 <setDutyCH2+0x9c>
 8001f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f18:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001f64 <setDutyCH2+0xa0>
 8001f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f20:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001f68 <setDutyCH2+0xa4>
 8001f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f28:	edc7 7a04 	vstr	s15, [r7, #16]

    // Convert pulse width in µs to CCR value
    uint16_t ccrValue = (uint16_t)(pulseTime);
 8001f2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f34:	ee17 3a90 	vmov	r3, s15
 8001f38:	81fb      	strh	r3, [r7, #14]

    htim->Instance->CCR2 = ccrValue;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	89fa      	ldrh	r2, [r7, #14]
 8001f40:	639a      	str	r2, [r3, #56]	@ 0x38
    return ccrValue;
 8001f42:	89fb      	ldrh	r3, [r7, #14]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	c2b40000 	.word	0xc2b40000
 8001f54:	c2b40000 	.word	0xc2b40000
 8001f58:	42b40000 	.word	0x42b40000
 8001f5c:	42b40000 	.word	0x42b40000
 8001f60:	44e10000 	.word	0x44e10000
 8001f64:	43340000 	.word	0x43340000
 8001f68:	44160000 	.word	0x44160000

08001f6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d102      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
	}
	if (htim == &htim1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a07      	ldr	r2, [pc, #28]	@ (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d102      	bne.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		update_ccr = 1;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
	}
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	2400041c 	.word	0x2400041c
 8001fa0:	240004fc 	.word	0x240004fc
 8001fa4:	240003d0 	.word	0x240003d0
 8001fa8:	240004fd 	.word	0x240004fd

08001fac <_write>:
int _write(int file, char *ptr, int len)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e009      	b.n	8001fd2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	60ba      	str	r2, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fbc2 	bl	8001750 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dbf1      	blt.n	8001fbe <_write+0x12>
	}
	return len;
 8001fda:	687b      	ldr	r3, [r7, #4]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001fea:	463b      	mov	r3, r7
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001ff6:	f001 f877 	bl	80030e8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002006:	231f      	movs	r3, #31
 8002008:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800200a:	2387      	movs	r3, #135	@ 0x87
 800200c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800200e:	2300      	movs	r3, #0
 8002010:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002012:	2300      	movs	r3, #0
 8002014:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002016:	2301      	movs	r3, #1
 8002018:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800201a:	2301      	movs	r3, #1
 800201c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002026:	463b      	mov	r3, r7
 8002028:	4618      	mov	r0, r3
 800202a:	f001 f895 	bl	8003158 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800202e:	2004      	movs	r0, #4
 8002030:	f001 f872 	bl	8003118 <HAL_MPU_Enable>

}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <Error_Handler+0x8>

08002048 <mpu9250_write_reg>:
Mag_CalibData_t mag_calibration_data;

float quat[4];

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	2120      	movs	r1, #32
 800205c:	480b      	ldr	r0, [pc, #44]	@ (800208c <mpu9250_write_reg+0x44>)
 800205e:	f001 fa6b 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8002062:	1df9      	adds	r1, r7, #7
 8002064:	2364      	movs	r3, #100	@ 0x64
 8002066:	2201      	movs	r2, #1
 8002068:	4809      	ldr	r0, [pc, #36]	@ (8002090 <mpu9250_write_reg+0x48>)
 800206a:	f004 f9ef 	bl	800644c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800206e:	1db9      	adds	r1, r7, #6
 8002070:	2364      	movs	r3, #100	@ 0x64
 8002072:	2201      	movs	r2, #1
 8002074:	4806      	ldr	r0, [pc, #24]	@ (8002090 <mpu9250_write_reg+0x48>)
 8002076:	f004 f9e9 	bl	800644c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	2120      	movs	r1, #32
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <mpu9250_write_reg+0x44>)
 8002080:	f001 fa5a 	bl	8003538 <HAL_GPIO_WritePin>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	58020000 	.word	0x58020000
 8002090:	240002c0 	.word	0x240002c0

08002094 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
 80020a0:	4613      	mov	r3, r2
 80020a2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2120      	movs	r1, #32
 80020b2:	4814      	ldr	r0, [pc, #80]	@ (8002104 <mpu9250_read_reg+0x70>)
 80020b4:	f001 fa40 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80020b8:	f107 010e 	add.w	r1, r7, #14
 80020bc:	2364      	movs	r3, #100	@ 0x64
 80020be:	2201      	movs	r2, #1
 80020c0:	4811      	ldr	r0, [pc, #68]	@ (8002108 <mpu9250_read_reg+0x74>)
 80020c2:	f004 f9c3 	bl	800644c <HAL_SPI_Transmit>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <mpu9250_read_reg+0x40>
		Error_Handler();
 80020d0:	f7ff ffb4 	bl	800203c <Error_Handler>
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 80020d4:	79bb      	ldrb	r3, [r7, #6]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	2364      	movs	r3, #100	@ 0x64
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	480a      	ldr	r0, [pc, #40]	@ (8002108 <mpu9250_read_reg+0x74>)
 80020de:	f004 fba3 	bl	8006828 <HAL_SPI_Receive>
 80020e2:	4603      	mov	r3, r0
 80020e4:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <mpu9250_read_reg+0x5c>
		Error_Handler();
 80020ec:	f7ff ffa6 	bl	800203c <Error_Handler>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2120      	movs	r1, #32
 80020f4:	4803      	ldr	r0, [pc, #12]	@ (8002104 <mpu9250_read_reg+0x70>)
 80020f6:	f001 fa1f 	bl	8003538 <HAL_GPIO_WritePin>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	58020000 	.word	0x58020000
 8002108:	240002c0 	.word	0x240002c0

0800210c <mpu9250_setup>:

void mpu9250_setup()
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8002110:	2105      	movs	r1, #5
 8002112:	201a      	movs	r0, #26
 8002114:	f7ff ff98 	bl	8002048 <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 8002118:	2110      	movs	r1, #16
 800211a:	201c      	movs	r0, #28
 800211c:	f7ff ff94 	bl	8002048 <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8002120:	2108      	movs	r1, #8
 8002122:	201b      	movs	r0, #27
 8002124:	f7ff ff90 	bl	8002048 <mpu9250_write_reg>
	mpu9250_calibrateGyro(1500);
 8002128:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800212c:	f000 f814 	bl	8002158 <mpu9250_calibrateGyro>
	quat[0] = 1.0f;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <mpu9250_setup+0x48>)
 8002132:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002136:	601a      	str	r2, [r3, #0]
	quat[1] = 0.0f;
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <mpu9250_setup+0x48>)
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
	quat[2] = 0.0f;
 8002140:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <mpu9250_setup+0x48>)
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
	quat[3] = 0.0f;
 8002148:	4b02      	ldr	r3, [pc, #8]	@ (8002154 <mpu9250_setup+0x48>)
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
//	// magnetometer setup
//	mpu9250_write_reg(0x6A, 0x20);
//	mpu9250_write_reg(0x24, 0x0D);
//	mpu9250_write_reg(0x25, 0x8C);
//	mpu9250_write_reg(0x26, 0x03);
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	24000554 	.word	0x24000554

08002158 <mpu9250_calibrateGyro>:
    mpu9250_write_reg(0x26, 0x03);                   // Start at HXL register
    mpu9250_write_reg(0x27, 0x87);                   // Enable reading 7 bytes (0x80 | 7)
}

void mpu9250_calibrateGyro(uint16_t numCalPoints)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <mpu9250_calibrateGyro+0x20>
    {
        numCalPoints = 1;
 8002174:	2301      	movs	r3, #1
 8002176:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8002178:	2300      	movs	r3, #0
 800217a:	817b      	strh	r3, [r7, #10]
 800217c:	e01c      	b.n	80021b8 <mpu9250_calibrateGyro+0x60>
    {
        mpu9250_getRawData();
 800217e:	f000 f855 	bl	800222c <mpu9250_getRawData>
        x += imu_raw_data.gyro_x;
 8002182:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <mpu9250_calibrateGyro+0xcc>)
 8002184:	88db      	ldrh	r3, [r3, #6]
 8002186:	b21b      	sxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
        y += imu_raw_data.gyro_y;
 8002190:	4b24      	ldr	r3, [pc, #144]	@ (8002224 <mpu9250_calibrateGyro+0xcc>)
 8002192:	891b      	ldrh	r3, [r3, #8]
 8002194:	b21b      	sxth	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        z += imu_raw_data.gyro_z;
 800219e:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <mpu9250_calibrateGyro+0xcc>)
 80021a0:	895b      	ldrh	r3, [r3, #10]
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4413      	add	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 fe5b 	bl	8002e68 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	3301      	adds	r3, #1
 80021b6:	817b      	strh	r3, [r7, #10]
 80021b8:	897a      	ldrh	r2, [r7, #10]
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d3de      	bcc.n	800217e <mpu9250_calibrateGyro+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    imu_processed_data.gyro_offX = (float)x / (float)numCalPoints;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d8:	4b13      	ldr	r3, [pc, #76]	@ (8002228 <mpu9250_calibrateGyro+0xd0>)
 80021da:	edc3 7a00 	vstr	s15, [r3]
    imu_processed_data.gyro_offY = (float)y / (float)numCalPoints;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <mpu9250_calibrateGyro+0xd0>)
 80021f8:	edc3 7a01 	vstr	s15, [r3, #4]
    imu_processed_data.gyro_offZ = (float)z / (float)numCalPoints;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002214:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <mpu9250_calibrateGyro+0xd0>)
 8002216:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	24000504 	.word	0x24000504
 8002228:	24000518 	.word	0x24000518

0800222c <mpu9250_getRawData>:



void mpu9250_getRawData()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8002232:	463b      	mov	r3, r7
 8002234:	2206      	movs	r2, #6
 8002236:	4619      	mov	r1, r3
 8002238:	203b      	movs	r0, #59	@ 0x3b
 800223a:	f7ff ff2b 	bl	8002094 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 800223e:	783b      	ldrb	r3, [r7, #0]
 8002240:	b21b      	sxth	r3, r3
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21a      	sxth	r2, r3
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	b21b      	sxth	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b21a      	sxth	r2, r3
 800224e:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <mpu9250_getRawData+0xa0>)
 8002250:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8002252:	78bb      	ldrb	r3, [r7, #2]
 8002254:	b21b      	sxth	r3, r3
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	b21a      	sxth	r2, r3
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	b21b      	sxth	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b21a      	sxth	r2, r3
 8002262:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <mpu9250_getRawData+0xa0>)
 8002264:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8002266:	793b      	ldrb	r3, [r7, #4]
 8002268:	b21b      	sxth	r3, r3
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b21a      	sxth	r2, r3
 800226e:	797b      	ldrb	r3, [r7, #5]
 8002270:	b21b      	sxth	r3, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	b21a      	sxth	r2, r3
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <mpu9250_getRawData+0xa0>)
 8002278:	809a      	strh	r2, [r3, #4]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 800227a:	463b      	mov	r3, r7
 800227c:	2206      	movs	r2, #6
 800227e:	4619      	mov	r1, r3
 8002280:	2043      	movs	r0, #67	@ 0x43
 8002282:	f7ff ff07 	bl	8002094 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8002286:	783b      	ldrb	r3, [r7, #0]
 8002288:	b21b      	sxth	r3, r3
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	787b      	ldrb	r3, [r7, #1]
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21a      	sxth	r2, r3
 8002296:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <mpu9250_getRawData+0xa0>)
 8002298:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 800229a:	78bb      	ldrb	r3, [r7, #2]
 800229c:	b21b      	sxth	r3, r3
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b21a      	sxth	r2, r3
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <mpu9250_getRawData+0xa0>)
 80022ac:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 80022ae:	793b      	ldrb	r3, [r7, #4]
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	797b      	ldrb	r3, [r7, #5]
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b21a      	sxth	r2, r3
 80022be:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <mpu9250_getRawData+0xa0>)
 80022c0:	815a      	strh	r2, [r3, #10]
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	24000504 	.word	0x24000504

080022d0 <mpu9250_getProcessedAngle>:

void mpu9250_getProcessedAngle()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
	  mpu9250_getRawData();
 80022d6:	f7ff ffa9 	bl	800222c <mpu9250_getRawData>

	  imu_processed_data.accel_x = ((float)imu_raw_data.accel_x/4096.0) * 9.81;
 80022da:	4bc3      	ldr	r3, [pc, #780]	@ (80025e8 <mpu9250_getProcessedAngle+0x318>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b21b      	sxth	r3, r3
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022ec:	ed9f 5bb2 	vldr	d5, [pc, #712]	@ 80025b8 <mpu9250_getProcessedAngle+0x2e8>
 80022f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022f4:	ed9f 6bb2 	vldr	d6, [pc, #712]	@ 80025c0 <mpu9250_getProcessedAngle+0x2f0>
 80022f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002300:	4bba      	ldr	r3, [pc, #744]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 8002302:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.accel_y = ((float)imu_raw_data.accel_y/4096.0) * 9.81;
 8002306:	4bb8      	ldr	r3, [pc, #736]	@ (80025e8 <mpu9250_getProcessedAngle+0x318>)
 8002308:	885b      	ldrh	r3, [r3, #2]
 800230a:	b21b      	sxth	r3, r3
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002314:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002318:	ed9f 5ba7 	vldr	d5, [pc, #668]	@ 80025b8 <mpu9250_getProcessedAngle+0x2e8>
 800231c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002320:	ed9f 6ba7 	vldr	d6, [pc, #668]	@ 80025c0 <mpu9250_getProcessedAngle+0x2f0>
 8002324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002328:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800232c:	4baf      	ldr	r3, [pc, #700]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 800232e:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.accel_z = ((float)imu_raw_data.accel_z/4096.0) * 9.81;
 8002332:	4bad      	ldr	r3, [pc, #692]	@ (80025e8 <mpu9250_getProcessedAngle+0x318>)
 8002334:	889b      	ldrh	r3, [r3, #4]
 8002336:	b21b      	sxth	r3, r3
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002340:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002344:	ed9f 5b9c 	vldr	d5, [pc, #624]	@ 80025b8 <mpu9250_getProcessedAngle+0x2e8>
 8002348:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800234c:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 80025c0 <mpu9250_getProcessedAngle+0x2f0>
 8002350:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002354:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002358:	4ba4      	ldr	r3, [pc, #656]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 800235a:	edc3 7a05 	vstr	s15, [r3, #20]
//	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0

	  imu_processed_data.gyro_x = ((float)imu_raw_data.gyro_x - imu_processed_data.gyro_offX)/65.5 * M_PI/180.0f;
 800235e:	4ba2      	ldr	r3, [pc, #648]	@ (80025e8 <mpu9250_getProcessedAngle+0x318>)
 8002360:	88db      	ldrh	r3, [r3, #6]
 8002362:	b21b      	sxth	r3, r3
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236c:	4b9f      	ldr	r3, [pc, #636]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002376:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800237a:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 80025c8 <mpu9250_getProcessedAngle+0x2f8>
 800237e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002382:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 80025d0 <mpu9250_getProcessedAngle+0x300>
 8002386:	ee27 6b06 	vmul.f64	d6, d7, d6
 800238a:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 80025d8 <mpu9250_getProcessedAngle+0x308>
 800238e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002392:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002396:	4b95      	ldr	r3, [pc, #596]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 8002398:	edc3 7a06 	vstr	s15, [r3, #24]
	  imu_processed_data.gyro_y = ((float)imu_raw_data.gyro_y - imu_processed_data.gyro_offY)/65.5 * M_PI/180.0f;;
 800239c:	4b92      	ldr	r3, [pc, #584]	@ (80025e8 <mpu9250_getProcessedAngle+0x318>)
 800239e:	891b      	ldrh	r3, [r3, #8]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023aa:	4b90      	ldr	r3, [pc, #576]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 80023ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80023b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80023b8:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 80025c8 <mpu9250_getProcessedAngle+0x2f8>
 80023bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023c0:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 80025d0 <mpu9250_getProcessedAngle+0x300>
 80023c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023c8:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 80025d8 <mpu9250_getProcessedAngle+0x308>
 80023cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023d4:	4b85      	ldr	r3, [pc, #532]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 80023d6:	edc3 7a07 	vstr	s15, [r3, #28]
	  imu_processed_data.gyro_z = ((float)imu_raw_data.gyro_z - imu_processed_data.gyro_offZ)/65.5 * M_PI/180.0f;;
 80023da:	4b83      	ldr	r3, [pc, #524]	@ (80025e8 <mpu9250_getProcessedAngle+0x318>)
 80023dc:	895b      	ldrh	r3, [r3, #10]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e8:	4b80      	ldr	r3, [pc, #512]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 80023ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80023f6:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 80025c8 <mpu9250_getProcessedAngle+0x2f8>
 80023fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023fe:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 80025d0 <mpu9250_getProcessedAngle+0x300>
 8002402:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002406:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 80025d8 <mpu9250_getProcessedAngle+0x308>
 800240a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800240e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002412:	4b76      	ldr	r3, [pc, #472]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 8002414:	edc3 7a08 	vstr	s15, [r3, #32]
//	  mpu9250_read_reg(0x49, imu_data, sizeof(imu_data));
//	  imu_raw_data.mag_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
//	  imu_raw_data.mag_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
//	  imu_raw_data.mag_z = ((int16_t)imu_data[4]<<8) | imu_data[5];

	  MahonyAHRSupdateIMU(quat, imu_processed_data.gyro_x, imu_processed_data.gyro_y, imu_processed_data.gyro_z, imu_processed_data.accel_x, imu_processed_data.accel_y ,imu_processed_data.accel_z);
 8002418:	4b74      	ldr	r3, [pc, #464]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 800241a:	edd3 7a06 	vldr	s15, [r3, #24]
 800241e:	4b73      	ldr	r3, [pc, #460]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 8002420:	ed93 7a07 	vldr	s14, [r3, #28]
 8002424:	4b71      	ldr	r3, [pc, #452]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 8002426:	edd3 6a08 	vldr	s13, [r3, #32]
 800242a:	4b70      	ldr	r3, [pc, #448]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 800242c:	ed93 6a03 	vldr	s12, [r3, #12]
 8002430:	4b6e      	ldr	r3, [pc, #440]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 8002432:	edd3 5a04 	vldr	s11, [r3, #16]
 8002436:	4b6d      	ldr	r3, [pc, #436]	@ (80025ec <mpu9250_getProcessedAngle+0x31c>)
 8002438:	ed93 5a05 	vldr	s10, [r3, #20]
 800243c:	eef0 2a45 	vmov.f32	s5, s10
 8002440:	eeb0 2a65 	vmov.f32	s4, s11
 8002444:	eef0 1a46 	vmov.f32	s3, s12
 8002448:	eeb0 1a66 	vmov.f32	s2, s13
 800244c:	eef0 0a47 	vmov.f32	s1, s14
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	4866      	ldr	r0, [pc, #408]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 8002456:	f7fe fb25 	bl	8000aa4 <MahonyAHRSupdateIMU>

	    /* Quternion to Euler */
	  float radPitch = asinf(-2.0f * (quat[1] * quat[3] - quat[0] * quat[2]));
 800245a:	4b65      	ldr	r3, [pc, #404]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 800245c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002460:	4b63      	ldr	r3, [pc, #396]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 8002462:	edd3 7a03 	vldr	s15, [r3, #12]
 8002466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246a:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 800246c:	edd3 6a00 	vldr	s13, [r3]
 8002470:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 8002472:	edd3 7a02 	vldr	s15, [r3, #8]
 8002476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8002482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002486:	eeb0 0a67 	vmov.f32	s0, s15
 800248a:	f00b fb5b 	bl	800db44 <asinf>
 800248e:	ed87 0a03 	vstr	s0, [r7, #12]
	  float radRoll = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]), 2.0f * (quat[0] * quat[0] + quat[3] * quat[3]) - 1.0f);
 8002492:	4b57      	ldr	r3, [pc, #348]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 8002494:	ed93 7a00 	vldr	s14, [r3]
 8002498:	4b55      	ldr	r3, [pc, #340]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 800249a:	edd3 7a01 	vldr	s15, [r3, #4]
 800249e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a2:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 80024a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80024a8:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 80024aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80024ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80024ba:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 80024bc:	ed93 7a00 	vldr	s14, [r3]
 80024c0:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 80024cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80024d0:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 80024d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024ea:	eef0 0a67 	vmov.f32	s1, s15
 80024ee:	eeb0 0a46 	vmov.f32	s0, s12
 80024f2:	f00b fb53 	bl	800db9c <atan2f>
 80024f6:	ed87 0a02 	vstr	s0, [r7, #8]
	  float radYaw =  atan2f(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]), 2.0f * (quat[0] * quat[0] + quat[1] * quat[1]) - 1.0f);
 80024fa:	4b3d      	ldr	r3, [pc, #244]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 8002502:	edd3 7a03 	vldr	s15, [r3, #12]
 8002506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250a:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 800250c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002510:	4b37      	ldr	r3, [pc, #220]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 8002512:	edd3 7a02 	vldr	s15, [r3, #8]
 8002516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002522:	4b33      	ldr	r3, [pc, #204]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 8002524:	ed93 7a00 	vldr	s14, [r3]
 8002528:	4b31      	ldr	r3, [pc, #196]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002532:	4b2f      	ldr	r3, [pc, #188]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 8002534:	edd3 6a01 	vldr	s13, [r3, #4]
 8002538:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <mpu9250_getProcessedAngle+0x320>)
 800253a:	edd3 7a01 	vldr	s15, [r3, #4]
 800253e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002546:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800254a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800254e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002552:	eef0 0a67 	vmov.f32	s1, s15
 8002556:	eeb0 0a46 	vmov.f32	s0, s12
 800255a:	f00b fb1f 	bl	800db9c <atan2f>
 800255e:	ed87 0a01 	vstr	s0, [r7, #4]
	    /* Radian to Degree*/
	  imu_angles.pitch = radPitch * RAD_TO_DEG;
 8002562:	edd7 7a03 	vldr	s15, [r7, #12]
 8002566:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800256a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80025e0 <mpu9250_getProcessedAngle+0x310>
 800256e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002572:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002576:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <mpu9250_getProcessedAngle+0x324>)
 8002578:	edc3 7a01 	vstr	s15, [r3, #4]
	  imu_angles.roll = radRoll * RAD_TO_DEG;
 800257c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002580:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002584:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80025e0 <mpu9250_getProcessedAngle+0x310>
 8002588:	ee27 7b06 	vmul.f64	d7, d7, d6
 800258c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002590:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <mpu9250_getProcessedAngle+0x324>)
 8002592:	edc3 7a00 	vstr	s15, [r3]
	  imu_angles.yaw = radYaw * RAD_TO_DEG;
 8002596:	edd7 7a01 	vldr	s15, [r7, #4]
 800259a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800259e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80025e0 <mpu9250_getProcessedAngle+0x310>
 80025a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <mpu9250_getProcessedAngle+0x324>)
 80025ac:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	00000000 	.word	0x00000000
 80025bc:	40b00000 	.word	0x40b00000
 80025c0:	51eb851f 	.word	0x51eb851f
 80025c4:	40239eb8 	.word	0x40239eb8
 80025c8:	00000000 	.word	0x00000000
 80025cc:	40506000 	.word	0x40506000
 80025d0:	54442d18 	.word	0x54442d18
 80025d4:	400921fb 	.word	0x400921fb
 80025d8:	00000000 	.word	0x00000000
 80025dc:	40668000 	.word	0x40668000
 80025e0:	1a63c1f8 	.word	0x1a63c1f8
 80025e4:	404ca5dc 	.word	0x404ca5dc
 80025e8:	24000504 	.word	0x24000504
 80025ec:	24000518 	.word	0x24000518
 80025f0:	24000554 	.word	0x24000554
 80025f4:	24000548 	.word	0x24000548

080025f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_MspInit+0x30>)
 8002600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002604:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <HAL_MspInit+0x30>)
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_MspInit+0x30>)
 8002610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	58024400 	.word	0x58024400

0800262c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b0be      	sub	sp, #248	@ 0xf8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002644:	f107 0320 	add.w	r3, r7, #32
 8002648:	22c0      	movs	r2, #192	@ 0xc0
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f008 fd55 	bl	800b0fc <memset>
  if(hspi->Instance==SPI1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a71      	ldr	r2, [pc, #452]	@ (800281c <HAL_SPI_MspInit+0x1f0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d16a      	bne.n	8002732 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800265c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266e:	f107 0320 	add.w	r3, r7, #32
 8002672:	4618      	mov	r0, r3
 8002674:	f001 ff9a 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800267e:	f7ff fcdd 	bl	800203c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002682:	4b67      	ldr	r3, [pc, #412]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 8002684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002688:	4a65      	ldr	r2, [pc, #404]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 800268a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800268e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002692:	4b63      	ldr	r3, [pc, #396]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 8002694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80026a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026be:	4b58      	ldr	r3, [pc, #352]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80026c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c4:	4a56      	ldr	r2, [pc, #344]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026ce:	4b54      	ldr	r3, [pc, #336]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80026d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026f4:	2305      	movs	r3, #5
 80026f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80026fe:	4619      	mov	r1, r3
 8002700:	4848      	ldr	r0, [pc, #288]	@ (8002824 <HAL_SPI_MspInit+0x1f8>)
 8002702:	f000 fd69 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002706:	2318      	movs	r3, #24
 8002708:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800271e:	2305      	movs	r3, #5
 8002720:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002728:	4619      	mov	r1, r3
 800272a:	483f      	ldr	r0, [pc, #252]	@ (8002828 <HAL_SPI_MspInit+0x1fc>)
 800272c:	f000 fd54 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002730:	e070      	b.n	8002814 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a3d      	ldr	r2, [pc, #244]	@ (800282c <HAL_SPI_MspInit+0x200>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d16b      	bne.n	8002814 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800273c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800274e:	f107 0320 	add.w	r3, r7, #32
 8002752:	4618      	mov	r0, r3
 8002754:	f001 ff2a 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 800275e:	f7ff fc6d 	bl	800203c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002762:	4b2f      	ldr	r3, [pc, #188]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 8002764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002768:	4a2d      	ldr	r2, [pc, #180]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 800276a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800276e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002772:	4b2b      	ldr	r3, [pc, #172]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 8002774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002786:	4a26      	ldr	r2, [pc, #152]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002790:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <HAL_SPI_MspInit+0x1f4>)
 80027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027bc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80027c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027d6:	2305      	movs	r3, #5
 80027d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4811      	ldr	r0, [pc, #68]	@ (8002828 <HAL_SPI_MspInit+0x1fc>)
 80027e4:	f000 fcf8 	bl	80031d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002802:	2305      	movs	r3, #5
 8002804:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800280c:	4619      	mov	r1, r3
 800280e:	4805      	ldr	r0, [pc, #20]	@ (8002824 <HAL_SPI_MspInit+0x1f8>)
 8002810:	f000 fce2 	bl	80031d8 <HAL_GPIO_Init>
}
 8002814:	bf00      	nop
 8002816:	37f8      	adds	r7, #248	@ 0xf8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40013000 	.word	0x40013000
 8002820:	58024400 	.word	0x58024400
 8002824:	58020000 	.word	0x58020000
 8002828:	58020400 	.word	0x58020400
 800282c:	40003800 	.word	0x40003800

08002830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <HAL_TIM_Base_MspInit+0x84>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d117      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002842:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_TIM_Base_MspInit+0x88>)
 8002844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002848:	4a1b      	ldr	r2, [pc, #108]	@ (80028b8 <HAL_TIM_Base_MspInit+0x88>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002852:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_TIM_Base_MspInit+0x88>)
 8002854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	2019      	movs	r0, #25
 8002866:	f000 fc0a 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800286a:	2019      	movs	r0, #25
 800286c:	f000 fc21 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002870:	e01b      	b.n	80028aa <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800287a:	d116      	bne.n	80028aa <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287c:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <HAL_TIM_Base_MspInit+0x88>)
 800287e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002882:	4a0d      	ldr	r2, [pc, #52]	@ (80028b8 <HAL_TIM_Base_MspInit+0x88>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <HAL_TIM_Base_MspInit+0x88>)
 800288e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	201c      	movs	r0, #28
 80028a0:	f000 fbed 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028a4:	201c      	movs	r0, #28
 80028a6:	f000 fc04 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	58024400 	.word	0x58024400

080028bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <HAL_TIM_MspPostInit+0x6c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d11f      	bne.n	800291e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <HAL_TIM_MspPostInit+0x70>)
 80028e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e4:	4a11      	ldr	r2, [pc, #68]	@ (800292c <HAL_TIM_MspPostInit+0x70>)
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ee:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <HAL_TIM_MspPostInit+0x70>)
 80028f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80028fc:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002900:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	4619      	mov	r1, r3
 8002918:	4805      	ldr	r0, [pc, #20]	@ (8002930 <HAL_TIM_MspPostInit+0x74>)
 800291a:	f000 fc5d 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800291e:	bf00      	nop
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40010000 	.word	0x40010000
 800292c:	58024400 	.word	0x58024400
 8002930:	58021000 	.word	0x58021000

08002934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0ba      	sub	sp, #232	@ 0xe8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	22c0      	movs	r2, #192	@ 0xc0
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f008 fbd1 	bl	800b0fc <memset>
  if(huart->Instance==USART2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a26      	ldr	r2, [pc, #152]	@ (80029f8 <HAL_UART_MspInit+0xc4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d145      	bne.n	80029f0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002964:	f04f 0202 	mov.w	r2, #2
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002976:	f107 0310 	add.w	r3, r7, #16
 800297a:	4618      	mov	r0, r3
 800297c:	f001 fe16 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002986:	f7ff fb59 	bl	800203c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800298a:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <HAL_UART_MspInit+0xc8>)
 800298c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002990:	4a1a      	ldr	r2, [pc, #104]	@ (80029fc <HAL_UART_MspInit+0xc8>)
 8002992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002996:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800299a:	4b18      	ldr	r3, [pc, #96]	@ (80029fc <HAL_UART_MspInit+0xc8>)
 800299c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <HAL_UART_MspInit+0xc8>)
 80029aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <HAL_UART_MspInit+0xc8>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029b8:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <HAL_UART_MspInit+0xc8>)
 80029ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029c6:	230c      	movs	r3, #12
 80029c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029de:	2307      	movs	r3, #7
 80029e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <HAL_UART_MspInit+0xcc>)
 80029ec:	f000 fbf4 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80029f0:	bf00      	nop
 80029f2:	37e8      	adds	r7, #232	@ 0xe8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40004400 	.word	0x40004400
 80029fc:	58024400 	.word	0x58024400
 8002a00:	58020000 	.word	0x58020000

08002a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <NMI_Handler+0x4>

08002a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <HardFault_Handler+0x4>

08002a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <MemManage_Handler+0x4>

08002a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5a:	f000 f9e5 	bl	8002e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a68:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <TIM1_UP_IRQHandler+0x10>)
 8002a6a:	f004 fc77 	bl	800735c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	240003d0 	.word	0x240003d0

08002a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a7c:	4802      	ldr	r0, [pc, #8]	@ (8002a88 <TIM2_IRQHandler+0x10>)
 8002a7e:	f004 fc6d 	bl	800735c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	2400041c 	.word	0x2400041c

08002a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return 1;
 8002a90:	2301      	movs	r3, #1
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_kill>:

int _kill(int pid, int sig)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa6:	f008 fb43 	bl	800b130 <__errno>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2216      	movs	r2, #22
 8002aae:	601a      	str	r2, [r3, #0]
  return -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_exit>:

void _exit (int status)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ffe7 	bl	8002a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ace:	bf00      	nop
 8002ad0:	e7fd      	b.n	8002ace <_exit+0x12>

08002ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e00a      	b.n	8002afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	4601      	mov	r1, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	60ba      	str	r2, [r7, #8]
 8002af0:	b2ca      	uxtb	r2, r1
 8002af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3301      	adds	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	dbf0      	blt.n	8002ae4 <_read+0x12>
  }

  return len;
 8002b02:	687b      	ldr	r3, [r7, #4]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b34:	605a      	str	r2, [r3, #4]
  return 0;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_isatty>:

int _isatty(int file)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b7c:	4a14      	ldr	r2, [pc, #80]	@ (8002bd0 <_sbrk+0x5c>)
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <_sbrk+0x60>)
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b88:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <_sbrk+0x64>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b90:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <_sbrk+0x64>)
 8002b92:	4a12      	ldr	r2, [pc, #72]	@ (8002bdc <_sbrk+0x68>)
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d207      	bcs.n	8002bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba4:	f008 fac4 	bl	800b130 <__errno>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	220c      	movs	r2, #12
 8002bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bb2:	e009      	b.n	8002bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <_sbrk+0x64>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a05      	ldr	r2, [pc, #20]	@ (8002bd8 <_sbrk+0x64>)
 8002bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	24080000 	.word	0x24080000
 8002bd4:	00000400 	.word	0x00000400
 8002bd8:	24000564 	.word	0x24000564
 8002bdc:	240006b8 	.word	0x240006b8

08002be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002be4:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <SystemInit+0xe4>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	4a36      	ldr	r2, [pc, #216]	@ (8002cc4 <SystemInit+0xe4>)
 8002bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bf4:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <SystemInit+0xe8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d807      	bhi.n	8002c10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c00:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <SystemInit+0xe8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 030f 	bic.w	r3, r3, #15
 8002c08:	4a2f      	ldr	r2, [pc, #188]	@ (8002cc8 <SystemInit+0xe8>)
 8002c0a:	f043 0307 	orr.w	r3, r3, #7
 8002c0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c10:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <SystemInit+0xec>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2d      	ldr	r2, [pc, #180]	@ (8002ccc <SystemInit+0xec>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <SystemInit+0xec>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <SystemInit+0xec>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4929      	ldr	r1, [pc, #164]	@ (8002ccc <SystemInit+0xec>)
 8002c28:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <SystemInit+0xf0>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c2e:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <SystemInit+0xe8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c3a:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <SystemInit+0xe8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 030f 	bic.w	r3, r3, #15
 8002c42:	4a21      	ldr	r2, [pc, #132]	@ (8002cc8 <SystemInit+0xe8>)
 8002c44:	f043 0307 	orr.w	r3, r3, #7
 8002c48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <SystemInit+0xec>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <SystemInit+0xec>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <SystemInit+0xec>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <SystemInit+0xec>)
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <SystemInit+0xf4>)
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <SystemInit+0xec>)
 8002c64:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd8 <SystemInit+0xf8>)
 8002c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c68:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <SystemInit+0xec>)
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cdc <SystemInit+0xfc>)
 8002c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <SystemInit+0xec>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c74:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <SystemInit+0xec>)
 8002c76:	4a19      	ldr	r2, [pc, #100]	@ (8002cdc <SystemInit+0xfc>)
 8002c78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <SystemInit+0xec>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c80:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <SystemInit+0xec>)
 8002c82:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <SystemInit+0xfc>)
 8002c84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c86:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <SystemInit+0xec>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <SystemInit+0xec>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0e      	ldr	r2, [pc, #56]	@ (8002ccc <SystemInit+0xec>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <SystemInit+0xec>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <SystemInit+0x100>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <SystemInit+0x104>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002caa:	d202      	bcs.n	8002cb2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002cac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <SystemInit+0x108>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cec <SystemInit+0x10c>)
 8002cb4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002cb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00
 8002cc8:	52002000 	.word	0x52002000
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002cd4:	02020200 	.word	0x02020200
 8002cd8:	01ff0000 	.word	0x01ff0000
 8002cdc:	01010280 	.word	0x01010280
 8002ce0:	5c001000 	.word	0x5c001000
 8002ce4:	ffff0000 	.word	0xffff0000
 8002ce8:	51008108 	.word	0x51008108
 8002cec:	52004000 	.word	0x52004000

08002cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002cf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cf4:	f7ff ff74 	bl	8002be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf8:	480c      	ldr	r0, [pc, #48]	@ (8002d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cfa:	490d      	ldr	r1, [pc, #52]	@ (8002d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d10:	4c0a      	ldr	r4, [pc, #40]	@ (8002d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f008 fa0d 	bl	800b13c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d22:	f7fe fd3d 	bl	80017a0 <main>
  bx  lr
 8002d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002d2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d30:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002d34:	080103c8 	.word	0x080103c8
  ldr r2, =_sbss
 8002d38:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002d3c:	240006b8 	.word	0x240006b8

08002d40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC3_IRQHandler>
	...

08002d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	f000 f98c 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d50:	f001 fa56 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <HAL_Init+0x68>)
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	4913      	ldr	r1, [pc, #76]	@ (8002db0 <HAL_Init+0x6c>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <HAL_Init+0x68>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	4a0e      	ldr	r2, [pc, #56]	@ (8002db0 <HAL_Init+0x6c>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	4a0b      	ldr	r2, [pc, #44]	@ (8002db4 <HAL_Init+0x70>)
 8002d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d88:	4a0b      	ldr	r2, [pc, #44]	@ (8002db8 <HAL_Init+0x74>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d8e:	200f      	movs	r0, #15
 8002d90:	f000 f814 	bl	8002dbc <HAL_InitTick>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e002      	b.n	8002da4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d9e:	f7ff fc2b 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	58024400 	.word	0x58024400
 8002db0:	0800e668 	.word	0x0800e668
 8002db4:	24000008 	.word	0x24000008
 8002db8:	24000004 	.word	0x24000004

08002dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002dc4:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <HAL_InitTick+0x60>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e021      	b.n	8002e14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002dd0:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <HAL_InitTick+0x64>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_InitTick+0x60>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f971 	bl	80030ce <HAL_SYSTICK_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00e      	b.n	8002e14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b0f      	cmp	r3, #15
 8002dfa:	d80a      	bhi.n	8002e12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e04:	f000 f93b 	bl	800307e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e08:	4a06      	ldr	r2, [pc, #24]	@ (8002e24 <HAL_InitTick+0x68>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	24000010 	.word	0x24000010
 8002e20:	24000004 	.word	0x24000004
 8002e24:	2400000c 	.word	0x2400000c

08002e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_IncTick+0x20>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <HAL_IncTick+0x24>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	4a04      	ldr	r2, [pc, #16]	@ (8002e4c <HAL_IncTick+0x24>)
 8002e3a:	6013      	str	r3, [r2, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	24000010 	.word	0x24000010
 8002e4c:	24000568 	.word	0x24000568

08002e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return uwTick;
 8002e54:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <HAL_GetTick+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	24000568 	.word	0x24000568

08002e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff ffee 	bl	8002e50 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e80:	d005      	beq.n	8002e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e82:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <HAL_Delay+0x44>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e8e:	bf00      	nop
 8002e90:	f7ff ffde 	bl	8002e50 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8f7      	bhi.n	8002e90 <HAL_Delay+0x28>
  {
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	24000010 	.word	0x24000010

08002eb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002eb4:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <HAL_GetREVID+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	5c001000 	.word	0x5c001000

08002ec8 <__NVIC_SetPriorityGrouping>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x40>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00
 8002f0c:	05fa0000 	.word	0x05fa0000

08002f10 <__NVIC_GetPriorityGrouping>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f14:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <__NVIC_GetPriorityGrouping+0x18>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	f003 0307 	and.w	r3, r3, #7
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_EnableIRQ>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db0b      	blt.n	8002f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4907      	ldr	r1, [pc, #28]	@ (8002f64 <__NVIC_EnableIRQ+0x38>)
 8002f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e100 	.word	0xe000e100

08002f68 <__NVIC_SetPriority>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db0a      	blt.n	8002f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	490c      	ldr	r1, [pc, #48]	@ (8002fb4 <__NVIC_SetPriority+0x4c>)
 8002f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f90:	e00a      	b.n	8002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4908      	ldr	r1, [pc, #32]	@ (8002fb8 <__NVIC_SetPriority+0x50>)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	761a      	strb	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <NVIC_EncodePriority>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	@ 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f1c3 0307 	rsb	r3, r3, #7
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	bf28      	it	cs
 8002fda:	2304      	movcs	r3, #4
 8002fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d902      	bls.n	8002fec <NVIC_EncodePriority+0x30>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3b03      	subs	r3, #3
 8002fea:	e000      	b.n	8002fee <NVIC_EncodePriority+0x32>
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	401a      	ands	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43d9      	mvns	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	4313      	orrs	r3, r2
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	@ 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <SysTick_Config>:
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003034:	d301      	bcc.n	800303a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303a:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <SysTick_Config+0x40>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003042:	210f      	movs	r1, #15
 8003044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003048:	f7ff ff8e 	bl	8002f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304c:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <SysTick_Config+0x40>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003052:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <SysTick_Config+0x40>)
 8003054:	2207      	movs	r2, #7
 8003056:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	e000e010 	.word	0xe000e010

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff29 	bl	8002ec8 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800308c:	f7ff ff40 	bl	8002f10 <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff90 	bl	8002fbc <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5f 	bl	8002f68 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff33 	bl	8002f2c <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa4 	bl	8003024 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80030ec:	f3bf 8f5f 	dmb	sy
}
 80030f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <HAL_MPU_Disable+0x28>)
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	4a06      	ldr	r2, [pc, #24]	@ (8003110 <HAL_MPU_Disable+0x28>)
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80030fe:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_MPU_Disable+0x2c>)
 8003100:	2200      	movs	r2, #0
 8003102:	605a      	str	r2, [r3, #4]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00
 8003114:	e000ed90 	.word	0xe000ed90

08003118 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003120:	4a0b      	ldr	r2, [pc, #44]	@ (8003150 <HAL_MPU_Enable+0x38>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_MPU_Enable+0x3c>)
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	4a09      	ldr	r2, [pc, #36]	@ (8003154 <HAL_MPU_Enable+0x3c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003136:	f3bf 8f4f 	dsb	sy
}
 800313a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800313c:	f3bf 8f6f 	isb	sy
}
 8003140:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed90 	.word	0xe000ed90
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	785a      	ldrb	r2, [r3, #1]
 8003164:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <HAL_MPU_ConfigRegion+0x7c>)
 8003166:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003168:	4b1a      	ldr	r3, [pc, #104]	@ (80031d4 <HAL_MPU_ConfigRegion+0x7c>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	4a19      	ldr	r2, [pc, #100]	@ (80031d4 <HAL_MPU_ConfigRegion+0x7c>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003174:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <HAL_MPU_ConfigRegion+0x7c>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7b1b      	ldrb	r3, [r3, #12]
 8003180:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	7adb      	ldrb	r3, [r3, #11]
 8003186:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003188:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7a9b      	ldrb	r3, [r3, #10]
 800318e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003190:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7b5b      	ldrb	r3, [r3, #13]
 8003196:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003198:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7b9b      	ldrb	r3, [r3, #14]
 800319e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80031a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7bdb      	ldrb	r3, [r3, #15]
 80031a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80031a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7a5b      	ldrb	r3, [r3, #9]
 80031ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80031b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7a1b      	ldrb	r3, [r3, #8]
 80031b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80031b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031c0:	4a04      	ldr	r2, [pc, #16]	@ (80031d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80031c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031c4:	6113      	str	r3, [r2, #16]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000ed90 	.word	0xe000ed90

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031e6:	4b89      	ldr	r3, [pc, #548]	@ (800340c <HAL_GPIO_Init+0x234>)
 80031e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031ea:	e194      	b.n	8003516 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8186 	beq.w	8003510 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d005      	beq.n	800321c <HAL_GPIO_Init+0x44>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d130      	bne.n	800327e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003252:	2201      	movs	r2, #1
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	f003 0201 	and.w	r2, r3, #1
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b03      	cmp	r3, #3
 8003288:	d017      	beq.n	80032ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d123      	bne.n	800330e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	08da      	lsrs	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3208      	adds	r2, #8
 80032ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	08da      	lsrs	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3208      	adds	r2, #8
 8003308:	69b9      	ldr	r1, [r7, #24]
 800330a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0203 	and.w	r2, r3, #3
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80e0 	beq.w	8003510 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003350:	4b2f      	ldr	r3, [pc, #188]	@ (8003410 <HAL_GPIO_Init+0x238>)
 8003352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003356:	4a2e      	ldr	r2, [pc, #184]	@ (8003410 <HAL_GPIO_Init+0x238>)
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003360:	4b2b      	ldr	r3, [pc, #172]	@ (8003410 <HAL_GPIO_Init+0x238>)
 8003362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800336e:	4a29      	ldr	r2, [pc, #164]	@ (8003414 <HAL_GPIO_Init+0x23c>)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	220f      	movs	r2, #15
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a20      	ldr	r2, [pc, #128]	@ (8003418 <HAL_GPIO_Init+0x240>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d052      	beq.n	8003440 <HAL_GPIO_Init+0x268>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1f      	ldr	r2, [pc, #124]	@ (800341c <HAL_GPIO_Init+0x244>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d031      	beq.n	8003406 <HAL_GPIO_Init+0x22e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_GPIO_Init+0x248>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d02b      	beq.n	8003402 <HAL_GPIO_Init+0x22a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003424 <HAL_GPIO_Init+0x24c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d025      	beq.n	80033fe <HAL_GPIO_Init+0x226>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <HAL_GPIO_Init+0x250>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01f      	beq.n	80033fa <HAL_GPIO_Init+0x222>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a1b      	ldr	r2, [pc, #108]	@ (800342c <HAL_GPIO_Init+0x254>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d019      	beq.n	80033f6 <HAL_GPIO_Init+0x21e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003430 <HAL_GPIO_Init+0x258>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_GPIO_Init+0x21a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a19      	ldr	r2, [pc, #100]	@ (8003434 <HAL_GPIO_Init+0x25c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00d      	beq.n	80033ee <HAL_GPIO_Init+0x216>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a18      	ldr	r2, [pc, #96]	@ (8003438 <HAL_GPIO_Init+0x260>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <HAL_GPIO_Init+0x212>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a17      	ldr	r2, [pc, #92]	@ (800343c <HAL_GPIO_Init+0x264>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_GPIO_Init+0x20e>
 80033e2:	2309      	movs	r3, #9
 80033e4:	e02d      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 80033e6:	230a      	movs	r3, #10
 80033e8:	e02b      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 80033ea:	2308      	movs	r3, #8
 80033ec:	e029      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 80033ee:	2307      	movs	r3, #7
 80033f0:	e027      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e025      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e023      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e021      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 80033fe:	2303      	movs	r3, #3
 8003400:	e01f      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 8003402:	2302      	movs	r3, #2
 8003404:	e01d      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 8003406:	2301      	movs	r3, #1
 8003408:	e01b      	b.n	8003442 <HAL_GPIO_Init+0x26a>
 800340a:	bf00      	nop
 800340c:	58000080 	.word	0x58000080
 8003410:	58024400 	.word	0x58024400
 8003414:	58000400 	.word	0x58000400
 8003418:	58020000 	.word	0x58020000
 800341c:	58020400 	.word	0x58020400
 8003420:	58020800 	.word	0x58020800
 8003424:	58020c00 	.word	0x58020c00
 8003428:	58021000 	.word	0x58021000
 800342c:	58021400 	.word	0x58021400
 8003430:	58021800 	.word	0x58021800
 8003434:	58021c00 	.word	0x58021c00
 8003438:	58022000 	.word	0x58022000
 800343c:	58022400 	.word	0x58022400
 8003440:	2300      	movs	r3, #0
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	f002 0203 	and.w	r2, r2, #3
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	4093      	lsls	r3, r2
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003452:	4938      	ldr	r1, [pc, #224]	@ (8003534 <HAL_GPIO_Init+0x35c>)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	3301      	adds	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	f47f ae63 	bne.w	80031ec <HAL_GPIO_Init+0x14>
  }
}
 8003526:	bf00      	nop
 8003528:	bf00      	nop
 800352a:	3724      	adds	r7, #36	@ 0x24
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	58000400 	.word	0x58000400

08003538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
 8003544:	4613      	mov	r3, r2
 8003546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003548:	787b      	ldrb	r3, [r7, #1]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003554:	e003      	b.n	800355e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	041a      	lsls	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	619a      	str	r2, [r3, #24]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003574:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <HAL_PWREx_ConfigSupply+0x70>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d00a      	beq.n	8003596 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003580:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <HAL_PWREx_ConfigSupply+0x70>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d001      	beq.n	8003592 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e01f      	b.n	80035d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e01d      	b.n	80035d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003596:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <HAL_PWREx_ConfigSupply+0x70>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 0207 	bic.w	r2, r3, #7
 800359e:	490f      	ldr	r1, [pc, #60]	@ (80035dc <HAL_PWREx_ConfigSupply+0x70>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035a6:	f7ff fc53 	bl	8002e50 <HAL_GetTick>
 80035aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035ac:	e009      	b.n	80035c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035ae:	f7ff fc4f 	bl	8002e50 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035bc:	d901      	bls.n	80035c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e007      	b.n	80035d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_PWREx_ConfigSupply+0x70>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ce:	d1ee      	bne.n	80035ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	58024800 	.word	0x58024800

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08c      	sub	sp, #48	@ 0x30
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f000 bc48 	b.w	8003e84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8088 	beq.w	8003712 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003602:	4b99      	ldr	r3, [pc, #612]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800360c:	4b96      	ldr	r3, [pc, #600]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	2b10      	cmp	r3, #16
 8003616:	d007      	beq.n	8003628 <HAL_RCC_OscConfig+0x48>
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	2b18      	cmp	r3, #24
 800361c:	d111      	bne.n	8003642 <HAL_RCC_OscConfig+0x62>
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d10c      	bne.n	8003642 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	4b8f      	ldr	r3, [pc, #572]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d06d      	beq.n	8003710 <HAL_RCC_OscConfig+0x130>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d169      	bne.n	8003710 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f000 bc21 	b.w	8003e84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x7a>
 800364c:	4b86      	ldr	r3, [pc, #536]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a85      	ldr	r2, [pc, #532]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e02e      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x9c>
 8003662:	4b81      	ldr	r3, [pc, #516]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a80      	ldr	r2, [pc, #512]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b7e      	ldr	r3, [pc, #504]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7d      	ldr	r2, [pc, #500]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003674:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e01d      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 8003686:	4b78      	ldr	r3, [pc, #480]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a77      	ldr	r2, [pc, #476]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b75      	ldr	r3, [pc, #468]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a74      	ldr	r2, [pc, #464]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 80036a0:	4b71      	ldr	r3, [pc, #452]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a70      	ldr	r2, [pc, #448]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6d      	ldr	r2, [pc, #436]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7ff fbc6 	bl	8002e50 <HAL_GetTick>
 80036c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7ff fbc2 	bl	8002e50 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e3d4      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036da:	4b63      	ldr	r3, [pc, #396]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7ff fbb2 	bl	8002e50 <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7ff fbae 	bl	8002e50 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e3c0      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003702:	4b59      	ldr	r3, [pc, #356]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x110>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80ca 	beq.w	80038b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003720:	4b51      	ldr	r3, [pc, #324]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003728:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800372a:	4b4f      	ldr	r3, [pc, #316]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_RCC_OscConfig+0x166>
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	2b18      	cmp	r3, #24
 800373a:	d156      	bne.n	80037ea <HAL_RCC_OscConfig+0x20a>
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d151      	bne.n	80037ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003746:	4b48      	ldr	r3, [pc, #288]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RCC_OscConfig+0x17e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e392      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800375e:	4b42      	ldr	r3, [pc, #264]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 0219 	bic.w	r2, r3, #25
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	493f      	ldr	r1, [pc, #252]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7ff fb6e 	bl	8002e50 <HAL_GetTick>
 8003774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003778:	f7ff fb6a 	bl	8002e50 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e37c      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378a:	4b37      	ldr	r3, [pc, #220]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	f7ff fb8b 	bl	8002eb0 <HAL_GetREVID>
 800379a:	4603      	mov	r3, r0
 800379c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d817      	bhi.n	80037d4 <HAL_RCC_OscConfig+0x1f4>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b40      	cmp	r3, #64	@ 0x40
 80037aa:	d108      	bne.n	80037be <HAL_RCC_OscConfig+0x1de>
 80037ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80037b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037bc:	e07a      	b.n	80038b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b2a      	ldr	r3, [pc, #168]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	031b      	lsls	r3, r3, #12
 80037cc:	4926      	ldr	r1, [pc, #152]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d2:	e06f      	b.n	80038b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b24      	ldr	r3, [pc, #144]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	4921      	ldr	r1, [pc, #132]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e8:	e064      	b.n	80038b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d047      	beq.n	8003882 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 0219 	bic.w	r2, r3, #25
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	491a      	ldr	r1, [pc, #104]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7ff fb24 	bl	8002e50 <HAL_GetTick>
 8003808:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380c:	f7ff fb20 	bl	8002e50 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e332      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800381e:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382a:	f7ff fb41 	bl	8002eb0 <HAL_GetREVID>
 800382e:	4603      	mov	r3, r0
 8003830:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003834:	4293      	cmp	r3, r2
 8003836:	d819      	bhi.n	800386c <HAL_RCC_OscConfig+0x28c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d108      	bne.n	8003852 <HAL_RCC_OscConfig+0x272>
 8003840:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003848:	4a07      	ldr	r2, [pc, #28]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 800384a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384e:	6053      	str	r3, [r2, #4]
 8003850:	e030      	b.n	80038b4 <HAL_RCC_OscConfig+0x2d4>
 8003852:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	031b      	lsls	r3, r3, #12
 8003860:	4901      	ldr	r1, [pc, #4]	@ (8003868 <HAL_RCC_OscConfig+0x288>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
 8003866:	e025      	b.n	80038b4 <HAL_RCC_OscConfig+0x2d4>
 8003868:	58024400 	.word	0x58024400
 800386c:	4b9a      	ldr	r3, [pc, #616]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	4997      	ldr	r1, [pc, #604]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
 8003880:	e018      	b.n	80038b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003882:	4b95      	ldr	r3, [pc, #596]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a94      	ldr	r2, [pc, #592]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7ff fadf 	bl	8002e50 <HAL_GetTick>
 8003892:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003896:	f7ff fadb 	bl	8002e50 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e2ed      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038a8:	4b8b      	ldr	r3, [pc, #556]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80a9 	beq.w	8003a14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4b85      	ldr	r3, [pc, #532]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038cc:	4b82      	ldr	r3, [pc, #520]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d007      	beq.n	80038e8 <HAL_RCC_OscConfig+0x308>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b18      	cmp	r3, #24
 80038dc:	d13a      	bne.n	8003954 <HAL_RCC_OscConfig+0x374>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d135      	bne.n	8003954 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038e8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_OscConfig+0x320>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	2b80      	cmp	r3, #128	@ 0x80
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e2c1      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003900:	f7ff fad6 	bl	8002eb0 <HAL_GetREVID>
 8003904:	4603      	mov	r3, r0
 8003906:	f241 0203 	movw	r2, #4099	@ 0x1003
 800390a:	4293      	cmp	r3, r2
 800390c:	d817      	bhi.n	800393e <HAL_RCC_OscConfig+0x35e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	2b20      	cmp	r3, #32
 8003914:	d108      	bne.n	8003928 <HAL_RCC_OscConfig+0x348>
 8003916:	4b70      	ldr	r3, [pc, #448]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800391e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003920:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003924:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003926:	e075      	b.n	8003a14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003928:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	069b      	lsls	r3, r3, #26
 8003936:	4968      	ldr	r1, [pc, #416]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800393c:	e06a      	b.n	8003a14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800393e:	4b66      	ldr	r3, [pc, #408]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	4962      	ldr	r1, [pc, #392]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 800394e:	4313      	orrs	r3, r2
 8003950:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003952:	e05f      	b.n	8003a14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d042      	beq.n	80039e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800395c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5d      	ldr	r2, [pc, #372]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7ff fa72 	bl	8002e50 <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003970:	f7ff fa6e 	bl	8002e50 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e280      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003982:	4b55      	ldr	r3, [pc, #340]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800398e:	f7ff fa8f 	bl	8002eb0 <HAL_GetREVID>
 8003992:	4603      	mov	r3, r0
 8003994:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003998:	4293      	cmp	r3, r2
 800399a:	d817      	bhi.n	80039cc <HAL_RCC_OscConfig+0x3ec>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d108      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3d6>
 80039a4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039ac:	4a4a      	ldr	r2, [pc, #296]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039b2:	6053      	str	r3, [r2, #4]
 80039b4:	e02e      	b.n	8003a14 <HAL_RCC_OscConfig+0x434>
 80039b6:	4b48      	ldr	r3, [pc, #288]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	069b      	lsls	r3, r3, #26
 80039c4:	4944      	ldr	r1, [pc, #272]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
 80039ca:	e023      	b.n	8003a14 <HAL_RCC_OscConfig+0x434>
 80039cc:	4b42      	ldr	r3, [pc, #264]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	493f      	ldr	r1, [pc, #252]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	60cb      	str	r3, [r1, #12]
 80039e0:	e018      	b.n	8003a14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039e2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 80039e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7ff fa2f 	bl	8002e50 <HAL_GetTick>
 80039f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039f6:	f7ff fa2b 	bl	8002e50 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e23d      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a08:	4b33      	ldr	r3, [pc, #204]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d036      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d019      	beq.n	8003a5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a28:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7ff fa0c 	bl	8002e50 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7ff fa08 	bl	8002e50 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e21a      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x45c>
 8003a5a:	e018      	b.n	8003a8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7ff f9f2 	bl	8002e50 <HAL_GetTick>
 8003a6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a70:	f7ff f9ee 	bl	8002e50 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e200      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a82:	4b15      	ldr	r3, [pc, #84]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d039      	beq.n	8003b0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01c      	beq.n	8003adc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003aa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003aac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aae:	f7ff f9cf 	bl	8002e50 <HAL_GetTick>
 8003ab2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab6:	f7ff f9cb 	bl	8002e50 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e1dd      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x4d6>
 8003ad4:	e01b      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
 8003ad6:	bf00      	nop
 8003ad8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003adc:	4b9b      	ldr	r3, [pc, #620]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a9a      	ldr	r2, [pc, #616]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003ae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ae8:	f7ff f9b2 	bl	8002e50 <HAL_GetTick>
 8003aec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af0:	f7ff f9ae 	bl	8002e50 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e1c0      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b02:	4b92      	ldr	r3, [pc, #584]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8081 	beq.w	8003c1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d50 <HAL_RCC_OscConfig+0x770>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a8b      	ldr	r2, [pc, #556]	@ (8003d50 <HAL_RCC_OscConfig+0x770>)
 8003b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b28:	f7ff f992 	bl	8002e50 <HAL_GetTick>
 8003b2c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7ff f98e 	bl	8002e50 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	@ 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e1a0      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b42:	4b83      	ldr	r3, [pc, #524]	@ (8003d50 <HAL_RCC_OscConfig+0x770>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x584>
 8003b56:	4b7d      	ldr	r3, [pc, #500]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b62:	e02d      	b.n	8003bc0 <HAL_RCC_OscConfig+0x5e0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x5a6>
 8003b6c:	4b77      	ldr	r3, [pc, #476]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b70:	4a76      	ldr	r2, [pc, #472]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b78:	4b74      	ldr	r3, [pc, #464]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7c:	4a73      	ldr	r2, [pc, #460]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b7e:	f023 0304 	bic.w	r3, r3, #4
 8003b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b84:	e01c      	b.n	8003bc0 <HAL_RCC_OscConfig+0x5e0>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x5c8>
 8003b8e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b92:	4a6e      	ldr	r2, [pc, #440]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b94:	f043 0304 	orr.w	r3, r3, #4
 8003b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9a:	4b6c      	ldr	r3, [pc, #432]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCC_OscConfig+0x5e0>
 8003ba8:	4b68      	ldr	r3, [pc, #416]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a67      	ldr	r2, [pc, #412]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	4b65      	ldr	r3, [pc, #404]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	4a64      	ldr	r2, [pc, #400]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003bba:	f023 0304 	bic.w	r3, r3, #4
 8003bbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d015      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7ff f942 	bl	8002e50 <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7ff f93e 	bl	8002e50 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e14e      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be6:	4b59      	ldr	r3, [pc, #356]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0ee      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5f0>
 8003bf2:	e014      	b.n	8003c1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7ff f92c 	bl	8002e50 <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7ff f928 	bl	8002e50 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e138      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c12:	4b4e      	ldr	r3, [pc, #312]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1ee      	bne.n	8003bfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 812d 	beq.w	8003e82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c28:	4b48      	ldr	r3, [pc, #288]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c30:	2b18      	cmp	r3, #24
 8003c32:	f000 80bd 	beq.w	8003db0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	f040 809e 	bne.w	8003d7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c40:	4b42      	ldr	r3, [pc, #264]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a41      	ldr	r2, [pc, #260]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7ff f900 	bl	8002e50 <HAL_GetTick>
 8003c50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7ff f8fc 	bl	8002e50 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e10e      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c66:	4b39      	ldr	r3, [pc, #228]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c72:	4b36      	ldr	r3, [pc, #216]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003c74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c76:	4b37      	ldr	r3, [pc, #220]	@ (8003d54 <HAL_RCC_OscConfig+0x774>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4931      	ldr	r1, [pc, #196]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	3b01      	subs	r3, #1
 8003c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	025b      	lsls	r3, r3, #9
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cbc:	4923      	ldr	r1, [pc, #140]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cc2:	4b22      	ldr	r3, [pc, #136]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	4a21      	ldr	r2, [pc, #132]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cce:	4b1f      	ldr	r3, [pc, #124]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd2:	4b21      	ldr	r3, [pc, #132]	@ (8003d58 <HAL_RCC_OscConfig+0x778>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cda:	00d2      	lsls	r2, r2, #3
 8003cdc:	491b      	ldr	r1, [pc, #108]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	f023 020c 	bic.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	4917      	ldr	r1, [pc, #92]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	f023 0202 	bic.w	r2, r3, #2
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d00:	4912      	ldr	r1, [pc, #72]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d06:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	4a10      	ldr	r2, [pc, #64]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	4a0d      	ldr	r2, [pc, #52]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	4a0a      	ldr	r2, [pc, #40]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d2a:	4b08      	ldr	r3, [pc, #32]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	4a07      	ldr	r2, [pc, #28]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <HAL_RCC_OscConfig+0x76c>)
 8003d3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7ff f885 	bl	8002e50 <HAL_GetTick>
 8003d46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d48:	e011      	b.n	8003d6e <HAL_RCC_OscConfig+0x78e>
 8003d4a:	bf00      	nop
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	58024800 	.word	0x58024800
 8003d54:	fffffc0c 	.word	0xfffffc0c
 8003d58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7ff f878 	bl	8002e50 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e08a      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x77c>
 8003d7a:	e082      	b.n	8003e82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7c:	4b43      	ldr	r3, [pc, #268]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a42      	ldr	r2, [pc, #264]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7ff f862 	bl	8002e50 <HAL_GetTick>
 8003d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d90:	f7ff f85e 	bl	8002e50 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e070      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003da2:	4b3a      	ldr	r3, [pc, #232]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x7b0>
 8003dae:	e068      	b.n	8003e82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003db0:	4b36      	ldr	r3, [pc, #216]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003db6:	4b35      	ldr	r3, [pc, #212]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d031      	beq.n	8003e28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0203 	and.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d12a      	bne.n	8003e28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d122      	bne.n	8003e28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d11a      	bne.n	8003e28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	0a5b      	lsrs	r3, r3, #9
 8003df6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d111      	bne.n	8003e28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d108      	bne.n	8003e28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0e1b      	lsrs	r3, r3, #24
 8003e1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e02b      	b.n	8003e84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e2c:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e30:	08db      	lsrs	r3, r3, #3
 8003e32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d01f      	beq.n	8003e82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	4a11      	ldr	r2, [pc, #68]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e4e:	f7fe ffff 	bl	8002e50 <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e54:	bf00      	nop
 8003e56:	f7fe fffb 	bl	8002e50 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d0f9      	beq.n	8003e56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e62:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <HAL_RCC_OscConfig+0x8b0>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e6e:	00d2      	lsls	r2, r2, #3
 8003e70:	4906      	ldr	r1, [pc, #24]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e76:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	4a04      	ldr	r2, [pc, #16]	@ (8003e8c <HAL_RCC_OscConfig+0x8ac>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3730      	adds	r7, #48	@ 0x30
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	58024400 	.word	0x58024400
 8003e90:	ffff0007 	.word	0xffff0007

08003e94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e19c      	b.n	80041e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80040d4 <HAL_RCC_ClockConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d910      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b87      	ldr	r3, [pc, #540]	@ (80040d4 <HAL_RCC_ClockConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 020f 	bic.w	r2, r3, #15
 8003ebe:	4985      	ldr	r1, [pc, #532]	@ (80040d4 <HAL_RCC_ClockConfig+0x240>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b83      	ldr	r3, [pc, #524]	@ (80040d4 <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e184      	b.n	80041e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	4b7b      	ldr	r3, [pc, #492]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d908      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ef4:	4b78      	ldr	r3, [pc, #480]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	4975      	ldr	r1, [pc, #468]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d010      	beq.n	8003f34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	4b70      	ldr	r3, [pc, #448]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d908      	bls.n	8003f34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f22:	4b6d      	ldr	r3, [pc, #436]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	496a      	ldr	r1, [pc, #424]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d010      	beq.n	8003f62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	4b64      	ldr	r3, [pc, #400]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d908      	bls.n	8003f62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f50:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	495e      	ldr	r1, [pc, #376]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d908      	bls.n	8003f90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f7e:	4b56      	ldr	r3, [pc, #344]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	4953      	ldr	r1, [pc, #332]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d010      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d908      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fac:	4b4a      	ldr	r3, [pc, #296]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f023 020f 	bic.w	r2, r3, #15
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4947      	ldr	r1, [pc, #284]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d055      	beq.n	8004076 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fca:	4b43      	ldr	r3, [pc, #268]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	4940      	ldr	r1, [pc, #256]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d121      	bne.n	8004034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0f6      	b.n	80041e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ffc:	4b36      	ldr	r3, [pc, #216]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d115      	bne.n	8004034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0ea      	b.n	80041e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d107      	bne.n	8004024 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004014:	4b30      	ldr	r3, [pc, #192]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0de      	b.n	80041e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004024:	4b2c      	ldr	r3, [pc, #176]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0d6      	b.n	80041e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004034:	4b28      	ldr	r3, [pc, #160]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f023 0207 	bic.w	r2, r3, #7
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4925      	ldr	r1, [pc, #148]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8004042:	4313      	orrs	r3, r2
 8004044:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004046:	f7fe ff03 	bl	8002e50 <HAL_GetTick>
 800404a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404c:	e00a      	b.n	8004064 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404e:	f7fe feff 	bl	8002e50 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e0be      	b.n	80041e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004064:	4b1c      	ldr	r3, [pc, #112]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	429a      	cmp	r2, r3
 8004074:	d1eb      	bne.n	800404e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	4b14      	ldr	r3, [pc, #80]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	429a      	cmp	r2, r3
 8004090:	d208      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004092:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f023 020f 	bic.w	r2, r3, #15
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	490e      	ldr	r1, [pc, #56]	@ (80040d8 <HAL_RCC_ClockConfig+0x244>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_RCC_ClockConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d214      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <HAL_RCC_ClockConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 020f 	bic.w	r2, r3, #15
 80040ba:	4906      	ldr	r1, [pc, #24]	@ (80040d4 <HAL_RCC_ClockConfig+0x240>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b04      	ldr	r3, [pc, #16]	@ (80040d4 <HAL_RCC_ClockConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e086      	b.n	80041e2 <HAL_RCC_ClockConfig+0x34e>
 80040d4:	52002000 	.word	0x52002000
 80040d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	4b3f      	ldr	r3, [pc, #252]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d208      	bcs.n	800410a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040f8:	4b3c      	ldr	r3, [pc, #240]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	4939      	ldr	r1, [pc, #228]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 8004106:	4313      	orrs	r3, r2
 8004108:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d010      	beq.n	8004138 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	4b34      	ldr	r3, [pc, #208]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004122:	429a      	cmp	r2, r3
 8004124:	d208      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004126:	4b31      	ldr	r3, [pc, #196]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	492e      	ldr	r1, [pc, #184]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 8004134:	4313      	orrs	r3, r2
 8004136:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d010      	beq.n	8004166 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	4b28      	ldr	r3, [pc, #160]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004150:	429a      	cmp	r2, r3
 8004152:	d208      	bcs.n	8004166 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004154:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	4922      	ldr	r1, [pc, #136]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 8004162:	4313      	orrs	r3, r2
 8004164:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d010      	beq.n	8004194 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	4b1d      	ldr	r3, [pc, #116]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800417e:	429a      	cmp	r2, r3
 8004180:	d208      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004182:	4b1a      	ldr	r3, [pc, #104]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4917      	ldr	r1, [pc, #92]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 8004190:	4313      	orrs	r3, r2
 8004192:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004194:	f000 f834 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b14      	ldr	r3, [pc, #80]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	4912      	ldr	r1, [pc, #72]	@ (80041f0 <HAL_RCC_ClockConfig+0x35c>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041b2:	4b0e      	ldr	r3, [pc, #56]	@ (80041ec <HAL_RCC_ClockConfig+0x358>)
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <HAL_RCC_ClockConfig+0x35c>)
 80041bc:	5cd3      	ldrb	r3, [r2, r3]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
 80041c8:	4a0a      	ldr	r2, [pc, #40]	@ (80041f4 <HAL_RCC_ClockConfig+0x360>)
 80041ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041cc:	4a0a      	ldr	r2, [pc, #40]	@ (80041f8 <HAL_RCC_ClockConfig+0x364>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041d2:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <HAL_RCC_ClockConfig+0x368>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fdf0 	bl	8002dbc <HAL_InitTick>
 80041dc:	4603      	mov	r3, r0
 80041de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	58024400 	.word	0x58024400
 80041f0:	0800e668 	.word	0x0800e668
 80041f4:	24000008 	.word	0x24000008
 80041f8:	24000004 	.word	0x24000004
 80041fc:	2400000c 	.word	0x2400000c

08004200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	b089      	sub	sp, #36	@ 0x24
 8004204:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004206:	4bb3      	ldr	r3, [pc, #716]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800420e:	2b18      	cmp	r3, #24
 8004210:	f200 8155 	bhi.w	80044be <HAL_RCC_GetSysClockFreq+0x2be>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004281 	.word	0x08004281
 8004220:	080044bf 	.word	0x080044bf
 8004224:	080044bf 	.word	0x080044bf
 8004228:	080044bf 	.word	0x080044bf
 800422c:	080044bf 	.word	0x080044bf
 8004230:	080044bf 	.word	0x080044bf
 8004234:	080044bf 	.word	0x080044bf
 8004238:	080044bf 	.word	0x080044bf
 800423c:	080042a7 	.word	0x080042a7
 8004240:	080044bf 	.word	0x080044bf
 8004244:	080044bf 	.word	0x080044bf
 8004248:	080044bf 	.word	0x080044bf
 800424c:	080044bf 	.word	0x080044bf
 8004250:	080044bf 	.word	0x080044bf
 8004254:	080044bf 	.word	0x080044bf
 8004258:	080044bf 	.word	0x080044bf
 800425c:	080042ad 	.word	0x080042ad
 8004260:	080044bf 	.word	0x080044bf
 8004264:	080044bf 	.word	0x080044bf
 8004268:	080044bf 	.word	0x080044bf
 800426c:	080044bf 	.word	0x080044bf
 8004270:	080044bf 	.word	0x080044bf
 8004274:	080044bf 	.word	0x080044bf
 8004278:	080044bf 	.word	0x080044bf
 800427c:	080042b3 	.word	0x080042b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004280:	4b94      	ldr	r3, [pc, #592]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800428c:	4b91      	ldr	r3, [pc, #580]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	08db      	lsrs	r3, r3, #3
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	4a90      	ldr	r2, [pc, #576]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800429e:	e111      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042a0:	4b8d      	ldr	r3, [pc, #564]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a2:	61bb      	str	r3, [r7, #24]
      break;
 80042a4:	e10e      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042a6:	4b8d      	ldr	r3, [pc, #564]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042a8:	61bb      	str	r3, [r7, #24]
      break;
 80042aa:	e10b      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042ac:	4b8c      	ldr	r3, [pc, #560]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042ae:	61bb      	str	r3, [r7, #24]
      break;
 80042b0:	e108      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042b2:	4b88      	ldr	r3, [pc, #544]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042bc:	4b85      	ldr	r3, [pc, #532]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042c8:	4b82      	ldr	r3, [pc, #520]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042d2:	4b80      	ldr	r3, [pc, #512]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d6:	08db      	lsrs	r3, r3, #3
 80042d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80e1 	beq.w	80044b8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	f000 8083 	beq.w	8004404 <HAL_RCC_GetSysClockFreq+0x204>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b02      	cmp	r3, #2
 8004302:	f200 80a1 	bhi.w	8004448 <HAL_RCC_GetSysClockFreq+0x248>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x114>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d056      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004312:	e099      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004314:	4b6f      	ldr	r3, [pc, #444]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d02d      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004320:	4b6c      	ldr	r3, [pc, #432]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	08db      	lsrs	r3, r3, #3
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	4a6b      	ldr	r2, [pc, #428]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
 8004330:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434a:	4b62      	ldr	r3, [pc, #392]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435a:	ed97 6a02 	vldr	s12, [r7, #8]
 800435e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80044e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004376:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800437a:	e087      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80044e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800438a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438e:	4b51      	ldr	r3, [pc, #324]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439e:	ed97 6a02 	vldr	s12, [r7, #8]
 80043a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80044e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043be:	e065      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d2:	4b40      	ldr	r3, [pc, #256]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80044e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004402:	e043      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80044f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004416:	4b2f      	ldr	r3, [pc, #188]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004426:	ed97 6a02 	vldr	s12, [r7, #8]
 800442a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80044e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800442e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800443a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004446:	e021      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004452:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445a:	4b1e      	ldr	r3, [pc, #120]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446a:	ed97 6a02 	vldr	s12, [r7, #8]
 800446e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80044e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800447e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004486:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800448a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800448c:	4b11      	ldr	r3, [pc, #68]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	0a5b      	lsrs	r3, r3, #9
 8004492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004496:	3301      	adds	r3, #1
 8004498:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	ee07 3a90 	vmov	s15, r3
 80044a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b0:	ee17 3a90 	vmov	r3, s15
 80044b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044b6:	e005      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
      break;
 80044bc:	e002      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044be:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044c0:	61bb      	str	r3, [r7, #24]
      break;
 80044c2:	bf00      	nop
  }

  return sysclockfreq;
 80044c4:	69bb      	ldr	r3, [r7, #24]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3724      	adds	r7, #36	@ 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	58024400 	.word	0x58024400
 80044d8:	03d09000 	.word	0x03d09000
 80044dc:	003d0900 	.word	0x003d0900
 80044e0:	017d7840 	.word	0x017d7840
 80044e4:	46000000 	.word	0x46000000
 80044e8:	4c742400 	.word	0x4c742400
 80044ec:	4a742400 	.word	0x4a742400
 80044f0:	4bbebc20 	.word	0x4bbebc20

080044f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044fa:	f7ff fe81 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80044fe:	4602      	mov	r2, r0
 8004500:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCC_GetHCLKFreq+0x50>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	490f      	ldr	r1, [pc, #60]	@ (8004548 <HAL_RCC_GetHCLKFreq+0x54>)
 800450c:	5ccb      	ldrb	r3, [r1, r3]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <HAL_RCC_GetHCLKFreq+0x50>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	4a09      	ldr	r2, [pc, #36]	@ (8004548 <HAL_RCC_GetHCLKFreq+0x54>)
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	4a07      	ldr	r2, [pc, #28]	@ (800454c <HAL_RCC_GetHCLKFreq+0x58>)
 8004530:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004532:	4a07      	ldr	r2, [pc, #28]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004538:	4b04      	ldr	r3, [pc, #16]	@ (800454c <HAL_RCC_GetHCLKFreq+0x58>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58024400 	.word	0x58024400
 8004548:	0800e668 	.word	0x0800e668
 800454c:	24000008 	.word	0x24000008
 8004550:	24000004 	.word	0x24000004

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004558:	f7ff ffcc 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4904      	ldr	r1, [pc, #16]	@ (800457c <HAL_RCC_GetPCLK1Freq+0x28>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	58024400 	.word	0x58024400
 800457c:	0800e668 	.word	0x0800e668

08004580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004584:	f7ff ffb6 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4904      	ldr	r1, [pc, #16]	@ (80045a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	58024400 	.word	0x58024400
 80045a8:	0800e668 	.word	0x0800e668

080045ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b0:	b0ca      	sub	sp, #296	@ 0x128
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80045d0:	2500      	movs	r5, #0
 80045d2:	ea54 0305 	orrs.w	r3, r4, r5
 80045d6:	d049      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045e2:	d02f      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80045e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045e8:	d828      	bhi.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045ee:	d01a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045f4:	d822      	bhi.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045fe:	d007      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004600:	e01c      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004602:	4bb8      	ldr	r3, [pc, #736]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	4ab7      	ldr	r2, [pc, #732]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800460e:	e01a      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004614:	3308      	adds	r3, #8
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fc8f 	bl	8005f3c <RCCEx_PLL2_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004624:	e00f      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	3328      	adds	r3, #40	@ 0x28
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f001 fd36 	bl	80060a0 <RCCEx_PLL3_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800463a:	e004      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800464e:	4ba5      	ldr	r3, [pc, #660]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800465c:	4aa1      	ldr	r2, [pc, #644]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800465e:	430b      	orrs	r3, r1
 8004660:	6513      	str	r3, [r2, #80]	@ 0x50
 8004662:	e003      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004678:	f04f 0900 	mov.w	r9, #0
 800467c:	ea58 0309 	orrs.w	r3, r8, r9
 8004680:	d047      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004688:	2b04      	cmp	r3, #4
 800468a:	d82a      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800468c:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046a9 	.word	0x080046a9
 8004698:	080046b7 	.word	0x080046b7
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046eb 	.word	0x080046eb
 80046a4:	080046eb 	.word	0x080046eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a8:	4b8e      	ldr	r3, [pc, #568]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	4a8d      	ldr	r2, [pc, #564]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046b4:	e01a      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	3308      	adds	r3, #8
 80046bc:	2100      	movs	r1, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fc3c 	bl	8005f3c <RCCEx_PLL2_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046ca:	e00f      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	3328      	adds	r3, #40	@ 0x28
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f001 fce3 	bl	80060a0 <RCCEx_PLL3_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046e0:	e004      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80046ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046f4:	4b7b      	ldr	r3, [pc, #492]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f8:	f023 0107 	bic.w	r1, r3, #7
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004702:	4a78      	ldr	r2, [pc, #480]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6513      	str	r3, [r2, #80]	@ 0x50
 8004708:	e003      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800471e:	f04f 0b00 	mov.w	fp, #0
 8004722:	ea5a 030b 	orrs.w	r3, sl, fp
 8004726:	d04c      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004732:	d030      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004738:	d829      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800473a:	2bc0      	cmp	r3, #192	@ 0xc0
 800473c:	d02d      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800473e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004740:	d825      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004742:	2b80      	cmp	r3, #128	@ 0x80
 8004744:	d018      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004746:	2b80      	cmp	r3, #128	@ 0x80
 8004748:	d821      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800474e:	2b40      	cmp	r3, #64	@ 0x40
 8004750:	d007      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004752:	e01c      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004754:	4b63      	ldr	r3, [pc, #396]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	4a62      	ldr	r2, [pc, #392]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800475a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004760:	e01c      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3308      	adds	r3, #8
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f001 fbe6 	bl	8005f3c <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004776:	e011      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477c:	3328      	adds	r3, #40	@ 0x28
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f001 fc8d 	bl	80060a0 <RCCEx_PLL3_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800478c:	e006      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004794:	e002      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800479a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047a4:	4b4f      	ldr	r3, [pc, #316]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80047ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b2:	4a4c      	ldr	r2, [pc, #304]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80047b8:	e003      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80047ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80047d2:	2300      	movs	r3, #0
 80047d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80047d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80047dc:	460b      	mov	r3, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	d053      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047ee:	d035      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80047f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047f4:	d82e      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80047f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80047fa:	d031      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80047fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004800:	d828      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004806:	d01a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480c:	d822      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004812:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004816:	d007      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004818:	e01c      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800481a:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481e:	4a31      	ldr	r2, [pc, #196]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004824:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004826:	e01c      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482c:	3308      	adds	r3, #8
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f001 fb83 	bl	8005f3c <RCCEx_PLL2_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800483c:	e011      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004842:	3328      	adds	r3, #40	@ 0x28
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f001 fc2a 	bl	80060a0 <RCCEx_PLL3_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004852:	e006      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800485a:	e002      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800486a:	4b1e      	ldr	r3, [pc, #120]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800487a:	4a1a      	ldr	r2, [pc, #104]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800487c:	430b      	orrs	r3, r1
 800487e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004880:	e003      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004896:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800489a:	2300      	movs	r3, #0
 800489c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80048a4:	460b      	mov	r3, r1
 80048a6:	4313      	orrs	r3, r2
 80048a8:	d056      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048b6:	d038      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80048b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048bc:	d831      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048c2:	d034      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80048c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048c8:	d82b      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048ce:	d01d      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80048d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048d4:	d825      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80048da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048e0:	e01f      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e8:	4ba2      	ldr	r3, [pc, #648]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	4aa1      	ldr	r2, [pc, #644]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048f4:	e01c      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	3308      	adds	r3, #8
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 fb1c 	bl	8005f3c <RCCEx_PLL2_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800490a:	e011      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	3328      	adds	r3, #40	@ 0x28
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fbc3 	bl	80060a0 <RCCEx_PLL3_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004920:	e006      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004928:	e002      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800492e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004938:	4b8e      	ldr	r3, [pc, #568]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004948:	4a8a      	ldr	r2, [pc, #552]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800494a:	430b      	orrs	r3, r1
 800494c:	6593      	str	r3, [r2, #88]	@ 0x58
 800494e:	e003      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004964:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800496e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004972:	460b      	mov	r3, r1
 8004974:	4313      	orrs	r3, r2
 8004976:	d03a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497e:	2b30      	cmp	r3, #48	@ 0x30
 8004980:	d01f      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004982:	2b30      	cmp	r3, #48	@ 0x30
 8004984:	d819      	bhi.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004986:	2b20      	cmp	r3, #32
 8004988:	d00c      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800498a:	2b20      	cmp	r3, #32
 800498c:	d815      	bhi.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d019      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004992:	2b10      	cmp	r3, #16
 8004994:	d111      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004996:	4b77      	ldr	r3, [pc, #476]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499a:	4a76      	ldr	r2, [pc, #472]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800499c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049a2:	e011      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a8:	3308      	adds	r3, #8
 80049aa:	2102      	movs	r1, #2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 fac5 	bl	8005f3c <RCCEx_PLL2_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049b8:	e006      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049c0:	e002      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80049c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049d0:	4b68      	ldr	r3, [pc, #416]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049de:	4a65      	ldr	r2, [pc, #404]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049e0:	430b      	orrs	r3, r1
 80049e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049e4:	e003      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80049fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	d051      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a18:	d035      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a1e:	d82e      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a24:	d031      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a2a:	d828      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a30:	d01a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a36:	d822      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a40:	d007      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004a42:	e01c      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a44:	4b4b      	ldr	r3, [pc, #300]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	4a4a      	ldr	r2, [pc, #296]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a50:	e01c      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	3308      	adds	r3, #8
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fa6e 	bl	8005f3c <RCCEx_PLL2_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a66:	e011      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6c:	3328      	adds	r3, #40	@ 0x28
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fb15 	bl	80060a0 <RCCEx_PLL3_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a7c:	e006      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a84:	e002      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a86:	bf00      	nop
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a94:	4b37      	ldr	r3, [pc, #220]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa2:	4a34      	ldr	r2, [pc, #208]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004aa8:	e003      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004abe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ac8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004acc:	460b      	mov	r3, r1
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	d056      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004adc:	d033      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ade:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae2:	d82c      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ae4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ae8:	d02f      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004aea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004aee:	d826      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004af0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004af4:	d02b      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004af6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004afa:	d820      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b00:	d012      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b06:	d81a      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d022      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b10:	d115      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b16:	3308      	adds	r3, #8
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 fa0e 	bl	8005f3c <RCCEx_PLL2_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b26:	e015      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2c:	3328      	adds	r3, #40	@ 0x28
 8004b2e:	2101      	movs	r1, #1
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 fab5 	bl	80060a0 <RCCEx_PLL3_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b44:	e006      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b46:	bf00      	nop
 8004b48:	e004      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e002      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b6a:	4a02      	ldr	r2, [pc, #8]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b70:	e006      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	d055      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bac:	d033      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bb2:	d82c      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb8:	d02f      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bbe:	d826      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bc4:	d02b      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004bc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bca:	d820      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bd0:	d012      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bd6:	d81a      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d022      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004be0:	d115      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	3308      	adds	r3, #8
 8004be8:	2101      	movs	r1, #1
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 f9a6 	bl	8005f3c <RCCEx_PLL2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004bf6:	e015      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfc:	3328      	adds	r3, #40	@ 0x28
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 fa4d 	bl	80060a0 <RCCEx_PLL3_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c14:	e006      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c16:	bf00      	nop
 8004c18:	e004      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e002      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c1e:	bf00      	nop
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10b      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c2c:	4ba3      	ldr	r3, [pc, #652]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c30:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c3c:	4a9f      	ldr	r2, [pc, #636]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c42:	e003      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004c58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c66:	460b      	mov	r3, r1
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	d037      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c76:	d00e      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c7c:	d816      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d018      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c86:	d111      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c88:	4b8c      	ldr	r3, [pc, #560]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	4a8b      	ldr	r2, [pc, #556]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c94:	e00f      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 f94c 	bl	8005f3c <RCCEx_PLL2_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004caa:	e004      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ccc:	4a7b      	ldr	r2, [pc, #492]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cd2:	e003      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004cf2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d039      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d81c      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d06:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d49 	.word	0x08004d49
 8004d10:	08004d1d 	.word	0x08004d1d
 8004d14:	08004d2b 	.word	0x08004d2b
 8004d18:	08004d49 	.word	0x08004d49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1c:	4b67      	ldr	r3, [pc, #412]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a66      	ldr	r2, [pc, #408]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d28:	e00f      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2e:	3308      	adds	r3, #8
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 f902 	bl	8005f3c <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d3e:	e004      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d46:	e000      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d52:	4b5a      	ldr	r3, [pc, #360]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d56:	f023 0103 	bic.w	r1, r3, #3
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d60:	4a56      	ldr	r2, [pc, #344]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f000 809f 	beq.w	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d92:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d9e:	f7fe f857 	bl	8002e50 <HAL_GetTick>
 8004da2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da8:	f7fe f852 	bl	8002e50 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b64      	cmp	r3, #100	@ 0x64
 8004db6:	d903      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0ed      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d179      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004dd4:	4b39      	ldr	r3, [pc, #228]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004de0:	4053      	eors	r3, r2
 8004de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d015      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dea:	4b34      	ldr	r3, [pc, #208]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004df6:	4b31      	ldr	r3, [pc, #196]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dfa:	4a30      	ldr	r2, [pc, #192]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e02:	4b2e      	ldr	r3, [pc, #184]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e06:	4a2d      	ldr	r2, [pc, #180]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e22:	d118      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fe f814 	bl	8002e50 <HAL_GetTick>
 8004e28:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e2c:	e00d      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fe f80f 	bl	8002e50 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d903      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004e48:	e005      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0eb      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d129      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e6e:	d10e      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004e70:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e80:	091a      	lsrs	r2, r3, #4
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	4a0d      	ldr	r2, [pc, #52]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6113      	str	r3, [r2, #16]
 8004e8c:	e005      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e98:	6113      	str	r3, [r2, #16]
 8004e9a:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eaa:	4a04      	ldr	r2, [pc, #16]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb0:	e00e      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004eba:	e009      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	58024800 	.word	0x58024800
 8004ec4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f002 0301 	and.w	r3, r2, #1
 8004edc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ee6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f000 8089 	beq.w	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ef8:	2b28      	cmp	r3, #40	@ 0x28
 8004efa:	d86b      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004efc:	a201      	add	r2, pc, #4	@ (adr r2, 8004f04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004fdd 	.word	0x08004fdd
 8004f08:	08004fd5 	.word	0x08004fd5
 8004f0c:	08004fd5 	.word	0x08004fd5
 8004f10:	08004fd5 	.word	0x08004fd5
 8004f14:	08004fd5 	.word	0x08004fd5
 8004f18:	08004fd5 	.word	0x08004fd5
 8004f1c:	08004fd5 	.word	0x08004fd5
 8004f20:	08004fd5 	.word	0x08004fd5
 8004f24:	08004fa9 	.word	0x08004fa9
 8004f28:	08004fd5 	.word	0x08004fd5
 8004f2c:	08004fd5 	.word	0x08004fd5
 8004f30:	08004fd5 	.word	0x08004fd5
 8004f34:	08004fd5 	.word	0x08004fd5
 8004f38:	08004fd5 	.word	0x08004fd5
 8004f3c:	08004fd5 	.word	0x08004fd5
 8004f40:	08004fd5 	.word	0x08004fd5
 8004f44:	08004fbf 	.word	0x08004fbf
 8004f48:	08004fd5 	.word	0x08004fd5
 8004f4c:	08004fd5 	.word	0x08004fd5
 8004f50:	08004fd5 	.word	0x08004fd5
 8004f54:	08004fd5 	.word	0x08004fd5
 8004f58:	08004fd5 	.word	0x08004fd5
 8004f5c:	08004fd5 	.word	0x08004fd5
 8004f60:	08004fd5 	.word	0x08004fd5
 8004f64:	08004fdd 	.word	0x08004fdd
 8004f68:	08004fd5 	.word	0x08004fd5
 8004f6c:	08004fd5 	.word	0x08004fd5
 8004f70:	08004fd5 	.word	0x08004fd5
 8004f74:	08004fd5 	.word	0x08004fd5
 8004f78:	08004fd5 	.word	0x08004fd5
 8004f7c:	08004fd5 	.word	0x08004fd5
 8004f80:	08004fd5 	.word	0x08004fd5
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004fd5 	.word	0x08004fd5
 8004f8c:	08004fd5 	.word	0x08004fd5
 8004f90:	08004fd5 	.word	0x08004fd5
 8004f94:	08004fd5 	.word	0x08004fd5
 8004f98:	08004fd5 	.word	0x08004fd5
 8004f9c:	08004fd5 	.word	0x08004fd5
 8004fa0:	08004fd5 	.word	0x08004fd5
 8004fa4:	08004fdd 	.word	0x08004fdd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fac:	3308      	adds	r3, #8
 8004fae:	2101      	movs	r1, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 ffc3 	bl	8005f3c <RCCEx_PLL2_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fbc:	e00f      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	3328      	adds	r3, #40	@ 0x28
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 f86a 	bl	80060a0 <RCCEx_PLL3_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004fd2:	e004      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fe6:	4bbf      	ldr	r3, [pc, #764]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ff4:	4abb      	ldr	r2, [pc, #748]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ffa:	e003      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f002 0302 	and.w	r3, r2, #2
 8005010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005014:	2300      	movs	r3, #0
 8005016:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800501a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800501e:	460b      	mov	r3, r1
 8005020:	4313      	orrs	r3, r2
 8005022:	d041      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800502a:	2b05      	cmp	r3, #5
 800502c:	d824      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800502e:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005081 	.word	0x08005081
 8005038:	0800504d 	.word	0x0800504d
 800503c:	08005063 	.word	0x08005063
 8005040:	08005081 	.word	0x08005081
 8005044:	08005081 	.word	0x08005081
 8005048:	08005081 	.word	0x08005081
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800504c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005050:	3308      	adds	r3, #8
 8005052:	2101      	movs	r1, #1
 8005054:	4618      	mov	r0, r3
 8005056:	f000 ff71 	bl	8005f3c <RCCEx_PLL2_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005060:	e00f      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005066:	3328      	adds	r3, #40	@ 0x28
 8005068:	2101      	movs	r1, #1
 800506a:	4618      	mov	r0, r3
 800506c:	f001 f818 	bl	80060a0 <RCCEx_PLL3_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800508a:	4b96      	ldr	r3, [pc, #600]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508e:	f023 0107 	bic.w	r1, r3, #7
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005096:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005098:	4a92      	ldr	r2, [pc, #584]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800509a:	430b      	orrs	r3, r1
 800509c:	6553      	str	r3, [r2, #84]	@ 0x54
 800509e:	e003      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f002 0304 	and.w	r3, r2, #4
 80050b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4313      	orrs	r3, r2
 80050c6:	d044      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80050c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d825      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	08005129 	.word	0x08005129
 80050e0:	080050f5 	.word	0x080050f5
 80050e4:	0800510b 	.word	0x0800510b
 80050e8:	08005129 	.word	0x08005129
 80050ec:	08005129 	.word	0x08005129
 80050f0:	08005129 	.word	0x08005129
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f8:	3308      	adds	r3, #8
 80050fa:	2101      	movs	r1, #1
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 ff1d 	bl	8005f3c <RCCEx_PLL2_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005108:	e00f      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510e:	3328      	adds	r3, #40	@ 0x28
 8005110:	2101      	movs	r1, #1
 8005112:	4618      	mov	r0, r3
 8005114:	f000 ffc4 	bl	80060a0 <RCCEx_PLL3_Config>
 8005118:	4603      	mov	r3, r0
 800511a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800511e:	e004      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005126:	e000      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005132:	4b6c      	ldr	r3, [pc, #432]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005136:	f023 0107 	bic.w	r1, r3, #7
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005142:	4a68      	ldr	r2, [pc, #416]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005144:	430b      	orrs	r3, r1
 8005146:	6593      	str	r3, [r2, #88]	@ 0x58
 8005148:	e003      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f002 0320 	and.w	r3, r2, #32
 800515e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005162:	2300      	movs	r3, #0
 8005164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800516c:	460b      	mov	r3, r1
 800516e:	4313      	orrs	r3, r2
 8005170:	d055      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800517e:	d033      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005180:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005184:	d82c      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518a:	d02f      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005190:	d826      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005192:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005196:	d02b      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005198:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800519c:	d820      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800519e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051a2:	d012      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80051a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051a8:	d81a      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d022      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80051ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051b2:	d115      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b8:	3308      	adds	r3, #8
 80051ba:	2100      	movs	r1, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 febd 	bl	8005f3c <RCCEx_PLL2_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051c8:	e015      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ce:	3328      	adds	r3, #40	@ 0x28
 80051d0:	2102      	movs	r1, #2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 ff64 	bl	80060a0 <RCCEx_PLL3_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80051de:	e00a      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051e6:	e006      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051e8:	bf00      	nop
 80051ea:	e004      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051ec:	bf00      	nop
 80051ee:	e002      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80051f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051fe:	4b39      	ldr	r3, [pc, #228]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005202:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520e:	4a35      	ldr	r2, [pc, #212]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005210:	430b      	orrs	r3, r1
 8005212:	6553      	str	r3, [r2, #84]	@ 0x54
 8005214:	e003      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800522a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800522e:	2300      	movs	r3, #0
 8005230:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005234:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d058      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005246:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800524a:	d033      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800524c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005250:	d82c      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005256:	d02f      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525c:	d826      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800525e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005262:	d02b      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005264:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005268:	d820      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800526a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800526e:	d012      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005274:	d81a      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d022      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527e:	d115      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	3308      	adds	r3, #8
 8005286:	2100      	movs	r1, #0
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fe57 	bl	8005f3c <RCCEx_PLL2_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005294:	e015      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529a:	3328      	adds	r3, #40	@ 0x28
 800529c:	2102      	movs	r1, #2
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fefe 	bl	80060a0 <RCCEx_PLL3_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052aa:	e00a      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052b2:	e006      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052b4:	bf00      	nop
 80052b6:	e004      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052b8:	bf00      	nop
 80052ba:	e002      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052bc:	bf00      	nop
 80052be:	e000      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80052c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10e      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052ca:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052da:	4a02      	ldr	r2, [pc, #8]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	6593      	str	r3, [r2, #88]	@ 0x58
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80052e2:	bf00      	nop
 80052e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80052fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005300:	2300      	movs	r3, #0
 8005302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005306:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800530a:	460b      	mov	r3, r1
 800530c:	4313      	orrs	r3, r2
 800530e:	d055      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005314:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005318:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800531c:	d033      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800531e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005322:	d82c      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005328:	d02f      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800532a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800532e:	d826      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005330:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005334:	d02b      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005336:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800533a:	d820      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800533c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005340:	d012      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005346:	d81a      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d022      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800534c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005350:	d115      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005356:	3308      	adds	r3, #8
 8005358:	2100      	movs	r1, #0
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fdee 	bl	8005f3c <RCCEx_PLL2_Config>
 8005360:	4603      	mov	r3, r0
 8005362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005366:	e015      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536c:	3328      	adds	r3, #40	@ 0x28
 800536e:	2102      	movs	r1, #2
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fe95 	bl	80060a0 <RCCEx_PLL3_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800537c:	e00a      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005386:	bf00      	nop
 8005388:	e004      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800538a:	bf00      	nop
 800538c:	e002      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800538e:	bf00      	nop
 8005390:	e000      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800539c:	4ba1      	ldr	r3, [pc, #644]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053ac:	4a9d      	ldr	r2, [pc, #628]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ae:	430b      	orrs	r3, r1
 80053b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053b2:	e003      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f002 0308 	and.w	r3, r2, #8
 80053c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80053d6:	460b      	mov	r3, r1
 80053d8:	4313      	orrs	r3, r2
 80053da:	d01e      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80053dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ee:	3328      	adds	r3, #40	@ 0x28
 80053f0:	2102      	movs	r1, #2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fe54 	bl	80060a0 <RCCEx_PLL3_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005404:	4b87      	ldr	r3, [pc, #540]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005408:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005414:	4a83      	ldr	r2, [pc, #524]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005416:	430b      	orrs	r3, r1
 8005418:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f002 0310 	and.w	r3, r2, #16
 8005426:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005430:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	d01e      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005446:	d10c      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544c:	3328      	adds	r3, #40	@ 0x28
 800544e:	2102      	movs	r1, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fe25 	bl	80060a0 <RCCEx_PLL3_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005462:	4b70      	ldr	r3, [pc, #448]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005466:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005472:	4a6c      	ldr	r2, [pc, #432]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005474:	430b      	orrs	r3, r1
 8005476:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800548e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	d03e      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054a4:	d022      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80054a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054aa:	d81b      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054b4:	d00b      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80054b6:	e015      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054bc:	3308      	adds	r3, #8
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fd3b 	bl	8005f3c <RCCEx_PLL2_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054cc:	e00f      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	3328      	adds	r3, #40	@ 0x28
 80054d4:	2102      	movs	r1, #2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fde2 	bl	80060a0 <RCCEx_PLL3_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80054e2:	e004      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80054ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005506:	4a47      	ldr	r2, [pc, #284]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005508:	430b      	orrs	r3, r1
 800550a:	6593      	str	r3, [r2, #88]	@ 0x58
 800550c:	e003      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005522:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005524:	2300      	movs	r3, #0
 8005526:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005528:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800552c:	460b      	mov	r3, r1
 800552e:	4313      	orrs	r3, r2
 8005530:	d03b      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800553e:	d01f      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005540:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005544:	d818      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800554a:	d003      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800554c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005550:	d007      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005552:	e011      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005554:	4b33      	ldr	r3, [pc, #204]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	4a32      	ldr	r2, [pc, #200]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800555a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005560:	e00f      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	3328      	adds	r3, #40	@ 0x28
 8005568:	2101      	movs	r1, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fd98 	bl	80060a0 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005576:	e004      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800558a:	4b26      	ldr	r3, [pc, #152]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559a:	4a22      	ldr	r2, [pc, #136]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6553      	str	r3, [r2, #84]	@ 0x54
 80055a0:	e003      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80055b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80055b8:	2300      	movs	r3, #0
 80055ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80055bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80055c0:	460b      	mov	r3, r1
 80055c2:	4313      	orrs	r3, r2
 80055c4:	d034      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80055d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d4:	d007      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80055d6:	e011      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d8:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	4a11      	ldr	r2, [pc, #68]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80055e4:	e00e      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ea:	3308      	adds	r3, #8
 80055ec:	2102      	movs	r1, #2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fca4 	bl	8005f3c <RCCEx_PLL2_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10d      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800560c:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800560e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005610:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561a:	4a02      	ldr	r2, [pc, #8]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800561c:	430b      	orrs	r3, r1
 800561e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005620:	e006      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005622:	bf00      	nop
 8005624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800563c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800563e:	2300      	movs	r3, #0
 8005640:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005642:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005646:	460b      	mov	r3, r1
 8005648:	4313      	orrs	r3, r2
 800564a:	d00c      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	3328      	adds	r3, #40	@ 0x28
 8005652:	2102      	movs	r1, #2
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fd23 	bl	80060a0 <RCCEx_PLL3_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005672:	663b      	str	r3, [r7, #96]	@ 0x60
 8005674:	2300      	movs	r3, #0
 8005676:	667b      	str	r3, [r7, #100]	@ 0x64
 8005678:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800567c:	460b      	mov	r3, r1
 800567e:	4313      	orrs	r3, r2
 8005680:	d038      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800568a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800568e:	d018      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005694:	d811      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800569a:	d014      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800569c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056a0:	d80b      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d011      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80056a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056aa:	d106      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ac:	4bc3      	ldr	r3, [pc, #780]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	4ac2      	ldr	r2, [pc, #776]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80056b8:	e008      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056c0:	e004      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056c2:	bf00      	nop
 80056c4:	e002      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056c6:	bf00      	nop
 80056c8:	e000      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80056ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056d4:	4bb9      	ldr	r3, [pc, #740]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056e4:	4ab5      	ldr	r2, [pc, #724]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056e6:	430b      	orrs	r3, r1
 80056e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80056ea:	e003      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005700:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005702:	2300      	movs	r3, #0
 8005704:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005706:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800570a:	460b      	mov	r3, r1
 800570c:	4313      	orrs	r3, r2
 800570e:	d009      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005710:	4baa      	ldr	r3, [pc, #680]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005714:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800571e:	4aa7      	ldr	r2, [pc, #668]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005730:	653b      	str	r3, [r7, #80]	@ 0x50
 8005732:	2300      	movs	r3, #0
 8005734:	657b      	str	r3, [r7, #84]	@ 0x54
 8005736:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800573a:	460b      	mov	r3, r1
 800573c:	4313      	orrs	r3, r2
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005740:	4b9e      	ldr	r3, [pc, #632]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005750:	4a9a      	ldr	r2, [pc, #616]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005752:	430b      	orrs	r3, r1
 8005754:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005764:	2300      	movs	r3, #0
 8005766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005768:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800576c:	460b      	mov	r3, r1
 800576e:	4313      	orrs	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005772:	4b92      	ldr	r3, [pc, #584]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005776:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005780:	4a8e      	ldr	r2, [pc, #568]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005782:	430b      	orrs	r3, r1
 8005784:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005792:	643b      	str	r3, [r7, #64]	@ 0x40
 8005794:	2300      	movs	r3, #0
 8005796:	647b      	str	r3, [r7, #68]	@ 0x44
 8005798:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800579c:	460b      	mov	r3, r1
 800579e:	4313      	orrs	r3, r2
 80057a0:	d00e      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057a2:	4b86      	ldr	r3, [pc, #536]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	4a85      	ldr	r2, [pc, #532]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057ac:	6113      	str	r3, [r2, #16]
 80057ae:	4b83      	ldr	r3, [pc, #524]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057b0:	6919      	ldr	r1, [r3, #16]
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057ba:	4a80      	ldr	r2, [pc, #512]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057bc:	430b      	orrs	r3, r1
 80057be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80057cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ce:	2300      	movs	r3, #0
 80057d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d009      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057dc:	4b77      	ldr	r3, [pc, #476]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	4a74      	ldr	r2, [pc, #464]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80057fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80057fe:	2300      	movs	r3, #0
 8005800:	637b      	str	r3, [r7, #52]	@ 0x34
 8005802:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800580c:	4b6b      	ldr	r3, [pc, #428]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005810:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800581c:	4a67      	ldr	r2, [pc, #412]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800581e:	430b      	orrs	r3, r1
 8005820:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	2100      	movs	r1, #0
 800582c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005834:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005838:	460b      	mov	r3, r1
 800583a:	4313      	orrs	r3, r2
 800583c:	d011      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005842:	3308      	adds	r3, #8
 8005844:	2100      	movs	r1, #0
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fb78 	bl	8005f3c <RCCEx_PLL2_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	2100      	movs	r1, #0
 800586c:	6239      	str	r1, [r7, #32]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
 8005874:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d011      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	3308      	adds	r3, #8
 8005884:	2101      	movs	r1, #1
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fb58 	bl	8005f3c <RCCEx_PLL2_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	2100      	movs	r1, #0
 80058ac:	61b9      	str	r1, [r7, #24]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80058b8:	460b      	mov	r3, r1
 80058ba:	4313      	orrs	r3, r2
 80058bc:	d011      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	3308      	adds	r3, #8
 80058c4:	2102      	movs	r1, #2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fb38 	bl	8005f3c <RCCEx_PLL2_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	2100      	movs	r1, #0
 80058ec:	6139      	str	r1, [r7, #16]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058f8:	460b      	mov	r3, r1
 80058fa:	4313      	orrs	r3, r2
 80058fc:	d011      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	3328      	adds	r3, #40	@ 0x28
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fbca 	bl	80060a0 <RCCEx_PLL3_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	2100      	movs	r1, #0
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005938:	460b      	mov	r3, r1
 800593a:	4313      	orrs	r3, r2
 800593c:	d011      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005942:	3328      	adds	r3, #40	@ 0x28
 8005944:	2101      	movs	r1, #1
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fbaa 	bl	80060a0 <RCCEx_PLL3_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800595e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	2100      	movs	r1, #0
 800596c:	6039      	str	r1, [r7, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005978:	460b      	mov	r3, r1
 800597a:	4313      	orrs	r3, r2
 800597c:	d011      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005982:	3328      	adds	r3, #40	@ 0x28
 8005984:	2102      	movs	r1, #2
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fb8a 	bl	80060a0 <RCCEx_PLL3_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800599e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80059a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80059b6:	46bd      	mov	sp, r7
 80059b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059bc:	58024400 	.word	0x58024400

080059c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059c4:	f7fe fd96 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	091b      	lsrs	r3, r3, #4
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4904      	ldr	r1, [pc, #16]	@ (80059e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	58024400 	.word	0x58024400
 80059e8:	0800e668 	.word	0x0800e668

080059ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b089      	sub	sp, #36	@ 0x24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059f4:	4ba1      	ldr	r3, [pc, #644]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80059fe:	4b9f      	ldr	r3, [pc, #636]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	0b1b      	lsrs	r3, r3, #12
 8005a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a16:	4b99      	ldr	r3, [pc, #612]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1a:	08db      	lsrs	r3, r3, #3
 8005a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8111 	beq.w	8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	f000 8083 	beq.w	8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f200 80a1 	bhi.w	8005b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d056      	beq.n	8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005a56:	e099      	b.n	8005b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a58:	4b88      	ldr	r3, [pc, #544]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d02d      	beq.n	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a64:	4b85      	ldr	r3, [pc, #532]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	08db      	lsrs	r3, r3, #3
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	4a84      	ldr	r2, [pc, #528]	@ (8005c80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	ee07 3a90 	vmov	s15, r3
 8005a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8e:	4b7b      	ldr	r3, [pc, #492]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005abe:	e087      	b.n	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005c88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b02:	e065      	b.n	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b16:	4b59      	ldr	r3, [pc, #356]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b46:	e043      	b.n	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5a:	4b48      	ldr	r3, [pc, #288]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b8a:	e021      	b.n	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9e:	4b37      	ldr	r3, [pc, #220]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	0a5b      	lsrs	r3, r3, #9
 8005bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf6:	ee17 2a90 	vmov	r2, s15
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c02:	0c1b      	lsrs	r3, r3, #16
 8005c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c08:	ee07 3a90 	vmov	s15, r3
 8005c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c24:	ee17 2a90 	vmov	r2, s15
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c2c:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c30:	0e1b      	lsrs	r3, r3, #24
 8005c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c52:	ee17 2a90 	vmov	r2, s15
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c5a:	e008      	b.n	8005c6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	3724      	adds	r7, #36	@ 0x24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	03d09000 	.word	0x03d09000
 8005c84:	46000000 	.word	0x46000000
 8005c88:	4c742400 	.word	0x4c742400
 8005c8c:	4a742400 	.word	0x4a742400
 8005c90:	4bbebc20 	.word	0x4bbebc20

08005c94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b089      	sub	sp, #36	@ 0x24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ca6:	4b9f      	ldr	r3, [pc, #636]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005caa:	0d1b      	lsrs	r3, r3, #20
 8005cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005cb2:	4b9c      	ldr	r3, [pc, #624]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005cbe:	4b99      	ldr	r3, [pc, #612]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc2:	08db      	lsrs	r3, r3, #3
 8005cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8111 	beq.w	8005f04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	f000 8083 	beq.w	8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	f200 80a1 	bhi.w	8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d056      	beq.n	8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005cfe:	e099      	b.n	8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d00:	4b88      	ldr	r3, [pc, #544]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02d      	beq.n	8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d0c:	4b85      	ldr	r3, [pc, #532]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	08db      	lsrs	r3, r3, #3
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	4a84      	ldr	r2, [pc, #528]	@ (8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d36:	4b7b      	ldr	r3, [pc, #492]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d66:	e087      	b.n	8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005daa:	e065      	b.n	8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dbe:	4b59      	ldr	r3, [pc, #356]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dee:	e043      	b.n	8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e02:	4b48      	ldr	r3, [pc, #288]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e32:	e021      	b.n	8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e46:	4b37      	ldr	r3, [pc, #220]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e78:	4b2a      	ldr	r3, [pc, #168]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7c:	0a5b      	lsrs	r3, r3, #9
 8005e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9e:	ee17 2a90 	vmov	r2, s15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	0c1b      	lsrs	r3, r3, #16
 8005eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ecc:	ee17 2a90 	vmov	r2, s15
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ed4:	4b13      	ldr	r3, [pc, #76]	@ (8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	0e1b      	lsrs	r3, r3, #24
 8005eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efa:	ee17 2a90 	vmov	r2, s15
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f02:	e008      	b.n	8005f16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	609a      	str	r2, [r3, #8]
}
 8005f16:	bf00      	nop
 8005f18:	3724      	adds	r7, #36	@ 0x24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	58024400 	.word	0x58024400
 8005f28:	03d09000 	.word	0x03d09000
 8005f2c:	46000000 	.word	0x46000000
 8005f30:	4c742400 	.word	0x4c742400
 8005f34:	4a742400 	.word	0x4a742400
 8005f38:	4bbebc20 	.word	0x4bbebc20

08005f3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f4a:	4b53      	ldr	r3, [pc, #332]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d101      	bne.n	8005f5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e099      	b.n	800608e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a4e      	ldr	r2, [pc, #312]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005f60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f66:	f7fc ff73 	bl	8002e50 <HAL_GetTick>
 8005f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f6c:	e008      	b.n	8005f80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f6e:	f7fc ff6f 	bl	8002e50 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e086      	b.n	800608e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f80:	4b45      	ldr	r3, [pc, #276]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f0      	bne.n	8005f6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f8c:	4b42      	ldr	r3, [pc, #264]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	031b      	lsls	r3, r3, #12
 8005f9a:	493f      	ldr	r1, [pc, #252]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	025b      	lsls	r3, r3, #9
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	061b      	lsls	r3, r3, #24
 8005fcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fd0:	4931      	ldr	r1, [pc, #196]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005fd6:	4b30      	ldr	r3, [pc, #192]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	492d      	ldr	r1, [pc, #180]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	f023 0220 	bic.w	r2, r3, #32
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	4928      	ldr	r1, [pc, #160]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ffa:	4b27      	ldr	r3, [pc, #156]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	4a26      	ldr	r2, [pc, #152]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006000:	f023 0310 	bic.w	r3, r3, #16
 8006004:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006006:	4b24      	ldr	r3, [pc, #144]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006008:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800600a:	4b24      	ldr	r3, [pc, #144]	@ (800609c <RCCEx_PLL2_Config+0x160>)
 800600c:	4013      	ands	r3, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	69d2      	ldr	r2, [r2, #28]
 8006012:	00d2      	lsls	r2, r2, #3
 8006014:	4920      	ldr	r1, [pc, #128]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006016:	4313      	orrs	r3, r2
 8006018:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800601a:	4b1f      	ldr	r3, [pc, #124]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	4a1e      	ldr	r2, [pc, #120]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006020:	f043 0310 	orr.w	r3, r3, #16
 8006024:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800602c:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	4a19      	ldr	r2, [pc, #100]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006032:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006036:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006038:	e00f      	b.n	800605a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d106      	bne.n	800604e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006040:	4b15      	ldr	r3, [pc, #84]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	4a14      	ldr	r2, [pc, #80]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800604a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800604c:	e005      	b.n	800605a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800604e:	4b12      	ldr	r3, [pc, #72]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	4a11      	ldr	r2, [pc, #68]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006054:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006058:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800605a:	4b0f      	ldr	r3, [pc, #60]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a0e      	ldr	r2, [pc, #56]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006060:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006066:	f7fc fef3 	bl	8002e50 <HAL_GetTick>
 800606a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800606c:	e008      	b.n	8006080 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800606e:	f7fc feef 	bl	8002e50 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e006      	b.n	800608e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006080:	4b05      	ldr	r3, [pc, #20]	@ (8006098 <RCCEx_PLL2_Config+0x15c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	58024400 	.word	0x58024400
 800609c:	ffff0007 	.word	0xffff0007

080060a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060ae:	4b53      	ldr	r3, [pc, #332]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d101      	bne.n	80060be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e099      	b.n	80061f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060be:	4b4f      	ldr	r3, [pc, #316]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a4e      	ldr	r2, [pc, #312]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80060c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ca:	f7fc fec1 	bl	8002e50 <HAL_GetTick>
 80060ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060d0:	e008      	b.n	80060e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060d2:	f7fc febd 	bl	8002e50 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e086      	b.n	80061f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060e4:	4b45      	ldr	r3, [pc, #276]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f0      	bne.n	80060d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060f0:	4b42      	ldr	r3, [pc, #264]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	051b      	lsls	r3, r3, #20
 80060fe:	493f      	ldr	r1, [pc, #252]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006100:	4313      	orrs	r3, r2
 8006102:	628b      	str	r3, [r1, #40]	@ 0x28
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	3b01      	subs	r3, #1
 800610a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	3b01      	subs	r3, #1
 8006114:	025b      	lsls	r3, r3, #9
 8006116:	b29b      	uxth	r3, r3
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	3b01      	subs	r3, #1
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	3b01      	subs	r3, #1
 800612e:	061b      	lsls	r3, r3, #24
 8006130:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006134:	4931      	ldr	r1, [pc, #196]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006136:	4313      	orrs	r3, r2
 8006138:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800613a:	4b30      	ldr	r3, [pc, #192]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	492d      	ldr	r1, [pc, #180]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006148:	4313      	orrs	r3, r2
 800614a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800614c:	4b2b      	ldr	r3, [pc, #172]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 800614e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006150:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	4928      	ldr	r1, [pc, #160]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 800615a:	4313      	orrs	r3, r2
 800615c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800615e:	4b27      	ldr	r3, [pc, #156]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006162:	4a26      	ldr	r2, [pc, #152]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800616a:	4b24      	ldr	r3, [pc, #144]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 800616c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800616e:	4b24      	ldr	r3, [pc, #144]	@ (8006200 <RCCEx_PLL3_Config+0x160>)
 8006170:	4013      	ands	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	69d2      	ldr	r2, [r2, #28]
 8006176:	00d2      	lsls	r2, r2, #3
 8006178:	4920      	ldr	r1, [pc, #128]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 800617a:	4313      	orrs	r3, r2
 800617c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800617e:	4b1f      	ldr	r3, [pc, #124]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006182:	4a1e      	ldr	r2, [pc, #120]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006188:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006190:	4b1a      	ldr	r3, [pc, #104]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	4a19      	ldr	r2, [pc, #100]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 8006196:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800619a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800619c:	e00f      	b.n	80061be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d106      	bne.n	80061b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80061a4:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	4a14      	ldr	r2, [pc, #80]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80061aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061b0:	e005      	b.n	80061be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80061b2:	4b12      	ldr	r3, [pc, #72]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	4a11      	ldr	r2, [pc, #68]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80061b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061be:	4b0f      	ldr	r3, [pc, #60]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a0e      	ldr	r2, [pc, #56]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80061c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ca:	f7fc fe41 	bl	8002e50 <HAL_GetTick>
 80061ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061d0:	e008      	b.n	80061e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061d2:	f7fc fe3d 	bl	8002e50 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e006      	b.n	80061f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061e4:	4b05      	ldr	r3, [pc, #20]	@ (80061fc <RCCEx_PLL3_Config+0x15c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	58024400 	.word	0x58024400
 8006200:	ffff0007 	.word	0xffff0007

08006204 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e10f      	b.n	8006436 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a87      	ldr	r2, [pc, #540]	@ (8006440 <HAL_SPI_Init+0x23c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00f      	beq.n	8006246 <HAL_SPI_Init+0x42>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a86      	ldr	r2, [pc, #536]	@ (8006444 <HAL_SPI_Init+0x240>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00a      	beq.n	8006246 <HAL_SPI_Init+0x42>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a84      	ldr	r2, [pc, #528]	@ (8006448 <HAL_SPI_Init+0x244>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d005      	beq.n	8006246 <HAL_SPI_Init+0x42>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d901      	bls.n	8006246 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e0f7      	b.n	8006436 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fe2e 	bl	8006ea8 <SPI_GetPacketSize>
 800624c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a7b      	ldr	r2, [pc, #492]	@ (8006440 <HAL_SPI_Init+0x23c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00c      	beq.n	8006272 <HAL_SPI_Init+0x6e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a79      	ldr	r2, [pc, #484]	@ (8006444 <HAL_SPI_Init+0x240>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d007      	beq.n	8006272 <HAL_SPI_Init+0x6e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a78      	ldr	r2, [pc, #480]	@ (8006448 <HAL_SPI_Init+0x244>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d002      	beq.n	8006272 <HAL_SPI_Init+0x6e>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b08      	cmp	r3, #8
 8006270:	d811      	bhi.n	8006296 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006276:	4a72      	ldr	r2, [pc, #456]	@ (8006440 <HAL_SPI_Init+0x23c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a70      	ldr	r2, [pc, #448]	@ (8006444 <HAL_SPI_Init+0x240>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_SPI_Init+0x8c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a6f      	ldr	r2, [pc, #444]	@ (8006448 <HAL_SPI_Init+0x244>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d104      	bne.n	800629a <HAL_SPI_Init+0x96>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b10      	cmp	r3, #16
 8006294:	d901      	bls.n	800629a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e0cd      	b.n	8006436 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fc f9bc 	bl	800262c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80062d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062e0:	d119      	bne.n	8006316 <HAL_SPI_Init+0x112>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ea:	d103      	bne.n	80062f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10c      	bne.n	8006316 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006304:	d107      	bne.n	8006316 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006314:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00f      	beq.n	8006342 <HAL_SPI_Init+0x13e>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d90b      	bls.n	8006342 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	e007      	b.n	8006352 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006350:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	431a      	orrs	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006364:	ea42 0103 	orr.w	r1, r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b2:	ea42 0103 	orr.w	r1, r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d113      	bne.n	80063f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40013000 	.word	0x40013000
 8006444:	40003800 	.word	0x40003800
 8006448:	40003c00 	.word	0x40003c00

0800644c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3320      	adds	r3, #32
 8006462:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006464:	f7fc fcf4 	bl	8002e50 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d001      	beq.n	800647a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006476:	2302      	movs	r3, #2
 8006478:	e1d1      	b.n	800681e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_SPI_Transmit+0x3a>
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e1c9      	b.n	800681e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_SPI_Transmit+0x4c>
 8006494:	2302      	movs	r3, #2
 8006496:	e1c2      	b.n	800681e <HAL_SPI_Transmit+0x3d2>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2203      	movs	r2, #3
 80064a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	88fa      	ldrh	r2, [r7, #6]
 80064c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80064f0:	d108      	bne.n	8006504 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e009      	b.n	8006518 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006516:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	4b96      	ldr	r3, [pc, #600]	@ (8006778 <HAL_SPI_Transmit+0x32c>)
 8006520:	4013      	ands	r3, r2
 8006522:	88f9      	ldrh	r1, [r7, #6]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	430b      	orrs	r3, r1
 800652a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006544:	d107      	bne.n	8006556 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	2b0f      	cmp	r3, #15
 800655c:	d947      	bls.n	80065ee <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800655e:	e03f      	b.n	80065e0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b02      	cmp	r3, #2
 800656c:	d114      	bne.n	8006598 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657e:	1d1a      	adds	r2, r3, #4
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006596:	e023      	b.n	80065e0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006598:	f7fc fc5a 	bl	8002e50 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d803      	bhi.n	80065b0 <HAL_SPI_Transmit+0x164>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065ae:	d102      	bne.n	80065b6 <HAL_SPI_Transmit+0x16a>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d114      	bne.n	80065e0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 fba8 	bl	8006d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e11e      	b.n	800681e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1b9      	bne.n	8006560 <HAL_SPI_Transmit+0x114>
 80065ec:	e0f1      	b.n	80067d2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2b07      	cmp	r3, #7
 80065f4:	f240 80e6 	bls.w	80067c4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80065f8:	e05d      	b.n	80066b6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b02      	cmp	r3, #2
 8006606:	d132      	bne.n	800666e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d918      	bls.n	8006646 <HAL_SPI_Transmit+0x1fa>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d014      	beq.n	8006646 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b02      	subs	r3, #2
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006644:	e037      	b.n	80066b6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800664a:	881a      	ldrh	r2, [r3, #0]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006654:	1c9a      	adds	r2, r3, #2
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800666c:	e023      	b.n	80066b6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800666e:	f7fc fbef 	bl	8002e50 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d803      	bhi.n	8006686 <HAL_SPI_Transmit+0x23a>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006684:	d102      	bne.n	800668c <HAL_SPI_Transmit+0x240>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d114      	bne.n	80066b6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fb3d 	bl	8006d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006698:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e0b3      	b.n	800681e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d19b      	bne.n	80065fa <HAL_SPI_Transmit+0x1ae>
 80066c2:	e086      	b.n	80067d2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d154      	bne.n	800677c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d918      	bls.n	8006710 <HAL_SPI_Transmit+0x2c4>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	2b40      	cmp	r3, #64	@ 0x40
 80066e4:	d914      	bls.n	8006710 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f6:	1d1a      	adds	r2, r3, #4
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b04      	subs	r3, #4
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800670e:	e059      	b.n	80067c4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	d917      	bls.n	800674c <HAL_SPI_Transmit+0x300>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d013      	beq.n	800674c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006728:	881a      	ldrh	r2, [r3, #0]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006732:	1c9a      	adds	r2, r3, #2
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b02      	subs	r3, #2
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800674a:	e03b      	b.n	80067c4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3320      	adds	r3, #32
 8006756:	7812      	ldrb	r2, [r2, #0]
 8006758:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006776:	e025      	b.n	80067c4 <HAL_SPI_Transmit+0x378>
 8006778:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800677c:	f7fc fb68 	bl	8002e50 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d803      	bhi.n	8006794 <HAL_SPI_Transmit+0x348>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006792:	d102      	bne.n	800679a <HAL_SPI_Transmit+0x34e>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d114      	bne.n	80067c4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fab6 	bl	8006d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e02c      	b.n	800681e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f47f af79 	bne.w	80066c4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2200      	movs	r2, #0
 80067da:	2108      	movs	r1, #8
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fb35 	bl	8006e4c <SPI_WaitOnFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ee:	f043 0220 	orr.w	r2, r3, #32
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fa87 	bl	8006d0c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800681c:	2300      	movs	r3, #0
  }
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop

08006828 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	b29b      	uxth	r3, r3
 8006840:	3301      	adds	r3, #1
 8006842:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3330      	adds	r3, #48	@ 0x30
 800684a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800684c:	f7fc fb00 	bl	8002e50 <HAL_GetTick>
 8006850:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b01      	cmp	r3, #1
 800685c:	d001      	beq.n	8006862 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800685e:	2302      	movs	r3, #2
 8006860:	e250      	b.n	8006d04 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <HAL_SPI_Receive+0x46>
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e248      	b.n	8006d04 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_SPI_Receive+0x58>
 800687c:	2302      	movs	r3, #2
 800687e:	e241      	b.n	8006d04 <HAL_SPI_Receive+0x4dc>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2204      	movs	r2, #4
 800688c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80068d8:	d108      	bne.n	80068ec <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e009      	b.n	8006900 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80068fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	4b95      	ldr	r3, [pc, #596]	@ (8006b5c <HAL_SPI_Receive+0x334>)
 8006908:	4013      	ands	r3, r2
 800690a:	88f9      	ldrh	r1, [r7, #6]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	430b      	orrs	r3, r1
 8006912:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800692c:	d107      	bne.n	800693e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800693c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b0f      	cmp	r3, #15
 8006944:	d96c      	bls.n	8006a20 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006946:	e064      	b.n	8006a12 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d114      	bne.n	8006988 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006966:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006968:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800696e:	1d1a      	adds	r2, r3, #4
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006986:	e044      	b.n	8006a12 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800698e:	b29b      	uxth	r3, r3
 8006990:	8bfa      	ldrh	r2, [r7, #30]
 8006992:	429a      	cmp	r2, r3
 8006994:	d919      	bls.n	80069ca <HAL_SPI_Receive+0x1a2>
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d014      	beq.n	80069ca <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069aa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069b0:	1d1a      	adds	r2, r3, #4
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069c8:	e023      	b.n	8006a12 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ca:	f7fc fa41 	bl	8002e50 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d803      	bhi.n	80069e2 <HAL_SPI_Receive+0x1ba>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069e0:	d102      	bne.n	80069e8 <HAL_SPI_Receive+0x1c0>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d114      	bne.n	8006a12 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f98f 	bl	8006d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e178      	b.n	8006d04 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d194      	bne.n	8006948 <HAL_SPI_Receive+0x120>
 8006a1e:	e15e      	b.n	8006cde <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b07      	cmp	r3, #7
 8006a26:	f240 8153 	bls.w	8006cd0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006a2a:	e08f      	b.n	8006b4c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d114      	bne.n	8006a6c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	8812      	ldrh	r2, [r2, #0]
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a6a:	e06f      	b.n	8006b4c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	8bfa      	ldrh	r2, [r7, #30]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d924      	bls.n	8006ac4 <HAL_SPI_Receive+0x29c>
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01f      	beq.n	8006ac4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	8812      	ldrh	r2, [r2, #0]
 8006a8c:	b292      	uxth	r2, r2
 8006a8e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a94:	1c9a      	adds	r2, r3, #2
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	8812      	ldrh	r2, [r2, #0]
 8006aa2:	b292      	uxth	r2, r2
 8006aa4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b02      	subs	r3, #2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ac2:	e043      	b.n	8006b4c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d119      	bne.n	8006b04 <HAL_SPI_Receive+0x2dc>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d014      	beq.n	8006b04 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	8812      	ldrh	r2, [r2, #0]
 8006ae2:	b292      	uxth	r2, r2
 8006ae4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aea:	1c9a      	adds	r2, r3, #2
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b02:	e023      	b.n	8006b4c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b04:	f7fc f9a4 	bl	8002e50 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d803      	bhi.n	8006b1c <HAL_SPI_Receive+0x2f4>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b1a:	d102      	bne.n	8006b22 <HAL_SPI_Receive+0x2fa>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d114      	bne.n	8006b4c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f8f2 	bl	8006d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e0db      	b.n	8006d04 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f af69 	bne.w	8006a2c <HAL_SPI_Receive+0x204>
 8006b5a:	e0c0      	b.n	8006cde <HAL_SPI_Receive+0x4b6>
 8006b5c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d117      	bne.n	8006ba6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b82:	7812      	ldrb	r2, [r2, #0]
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ba4:	e094      	b.n	8006cd0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	8bfa      	ldrh	r2, [r7, #30]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d946      	bls.n	8006c42 <HAL_SPI_Receive+0x41a>
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d041      	beq.n	8006c42 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bca:	7812      	ldrb	r2, [r2, #0]
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c02:	7812      	ldrb	r2, [r2, #0]
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b04      	subs	r3, #4
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c40:	e046      	b.n	8006cd0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d81c      	bhi.n	8006c88 <HAL_SPI_Receive+0x460>
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d017      	beq.n	8006c88 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c86:	e023      	b.n	8006cd0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c88:	f7fc f8e2 	bl	8002e50 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d803      	bhi.n	8006ca0 <HAL_SPI_Receive+0x478>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c9e:	d102      	bne.n	8006ca6 <HAL_SPI_Receive+0x47e>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d114      	bne.n	8006cd0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f830 	bl	8006d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e019      	b.n	8006d04 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f47f af41 	bne.w	8006b60 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f814 	bl	8006d0c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006d02:	2300      	movs	r3, #0
  }
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0208 	orr.w	r2, r2, #8
 8006d2a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0210 	orr.w	r2, r2, #16
 8006d3a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0201 	bic.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6919      	ldr	r1, [r3, #16]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4b3c      	ldr	r3, [pc, #240]	@ (8006e48 <SPI_CloseTransfer+0x13c>)
 8006d58:	400b      	ands	r3, r1
 8006d5a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006d6a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d014      	beq.n	8006da2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00f      	beq.n	8006da2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0220 	orr.w	r2, r2, #32
 8006da0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d014      	beq.n	8006dd8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00f      	beq.n	8006dd8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dbe:	f043 0204 	orr.w	r2, r3, #4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dd6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00f      	beq.n	8006e02 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de8:	f043 0201 	orr.w	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699a      	ldr	r2, [r3, #24]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e00:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00f      	beq.n	8006e2c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e12:	f043 0208 	orr.w	r2, r3, #8
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e2a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006e3c:	bf00      	nop
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	fffffc90 	.word	0xfffffc90

08006e4c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e5c:	e010      	b.n	8006e80 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e5e:	f7fb fff7 	bl	8002e50 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d803      	bhi.n	8006e76 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e74:	d102      	bne.n	8006e7c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e00f      	b.n	8006ea0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	bf0c      	ite	eq
 8006e90:	2301      	moveq	r3, #1
 8006e92:	2300      	movne	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d0df      	beq.n	8006e5e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	3307      	adds	r3, #7
 8006ec6:	08db      	lsrs	r3, r3, #3
 8006ec8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	fb02 f303 	mul.w	r3, r2, r3
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e049      	b.n	8006f84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fb fc93 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f000 fd59 	bl	80079d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d001      	beq.n	8006fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e054      	b.n	800704e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a26      	ldr	r2, [pc, #152]	@ (800705c <HAL_TIM_Base_Start_IT+0xd0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d022      	beq.n	800700c <HAL_TIM_Base_Start_IT+0x80>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fce:	d01d      	beq.n	800700c <HAL_TIM_Base_Start_IT+0x80>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a22      	ldr	r2, [pc, #136]	@ (8007060 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d018      	beq.n	800700c <HAL_TIM_Base_Start_IT+0x80>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a21      	ldr	r2, [pc, #132]	@ (8007064 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <HAL_TIM_Base_Start_IT+0x80>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8007068 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00e      	beq.n	800700c <HAL_TIM_Base_Start_IT+0x80>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800706c <HAL_TIM_Base_Start_IT+0xe0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d009      	beq.n	800700c <HAL_TIM_Base_Start_IT+0x80>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8007070 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <HAL_TIM_Base_Start_IT+0x80>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1b      	ldr	r2, [pc, #108]	@ (8007074 <HAL_TIM_Base_Start_IT+0xe8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d115      	bne.n	8007038 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	4b19      	ldr	r3, [pc, #100]	@ (8007078 <HAL_TIM_Base_Start_IT+0xec>)
 8007014:	4013      	ands	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b06      	cmp	r3, #6
 800701c:	d015      	beq.n	800704a <HAL_TIM_Base_Start_IT+0xbe>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007024:	d011      	beq.n	800704a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0201 	orr.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007036:	e008      	b.n	800704a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e000      	b.n	800704c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40010000 	.word	0x40010000
 8007060:	40000400 	.word	0x40000400
 8007064:	40000800 	.word	0x40000800
 8007068:	40000c00 	.word	0x40000c00
 800706c:	40010400 	.word	0x40010400
 8007070:	40001800 	.word	0x40001800
 8007074:	40014000 	.word	0x40014000
 8007078:	00010007 	.word	0x00010007

0800707c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e049      	b.n	8007122 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f841 	bl	800712a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f000 fc8a 	bl	80079d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
	...

08007140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <HAL_TIM_PWM_Start+0x24>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e03c      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b04      	cmp	r3, #4
 8007168:	d109      	bne.n	800717e <HAL_TIM_PWM_Start+0x3e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b01      	cmp	r3, #1
 8007174:	bf14      	ite	ne
 8007176:	2301      	movne	r3, #1
 8007178:	2300      	moveq	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	e02f      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d109      	bne.n	8007198 <HAL_TIM_PWM_Start+0x58>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	bf14      	ite	ne
 8007190:	2301      	movne	r3, #1
 8007192:	2300      	moveq	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	e022      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b0c      	cmp	r3, #12
 800719c:	d109      	bne.n	80071b2 <HAL_TIM_PWM_Start+0x72>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	bf14      	ite	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	2300      	moveq	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	e015      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	d109      	bne.n	80071cc <HAL_TIM_PWM_Start+0x8c>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	bf14      	ite	ne
 80071c4:	2301      	movne	r3, #1
 80071c6:	2300      	moveq	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	e008      	b.n	80071de <HAL_TIM_PWM_Start+0x9e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e0a1      	b.n	800732a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_PWM_Start+0xb6>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071f4:	e023      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Start+0xc6>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007204:	e01b      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Start+0xd6>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007214:	e013      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b0c      	cmp	r3, #12
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Start+0xe6>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007224:	e00b      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b10      	cmp	r3, #16
 800722a:	d104      	bne.n	8007236 <HAL_TIM_PWM_Start+0xf6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007234:	e003      	b.n	800723e <HAL_TIM_PWM_Start+0xfe>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2201      	movs	r2, #1
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 ffd8 	bl	80081fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a38      	ldr	r2, [pc, #224]	@ (8007334 <HAL_TIM_PWM_Start+0x1f4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d013      	beq.n	800727e <HAL_TIM_PWM_Start+0x13e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a37      	ldr	r2, [pc, #220]	@ (8007338 <HAL_TIM_PWM_Start+0x1f8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00e      	beq.n	800727e <HAL_TIM_PWM_Start+0x13e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a35      	ldr	r2, [pc, #212]	@ (800733c <HAL_TIM_PWM_Start+0x1fc>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d009      	beq.n	800727e <HAL_TIM_PWM_Start+0x13e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a34      	ldr	r2, [pc, #208]	@ (8007340 <HAL_TIM_PWM_Start+0x200>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d004      	beq.n	800727e <HAL_TIM_PWM_Start+0x13e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a32      	ldr	r2, [pc, #200]	@ (8007344 <HAL_TIM_PWM_Start+0x204>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d101      	bne.n	8007282 <HAL_TIM_PWM_Start+0x142>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <HAL_TIM_PWM_Start+0x144>
 8007282:	2300      	movs	r3, #0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007296:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a25      	ldr	r2, [pc, #148]	@ (8007334 <HAL_TIM_PWM_Start+0x1f4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d022      	beq.n	80072e8 <HAL_TIM_PWM_Start+0x1a8>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072aa:	d01d      	beq.n	80072e8 <HAL_TIM_PWM_Start+0x1a8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a25      	ldr	r2, [pc, #148]	@ (8007348 <HAL_TIM_PWM_Start+0x208>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d018      	beq.n	80072e8 <HAL_TIM_PWM_Start+0x1a8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a24      	ldr	r2, [pc, #144]	@ (800734c <HAL_TIM_PWM_Start+0x20c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d013      	beq.n	80072e8 <HAL_TIM_PWM_Start+0x1a8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a22      	ldr	r2, [pc, #136]	@ (8007350 <HAL_TIM_PWM_Start+0x210>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00e      	beq.n	80072e8 <HAL_TIM_PWM_Start+0x1a8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007338 <HAL_TIM_PWM_Start+0x1f8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d009      	beq.n	80072e8 <HAL_TIM_PWM_Start+0x1a8>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007354 <HAL_TIM_PWM_Start+0x214>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d004      	beq.n	80072e8 <HAL_TIM_PWM_Start+0x1a8>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a16      	ldr	r2, [pc, #88]	@ (800733c <HAL_TIM_PWM_Start+0x1fc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d115      	bne.n	8007314 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007358 <HAL_TIM_PWM_Start+0x218>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b06      	cmp	r3, #6
 80072f8:	d015      	beq.n	8007326 <HAL_TIM_PWM_Start+0x1e6>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007300:	d011      	beq.n	8007326 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007312:	e008      	b.n	8007326 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e000      	b.n	8007328 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	40010000 	.word	0x40010000
 8007338:	40010400 	.word	0x40010400
 800733c:	40014000 	.word	0x40014000
 8007340:	40014400 	.word	0x40014400
 8007344:	40014800 	.word	0x40014800
 8007348:	40000400 	.word	0x40000400
 800734c:	40000800 	.word	0x40000800
 8007350:	40000c00 	.word	0x40000c00
 8007354:	40001800 	.word	0x40001800
 8007358:	00010007 	.word	0x00010007

0800735c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d020      	beq.n	80073c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01b      	beq.n	80073c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0202 	mvn.w	r2, #2
 8007390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 faf6 	bl	8007998 <HAL_TIM_IC_CaptureCallback>
 80073ac:	e005      	b.n	80073ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fae8 	bl	8007984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 faf9 	bl	80079ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d020      	beq.n	800740c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01b      	beq.n	800740c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0204 	mvn.w	r2, #4
 80073dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fad0 	bl	8007998 <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fac2 	bl	8007984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fad3 	bl	80079ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b00      	cmp	r3, #0
 8007414:	d020      	beq.n	8007458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01b      	beq.n	8007458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0208 	mvn.w	r2, #8
 8007428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2204      	movs	r2, #4
 800742e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 faaa 	bl	8007998 <HAL_TIM_IC_CaptureCallback>
 8007444:	e005      	b.n	8007452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa9c 	bl	8007984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 faad 	bl	80079ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 0310 	and.w	r3, r3, #16
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0210 	mvn.w	r2, #16
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2208      	movs	r2, #8
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa84 	bl	8007998 <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa76 	bl	8007984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fa87 	bl	80079ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0201 	mvn.w	r2, #1
 80074c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fa fd52 	bl	8001f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80074ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 ffbf 	bl	8008474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00c      	beq.n	800751a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 ffb7 	bl	8008488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	d007      	beq.n	800753e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa41 	bl	80079c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00c      	beq.n	8007562 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f06f 0220 	mvn.w	r2, #32
 800755a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 ff7f 	bl	8008460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007586:	2302      	movs	r3, #2
 8007588:	e0ff      	b.n	800778a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b14      	cmp	r3, #20
 8007596:	f200 80f0 	bhi.w	800777a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800759a:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	0800777b 	.word	0x0800777b
 80075a8:	0800777b 	.word	0x0800777b
 80075ac:	0800777b 	.word	0x0800777b
 80075b0:	08007635 	.word	0x08007635
 80075b4:	0800777b 	.word	0x0800777b
 80075b8:	0800777b 	.word	0x0800777b
 80075bc:	0800777b 	.word	0x0800777b
 80075c0:	08007677 	.word	0x08007677
 80075c4:	0800777b 	.word	0x0800777b
 80075c8:	0800777b 	.word	0x0800777b
 80075cc:	0800777b 	.word	0x0800777b
 80075d0:	080076b7 	.word	0x080076b7
 80075d4:	0800777b 	.word	0x0800777b
 80075d8:	0800777b 	.word	0x0800777b
 80075dc:	0800777b 	.word	0x0800777b
 80075e0:	080076f9 	.word	0x080076f9
 80075e4:	0800777b 	.word	0x0800777b
 80075e8:	0800777b 	.word	0x0800777b
 80075ec:	0800777b 	.word	0x0800777b
 80075f0:	08007739 	.word	0x08007739
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fa8a 	bl	8007b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0208 	orr.w	r2, r2, #8
 800760e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0204 	bic.w	r2, r2, #4
 800761e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6999      	ldr	r1, [r3, #24]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	691a      	ldr	r2, [r3, #16]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	619a      	str	r2, [r3, #24]
      break;
 8007632:	e0a5      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fafa 	bl	8007c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699a      	ldr	r2, [r3, #24]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800764e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800765e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6999      	ldr	r1, [r3, #24]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	021a      	lsls	r2, r3, #8
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	619a      	str	r2, [r3, #24]
      break;
 8007674:	e084      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fb63 	bl	8007d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0208 	orr.w	r2, r2, #8
 8007690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0204 	bic.w	r2, r2, #4
 80076a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69d9      	ldr	r1, [r3, #28]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	61da      	str	r2, [r3, #28]
      break;
 80076b4:	e064      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fbcb 	bl	8007e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69da      	ldr	r2, [r3, #28]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69d9      	ldr	r1, [r3, #28]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	021a      	lsls	r2, r3, #8
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	61da      	str	r2, [r3, #28]
      break;
 80076f6:	e043      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fc14 	bl	8007f2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0208 	orr.w	r2, r2, #8
 8007712:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0204 	bic.w	r2, r2, #4
 8007722:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007736:	e023      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fc58 	bl	8007ff4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007752:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007762:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	021a      	lsls	r2, r3, #8
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007778:	e002      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]
      break;
 800777e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop

08007794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_TIM_ConfigClockSource+0x1c>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e0dc      	b.n	800796a <HAL_TIM_ConfigClockSource+0x1d6>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	4b6a      	ldr	r3, [pc, #424]	@ (8007974 <HAL_TIM_ConfigClockSource+0x1e0>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a64      	ldr	r2, [pc, #400]	@ (8007978 <HAL_TIM_ConfigClockSource+0x1e4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	f000 80a9 	beq.w	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 80077ec:	4a62      	ldr	r2, [pc, #392]	@ (8007978 <HAL_TIM_ConfigClockSource+0x1e4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	f200 80ae 	bhi.w	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 80077f4:	4a61      	ldr	r2, [pc, #388]	@ (800797c <HAL_TIM_ConfigClockSource+0x1e8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	f000 80a1 	beq.w	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 80077fc:	4a5f      	ldr	r2, [pc, #380]	@ (800797c <HAL_TIM_ConfigClockSource+0x1e8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	f200 80a6 	bhi.w	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007804:	4a5e      	ldr	r2, [pc, #376]	@ (8007980 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007806:	4293      	cmp	r3, r2
 8007808:	f000 8099 	beq.w	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 800780c:	4a5c      	ldr	r2, [pc, #368]	@ (8007980 <HAL_TIM_ConfigClockSource+0x1ec>)
 800780e:	4293      	cmp	r3, r2
 8007810:	f200 809e 	bhi.w	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007814:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007818:	f000 8091 	beq.w	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 800781c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007820:	f200 8096 	bhi.w	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007824:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007828:	f000 8089 	beq.w	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 800782c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007830:	f200 808e 	bhi.w	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007838:	d03e      	beq.n	80078b8 <HAL_TIM_ConfigClockSource+0x124>
 800783a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800783e:	f200 8087 	bhi.w	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007846:	f000 8086 	beq.w	8007956 <HAL_TIM_ConfigClockSource+0x1c2>
 800784a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784e:	d87f      	bhi.n	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007850:	2b70      	cmp	r3, #112	@ 0x70
 8007852:	d01a      	beq.n	800788a <HAL_TIM_ConfigClockSource+0xf6>
 8007854:	2b70      	cmp	r3, #112	@ 0x70
 8007856:	d87b      	bhi.n	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007858:	2b60      	cmp	r3, #96	@ 0x60
 800785a:	d050      	beq.n	80078fe <HAL_TIM_ConfigClockSource+0x16a>
 800785c:	2b60      	cmp	r3, #96	@ 0x60
 800785e:	d877      	bhi.n	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007860:	2b50      	cmp	r3, #80	@ 0x50
 8007862:	d03c      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x14a>
 8007864:	2b50      	cmp	r3, #80	@ 0x50
 8007866:	d873      	bhi.n	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007868:	2b40      	cmp	r3, #64	@ 0x40
 800786a:	d058      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x18a>
 800786c:	2b40      	cmp	r3, #64	@ 0x40
 800786e:	d86f      	bhi.n	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007870:	2b30      	cmp	r3, #48	@ 0x30
 8007872:	d064      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 8007874:	2b30      	cmp	r3, #48	@ 0x30
 8007876:	d86b      	bhi.n	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007878:	2b20      	cmp	r3, #32
 800787a:	d060      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 800787c:	2b20      	cmp	r3, #32
 800787e:	d867      	bhi.n	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d05c      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 8007884:	2b10      	cmp	r3, #16
 8007886:	d05a      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x1aa>
 8007888:	e062      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800789a:	f000 fc8f 	bl	80081bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	609a      	str	r2, [r3, #8]
      break;
 80078b6:	e04f      	b.n	8007958 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078c8:	f000 fc78 	bl	80081bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078da:	609a      	str	r2, [r3, #8]
      break;
 80078dc:	e03c      	b.n	8007958 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ea:	461a      	mov	r2, r3
 80078ec:	f000 fbe8 	bl	80080c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2150      	movs	r1, #80	@ 0x50
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fc42 	bl	8008180 <TIM_ITRx_SetConfig>
      break;
 80078fc:	e02c      	b.n	8007958 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800790a:	461a      	mov	r2, r3
 800790c:	f000 fc07 	bl	800811e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2160      	movs	r1, #96	@ 0x60
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fc32 	bl	8008180 <TIM_ITRx_SetConfig>
      break;
 800791c:	e01c      	b.n	8007958 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800792a:	461a      	mov	r2, r3
 800792c:	f000 fbc8 	bl	80080c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2140      	movs	r1, #64	@ 0x40
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fc22 	bl	8008180 <TIM_ITRx_SetConfig>
      break;
 800793c:	e00c      	b.n	8007958 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4619      	mov	r1, r3
 8007948:	4610      	mov	r0, r2
 800794a:	f000 fc19 	bl	8008180 <TIM_ITRx_SetConfig>
      break;
 800794e:	e003      	b.n	8007958 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
      break;
 8007954:	e000      	b.n	8007958 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	ffceff88 	.word	0xffceff88
 8007978:	00100040 	.word	0x00100040
 800797c:	00100030 	.word	0x00100030
 8007980:	00100020 	.word	0x00100020

08007984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a43      	ldr	r2, [pc, #268]	@ (8007af4 <TIM_Base_SetConfig+0x120>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d013      	beq.n	8007a14 <TIM_Base_SetConfig+0x40>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f2:	d00f      	beq.n	8007a14 <TIM_Base_SetConfig+0x40>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a40      	ldr	r2, [pc, #256]	@ (8007af8 <TIM_Base_SetConfig+0x124>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00b      	beq.n	8007a14 <TIM_Base_SetConfig+0x40>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a3f      	ldr	r2, [pc, #252]	@ (8007afc <TIM_Base_SetConfig+0x128>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d007      	beq.n	8007a14 <TIM_Base_SetConfig+0x40>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a3e      	ldr	r2, [pc, #248]	@ (8007b00 <TIM_Base_SetConfig+0x12c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_Base_SetConfig+0x40>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8007b04 <TIM_Base_SetConfig+0x130>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d108      	bne.n	8007a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a32      	ldr	r2, [pc, #200]	@ (8007af4 <TIM_Base_SetConfig+0x120>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01f      	beq.n	8007a6e <TIM_Base_SetConfig+0x9a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a34:	d01b      	beq.n	8007a6e <TIM_Base_SetConfig+0x9a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a2f      	ldr	r2, [pc, #188]	@ (8007af8 <TIM_Base_SetConfig+0x124>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d017      	beq.n	8007a6e <TIM_Base_SetConfig+0x9a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a2e      	ldr	r2, [pc, #184]	@ (8007afc <TIM_Base_SetConfig+0x128>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <TIM_Base_SetConfig+0x9a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a2d      	ldr	r2, [pc, #180]	@ (8007b00 <TIM_Base_SetConfig+0x12c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00f      	beq.n	8007a6e <TIM_Base_SetConfig+0x9a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a2c      	ldr	r2, [pc, #176]	@ (8007b04 <TIM_Base_SetConfig+0x130>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00b      	beq.n	8007a6e <TIM_Base_SetConfig+0x9a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2b      	ldr	r2, [pc, #172]	@ (8007b08 <TIM_Base_SetConfig+0x134>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d007      	beq.n	8007a6e <TIM_Base_SetConfig+0x9a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2a      	ldr	r2, [pc, #168]	@ (8007b0c <TIM_Base_SetConfig+0x138>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_Base_SetConfig+0x9a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a29      	ldr	r2, [pc, #164]	@ (8007b10 <TIM_Base_SetConfig+0x13c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d108      	bne.n	8007a80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a14      	ldr	r2, [pc, #80]	@ (8007af4 <TIM_Base_SetConfig+0x120>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00f      	beq.n	8007ac6 <TIM_Base_SetConfig+0xf2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a16      	ldr	r2, [pc, #88]	@ (8007b04 <TIM_Base_SetConfig+0x130>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00b      	beq.n	8007ac6 <TIM_Base_SetConfig+0xf2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a15      	ldr	r2, [pc, #84]	@ (8007b08 <TIM_Base_SetConfig+0x134>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d007      	beq.n	8007ac6 <TIM_Base_SetConfig+0xf2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a14      	ldr	r2, [pc, #80]	@ (8007b0c <TIM_Base_SetConfig+0x138>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d003      	beq.n	8007ac6 <TIM_Base_SetConfig+0xf2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a13      	ldr	r2, [pc, #76]	@ (8007b10 <TIM_Base_SetConfig+0x13c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d103      	bne.n	8007ace <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f043 0204 	orr.w	r2, r3, #4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	601a      	str	r2, [r3, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	40010000 	.word	0x40010000
 8007af8:	40000400 	.word	0x40000400
 8007afc:	40000800 	.word	0x40000800
 8007b00:	40000c00 	.word	0x40000c00
 8007b04:	40010400 	.word	0x40010400
 8007b08:	40014000 	.word	0x40014000
 8007b0c:	40014400 	.word	0x40014400
 8007b10:	40014800 	.word	0x40014800

08007b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f023 0201 	bic.w	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4b37      	ldr	r3, [pc, #220]	@ (8007c1c <TIM_OC1_SetConfig+0x108>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f023 0302 	bic.w	r3, r3, #2
 8007b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007c20 <TIM_OC1_SetConfig+0x10c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00f      	beq.n	8007b90 <TIM_OC1_SetConfig+0x7c>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a2c      	ldr	r2, [pc, #176]	@ (8007c24 <TIM_OC1_SetConfig+0x110>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00b      	beq.n	8007b90 <TIM_OC1_SetConfig+0x7c>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8007c28 <TIM_OC1_SetConfig+0x114>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d007      	beq.n	8007b90 <TIM_OC1_SetConfig+0x7c>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a2a      	ldr	r2, [pc, #168]	@ (8007c2c <TIM_OC1_SetConfig+0x118>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d003      	beq.n	8007b90 <TIM_OC1_SetConfig+0x7c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a29      	ldr	r2, [pc, #164]	@ (8007c30 <TIM_OC1_SetConfig+0x11c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d10c      	bne.n	8007baa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f023 0308 	bic.w	r3, r3, #8
 8007b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f023 0304 	bic.w	r3, r3, #4
 8007ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a1c      	ldr	r2, [pc, #112]	@ (8007c20 <TIM_OC1_SetConfig+0x10c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00f      	beq.n	8007bd2 <TIM_OC1_SetConfig+0xbe>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c24 <TIM_OC1_SetConfig+0x110>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00b      	beq.n	8007bd2 <TIM_OC1_SetConfig+0xbe>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8007c28 <TIM_OC1_SetConfig+0x114>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d007      	beq.n	8007bd2 <TIM_OC1_SetConfig+0xbe>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a19      	ldr	r2, [pc, #100]	@ (8007c2c <TIM_OC1_SetConfig+0x118>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d003      	beq.n	8007bd2 <TIM_OC1_SetConfig+0xbe>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a18      	ldr	r2, [pc, #96]	@ (8007c30 <TIM_OC1_SetConfig+0x11c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d111      	bne.n	8007bf6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	621a      	str	r2, [r3, #32]
}
 8007c10:	bf00      	nop
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	fffeff8f 	.word	0xfffeff8f
 8007c20:	40010000 	.word	0x40010000
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800

08007c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	f023 0210 	bic.w	r2, r3, #16
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4b34      	ldr	r3, [pc, #208]	@ (8007d30 <TIM_OC2_SetConfig+0xfc>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f023 0320 	bic.w	r3, r3, #32
 8007c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a29      	ldr	r2, [pc, #164]	@ (8007d34 <TIM_OC2_SetConfig+0x100>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d003      	beq.n	8007c9c <TIM_OC2_SetConfig+0x68>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a28      	ldr	r2, [pc, #160]	@ (8007d38 <TIM_OC2_SetConfig+0x104>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d10d      	bne.n	8007cb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a1e      	ldr	r2, [pc, #120]	@ (8007d34 <TIM_OC2_SetConfig+0x100>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00f      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xac>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8007d38 <TIM_OC2_SetConfig+0x104>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xac>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a1c      	ldr	r2, [pc, #112]	@ (8007d3c <TIM_OC2_SetConfig+0x108>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xac>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d40 <TIM_OC2_SetConfig+0x10c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xac>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a1a      	ldr	r2, [pc, #104]	@ (8007d44 <TIM_OC2_SetConfig+0x110>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d113      	bne.n	8007d08 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	feff8fff 	.word	0xfeff8fff
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40010400 	.word	0x40010400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400
 8007d44:	40014800 	.word	0x40014800

08007d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4b33      	ldr	r3, [pc, #204]	@ (8007e40 <TIM_OC3_SetConfig+0xf8>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a28      	ldr	r2, [pc, #160]	@ (8007e44 <TIM_OC3_SetConfig+0xfc>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_OC3_SetConfig+0x66>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a27      	ldr	r2, [pc, #156]	@ (8007e48 <TIM_OC3_SetConfig+0x100>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d10d      	bne.n	8007dca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007db4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e44 <TIM_OC3_SetConfig+0xfc>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00f      	beq.n	8007df2 <TIM_OC3_SetConfig+0xaa>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e48 <TIM_OC3_SetConfig+0x100>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00b      	beq.n	8007df2 <TIM_OC3_SetConfig+0xaa>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8007e4c <TIM_OC3_SetConfig+0x104>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d007      	beq.n	8007df2 <TIM_OC3_SetConfig+0xaa>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a1a      	ldr	r2, [pc, #104]	@ (8007e50 <TIM_OC3_SetConfig+0x108>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <TIM_OC3_SetConfig+0xaa>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a19      	ldr	r2, [pc, #100]	@ (8007e54 <TIM_OC3_SetConfig+0x10c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d113      	bne.n	8007e1a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	621a      	str	r2, [r3, #32]
}
 8007e34:	bf00      	nop
 8007e36:	371c      	adds	r7, #28
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	fffeff8f 	.word	0xfffeff8f
 8007e44:	40010000 	.word	0x40010000
 8007e48:	40010400 	.word	0x40010400
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	40014800 	.word	0x40014800

08007e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4b24      	ldr	r3, [pc, #144]	@ (8007f14 <TIM_OC4_SetConfig+0xbc>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	031b      	lsls	r3, r3, #12
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a19      	ldr	r2, [pc, #100]	@ (8007f18 <TIM_OC4_SetConfig+0xc0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00f      	beq.n	8007ed8 <TIM_OC4_SetConfig+0x80>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a18      	ldr	r2, [pc, #96]	@ (8007f1c <TIM_OC4_SetConfig+0xc4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00b      	beq.n	8007ed8 <TIM_OC4_SetConfig+0x80>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a17      	ldr	r2, [pc, #92]	@ (8007f20 <TIM_OC4_SetConfig+0xc8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d007      	beq.n	8007ed8 <TIM_OC4_SetConfig+0x80>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a16      	ldr	r2, [pc, #88]	@ (8007f24 <TIM_OC4_SetConfig+0xcc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d003      	beq.n	8007ed8 <TIM_OC4_SetConfig+0x80>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a15      	ldr	r2, [pc, #84]	@ (8007f28 <TIM_OC4_SetConfig+0xd0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d109      	bne.n	8007eec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	019b      	lsls	r3, r3, #6
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	621a      	str	r2, [r3, #32]
}
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	feff8fff 	.word	0xfeff8fff
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40010400 	.word	0x40010400
 8007f20:	40014000 	.word	0x40014000
 8007f24:	40014400 	.word	0x40014400
 8007f28:	40014800 	.word	0x40014800

08007f2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4b21      	ldr	r3, [pc, #132]	@ (8007fdc <TIM_OC5_SetConfig+0xb0>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a18      	ldr	r2, [pc, #96]	@ (8007fe0 <TIM_OC5_SetConfig+0xb4>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00f      	beq.n	8007fa2 <TIM_OC5_SetConfig+0x76>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a17      	ldr	r2, [pc, #92]	@ (8007fe4 <TIM_OC5_SetConfig+0xb8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00b      	beq.n	8007fa2 <TIM_OC5_SetConfig+0x76>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a16      	ldr	r2, [pc, #88]	@ (8007fe8 <TIM_OC5_SetConfig+0xbc>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d007      	beq.n	8007fa2 <TIM_OC5_SetConfig+0x76>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a15      	ldr	r2, [pc, #84]	@ (8007fec <TIM_OC5_SetConfig+0xc0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_OC5_SetConfig+0x76>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a14      	ldr	r2, [pc, #80]	@ (8007ff0 <TIM_OC5_SetConfig+0xc4>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d109      	bne.n	8007fb6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	621a      	str	r2, [r3, #32]
}
 8007fd0:	bf00      	nop
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	fffeff8f 	.word	0xfffeff8f
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40010400 	.word	0x40010400
 8007fe8:	40014000 	.word	0x40014000
 8007fec:	40014400 	.word	0x40014400
 8007ff0:	40014800 	.word	0x40014800

08007ff4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4b22      	ldr	r3, [pc, #136]	@ (80080a8 <TIM_OC6_SetConfig+0xb4>)
 8008020:	4013      	ands	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	051b      	lsls	r3, r3, #20
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a19      	ldr	r2, [pc, #100]	@ (80080ac <TIM_OC6_SetConfig+0xb8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d00f      	beq.n	800806c <TIM_OC6_SetConfig+0x78>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a18      	ldr	r2, [pc, #96]	@ (80080b0 <TIM_OC6_SetConfig+0xbc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00b      	beq.n	800806c <TIM_OC6_SetConfig+0x78>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a17      	ldr	r2, [pc, #92]	@ (80080b4 <TIM_OC6_SetConfig+0xc0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d007      	beq.n	800806c <TIM_OC6_SetConfig+0x78>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a16      	ldr	r2, [pc, #88]	@ (80080b8 <TIM_OC6_SetConfig+0xc4>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d003      	beq.n	800806c <TIM_OC6_SetConfig+0x78>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a15      	ldr	r2, [pc, #84]	@ (80080bc <TIM_OC6_SetConfig+0xc8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d109      	bne.n	8008080 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008072:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	feff8fff 	.word	0xfeff8fff
 80080ac:	40010000 	.word	0x40010000
 80080b0:	40010400 	.word	0x40010400
 80080b4:	40014000 	.word	0x40014000
 80080b8:	40014400 	.word	0x40014400
 80080bc:	40014800 	.word	0x40014800

080080c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f023 0201 	bic.w	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f023 030a 	bic.w	r3, r3, #10
 80080fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	621a      	str	r2, [r3, #32]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800811e:	b480      	push	{r7}
 8008120:	b087      	sub	sp, #28
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	f023 0210 	bic.w	r2, r3, #16
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	031b      	lsls	r3, r3, #12
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800815a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4b09      	ldr	r3, [pc, #36]	@ (80081b8 <TIM_ITRx_SetConfig+0x38>)
 8008194:	4013      	ands	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4313      	orrs	r3, r2
 800819e:	f043 0307 	orr.w	r3, r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	609a      	str	r2, [r3, #8]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	ffcfff8f 	.word	0xffcfff8f

080081bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	021a      	lsls	r2, r3, #8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	431a      	orrs	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	609a      	str	r2, [r3, #8]
}
 80081f0:	bf00      	nop
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f003 031f 	and.w	r3, r3, #31
 800820e:	2201      	movs	r2, #1
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1a      	ldr	r2, [r3, #32]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	43db      	mvns	r3, r3
 800821e:	401a      	ands	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a1a      	ldr	r2, [r3, #32]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	fa01 f303 	lsl.w	r3, r1, r3
 8008234:	431a      	orrs	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800825c:	2302      	movs	r3, #2
 800825e:	e06d      	b.n	800833c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a30      	ldr	r2, [pc, #192]	@ (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d004      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2f      	ldr	r2, [pc, #188]	@ (800834c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d108      	bne.n	80082a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800829a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a20      	ldr	r2, [pc, #128]	@ (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d022      	beq.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082d2:	d01d      	beq.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d018      	beq.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00e      	beq.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a15      	ldr	r2, [pc, #84]	@ (800834c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a16      	ldr	r2, [pc, #88]	@ (800835c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d004      	beq.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a15      	ldr	r2, [pc, #84]	@ (8008360 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d10c      	bne.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008316:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	4313      	orrs	r3, r2
 8008320:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	40010000 	.word	0x40010000
 800834c:	40010400 	.word	0x40010400
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800
 8008358:	40000c00 	.word	0x40000c00
 800835c:	40001800 	.word	0x40001800
 8008360:	40014000 	.word	0x40014000

08008364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800837c:	2302      	movs	r3, #2
 800837e:	e065      	b.n	800844c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	041b      	lsls	r3, r3, #16
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a16      	ldr	r2, [pc, #88]	@ (8008458 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d004      	beq.n	800840e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a14      	ldr	r2, [pc, #80]	@ (800845c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d115      	bne.n	800843a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008418:	051b      	lsls	r3, r3, #20
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	4313      	orrs	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	40010000 	.word	0x40010000
 800845c:	40010400 	.word	0x40010400

08008460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e042      	b.n	8008534 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d106      	bne.n	80084c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7fa fa37 	bl	8002934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2224      	movs	r2, #36	@ 0x24
 80084ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0201 	bic.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fd90 	bl	800900c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f825 	bl	800853c <UART_SetConfig>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e01b      	b.n	8008534 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800850a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800851a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0201 	orr.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fe0f 	bl	8009150 <UART_CheckIdleState>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800853c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008540:	b092      	sub	sp, #72	@ 0x48
 8008542:	af00      	add	r7, sp, #0
 8008544:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	431a      	orrs	r2, r3
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	431a      	orrs	r2, r3
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	4313      	orrs	r3, r2
 8008562:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	4bbe      	ldr	r3, [pc, #760]	@ (8008864 <UART_SetConfig+0x328>)
 800856c:	4013      	ands	r3, r2
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008574:	430b      	orrs	r3, r1
 8008576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4ab3      	ldr	r2, [pc, #716]	@ (8008868 <UART_SetConfig+0x32c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d004      	beq.n	80085a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085a4:	4313      	orrs	r3, r2
 80085a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689a      	ldr	r2, [r3, #8]
 80085ae:	4baf      	ldr	r3, [pc, #700]	@ (800886c <UART_SetConfig+0x330>)
 80085b0:	4013      	ands	r3, r2
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c2:	f023 010f 	bic.w	r1, r3, #15
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4aa6      	ldr	r2, [pc, #664]	@ (8008870 <UART_SetConfig+0x334>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d177      	bne.n	80086cc <UART_SetConfig+0x190>
 80085dc:	4ba5      	ldr	r3, [pc, #660]	@ (8008874 <UART_SetConfig+0x338>)
 80085de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085e4:	2b28      	cmp	r3, #40	@ 0x28
 80085e6:	d86d      	bhi.n	80086c4 <UART_SetConfig+0x188>
 80085e8:	a201      	add	r2, pc, #4	@ (adr r2, 80085f0 <UART_SetConfig+0xb4>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	08008695 	.word	0x08008695
 80085f4:	080086c5 	.word	0x080086c5
 80085f8:	080086c5 	.word	0x080086c5
 80085fc:	080086c5 	.word	0x080086c5
 8008600:	080086c5 	.word	0x080086c5
 8008604:	080086c5 	.word	0x080086c5
 8008608:	080086c5 	.word	0x080086c5
 800860c:	080086c5 	.word	0x080086c5
 8008610:	0800869d 	.word	0x0800869d
 8008614:	080086c5 	.word	0x080086c5
 8008618:	080086c5 	.word	0x080086c5
 800861c:	080086c5 	.word	0x080086c5
 8008620:	080086c5 	.word	0x080086c5
 8008624:	080086c5 	.word	0x080086c5
 8008628:	080086c5 	.word	0x080086c5
 800862c:	080086c5 	.word	0x080086c5
 8008630:	080086a5 	.word	0x080086a5
 8008634:	080086c5 	.word	0x080086c5
 8008638:	080086c5 	.word	0x080086c5
 800863c:	080086c5 	.word	0x080086c5
 8008640:	080086c5 	.word	0x080086c5
 8008644:	080086c5 	.word	0x080086c5
 8008648:	080086c5 	.word	0x080086c5
 800864c:	080086c5 	.word	0x080086c5
 8008650:	080086ad 	.word	0x080086ad
 8008654:	080086c5 	.word	0x080086c5
 8008658:	080086c5 	.word	0x080086c5
 800865c:	080086c5 	.word	0x080086c5
 8008660:	080086c5 	.word	0x080086c5
 8008664:	080086c5 	.word	0x080086c5
 8008668:	080086c5 	.word	0x080086c5
 800866c:	080086c5 	.word	0x080086c5
 8008670:	080086b5 	.word	0x080086b5
 8008674:	080086c5 	.word	0x080086c5
 8008678:	080086c5 	.word	0x080086c5
 800867c:	080086c5 	.word	0x080086c5
 8008680:	080086c5 	.word	0x080086c5
 8008684:	080086c5 	.word	0x080086c5
 8008688:	080086c5 	.word	0x080086c5
 800868c:	080086c5 	.word	0x080086c5
 8008690:	080086bd 	.word	0x080086bd
 8008694:	2301      	movs	r3, #1
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e222      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 800869c:	2304      	movs	r3, #4
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a2:	e21e      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80086a4:	2308      	movs	r3, #8
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e21a      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80086ac:	2310      	movs	r3, #16
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e216      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80086b4:	2320      	movs	r3, #32
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e212      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80086bc:	2340      	movs	r3, #64	@ 0x40
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e20e      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80086c4:	2380      	movs	r3, #128	@ 0x80
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e20a      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a69      	ldr	r2, [pc, #420]	@ (8008878 <UART_SetConfig+0x33c>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d130      	bne.n	8008738 <UART_SetConfig+0x1fc>
 80086d6:	4b67      	ldr	r3, [pc, #412]	@ (8008874 <UART_SetConfig+0x338>)
 80086d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d826      	bhi.n	8008730 <UART_SetConfig+0x1f4>
 80086e2:	a201      	add	r2, pc, #4	@ (adr r2, 80086e8 <UART_SetConfig+0x1ac>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	08008701 	.word	0x08008701
 80086ec:	08008709 	.word	0x08008709
 80086f0:	08008711 	.word	0x08008711
 80086f4:	08008719 	.word	0x08008719
 80086f8:	08008721 	.word	0x08008721
 80086fc:	08008729 	.word	0x08008729
 8008700:	2300      	movs	r3, #0
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e1ec      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008708:	2304      	movs	r3, #4
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e1e8      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008710:	2308      	movs	r3, #8
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e1e4      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008718:	2310      	movs	r3, #16
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e1e0      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008720:	2320      	movs	r3, #32
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e1dc      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008728:	2340      	movs	r3, #64	@ 0x40
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e1d8      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008730:	2380      	movs	r3, #128	@ 0x80
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e1d4      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a4f      	ldr	r2, [pc, #316]	@ (800887c <UART_SetConfig+0x340>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d130      	bne.n	80087a4 <UART_SetConfig+0x268>
 8008742:	4b4c      	ldr	r3, [pc, #304]	@ (8008874 <UART_SetConfig+0x338>)
 8008744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b05      	cmp	r3, #5
 800874c:	d826      	bhi.n	800879c <UART_SetConfig+0x260>
 800874e:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <UART_SetConfig+0x218>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	0800876d 	.word	0x0800876d
 8008758:	08008775 	.word	0x08008775
 800875c:	0800877d 	.word	0x0800877d
 8008760:	08008785 	.word	0x08008785
 8008764:	0800878d 	.word	0x0800878d
 8008768:	08008795 	.word	0x08008795
 800876c:	2300      	movs	r3, #0
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e1b6      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008774:	2304      	movs	r3, #4
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877a:	e1b2      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e1ae      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008784:	2310      	movs	r3, #16
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e1aa      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 800878c:	2320      	movs	r3, #32
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e1a6      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008794:	2340      	movs	r3, #64	@ 0x40
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e1a2      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 800879c:	2380      	movs	r3, #128	@ 0x80
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e19e      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a35      	ldr	r2, [pc, #212]	@ (8008880 <UART_SetConfig+0x344>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d130      	bne.n	8008810 <UART_SetConfig+0x2d4>
 80087ae:	4b31      	ldr	r3, [pc, #196]	@ (8008874 <UART_SetConfig+0x338>)
 80087b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d826      	bhi.n	8008808 <UART_SetConfig+0x2cc>
 80087ba:	a201      	add	r2, pc, #4	@ (adr r2, 80087c0 <UART_SetConfig+0x284>)
 80087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c0:	080087d9 	.word	0x080087d9
 80087c4:	080087e1 	.word	0x080087e1
 80087c8:	080087e9 	.word	0x080087e9
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f9 	.word	0x080087f9
 80087d4:	08008801 	.word	0x08008801
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e180      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80087e0:	2304      	movs	r3, #4
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e17c      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80087e8:	2308      	movs	r3, #8
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e178      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80087f0:	2310      	movs	r3, #16
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e174      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80087f8:	2320      	movs	r3, #32
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e170      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008800:	2340      	movs	r3, #64	@ 0x40
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e16c      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008808:	2380      	movs	r3, #128	@ 0x80
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880e:	e168      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1b      	ldr	r2, [pc, #108]	@ (8008884 <UART_SetConfig+0x348>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d142      	bne.n	80088a0 <UART_SetConfig+0x364>
 800881a:	4b16      	ldr	r3, [pc, #88]	@ (8008874 <UART_SetConfig+0x338>)
 800881c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	2b05      	cmp	r3, #5
 8008824:	d838      	bhi.n	8008898 <UART_SetConfig+0x35c>
 8008826:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <UART_SetConfig+0x2f0>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008845 	.word	0x08008845
 8008830:	0800884d 	.word	0x0800884d
 8008834:	08008855 	.word	0x08008855
 8008838:	0800885d 	.word	0x0800885d
 800883c:	08008889 	.word	0x08008889
 8008840:	08008891 	.word	0x08008891
 8008844:	2300      	movs	r3, #0
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e14a      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e146      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e142      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e13e      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008864:	cfff69f3 	.word	0xcfff69f3
 8008868:	58000c00 	.word	0x58000c00
 800886c:	11fff4ff 	.word	0x11fff4ff
 8008870:	40011000 	.word	0x40011000
 8008874:	58024400 	.word	0x58024400
 8008878:	40004400 	.word	0x40004400
 800887c:	40004800 	.word	0x40004800
 8008880:	40004c00 	.word	0x40004c00
 8008884:	40005000 	.word	0x40005000
 8008888:	2320      	movs	r3, #32
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e128      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008890:	2340      	movs	r3, #64	@ 0x40
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008896:	e124      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008898:	2380      	movs	r3, #128	@ 0x80
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889e:	e120      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4acb      	ldr	r2, [pc, #812]	@ (8008bd4 <UART_SetConfig+0x698>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d176      	bne.n	8008998 <UART_SetConfig+0x45c>
 80088aa:	4bcb      	ldr	r3, [pc, #812]	@ (8008bd8 <UART_SetConfig+0x69c>)
 80088ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088b2:	2b28      	cmp	r3, #40	@ 0x28
 80088b4:	d86c      	bhi.n	8008990 <UART_SetConfig+0x454>
 80088b6:	a201      	add	r2, pc, #4	@ (adr r2, 80088bc <UART_SetConfig+0x380>)
 80088b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088bc:	08008961 	.word	0x08008961
 80088c0:	08008991 	.word	0x08008991
 80088c4:	08008991 	.word	0x08008991
 80088c8:	08008991 	.word	0x08008991
 80088cc:	08008991 	.word	0x08008991
 80088d0:	08008991 	.word	0x08008991
 80088d4:	08008991 	.word	0x08008991
 80088d8:	08008991 	.word	0x08008991
 80088dc:	08008969 	.word	0x08008969
 80088e0:	08008991 	.word	0x08008991
 80088e4:	08008991 	.word	0x08008991
 80088e8:	08008991 	.word	0x08008991
 80088ec:	08008991 	.word	0x08008991
 80088f0:	08008991 	.word	0x08008991
 80088f4:	08008991 	.word	0x08008991
 80088f8:	08008991 	.word	0x08008991
 80088fc:	08008971 	.word	0x08008971
 8008900:	08008991 	.word	0x08008991
 8008904:	08008991 	.word	0x08008991
 8008908:	08008991 	.word	0x08008991
 800890c:	08008991 	.word	0x08008991
 8008910:	08008991 	.word	0x08008991
 8008914:	08008991 	.word	0x08008991
 8008918:	08008991 	.word	0x08008991
 800891c:	08008979 	.word	0x08008979
 8008920:	08008991 	.word	0x08008991
 8008924:	08008991 	.word	0x08008991
 8008928:	08008991 	.word	0x08008991
 800892c:	08008991 	.word	0x08008991
 8008930:	08008991 	.word	0x08008991
 8008934:	08008991 	.word	0x08008991
 8008938:	08008991 	.word	0x08008991
 800893c:	08008981 	.word	0x08008981
 8008940:	08008991 	.word	0x08008991
 8008944:	08008991 	.word	0x08008991
 8008948:	08008991 	.word	0x08008991
 800894c:	08008991 	.word	0x08008991
 8008950:	08008991 	.word	0x08008991
 8008954:	08008991 	.word	0x08008991
 8008958:	08008991 	.word	0x08008991
 800895c:	08008989 	.word	0x08008989
 8008960:	2301      	movs	r3, #1
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e0bc      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e0b8      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e0b4      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e0b0      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008980:	2320      	movs	r3, #32
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e0ac      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008988:	2340      	movs	r3, #64	@ 0x40
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e0a8      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008990:	2380      	movs	r3, #128	@ 0x80
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e0a4      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a8f      	ldr	r2, [pc, #572]	@ (8008bdc <UART_SetConfig+0x6a0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d130      	bne.n	8008a04 <UART_SetConfig+0x4c8>
 80089a2:	4b8d      	ldr	r3, [pc, #564]	@ (8008bd8 <UART_SetConfig+0x69c>)
 80089a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d826      	bhi.n	80089fc <UART_SetConfig+0x4c0>
 80089ae:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <UART_SetConfig+0x478>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089cd 	.word	0x080089cd
 80089b8:	080089d5 	.word	0x080089d5
 80089bc:	080089dd 	.word	0x080089dd
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	080089ed 	.word	0x080089ed
 80089c8:	080089f5 	.word	0x080089f5
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e086      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e082      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e07e      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e07a      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80089ec:	2320      	movs	r3, #32
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e076      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80089f4:	2340      	movs	r3, #64	@ 0x40
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e072      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 80089fc:	2380      	movs	r3, #128	@ 0x80
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e06e      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a75      	ldr	r2, [pc, #468]	@ (8008be0 <UART_SetConfig+0x6a4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d130      	bne.n	8008a70 <UART_SetConfig+0x534>
 8008a0e:	4b72      	ldr	r3, [pc, #456]	@ (8008bd8 <UART_SetConfig+0x69c>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	d826      	bhi.n	8008a68 <UART_SetConfig+0x52c>
 8008a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a20 <UART_SetConfig+0x4e4>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a39 	.word	0x08008a39
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a49 	.word	0x08008a49
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e050      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008a40:	2304      	movs	r3, #4
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a46:	e04c      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008a48:	2308      	movs	r3, #8
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e048      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008a50:	2310      	movs	r3, #16
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e044      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e040      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008a60:	2340      	movs	r3, #64	@ 0x40
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e03c      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008a68:	2380      	movs	r3, #128	@ 0x80
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e038      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a5b      	ldr	r2, [pc, #364]	@ (8008be4 <UART_SetConfig+0x6a8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d130      	bne.n	8008adc <UART_SetConfig+0x5a0>
 8008a7a:	4b57      	ldr	r3, [pc, #348]	@ (8008bd8 <UART_SetConfig+0x69c>)
 8008a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d826      	bhi.n	8008ad4 <UART_SetConfig+0x598>
 8008a86:	a201      	add	r2, pc, #4	@ (adr r2, 8008a8c <UART_SetConfig+0x550>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008aa5 	.word	0x08008aa5
 8008a90:	08008aad 	.word	0x08008aad
 8008a94:	08008ab5 	.word	0x08008ab5
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008ac5 	.word	0x08008ac5
 8008aa0:	08008acd 	.word	0x08008acd
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aaa:	e01a      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008aac:	2304      	movs	r3, #4
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab2:	e016      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008ab4:	2308      	movs	r3, #8
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aba:	e012      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008abc:	2310      	movs	r3, #16
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e00e      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008ac4:	2320      	movs	r3, #32
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e00a      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008acc:	2340      	movs	r3, #64	@ 0x40
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e006      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008ad4:	2380      	movs	r3, #128	@ 0x80
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e002      	b.n	8008ae2 <UART_SetConfig+0x5a6>
 8008adc:	2380      	movs	r3, #128	@ 0x80
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8008be4 <UART_SetConfig+0x6a8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	f040 80f8 	bne.w	8008cde <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008aee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	dc46      	bgt.n	8008b84 <UART_SetConfig+0x648>
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	f2c0 8082 	blt.w	8008c00 <UART_SetConfig+0x6c4>
 8008afc:	3b02      	subs	r3, #2
 8008afe:	2b1e      	cmp	r3, #30
 8008b00:	d87e      	bhi.n	8008c00 <UART_SetConfig+0x6c4>
 8008b02:	a201      	add	r2, pc, #4	@ (adr r2, 8008b08 <UART_SetConfig+0x5cc>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b8b 	.word	0x08008b8b
 8008b0c:	08008c01 	.word	0x08008c01
 8008b10:	08008b93 	.word	0x08008b93
 8008b14:	08008c01 	.word	0x08008c01
 8008b18:	08008c01 	.word	0x08008c01
 8008b1c:	08008c01 	.word	0x08008c01
 8008b20:	08008ba3 	.word	0x08008ba3
 8008b24:	08008c01 	.word	0x08008c01
 8008b28:	08008c01 	.word	0x08008c01
 8008b2c:	08008c01 	.word	0x08008c01
 8008b30:	08008c01 	.word	0x08008c01
 8008b34:	08008c01 	.word	0x08008c01
 8008b38:	08008c01 	.word	0x08008c01
 8008b3c:	08008c01 	.word	0x08008c01
 8008b40:	08008bb3 	.word	0x08008bb3
 8008b44:	08008c01 	.word	0x08008c01
 8008b48:	08008c01 	.word	0x08008c01
 8008b4c:	08008c01 	.word	0x08008c01
 8008b50:	08008c01 	.word	0x08008c01
 8008b54:	08008c01 	.word	0x08008c01
 8008b58:	08008c01 	.word	0x08008c01
 8008b5c:	08008c01 	.word	0x08008c01
 8008b60:	08008c01 	.word	0x08008c01
 8008b64:	08008c01 	.word	0x08008c01
 8008b68:	08008c01 	.word	0x08008c01
 8008b6c:	08008c01 	.word	0x08008c01
 8008b70:	08008c01 	.word	0x08008c01
 8008b74:	08008c01 	.word	0x08008c01
 8008b78:	08008c01 	.word	0x08008c01
 8008b7c:	08008c01 	.word	0x08008c01
 8008b80:	08008bf3 	.word	0x08008bf3
 8008b84:	2b40      	cmp	r3, #64	@ 0x40
 8008b86:	d037      	beq.n	8008bf8 <UART_SetConfig+0x6bc>
 8008b88:	e03a      	b.n	8008c00 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b8a:	f7fc ff19 	bl	80059c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b90:	e03c      	b.n	8008c0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fc ff28 	bl	80059ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba0:	e034      	b.n	8008c0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba2:	f107 0318 	add.w	r3, r7, #24
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fd f874 	bl	8005c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb0:	e02c      	b.n	8008c0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bb2:	4b09      	ldr	r3, [pc, #36]	@ (8008bd8 <UART_SetConfig+0x69c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d016      	beq.n	8008bec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bbe:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <UART_SetConfig+0x69c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	08db      	lsrs	r3, r3, #3
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	4a07      	ldr	r2, [pc, #28]	@ (8008be8 <UART_SetConfig+0x6ac>)
 8008bca:	fa22 f303 	lsr.w	r3, r2, r3
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bd0:	e01c      	b.n	8008c0c <UART_SetConfig+0x6d0>
 8008bd2:	bf00      	nop
 8008bd4:	40011400 	.word	0x40011400
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	40007800 	.word	0x40007800
 8008be0:	40007c00 	.word	0x40007c00
 8008be4:	58000c00 	.word	0x58000c00
 8008be8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008bec:	4b9d      	ldr	r3, [pc, #628]	@ (8008e64 <UART_SetConfig+0x928>)
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf0:	e00c      	b.n	8008c0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bf2:	4b9d      	ldr	r3, [pc, #628]	@ (8008e68 <UART_SetConfig+0x92c>)
 8008bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf6:	e009      	b.n	8008c0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bfe:	e005      	b.n	8008c0c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 81de 	beq.w	8008fd0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	4a94      	ldr	r2, [pc, #592]	@ (8008e6c <UART_SetConfig+0x930>)
 8008c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c26:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	4413      	add	r3, r2
 8008c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d305      	bcc.n	8008c44 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d903      	bls.n	8008c4c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c4a:	e1c1      	b.n	8008fd0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c4e:	2200      	movs	r2, #0
 8008c50:	60bb      	str	r3, [r7, #8]
 8008c52:	60fa      	str	r2, [r7, #12]
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c58:	4a84      	ldr	r2, [pc, #528]	@ (8008e6c <UART_SetConfig+0x930>)
 8008c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	2200      	movs	r2, #0
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	607a      	str	r2, [r7, #4]
 8008c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c6e:	f7f7 fd4b 	bl	8000708 <__aeabi_uldivmod>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4610      	mov	r0, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	020b      	lsls	r3, r1, #8
 8008c84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c88:	0202      	lsls	r2, r0, #8
 8008c8a:	6979      	ldr	r1, [r7, #20]
 8008c8c:	6849      	ldr	r1, [r1, #4]
 8008c8e:	0849      	lsrs	r1, r1, #1
 8008c90:	2000      	movs	r0, #0
 8008c92:	460c      	mov	r4, r1
 8008c94:	4605      	mov	r5, r0
 8008c96:	eb12 0804 	adds.w	r8, r2, r4
 8008c9a:	eb43 0905 	adc.w	r9, r3, r5
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	469a      	mov	sl, r3
 8008ca6:	4693      	mov	fp, r2
 8008ca8:	4652      	mov	r2, sl
 8008caa:	465b      	mov	r3, fp
 8008cac:	4640      	mov	r0, r8
 8008cae:	4649      	mov	r1, r9
 8008cb0:	f7f7 fd2a 	bl	8000708 <__aeabi_uldivmod>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4613      	mov	r3, r2
 8008cba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cc2:	d308      	bcc.n	8008cd6 <UART_SetConfig+0x79a>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cca:	d204      	bcs.n	8008cd6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cd2:	60da      	str	r2, [r3, #12]
 8008cd4:	e17c      	b.n	8008fd0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008cdc:	e178      	b.n	8008fd0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ce6:	f040 80c5 	bne.w	8008e74 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008cea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008cee:	2b20      	cmp	r3, #32
 8008cf0:	dc48      	bgt.n	8008d84 <UART_SetConfig+0x848>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	db7b      	blt.n	8008dee <UART_SetConfig+0x8b2>
 8008cf6:	2b20      	cmp	r3, #32
 8008cf8:	d879      	bhi.n	8008dee <UART_SetConfig+0x8b2>
 8008cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008d00 <UART_SetConfig+0x7c4>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d8b 	.word	0x08008d8b
 8008d04:	08008d93 	.word	0x08008d93
 8008d08:	08008def 	.word	0x08008def
 8008d0c:	08008def 	.word	0x08008def
 8008d10:	08008d9b 	.word	0x08008d9b
 8008d14:	08008def 	.word	0x08008def
 8008d18:	08008def 	.word	0x08008def
 8008d1c:	08008def 	.word	0x08008def
 8008d20:	08008dab 	.word	0x08008dab
 8008d24:	08008def 	.word	0x08008def
 8008d28:	08008def 	.word	0x08008def
 8008d2c:	08008def 	.word	0x08008def
 8008d30:	08008def 	.word	0x08008def
 8008d34:	08008def 	.word	0x08008def
 8008d38:	08008def 	.word	0x08008def
 8008d3c:	08008def 	.word	0x08008def
 8008d40:	08008dbb 	.word	0x08008dbb
 8008d44:	08008def 	.word	0x08008def
 8008d48:	08008def 	.word	0x08008def
 8008d4c:	08008def 	.word	0x08008def
 8008d50:	08008def 	.word	0x08008def
 8008d54:	08008def 	.word	0x08008def
 8008d58:	08008def 	.word	0x08008def
 8008d5c:	08008def 	.word	0x08008def
 8008d60:	08008def 	.word	0x08008def
 8008d64:	08008def 	.word	0x08008def
 8008d68:	08008def 	.word	0x08008def
 8008d6c:	08008def 	.word	0x08008def
 8008d70:	08008def 	.word	0x08008def
 8008d74:	08008def 	.word	0x08008def
 8008d78:	08008def 	.word	0x08008def
 8008d7c:	08008def 	.word	0x08008def
 8008d80:	08008de1 	.word	0x08008de1
 8008d84:	2b40      	cmp	r3, #64	@ 0x40
 8008d86:	d02e      	beq.n	8008de6 <UART_SetConfig+0x8aa>
 8008d88:	e031      	b.n	8008dee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d8a:	f7fb fbe3 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8008d8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d90:	e033      	b.n	8008dfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d92:	f7fb fbf5 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8008d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d98:	e02f      	b.n	8008dfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fc fe24 	bl	80059ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da8:	e027      	b.n	8008dfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008daa:	f107 0318 	add.w	r3, r7, #24
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fc ff70 	bl	8005c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db8:	e01f      	b.n	8008dfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dba:	4b2d      	ldr	r3, [pc, #180]	@ (8008e70 <UART_SetConfig+0x934>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d009      	beq.n	8008dda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8008e70 <UART_SetConfig+0x934>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	08db      	lsrs	r3, r3, #3
 8008dcc:	f003 0303 	and.w	r3, r3, #3
 8008dd0:	4a24      	ldr	r2, [pc, #144]	@ (8008e64 <UART_SetConfig+0x928>)
 8008dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dd8:	e00f      	b.n	8008dfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008dda:	4b22      	ldr	r3, [pc, #136]	@ (8008e64 <UART_SetConfig+0x928>)
 8008ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dde:	e00c      	b.n	8008dfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008de0:	4b21      	ldr	r3, [pc, #132]	@ (8008e68 <UART_SetConfig+0x92c>)
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de4:	e009      	b.n	8008dfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dec:	e005      	b.n	8008dfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008df8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 80e7 	beq.w	8008fd0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e06:	4a19      	ldr	r2, [pc, #100]	@ (8008e6c <UART_SetConfig+0x930>)
 8008e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e14:	005a      	lsls	r2, r3, #1
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	441a      	add	r2, r3
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2a:	2b0f      	cmp	r3, #15
 8008e2c:	d916      	bls.n	8008e5c <UART_SetConfig+0x920>
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e34:	d212      	bcs.n	8008e5c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	f023 030f 	bic.w	r3, r3, #15
 8008e3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e42:	085b      	lsrs	r3, r3, #1
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008e58:	60da      	str	r2, [r3, #12]
 8008e5a:	e0b9      	b.n	8008fd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e62:	e0b5      	b.n	8008fd0 <UART_SetConfig+0xa94>
 8008e64:	03d09000 	.word	0x03d09000
 8008e68:	003d0900 	.word	0x003d0900
 8008e6c:	0800e678 	.word	0x0800e678
 8008e70:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	dc49      	bgt.n	8008f10 <UART_SetConfig+0x9d4>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	db7c      	blt.n	8008f7a <UART_SetConfig+0xa3e>
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	d87a      	bhi.n	8008f7a <UART_SetConfig+0xa3e>
 8008e84:	a201      	add	r2, pc, #4	@ (adr r2, 8008e8c <UART_SetConfig+0x950>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008f17 	.word	0x08008f17
 8008e90:	08008f1f 	.word	0x08008f1f
 8008e94:	08008f7b 	.word	0x08008f7b
 8008e98:	08008f7b 	.word	0x08008f7b
 8008e9c:	08008f27 	.word	0x08008f27
 8008ea0:	08008f7b 	.word	0x08008f7b
 8008ea4:	08008f7b 	.word	0x08008f7b
 8008ea8:	08008f7b 	.word	0x08008f7b
 8008eac:	08008f37 	.word	0x08008f37
 8008eb0:	08008f7b 	.word	0x08008f7b
 8008eb4:	08008f7b 	.word	0x08008f7b
 8008eb8:	08008f7b 	.word	0x08008f7b
 8008ebc:	08008f7b 	.word	0x08008f7b
 8008ec0:	08008f7b 	.word	0x08008f7b
 8008ec4:	08008f7b 	.word	0x08008f7b
 8008ec8:	08008f7b 	.word	0x08008f7b
 8008ecc:	08008f47 	.word	0x08008f47
 8008ed0:	08008f7b 	.word	0x08008f7b
 8008ed4:	08008f7b 	.word	0x08008f7b
 8008ed8:	08008f7b 	.word	0x08008f7b
 8008edc:	08008f7b 	.word	0x08008f7b
 8008ee0:	08008f7b 	.word	0x08008f7b
 8008ee4:	08008f7b 	.word	0x08008f7b
 8008ee8:	08008f7b 	.word	0x08008f7b
 8008eec:	08008f7b 	.word	0x08008f7b
 8008ef0:	08008f7b 	.word	0x08008f7b
 8008ef4:	08008f7b 	.word	0x08008f7b
 8008ef8:	08008f7b 	.word	0x08008f7b
 8008efc:	08008f7b 	.word	0x08008f7b
 8008f00:	08008f7b 	.word	0x08008f7b
 8008f04:	08008f7b 	.word	0x08008f7b
 8008f08:	08008f7b 	.word	0x08008f7b
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	2b40      	cmp	r3, #64	@ 0x40
 8008f12:	d02e      	beq.n	8008f72 <UART_SetConfig+0xa36>
 8008f14:	e031      	b.n	8008f7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f16:	f7fb fb1d 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8008f1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f1c:	e033      	b.n	8008f86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f1e:	f7fb fb2f 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8008f22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f24:	e02f      	b.n	8008f86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fc fd5e 	bl	80059ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f34:	e027      	b.n	8008f86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f36:	f107 0318 	add.w	r3, r7, #24
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fc feaa 	bl	8005c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f44:	e01f      	b.n	8008f86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f46:	4b2d      	ldr	r3, [pc, #180]	@ (8008ffc <UART_SetConfig+0xac0>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d009      	beq.n	8008f66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f52:	4b2a      	ldr	r3, [pc, #168]	@ (8008ffc <UART_SetConfig+0xac0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	08db      	lsrs	r3, r3, #3
 8008f58:	f003 0303 	and.w	r3, r3, #3
 8008f5c:	4a28      	ldr	r2, [pc, #160]	@ (8009000 <UART_SetConfig+0xac4>)
 8008f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f64:	e00f      	b.n	8008f86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008f66:	4b26      	ldr	r3, [pc, #152]	@ (8009000 <UART_SetConfig+0xac4>)
 8008f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6a:	e00c      	b.n	8008f86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f6c:	4b25      	ldr	r3, [pc, #148]	@ (8009004 <UART_SetConfig+0xac8>)
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f70:	e009      	b.n	8008f86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f78:	e005      	b.n	8008f86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f84:	bf00      	nop
    }

    if (pclk != 0U)
 8008f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d021      	beq.n	8008fd0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f90:	4a1d      	ldr	r2, [pc, #116]	@ (8009008 <UART_SetConfig+0xacc>)
 8008f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	085b      	lsrs	r3, r3, #1
 8008fa4:	441a      	add	r2, r3
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb2:	2b0f      	cmp	r3, #15
 8008fb4:	d909      	bls.n	8008fca <UART_SetConfig+0xa8e>
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fbc:	d205      	bcs.n	8008fca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60da      	str	r2, [r3, #12]
 8008fc8:	e002      	b.n	8008fd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008fec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3748      	adds	r7, #72	@ 0x48
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ffa:	bf00      	nop
 8008ffc:	58024400 	.word	0x58024400
 8009000:	03d09000 	.word	0x03d09000
 8009004:	003d0900 	.word	0x003d0900
 8009008:	0800e678 	.word	0x0800e678

0800900c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009018:	f003 0308 	and.w	r3, r3, #8
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00a      	beq.n	8009058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00a      	beq.n	800907a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907e:	f003 0304 	and.w	r3, r3, #4
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a0:	f003 0310 	and.w	r3, r3, #16
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00a      	beq.n	80090be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01a      	beq.n	8009122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800910a:	d10a      	bne.n	8009122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	605a      	str	r2, [r3, #4]
  }
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b098      	sub	sp, #96	@ 0x60
 8009154:	af02      	add	r7, sp, #8
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009160:	f7f9 fe76 	bl	8002e50 <HAL_GetTick>
 8009164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0308 	and.w	r3, r3, #8
 8009170:	2b08      	cmp	r3, #8
 8009172:	d12f      	bne.n	80091d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800917c:	2200      	movs	r2, #0
 800917e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f88e 	bl	80092a4 <UART_WaitOnFlagUntilTimeout>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d022      	beq.n	80091d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800919c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80091ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e6      	bne.n	800918e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e063      	b.n	800929c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0304 	and.w	r3, r3, #4
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d149      	bne.n	8009276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ea:	2200      	movs	r2, #0
 80091ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f857 	bl	80092a4 <UART_WaitOnFlagUntilTimeout>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d03c      	beq.n	8009276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	623b      	str	r3, [r7, #32]
   return(result);
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921a:	633b      	str	r3, [r7, #48]	@ 0x30
 800921c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e6      	bne.n	80091fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	60fb      	str	r3, [r7, #12]
   return(result);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3308      	adds	r3, #8
 800924c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800924e:	61fa      	str	r2, [r7, #28]
 8009250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	69b9      	ldr	r1, [r7, #24]
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	617b      	str	r3, [r7, #20]
   return(result);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e5      	bne.n	800922e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e012      	b.n	800929c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3758      	adds	r7, #88	@ 0x58
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092b4:	e04f      	b.n	8009356 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092bc:	d04b      	beq.n	8009356 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092be:	f7f9 fdc7 	bl	8002e50 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d302      	bcc.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e04e      	b.n	8009376 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0304 	and.w	r3, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d037      	beq.n	8009356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b80      	cmp	r3, #128	@ 0x80
 80092ea:	d034      	beq.n	8009356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b40      	cmp	r3, #64	@ 0x40
 80092f0:	d031      	beq.n	8009356 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	f003 0308 	and.w	r3, r3, #8
 80092fc:	2b08      	cmp	r3, #8
 80092fe:	d110      	bne.n	8009322 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2208      	movs	r2, #8
 8009306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f839 	bl	8009380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2208      	movs	r2, #8
 8009312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e029      	b.n	8009376 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800932c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009330:	d111      	bne.n	8009356 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800933a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f81f 	bl	8009380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2220      	movs	r2, #32
 8009346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e00f      	b.n	8009376 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	69da      	ldr	r2, [r3, #28]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4013      	ands	r3, r2
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	429a      	cmp	r2, r3
 8009364:	bf0c      	ite	eq
 8009366:	2301      	moveq	r3, #1
 8009368:	2300      	movne	r3, #0
 800936a:	b2db      	uxtb	r3, r3
 800936c:	461a      	mov	r2, r3
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	429a      	cmp	r2, r3
 8009372:	d0a0      	beq.n	80092b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b095      	sub	sp, #84	@ 0x54
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800939c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80093a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e6      	bne.n	8009388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ca:	69fa      	ldr	r2, [r7, #28]
 80093cc:	4b1e      	ldr	r3, [pc, #120]	@ (8009448 <UART_EndRxTransfer+0xc8>)
 80093ce:	4013      	ands	r3, r2
 80093d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093e2:	e841 2300 	strex	r3, r2, [r1]
 80093e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e5      	bne.n	80093ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d118      	bne.n	8009428 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	60bb      	str	r3, [r7, #8]
   return(result);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f023 0310 	bic.w	r3, r3, #16
 800940a:	647b      	str	r3, [r7, #68]	@ 0x44
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6979      	ldr	r1, [r7, #20]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	613b      	str	r3, [r7, #16]
   return(result);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800943c:	bf00      	nop
 800943e:	3754      	adds	r7, #84	@ 0x54
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	effffffe 	.word	0xeffffffe

0800944c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800945a:	2b01      	cmp	r3, #1
 800945c:	d101      	bne.n	8009462 <HAL_UARTEx_DisableFifoMode+0x16>
 800945e:	2302      	movs	r3, #2
 8009460:	e027      	b.n	80094b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2224      	movs	r2, #36	@ 0x24
 800946e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0201 	bic.w	r2, r2, #1
 8009488:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009490:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d101      	bne.n	80094d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094d2:	2302      	movs	r3, #2
 80094d4:	e02d      	b.n	8009532 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2224      	movs	r2, #36	@ 0x24
 80094e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 0201 	bic.w	r2, r2, #1
 80094fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f850 	bl	80095b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800954e:	2302      	movs	r3, #2
 8009550:	e02d      	b.n	80095ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2224      	movs	r2, #36	@ 0x24
 800955e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0201 	bic.w	r2, r2, #1
 8009578:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f812 	bl	80095b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d108      	bne.n	80095da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095d8:	e031      	b.n	800963e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095da:	2310      	movs	r3, #16
 80095dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095de:	2310      	movs	r3, #16
 80095e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	0e5b      	lsrs	r3, r3, #25
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	0f5b      	lsrs	r3, r3, #29
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009602:	7bbb      	ldrb	r3, [r7, #14]
 8009604:	7b3a      	ldrb	r2, [r7, #12]
 8009606:	4911      	ldr	r1, [pc, #68]	@ (800964c <UARTEx_SetNbDataToProcess+0x94>)
 8009608:	5c8a      	ldrb	r2, [r1, r2]
 800960a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800960e:	7b3a      	ldrb	r2, [r7, #12]
 8009610:	490f      	ldr	r1, [pc, #60]	@ (8009650 <UARTEx_SetNbDataToProcess+0x98>)
 8009612:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009614:	fb93 f3f2 	sdiv	r3, r3, r2
 8009618:	b29a      	uxth	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	7b7a      	ldrb	r2, [r7, #13]
 8009624:	4909      	ldr	r1, [pc, #36]	@ (800964c <UARTEx_SetNbDataToProcess+0x94>)
 8009626:	5c8a      	ldrb	r2, [r1, r2]
 8009628:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800962c:	7b7a      	ldrb	r2, [r7, #13]
 800962e:	4908      	ldr	r1, [pc, #32]	@ (8009650 <UARTEx_SetNbDataToProcess+0x98>)
 8009630:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009632:	fb93 f3f2 	sdiv	r3, r3, r2
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800963e:	bf00      	nop
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	0800e690 	.word	0x0800e690
 8009650:	0800e698 	.word	0x0800e698

08009654 <__cvt>:
 8009654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009656:	ed2d 8b02 	vpush	{d8}
 800965a:	eeb0 8b40 	vmov.f64	d8, d0
 800965e:	b085      	sub	sp, #20
 8009660:	4617      	mov	r7, r2
 8009662:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009664:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009666:	ee18 2a90 	vmov	r2, s17
 800966a:	f025 0520 	bic.w	r5, r5, #32
 800966e:	2a00      	cmp	r2, #0
 8009670:	bfb6      	itet	lt
 8009672:	222d      	movlt	r2, #45	@ 0x2d
 8009674:	2200      	movge	r2, #0
 8009676:	eeb1 8b40 	vneglt.f64	d8, d0
 800967a:	2d46      	cmp	r5, #70	@ 0x46
 800967c:	460c      	mov	r4, r1
 800967e:	701a      	strb	r2, [r3, #0]
 8009680:	d004      	beq.n	800968c <__cvt+0x38>
 8009682:	2d45      	cmp	r5, #69	@ 0x45
 8009684:	d100      	bne.n	8009688 <__cvt+0x34>
 8009686:	3401      	adds	r4, #1
 8009688:	2102      	movs	r1, #2
 800968a:	e000      	b.n	800968e <__cvt+0x3a>
 800968c:	2103      	movs	r1, #3
 800968e:	ab03      	add	r3, sp, #12
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	ab02      	add	r3, sp, #8
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	4622      	mov	r2, r4
 8009698:	4633      	mov	r3, r6
 800969a:	eeb0 0b48 	vmov.f64	d0, d8
 800969e:	f001 fe1f 	bl	800b2e0 <_dtoa_r>
 80096a2:	2d47      	cmp	r5, #71	@ 0x47
 80096a4:	d114      	bne.n	80096d0 <__cvt+0x7c>
 80096a6:	07fb      	lsls	r3, r7, #31
 80096a8:	d50a      	bpl.n	80096c0 <__cvt+0x6c>
 80096aa:	1902      	adds	r2, r0, r4
 80096ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80096b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b4:	bf08      	it	eq
 80096b6:	9203      	streq	r2, [sp, #12]
 80096b8:	2130      	movs	r1, #48	@ 0x30
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	4293      	cmp	r3, r2
 80096be:	d319      	bcc.n	80096f4 <__cvt+0xa0>
 80096c0:	9b03      	ldr	r3, [sp, #12]
 80096c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096c4:	1a1b      	subs	r3, r3, r0
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	b005      	add	sp, #20
 80096ca:	ecbd 8b02 	vpop	{d8}
 80096ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d0:	2d46      	cmp	r5, #70	@ 0x46
 80096d2:	eb00 0204 	add.w	r2, r0, r4
 80096d6:	d1e9      	bne.n	80096ac <__cvt+0x58>
 80096d8:	7803      	ldrb	r3, [r0, #0]
 80096da:	2b30      	cmp	r3, #48	@ 0x30
 80096dc:	d107      	bne.n	80096ee <__cvt+0x9a>
 80096de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80096e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e6:	bf1c      	itt	ne
 80096e8:	f1c4 0401 	rsbne	r4, r4, #1
 80096ec:	6034      	strne	r4, [r6, #0]
 80096ee:	6833      	ldr	r3, [r6, #0]
 80096f0:	441a      	add	r2, r3
 80096f2:	e7db      	b.n	80096ac <__cvt+0x58>
 80096f4:	1c5c      	adds	r4, r3, #1
 80096f6:	9403      	str	r4, [sp, #12]
 80096f8:	7019      	strb	r1, [r3, #0]
 80096fa:	e7de      	b.n	80096ba <__cvt+0x66>

080096fc <__exponent>:
 80096fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096fe:	2900      	cmp	r1, #0
 8009700:	bfba      	itte	lt
 8009702:	4249      	neglt	r1, r1
 8009704:	232d      	movlt	r3, #45	@ 0x2d
 8009706:	232b      	movge	r3, #43	@ 0x2b
 8009708:	2909      	cmp	r1, #9
 800970a:	7002      	strb	r2, [r0, #0]
 800970c:	7043      	strb	r3, [r0, #1]
 800970e:	dd29      	ble.n	8009764 <__exponent+0x68>
 8009710:	f10d 0307 	add.w	r3, sp, #7
 8009714:	461d      	mov	r5, r3
 8009716:	270a      	movs	r7, #10
 8009718:	461a      	mov	r2, r3
 800971a:	fbb1 f6f7 	udiv	r6, r1, r7
 800971e:	fb07 1416 	mls	r4, r7, r6, r1
 8009722:	3430      	adds	r4, #48	@ 0x30
 8009724:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009728:	460c      	mov	r4, r1
 800972a:	2c63      	cmp	r4, #99	@ 0x63
 800972c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009730:	4631      	mov	r1, r6
 8009732:	dcf1      	bgt.n	8009718 <__exponent+0x1c>
 8009734:	3130      	adds	r1, #48	@ 0x30
 8009736:	1e94      	subs	r4, r2, #2
 8009738:	f803 1c01 	strb.w	r1, [r3, #-1]
 800973c:	1c41      	adds	r1, r0, #1
 800973e:	4623      	mov	r3, r4
 8009740:	42ab      	cmp	r3, r5
 8009742:	d30a      	bcc.n	800975a <__exponent+0x5e>
 8009744:	f10d 0309 	add.w	r3, sp, #9
 8009748:	1a9b      	subs	r3, r3, r2
 800974a:	42ac      	cmp	r4, r5
 800974c:	bf88      	it	hi
 800974e:	2300      	movhi	r3, #0
 8009750:	3302      	adds	r3, #2
 8009752:	4403      	add	r3, r0
 8009754:	1a18      	subs	r0, r3, r0
 8009756:	b003      	add	sp, #12
 8009758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800975e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009762:	e7ed      	b.n	8009740 <__exponent+0x44>
 8009764:	2330      	movs	r3, #48	@ 0x30
 8009766:	3130      	adds	r1, #48	@ 0x30
 8009768:	7083      	strb	r3, [r0, #2]
 800976a:	70c1      	strb	r1, [r0, #3]
 800976c:	1d03      	adds	r3, r0, #4
 800976e:	e7f1      	b.n	8009754 <__exponent+0x58>

08009770 <_printf_float>:
 8009770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	b08d      	sub	sp, #52	@ 0x34
 8009776:	460c      	mov	r4, r1
 8009778:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800977c:	4616      	mov	r6, r2
 800977e:	461f      	mov	r7, r3
 8009780:	4605      	mov	r5, r0
 8009782:	f001 fd03 	bl	800b18c <_localeconv_r>
 8009786:	f8d0 b000 	ldr.w	fp, [r0]
 800978a:	4658      	mov	r0, fp
 800978c:	f7f6 fdf8 	bl	8000380 <strlen>
 8009790:	2300      	movs	r3, #0
 8009792:	930a      	str	r3, [sp, #40]	@ 0x28
 8009794:	f8d8 3000 	ldr.w	r3, [r8]
 8009798:	f894 9018 	ldrb.w	r9, [r4, #24]
 800979c:	6822      	ldr	r2, [r4, #0]
 800979e:	9005      	str	r0, [sp, #20]
 80097a0:	3307      	adds	r3, #7
 80097a2:	f023 0307 	bic.w	r3, r3, #7
 80097a6:	f103 0108 	add.w	r1, r3, #8
 80097aa:	f8c8 1000 	str.w	r1, [r8]
 80097ae:	ed93 0b00 	vldr	d0, [r3]
 80097b2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009a10 <_printf_float+0x2a0>
 80097b6:	eeb0 7bc0 	vabs.f64	d7, d0
 80097ba:	eeb4 7b46 	vcmp.f64	d7, d6
 80097be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80097c6:	dd24      	ble.n	8009812 <_printf_float+0xa2>
 80097c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80097cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d0:	d502      	bpl.n	80097d8 <_printf_float+0x68>
 80097d2:	232d      	movs	r3, #45	@ 0x2d
 80097d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097d8:	498f      	ldr	r1, [pc, #572]	@ (8009a18 <_printf_float+0x2a8>)
 80097da:	4b90      	ldr	r3, [pc, #576]	@ (8009a1c <_printf_float+0x2ac>)
 80097dc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80097e0:	bf8c      	ite	hi
 80097e2:	4688      	movhi	r8, r1
 80097e4:	4698      	movls	r8, r3
 80097e6:	f022 0204 	bic.w	r2, r2, #4
 80097ea:	2303      	movs	r3, #3
 80097ec:	6123      	str	r3, [r4, #16]
 80097ee:	6022      	str	r2, [r4, #0]
 80097f0:	f04f 0a00 	mov.w	sl, #0
 80097f4:	9700      	str	r7, [sp, #0]
 80097f6:	4633      	mov	r3, r6
 80097f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80097fa:	4621      	mov	r1, r4
 80097fc:	4628      	mov	r0, r5
 80097fe:	f000 f9d1 	bl	8009ba4 <_printf_common>
 8009802:	3001      	adds	r0, #1
 8009804:	f040 8089 	bne.w	800991a <_printf_float+0x1aa>
 8009808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800980c:	b00d      	add	sp, #52	@ 0x34
 800980e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009812:	eeb4 0b40 	vcmp.f64	d0, d0
 8009816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981a:	d709      	bvc.n	8009830 <_printf_float+0xc0>
 800981c:	ee10 3a90 	vmov	r3, s1
 8009820:	2b00      	cmp	r3, #0
 8009822:	bfbc      	itt	lt
 8009824:	232d      	movlt	r3, #45	@ 0x2d
 8009826:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800982a:	497d      	ldr	r1, [pc, #500]	@ (8009a20 <_printf_float+0x2b0>)
 800982c:	4b7d      	ldr	r3, [pc, #500]	@ (8009a24 <_printf_float+0x2b4>)
 800982e:	e7d5      	b.n	80097dc <_printf_float+0x6c>
 8009830:	6863      	ldr	r3, [r4, #4]
 8009832:	1c59      	adds	r1, r3, #1
 8009834:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009838:	d139      	bne.n	80098ae <_printf_float+0x13e>
 800983a:	2306      	movs	r3, #6
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009842:	2300      	movs	r3, #0
 8009844:	6022      	str	r2, [r4, #0]
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	ab0a      	add	r3, sp, #40	@ 0x28
 800984a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800984e:	ab09      	add	r3, sp, #36	@ 0x24
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	6861      	ldr	r1, [r4, #4]
 8009854:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009858:	4628      	mov	r0, r5
 800985a:	f7ff fefb 	bl	8009654 <__cvt>
 800985e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009862:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009864:	4680      	mov	r8, r0
 8009866:	d129      	bne.n	80098bc <_printf_float+0x14c>
 8009868:	1cc8      	adds	r0, r1, #3
 800986a:	db02      	blt.n	8009872 <_printf_float+0x102>
 800986c:	6863      	ldr	r3, [r4, #4]
 800986e:	4299      	cmp	r1, r3
 8009870:	dd41      	ble.n	80098f6 <_printf_float+0x186>
 8009872:	f1a9 0902 	sub.w	r9, r9, #2
 8009876:	fa5f f989 	uxtb.w	r9, r9
 800987a:	3901      	subs	r1, #1
 800987c:	464a      	mov	r2, r9
 800987e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009882:	9109      	str	r1, [sp, #36]	@ 0x24
 8009884:	f7ff ff3a 	bl	80096fc <__exponent>
 8009888:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800988a:	1813      	adds	r3, r2, r0
 800988c:	2a01      	cmp	r2, #1
 800988e:	4682      	mov	sl, r0
 8009890:	6123      	str	r3, [r4, #16]
 8009892:	dc02      	bgt.n	800989a <_printf_float+0x12a>
 8009894:	6822      	ldr	r2, [r4, #0]
 8009896:	07d2      	lsls	r2, r2, #31
 8009898:	d501      	bpl.n	800989e <_printf_float+0x12e>
 800989a:	3301      	adds	r3, #1
 800989c:	6123      	str	r3, [r4, #16]
 800989e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0a6      	beq.n	80097f4 <_printf_float+0x84>
 80098a6:	232d      	movs	r3, #45	@ 0x2d
 80098a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098ac:	e7a2      	b.n	80097f4 <_printf_float+0x84>
 80098ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80098b2:	d1c4      	bne.n	800983e <_printf_float+0xce>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1c2      	bne.n	800983e <_printf_float+0xce>
 80098b8:	2301      	movs	r3, #1
 80098ba:	e7bf      	b.n	800983c <_printf_float+0xcc>
 80098bc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80098c0:	d9db      	bls.n	800987a <_printf_float+0x10a>
 80098c2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80098c6:	d118      	bne.n	80098fa <_printf_float+0x18a>
 80098c8:	2900      	cmp	r1, #0
 80098ca:	6863      	ldr	r3, [r4, #4]
 80098cc:	dd0b      	ble.n	80098e6 <_printf_float+0x176>
 80098ce:	6121      	str	r1, [r4, #16]
 80098d0:	b913      	cbnz	r3, 80098d8 <_printf_float+0x168>
 80098d2:	6822      	ldr	r2, [r4, #0]
 80098d4:	07d0      	lsls	r0, r2, #31
 80098d6:	d502      	bpl.n	80098de <_printf_float+0x16e>
 80098d8:	3301      	adds	r3, #1
 80098da:	440b      	add	r3, r1
 80098dc:	6123      	str	r3, [r4, #16]
 80098de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80098e0:	f04f 0a00 	mov.w	sl, #0
 80098e4:	e7db      	b.n	800989e <_printf_float+0x12e>
 80098e6:	b913      	cbnz	r3, 80098ee <_printf_float+0x17e>
 80098e8:	6822      	ldr	r2, [r4, #0]
 80098ea:	07d2      	lsls	r2, r2, #31
 80098ec:	d501      	bpl.n	80098f2 <_printf_float+0x182>
 80098ee:	3302      	adds	r3, #2
 80098f0:	e7f4      	b.n	80098dc <_printf_float+0x16c>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e7f2      	b.n	80098dc <_printf_float+0x16c>
 80098f6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80098fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098fc:	4299      	cmp	r1, r3
 80098fe:	db05      	blt.n	800990c <_printf_float+0x19c>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	6121      	str	r1, [r4, #16]
 8009904:	07d8      	lsls	r0, r3, #31
 8009906:	d5ea      	bpl.n	80098de <_printf_float+0x16e>
 8009908:	1c4b      	adds	r3, r1, #1
 800990a:	e7e7      	b.n	80098dc <_printf_float+0x16c>
 800990c:	2900      	cmp	r1, #0
 800990e:	bfd4      	ite	le
 8009910:	f1c1 0202 	rsble	r2, r1, #2
 8009914:	2201      	movgt	r2, #1
 8009916:	4413      	add	r3, r2
 8009918:	e7e0      	b.n	80098dc <_printf_float+0x16c>
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	055a      	lsls	r2, r3, #21
 800991e:	d407      	bmi.n	8009930 <_printf_float+0x1c0>
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	4642      	mov	r2, r8
 8009924:	4631      	mov	r1, r6
 8009926:	4628      	mov	r0, r5
 8009928:	47b8      	blx	r7
 800992a:	3001      	adds	r0, #1
 800992c:	d12a      	bne.n	8009984 <_printf_float+0x214>
 800992e:	e76b      	b.n	8009808 <_printf_float+0x98>
 8009930:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009934:	f240 80e0 	bls.w	8009af8 <_printf_float+0x388>
 8009938:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800993c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009944:	d133      	bne.n	80099ae <_printf_float+0x23e>
 8009946:	4a38      	ldr	r2, [pc, #224]	@ (8009a28 <_printf_float+0x2b8>)
 8009948:	2301      	movs	r3, #1
 800994a:	4631      	mov	r1, r6
 800994c:	4628      	mov	r0, r5
 800994e:	47b8      	blx	r7
 8009950:	3001      	adds	r0, #1
 8009952:	f43f af59 	beq.w	8009808 <_printf_float+0x98>
 8009956:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800995a:	4543      	cmp	r3, r8
 800995c:	db02      	blt.n	8009964 <_printf_float+0x1f4>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	07d8      	lsls	r0, r3, #31
 8009962:	d50f      	bpl.n	8009984 <_printf_float+0x214>
 8009964:	9b05      	ldr	r3, [sp, #20]
 8009966:	465a      	mov	r2, fp
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	3001      	adds	r0, #1
 8009970:	f43f af4a 	beq.w	8009808 <_printf_float+0x98>
 8009974:	f04f 0900 	mov.w	r9, #0
 8009978:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800997c:	f104 0a1a 	add.w	sl, r4, #26
 8009980:	45c8      	cmp	r8, r9
 8009982:	dc09      	bgt.n	8009998 <_printf_float+0x228>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	079b      	lsls	r3, r3, #30
 8009988:	f100 8107 	bmi.w	8009b9a <_printf_float+0x42a>
 800998c:	68e0      	ldr	r0, [r4, #12]
 800998e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009990:	4298      	cmp	r0, r3
 8009992:	bfb8      	it	lt
 8009994:	4618      	movlt	r0, r3
 8009996:	e739      	b.n	800980c <_printf_float+0x9c>
 8009998:	2301      	movs	r3, #1
 800999a:	4652      	mov	r2, sl
 800999c:	4631      	mov	r1, r6
 800999e:	4628      	mov	r0, r5
 80099a0:	47b8      	blx	r7
 80099a2:	3001      	adds	r0, #1
 80099a4:	f43f af30 	beq.w	8009808 <_printf_float+0x98>
 80099a8:	f109 0901 	add.w	r9, r9, #1
 80099ac:	e7e8      	b.n	8009980 <_printf_float+0x210>
 80099ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dc3b      	bgt.n	8009a2c <_printf_float+0x2bc>
 80099b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a28 <_printf_float+0x2b8>)
 80099b6:	2301      	movs	r3, #1
 80099b8:	4631      	mov	r1, r6
 80099ba:	4628      	mov	r0, r5
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	f43f af22 	beq.w	8009808 <_printf_float+0x98>
 80099c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80099c8:	ea59 0303 	orrs.w	r3, r9, r3
 80099cc:	d102      	bne.n	80099d4 <_printf_float+0x264>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	07d9      	lsls	r1, r3, #31
 80099d2:	d5d7      	bpl.n	8009984 <_printf_float+0x214>
 80099d4:	9b05      	ldr	r3, [sp, #20]
 80099d6:	465a      	mov	r2, fp
 80099d8:	4631      	mov	r1, r6
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	f43f af12 	beq.w	8009808 <_printf_float+0x98>
 80099e4:	f04f 0a00 	mov.w	sl, #0
 80099e8:	f104 0b1a 	add.w	fp, r4, #26
 80099ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ee:	425b      	negs	r3, r3
 80099f0:	4553      	cmp	r3, sl
 80099f2:	dc01      	bgt.n	80099f8 <_printf_float+0x288>
 80099f4:	464b      	mov	r3, r9
 80099f6:	e794      	b.n	8009922 <_printf_float+0x1b2>
 80099f8:	2301      	movs	r3, #1
 80099fa:	465a      	mov	r2, fp
 80099fc:	4631      	mov	r1, r6
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b8      	blx	r7
 8009a02:	3001      	adds	r0, #1
 8009a04:	f43f af00 	beq.w	8009808 <_printf_float+0x98>
 8009a08:	f10a 0a01 	add.w	sl, sl, #1
 8009a0c:	e7ee      	b.n	80099ec <_printf_float+0x27c>
 8009a0e:	bf00      	nop
 8009a10:	ffffffff 	.word	0xffffffff
 8009a14:	7fefffff 	.word	0x7fefffff
 8009a18:	0800e6a4 	.word	0x0800e6a4
 8009a1c:	0800e6a0 	.word	0x0800e6a0
 8009a20:	0800e6ac 	.word	0x0800e6ac
 8009a24:	0800e6a8 	.word	0x0800e6a8
 8009a28:	0800e6b0 	.word	0x0800e6b0
 8009a2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a32:	4553      	cmp	r3, sl
 8009a34:	bfa8      	it	ge
 8009a36:	4653      	movge	r3, sl
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	4699      	mov	r9, r3
 8009a3c:	dc37      	bgt.n	8009aae <_printf_float+0x33e>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9307      	str	r3, [sp, #28]
 8009a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a46:	f104 021a 	add.w	r2, r4, #26
 8009a4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a4c:	9907      	ldr	r1, [sp, #28]
 8009a4e:	9306      	str	r3, [sp, #24]
 8009a50:	eba3 0309 	sub.w	r3, r3, r9
 8009a54:	428b      	cmp	r3, r1
 8009a56:	dc31      	bgt.n	8009abc <_printf_float+0x34c>
 8009a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a5a:	459a      	cmp	sl, r3
 8009a5c:	dc3b      	bgt.n	8009ad6 <_printf_float+0x366>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	07da      	lsls	r2, r3, #31
 8009a62:	d438      	bmi.n	8009ad6 <_printf_float+0x366>
 8009a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a66:	ebaa 0903 	sub.w	r9, sl, r3
 8009a6a:	9b06      	ldr	r3, [sp, #24]
 8009a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8009a70:	4599      	cmp	r9, r3
 8009a72:	bfa8      	it	ge
 8009a74:	4699      	movge	r9, r3
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	dc34      	bgt.n	8009ae6 <_printf_float+0x376>
 8009a7c:	f04f 0800 	mov.w	r8, #0
 8009a80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a84:	f104 0b1a 	add.w	fp, r4, #26
 8009a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a8a:	ebaa 0303 	sub.w	r3, sl, r3
 8009a8e:	eba3 0309 	sub.w	r3, r3, r9
 8009a92:	4543      	cmp	r3, r8
 8009a94:	f77f af76 	ble.w	8009984 <_printf_float+0x214>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	465a      	mov	r2, fp
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	f43f aeb0 	beq.w	8009808 <_printf_float+0x98>
 8009aa8:	f108 0801 	add.w	r8, r8, #1
 8009aac:	e7ec      	b.n	8009a88 <_printf_float+0x318>
 8009aae:	4642      	mov	r2, r8
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d1c1      	bne.n	8009a3e <_printf_float+0x2ce>
 8009aba:	e6a5      	b.n	8009808 <_printf_float+0x98>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	9206      	str	r2, [sp, #24]
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f ae9e 	beq.w	8009808 <_printf_float+0x98>
 8009acc:	9b07      	ldr	r3, [sp, #28]
 8009ace:	9a06      	ldr	r2, [sp, #24]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	9307      	str	r3, [sp, #28]
 8009ad4:	e7b9      	b.n	8009a4a <_printf_float+0x2da>
 8009ad6:	9b05      	ldr	r3, [sp, #20]
 8009ad8:	465a      	mov	r2, fp
 8009ada:	4631      	mov	r1, r6
 8009adc:	4628      	mov	r0, r5
 8009ade:	47b8      	blx	r7
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d1bf      	bne.n	8009a64 <_printf_float+0x2f4>
 8009ae4:	e690      	b.n	8009808 <_printf_float+0x98>
 8009ae6:	9a06      	ldr	r2, [sp, #24]
 8009ae8:	464b      	mov	r3, r9
 8009aea:	4442      	add	r2, r8
 8009aec:	4631      	mov	r1, r6
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	d1c2      	bne.n	8009a7c <_printf_float+0x30c>
 8009af6:	e687      	b.n	8009808 <_printf_float+0x98>
 8009af8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009afc:	f1b9 0f01 	cmp.w	r9, #1
 8009b00:	dc01      	bgt.n	8009b06 <_printf_float+0x396>
 8009b02:	07db      	lsls	r3, r3, #31
 8009b04:	d536      	bpl.n	8009b74 <_printf_float+0x404>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4642      	mov	r2, r8
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	47b8      	blx	r7
 8009b10:	3001      	adds	r0, #1
 8009b12:	f43f ae79 	beq.w	8009808 <_printf_float+0x98>
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	465a      	mov	r2, fp
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	47b8      	blx	r7
 8009b20:	3001      	adds	r0, #1
 8009b22:	f43f ae71 	beq.w	8009808 <_printf_float+0x98>
 8009b26:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009b2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b32:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8009b36:	d018      	beq.n	8009b6a <_printf_float+0x3fa>
 8009b38:	464b      	mov	r3, r9
 8009b3a:	f108 0201 	add.w	r2, r8, #1
 8009b3e:	4631      	mov	r1, r6
 8009b40:	4628      	mov	r0, r5
 8009b42:	47b8      	blx	r7
 8009b44:	3001      	adds	r0, #1
 8009b46:	d10c      	bne.n	8009b62 <_printf_float+0x3f2>
 8009b48:	e65e      	b.n	8009808 <_printf_float+0x98>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	465a      	mov	r2, fp
 8009b4e:	4631      	mov	r1, r6
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b8      	blx	r7
 8009b54:	3001      	adds	r0, #1
 8009b56:	f43f ae57 	beq.w	8009808 <_printf_float+0x98>
 8009b5a:	f108 0801 	add.w	r8, r8, #1
 8009b5e:	45c8      	cmp	r8, r9
 8009b60:	dbf3      	blt.n	8009b4a <_printf_float+0x3da>
 8009b62:	4653      	mov	r3, sl
 8009b64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b68:	e6dc      	b.n	8009924 <_printf_float+0x1b4>
 8009b6a:	f04f 0800 	mov.w	r8, #0
 8009b6e:	f104 0b1a 	add.w	fp, r4, #26
 8009b72:	e7f4      	b.n	8009b5e <_printf_float+0x3ee>
 8009b74:	2301      	movs	r3, #1
 8009b76:	4642      	mov	r2, r8
 8009b78:	e7e1      	b.n	8009b3e <_printf_float+0x3ce>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	464a      	mov	r2, r9
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4628      	mov	r0, r5
 8009b82:	47b8      	blx	r7
 8009b84:	3001      	adds	r0, #1
 8009b86:	f43f ae3f 	beq.w	8009808 <_printf_float+0x98>
 8009b8a:	f108 0801 	add.w	r8, r8, #1
 8009b8e:	68e3      	ldr	r3, [r4, #12]
 8009b90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b92:	1a5b      	subs	r3, r3, r1
 8009b94:	4543      	cmp	r3, r8
 8009b96:	dcf0      	bgt.n	8009b7a <_printf_float+0x40a>
 8009b98:	e6f8      	b.n	800998c <_printf_float+0x21c>
 8009b9a:	f04f 0800 	mov.w	r8, #0
 8009b9e:	f104 0919 	add.w	r9, r4, #25
 8009ba2:	e7f4      	b.n	8009b8e <_printf_float+0x41e>

08009ba4 <_printf_common>:
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	4616      	mov	r6, r2
 8009baa:	4698      	mov	r8, r3
 8009bac:	688a      	ldr	r2, [r1, #8]
 8009bae:	690b      	ldr	r3, [r1, #16]
 8009bb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	bfb8      	it	lt
 8009bb8:	4613      	movlt	r3, r2
 8009bba:	6033      	str	r3, [r6, #0]
 8009bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	b10a      	cbz	r2, 8009bca <_printf_common+0x26>
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	6033      	str	r3, [r6, #0]
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	0699      	lsls	r1, r3, #26
 8009bce:	bf42      	ittt	mi
 8009bd0:	6833      	ldrmi	r3, [r6, #0]
 8009bd2:	3302      	addmi	r3, #2
 8009bd4:	6033      	strmi	r3, [r6, #0]
 8009bd6:	6825      	ldr	r5, [r4, #0]
 8009bd8:	f015 0506 	ands.w	r5, r5, #6
 8009bdc:	d106      	bne.n	8009bec <_printf_common+0x48>
 8009bde:	f104 0a19 	add.w	sl, r4, #25
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	6832      	ldr	r2, [r6, #0]
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dc26      	bgt.n	8009c3a <_printf_common+0x96>
 8009bec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009bf0:	6822      	ldr	r2, [r4, #0]
 8009bf2:	3b00      	subs	r3, #0
 8009bf4:	bf18      	it	ne
 8009bf6:	2301      	movne	r3, #1
 8009bf8:	0692      	lsls	r2, r2, #26
 8009bfa:	d42b      	bmi.n	8009c54 <_printf_common+0xb0>
 8009bfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c00:	4641      	mov	r1, r8
 8009c02:	4638      	mov	r0, r7
 8009c04:	47c8      	blx	r9
 8009c06:	3001      	adds	r0, #1
 8009c08:	d01e      	beq.n	8009c48 <_printf_common+0xa4>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	6922      	ldr	r2, [r4, #16]
 8009c0e:	f003 0306 	and.w	r3, r3, #6
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	bf02      	ittt	eq
 8009c16:	68e5      	ldreq	r5, [r4, #12]
 8009c18:	6833      	ldreq	r3, [r6, #0]
 8009c1a:	1aed      	subeq	r5, r5, r3
 8009c1c:	68a3      	ldr	r3, [r4, #8]
 8009c1e:	bf0c      	ite	eq
 8009c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c24:	2500      	movne	r5, #0
 8009c26:	4293      	cmp	r3, r2
 8009c28:	bfc4      	itt	gt
 8009c2a:	1a9b      	subgt	r3, r3, r2
 8009c2c:	18ed      	addgt	r5, r5, r3
 8009c2e:	2600      	movs	r6, #0
 8009c30:	341a      	adds	r4, #26
 8009c32:	42b5      	cmp	r5, r6
 8009c34:	d11a      	bne.n	8009c6c <_printf_common+0xc8>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e008      	b.n	8009c4c <_printf_common+0xa8>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	4641      	mov	r1, r8
 8009c40:	4638      	mov	r0, r7
 8009c42:	47c8      	blx	r9
 8009c44:	3001      	adds	r0, #1
 8009c46:	d103      	bne.n	8009c50 <_printf_common+0xac>
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	3501      	adds	r5, #1
 8009c52:	e7c6      	b.n	8009be2 <_printf_common+0x3e>
 8009c54:	18e1      	adds	r1, r4, r3
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	2030      	movs	r0, #48	@ 0x30
 8009c5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c5e:	4422      	add	r2, r4
 8009c60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c68:	3302      	adds	r3, #2
 8009c6a:	e7c7      	b.n	8009bfc <_printf_common+0x58>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4622      	mov	r2, r4
 8009c70:	4641      	mov	r1, r8
 8009c72:	4638      	mov	r0, r7
 8009c74:	47c8      	blx	r9
 8009c76:	3001      	adds	r0, #1
 8009c78:	d0e6      	beq.n	8009c48 <_printf_common+0xa4>
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	e7d9      	b.n	8009c32 <_printf_common+0x8e>
	...

08009c80 <_printf_i>:
 8009c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c84:	7e0f      	ldrb	r7, [r1, #24]
 8009c86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c88:	2f78      	cmp	r7, #120	@ 0x78
 8009c8a:	4691      	mov	r9, r2
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	469a      	mov	sl, r3
 8009c92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c96:	d807      	bhi.n	8009ca8 <_printf_i+0x28>
 8009c98:	2f62      	cmp	r7, #98	@ 0x62
 8009c9a:	d80a      	bhi.n	8009cb2 <_printf_i+0x32>
 8009c9c:	2f00      	cmp	r7, #0
 8009c9e:	f000 80d1 	beq.w	8009e44 <_printf_i+0x1c4>
 8009ca2:	2f58      	cmp	r7, #88	@ 0x58
 8009ca4:	f000 80b8 	beq.w	8009e18 <_printf_i+0x198>
 8009ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009cb0:	e03a      	b.n	8009d28 <_printf_i+0xa8>
 8009cb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cb6:	2b15      	cmp	r3, #21
 8009cb8:	d8f6      	bhi.n	8009ca8 <_printf_i+0x28>
 8009cba:	a101      	add	r1, pc, #4	@ (adr r1, 8009cc0 <_printf_i+0x40>)
 8009cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009ca9 	.word	0x08009ca9
 8009ccc:	08009ca9 	.word	0x08009ca9
 8009cd0:	08009ca9 	.word	0x08009ca9
 8009cd4:	08009ca9 	.word	0x08009ca9
 8009cd8:	08009d2d 	.word	0x08009d2d
 8009cdc:	08009ca9 	.word	0x08009ca9
 8009ce0:	08009ca9 	.word	0x08009ca9
 8009ce4:	08009ca9 	.word	0x08009ca9
 8009ce8:	08009ca9 	.word	0x08009ca9
 8009cec:	08009e2b 	.word	0x08009e2b
 8009cf0:	08009d57 	.word	0x08009d57
 8009cf4:	08009de5 	.word	0x08009de5
 8009cf8:	08009ca9 	.word	0x08009ca9
 8009cfc:	08009ca9 	.word	0x08009ca9
 8009d00:	08009e4d 	.word	0x08009e4d
 8009d04:	08009ca9 	.word	0x08009ca9
 8009d08:	08009d57 	.word	0x08009d57
 8009d0c:	08009ca9 	.word	0x08009ca9
 8009d10:	08009ca9 	.word	0x08009ca9
 8009d14:	08009ded 	.word	0x08009ded
 8009d18:	6833      	ldr	r3, [r6, #0]
 8009d1a:	1d1a      	adds	r2, r3, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6032      	str	r2, [r6, #0]
 8009d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e09c      	b.n	8009e66 <_printf_i+0x1e6>
 8009d2c:	6833      	ldr	r3, [r6, #0]
 8009d2e:	6820      	ldr	r0, [r4, #0]
 8009d30:	1d19      	adds	r1, r3, #4
 8009d32:	6031      	str	r1, [r6, #0]
 8009d34:	0606      	lsls	r6, r0, #24
 8009d36:	d501      	bpl.n	8009d3c <_printf_i+0xbc>
 8009d38:	681d      	ldr	r5, [r3, #0]
 8009d3a:	e003      	b.n	8009d44 <_printf_i+0xc4>
 8009d3c:	0645      	lsls	r5, r0, #25
 8009d3e:	d5fb      	bpl.n	8009d38 <_printf_i+0xb8>
 8009d40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d44:	2d00      	cmp	r5, #0
 8009d46:	da03      	bge.n	8009d50 <_printf_i+0xd0>
 8009d48:	232d      	movs	r3, #45	@ 0x2d
 8009d4a:	426d      	negs	r5, r5
 8009d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d50:	4858      	ldr	r0, [pc, #352]	@ (8009eb4 <_printf_i+0x234>)
 8009d52:	230a      	movs	r3, #10
 8009d54:	e011      	b.n	8009d7a <_printf_i+0xfa>
 8009d56:	6821      	ldr	r1, [r4, #0]
 8009d58:	6833      	ldr	r3, [r6, #0]
 8009d5a:	0608      	lsls	r0, r1, #24
 8009d5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d60:	d402      	bmi.n	8009d68 <_printf_i+0xe8>
 8009d62:	0649      	lsls	r1, r1, #25
 8009d64:	bf48      	it	mi
 8009d66:	b2ad      	uxthmi	r5, r5
 8009d68:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d6a:	4852      	ldr	r0, [pc, #328]	@ (8009eb4 <_printf_i+0x234>)
 8009d6c:	6033      	str	r3, [r6, #0]
 8009d6e:	bf14      	ite	ne
 8009d70:	230a      	movne	r3, #10
 8009d72:	2308      	moveq	r3, #8
 8009d74:	2100      	movs	r1, #0
 8009d76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d7a:	6866      	ldr	r6, [r4, #4]
 8009d7c:	60a6      	str	r6, [r4, #8]
 8009d7e:	2e00      	cmp	r6, #0
 8009d80:	db05      	blt.n	8009d8e <_printf_i+0x10e>
 8009d82:	6821      	ldr	r1, [r4, #0]
 8009d84:	432e      	orrs	r6, r5
 8009d86:	f021 0104 	bic.w	r1, r1, #4
 8009d8a:	6021      	str	r1, [r4, #0]
 8009d8c:	d04b      	beq.n	8009e26 <_printf_i+0x1a6>
 8009d8e:	4616      	mov	r6, r2
 8009d90:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d94:	fb03 5711 	mls	r7, r3, r1, r5
 8009d98:	5dc7      	ldrb	r7, [r0, r7]
 8009d9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d9e:	462f      	mov	r7, r5
 8009da0:	42bb      	cmp	r3, r7
 8009da2:	460d      	mov	r5, r1
 8009da4:	d9f4      	bls.n	8009d90 <_printf_i+0x110>
 8009da6:	2b08      	cmp	r3, #8
 8009da8:	d10b      	bne.n	8009dc2 <_printf_i+0x142>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	07df      	lsls	r7, r3, #31
 8009dae:	d508      	bpl.n	8009dc2 <_printf_i+0x142>
 8009db0:	6923      	ldr	r3, [r4, #16]
 8009db2:	6861      	ldr	r1, [r4, #4]
 8009db4:	4299      	cmp	r1, r3
 8009db6:	bfde      	ittt	le
 8009db8:	2330      	movle	r3, #48	@ 0x30
 8009dba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dbe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009dc2:	1b92      	subs	r2, r2, r6
 8009dc4:	6122      	str	r2, [r4, #16]
 8009dc6:	f8cd a000 	str.w	sl, [sp]
 8009dca:	464b      	mov	r3, r9
 8009dcc:	aa03      	add	r2, sp, #12
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	f7ff fee7 	bl	8009ba4 <_printf_common>
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d14a      	bne.n	8009e70 <_printf_i+0x1f0>
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dde:	b004      	add	sp, #16
 8009de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	f043 0320 	orr.w	r3, r3, #32
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	4832      	ldr	r0, [pc, #200]	@ (8009eb8 <_printf_i+0x238>)
 8009dee:	2778      	movs	r7, #120	@ 0x78
 8009df0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	6831      	ldr	r1, [r6, #0]
 8009df8:	061f      	lsls	r7, r3, #24
 8009dfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dfe:	d402      	bmi.n	8009e06 <_printf_i+0x186>
 8009e00:	065f      	lsls	r7, r3, #25
 8009e02:	bf48      	it	mi
 8009e04:	b2ad      	uxthmi	r5, r5
 8009e06:	6031      	str	r1, [r6, #0]
 8009e08:	07d9      	lsls	r1, r3, #31
 8009e0a:	bf44      	itt	mi
 8009e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e10:	6023      	strmi	r3, [r4, #0]
 8009e12:	b11d      	cbz	r5, 8009e1c <_printf_i+0x19c>
 8009e14:	2310      	movs	r3, #16
 8009e16:	e7ad      	b.n	8009d74 <_printf_i+0xf4>
 8009e18:	4826      	ldr	r0, [pc, #152]	@ (8009eb4 <_printf_i+0x234>)
 8009e1a:	e7e9      	b.n	8009df0 <_printf_i+0x170>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	f023 0320 	bic.w	r3, r3, #32
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	e7f6      	b.n	8009e14 <_printf_i+0x194>
 8009e26:	4616      	mov	r6, r2
 8009e28:	e7bd      	b.n	8009da6 <_printf_i+0x126>
 8009e2a:	6833      	ldr	r3, [r6, #0]
 8009e2c:	6825      	ldr	r5, [r4, #0]
 8009e2e:	6961      	ldr	r1, [r4, #20]
 8009e30:	1d18      	adds	r0, r3, #4
 8009e32:	6030      	str	r0, [r6, #0]
 8009e34:	062e      	lsls	r6, r5, #24
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	d501      	bpl.n	8009e3e <_printf_i+0x1be>
 8009e3a:	6019      	str	r1, [r3, #0]
 8009e3c:	e002      	b.n	8009e44 <_printf_i+0x1c4>
 8009e3e:	0668      	lsls	r0, r5, #25
 8009e40:	d5fb      	bpl.n	8009e3a <_printf_i+0x1ba>
 8009e42:	8019      	strh	r1, [r3, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	4616      	mov	r6, r2
 8009e4a:	e7bc      	b.n	8009dc6 <_printf_i+0x146>
 8009e4c:	6833      	ldr	r3, [r6, #0]
 8009e4e:	1d1a      	adds	r2, r3, #4
 8009e50:	6032      	str	r2, [r6, #0]
 8009e52:	681e      	ldr	r6, [r3, #0]
 8009e54:	6862      	ldr	r2, [r4, #4]
 8009e56:	2100      	movs	r1, #0
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7f6 fa41 	bl	80002e0 <memchr>
 8009e5e:	b108      	cbz	r0, 8009e64 <_printf_i+0x1e4>
 8009e60:	1b80      	subs	r0, r0, r6
 8009e62:	6060      	str	r0, [r4, #4]
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	6123      	str	r3, [r4, #16]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e6e:	e7aa      	b.n	8009dc6 <_printf_i+0x146>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	4632      	mov	r2, r6
 8009e74:	4649      	mov	r1, r9
 8009e76:	4640      	mov	r0, r8
 8009e78:	47d0      	blx	sl
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d0ad      	beq.n	8009dda <_printf_i+0x15a>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	079b      	lsls	r3, r3, #30
 8009e82:	d413      	bmi.n	8009eac <_printf_i+0x22c>
 8009e84:	68e0      	ldr	r0, [r4, #12]
 8009e86:	9b03      	ldr	r3, [sp, #12]
 8009e88:	4298      	cmp	r0, r3
 8009e8a:	bfb8      	it	lt
 8009e8c:	4618      	movlt	r0, r3
 8009e8e:	e7a6      	b.n	8009dde <_printf_i+0x15e>
 8009e90:	2301      	movs	r3, #1
 8009e92:	4632      	mov	r2, r6
 8009e94:	4649      	mov	r1, r9
 8009e96:	4640      	mov	r0, r8
 8009e98:	47d0      	blx	sl
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d09d      	beq.n	8009dda <_printf_i+0x15a>
 8009e9e:	3501      	adds	r5, #1
 8009ea0:	68e3      	ldr	r3, [r4, #12]
 8009ea2:	9903      	ldr	r1, [sp, #12]
 8009ea4:	1a5b      	subs	r3, r3, r1
 8009ea6:	42ab      	cmp	r3, r5
 8009ea8:	dcf2      	bgt.n	8009e90 <_printf_i+0x210>
 8009eaa:	e7eb      	b.n	8009e84 <_printf_i+0x204>
 8009eac:	2500      	movs	r5, #0
 8009eae:	f104 0619 	add.w	r6, r4, #25
 8009eb2:	e7f5      	b.n	8009ea0 <_printf_i+0x220>
 8009eb4:	0800e6b2 	.word	0x0800e6b2
 8009eb8:	0800e6c3 	.word	0x0800e6c3

08009ebc <_scanf_float>:
 8009ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	4691      	mov	r9, r2
 8009ec4:	9303      	str	r3, [sp, #12]
 8009ec6:	688b      	ldr	r3, [r1, #8]
 8009ec8:	1e5a      	subs	r2, r3, #1
 8009eca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009ece:	bf81      	itttt	hi
 8009ed0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009ed4:	eb03 0b05 	addhi.w	fp, r3, r5
 8009ed8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009edc:	608b      	strhi	r3, [r1, #8]
 8009ede:	680b      	ldr	r3, [r1, #0]
 8009ee0:	460a      	mov	r2, r1
 8009ee2:	f04f 0500 	mov.w	r5, #0
 8009ee6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009eea:	f842 3b1c 	str.w	r3, [r2], #28
 8009eee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	bf98      	it	ls
 8009ef8:	f04f 0b00 	movls.w	fp, #0
 8009efc:	9201      	str	r2, [sp, #4]
 8009efe:	4616      	mov	r6, r2
 8009f00:	46aa      	mov	sl, r5
 8009f02:	462f      	mov	r7, r5
 8009f04:	9502      	str	r5, [sp, #8]
 8009f06:	68a2      	ldr	r2, [r4, #8]
 8009f08:	b15a      	cbz	r2, 8009f22 <_scanf_float+0x66>
 8009f0a:	f8d9 3000 	ldr.w	r3, [r9]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b4e      	cmp	r3, #78	@ 0x4e
 8009f12:	d863      	bhi.n	8009fdc <_scanf_float+0x120>
 8009f14:	2b40      	cmp	r3, #64	@ 0x40
 8009f16:	d83b      	bhi.n	8009f90 <_scanf_float+0xd4>
 8009f18:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009f1c:	b2c8      	uxtb	r0, r1
 8009f1e:	280e      	cmp	r0, #14
 8009f20:	d939      	bls.n	8009f96 <_scanf_float+0xda>
 8009f22:	b11f      	cbz	r7, 8009f2c <_scanf_float+0x70>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009f30:	f1ba 0f01 	cmp.w	sl, #1
 8009f34:	f200 8114 	bhi.w	800a160 <_scanf_float+0x2a4>
 8009f38:	9b01      	ldr	r3, [sp, #4]
 8009f3a:	429e      	cmp	r6, r3
 8009f3c:	f200 8105 	bhi.w	800a14a <_scanf_float+0x28e>
 8009f40:	2001      	movs	r0, #1
 8009f42:	b007      	add	sp, #28
 8009f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f48:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009f4c:	2a0d      	cmp	r2, #13
 8009f4e:	d8e8      	bhi.n	8009f22 <_scanf_float+0x66>
 8009f50:	a101      	add	r1, pc, #4	@ (adr r1, 8009f58 <_scanf_float+0x9c>)
 8009f52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	0800a0a1 	.word	0x0800a0a1
 8009f5c:	08009f23 	.word	0x08009f23
 8009f60:	08009f23 	.word	0x08009f23
 8009f64:	08009f23 	.word	0x08009f23
 8009f68:	0800a0fd 	.word	0x0800a0fd
 8009f6c:	0800a0d7 	.word	0x0800a0d7
 8009f70:	08009f23 	.word	0x08009f23
 8009f74:	08009f23 	.word	0x08009f23
 8009f78:	0800a0af 	.word	0x0800a0af
 8009f7c:	08009f23 	.word	0x08009f23
 8009f80:	08009f23 	.word	0x08009f23
 8009f84:	08009f23 	.word	0x08009f23
 8009f88:	08009f23 	.word	0x08009f23
 8009f8c:	0800a06b 	.word	0x0800a06b
 8009f90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f94:	e7da      	b.n	8009f4c <_scanf_float+0x90>
 8009f96:	290e      	cmp	r1, #14
 8009f98:	d8c3      	bhi.n	8009f22 <_scanf_float+0x66>
 8009f9a:	a001      	add	r0, pc, #4	@ (adr r0, 8009fa0 <_scanf_float+0xe4>)
 8009f9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009fa0:	0800a05b 	.word	0x0800a05b
 8009fa4:	08009f23 	.word	0x08009f23
 8009fa8:	0800a05b 	.word	0x0800a05b
 8009fac:	0800a0eb 	.word	0x0800a0eb
 8009fb0:	08009f23 	.word	0x08009f23
 8009fb4:	08009ffd 	.word	0x08009ffd
 8009fb8:	0800a041 	.word	0x0800a041
 8009fbc:	0800a041 	.word	0x0800a041
 8009fc0:	0800a041 	.word	0x0800a041
 8009fc4:	0800a041 	.word	0x0800a041
 8009fc8:	0800a041 	.word	0x0800a041
 8009fcc:	0800a041 	.word	0x0800a041
 8009fd0:	0800a041 	.word	0x0800a041
 8009fd4:	0800a041 	.word	0x0800a041
 8009fd8:	0800a041 	.word	0x0800a041
 8009fdc:	2b6e      	cmp	r3, #110	@ 0x6e
 8009fde:	d809      	bhi.n	8009ff4 <_scanf_float+0x138>
 8009fe0:	2b60      	cmp	r3, #96	@ 0x60
 8009fe2:	d8b1      	bhi.n	8009f48 <_scanf_float+0x8c>
 8009fe4:	2b54      	cmp	r3, #84	@ 0x54
 8009fe6:	d07b      	beq.n	800a0e0 <_scanf_float+0x224>
 8009fe8:	2b59      	cmp	r3, #89	@ 0x59
 8009fea:	d19a      	bne.n	8009f22 <_scanf_float+0x66>
 8009fec:	2d07      	cmp	r5, #7
 8009fee:	d198      	bne.n	8009f22 <_scanf_float+0x66>
 8009ff0:	2508      	movs	r5, #8
 8009ff2:	e02f      	b.n	800a054 <_scanf_float+0x198>
 8009ff4:	2b74      	cmp	r3, #116	@ 0x74
 8009ff6:	d073      	beq.n	800a0e0 <_scanf_float+0x224>
 8009ff8:	2b79      	cmp	r3, #121	@ 0x79
 8009ffa:	e7f6      	b.n	8009fea <_scanf_float+0x12e>
 8009ffc:	6821      	ldr	r1, [r4, #0]
 8009ffe:	05c8      	lsls	r0, r1, #23
 800a000:	d51e      	bpl.n	800a040 <_scanf_float+0x184>
 800a002:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a006:	6021      	str	r1, [r4, #0]
 800a008:	3701      	adds	r7, #1
 800a00a:	f1bb 0f00 	cmp.w	fp, #0
 800a00e:	d003      	beq.n	800a018 <_scanf_float+0x15c>
 800a010:	3201      	adds	r2, #1
 800a012:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a016:	60a2      	str	r2, [r4, #8]
 800a018:	68a3      	ldr	r3, [r4, #8]
 800a01a:	3b01      	subs	r3, #1
 800a01c:	60a3      	str	r3, [r4, #8]
 800a01e:	6923      	ldr	r3, [r4, #16]
 800a020:	3301      	adds	r3, #1
 800a022:	6123      	str	r3, [r4, #16]
 800a024:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a028:	3b01      	subs	r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f8c9 3004 	str.w	r3, [r9, #4]
 800a030:	f340 8082 	ble.w	800a138 <_scanf_float+0x27c>
 800a034:	f8d9 3000 	ldr.w	r3, [r9]
 800a038:	3301      	adds	r3, #1
 800a03a:	f8c9 3000 	str.w	r3, [r9]
 800a03e:	e762      	b.n	8009f06 <_scanf_float+0x4a>
 800a040:	eb1a 0105 	adds.w	r1, sl, r5
 800a044:	f47f af6d 	bne.w	8009f22 <_scanf_float+0x66>
 800a048:	6822      	ldr	r2, [r4, #0]
 800a04a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a04e:	6022      	str	r2, [r4, #0]
 800a050:	460d      	mov	r5, r1
 800a052:	468a      	mov	sl, r1
 800a054:	f806 3b01 	strb.w	r3, [r6], #1
 800a058:	e7de      	b.n	800a018 <_scanf_float+0x15c>
 800a05a:	6822      	ldr	r2, [r4, #0]
 800a05c:	0610      	lsls	r0, r2, #24
 800a05e:	f57f af60 	bpl.w	8009f22 <_scanf_float+0x66>
 800a062:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a066:	6022      	str	r2, [r4, #0]
 800a068:	e7f4      	b.n	800a054 <_scanf_float+0x198>
 800a06a:	f1ba 0f00 	cmp.w	sl, #0
 800a06e:	d10c      	bne.n	800a08a <_scanf_float+0x1ce>
 800a070:	b977      	cbnz	r7, 800a090 <_scanf_float+0x1d4>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a078:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a07c:	d108      	bne.n	800a090 <_scanf_float+0x1d4>
 800a07e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a082:	6022      	str	r2, [r4, #0]
 800a084:	f04f 0a01 	mov.w	sl, #1
 800a088:	e7e4      	b.n	800a054 <_scanf_float+0x198>
 800a08a:	f1ba 0f02 	cmp.w	sl, #2
 800a08e:	d050      	beq.n	800a132 <_scanf_float+0x276>
 800a090:	2d01      	cmp	r5, #1
 800a092:	d002      	beq.n	800a09a <_scanf_float+0x1de>
 800a094:	2d04      	cmp	r5, #4
 800a096:	f47f af44 	bne.w	8009f22 <_scanf_float+0x66>
 800a09a:	3501      	adds	r5, #1
 800a09c:	b2ed      	uxtb	r5, r5
 800a09e:	e7d9      	b.n	800a054 <_scanf_float+0x198>
 800a0a0:	f1ba 0f01 	cmp.w	sl, #1
 800a0a4:	f47f af3d 	bne.w	8009f22 <_scanf_float+0x66>
 800a0a8:	f04f 0a02 	mov.w	sl, #2
 800a0ac:	e7d2      	b.n	800a054 <_scanf_float+0x198>
 800a0ae:	b975      	cbnz	r5, 800a0ce <_scanf_float+0x212>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	f47f af37 	bne.w	8009f24 <_scanf_float+0x68>
 800a0b6:	6822      	ldr	r2, [r4, #0]
 800a0b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a0bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a0c0:	f040 80fc 	bne.w	800a2bc <_scanf_float+0x400>
 800a0c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0c8:	6022      	str	r2, [r4, #0]
 800a0ca:	2501      	movs	r5, #1
 800a0cc:	e7c2      	b.n	800a054 <_scanf_float+0x198>
 800a0ce:	2d03      	cmp	r5, #3
 800a0d0:	d0e3      	beq.n	800a09a <_scanf_float+0x1de>
 800a0d2:	2d05      	cmp	r5, #5
 800a0d4:	e7df      	b.n	800a096 <_scanf_float+0x1da>
 800a0d6:	2d02      	cmp	r5, #2
 800a0d8:	f47f af23 	bne.w	8009f22 <_scanf_float+0x66>
 800a0dc:	2503      	movs	r5, #3
 800a0de:	e7b9      	b.n	800a054 <_scanf_float+0x198>
 800a0e0:	2d06      	cmp	r5, #6
 800a0e2:	f47f af1e 	bne.w	8009f22 <_scanf_float+0x66>
 800a0e6:	2507      	movs	r5, #7
 800a0e8:	e7b4      	b.n	800a054 <_scanf_float+0x198>
 800a0ea:	6822      	ldr	r2, [r4, #0]
 800a0ec:	0591      	lsls	r1, r2, #22
 800a0ee:	f57f af18 	bpl.w	8009f22 <_scanf_float+0x66>
 800a0f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a0f6:	6022      	str	r2, [r4, #0]
 800a0f8:	9702      	str	r7, [sp, #8]
 800a0fa:	e7ab      	b.n	800a054 <_scanf_float+0x198>
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a102:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a106:	d005      	beq.n	800a114 <_scanf_float+0x258>
 800a108:	0550      	lsls	r0, r2, #21
 800a10a:	f57f af0a 	bpl.w	8009f22 <_scanf_float+0x66>
 800a10e:	2f00      	cmp	r7, #0
 800a110:	f000 80d4 	beq.w	800a2bc <_scanf_float+0x400>
 800a114:	0591      	lsls	r1, r2, #22
 800a116:	bf58      	it	pl
 800a118:	9902      	ldrpl	r1, [sp, #8]
 800a11a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a11e:	bf58      	it	pl
 800a120:	1a79      	subpl	r1, r7, r1
 800a122:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a126:	bf58      	it	pl
 800a128:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a12c:	6022      	str	r2, [r4, #0]
 800a12e:	2700      	movs	r7, #0
 800a130:	e790      	b.n	800a054 <_scanf_float+0x198>
 800a132:	f04f 0a03 	mov.w	sl, #3
 800a136:	e78d      	b.n	800a054 <_scanf_float+0x198>
 800a138:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a13c:	4649      	mov	r1, r9
 800a13e:	4640      	mov	r0, r8
 800a140:	4798      	blx	r3
 800a142:	2800      	cmp	r0, #0
 800a144:	f43f aedf 	beq.w	8009f06 <_scanf_float+0x4a>
 800a148:	e6eb      	b.n	8009f22 <_scanf_float+0x66>
 800a14a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a14e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a152:	464a      	mov	r2, r9
 800a154:	4640      	mov	r0, r8
 800a156:	4798      	blx	r3
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	e6eb      	b.n	8009f38 <_scanf_float+0x7c>
 800a160:	1e6b      	subs	r3, r5, #1
 800a162:	2b06      	cmp	r3, #6
 800a164:	d824      	bhi.n	800a1b0 <_scanf_float+0x2f4>
 800a166:	2d02      	cmp	r5, #2
 800a168:	d836      	bhi.n	800a1d8 <_scanf_float+0x31c>
 800a16a:	9b01      	ldr	r3, [sp, #4]
 800a16c:	429e      	cmp	r6, r3
 800a16e:	f67f aee7 	bls.w	8009f40 <_scanf_float+0x84>
 800a172:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a176:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a17a:	464a      	mov	r2, r9
 800a17c:	4640      	mov	r0, r8
 800a17e:	4798      	blx	r3
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	3b01      	subs	r3, #1
 800a184:	6123      	str	r3, [r4, #16]
 800a186:	e7f0      	b.n	800a16a <_scanf_float+0x2ae>
 800a188:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a18c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a190:	464a      	mov	r2, r9
 800a192:	4640      	mov	r0, r8
 800a194:	4798      	blx	r3
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	3b01      	subs	r3, #1
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a1a0:	fa5f fa8a 	uxtb.w	sl, sl
 800a1a4:	f1ba 0f02 	cmp.w	sl, #2
 800a1a8:	d1ee      	bne.n	800a188 <_scanf_float+0x2cc>
 800a1aa:	3d03      	subs	r5, #3
 800a1ac:	b2ed      	uxtb	r5, r5
 800a1ae:	1b76      	subs	r6, r6, r5
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	05da      	lsls	r2, r3, #23
 800a1b4:	d530      	bpl.n	800a218 <_scanf_float+0x35c>
 800a1b6:	055b      	lsls	r3, r3, #21
 800a1b8:	d511      	bpl.n	800a1de <_scanf_float+0x322>
 800a1ba:	9b01      	ldr	r3, [sp, #4]
 800a1bc:	429e      	cmp	r6, r3
 800a1be:	f67f aebf 	bls.w	8009f40 <_scanf_float+0x84>
 800a1c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1ca:	464a      	mov	r2, r9
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	4798      	blx	r3
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	e7f0      	b.n	800a1ba <_scanf_float+0x2fe>
 800a1d8:	46aa      	mov	sl, r5
 800a1da:	46b3      	mov	fp, r6
 800a1dc:	e7de      	b.n	800a19c <_scanf_float+0x2e0>
 800a1de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a1e2:	6923      	ldr	r3, [r4, #16]
 800a1e4:	2965      	cmp	r1, #101	@ 0x65
 800a1e6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a1ea:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	d00c      	beq.n	800a20c <_scanf_float+0x350>
 800a1f2:	2945      	cmp	r1, #69	@ 0x45
 800a1f4:	d00a      	beq.n	800a20c <_scanf_float+0x350>
 800a1f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1fa:	464a      	mov	r2, r9
 800a1fc:	4640      	mov	r0, r8
 800a1fe:	4798      	blx	r3
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a206:	3b01      	subs	r3, #1
 800a208:	1eb5      	subs	r5, r6, #2
 800a20a:	6123      	str	r3, [r4, #16]
 800a20c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a210:	464a      	mov	r2, r9
 800a212:	4640      	mov	r0, r8
 800a214:	4798      	blx	r3
 800a216:	462e      	mov	r6, r5
 800a218:	6822      	ldr	r2, [r4, #0]
 800a21a:	f012 0210 	ands.w	r2, r2, #16
 800a21e:	d001      	beq.n	800a224 <_scanf_float+0x368>
 800a220:	2000      	movs	r0, #0
 800a222:	e68e      	b.n	8009f42 <_scanf_float+0x86>
 800a224:	7032      	strb	r2, [r6, #0]
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a22c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a230:	d123      	bne.n	800a27a <_scanf_float+0x3be>
 800a232:	9b02      	ldr	r3, [sp, #8]
 800a234:	429f      	cmp	r7, r3
 800a236:	d00a      	beq.n	800a24e <_scanf_float+0x392>
 800a238:	1bda      	subs	r2, r3, r7
 800a23a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a23e:	429e      	cmp	r6, r3
 800a240:	bf28      	it	cs
 800a242:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a246:	491e      	ldr	r1, [pc, #120]	@ (800a2c0 <_scanf_float+0x404>)
 800a248:	4630      	mov	r0, r6
 800a24a:	f000 f83d 	bl	800a2c8 <siprintf>
 800a24e:	9901      	ldr	r1, [sp, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	4640      	mov	r0, r8
 800a254:	f000 feb2 	bl	800afbc <_strtod_r>
 800a258:	9b03      	ldr	r3, [sp, #12]
 800a25a:	6821      	ldr	r1, [r4, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f011 0f02 	tst.w	r1, #2
 800a262:	f103 0204 	add.w	r2, r3, #4
 800a266:	d015      	beq.n	800a294 <_scanf_float+0x3d8>
 800a268:	9903      	ldr	r1, [sp, #12]
 800a26a:	600a      	str	r2, [r1, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	ed83 0b00 	vstr	d0, [r3]
 800a272:	68e3      	ldr	r3, [r4, #12]
 800a274:	3301      	adds	r3, #1
 800a276:	60e3      	str	r3, [r4, #12]
 800a278:	e7d2      	b.n	800a220 <_scanf_float+0x364>
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d0e6      	beq.n	800a24e <_scanf_float+0x392>
 800a280:	9905      	ldr	r1, [sp, #20]
 800a282:	230a      	movs	r3, #10
 800a284:	3101      	adds	r1, #1
 800a286:	4640      	mov	r0, r8
 800a288:	f000 ff18 	bl	800b0bc <_strtol_r>
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	9e05      	ldr	r6, [sp, #20]
 800a290:	1ac2      	subs	r2, r0, r3
 800a292:	e7d2      	b.n	800a23a <_scanf_float+0x37e>
 800a294:	f011 0f04 	tst.w	r1, #4
 800a298:	9903      	ldr	r1, [sp, #12]
 800a29a:	600a      	str	r2, [r1, #0]
 800a29c:	d1e6      	bne.n	800a26c <_scanf_float+0x3b0>
 800a29e:	eeb4 0b40 	vcmp.f64	d0, d0
 800a2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a6:	681d      	ldr	r5, [r3, #0]
 800a2a8:	d705      	bvc.n	800a2b6 <_scanf_float+0x3fa>
 800a2aa:	4806      	ldr	r0, [pc, #24]	@ (800a2c4 <_scanf_float+0x408>)
 800a2ac:	f000 ff88 	bl	800b1c0 <nanf>
 800a2b0:	ed85 0a00 	vstr	s0, [r5]
 800a2b4:	e7dd      	b.n	800a272 <_scanf_float+0x3b6>
 800a2b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a2ba:	e7f9      	b.n	800a2b0 <_scanf_float+0x3f4>
 800a2bc:	2700      	movs	r7, #0
 800a2be:	e635      	b.n	8009f2c <_scanf_float+0x70>
 800a2c0:	0800e6d4 	.word	0x0800e6d4
 800a2c4:	0800e875 	.word	0x0800e875

0800a2c8 <siprintf>:
 800a2c8:	b40e      	push	{r1, r2, r3}
 800a2ca:	b510      	push	{r4, lr}
 800a2cc:	b09d      	sub	sp, #116	@ 0x74
 800a2ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a2d0:	9002      	str	r0, [sp, #8]
 800a2d2:	9006      	str	r0, [sp, #24]
 800a2d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a2d8:	480a      	ldr	r0, [pc, #40]	@ (800a304 <siprintf+0x3c>)
 800a2da:	9107      	str	r1, [sp, #28]
 800a2dc:	9104      	str	r1, [sp, #16]
 800a2de:	490a      	ldr	r1, [pc, #40]	@ (800a308 <siprintf+0x40>)
 800a2e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e4:	9105      	str	r1, [sp, #20]
 800a2e6:	2400      	movs	r4, #0
 800a2e8:	a902      	add	r1, sp, #8
 800a2ea:	6800      	ldr	r0, [r0, #0]
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a2f0:	f002 f8e8 	bl	800c4c4 <_svfiprintf_r>
 800a2f4:	9b02      	ldr	r3, [sp, #8]
 800a2f6:	701c      	strb	r4, [r3, #0]
 800a2f8:	b01d      	add	sp, #116	@ 0x74
 800a2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2fe:	b003      	add	sp, #12
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	2400018c 	.word	0x2400018c
 800a308:	ffff0208 	.word	0xffff0208

0800a30c <std>:
 800a30c:	2300      	movs	r3, #0
 800a30e:	b510      	push	{r4, lr}
 800a310:	4604      	mov	r4, r0
 800a312:	e9c0 3300 	strd	r3, r3, [r0]
 800a316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a31a:	6083      	str	r3, [r0, #8]
 800a31c:	8181      	strh	r1, [r0, #12]
 800a31e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a320:	81c2      	strh	r2, [r0, #14]
 800a322:	6183      	str	r3, [r0, #24]
 800a324:	4619      	mov	r1, r3
 800a326:	2208      	movs	r2, #8
 800a328:	305c      	adds	r0, #92	@ 0x5c
 800a32a:	f000 fee7 	bl	800b0fc <memset>
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <std+0x58>)
 800a330:	6263      	str	r3, [r4, #36]	@ 0x24
 800a332:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <std+0x5c>)
 800a334:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a336:	4b0d      	ldr	r3, [pc, #52]	@ (800a36c <std+0x60>)
 800a338:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a33a:	4b0d      	ldr	r3, [pc, #52]	@ (800a370 <std+0x64>)
 800a33c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a33e:	4b0d      	ldr	r3, [pc, #52]	@ (800a374 <std+0x68>)
 800a340:	6224      	str	r4, [r4, #32]
 800a342:	429c      	cmp	r4, r3
 800a344:	d006      	beq.n	800a354 <std+0x48>
 800a346:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a34a:	4294      	cmp	r4, r2
 800a34c:	d002      	beq.n	800a354 <std+0x48>
 800a34e:	33d0      	adds	r3, #208	@ 0xd0
 800a350:	429c      	cmp	r4, r3
 800a352:	d105      	bne.n	800a360 <std+0x54>
 800a354:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35c:	f000 bf12 	b.w	800b184 <__retarget_lock_init_recursive>
 800a360:	bd10      	pop	{r4, pc}
 800a362:	bf00      	nop
 800a364:	0800d2f3 	.word	0x0800d2f3
 800a368:	0800d315 	.word	0x0800d315
 800a36c:	0800d34d 	.word	0x0800d34d
 800a370:	0800d371 	.word	0x0800d371
 800a374:	2400056c 	.word	0x2400056c

0800a378 <stdio_exit_handler>:
 800a378:	4a02      	ldr	r2, [pc, #8]	@ (800a384 <stdio_exit_handler+0xc>)
 800a37a:	4903      	ldr	r1, [pc, #12]	@ (800a388 <stdio_exit_handler+0x10>)
 800a37c:	4803      	ldr	r0, [pc, #12]	@ (800a38c <stdio_exit_handler+0x14>)
 800a37e:	f000 be9f 	b.w	800b0c0 <_fwalk_sglue>
 800a382:	bf00      	nop
 800a384:	24000014 	.word	0x24000014
 800a388:	0800c93d 	.word	0x0800c93d
 800a38c:	24000190 	.word	0x24000190

0800a390 <cleanup_stdio>:
 800a390:	6841      	ldr	r1, [r0, #4]
 800a392:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c4 <cleanup_stdio+0x34>)
 800a394:	4299      	cmp	r1, r3
 800a396:	b510      	push	{r4, lr}
 800a398:	4604      	mov	r4, r0
 800a39a:	d001      	beq.n	800a3a0 <cleanup_stdio+0x10>
 800a39c:	f002 face 	bl	800c93c <_fflush_r>
 800a3a0:	68a1      	ldr	r1, [r4, #8]
 800a3a2:	4b09      	ldr	r3, [pc, #36]	@ (800a3c8 <cleanup_stdio+0x38>)
 800a3a4:	4299      	cmp	r1, r3
 800a3a6:	d002      	beq.n	800a3ae <cleanup_stdio+0x1e>
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f002 fac7 	bl	800c93c <_fflush_r>
 800a3ae:	68e1      	ldr	r1, [r4, #12]
 800a3b0:	4b06      	ldr	r3, [pc, #24]	@ (800a3cc <cleanup_stdio+0x3c>)
 800a3b2:	4299      	cmp	r1, r3
 800a3b4:	d004      	beq.n	800a3c0 <cleanup_stdio+0x30>
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3bc:	f002 babe 	b.w	800c93c <_fflush_r>
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	bf00      	nop
 800a3c4:	2400056c 	.word	0x2400056c
 800a3c8:	240005d4 	.word	0x240005d4
 800a3cc:	2400063c 	.word	0x2400063c

0800a3d0 <global_stdio_init.part.0>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a400 <global_stdio_init.part.0+0x30>)
 800a3d4:	4c0b      	ldr	r4, [pc, #44]	@ (800a404 <global_stdio_init.part.0+0x34>)
 800a3d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a408 <global_stdio_init.part.0+0x38>)
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	4620      	mov	r0, r4
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2104      	movs	r1, #4
 800a3e0:	f7ff ff94 	bl	800a30c <std>
 800a3e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	2109      	movs	r1, #9
 800a3ec:	f7ff ff8e 	bl	800a30c <std>
 800a3f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3fa:	2112      	movs	r1, #18
 800a3fc:	f7ff bf86 	b.w	800a30c <std>
 800a400:	240006a4 	.word	0x240006a4
 800a404:	2400056c 	.word	0x2400056c
 800a408:	0800a379 	.word	0x0800a379

0800a40c <__sfp_lock_acquire>:
 800a40c:	4801      	ldr	r0, [pc, #4]	@ (800a414 <__sfp_lock_acquire+0x8>)
 800a40e:	f000 beba 	b.w	800b186 <__retarget_lock_acquire_recursive>
 800a412:	bf00      	nop
 800a414:	240006a9 	.word	0x240006a9

0800a418 <__sfp_lock_release>:
 800a418:	4801      	ldr	r0, [pc, #4]	@ (800a420 <__sfp_lock_release+0x8>)
 800a41a:	f000 beb5 	b.w	800b188 <__retarget_lock_release_recursive>
 800a41e:	bf00      	nop
 800a420:	240006a9 	.word	0x240006a9

0800a424 <__sinit>:
 800a424:	b510      	push	{r4, lr}
 800a426:	4604      	mov	r4, r0
 800a428:	f7ff fff0 	bl	800a40c <__sfp_lock_acquire>
 800a42c:	6a23      	ldr	r3, [r4, #32]
 800a42e:	b11b      	cbz	r3, 800a438 <__sinit+0x14>
 800a430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a434:	f7ff bff0 	b.w	800a418 <__sfp_lock_release>
 800a438:	4b04      	ldr	r3, [pc, #16]	@ (800a44c <__sinit+0x28>)
 800a43a:	6223      	str	r3, [r4, #32]
 800a43c:	4b04      	ldr	r3, [pc, #16]	@ (800a450 <__sinit+0x2c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1f5      	bne.n	800a430 <__sinit+0xc>
 800a444:	f7ff ffc4 	bl	800a3d0 <global_stdio_init.part.0>
 800a448:	e7f2      	b.n	800a430 <__sinit+0xc>
 800a44a:	bf00      	nop
 800a44c:	0800a391 	.word	0x0800a391
 800a450:	240006a4 	.word	0x240006a4

0800a454 <sulp>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	4616      	mov	r6, r2
 800a45c:	ec45 4b10 	vmov	d0, r4, r5
 800a460:	f002 fe0c 	bl	800d07c <__ulp>
 800a464:	b17e      	cbz	r6, 800a486 <sulp+0x32>
 800a466:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a46a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dd09      	ble.n	800a486 <sulp+0x32>
 800a472:	051b      	lsls	r3, r3, #20
 800a474:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a478:	2000      	movs	r0, #0
 800a47a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a47e:	ec41 0b17 	vmov	d7, r0, r1
 800a482:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a486:	bd70      	pop	{r4, r5, r6, pc}

0800a488 <_strtod_l>:
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	ed2d 8b0a 	vpush	{d8-d12}
 800a490:	b097      	sub	sp, #92	@ 0x5c
 800a492:	4688      	mov	r8, r1
 800a494:	920e      	str	r2, [sp, #56]	@ 0x38
 800a496:	2200      	movs	r2, #0
 800a498:	9212      	str	r2, [sp, #72]	@ 0x48
 800a49a:	9005      	str	r0, [sp, #20]
 800a49c:	f04f 0a00 	mov.w	sl, #0
 800a4a0:	f04f 0b00 	mov.w	fp, #0
 800a4a4:	460a      	mov	r2, r1
 800a4a6:	9211      	str	r2, [sp, #68]	@ 0x44
 800a4a8:	7811      	ldrb	r1, [r2, #0]
 800a4aa:	292b      	cmp	r1, #43	@ 0x2b
 800a4ac:	d04c      	beq.n	800a548 <_strtod_l+0xc0>
 800a4ae:	d839      	bhi.n	800a524 <_strtod_l+0x9c>
 800a4b0:	290d      	cmp	r1, #13
 800a4b2:	d833      	bhi.n	800a51c <_strtod_l+0x94>
 800a4b4:	2908      	cmp	r1, #8
 800a4b6:	d833      	bhi.n	800a520 <_strtod_l+0x98>
 800a4b8:	2900      	cmp	r1, #0
 800a4ba:	d03c      	beq.n	800a536 <_strtod_l+0xae>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	9208      	str	r2, [sp, #32]
 800a4c0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a4c2:	782a      	ldrb	r2, [r5, #0]
 800a4c4:	2a30      	cmp	r2, #48	@ 0x30
 800a4c6:	f040 80b7 	bne.w	800a638 <_strtod_l+0x1b0>
 800a4ca:	786a      	ldrb	r2, [r5, #1]
 800a4cc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4d0:	2a58      	cmp	r2, #88	@ 0x58
 800a4d2:	d170      	bne.n	800a5b6 <_strtod_l+0x12e>
 800a4d4:	9302      	str	r3, [sp, #8]
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	ab12      	add	r3, sp, #72	@ 0x48
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	4a90      	ldr	r2, [pc, #576]	@ (800a720 <_strtod_l+0x298>)
 800a4e0:	9805      	ldr	r0, [sp, #20]
 800a4e2:	ab13      	add	r3, sp, #76	@ 0x4c
 800a4e4:	a911      	add	r1, sp, #68	@ 0x44
 800a4e6:	f001 fcc1 	bl	800be6c <__gethex>
 800a4ea:	f010 060f 	ands.w	r6, r0, #15
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	d005      	beq.n	800a4fe <_strtod_l+0x76>
 800a4f2:	2e06      	cmp	r6, #6
 800a4f4:	d12a      	bne.n	800a54c <_strtod_l+0xc4>
 800a4f6:	3501      	adds	r5, #1
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	9511      	str	r5, [sp, #68]	@ 0x44
 800a4fc:	9308      	str	r3, [sp, #32]
 800a4fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a500:	2b00      	cmp	r3, #0
 800a502:	f040 8537 	bne.w	800af74 <_strtod_l+0xaec>
 800a506:	9b08      	ldr	r3, [sp, #32]
 800a508:	ec4b ab10 	vmov	d0, sl, fp
 800a50c:	b1cb      	cbz	r3, 800a542 <_strtod_l+0xba>
 800a50e:	eeb1 0b40 	vneg.f64	d0, d0
 800a512:	b017      	add	sp, #92	@ 0x5c
 800a514:	ecbd 8b0a 	vpop	{d8-d12}
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	2920      	cmp	r1, #32
 800a51e:	d1cd      	bne.n	800a4bc <_strtod_l+0x34>
 800a520:	3201      	adds	r2, #1
 800a522:	e7c0      	b.n	800a4a6 <_strtod_l+0x1e>
 800a524:	292d      	cmp	r1, #45	@ 0x2d
 800a526:	d1c9      	bne.n	800a4bc <_strtod_l+0x34>
 800a528:	2101      	movs	r1, #1
 800a52a:	9108      	str	r1, [sp, #32]
 800a52c:	1c51      	adds	r1, r2, #1
 800a52e:	9111      	str	r1, [sp, #68]	@ 0x44
 800a530:	7852      	ldrb	r2, [r2, #1]
 800a532:	2a00      	cmp	r2, #0
 800a534:	d1c4      	bne.n	800a4c0 <_strtod_l+0x38>
 800a536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a538:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f040 8517 	bne.w	800af70 <_strtod_l+0xae8>
 800a542:	ec4b ab10 	vmov	d0, sl, fp
 800a546:	e7e4      	b.n	800a512 <_strtod_l+0x8a>
 800a548:	2100      	movs	r1, #0
 800a54a:	e7ee      	b.n	800a52a <_strtod_l+0xa2>
 800a54c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a54e:	b13a      	cbz	r2, 800a560 <_strtod_l+0xd8>
 800a550:	2135      	movs	r1, #53	@ 0x35
 800a552:	a814      	add	r0, sp, #80	@ 0x50
 800a554:	f002 fe89 	bl	800d26a <__copybits>
 800a558:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a55a:	9805      	ldr	r0, [sp, #20]
 800a55c:	f002 fa62 	bl	800ca24 <_Bfree>
 800a560:	1e73      	subs	r3, r6, #1
 800a562:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a564:	2b04      	cmp	r3, #4
 800a566:	d806      	bhi.n	800a576 <_strtod_l+0xee>
 800a568:	e8df f003 	tbb	[pc, r3]
 800a56c:	201d0314 	.word	0x201d0314
 800a570:	14          	.byte	0x14
 800a571:	00          	.byte	0x00
 800a572:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a576:	05e3      	lsls	r3, r4, #23
 800a578:	bf48      	it	mi
 800a57a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a57e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a582:	0d1b      	lsrs	r3, r3, #20
 800a584:	051b      	lsls	r3, r3, #20
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1b9      	bne.n	800a4fe <_strtod_l+0x76>
 800a58a:	f000 fdd1 	bl	800b130 <__errno>
 800a58e:	2322      	movs	r3, #34	@ 0x22
 800a590:	6003      	str	r3, [r0, #0]
 800a592:	e7b4      	b.n	800a4fe <_strtod_l+0x76>
 800a594:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a598:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a59c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a5a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5a4:	e7e7      	b.n	800a576 <_strtod_l+0xee>
 800a5a6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a728 <_strtod_l+0x2a0>
 800a5aa:	e7e4      	b.n	800a576 <_strtod_l+0xee>
 800a5ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a5b0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a5b4:	e7df      	b.n	800a576 <_strtod_l+0xee>
 800a5b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	9211      	str	r2, [sp, #68]	@ 0x44
 800a5bc:	785b      	ldrb	r3, [r3, #1]
 800a5be:	2b30      	cmp	r3, #48	@ 0x30
 800a5c0:	d0f9      	beq.n	800a5b6 <_strtod_l+0x12e>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d09b      	beq.n	800a4fe <_strtod_l+0x76>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	9307      	str	r3, [sp, #28]
 800a5ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	9306      	str	r3, [sp, #24]
 800a5d2:	4699      	mov	r9, r3
 800a5d4:	461d      	mov	r5, r3
 800a5d6:	220a      	movs	r2, #10
 800a5d8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a5da:	7804      	ldrb	r4, [r0, #0]
 800a5dc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a5e0:	b2d9      	uxtb	r1, r3
 800a5e2:	2909      	cmp	r1, #9
 800a5e4:	d92a      	bls.n	800a63c <_strtod_l+0x1b4>
 800a5e6:	494f      	ldr	r1, [pc, #316]	@ (800a724 <_strtod_l+0x29c>)
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f000 fd8f 	bl	800b10c <strncmp>
 800a5ee:	b398      	cbz	r0, 800a658 <_strtod_l+0x1d0>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	462b      	mov	r3, r5
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	4601      	mov	r1, r0
 800a5fa:	2a65      	cmp	r2, #101	@ 0x65
 800a5fc:	d001      	beq.n	800a602 <_strtod_l+0x17a>
 800a5fe:	2a45      	cmp	r2, #69	@ 0x45
 800a600:	d118      	bne.n	800a634 <_strtod_l+0x1ac>
 800a602:	b91b      	cbnz	r3, 800a60c <_strtod_l+0x184>
 800a604:	9b07      	ldr	r3, [sp, #28]
 800a606:	4303      	orrs	r3, r0
 800a608:	d095      	beq.n	800a536 <_strtod_l+0xae>
 800a60a:	2300      	movs	r3, #0
 800a60c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a610:	f108 0201 	add.w	r2, r8, #1
 800a614:	9211      	str	r2, [sp, #68]	@ 0x44
 800a616:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a61a:	2a2b      	cmp	r2, #43	@ 0x2b
 800a61c:	d074      	beq.n	800a708 <_strtod_l+0x280>
 800a61e:	2a2d      	cmp	r2, #45	@ 0x2d
 800a620:	d07a      	beq.n	800a718 <_strtod_l+0x290>
 800a622:	f04f 0e00 	mov.w	lr, #0
 800a626:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a62a:	2c09      	cmp	r4, #9
 800a62c:	f240 8082 	bls.w	800a734 <_strtod_l+0x2ac>
 800a630:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a634:	2400      	movs	r4, #0
 800a636:	e09d      	b.n	800a774 <_strtod_l+0x2ec>
 800a638:	2300      	movs	r3, #0
 800a63a:	e7c5      	b.n	800a5c8 <_strtod_l+0x140>
 800a63c:	2d08      	cmp	r5, #8
 800a63e:	bfc8      	it	gt
 800a640:	9906      	ldrgt	r1, [sp, #24]
 800a642:	f100 0001 	add.w	r0, r0, #1
 800a646:	bfca      	itet	gt
 800a648:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a64c:	fb02 3909 	mlale	r9, r2, r9, r3
 800a650:	9306      	strgt	r3, [sp, #24]
 800a652:	3501      	adds	r5, #1
 800a654:	9011      	str	r0, [sp, #68]	@ 0x44
 800a656:	e7bf      	b.n	800a5d8 <_strtod_l+0x150>
 800a658:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	9211      	str	r2, [sp, #68]	@ 0x44
 800a65e:	785a      	ldrb	r2, [r3, #1]
 800a660:	b3bd      	cbz	r5, 800a6d2 <_strtod_l+0x24a>
 800a662:	4607      	mov	r7, r0
 800a664:	462b      	mov	r3, r5
 800a666:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a66a:	2909      	cmp	r1, #9
 800a66c:	d912      	bls.n	800a694 <_strtod_l+0x20c>
 800a66e:	2101      	movs	r1, #1
 800a670:	e7c3      	b.n	800a5fa <_strtod_l+0x172>
 800a672:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	9211      	str	r2, [sp, #68]	@ 0x44
 800a678:	785a      	ldrb	r2, [r3, #1]
 800a67a:	3001      	adds	r0, #1
 800a67c:	2a30      	cmp	r2, #48	@ 0x30
 800a67e:	d0f8      	beq.n	800a672 <_strtod_l+0x1ea>
 800a680:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a684:	2b08      	cmp	r3, #8
 800a686:	f200 847a 	bhi.w	800af7e <_strtod_l+0xaf6>
 800a68a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a68c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a68e:	4607      	mov	r7, r0
 800a690:	2000      	movs	r0, #0
 800a692:	4603      	mov	r3, r0
 800a694:	3a30      	subs	r2, #48	@ 0x30
 800a696:	f100 0101 	add.w	r1, r0, #1
 800a69a:	d014      	beq.n	800a6c6 <_strtod_l+0x23e>
 800a69c:	440f      	add	r7, r1
 800a69e:	469c      	mov	ip, r3
 800a6a0:	f04f 0e0a 	mov.w	lr, #10
 800a6a4:	f10c 0401 	add.w	r4, ip, #1
 800a6a8:	1ae6      	subs	r6, r4, r3
 800a6aa:	42b1      	cmp	r1, r6
 800a6ac:	dc13      	bgt.n	800a6d6 <_strtod_l+0x24e>
 800a6ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a6b2:	1819      	adds	r1, r3, r0
 800a6b4:	2908      	cmp	r1, #8
 800a6b6:	f103 0301 	add.w	r3, r3, #1
 800a6ba:	4403      	add	r3, r0
 800a6bc:	dc19      	bgt.n	800a6f2 <_strtod_l+0x26a>
 800a6be:	210a      	movs	r1, #10
 800a6c0:	fb01 2909 	mla	r9, r1, r9, r2
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a6c8:	1c50      	adds	r0, r2, #1
 800a6ca:	9011      	str	r0, [sp, #68]	@ 0x44
 800a6cc:	7852      	ldrb	r2, [r2, #1]
 800a6ce:	4608      	mov	r0, r1
 800a6d0:	e7c9      	b.n	800a666 <_strtod_l+0x1de>
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	e7d2      	b.n	800a67c <_strtod_l+0x1f4>
 800a6d6:	f1bc 0f08 	cmp.w	ip, #8
 800a6da:	dc03      	bgt.n	800a6e4 <_strtod_l+0x25c>
 800a6dc:	fb0e f909 	mul.w	r9, lr, r9
 800a6e0:	46a4      	mov	ip, r4
 800a6e2:	e7df      	b.n	800a6a4 <_strtod_l+0x21c>
 800a6e4:	2c10      	cmp	r4, #16
 800a6e6:	bfde      	ittt	le
 800a6e8:	9e06      	ldrle	r6, [sp, #24]
 800a6ea:	fb0e f606 	mulle.w	r6, lr, r6
 800a6ee:	9606      	strle	r6, [sp, #24]
 800a6f0:	e7f6      	b.n	800a6e0 <_strtod_l+0x258>
 800a6f2:	290f      	cmp	r1, #15
 800a6f4:	bfdf      	itttt	le
 800a6f6:	9806      	ldrle	r0, [sp, #24]
 800a6f8:	210a      	movle	r1, #10
 800a6fa:	fb01 2200 	mlale	r2, r1, r0, r2
 800a6fe:	9206      	strle	r2, [sp, #24]
 800a700:	e7e0      	b.n	800a6c4 <_strtod_l+0x23c>
 800a702:	2700      	movs	r7, #0
 800a704:	2101      	movs	r1, #1
 800a706:	e77d      	b.n	800a604 <_strtod_l+0x17c>
 800a708:	f04f 0e00 	mov.w	lr, #0
 800a70c:	f108 0202 	add.w	r2, r8, #2
 800a710:	9211      	str	r2, [sp, #68]	@ 0x44
 800a712:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a716:	e786      	b.n	800a626 <_strtod_l+0x19e>
 800a718:	f04f 0e01 	mov.w	lr, #1
 800a71c:	e7f6      	b.n	800a70c <_strtod_l+0x284>
 800a71e:	bf00      	nop
 800a720:	0800e88c 	.word	0x0800e88c
 800a724:	0800e6d9 	.word	0x0800e6d9
 800a728:	7ff00000 	.word	0x7ff00000
 800a72c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a72e:	1c54      	adds	r4, r2, #1
 800a730:	9411      	str	r4, [sp, #68]	@ 0x44
 800a732:	7852      	ldrb	r2, [r2, #1]
 800a734:	2a30      	cmp	r2, #48	@ 0x30
 800a736:	d0f9      	beq.n	800a72c <_strtod_l+0x2a4>
 800a738:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a73c:	2c08      	cmp	r4, #8
 800a73e:	f63f af79 	bhi.w	800a634 <_strtod_l+0x1ac>
 800a742:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a746:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a748:	9209      	str	r2, [sp, #36]	@ 0x24
 800a74a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a74c:	1c54      	adds	r4, r2, #1
 800a74e:	9411      	str	r4, [sp, #68]	@ 0x44
 800a750:	7852      	ldrb	r2, [r2, #1]
 800a752:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800a756:	2e09      	cmp	r6, #9
 800a758:	d937      	bls.n	800a7ca <_strtod_l+0x342>
 800a75a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a75c:	1ba4      	subs	r4, r4, r6
 800a75e:	2c08      	cmp	r4, #8
 800a760:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a764:	dc02      	bgt.n	800a76c <_strtod_l+0x2e4>
 800a766:	4564      	cmp	r4, ip
 800a768:	bfa8      	it	ge
 800a76a:	4664      	movge	r4, ip
 800a76c:	f1be 0f00 	cmp.w	lr, #0
 800a770:	d000      	beq.n	800a774 <_strtod_l+0x2ec>
 800a772:	4264      	negs	r4, r4
 800a774:	2b00      	cmp	r3, #0
 800a776:	d14d      	bne.n	800a814 <_strtod_l+0x38c>
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	4318      	orrs	r0, r3
 800a77c:	f47f aebf 	bne.w	800a4fe <_strtod_l+0x76>
 800a780:	2900      	cmp	r1, #0
 800a782:	f47f aed8 	bne.w	800a536 <_strtod_l+0xae>
 800a786:	2a69      	cmp	r2, #105	@ 0x69
 800a788:	d027      	beq.n	800a7da <_strtod_l+0x352>
 800a78a:	dc24      	bgt.n	800a7d6 <_strtod_l+0x34e>
 800a78c:	2a49      	cmp	r2, #73	@ 0x49
 800a78e:	d024      	beq.n	800a7da <_strtod_l+0x352>
 800a790:	2a4e      	cmp	r2, #78	@ 0x4e
 800a792:	f47f aed0 	bne.w	800a536 <_strtod_l+0xae>
 800a796:	4997      	ldr	r1, [pc, #604]	@ (800a9f4 <_strtod_l+0x56c>)
 800a798:	a811      	add	r0, sp, #68	@ 0x44
 800a79a:	f001 fd89 	bl	800c2b0 <__match>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f43f aec9 	beq.w	800a536 <_strtod_l+0xae>
 800a7a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b28      	cmp	r3, #40	@ 0x28
 800a7aa:	d12d      	bne.n	800a808 <_strtod_l+0x380>
 800a7ac:	4992      	ldr	r1, [pc, #584]	@ (800a9f8 <_strtod_l+0x570>)
 800a7ae:	aa14      	add	r2, sp, #80	@ 0x50
 800a7b0:	a811      	add	r0, sp, #68	@ 0x44
 800a7b2:	f001 fd91 	bl	800c2d8 <__hexnan>
 800a7b6:	2805      	cmp	r0, #5
 800a7b8:	d126      	bne.n	800a808 <_strtod_l+0x380>
 800a7ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a7bc:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a7c0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a7c4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a7c8:	e699      	b.n	800a4fe <_strtod_l+0x76>
 800a7ca:	240a      	movs	r4, #10
 800a7cc:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a7d0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a7d4:	e7b9      	b.n	800a74a <_strtod_l+0x2c2>
 800a7d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a7d8:	e7db      	b.n	800a792 <_strtod_l+0x30a>
 800a7da:	4988      	ldr	r1, [pc, #544]	@ (800a9fc <_strtod_l+0x574>)
 800a7dc:	a811      	add	r0, sp, #68	@ 0x44
 800a7de:	f001 fd67 	bl	800c2b0 <__match>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	f43f aea7 	beq.w	800a536 <_strtod_l+0xae>
 800a7e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7ea:	4985      	ldr	r1, [pc, #532]	@ (800aa00 <_strtod_l+0x578>)
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	a811      	add	r0, sp, #68	@ 0x44
 800a7f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7f2:	f001 fd5d 	bl	800c2b0 <__match>
 800a7f6:	b910      	cbnz	r0, 800a7fe <_strtod_l+0x376>
 800a7f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7fe:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800aa14 <_strtod_l+0x58c>
 800a802:	f04f 0a00 	mov.w	sl, #0
 800a806:	e67a      	b.n	800a4fe <_strtod_l+0x76>
 800a808:	487e      	ldr	r0, [pc, #504]	@ (800aa04 <_strtod_l+0x57c>)
 800a80a:	f000 fcd1 	bl	800b1b0 <nan>
 800a80e:	ec5b ab10 	vmov	sl, fp, d0
 800a812:	e674      	b.n	800a4fe <_strtod_l+0x76>
 800a814:	ee07 9a90 	vmov	s15, r9
 800a818:	1be2      	subs	r2, r4, r7
 800a81a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a81e:	2d00      	cmp	r5, #0
 800a820:	bf08      	it	eq
 800a822:	461d      	moveq	r5, r3
 800a824:	2b10      	cmp	r3, #16
 800a826:	9209      	str	r2, [sp, #36]	@ 0x24
 800a828:	461a      	mov	r2, r3
 800a82a:	bfa8      	it	ge
 800a82c:	2210      	movge	r2, #16
 800a82e:	2b09      	cmp	r3, #9
 800a830:	ec5b ab17 	vmov	sl, fp, d7
 800a834:	dc15      	bgt.n	800a862 <_strtod_l+0x3da>
 800a836:	1be1      	subs	r1, r4, r7
 800a838:	2900      	cmp	r1, #0
 800a83a:	f43f ae60 	beq.w	800a4fe <_strtod_l+0x76>
 800a83e:	eba4 0107 	sub.w	r1, r4, r7
 800a842:	dd72      	ble.n	800a92a <_strtod_l+0x4a2>
 800a844:	2916      	cmp	r1, #22
 800a846:	dc59      	bgt.n	800a8fc <_strtod_l+0x474>
 800a848:	4b6f      	ldr	r3, [pc, #444]	@ (800aa08 <_strtod_l+0x580>)
 800a84a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a84c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a850:	ed93 7b00 	vldr	d7, [r3]
 800a854:	ec4b ab16 	vmov	d6, sl, fp
 800a858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a85c:	ec5b ab17 	vmov	sl, fp, d7
 800a860:	e64d      	b.n	800a4fe <_strtod_l+0x76>
 800a862:	4969      	ldr	r1, [pc, #420]	@ (800aa08 <_strtod_l+0x580>)
 800a864:	eddd 6a06 	vldr	s13, [sp, #24]
 800a868:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a86c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a870:	2b0f      	cmp	r3, #15
 800a872:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a876:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a87a:	ec5b ab16 	vmov	sl, fp, d6
 800a87e:	ddda      	ble.n	800a836 <_strtod_l+0x3ae>
 800a880:	1a9a      	subs	r2, r3, r2
 800a882:	1be1      	subs	r1, r4, r7
 800a884:	440a      	add	r2, r1
 800a886:	2a00      	cmp	r2, #0
 800a888:	f340 8094 	ble.w	800a9b4 <_strtod_l+0x52c>
 800a88c:	f012 000f 	ands.w	r0, r2, #15
 800a890:	d00a      	beq.n	800a8a8 <_strtod_l+0x420>
 800a892:	495d      	ldr	r1, [pc, #372]	@ (800aa08 <_strtod_l+0x580>)
 800a894:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a898:	ed91 7b00 	vldr	d7, [r1]
 800a89c:	ec4b ab16 	vmov	d6, sl, fp
 800a8a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8a4:	ec5b ab17 	vmov	sl, fp, d7
 800a8a8:	f032 020f 	bics.w	r2, r2, #15
 800a8ac:	d073      	beq.n	800a996 <_strtod_l+0x50e>
 800a8ae:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a8b2:	dd47      	ble.n	800a944 <_strtod_l+0x4bc>
 800a8b4:	2400      	movs	r4, #0
 800a8b6:	4625      	mov	r5, r4
 800a8b8:	9407      	str	r4, [sp, #28]
 800a8ba:	4626      	mov	r6, r4
 800a8bc:	9a05      	ldr	r2, [sp, #20]
 800a8be:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aa14 <_strtod_l+0x58c>
 800a8c2:	2322      	movs	r3, #34	@ 0x22
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	f04f 0a00 	mov.w	sl, #0
 800a8ca:	9b07      	ldr	r3, [sp, #28]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f43f ae16 	beq.w	800a4fe <_strtod_l+0x76>
 800a8d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a8d4:	9805      	ldr	r0, [sp, #20]
 800a8d6:	f002 f8a5 	bl	800ca24 <_Bfree>
 800a8da:	9805      	ldr	r0, [sp, #20]
 800a8dc:	4631      	mov	r1, r6
 800a8de:	f002 f8a1 	bl	800ca24 <_Bfree>
 800a8e2:	9805      	ldr	r0, [sp, #20]
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	f002 f89d 	bl	800ca24 <_Bfree>
 800a8ea:	9907      	ldr	r1, [sp, #28]
 800a8ec:	9805      	ldr	r0, [sp, #20]
 800a8ee:	f002 f899 	bl	800ca24 <_Bfree>
 800a8f2:	9805      	ldr	r0, [sp, #20]
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	f002 f895 	bl	800ca24 <_Bfree>
 800a8fa:	e600      	b.n	800a4fe <_strtod_l+0x76>
 800a8fc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a900:	1be0      	subs	r0, r4, r7
 800a902:	4281      	cmp	r1, r0
 800a904:	dbbc      	blt.n	800a880 <_strtod_l+0x3f8>
 800a906:	4a40      	ldr	r2, [pc, #256]	@ (800aa08 <_strtod_l+0x580>)
 800a908:	f1c3 030f 	rsb	r3, r3, #15
 800a90c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a910:	ed91 7b00 	vldr	d7, [r1]
 800a914:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a916:	ec4b ab16 	vmov	d6, sl, fp
 800a91a:	1acb      	subs	r3, r1, r3
 800a91c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a920:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a924:	ed92 6b00 	vldr	d6, [r2]
 800a928:	e796      	b.n	800a858 <_strtod_l+0x3d0>
 800a92a:	3116      	adds	r1, #22
 800a92c:	dba8      	blt.n	800a880 <_strtod_l+0x3f8>
 800a92e:	4b36      	ldr	r3, [pc, #216]	@ (800aa08 <_strtod_l+0x580>)
 800a930:	1b3c      	subs	r4, r7, r4
 800a932:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a936:	ed94 7b00 	vldr	d7, [r4]
 800a93a:	ec4b ab16 	vmov	d6, sl, fp
 800a93e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a942:	e78b      	b.n	800a85c <_strtod_l+0x3d4>
 800a944:	2000      	movs	r0, #0
 800a946:	ec4b ab17 	vmov	d7, sl, fp
 800a94a:	4e30      	ldr	r6, [pc, #192]	@ (800aa0c <_strtod_l+0x584>)
 800a94c:	1112      	asrs	r2, r2, #4
 800a94e:	4601      	mov	r1, r0
 800a950:	2a01      	cmp	r2, #1
 800a952:	dc23      	bgt.n	800a99c <_strtod_l+0x514>
 800a954:	b108      	cbz	r0, 800a95a <_strtod_l+0x4d2>
 800a956:	ec5b ab17 	vmov	sl, fp, d7
 800a95a:	4a2c      	ldr	r2, [pc, #176]	@ (800aa0c <_strtod_l+0x584>)
 800a95c:	482c      	ldr	r0, [pc, #176]	@ (800aa10 <_strtod_l+0x588>)
 800a95e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a962:	ed92 7b00 	vldr	d7, [r2]
 800a966:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a96a:	ec4b ab16 	vmov	d6, sl, fp
 800a96e:	4a29      	ldr	r2, [pc, #164]	@ (800aa14 <_strtod_l+0x58c>)
 800a970:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a974:	ee17 1a90 	vmov	r1, s15
 800a978:	400a      	ands	r2, r1
 800a97a:	4282      	cmp	r2, r0
 800a97c:	ec5b ab17 	vmov	sl, fp, d7
 800a980:	d898      	bhi.n	800a8b4 <_strtod_l+0x42c>
 800a982:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a986:	4282      	cmp	r2, r0
 800a988:	bf86      	itte	hi
 800a98a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800aa18 <_strtod_l+0x590>
 800a98e:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a992:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a996:	2200      	movs	r2, #0
 800a998:	9206      	str	r2, [sp, #24]
 800a99a:	e076      	b.n	800aa8a <_strtod_l+0x602>
 800a99c:	f012 0f01 	tst.w	r2, #1
 800a9a0:	d004      	beq.n	800a9ac <_strtod_l+0x524>
 800a9a2:	ed96 6b00 	vldr	d6, [r6]
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9ac:	3101      	adds	r1, #1
 800a9ae:	1052      	asrs	r2, r2, #1
 800a9b0:	3608      	adds	r6, #8
 800a9b2:	e7cd      	b.n	800a950 <_strtod_l+0x4c8>
 800a9b4:	d0ef      	beq.n	800a996 <_strtod_l+0x50e>
 800a9b6:	4252      	negs	r2, r2
 800a9b8:	f012 000f 	ands.w	r0, r2, #15
 800a9bc:	d00a      	beq.n	800a9d4 <_strtod_l+0x54c>
 800a9be:	4912      	ldr	r1, [pc, #72]	@ (800aa08 <_strtod_l+0x580>)
 800a9c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a9c4:	ed91 7b00 	vldr	d7, [r1]
 800a9c8:	ec4b ab16 	vmov	d6, sl, fp
 800a9cc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a9d0:	ec5b ab17 	vmov	sl, fp, d7
 800a9d4:	1112      	asrs	r2, r2, #4
 800a9d6:	d0de      	beq.n	800a996 <_strtod_l+0x50e>
 800a9d8:	2a1f      	cmp	r2, #31
 800a9da:	dd1f      	ble.n	800aa1c <_strtod_l+0x594>
 800a9dc:	2400      	movs	r4, #0
 800a9de:	4625      	mov	r5, r4
 800a9e0:	9407      	str	r4, [sp, #28]
 800a9e2:	4626      	mov	r6, r4
 800a9e4:	9a05      	ldr	r2, [sp, #20]
 800a9e6:	2322      	movs	r3, #34	@ 0x22
 800a9e8:	f04f 0a00 	mov.w	sl, #0
 800a9ec:	f04f 0b00 	mov.w	fp, #0
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	e76a      	b.n	800a8ca <_strtod_l+0x442>
 800a9f4:	0800e6ad 	.word	0x0800e6ad
 800a9f8:	0800e878 	.word	0x0800e878
 800a9fc:	0800e6a5 	.word	0x0800e6a5
 800aa00:	0800e6e6 	.word	0x0800e6e6
 800aa04:	0800e875 	.word	0x0800e875
 800aa08:	0800ea00 	.word	0x0800ea00
 800aa0c:	0800e9d8 	.word	0x0800e9d8
 800aa10:	7ca00000 	.word	0x7ca00000
 800aa14:	7ff00000 	.word	0x7ff00000
 800aa18:	7fefffff 	.word	0x7fefffff
 800aa1c:	f012 0110 	ands.w	r1, r2, #16
 800aa20:	bf18      	it	ne
 800aa22:	216a      	movne	r1, #106	@ 0x6a
 800aa24:	9106      	str	r1, [sp, #24]
 800aa26:	ec4b ab17 	vmov	d7, sl, fp
 800aa2a:	49af      	ldr	r1, [pc, #700]	@ (800ace8 <_strtod_l+0x860>)
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	07d6      	lsls	r6, r2, #31
 800aa30:	d504      	bpl.n	800aa3c <_strtod_l+0x5b4>
 800aa32:	ed91 6b00 	vldr	d6, [r1]
 800aa36:	2001      	movs	r0, #1
 800aa38:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa3c:	1052      	asrs	r2, r2, #1
 800aa3e:	f101 0108 	add.w	r1, r1, #8
 800aa42:	d1f4      	bne.n	800aa2e <_strtod_l+0x5a6>
 800aa44:	b108      	cbz	r0, 800aa4a <_strtod_l+0x5c2>
 800aa46:	ec5b ab17 	vmov	sl, fp, d7
 800aa4a:	9a06      	ldr	r2, [sp, #24]
 800aa4c:	b1b2      	cbz	r2, 800aa7c <_strtod_l+0x5f4>
 800aa4e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800aa52:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800aa56:	2a00      	cmp	r2, #0
 800aa58:	4658      	mov	r0, fp
 800aa5a:	dd0f      	ble.n	800aa7c <_strtod_l+0x5f4>
 800aa5c:	2a1f      	cmp	r2, #31
 800aa5e:	dd55      	ble.n	800ab0c <_strtod_l+0x684>
 800aa60:	2a34      	cmp	r2, #52	@ 0x34
 800aa62:	bfde      	ittt	le
 800aa64:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800aa68:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800aa6c:	408a      	lslle	r2, r1
 800aa6e:	f04f 0a00 	mov.w	sl, #0
 800aa72:	bfcc      	ite	gt
 800aa74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa78:	ea02 0b00 	andle.w	fp, r2, r0
 800aa7c:	ec4b ab17 	vmov	d7, sl, fp
 800aa80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa88:	d0a8      	beq.n	800a9dc <_strtod_l+0x554>
 800aa8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa8c:	9805      	ldr	r0, [sp, #20]
 800aa8e:	f8cd 9000 	str.w	r9, [sp]
 800aa92:	462a      	mov	r2, r5
 800aa94:	f002 f82e 	bl	800caf4 <__s2b>
 800aa98:	9007      	str	r0, [sp, #28]
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	f43f af0a 	beq.w	800a8b4 <_strtod_l+0x42c>
 800aaa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa2:	1b3f      	subs	r7, r7, r4
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	bfb4      	ite	lt
 800aaa8:	463b      	movlt	r3, r7
 800aaaa:	2300      	movge	r3, #0
 800aaac:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800acd8 <_strtod_l+0x850>
 800aab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aab8:	2400      	movs	r4, #0
 800aaba:	930d      	str	r3, [sp, #52]	@ 0x34
 800aabc:	4625      	mov	r5, r4
 800aabe:	9b07      	ldr	r3, [sp, #28]
 800aac0:	9805      	ldr	r0, [sp, #20]
 800aac2:	6859      	ldr	r1, [r3, #4]
 800aac4:	f001 ff6e 	bl	800c9a4 <_Balloc>
 800aac8:	4606      	mov	r6, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	f43f aef6 	beq.w	800a8bc <_strtod_l+0x434>
 800aad0:	9b07      	ldr	r3, [sp, #28]
 800aad2:	691a      	ldr	r2, [r3, #16]
 800aad4:	ec4b ab19 	vmov	d9, sl, fp
 800aad8:	3202      	adds	r2, #2
 800aada:	f103 010c 	add.w	r1, r3, #12
 800aade:	0092      	lsls	r2, r2, #2
 800aae0:	300c      	adds	r0, #12
 800aae2:	f000 fb57 	bl	800b194 <memcpy>
 800aae6:	eeb0 0b49 	vmov.f64	d0, d9
 800aaea:	9805      	ldr	r0, [sp, #20]
 800aaec:	aa14      	add	r2, sp, #80	@ 0x50
 800aaee:	a913      	add	r1, sp, #76	@ 0x4c
 800aaf0:	f002 fb34 	bl	800d15c <__d2b>
 800aaf4:	9012      	str	r0, [sp, #72]	@ 0x48
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f43f aee0 	beq.w	800a8bc <_strtod_l+0x434>
 800aafc:	9805      	ldr	r0, [sp, #20]
 800aafe:	2101      	movs	r1, #1
 800ab00:	f002 f88e 	bl	800cc20 <__i2b>
 800ab04:	4605      	mov	r5, r0
 800ab06:	b940      	cbnz	r0, 800ab1a <_strtod_l+0x692>
 800ab08:	2500      	movs	r5, #0
 800ab0a:	e6d7      	b.n	800a8bc <_strtod_l+0x434>
 800ab0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ab10:	fa01 f202 	lsl.w	r2, r1, r2
 800ab14:	ea02 0a0a 	and.w	sl, r2, sl
 800ab18:	e7b0      	b.n	800aa7c <_strtod_l+0x5f4>
 800ab1a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ab1c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ab1e:	2f00      	cmp	r7, #0
 800ab20:	bfab      	itete	ge
 800ab22:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ab24:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ab26:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ab2a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ab2e:	bfac      	ite	ge
 800ab30:	eb07 0903 	addge.w	r9, r7, r3
 800ab34:	eba3 0807 	sublt.w	r8, r3, r7
 800ab38:	9b06      	ldr	r3, [sp, #24]
 800ab3a:	1aff      	subs	r7, r7, r3
 800ab3c:	4417      	add	r7, r2
 800ab3e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ab42:	4a6a      	ldr	r2, [pc, #424]	@ (800acec <_strtod_l+0x864>)
 800ab44:	3f01      	subs	r7, #1
 800ab46:	4297      	cmp	r7, r2
 800ab48:	da51      	bge.n	800abee <_strtod_l+0x766>
 800ab4a:	1bd1      	subs	r1, r2, r7
 800ab4c:	291f      	cmp	r1, #31
 800ab4e:	eba3 0301 	sub.w	r3, r3, r1
 800ab52:	f04f 0201 	mov.w	r2, #1
 800ab56:	dc3e      	bgt.n	800abd6 <_strtod_l+0x74e>
 800ab58:	408a      	lsls	r2, r1
 800ab5a:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ab60:	eb09 0703 	add.w	r7, r9, r3
 800ab64:	4498      	add	r8, r3
 800ab66:	9b06      	ldr	r3, [sp, #24]
 800ab68:	45b9      	cmp	r9, r7
 800ab6a:	4498      	add	r8, r3
 800ab6c:	464b      	mov	r3, r9
 800ab6e:	bfa8      	it	ge
 800ab70:	463b      	movge	r3, r7
 800ab72:	4543      	cmp	r3, r8
 800ab74:	bfa8      	it	ge
 800ab76:	4643      	movge	r3, r8
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	bfc2      	ittt	gt
 800ab7c:	1aff      	subgt	r7, r7, r3
 800ab7e:	eba8 0803 	subgt.w	r8, r8, r3
 800ab82:	eba9 0903 	subgt.w	r9, r9, r3
 800ab86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	dd16      	ble.n	800abba <_strtod_l+0x732>
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	9805      	ldr	r0, [sp, #20]
 800ab90:	461a      	mov	r2, r3
 800ab92:	f002 f8fd 	bl	800cd90 <__pow5mult>
 800ab96:	4605      	mov	r5, r0
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d0b5      	beq.n	800ab08 <_strtod_l+0x680>
 800ab9c:	4601      	mov	r1, r0
 800ab9e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aba0:	9805      	ldr	r0, [sp, #20]
 800aba2:	f002 f853 	bl	800cc4c <__multiply>
 800aba6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800aba8:	2800      	cmp	r0, #0
 800abaa:	f43f ae87 	beq.w	800a8bc <_strtod_l+0x434>
 800abae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800abb0:	9805      	ldr	r0, [sp, #20]
 800abb2:	f001 ff37 	bl	800ca24 <_Bfree>
 800abb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb8:	9312      	str	r3, [sp, #72]	@ 0x48
 800abba:	2f00      	cmp	r7, #0
 800abbc:	dc1b      	bgt.n	800abf6 <_strtod_l+0x76e>
 800abbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	dd21      	ble.n	800ac08 <_strtod_l+0x780>
 800abc4:	4631      	mov	r1, r6
 800abc6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abc8:	9805      	ldr	r0, [sp, #20]
 800abca:	f002 f8e1 	bl	800cd90 <__pow5mult>
 800abce:	4606      	mov	r6, r0
 800abd0:	b9d0      	cbnz	r0, 800ac08 <_strtod_l+0x780>
 800abd2:	2600      	movs	r6, #0
 800abd4:	e672      	b.n	800a8bc <_strtod_l+0x434>
 800abd6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800abda:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800abde:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800abe2:	37e2      	adds	r7, #226	@ 0xe2
 800abe4:	fa02 f107 	lsl.w	r1, r2, r7
 800abe8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800abea:	920c      	str	r2, [sp, #48]	@ 0x30
 800abec:	e7b8      	b.n	800ab60 <_strtod_l+0x6d8>
 800abee:	2200      	movs	r2, #0
 800abf0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800abf2:	2201      	movs	r2, #1
 800abf4:	e7f9      	b.n	800abea <_strtod_l+0x762>
 800abf6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800abf8:	9805      	ldr	r0, [sp, #20]
 800abfa:	463a      	mov	r2, r7
 800abfc:	f002 f922 	bl	800ce44 <__lshift>
 800ac00:	9012      	str	r0, [sp, #72]	@ 0x48
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d1db      	bne.n	800abbe <_strtod_l+0x736>
 800ac06:	e659      	b.n	800a8bc <_strtod_l+0x434>
 800ac08:	f1b8 0f00 	cmp.w	r8, #0
 800ac0c:	dd07      	ble.n	800ac1e <_strtod_l+0x796>
 800ac0e:	4631      	mov	r1, r6
 800ac10:	9805      	ldr	r0, [sp, #20]
 800ac12:	4642      	mov	r2, r8
 800ac14:	f002 f916 	bl	800ce44 <__lshift>
 800ac18:	4606      	mov	r6, r0
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d0d9      	beq.n	800abd2 <_strtod_l+0x74a>
 800ac1e:	f1b9 0f00 	cmp.w	r9, #0
 800ac22:	dd08      	ble.n	800ac36 <_strtod_l+0x7ae>
 800ac24:	4629      	mov	r1, r5
 800ac26:	9805      	ldr	r0, [sp, #20]
 800ac28:	464a      	mov	r2, r9
 800ac2a:	f002 f90b 	bl	800ce44 <__lshift>
 800ac2e:	4605      	mov	r5, r0
 800ac30:	2800      	cmp	r0, #0
 800ac32:	f43f ae43 	beq.w	800a8bc <_strtod_l+0x434>
 800ac36:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ac38:	9805      	ldr	r0, [sp, #20]
 800ac3a:	4632      	mov	r2, r6
 800ac3c:	f002 f98a 	bl	800cf54 <__mdiff>
 800ac40:	4604      	mov	r4, r0
 800ac42:	2800      	cmp	r0, #0
 800ac44:	f43f ae3a 	beq.w	800a8bc <_strtod_l+0x434>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ac4e:	60c3      	str	r3, [r0, #12]
 800ac50:	4629      	mov	r1, r5
 800ac52:	f002 f963 	bl	800cf1c <__mcmp>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	da4c      	bge.n	800acf4 <_strtod_l+0x86c>
 800ac5a:	ea58 080a 	orrs.w	r8, r8, sl
 800ac5e:	d172      	bne.n	800ad46 <_strtod_l+0x8be>
 800ac60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d16e      	bne.n	800ad46 <_strtod_l+0x8be>
 800ac68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac6c:	0d1b      	lsrs	r3, r3, #20
 800ac6e:	051b      	lsls	r3, r3, #20
 800ac70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac74:	d967      	bls.n	800ad46 <_strtod_l+0x8be>
 800ac76:	6963      	ldr	r3, [r4, #20]
 800ac78:	b913      	cbnz	r3, 800ac80 <_strtod_l+0x7f8>
 800ac7a:	6923      	ldr	r3, [r4, #16]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	dd62      	ble.n	800ad46 <_strtod_l+0x8be>
 800ac80:	4621      	mov	r1, r4
 800ac82:	2201      	movs	r2, #1
 800ac84:	9805      	ldr	r0, [sp, #20]
 800ac86:	f002 f8dd 	bl	800ce44 <__lshift>
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	f002 f945 	bl	800cf1c <__mcmp>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	dd57      	ble.n	800ad46 <_strtod_l+0x8be>
 800ac96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac9a:	9a06      	ldr	r2, [sp, #24]
 800ac9c:	0d1b      	lsrs	r3, r3, #20
 800ac9e:	051b      	lsls	r3, r3, #20
 800aca0:	2a00      	cmp	r2, #0
 800aca2:	d06e      	beq.n	800ad82 <_strtod_l+0x8fa>
 800aca4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aca8:	d86b      	bhi.n	800ad82 <_strtod_l+0x8fa>
 800acaa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800acae:	f67f ae99 	bls.w	800a9e4 <_strtod_l+0x55c>
 800acb2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800ace0 <_strtod_l+0x858>
 800acb6:	ec4b ab16 	vmov	d6, sl, fp
 800acba:	4b0d      	ldr	r3, [pc, #52]	@ (800acf0 <_strtod_l+0x868>)
 800acbc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800acc0:	ee17 2a90 	vmov	r2, s15
 800acc4:	4013      	ands	r3, r2
 800acc6:	ec5b ab17 	vmov	sl, fp, d7
 800acca:	2b00      	cmp	r3, #0
 800accc:	f47f ae01 	bne.w	800a8d2 <_strtod_l+0x44a>
 800acd0:	9a05      	ldr	r2, [sp, #20]
 800acd2:	2322      	movs	r3, #34	@ 0x22
 800acd4:	6013      	str	r3, [r2, #0]
 800acd6:	e5fc      	b.n	800a8d2 <_strtod_l+0x44a>
 800acd8:	ffc00000 	.word	0xffc00000
 800acdc:	41dfffff 	.word	0x41dfffff
 800ace0:	00000000 	.word	0x00000000
 800ace4:	39500000 	.word	0x39500000
 800ace8:	0800e8a0 	.word	0x0800e8a0
 800acec:	fffffc02 	.word	0xfffffc02
 800acf0:	7ff00000 	.word	0x7ff00000
 800acf4:	46d9      	mov	r9, fp
 800acf6:	d15d      	bne.n	800adb4 <_strtod_l+0x92c>
 800acf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acfc:	f1b8 0f00 	cmp.w	r8, #0
 800ad00:	d02a      	beq.n	800ad58 <_strtod_l+0x8d0>
 800ad02:	4aa9      	ldr	r2, [pc, #676]	@ (800afa8 <_strtod_l+0xb20>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d12a      	bne.n	800ad5e <_strtod_l+0x8d6>
 800ad08:	9b06      	ldr	r3, [sp, #24]
 800ad0a:	4652      	mov	r2, sl
 800ad0c:	b1fb      	cbz	r3, 800ad4e <_strtod_l+0x8c6>
 800ad0e:	4ba7      	ldr	r3, [pc, #668]	@ (800afac <_strtod_l+0xb24>)
 800ad10:	ea0b 0303 	and.w	r3, fp, r3
 800ad14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ad18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ad1c:	d81a      	bhi.n	800ad54 <_strtod_l+0x8cc>
 800ad1e:	0d1b      	lsrs	r3, r3, #20
 800ad20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad24:	fa01 f303 	lsl.w	r3, r1, r3
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d118      	bne.n	800ad5e <_strtod_l+0x8d6>
 800ad2c:	4ba0      	ldr	r3, [pc, #640]	@ (800afb0 <_strtod_l+0xb28>)
 800ad2e:	4599      	cmp	r9, r3
 800ad30:	d102      	bne.n	800ad38 <_strtod_l+0x8b0>
 800ad32:	3201      	adds	r2, #1
 800ad34:	f43f adc2 	beq.w	800a8bc <_strtod_l+0x434>
 800ad38:	4b9c      	ldr	r3, [pc, #624]	@ (800afac <_strtod_l+0xb24>)
 800ad3a:	ea09 0303 	and.w	r3, r9, r3
 800ad3e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ad42:	f04f 0a00 	mov.w	sl, #0
 800ad46:	9b06      	ldr	r3, [sp, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1b2      	bne.n	800acb2 <_strtod_l+0x82a>
 800ad4c:	e5c1      	b.n	800a8d2 <_strtod_l+0x44a>
 800ad4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad52:	e7e9      	b.n	800ad28 <_strtod_l+0x8a0>
 800ad54:	460b      	mov	r3, r1
 800ad56:	e7e7      	b.n	800ad28 <_strtod_l+0x8a0>
 800ad58:	ea53 030a 	orrs.w	r3, r3, sl
 800ad5c:	d09b      	beq.n	800ac96 <_strtod_l+0x80e>
 800ad5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad60:	b1c3      	cbz	r3, 800ad94 <_strtod_l+0x90c>
 800ad62:	ea13 0f09 	tst.w	r3, r9
 800ad66:	d0ee      	beq.n	800ad46 <_strtod_l+0x8be>
 800ad68:	9a06      	ldr	r2, [sp, #24]
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	4659      	mov	r1, fp
 800ad6e:	f1b8 0f00 	cmp.w	r8, #0
 800ad72:	d013      	beq.n	800ad9c <_strtod_l+0x914>
 800ad74:	f7ff fb6e 	bl	800a454 <sulp>
 800ad78:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ad7c:	ec5b ab17 	vmov	sl, fp, d7
 800ad80:	e7e1      	b.n	800ad46 <_strtod_l+0x8be>
 800ad82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad8e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ad92:	e7d8      	b.n	800ad46 <_strtod_l+0x8be>
 800ad94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad96:	ea13 0f0a 	tst.w	r3, sl
 800ad9a:	e7e4      	b.n	800ad66 <_strtod_l+0x8de>
 800ad9c:	f7ff fb5a 	bl	800a454 <sulp>
 800ada0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ada4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adac:	ec5b ab10 	vmov	sl, fp, d0
 800adb0:	d1c9      	bne.n	800ad46 <_strtod_l+0x8be>
 800adb2:	e617      	b.n	800a9e4 <_strtod_l+0x55c>
 800adb4:	4629      	mov	r1, r5
 800adb6:	4620      	mov	r0, r4
 800adb8:	f002 fa28 	bl	800d20c <__ratio>
 800adbc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800adc0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800adc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc8:	d85d      	bhi.n	800ae86 <_strtod_l+0x9fe>
 800adca:	f1b8 0f00 	cmp.w	r8, #0
 800adce:	d164      	bne.n	800ae9a <_strtod_l+0xa12>
 800add0:	f1ba 0f00 	cmp.w	sl, #0
 800add4:	d14b      	bne.n	800ae6e <_strtod_l+0x9e6>
 800add6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adda:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d160      	bne.n	800aea4 <_strtod_l+0xa1c>
 800ade2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ade6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800adea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adee:	d401      	bmi.n	800adf4 <_strtod_l+0x96c>
 800adf0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800adf4:	eeb1 ab48 	vneg.f64	d10, d8
 800adf8:	486c      	ldr	r0, [pc, #432]	@ (800afac <_strtod_l+0xb24>)
 800adfa:	496e      	ldr	r1, [pc, #440]	@ (800afb4 <_strtod_l+0xb2c>)
 800adfc:	ea09 0700 	and.w	r7, r9, r0
 800ae00:	428f      	cmp	r7, r1
 800ae02:	ec53 2b1a 	vmov	r2, r3, d10
 800ae06:	d17d      	bne.n	800af04 <_strtod_l+0xa7c>
 800ae08:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ae0c:	ec4b ab1c 	vmov	d12, sl, fp
 800ae10:	eeb0 0b4c 	vmov.f64	d0, d12
 800ae14:	f002 f932 	bl	800d07c <__ulp>
 800ae18:	4864      	ldr	r0, [pc, #400]	@ (800afac <_strtod_l+0xb24>)
 800ae1a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ae1e:	ee1c 3a90 	vmov	r3, s25
 800ae22:	4a65      	ldr	r2, [pc, #404]	@ (800afb8 <_strtod_l+0xb30>)
 800ae24:	ea03 0100 	and.w	r1, r3, r0
 800ae28:	4291      	cmp	r1, r2
 800ae2a:	ec5b ab1c 	vmov	sl, fp, d12
 800ae2e:	d93c      	bls.n	800aeaa <_strtod_l+0xa22>
 800ae30:	ee19 2a90 	vmov	r2, s19
 800ae34:	4b5e      	ldr	r3, [pc, #376]	@ (800afb0 <_strtod_l+0xb28>)
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d104      	bne.n	800ae44 <_strtod_l+0x9bc>
 800ae3a:	ee19 3a10 	vmov	r3, s18
 800ae3e:	3301      	adds	r3, #1
 800ae40:	f43f ad3c 	beq.w	800a8bc <_strtod_l+0x434>
 800ae44:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800afb0 <_strtod_l+0xb28>
 800ae48:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ae4c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae4e:	9805      	ldr	r0, [sp, #20]
 800ae50:	f001 fde8 	bl	800ca24 <_Bfree>
 800ae54:	9805      	ldr	r0, [sp, #20]
 800ae56:	4631      	mov	r1, r6
 800ae58:	f001 fde4 	bl	800ca24 <_Bfree>
 800ae5c:	9805      	ldr	r0, [sp, #20]
 800ae5e:	4629      	mov	r1, r5
 800ae60:	f001 fde0 	bl	800ca24 <_Bfree>
 800ae64:	9805      	ldr	r0, [sp, #20]
 800ae66:	4621      	mov	r1, r4
 800ae68:	f001 fddc 	bl	800ca24 <_Bfree>
 800ae6c:	e627      	b.n	800aabe <_strtod_l+0x636>
 800ae6e:	f1ba 0f01 	cmp.w	sl, #1
 800ae72:	d103      	bne.n	800ae7c <_strtod_l+0x9f4>
 800ae74:	f1bb 0f00 	cmp.w	fp, #0
 800ae78:	f43f adb4 	beq.w	800a9e4 <_strtod_l+0x55c>
 800ae7c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ae80:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ae84:	e7b8      	b.n	800adf8 <_strtod_l+0x970>
 800ae86:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ae8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ae8e:	f1b8 0f00 	cmp.w	r8, #0
 800ae92:	d0af      	beq.n	800adf4 <_strtod_l+0x96c>
 800ae94:	eeb0 ab48 	vmov.f64	d10, d8
 800ae98:	e7ae      	b.n	800adf8 <_strtod_l+0x970>
 800ae9a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ae9e:	eeb0 8b4a 	vmov.f64	d8, d10
 800aea2:	e7a9      	b.n	800adf8 <_strtod_l+0x970>
 800aea4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800aea8:	e7a6      	b.n	800adf8 <_strtod_l+0x970>
 800aeaa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aeae:	9b06      	ldr	r3, [sp, #24]
 800aeb0:	46d9      	mov	r9, fp
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1ca      	bne.n	800ae4c <_strtod_l+0x9c4>
 800aeb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aeba:	0d1b      	lsrs	r3, r3, #20
 800aebc:	051b      	lsls	r3, r3, #20
 800aebe:	429f      	cmp	r7, r3
 800aec0:	d1c4      	bne.n	800ae4c <_strtod_l+0x9c4>
 800aec2:	ec51 0b18 	vmov	r0, r1, d8
 800aec6:	f7f5 fc37 	bl	8000738 <__aeabi_d2lz>
 800aeca:	f7f5 fbef 	bl	80006ac <__aeabi_l2d>
 800aece:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800aed2:	ec41 0b17 	vmov	d7, r0, r1
 800aed6:	ea49 090a 	orr.w	r9, r9, sl
 800aeda:	ea59 0908 	orrs.w	r9, r9, r8
 800aede:	ee38 8b47 	vsub.f64	d8, d8, d7
 800aee2:	d03c      	beq.n	800af5e <_strtod_l+0xad6>
 800aee4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800af90 <_strtod_l+0xb08>
 800aee8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef0:	f53f acef 	bmi.w	800a8d2 <_strtod_l+0x44a>
 800aef4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800af98 <_strtod_l+0xb10>
 800aef8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af00:	dda4      	ble.n	800ae4c <_strtod_l+0x9c4>
 800af02:	e4e6      	b.n	800a8d2 <_strtod_l+0x44a>
 800af04:	9906      	ldr	r1, [sp, #24]
 800af06:	b1e1      	cbz	r1, 800af42 <_strtod_l+0xaba>
 800af08:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800af0c:	d819      	bhi.n	800af42 <_strtod_l+0xaba>
 800af0e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800af12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af16:	d811      	bhi.n	800af3c <_strtod_l+0xab4>
 800af18:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800af1c:	ee18 3a10 	vmov	r3, s16
 800af20:	2b01      	cmp	r3, #1
 800af22:	bf38      	it	cc
 800af24:	2301      	movcc	r3, #1
 800af26:	ee08 3a10 	vmov	s16, r3
 800af2a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800af2e:	f1b8 0f00 	cmp.w	r8, #0
 800af32:	d111      	bne.n	800af58 <_strtod_l+0xad0>
 800af34:	eeb1 7b48 	vneg.f64	d7, d8
 800af38:	ec53 2b17 	vmov	r2, r3, d7
 800af3c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800af40:	1bcb      	subs	r3, r1, r7
 800af42:	eeb0 0b49 	vmov.f64	d0, d9
 800af46:	ec43 2b1a 	vmov	d10, r2, r3
 800af4a:	f002 f897 	bl	800d07c <__ulp>
 800af4e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800af52:	ec5b ab19 	vmov	sl, fp, d9
 800af56:	e7aa      	b.n	800aeae <_strtod_l+0xa26>
 800af58:	eeb0 7b48 	vmov.f64	d7, d8
 800af5c:	e7ec      	b.n	800af38 <_strtod_l+0xab0>
 800af5e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800afa0 <_strtod_l+0xb18>
 800af62:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800af66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6a:	f57f af6f 	bpl.w	800ae4c <_strtod_l+0x9c4>
 800af6e:	e4b0      	b.n	800a8d2 <_strtod_l+0x44a>
 800af70:	2300      	movs	r3, #0
 800af72:	9308      	str	r3, [sp, #32]
 800af74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	f7ff bac4 	b.w	800a506 <_strtod_l+0x7e>
 800af7e:	2a65      	cmp	r2, #101	@ 0x65
 800af80:	f43f abbf 	beq.w	800a702 <_strtod_l+0x27a>
 800af84:	2a45      	cmp	r2, #69	@ 0x45
 800af86:	f43f abbc 	beq.w	800a702 <_strtod_l+0x27a>
 800af8a:	2101      	movs	r1, #1
 800af8c:	f7ff bbf4 	b.w	800a778 <_strtod_l+0x2f0>
 800af90:	94a03595 	.word	0x94a03595
 800af94:	3fdfffff 	.word	0x3fdfffff
 800af98:	35afe535 	.word	0x35afe535
 800af9c:	3fe00000 	.word	0x3fe00000
 800afa0:	94a03595 	.word	0x94a03595
 800afa4:	3fcfffff 	.word	0x3fcfffff
 800afa8:	000fffff 	.word	0x000fffff
 800afac:	7ff00000 	.word	0x7ff00000
 800afb0:	7fefffff 	.word	0x7fefffff
 800afb4:	7fe00000 	.word	0x7fe00000
 800afb8:	7c9fffff 	.word	0x7c9fffff

0800afbc <_strtod_r>:
 800afbc:	4b01      	ldr	r3, [pc, #4]	@ (800afc4 <_strtod_r+0x8>)
 800afbe:	f7ff ba63 	b.w	800a488 <_strtod_l>
 800afc2:	bf00      	nop
 800afc4:	24000020 	.word	0x24000020

0800afc8 <_strtol_l.isra.0>:
 800afc8:	2b24      	cmp	r3, #36	@ 0x24
 800afca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afce:	4686      	mov	lr, r0
 800afd0:	4690      	mov	r8, r2
 800afd2:	d801      	bhi.n	800afd8 <_strtol_l.isra.0+0x10>
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d106      	bne.n	800afe6 <_strtol_l.isra.0+0x1e>
 800afd8:	f000 f8aa 	bl	800b130 <__errno>
 800afdc:	2316      	movs	r3, #22
 800afde:	6003      	str	r3, [r0, #0]
 800afe0:	2000      	movs	r0, #0
 800afe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe6:	4834      	ldr	r0, [pc, #208]	@ (800b0b8 <_strtol_l.isra.0+0xf0>)
 800afe8:	460d      	mov	r5, r1
 800afea:	462a      	mov	r2, r5
 800afec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aff0:	5d06      	ldrb	r6, [r0, r4]
 800aff2:	f016 0608 	ands.w	r6, r6, #8
 800aff6:	d1f8      	bne.n	800afea <_strtol_l.isra.0+0x22>
 800aff8:	2c2d      	cmp	r4, #45	@ 0x2d
 800affa:	d110      	bne.n	800b01e <_strtol_l.isra.0+0x56>
 800affc:	782c      	ldrb	r4, [r5, #0]
 800affe:	2601      	movs	r6, #1
 800b000:	1c95      	adds	r5, r2, #2
 800b002:	f033 0210 	bics.w	r2, r3, #16
 800b006:	d115      	bne.n	800b034 <_strtol_l.isra.0+0x6c>
 800b008:	2c30      	cmp	r4, #48	@ 0x30
 800b00a:	d10d      	bne.n	800b028 <_strtol_l.isra.0+0x60>
 800b00c:	782a      	ldrb	r2, [r5, #0]
 800b00e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b012:	2a58      	cmp	r2, #88	@ 0x58
 800b014:	d108      	bne.n	800b028 <_strtol_l.isra.0+0x60>
 800b016:	786c      	ldrb	r4, [r5, #1]
 800b018:	3502      	adds	r5, #2
 800b01a:	2310      	movs	r3, #16
 800b01c:	e00a      	b.n	800b034 <_strtol_l.isra.0+0x6c>
 800b01e:	2c2b      	cmp	r4, #43	@ 0x2b
 800b020:	bf04      	itt	eq
 800b022:	782c      	ldrbeq	r4, [r5, #0]
 800b024:	1c95      	addeq	r5, r2, #2
 800b026:	e7ec      	b.n	800b002 <_strtol_l.isra.0+0x3a>
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1f6      	bne.n	800b01a <_strtol_l.isra.0+0x52>
 800b02c:	2c30      	cmp	r4, #48	@ 0x30
 800b02e:	bf14      	ite	ne
 800b030:	230a      	movne	r3, #10
 800b032:	2308      	moveq	r3, #8
 800b034:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b038:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b03c:	2200      	movs	r2, #0
 800b03e:	fbbc f9f3 	udiv	r9, ip, r3
 800b042:	4610      	mov	r0, r2
 800b044:	fb03 ca19 	mls	sl, r3, r9, ip
 800b048:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b04c:	2f09      	cmp	r7, #9
 800b04e:	d80f      	bhi.n	800b070 <_strtol_l.isra.0+0xa8>
 800b050:	463c      	mov	r4, r7
 800b052:	42a3      	cmp	r3, r4
 800b054:	dd1b      	ble.n	800b08e <_strtol_l.isra.0+0xc6>
 800b056:	1c57      	adds	r7, r2, #1
 800b058:	d007      	beq.n	800b06a <_strtol_l.isra.0+0xa2>
 800b05a:	4581      	cmp	r9, r0
 800b05c:	d314      	bcc.n	800b088 <_strtol_l.isra.0+0xc0>
 800b05e:	d101      	bne.n	800b064 <_strtol_l.isra.0+0x9c>
 800b060:	45a2      	cmp	sl, r4
 800b062:	db11      	blt.n	800b088 <_strtol_l.isra.0+0xc0>
 800b064:	fb00 4003 	mla	r0, r0, r3, r4
 800b068:	2201      	movs	r2, #1
 800b06a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b06e:	e7eb      	b.n	800b048 <_strtol_l.isra.0+0x80>
 800b070:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b074:	2f19      	cmp	r7, #25
 800b076:	d801      	bhi.n	800b07c <_strtol_l.isra.0+0xb4>
 800b078:	3c37      	subs	r4, #55	@ 0x37
 800b07a:	e7ea      	b.n	800b052 <_strtol_l.isra.0+0x8a>
 800b07c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b080:	2f19      	cmp	r7, #25
 800b082:	d804      	bhi.n	800b08e <_strtol_l.isra.0+0xc6>
 800b084:	3c57      	subs	r4, #87	@ 0x57
 800b086:	e7e4      	b.n	800b052 <_strtol_l.isra.0+0x8a>
 800b088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b08c:	e7ed      	b.n	800b06a <_strtol_l.isra.0+0xa2>
 800b08e:	1c53      	adds	r3, r2, #1
 800b090:	d108      	bne.n	800b0a4 <_strtol_l.isra.0+0xdc>
 800b092:	2322      	movs	r3, #34	@ 0x22
 800b094:	f8ce 3000 	str.w	r3, [lr]
 800b098:	4660      	mov	r0, ip
 800b09a:	f1b8 0f00 	cmp.w	r8, #0
 800b09e:	d0a0      	beq.n	800afe2 <_strtol_l.isra.0+0x1a>
 800b0a0:	1e69      	subs	r1, r5, #1
 800b0a2:	e006      	b.n	800b0b2 <_strtol_l.isra.0+0xea>
 800b0a4:	b106      	cbz	r6, 800b0a8 <_strtol_l.isra.0+0xe0>
 800b0a6:	4240      	negs	r0, r0
 800b0a8:	f1b8 0f00 	cmp.w	r8, #0
 800b0ac:	d099      	beq.n	800afe2 <_strtol_l.isra.0+0x1a>
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	d1f6      	bne.n	800b0a0 <_strtol_l.isra.0+0xd8>
 800b0b2:	f8c8 1000 	str.w	r1, [r8]
 800b0b6:	e794      	b.n	800afe2 <_strtol_l.isra.0+0x1a>
 800b0b8:	0800e8c9 	.word	0x0800e8c9

0800b0bc <_strtol_r>:
 800b0bc:	f7ff bf84 	b.w	800afc8 <_strtol_l.isra.0>

0800b0c0 <_fwalk_sglue>:
 800b0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	4688      	mov	r8, r1
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0d0:	f1b9 0901 	subs.w	r9, r9, #1
 800b0d4:	d505      	bpl.n	800b0e2 <_fwalk_sglue+0x22>
 800b0d6:	6824      	ldr	r4, [r4, #0]
 800b0d8:	2c00      	cmp	r4, #0
 800b0da:	d1f7      	bne.n	800b0cc <_fwalk_sglue+0xc>
 800b0dc:	4630      	mov	r0, r6
 800b0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e2:	89ab      	ldrh	r3, [r5, #12]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d907      	bls.n	800b0f8 <_fwalk_sglue+0x38>
 800b0e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	d003      	beq.n	800b0f8 <_fwalk_sglue+0x38>
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	47c0      	blx	r8
 800b0f6:	4306      	orrs	r6, r0
 800b0f8:	3568      	adds	r5, #104	@ 0x68
 800b0fa:	e7e9      	b.n	800b0d0 <_fwalk_sglue+0x10>

0800b0fc <memset>:
 800b0fc:	4402      	add	r2, r0
 800b0fe:	4603      	mov	r3, r0
 800b100:	4293      	cmp	r3, r2
 800b102:	d100      	bne.n	800b106 <memset+0xa>
 800b104:	4770      	bx	lr
 800b106:	f803 1b01 	strb.w	r1, [r3], #1
 800b10a:	e7f9      	b.n	800b100 <memset+0x4>

0800b10c <strncmp>:
 800b10c:	b510      	push	{r4, lr}
 800b10e:	b16a      	cbz	r2, 800b12c <strncmp+0x20>
 800b110:	3901      	subs	r1, #1
 800b112:	1884      	adds	r4, r0, r2
 800b114:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b118:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d103      	bne.n	800b128 <strncmp+0x1c>
 800b120:	42a0      	cmp	r0, r4
 800b122:	d001      	beq.n	800b128 <strncmp+0x1c>
 800b124:	2a00      	cmp	r2, #0
 800b126:	d1f5      	bne.n	800b114 <strncmp+0x8>
 800b128:	1ad0      	subs	r0, r2, r3
 800b12a:	bd10      	pop	{r4, pc}
 800b12c:	4610      	mov	r0, r2
 800b12e:	e7fc      	b.n	800b12a <strncmp+0x1e>

0800b130 <__errno>:
 800b130:	4b01      	ldr	r3, [pc, #4]	@ (800b138 <__errno+0x8>)
 800b132:	6818      	ldr	r0, [r3, #0]
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	2400018c 	.word	0x2400018c

0800b13c <__libc_init_array>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	4d0d      	ldr	r5, [pc, #52]	@ (800b174 <__libc_init_array+0x38>)
 800b140:	4c0d      	ldr	r4, [pc, #52]	@ (800b178 <__libc_init_array+0x3c>)
 800b142:	1b64      	subs	r4, r4, r5
 800b144:	10a4      	asrs	r4, r4, #2
 800b146:	2600      	movs	r6, #0
 800b148:	42a6      	cmp	r6, r4
 800b14a:	d109      	bne.n	800b160 <__libc_init_array+0x24>
 800b14c:	4d0b      	ldr	r5, [pc, #44]	@ (800b17c <__libc_init_array+0x40>)
 800b14e:	4c0c      	ldr	r4, [pc, #48]	@ (800b180 <__libc_init_array+0x44>)
 800b150:	f003 fa7e 	bl	800e650 <_init>
 800b154:	1b64      	subs	r4, r4, r5
 800b156:	10a4      	asrs	r4, r4, #2
 800b158:	2600      	movs	r6, #0
 800b15a:	42a6      	cmp	r6, r4
 800b15c:	d105      	bne.n	800b16a <__libc_init_array+0x2e>
 800b15e:	bd70      	pop	{r4, r5, r6, pc}
 800b160:	f855 3b04 	ldr.w	r3, [r5], #4
 800b164:	4798      	blx	r3
 800b166:	3601      	adds	r6, #1
 800b168:	e7ee      	b.n	800b148 <__libc_init_array+0xc>
 800b16a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b16e:	4798      	blx	r3
 800b170:	3601      	adds	r6, #1
 800b172:	e7f2      	b.n	800b15a <__libc_init_array+0x1e>
 800b174:	080103c0 	.word	0x080103c0
 800b178:	080103c0 	.word	0x080103c0
 800b17c:	080103c0 	.word	0x080103c0
 800b180:	080103c4 	.word	0x080103c4

0800b184 <__retarget_lock_init_recursive>:
 800b184:	4770      	bx	lr

0800b186 <__retarget_lock_acquire_recursive>:
 800b186:	4770      	bx	lr

0800b188 <__retarget_lock_release_recursive>:
 800b188:	4770      	bx	lr
	...

0800b18c <_localeconv_r>:
 800b18c:	4800      	ldr	r0, [pc, #0]	@ (800b190 <_localeconv_r+0x4>)
 800b18e:	4770      	bx	lr
 800b190:	24000110 	.word	0x24000110

0800b194 <memcpy>:
 800b194:	440a      	add	r2, r1
 800b196:	4291      	cmp	r1, r2
 800b198:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b19c:	d100      	bne.n	800b1a0 <memcpy+0xc>
 800b19e:	4770      	bx	lr
 800b1a0:	b510      	push	{r4, lr}
 800b1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1aa:	4291      	cmp	r1, r2
 800b1ac:	d1f9      	bne.n	800b1a2 <memcpy+0xe>
 800b1ae:	bd10      	pop	{r4, pc}

0800b1b0 <nan>:
 800b1b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b1b8 <nan+0x8>
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	00000000 	.word	0x00000000
 800b1bc:	7ff80000 	.word	0x7ff80000

0800b1c0 <nanf>:
 800b1c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b1c8 <nanf+0x8>
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	7fc00000 	.word	0x7fc00000

0800b1cc <quorem>:
 800b1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	6903      	ldr	r3, [r0, #16]
 800b1d2:	690c      	ldr	r4, [r1, #16]
 800b1d4:	42a3      	cmp	r3, r4
 800b1d6:	4607      	mov	r7, r0
 800b1d8:	db7e      	blt.n	800b2d8 <quorem+0x10c>
 800b1da:	3c01      	subs	r4, #1
 800b1dc:	f101 0814 	add.w	r8, r1, #20
 800b1e0:	00a3      	lsls	r3, r4, #2
 800b1e2:	f100 0514 	add.w	r5, r0, #20
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800b202:	d32e      	bcc.n	800b262 <quorem+0x96>
 800b204:	f04f 0a00 	mov.w	sl, #0
 800b208:	46c4      	mov	ip, r8
 800b20a:	46ae      	mov	lr, r5
 800b20c:	46d3      	mov	fp, sl
 800b20e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b212:	b298      	uxth	r0, r3
 800b214:	fb06 a000 	mla	r0, r6, r0, sl
 800b218:	0c02      	lsrs	r2, r0, #16
 800b21a:	0c1b      	lsrs	r3, r3, #16
 800b21c:	fb06 2303 	mla	r3, r6, r3, r2
 800b220:	f8de 2000 	ldr.w	r2, [lr]
 800b224:	b280      	uxth	r0, r0
 800b226:	b292      	uxth	r2, r2
 800b228:	1a12      	subs	r2, r2, r0
 800b22a:	445a      	add	r2, fp
 800b22c:	f8de 0000 	ldr.w	r0, [lr]
 800b230:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b234:	b29b      	uxth	r3, r3
 800b236:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b23a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b23e:	b292      	uxth	r2, r2
 800b240:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b244:	45e1      	cmp	r9, ip
 800b246:	f84e 2b04 	str.w	r2, [lr], #4
 800b24a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b24e:	d2de      	bcs.n	800b20e <quorem+0x42>
 800b250:	9b00      	ldr	r3, [sp, #0]
 800b252:	58eb      	ldr	r3, [r5, r3]
 800b254:	b92b      	cbnz	r3, 800b262 <quorem+0x96>
 800b256:	9b01      	ldr	r3, [sp, #4]
 800b258:	3b04      	subs	r3, #4
 800b25a:	429d      	cmp	r5, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	d32f      	bcc.n	800b2c0 <quorem+0xf4>
 800b260:	613c      	str	r4, [r7, #16]
 800b262:	4638      	mov	r0, r7
 800b264:	f001 fe5a 	bl	800cf1c <__mcmp>
 800b268:	2800      	cmp	r0, #0
 800b26a:	db25      	blt.n	800b2b8 <quorem+0xec>
 800b26c:	4629      	mov	r1, r5
 800b26e:	2000      	movs	r0, #0
 800b270:	f858 2b04 	ldr.w	r2, [r8], #4
 800b274:	f8d1 c000 	ldr.w	ip, [r1]
 800b278:	fa1f fe82 	uxth.w	lr, r2
 800b27c:	fa1f f38c 	uxth.w	r3, ip
 800b280:	eba3 030e 	sub.w	r3, r3, lr
 800b284:	4403      	add	r3, r0
 800b286:	0c12      	lsrs	r2, r2, #16
 800b288:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b28c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b290:	b29b      	uxth	r3, r3
 800b292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b296:	45c1      	cmp	r9, r8
 800b298:	f841 3b04 	str.w	r3, [r1], #4
 800b29c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2a0:	d2e6      	bcs.n	800b270 <quorem+0xa4>
 800b2a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2aa:	b922      	cbnz	r2, 800b2b6 <quorem+0xea>
 800b2ac:	3b04      	subs	r3, #4
 800b2ae:	429d      	cmp	r5, r3
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	d30b      	bcc.n	800b2cc <quorem+0x100>
 800b2b4:	613c      	str	r4, [r7, #16]
 800b2b6:	3601      	adds	r6, #1
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	b003      	add	sp, #12
 800b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c0:	6812      	ldr	r2, [r2, #0]
 800b2c2:	3b04      	subs	r3, #4
 800b2c4:	2a00      	cmp	r2, #0
 800b2c6:	d1cb      	bne.n	800b260 <quorem+0x94>
 800b2c8:	3c01      	subs	r4, #1
 800b2ca:	e7c6      	b.n	800b25a <quorem+0x8e>
 800b2cc:	6812      	ldr	r2, [r2, #0]
 800b2ce:	3b04      	subs	r3, #4
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	d1ef      	bne.n	800b2b4 <quorem+0xe8>
 800b2d4:	3c01      	subs	r4, #1
 800b2d6:	e7ea      	b.n	800b2ae <quorem+0xe2>
 800b2d8:	2000      	movs	r0, #0
 800b2da:	e7ee      	b.n	800b2ba <quorem+0xee>
 800b2dc:	0000      	movs	r0, r0
	...

0800b2e0 <_dtoa_r>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	ed2d 8b02 	vpush	{d8}
 800b2e8:	69c7      	ldr	r7, [r0, #28]
 800b2ea:	b091      	sub	sp, #68	@ 0x44
 800b2ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b2f0:	ec55 4b10 	vmov	r4, r5, d0
 800b2f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b2f6:	9107      	str	r1, [sp, #28]
 800b2f8:	4681      	mov	r9, r0
 800b2fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800b2fe:	b97f      	cbnz	r7, 800b320 <_dtoa_r+0x40>
 800b300:	2010      	movs	r0, #16
 800b302:	f001 f9db 	bl	800c6bc <malloc>
 800b306:	4602      	mov	r2, r0
 800b308:	f8c9 001c 	str.w	r0, [r9, #28]
 800b30c:	b920      	cbnz	r0, 800b318 <_dtoa_r+0x38>
 800b30e:	4ba0      	ldr	r3, [pc, #640]	@ (800b590 <_dtoa_r+0x2b0>)
 800b310:	21ef      	movs	r1, #239	@ 0xef
 800b312:	48a0      	ldr	r0, [pc, #640]	@ (800b594 <_dtoa_r+0x2b4>)
 800b314:	f002 f8dc 	bl	800d4d0 <__assert_func>
 800b318:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b31c:	6007      	str	r7, [r0, #0]
 800b31e:	60c7      	str	r7, [r0, #12]
 800b320:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b324:	6819      	ldr	r1, [r3, #0]
 800b326:	b159      	cbz	r1, 800b340 <_dtoa_r+0x60>
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	604a      	str	r2, [r1, #4]
 800b32c:	2301      	movs	r3, #1
 800b32e:	4093      	lsls	r3, r2
 800b330:	608b      	str	r3, [r1, #8]
 800b332:	4648      	mov	r0, r9
 800b334:	f001 fb76 	bl	800ca24 <_Bfree>
 800b338:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	1e2b      	subs	r3, r5, #0
 800b342:	bfbb      	ittet	lt
 800b344:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b348:	9303      	strlt	r3, [sp, #12]
 800b34a:	2300      	movge	r3, #0
 800b34c:	2201      	movlt	r2, #1
 800b34e:	bfac      	ite	ge
 800b350:	6033      	strge	r3, [r6, #0]
 800b352:	6032      	strlt	r2, [r6, #0]
 800b354:	4b90      	ldr	r3, [pc, #576]	@ (800b598 <_dtoa_r+0x2b8>)
 800b356:	9e03      	ldr	r6, [sp, #12]
 800b358:	43b3      	bics	r3, r6
 800b35a:	d110      	bne.n	800b37e <_dtoa_r+0x9e>
 800b35c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b35e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b368:	4323      	orrs	r3, r4
 800b36a:	f000 84e6 	beq.w	800bd3a <_dtoa_r+0xa5a>
 800b36e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b370:	4f8a      	ldr	r7, [pc, #552]	@ (800b59c <_dtoa_r+0x2bc>)
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 84e8 	beq.w	800bd48 <_dtoa_r+0xa68>
 800b378:	1cfb      	adds	r3, r7, #3
 800b37a:	f000 bce3 	b.w	800bd44 <_dtoa_r+0xa64>
 800b37e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b382:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38a:	d10a      	bne.n	800b3a2 <_dtoa_r+0xc2>
 800b38c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b38e:	2301      	movs	r3, #1
 800b390:	6013      	str	r3, [r2, #0]
 800b392:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b394:	b113      	cbz	r3, 800b39c <_dtoa_r+0xbc>
 800b396:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b398:	4b81      	ldr	r3, [pc, #516]	@ (800b5a0 <_dtoa_r+0x2c0>)
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	4f81      	ldr	r7, [pc, #516]	@ (800b5a4 <_dtoa_r+0x2c4>)
 800b39e:	f000 bcd3 	b.w	800bd48 <_dtoa_r+0xa68>
 800b3a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800b3a4:	a90f      	add	r1, sp, #60	@ 0x3c
 800b3a6:	4648      	mov	r0, r9
 800b3a8:	eeb0 0b48 	vmov.f64	d0, d8
 800b3ac:	f001 fed6 	bl	800d15c <__d2b>
 800b3b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b3b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3b6:	9001      	str	r0, [sp, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d045      	beq.n	800b448 <_dtoa_r+0x168>
 800b3bc:	eeb0 7b48 	vmov.f64	d7, d8
 800b3c0:	ee18 1a90 	vmov	r1, s17
 800b3c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b3c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b3cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b3d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b3d4:	2500      	movs	r5, #0
 800b3d6:	ee07 1a90 	vmov	s15, r1
 800b3da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b3de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b578 <_dtoa_r+0x298>
 800b3e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b3e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b580 <_dtoa_r+0x2a0>
 800b3ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b3ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b588 <_dtoa_r+0x2a8>
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b3fa:	eeb0 7b46 	vmov.f64	d7, d6
 800b3fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b402:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b406:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40e:	ee16 8a90 	vmov	r8, s13
 800b412:	d508      	bpl.n	800b426 <_dtoa_r+0x146>
 800b414:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b418:	eeb4 6b47 	vcmp.f64	d6, d7
 800b41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b420:	bf18      	it	ne
 800b422:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800b426:	f1b8 0f16 	cmp.w	r8, #22
 800b42a:	d82b      	bhi.n	800b484 <_dtoa_r+0x1a4>
 800b42c:	495e      	ldr	r1, [pc, #376]	@ (800b5a8 <_dtoa_r+0x2c8>)
 800b42e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b432:	ed91 7b00 	vldr	d7, [r1]
 800b436:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b43e:	d501      	bpl.n	800b444 <_dtoa_r+0x164>
 800b440:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b444:	2100      	movs	r1, #0
 800b446:	e01e      	b.n	800b486 <_dtoa_r+0x1a6>
 800b448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b44a:	4413      	add	r3, r2
 800b44c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b450:	2920      	cmp	r1, #32
 800b452:	bfc1      	itttt	gt
 800b454:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b458:	408e      	lslgt	r6, r1
 800b45a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b45e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b462:	bfd6      	itet	le
 800b464:	f1c1 0120 	rsble	r1, r1, #32
 800b468:	4331      	orrgt	r1, r6
 800b46a:	fa04 f101 	lslle.w	r1, r4, r1
 800b46e:	ee07 1a90 	vmov	s15, r1
 800b472:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b476:	3b01      	subs	r3, #1
 800b478:	ee17 1a90 	vmov	r1, s15
 800b47c:	2501      	movs	r5, #1
 800b47e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b482:	e7a8      	b.n	800b3d6 <_dtoa_r+0xf6>
 800b484:	2101      	movs	r1, #1
 800b486:	1ad2      	subs	r2, r2, r3
 800b488:	1e53      	subs	r3, r2, #1
 800b48a:	9306      	str	r3, [sp, #24]
 800b48c:	bf45      	ittet	mi
 800b48e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b492:	9304      	strmi	r3, [sp, #16]
 800b494:	2300      	movpl	r3, #0
 800b496:	2300      	movmi	r3, #0
 800b498:	bf4c      	ite	mi
 800b49a:	9306      	strmi	r3, [sp, #24]
 800b49c:	9304      	strpl	r3, [sp, #16]
 800b49e:	f1b8 0f00 	cmp.w	r8, #0
 800b4a2:	910c      	str	r1, [sp, #48]	@ 0x30
 800b4a4:	db18      	blt.n	800b4d8 <_dtoa_r+0x1f8>
 800b4a6:	9b06      	ldr	r3, [sp, #24]
 800b4a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b4ac:	4443      	add	r3, r8
 800b4ae:	9306      	str	r3, [sp, #24]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	9a07      	ldr	r2, [sp, #28]
 800b4b4:	2a09      	cmp	r2, #9
 800b4b6:	d845      	bhi.n	800b544 <_dtoa_r+0x264>
 800b4b8:	2a05      	cmp	r2, #5
 800b4ba:	bfc4      	itt	gt
 800b4bc:	3a04      	subgt	r2, #4
 800b4be:	9207      	strgt	r2, [sp, #28]
 800b4c0:	9a07      	ldr	r2, [sp, #28]
 800b4c2:	f1a2 0202 	sub.w	r2, r2, #2
 800b4c6:	bfcc      	ite	gt
 800b4c8:	2400      	movgt	r4, #0
 800b4ca:	2401      	movle	r4, #1
 800b4cc:	2a03      	cmp	r2, #3
 800b4ce:	d844      	bhi.n	800b55a <_dtoa_r+0x27a>
 800b4d0:	e8df f002 	tbb	[pc, r2]
 800b4d4:	0b173634 	.word	0x0b173634
 800b4d8:	9b04      	ldr	r3, [sp, #16]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	eba3 0308 	sub.w	r3, r3, r8
 800b4e0:	9304      	str	r3, [sp, #16]
 800b4e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b4e4:	f1c8 0300 	rsb	r3, r8, #0
 800b4e8:	e7e3      	b.n	800b4b2 <_dtoa_r+0x1d2>
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	9208      	str	r2, [sp, #32]
 800b4ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4f0:	eb08 0b02 	add.w	fp, r8, r2
 800b4f4:	f10b 0a01 	add.w	sl, fp, #1
 800b4f8:	4652      	mov	r2, sl
 800b4fa:	2a01      	cmp	r2, #1
 800b4fc:	bfb8      	it	lt
 800b4fe:	2201      	movlt	r2, #1
 800b500:	e006      	b.n	800b510 <_dtoa_r+0x230>
 800b502:	2201      	movs	r2, #1
 800b504:	9208      	str	r2, [sp, #32]
 800b506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b508:	2a00      	cmp	r2, #0
 800b50a:	dd29      	ble.n	800b560 <_dtoa_r+0x280>
 800b50c:	4693      	mov	fp, r2
 800b50e:	4692      	mov	sl, r2
 800b510:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b514:	2100      	movs	r1, #0
 800b516:	2004      	movs	r0, #4
 800b518:	f100 0614 	add.w	r6, r0, #20
 800b51c:	4296      	cmp	r6, r2
 800b51e:	d926      	bls.n	800b56e <_dtoa_r+0x28e>
 800b520:	6079      	str	r1, [r7, #4]
 800b522:	4648      	mov	r0, r9
 800b524:	9305      	str	r3, [sp, #20]
 800b526:	f001 fa3d 	bl	800c9a4 <_Balloc>
 800b52a:	9b05      	ldr	r3, [sp, #20]
 800b52c:	4607      	mov	r7, r0
 800b52e:	2800      	cmp	r0, #0
 800b530:	d13e      	bne.n	800b5b0 <_dtoa_r+0x2d0>
 800b532:	4b1e      	ldr	r3, [pc, #120]	@ (800b5ac <_dtoa_r+0x2cc>)
 800b534:	4602      	mov	r2, r0
 800b536:	f240 11af 	movw	r1, #431	@ 0x1af
 800b53a:	e6ea      	b.n	800b312 <_dtoa_r+0x32>
 800b53c:	2200      	movs	r2, #0
 800b53e:	e7e1      	b.n	800b504 <_dtoa_r+0x224>
 800b540:	2200      	movs	r2, #0
 800b542:	e7d3      	b.n	800b4ec <_dtoa_r+0x20c>
 800b544:	2401      	movs	r4, #1
 800b546:	2200      	movs	r2, #0
 800b548:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b54c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b550:	2100      	movs	r1, #0
 800b552:	46da      	mov	sl, fp
 800b554:	2212      	movs	r2, #18
 800b556:	9109      	str	r1, [sp, #36]	@ 0x24
 800b558:	e7da      	b.n	800b510 <_dtoa_r+0x230>
 800b55a:	2201      	movs	r2, #1
 800b55c:	9208      	str	r2, [sp, #32]
 800b55e:	e7f5      	b.n	800b54c <_dtoa_r+0x26c>
 800b560:	f04f 0b01 	mov.w	fp, #1
 800b564:	46da      	mov	sl, fp
 800b566:	465a      	mov	r2, fp
 800b568:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b56c:	e7d0      	b.n	800b510 <_dtoa_r+0x230>
 800b56e:	3101      	adds	r1, #1
 800b570:	0040      	lsls	r0, r0, #1
 800b572:	e7d1      	b.n	800b518 <_dtoa_r+0x238>
 800b574:	f3af 8000 	nop.w
 800b578:	636f4361 	.word	0x636f4361
 800b57c:	3fd287a7 	.word	0x3fd287a7
 800b580:	8b60c8b3 	.word	0x8b60c8b3
 800b584:	3fc68a28 	.word	0x3fc68a28
 800b588:	509f79fb 	.word	0x509f79fb
 800b58c:	3fd34413 	.word	0x3fd34413
 800b590:	0800e6f0 	.word	0x0800e6f0
 800b594:	0800e707 	.word	0x0800e707
 800b598:	7ff00000 	.word	0x7ff00000
 800b59c:	0800e6ec 	.word	0x0800e6ec
 800b5a0:	0800e6b1 	.word	0x0800e6b1
 800b5a4:	0800e6b0 	.word	0x0800e6b0
 800b5a8:	0800ea00 	.word	0x0800ea00
 800b5ac:	0800e75f 	.word	0x0800e75f
 800b5b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b5b4:	f1ba 0f0e 	cmp.w	sl, #14
 800b5b8:	6010      	str	r0, [r2, #0]
 800b5ba:	d86e      	bhi.n	800b69a <_dtoa_r+0x3ba>
 800b5bc:	2c00      	cmp	r4, #0
 800b5be:	d06c      	beq.n	800b69a <_dtoa_r+0x3ba>
 800b5c0:	f1b8 0f00 	cmp.w	r8, #0
 800b5c4:	f340 80b4 	ble.w	800b730 <_dtoa_r+0x450>
 800b5c8:	4ac8      	ldr	r2, [pc, #800]	@ (800b8ec <_dtoa_r+0x60c>)
 800b5ca:	f008 010f 	and.w	r1, r8, #15
 800b5ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b5d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b5d6:	ed92 7b00 	vldr	d7, [r2]
 800b5da:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b5de:	f000 809b 	beq.w	800b718 <_dtoa_r+0x438>
 800b5e2:	4ac3      	ldr	r2, [pc, #780]	@ (800b8f0 <_dtoa_r+0x610>)
 800b5e4:	ed92 6b08 	vldr	d6, [r2, #32]
 800b5e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b5ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b5f0:	f001 010f 	and.w	r1, r1, #15
 800b5f4:	2203      	movs	r2, #3
 800b5f6:	48be      	ldr	r0, [pc, #760]	@ (800b8f0 <_dtoa_r+0x610>)
 800b5f8:	2900      	cmp	r1, #0
 800b5fa:	f040 808f 	bne.w	800b71c <_dtoa_r+0x43c>
 800b5fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b602:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b606:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b60a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b60c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b610:	2900      	cmp	r1, #0
 800b612:	f000 80b3 	beq.w	800b77c <_dtoa_r+0x49c>
 800b616:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b61a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b622:	f140 80ab 	bpl.w	800b77c <_dtoa_r+0x49c>
 800b626:	f1ba 0f00 	cmp.w	sl, #0
 800b62a:	f000 80a7 	beq.w	800b77c <_dtoa_r+0x49c>
 800b62e:	f1bb 0f00 	cmp.w	fp, #0
 800b632:	dd30      	ble.n	800b696 <_dtoa_r+0x3b6>
 800b634:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b638:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b63c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b640:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b644:	9105      	str	r1, [sp, #20]
 800b646:	3201      	adds	r2, #1
 800b648:	465c      	mov	r4, fp
 800b64a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b64e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b652:	ee07 2a90 	vmov	s15, r2
 800b656:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b65a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b65e:	ee15 2a90 	vmov	r2, s11
 800b662:	ec51 0b15 	vmov	r0, r1, d5
 800b666:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b66a:	2c00      	cmp	r4, #0
 800b66c:	f040 808a 	bne.w	800b784 <_dtoa_r+0x4a4>
 800b670:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b674:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b678:	ec41 0b17 	vmov	d7, r0, r1
 800b67c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b684:	f300 826a 	bgt.w	800bb5c <_dtoa_r+0x87c>
 800b688:	eeb1 7b47 	vneg.f64	d7, d7
 800b68c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b694:	d423      	bmi.n	800b6de <_dtoa_r+0x3fe>
 800b696:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b69a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	f2c0 8129 	blt.w	800b8f4 <_dtoa_r+0x614>
 800b6a2:	f1b8 0f0e 	cmp.w	r8, #14
 800b6a6:	f300 8125 	bgt.w	800b8f4 <_dtoa_r+0x614>
 800b6aa:	4b90      	ldr	r3, [pc, #576]	@ (800b8ec <_dtoa_r+0x60c>)
 800b6ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b6b0:	ed93 6b00 	vldr	d6, [r3]
 800b6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f280 80c8 	bge.w	800b84c <_dtoa_r+0x56c>
 800b6bc:	f1ba 0f00 	cmp.w	sl, #0
 800b6c0:	f300 80c4 	bgt.w	800b84c <_dtoa_r+0x56c>
 800b6c4:	d10b      	bne.n	800b6de <_dtoa_r+0x3fe>
 800b6c6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b6ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b6ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6da:	f2c0 823c 	blt.w	800bb56 <_dtoa_r+0x876>
 800b6de:	2400      	movs	r4, #0
 800b6e0:	4625      	mov	r5, r4
 800b6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e4:	43db      	mvns	r3, r3
 800b6e6:	9305      	str	r3, [sp, #20]
 800b6e8:	463e      	mov	r6, r7
 800b6ea:	f04f 0800 	mov.w	r8, #0
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4648      	mov	r0, r9
 800b6f2:	f001 f997 	bl	800ca24 <_Bfree>
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	f000 80a2 	beq.w	800b840 <_dtoa_r+0x560>
 800b6fc:	f1b8 0f00 	cmp.w	r8, #0
 800b700:	d005      	beq.n	800b70e <_dtoa_r+0x42e>
 800b702:	45a8      	cmp	r8, r5
 800b704:	d003      	beq.n	800b70e <_dtoa_r+0x42e>
 800b706:	4641      	mov	r1, r8
 800b708:	4648      	mov	r0, r9
 800b70a:	f001 f98b 	bl	800ca24 <_Bfree>
 800b70e:	4629      	mov	r1, r5
 800b710:	4648      	mov	r0, r9
 800b712:	f001 f987 	bl	800ca24 <_Bfree>
 800b716:	e093      	b.n	800b840 <_dtoa_r+0x560>
 800b718:	2202      	movs	r2, #2
 800b71a:	e76c      	b.n	800b5f6 <_dtoa_r+0x316>
 800b71c:	07cc      	lsls	r4, r1, #31
 800b71e:	d504      	bpl.n	800b72a <_dtoa_r+0x44a>
 800b720:	ed90 6b00 	vldr	d6, [r0]
 800b724:	3201      	adds	r2, #1
 800b726:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b72a:	1049      	asrs	r1, r1, #1
 800b72c:	3008      	adds	r0, #8
 800b72e:	e763      	b.n	800b5f8 <_dtoa_r+0x318>
 800b730:	d022      	beq.n	800b778 <_dtoa_r+0x498>
 800b732:	f1c8 0100 	rsb	r1, r8, #0
 800b736:	4a6d      	ldr	r2, [pc, #436]	@ (800b8ec <_dtoa_r+0x60c>)
 800b738:	f001 000f 	and.w	r0, r1, #15
 800b73c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b740:	ed92 7b00 	vldr	d7, [r2]
 800b744:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b748:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b74c:	4868      	ldr	r0, [pc, #416]	@ (800b8f0 <_dtoa_r+0x610>)
 800b74e:	1109      	asrs	r1, r1, #4
 800b750:	2400      	movs	r4, #0
 800b752:	2202      	movs	r2, #2
 800b754:	b929      	cbnz	r1, 800b762 <_dtoa_r+0x482>
 800b756:	2c00      	cmp	r4, #0
 800b758:	f43f af57 	beq.w	800b60a <_dtoa_r+0x32a>
 800b75c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b760:	e753      	b.n	800b60a <_dtoa_r+0x32a>
 800b762:	07ce      	lsls	r6, r1, #31
 800b764:	d505      	bpl.n	800b772 <_dtoa_r+0x492>
 800b766:	ed90 6b00 	vldr	d6, [r0]
 800b76a:	3201      	adds	r2, #1
 800b76c:	2401      	movs	r4, #1
 800b76e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b772:	1049      	asrs	r1, r1, #1
 800b774:	3008      	adds	r0, #8
 800b776:	e7ed      	b.n	800b754 <_dtoa_r+0x474>
 800b778:	2202      	movs	r2, #2
 800b77a:	e746      	b.n	800b60a <_dtoa_r+0x32a>
 800b77c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b780:	4654      	mov	r4, sl
 800b782:	e762      	b.n	800b64a <_dtoa_r+0x36a>
 800b784:	4a59      	ldr	r2, [pc, #356]	@ (800b8ec <_dtoa_r+0x60c>)
 800b786:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b78a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b78e:	9a08      	ldr	r2, [sp, #32]
 800b790:	ec41 0b17 	vmov	d7, r0, r1
 800b794:	443c      	add	r4, r7
 800b796:	b34a      	cbz	r2, 800b7ec <_dtoa_r+0x50c>
 800b798:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b79c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b7a0:	463e      	mov	r6, r7
 800b7a2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b7a6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b7aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b7ae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b7b2:	ee14 2a90 	vmov	r2, s9
 800b7b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b7ba:	3230      	adds	r2, #48	@ 0x30
 800b7bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b7c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c8:	f806 2b01 	strb.w	r2, [r6], #1
 800b7cc:	d438      	bmi.n	800b840 <_dtoa_r+0x560>
 800b7ce:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b7d2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7da:	d46e      	bmi.n	800b8ba <_dtoa_r+0x5da>
 800b7dc:	42a6      	cmp	r6, r4
 800b7de:	f43f af5a 	beq.w	800b696 <_dtoa_r+0x3b6>
 800b7e2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b7e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b7ea:	e7e0      	b.n	800b7ae <_dtoa_r+0x4ce>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	463e      	mov	r6, r7
 800b7f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7f4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b7f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b7fc:	ee14 2a90 	vmov	r2, s9
 800b800:	3230      	adds	r2, #48	@ 0x30
 800b802:	f806 2b01 	strb.w	r2, [r6], #1
 800b806:	42a6      	cmp	r6, r4
 800b808:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b80c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b810:	d119      	bne.n	800b846 <_dtoa_r+0x566>
 800b812:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b816:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b81a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b822:	dc4a      	bgt.n	800b8ba <_dtoa_r+0x5da>
 800b824:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b828:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b830:	f57f af31 	bpl.w	800b696 <_dtoa_r+0x3b6>
 800b834:	460e      	mov	r6, r1
 800b836:	3901      	subs	r1, #1
 800b838:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b83c:	2b30      	cmp	r3, #48	@ 0x30
 800b83e:	d0f9      	beq.n	800b834 <_dtoa_r+0x554>
 800b840:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b844:	e027      	b.n	800b896 <_dtoa_r+0x5b6>
 800b846:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b84a:	e7d5      	b.n	800b7f8 <_dtoa_r+0x518>
 800b84c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b850:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b854:	463e      	mov	r6, r7
 800b856:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b85a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b85e:	ee15 3a10 	vmov	r3, s10
 800b862:	3330      	adds	r3, #48	@ 0x30
 800b864:	f806 3b01 	strb.w	r3, [r6], #1
 800b868:	1bf3      	subs	r3, r6, r7
 800b86a:	459a      	cmp	sl, r3
 800b86c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b870:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b874:	d132      	bne.n	800b8dc <_dtoa_r+0x5fc>
 800b876:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b87a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b882:	dc18      	bgt.n	800b8b6 <_dtoa_r+0x5d6>
 800b884:	eeb4 7b46 	vcmp.f64	d7, d6
 800b888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b88c:	d103      	bne.n	800b896 <_dtoa_r+0x5b6>
 800b88e:	ee15 3a10 	vmov	r3, s10
 800b892:	07db      	lsls	r3, r3, #31
 800b894:	d40f      	bmi.n	800b8b6 <_dtoa_r+0x5d6>
 800b896:	9901      	ldr	r1, [sp, #4]
 800b898:	4648      	mov	r0, r9
 800b89a:	f001 f8c3 	bl	800ca24 <_Bfree>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8a2:	7033      	strb	r3, [r6, #0]
 800b8a4:	f108 0301 	add.w	r3, r8, #1
 800b8a8:	6013      	str	r3, [r2, #0]
 800b8aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 824b 	beq.w	800bd48 <_dtoa_r+0xa68>
 800b8b2:	601e      	str	r6, [r3, #0]
 800b8b4:	e248      	b.n	800bd48 <_dtoa_r+0xa68>
 800b8b6:	f8cd 8014 	str.w	r8, [sp, #20]
 800b8ba:	4633      	mov	r3, r6
 800b8bc:	461e      	mov	r6, r3
 800b8be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8c2:	2a39      	cmp	r2, #57	@ 0x39
 800b8c4:	d106      	bne.n	800b8d4 <_dtoa_r+0x5f4>
 800b8c6:	429f      	cmp	r7, r3
 800b8c8:	d1f8      	bne.n	800b8bc <_dtoa_r+0x5dc>
 800b8ca:	9a05      	ldr	r2, [sp, #20]
 800b8cc:	3201      	adds	r2, #1
 800b8ce:	9205      	str	r2, [sp, #20]
 800b8d0:	2230      	movs	r2, #48	@ 0x30
 800b8d2:	703a      	strb	r2, [r7, #0]
 800b8d4:	781a      	ldrb	r2, [r3, #0]
 800b8d6:	3201      	adds	r2, #1
 800b8d8:	701a      	strb	r2, [r3, #0]
 800b8da:	e7b1      	b.n	800b840 <_dtoa_r+0x560>
 800b8dc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b8e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e8:	d1b5      	bne.n	800b856 <_dtoa_r+0x576>
 800b8ea:	e7d4      	b.n	800b896 <_dtoa_r+0x5b6>
 800b8ec:	0800ea00 	.word	0x0800ea00
 800b8f0:	0800e9d8 	.word	0x0800e9d8
 800b8f4:	9908      	ldr	r1, [sp, #32]
 800b8f6:	2900      	cmp	r1, #0
 800b8f8:	f000 80e9 	beq.w	800bace <_dtoa_r+0x7ee>
 800b8fc:	9907      	ldr	r1, [sp, #28]
 800b8fe:	2901      	cmp	r1, #1
 800b900:	f300 80cb 	bgt.w	800ba9a <_dtoa_r+0x7ba>
 800b904:	2d00      	cmp	r5, #0
 800b906:	f000 80c4 	beq.w	800ba92 <_dtoa_r+0x7b2>
 800b90a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b90e:	9e04      	ldr	r6, [sp, #16]
 800b910:	461c      	mov	r4, r3
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	9b04      	ldr	r3, [sp, #16]
 800b916:	4413      	add	r3, r2
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	9b06      	ldr	r3, [sp, #24]
 800b91c:	2101      	movs	r1, #1
 800b91e:	4413      	add	r3, r2
 800b920:	4648      	mov	r0, r9
 800b922:	9306      	str	r3, [sp, #24]
 800b924:	f001 f97c 	bl	800cc20 <__i2b>
 800b928:	9b05      	ldr	r3, [sp, #20]
 800b92a:	4605      	mov	r5, r0
 800b92c:	b166      	cbz	r6, 800b948 <_dtoa_r+0x668>
 800b92e:	9a06      	ldr	r2, [sp, #24]
 800b930:	2a00      	cmp	r2, #0
 800b932:	dd09      	ble.n	800b948 <_dtoa_r+0x668>
 800b934:	42b2      	cmp	r2, r6
 800b936:	9904      	ldr	r1, [sp, #16]
 800b938:	bfa8      	it	ge
 800b93a:	4632      	movge	r2, r6
 800b93c:	1a89      	subs	r1, r1, r2
 800b93e:	9104      	str	r1, [sp, #16]
 800b940:	9906      	ldr	r1, [sp, #24]
 800b942:	1ab6      	subs	r6, r6, r2
 800b944:	1a8a      	subs	r2, r1, r2
 800b946:	9206      	str	r2, [sp, #24]
 800b948:	b30b      	cbz	r3, 800b98e <_dtoa_r+0x6ae>
 800b94a:	9a08      	ldr	r2, [sp, #32]
 800b94c:	2a00      	cmp	r2, #0
 800b94e:	f000 80c5 	beq.w	800badc <_dtoa_r+0x7fc>
 800b952:	2c00      	cmp	r4, #0
 800b954:	f000 80bf 	beq.w	800bad6 <_dtoa_r+0x7f6>
 800b958:	4629      	mov	r1, r5
 800b95a:	4622      	mov	r2, r4
 800b95c:	4648      	mov	r0, r9
 800b95e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b960:	f001 fa16 	bl	800cd90 <__pow5mult>
 800b964:	9a01      	ldr	r2, [sp, #4]
 800b966:	4601      	mov	r1, r0
 800b968:	4605      	mov	r5, r0
 800b96a:	4648      	mov	r0, r9
 800b96c:	f001 f96e 	bl	800cc4c <__multiply>
 800b970:	9901      	ldr	r1, [sp, #4]
 800b972:	9005      	str	r0, [sp, #20]
 800b974:	4648      	mov	r0, r9
 800b976:	f001 f855 	bl	800ca24 <_Bfree>
 800b97a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b97c:	1b1b      	subs	r3, r3, r4
 800b97e:	f000 80b0 	beq.w	800bae2 <_dtoa_r+0x802>
 800b982:	9905      	ldr	r1, [sp, #20]
 800b984:	461a      	mov	r2, r3
 800b986:	4648      	mov	r0, r9
 800b988:	f001 fa02 	bl	800cd90 <__pow5mult>
 800b98c:	9001      	str	r0, [sp, #4]
 800b98e:	2101      	movs	r1, #1
 800b990:	4648      	mov	r0, r9
 800b992:	f001 f945 	bl	800cc20 <__i2b>
 800b996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b998:	4604      	mov	r4, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 81da 	beq.w	800bd54 <_dtoa_r+0xa74>
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4601      	mov	r1, r0
 800b9a4:	4648      	mov	r0, r9
 800b9a6:	f001 f9f3 	bl	800cd90 <__pow5mult>
 800b9aa:	9b07      	ldr	r3, [sp, #28]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	f300 80a0 	bgt.w	800baf4 <_dtoa_r+0x814>
 800b9b4:	9b02      	ldr	r3, [sp, #8]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f040 8096 	bne.w	800bae8 <_dtoa_r+0x808>
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b9c2:	2a00      	cmp	r2, #0
 800b9c4:	f040 8092 	bne.w	800baec <_dtoa_r+0x80c>
 800b9c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b9cc:	0d12      	lsrs	r2, r2, #20
 800b9ce:	0512      	lsls	r2, r2, #20
 800b9d0:	2a00      	cmp	r2, #0
 800b9d2:	f000 808d 	beq.w	800baf0 <_dtoa_r+0x810>
 800b9d6:	9b04      	ldr	r3, [sp, #16]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	9b06      	ldr	r3, [sp, #24]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	9306      	str	r3, [sp, #24]
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 81b9 	beq.w	800bd60 <_dtoa_r+0xa80>
 800b9ee:	6922      	ldr	r2, [r4, #16]
 800b9f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b9f4:	6910      	ldr	r0, [r2, #16]
 800b9f6:	f001 f8c7 	bl	800cb88 <__hi0bits>
 800b9fa:	f1c0 0020 	rsb	r0, r0, #32
 800b9fe:	9b06      	ldr	r3, [sp, #24]
 800ba00:	4418      	add	r0, r3
 800ba02:	f010 001f 	ands.w	r0, r0, #31
 800ba06:	f000 8081 	beq.w	800bb0c <_dtoa_r+0x82c>
 800ba0a:	f1c0 0220 	rsb	r2, r0, #32
 800ba0e:	2a04      	cmp	r2, #4
 800ba10:	dd73      	ble.n	800bafa <_dtoa_r+0x81a>
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	f1c0 001c 	rsb	r0, r0, #28
 800ba18:	4403      	add	r3, r0
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	9b06      	ldr	r3, [sp, #24]
 800ba1e:	4406      	add	r6, r0
 800ba20:	4403      	add	r3, r0
 800ba22:	9306      	str	r3, [sp, #24]
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dd05      	ble.n	800ba36 <_dtoa_r+0x756>
 800ba2a:	9901      	ldr	r1, [sp, #4]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	4648      	mov	r0, r9
 800ba30:	f001 fa08 	bl	800ce44 <__lshift>
 800ba34:	9001      	str	r0, [sp, #4]
 800ba36:	9b06      	ldr	r3, [sp, #24]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dd05      	ble.n	800ba48 <_dtoa_r+0x768>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	461a      	mov	r2, r3
 800ba40:	4648      	mov	r0, r9
 800ba42:	f001 f9ff 	bl	800ce44 <__lshift>
 800ba46:	4604      	mov	r4, r0
 800ba48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d060      	beq.n	800bb10 <_dtoa_r+0x830>
 800ba4e:	9801      	ldr	r0, [sp, #4]
 800ba50:	4621      	mov	r1, r4
 800ba52:	f001 fa63 	bl	800cf1c <__mcmp>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	da5a      	bge.n	800bb10 <_dtoa_r+0x830>
 800ba5a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	9901      	ldr	r1, [sp, #4]
 800ba62:	2300      	movs	r3, #0
 800ba64:	220a      	movs	r2, #10
 800ba66:	4648      	mov	r0, r9
 800ba68:	f000 fffe 	bl	800ca68 <__multadd>
 800ba6c:	9b08      	ldr	r3, [sp, #32]
 800ba6e:	9001      	str	r0, [sp, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 8177 	beq.w	800bd64 <_dtoa_r+0xa84>
 800ba76:	4629      	mov	r1, r5
 800ba78:	2300      	movs	r3, #0
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	4648      	mov	r0, r9
 800ba7e:	f000 fff3 	bl	800ca68 <__multadd>
 800ba82:	f1bb 0f00 	cmp.w	fp, #0
 800ba86:	4605      	mov	r5, r0
 800ba88:	dc6e      	bgt.n	800bb68 <_dtoa_r+0x888>
 800ba8a:	9b07      	ldr	r3, [sp, #28]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	dc48      	bgt.n	800bb22 <_dtoa_r+0x842>
 800ba90:	e06a      	b.n	800bb68 <_dtoa_r+0x888>
 800ba92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba98:	e739      	b.n	800b90e <_dtoa_r+0x62e>
 800ba9a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800ba9e:	42a3      	cmp	r3, r4
 800baa0:	db07      	blt.n	800bab2 <_dtoa_r+0x7d2>
 800baa2:	f1ba 0f00 	cmp.w	sl, #0
 800baa6:	eba3 0404 	sub.w	r4, r3, r4
 800baaa:	db0b      	blt.n	800bac4 <_dtoa_r+0x7e4>
 800baac:	9e04      	ldr	r6, [sp, #16]
 800baae:	4652      	mov	r2, sl
 800bab0:	e72f      	b.n	800b912 <_dtoa_r+0x632>
 800bab2:	1ae2      	subs	r2, r4, r3
 800bab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bab6:	9e04      	ldr	r6, [sp, #16]
 800bab8:	4413      	add	r3, r2
 800baba:	930a      	str	r3, [sp, #40]	@ 0x28
 800babc:	4652      	mov	r2, sl
 800babe:	4623      	mov	r3, r4
 800bac0:	2400      	movs	r4, #0
 800bac2:	e726      	b.n	800b912 <_dtoa_r+0x632>
 800bac4:	9a04      	ldr	r2, [sp, #16]
 800bac6:	eba2 060a 	sub.w	r6, r2, sl
 800baca:	2200      	movs	r2, #0
 800bacc:	e721      	b.n	800b912 <_dtoa_r+0x632>
 800bace:	9e04      	ldr	r6, [sp, #16]
 800bad0:	9d08      	ldr	r5, [sp, #32]
 800bad2:	461c      	mov	r4, r3
 800bad4:	e72a      	b.n	800b92c <_dtoa_r+0x64c>
 800bad6:	9a01      	ldr	r2, [sp, #4]
 800bad8:	9205      	str	r2, [sp, #20]
 800bada:	e752      	b.n	800b982 <_dtoa_r+0x6a2>
 800badc:	9901      	ldr	r1, [sp, #4]
 800bade:	461a      	mov	r2, r3
 800bae0:	e751      	b.n	800b986 <_dtoa_r+0x6a6>
 800bae2:	9b05      	ldr	r3, [sp, #20]
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	e752      	b.n	800b98e <_dtoa_r+0x6ae>
 800bae8:	2300      	movs	r3, #0
 800baea:	e77b      	b.n	800b9e4 <_dtoa_r+0x704>
 800baec:	9b02      	ldr	r3, [sp, #8]
 800baee:	e779      	b.n	800b9e4 <_dtoa_r+0x704>
 800baf0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800baf2:	e778      	b.n	800b9e6 <_dtoa_r+0x706>
 800baf4:	2300      	movs	r3, #0
 800baf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baf8:	e779      	b.n	800b9ee <_dtoa_r+0x70e>
 800bafa:	d093      	beq.n	800ba24 <_dtoa_r+0x744>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	321c      	adds	r2, #28
 800bb00:	4413      	add	r3, r2
 800bb02:	9304      	str	r3, [sp, #16]
 800bb04:	9b06      	ldr	r3, [sp, #24]
 800bb06:	4416      	add	r6, r2
 800bb08:	4413      	add	r3, r2
 800bb0a:	e78a      	b.n	800ba22 <_dtoa_r+0x742>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	e7f5      	b.n	800bafc <_dtoa_r+0x81c>
 800bb10:	f1ba 0f00 	cmp.w	sl, #0
 800bb14:	f8cd 8014 	str.w	r8, [sp, #20]
 800bb18:	46d3      	mov	fp, sl
 800bb1a:	dc21      	bgt.n	800bb60 <_dtoa_r+0x880>
 800bb1c:	9b07      	ldr	r3, [sp, #28]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	dd1e      	ble.n	800bb60 <_dtoa_r+0x880>
 800bb22:	f1bb 0f00 	cmp.w	fp, #0
 800bb26:	f47f addc 	bne.w	800b6e2 <_dtoa_r+0x402>
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	465b      	mov	r3, fp
 800bb2e:	2205      	movs	r2, #5
 800bb30:	4648      	mov	r0, r9
 800bb32:	f000 ff99 	bl	800ca68 <__multadd>
 800bb36:	4601      	mov	r1, r0
 800bb38:	4604      	mov	r4, r0
 800bb3a:	9801      	ldr	r0, [sp, #4]
 800bb3c:	f001 f9ee 	bl	800cf1c <__mcmp>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	f77f adce 	ble.w	800b6e2 <_dtoa_r+0x402>
 800bb46:	463e      	mov	r6, r7
 800bb48:	2331      	movs	r3, #49	@ 0x31
 800bb4a:	f806 3b01 	strb.w	r3, [r6], #1
 800bb4e:	9b05      	ldr	r3, [sp, #20]
 800bb50:	3301      	adds	r3, #1
 800bb52:	9305      	str	r3, [sp, #20]
 800bb54:	e5c9      	b.n	800b6ea <_dtoa_r+0x40a>
 800bb56:	f8cd 8014 	str.w	r8, [sp, #20]
 800bb5a:	4654      	mov	r4, sl
 800bb5c:	4625      	mov	r5, r4
 800bb5e:	e7f2      	b.n	800bb46 <_dtoa_r+0x866>
 800bb60:	9b08      	ldr	r3, [sp, #32]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 8102 	beq.w	800bd6c <_dtoa_r+0xa8c>
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	dd05      	ble.n	800bb78 <_dtoa_r+0x898>
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	4632      	mov	r2, r6
 800bb70:	4648      	mov	r0, r9
 800bb72:	f001 f967 	bl	800ce44 <__lshift>
 800bb76:	4605      	mov	r5, r0
 800bb78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d058      	beq.n	800bc30 <_dtoa_r+0x950>
 800bb7e:	6869      	ldr	r1, [r5, #4]
 800bb80:	4648      	mov	r0, r9
 800bb82:	f000 ff0f 	bl	800c9a4 <_Balloc>
 800bb86:	4606      	mov	r6, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <_dtoa_r+0x8b6>
 800bb8a:	4b82      	ldr	r3, [pc, #520]	@ (800bd94 <_dtoa_r+0xab4>)
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb92:	f7ff bbbe 	b.w	800b312 <_dtoa_r+0x32>
 800bb96:	692a      	ldr	r2, [r5, #16]
 800bb98:	3202      	adds	r2, #2
 800bb9a:	0092      	lsls	r2, r2, #2
 800bb9c:	f105 010c 	add.w	r1, r5, #12
 800bba0:	300c      	adds	r0, #12
 800bba2:	f7ff faf7 	bl	800b194 <memcpy>
 800bba6:	2201      	movs	r2, #1
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4648      	mov	r0, r9
 800bbac:	f001 f94a 	bl	800ce44 <__lshift>
 800bbb0:	1c7b      	adds	r3, r7, #1
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	eb07 030b 	add.w	r3, r7, fp
 800bbb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbba:	9b02      	ldr	r3, [sp, #8]
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	46a8      	mov	r8, r5
 800bbc2:	9308      	str	r3, [sp, #32]
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	9b04      	ldr	r3, [sp, #16]
 800bbc8:	9801      	ldr	r0, [sp, #4]
 800bbca:	4621      	mov	r1, r4
 800bbcc:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bbd0:	f7ff fafc 	bl	800b1cc <quorem>
 800bbd4:	4641      	mov	r1, r8
 800bbd6:	9002      	str	r0, [sp, #8]
 800bbd8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bbdc:	9801      	ldr	r0, [sp, #4]
 800bbde:	f001 f99d 	bl	800cf1c <__mcmp>
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	9006      	str	r0, [sp, #24]
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4648      	mov	r0, r9
 800bbea:	f001 f9b3 	bl	800cf54 <__mdiff>
 800bbee:	68c2      	ldr	r2, [r0, #12]
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	b9fa      	cbnz	r2, 800bc34 <_dtoa_r+0x954>
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	9801      	ldr	r0, [sp, #4]
 800bbf8:	f001 f990 	bl	800cf1c <__mcmp>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	4631      	mov	r1, r6
 800bc00:	4648      	mov	r0, r9
 800bc02:	920a      	str	r2, [sp, #40]	@ 0x28
 800bc04:	f000 ff0e 	bl	800ca24 <_Bfree>
 800bc08:	9b07      	ldr	r3, [sp, #28]
 800bc0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc0c:	9e04      	ldr	r6, [sp, #16]
 800bc0e:	ea42 0103 	orr.w	r1, r2, r3
 800bc12:	9b08      	ldr	r3, [sp, #32]
 800bc14:	4319      	orrs	r1, r3
 800bc16:	d10f      	bne.n	800bc38 <_dtoa_r+0x958>
 800bc18:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc1c:	d028      	beq.n	800bc70 <_dtoa_r+0x990>
 800bc1e:	9b06      	ldr	r3, [sp, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	dd02      	ble.n	800bc2a <_dtoa_r+0x94a>
 800bc24:	9b02      	ldr	r3, [sp, #8]
 800bc26:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bc2a:	f88b a000 	strb.w	sl, [fp]
 800bc2e:	e55e      	b.n	800b6ee <_dtoa_r+0x40e>
 800bc30:	4628      	mov	r0, r5
 800bc32:	e7bd      	b.n	800bbb0 <_dtoa_r+0x8d0>
 800bc34:	2201      	movs	r2, #1
 800bc36:	e7e2      	b.n	800bbfe <_dtoa_r+0x91e>
 800bc38:	9b06      	ldr	r3, [sp, #24]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	db04      	blt.n	800bc48 <_dtoa_r+0x968>
 800bc3e:	9907      	ldr	r1, [sp, #28]
 800bc40:	430b      	orrs	r3, r1
 800bc42:	9908      	ldr	r1, [sp, #32]
 800bc44:	430b      	orrs	r3, r1
 800bc46:	d120      	bne.n	800bc8a <_dtoa_r+0x9aa>
 800bc48:	2a00      	cmp	r2, #0
 800bc4a:	ddee      	ble.n	800bc2a <_dtoa_r+0x94a>
 800bc4c:	9901      	ldr	r1, [sp, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	4648      	mov	r0, r9
 800bc52:	f001 f8f7 	bl	800ce44 <__lshift>
 800bc56:	4621      	mov	r1, r4
 800bc58:	9001      	str	r0, [sp, #4]
 800bc5a:	f001 f95f 	bl	800cf1c <__mcmp>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	dc03      	bgt.n	800bc6a <_dtoa_r+0x98a>
 800bc62:	d1e2      	bne.n	800bc2a <_dtoa_r+0x94a>
 800bc64:	f01a 0f01 	tst.w	sl, #1
 800bc68:	d0df      	beq.n	800bc2a <_dtoa_r+0x94a>
 800bc6a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc6e:	d1d9      	bne.n	800bc24 <_dtoa_r+0x944>
 800bc70:	2339      	movs	r3, #57	@ 0x39
 800bc72:	f88b 3000 	strb.w	r3, [fp]
 800bc76:	4633      	mov	r3, r6
 800bc78:	461e      	mov	r6, r3
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc80:	2a39      	cmp	r2, #57	@ 0x39
 800bc82:	d052      	beq.n	800bd2a <_dtoa_r+0xa4a>
 800bc84:	3201      	adds	r2, #1
 800bc86:	701a      	strb	r2, [r3, #0]
 800bc88:	e531      	b.n	800b6ee <_dtoa_r+0x40e>
 800bc8a:	2a00      	cmp	r2, #0
 800bc8c:	dd07      	ble.n	800bc9e <_dtoa_r+0x9be>
 800bc8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc92:	d0ed      	beq.n	800bc70 <_dtoa_r+0x990>
 800bc94:	f10a 0301 	add.w	r3, sl, #1
 800bc98:	f88b 3000 	strb.w	r3, [fp]
 800bc9c:	e527      	b.n	800b6ee <_dtoa_r+0x40e>
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bca2:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d029      	beq.n	800bcfe <_dtoa_r+0xa1e>
 800bcaa:	9901      	ldr	r1, [sp, #4]
 800bcac:	2300      	movs	r3, #0
 800bcae:	220a      	movs	r2, #10
 800bcb0:	4648      	mov	r0, r9
 800bcb2:	f000 fed9 	bl	800ca68 <__multadd>
 800bcb6:	45a8      	cmp	r8, r5
 800bcb8:	9001      	str	r0, [sp, #4]
 800bcba:	f04f 0300 	mov.w	r3, #0
 800bcbe:	f04f 020a 	mov.w	r2, #10
 800bcc2:	4641      	mov	r1, r8
 800bcc4:	4648      	mov	r0, r9
 800bcc6:	d107      	bne.n	800bcd8 <_dtoa_r+0x9f8>
 800bcc8:	f000 fece 	bl	800ca68 <__multadd>
 800bccc:	4680      	mov	r8, r0
 800bcce:	4605      	mov	r5, r0
 800bcd0:	9b04      	ldr	r3, [sp, #16]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	9304      	str	r3, [sp, #16]
 800bcd6:	e776      	b.n	800bbc6 <_dtoa_r+0x8e6>
 800bcd8:	f000 fec6 	bl	800ca68 <__multadd>
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4680      	mov	r8, r0
 800bce0:	2300      	movs	r3, #0
 800bce2:	220a      	movs	r2, #10
 800bce4:	4648      	mov	r0, r9
 800bce6:	f000 febf 	bl	800ca68 <__multadd>
 800bcea:	4605      	mov	r5, r0
 800bcec:	e7f0      	b.n	800bcd0 <_dtoa_r+0x9f0>
 800bcee:	f1bb 0f00 	cmp.w	fp, #0
 800bcf2:	bfcc      	ite	gt
 800bcf4:	465e      	movgt	r6, fp
 800bcf6:	2601      	movle	r6, #1
 800bcf8:	443e      	add	r6, r7
 800bcfa:	f04f 0800 	mov.w	r8, #0
 800bcfe:	9901      	ldr	r1, [sp, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	4648      	mov	r0, r9
 800bd04:	f001 f89e 	bl	800ce44 <__lshift>
 800bd08:	4621      	mov	r1, r4
 800bd0a:	9001      	str	r0, [sp, #4]
 800bd0c:	f001 f906 	bl	800cf1c <__mcmp>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	dcb0      	bgt.n	800bc76 <_dtoa_r+0x996>
 800bd14:	d102      	bne.n	800bd1c <_dtoa_r+0xa3c>
 800bd16:	f01a 0f01 	tst.w	sl, #1
 800bd1a:	d1ac      	bne.n	800bc76 <_dtoa_r+0x996>
 800bd1c:	4633      	mov	r3, r6
 800bd1e:	461e      	mov	r6, r3
 800bd20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd24:	2a30      	cmp	r2, #48	@ 0x30
 800bd26:	d0fa      	beq.n	800bd1e <_dtoa_r+0xa3e>
 800bd28:	e4e1      	b.n	800b6ee <_dtoa_r+0x40e>
 800bd2a:	429f      	cmp	r7, r3
 800bd2c:	d1a4      	bne.n	800bc78 <_dtoa_r+0x998>
 800bd2e:	9b05      	ldr	r3, [sp, #20]
 800bd30:	3301      	adds	r3, #1
 800bd32:	9305      	str	r3, [sp, #20]
 800bd34:	2331      	movs	r3, #49	@ 0x31
 800bd36:	703b      	strb	r3, [r7, #0]
 800bd38:	e4d9      	b.n	800b6ee <_dtoa_r+0x40e>
 800bd3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bd3c:	4f16      	ldr	r7, [pc, #88]	@ (800bd98 <_dtoa_r+0xab8>)
 800bd3e:	b11b      	cbz	r3, 800bd48 <_dtoa_r+0xa68>
 800bd40:	f107 0308 	add.w	r3, r7, #8
 800bd44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	4638      	mov	r0, r7
 800bd4a:	b011      	add	sp, #68	@ 0x44
 800bd4c:	ecbd 8b02 	vpop	{d8}
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	9b07      	ldr	r3, [sp, #28]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	f77f ae2c 	ble.w	800b9b4 <_dtoa_r+0x6d4>
 800bd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd60:	2001      	movs	r0, #1
 800bd62:	e64c      	b.n	800b9fe <_dtoa_r+0x71e>
 800bd64:	f1bb 0f00 	cmp.w	fp, #0
 800bd68:	f77f aed8 	ble.w	800bb1c <_dtoa_r+0x83c>
 800bd6c:	463e      	mov	r6, r7
 800bd6e:	9801      	ldr	r0, [sp, #4]
 800bd70:	4621      	mov	r1, r4
 800bd72:	f7ff fa2b 	bl	800b1cc <quorem>
 800bd76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bd7a:	f806 ab01 	strb.w	sl, [r6], #1
 800bd7e:	1bf2      	subs	r2, r6, r7
 800bd80:	4593      	cmp	fp, r2
 800bd82:	ddb4      	ble.n	800bcee <_dtoa_r+0xa0e>
 800bd84:	9901      	ldr	r1, [sp, #4]
 800bd86:	2300      	movs	r3, #0
 800bd88:	220a      	movs	r2, #10
 800bd8a:	4648      	mov	r0, r9
 800bd8c:	f000 fe6c 	bl	800ca68 <__multadd>
 800bd90:	9001      	str	r0, [sp, #4]
 800bd92:	e7ec      	b.n	800bd6e <_dtoa_r+0xa8e>
 800bd94:	0800e75f 	.word	0x0800e75f
 800bd98:	0800e6e3 	.word	0x0800e6e3

0800bd9c <rshift>:
 800bd9c:	6903      	ldr	r3, [r0, #16]
 800bd9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bda2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bda6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bdaa:	f100 0414 	add.w	r4, r0, #20
 800bdae:	dd45      	ble.n	800be3c <rshift+0xa0>
 800bdb0:	f011 011f 	ands.w	r1, r1, #31
 800bdb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bdb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bdbc:	d10c      	bne.n	800bdd8 <rshift+0x3c>
 800bdbe:	f100 0710 	add.w	r7, r0, #16
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	42b1      	cmp	r1, r6
 800bdc6:	d334      	bcc.n	800be32 <rshift+0x96>
 800bdc8:	1a9b      	subs	r3, r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	1eea      	subs	r2, r5, #3
 800bdce:	4296      	cmp	r6, r2
 800bdd0:	bf38      	it	cc
 800bdd2:	2300      	movcc	r3, #0
 800bdd4:	4423      	add	r3, r4
 800bdd6:	e015      	b.n	800be04 <rshift+0x68>
 800bdd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bddc:	f1c1 0820 	rsb	r8, r1, #32
 800bde0:	40cf      	lsrs	r7, r1
 800bde2:	f105 0e04 	add.w	lr, r5, #4
 800bde6:	46a1      	mov	r9, r4
 800bde8:	4576      	cmp	r6, lr
 800bdea:	46f4      	mov	ip, lr
 800bdec:	d815      	bhi.n	800be1a <rshift+0x7e>
 800bdee:	1a9a      	subs	r2, r3, r2
 800bdf0:	0092      	lsls	r2, r2, #2
 800bdf2:	3a04      	subs	r2, #4
 800bdf4:	3501      	adds	r5, #1
 800bdf6:	42ae      	cmp	r6, r5
 800bdf8:	bf38      	it	cc
 800bdfa:	2200      	movcc	r2, #0
 800bdfc:	18a3      	adds	r3, r4, r2
 800bdfe:	50a7      	str	r7, [r4, r2]
 800be00:	b107      	cbz	r7, 800be04 <rshift+0x68>
 800be02:	3304      	adds	r3, #4
 800be04:	1b1a      	subs	r2, r3, r4
 800be06:	42a3      	cmp	r3, r4
 800be08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be0c:	bf08      	it	eq
 800be0e:	2300      	moveq	r3, #0
 800be10:	6102      	str	r2, [r0, #16]
 800be12:	bf08      	it	eq
 800be14:	6143      	streq	r3, [r0, #20]
 800be16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be1a:	f8dc c000 	ldr.w	ip, [ip]
 800be1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800be22:	ea4c 0707 	orr.w	r7, ip, r7
 800be26:	f849 7b04 	str.w	r7, [r9], #4
 800be2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be2e:	40cf      	lsrs	r7, r1
 800be30:	e7da      	b.n	800bde8 <rshift+0x4c>
 800be32:	f851 cb04 	ldr.w	ip, [r1], #4
 800be36:	f847 cf04 	str.w	ip, [r7, #4]!
 800be3a:	e7c3      	b.n	800bdc4 <rshift+0x28>
 800be3c:	4623      	mov	r3, r4
 800be3e:	e7e1      	b.n	800be04 <rshift+0x68>

0800be40 <__hexdig_fun>:
 800be40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800be44:	2b09      	cmp	r3, #9
 800be46:	d802      	bhi.n	800be4e <__hexdig_fun+0xe>
 800be48:	3820      	subs	r0, #32
 800be4a:	b2c0      	uxtb	r0, r0
 800be4c:	4770      	bx	lr
 800be4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800be52:	2b05      	cmp	r3, #5
 800be54:	d801      	bhi.n	800be5a <__hexdig_fun+0x1a>
 800be56:	3847      	subs	r0, #71	@ 0x47
 800be58:	e7f7      	b.n	800be4a <__hexdig_fun+0xa>
 800be5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800be5e:	2b05      	cmp	r3, #5
 800be60:	d801      	bhi.n	800be66 <__hexdig_fun+0x26>
 800be62:	3827      	subs	r0, #39	@ 0x27
 800be64:	e7f1      	b.n	800be4a <__hexdig_fun+0xa>
 800be66:	2000      	movs	r0, #0
 800be68:	4770      	bx	lr
	...

0800be6c <__gethex>:
 800be6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be70:	b085      	sub	sp, #20
 800be72:	468a      	mov	sl, r1
 800be74:	9302      	str	r3, [sp, #8]
 800be76:	680b      	ldr	r3, [r1, #0]
 800be78:	9001      	str	r0, [sp, #4]
 800be7a:	4690      	mov	r8, r2
 800be7c:	1c9c      	adds	r4, r3, #2
 800be7e:	46a1      	mov	r9, r4
 800be80:	f814 0b01 	ldrb.w	r0, [r4], #1
 800be84:	2830      	cmp	r0, #48	@ 0x30
 800be86:	d0fa      	beq.n	800be7e <__gethex+0x12>
 800be88:	eba9 0303 	sub.w	r3, r9, r3
 800be8c:	f1a3 0b02 	sub.w	fp, r3, #2
 800be90:	f7ff ffd6 	bl	800be40 <__hexdig_fun>
 800be94:	4605      	mov	r5, r0
 800be96:	2800      	cmp	r0, #0
 800be98:	d168      	bne.n	800bf6c <__gethex+0x100>
 800be9a:	49a0      	ldr	r1, [pc, #640]	@ (800c11c <__gethex+0x2b0>)
 800be9c:	2201      	movs	r2, #1
 800be9e:	4648      	mov	r0, r9
 800bea0:	f7ff f934 	bl	800b10c <strncmp>
 800bea4:	4607      	mov	r7, r0
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d167      	bne.n	800bf7a <__gethex+0x10e>
 800beaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800beae:	4626      	mov	r6, r4
 800beb0:	f7ff ffc6 	bl	800be40 <__hexdig_fun>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d062      	beq.n	800bf7e <__gethex+0x112>
 800beb8:	4623      	mov	r3, r4
 800beba:	7818      	ldrb	r0, [r3, #0]
 800bebc:	2830      	cmp	r0, #48	@ 0x30
 800bebe:	4699      	mov	r9, r3
 800bec0:	f103 0301 	add.w	r3, r3, #1
 800bec4:	d0f9      	beq.n	800beba <__gethex+0x4e>
 800bec6:	f7ff ffbb 	bl	800be40 <__hexdig_fun>
 800beca:	fab0 f580 	clz	r5, r0
 800bece:	096d      	lsrs	r5, r5, #5
 800bed0:	f04f 0b01 	mov.w	fp, #1
 800bed4:	464a      	mov	r2, r9
 800bed6:	4616      	mov	r6, r2
 800bed8:	3201      	adds	r2, #1
 800beda:	7830      	ldrb	r0, [r6, #0]
 800bedc:	f7ff ffb0 	bl	800be40 <__hexdig_fun>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d1f8      	bne.n	800bed6 <__gethex+0x6a>
 800bee4:	498d      	ldr	r1, [pc, #564]	@ (800c11c <__gethex+0x2b0>)
 800bee6:	2201      	movs	r2, #1
 800bee8:	4630      	mov	r0, r6
 800beea:	f7ff f90f 	bl	800b10c <strncmp>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d13f      	bne.n	800bf72 <__gethex+0x106>
 800bef2:	b944      	cbnz	r4, 800bf06 <__gethex+0x9a>
 800bef4:	1c74      	adds	r4, r6, #1
 800bef6:	4622      	mov	r2, r4
 800bef8:	4616      	mov	r6, r2
 800befa:	3201      	adds	r2, #1
 800befc:	7830      	ldrb	r0, [r6, #0]
 800befe:	f7ff ff9f 	bl	800be40 <__hexdig_fun>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d1f8      	bne.n	800bef8 <__gethex+0x8c>
 800bf06:	1ba4      	subs	r4, r4, r6
 800bf08:	00a7      	lsls	r7, r4, #2
 800bf0a:	7833      	ldrb	r3, [r6, #0]
 800bf0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bf10:	2b50      	cmp	r3, #80	@ 0x50
 800bf12:	d13e      	bne.n	800bf92 <__gethex+0x126>
 800bf14:	7873      	ldrb	r3, [r6, #1]
 800bf16:	2b2b      	cmp	r3, #43	@ 0x2b
 800bf18:	d033      	beq.n	800bf82 <__gethex+0x116>
 800bf1a:	2b2d      	cmp	r3, #45	@ 0x2d
 800bf1c:	d034      	beq.n	800bf88 <__gethex+0x11c>
 800bf1e:	1c71      	adds	r1, r6, #1
 800bf20:	2400      	movs	r4, #0
 800bf22:	7808      	ldrb	r0, [r1, #0]
 800bf24:	f7ff ff8c 	bl	800be40 <__hexdig_fun>
 800bf28:	1e43      	subs	r3, r0, #1
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	2b18      	cmp	r3, #24
 800bf2e:	d830      	bhi.n	800bf92 <__gethex+0x126>
 800bf30:	f1a0 0210 	sub.w	r2, r0, #16
 800bf34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf38:	f7ff ff82 	bl	800be40 <__hexdig_fun>
 800bf3c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800bf40:	fa5f fc8c 	uxtb.w	ip, ip
 800bf44:	f1bc 0f18 	cmp.w	ip, #24
 800bf48:	f04f 030a 	mov.w	r3, #10
 800bf4c:	d91e      	bls.n	800bf8c <__gethex+0x120>
 800bf4e:	b104      	cbz	r4, 800bf52 <__gethex+0xe6>
 800bf50:	4252      	negs	r2, r2
 800bf52:	4417      	add	r7, r2
 800bf54:	f8ca 1000 	str.w	r1, [sl]
 800bf58:	b1ed      	cbz	r5, 800bf96 <__gethex+0x12a>
 800bf5a:	f1bb 0f00 	cmp.w	fp, #0
 800bf5e:	bf0c      	ite	eq
 800bf60:	2506      	moveq	r5, #6
 800bf62:	2500      	movne	r5, #0
 800bf64:	4628      	mov	r0, r5
 800bf66:	b005      	add	sp, #20
 800bf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6c:	2500      	movs	r5, #0
 800bf6e:	462c      	mov	r4, r5
 800bf70:	e7b0      	b.n	800bed4 <__gethex+0x68>
 800bf72:	2c00      	cmp	r4, #0
 800bf74:	d1c7      	bne.n	800bf06 <__gethex+0x9a>
 800bf76:	4627      	mov	r7, r4
 800bf78:	e7c7      	b.n	800bf0a <__gethex+0x9e>
 800bf7a:	464e      	mov	r6, r9
 800bf7c:	462f      	mov	r7, r5
 800bf7e:	2501      	movs	r5, #1
 800bf80:	e7c3      	b.n	800bf0a <__gethex+0x9e>
 800bf82:	2400      	movs	r4, #0
 800bf84:	1cb1      	adds	r1, r6, #2
 800bf86:	e7cc      	b.n	800bf22 <__gethex+0xb6>
 800bf88:	2401      	movs	r4, #1
 800bf8a:	e7fb      	b.n	800bf84 <__gethex+0x118>
 800bf8c:	fb03 0002 	mla	r0, r3, r2, r0
 800bf90:	e7ce      	b.n	800bf30 <__gethex+0xc4>
 800bf92:	4631      	mov	r1, r6
 800bf94:	e7de      	b.n	800bf54 <__gethex+0xe8>
 800bf96:	eba6 0309 	sub.w	r3, r6, r9
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	2b07      	cmp	r3, #7
 800bfa0:	dc0a      	bgt.n	800bfb8 <__gethex+0x14c>
 800bfa2:	9801      	ldr	r0, [sp, #4]
 800bfa4:	f000 fcfe 	bl	800c9a4 <_Balloc>
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	b940      	cbnz	r0, 800bfbe <__gethex+0x152>
 800bfac:	4b5c      	ldr	r3, [pc, #368]	@ (800c120 <__gethex+0x2b4>)
 800bfae:	4602      	mov	r2, r0
 800bfb0:	21e4      	movs	r1, #228	@ 0xe4
 800bfb2:	485c      	ldr	r0, [pc, #368]	@ (800c124 <__gethex+0x2b8>)
 800bfb4:	f001 fa8c 	bl	800d4d0 <__assert_func>
 800bfb8:	3101      	adds	r1, #1
 800bfba:	105b      	asrs	r3, r3, #1
 800bfbc:	e7ef      	b.n	800bf9e <__gethex+0x132>
 800bfbe:	f100 0a14 	add.w	sl, r0, #20
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	4655      	mov	r5, sl
 800bfc6:	469b      	mov	fp, r3
 800bfc8:	45b1      	cmp	r9, r6
 800bfca:	d337      	bcc.n	800c03c <__gethex+0x1d0>
 800bfcc:	f845 bb04 	str.w	fp, [r5], #4
 800bfd0:	eba5 050a 	sub.w	r5, r5, sl
 800bfd4:	10ad      	asrs	r5, r5, #2
 800bfd6:	6125      	str	r5, [r4, #16]
 800bfd8:	4658      	mov	r0, fp
 800bfda:	f000 fdd5 	bl	800cb88 <__hi0bits>
 800bfde:	016d      	lsls	r5, r5, #5
 800bfe0:	f8d8 6000 	ldr.w	r6, [r8]
 800bfe4:	1a2d      	subs	r5, r5, r0
 800bfe6:	42b5      	cmp	r5, r6
 800bfe8:	dd54      	ble.n	800c094 <__gethex+0x228>
 800bfea:	1bad      	subs	r5, r5, r6
 800bfec:	4629      	mov	r1, r5
 800bfee:	4620      	mov	r0, r4
 800bff0:	f001 f95e 	bl	800d2b0 <__any_on>
 800bff4:	4681      	mov	r9, r0
 800bff6:	b178      	cbz	r0, 800c018 <__gethex+0x1ac>
 800bff8:	1e6b      	subs	r3, r5, #1
 800bffa:	1159      	asrs	r1, r3, #5
 800bffc:	f003 021f 	and.w	r2, r3, #31
 800c000:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c004:	f04f 0901 	mov.w	r9, #1
 800c008:	fa09 f202 	lsl.w	r2, r9, r2
 800c00c:	420a      	tst	r2, r1
 800c00e:	d003      	beq.n	800c018 <__gethex+0x1ac>
 800c010:	454b      	cmp	r3, r9
 800c012:	dc36      	bgt.n	800c082 <__gethex+0x216>
 800c014:	f04f 0902 	mov.w	r9, #2
 800c018:	4629      	mov	r1, r5
 800c01a:	4620      	mov	r0, r4
 800c01c:	f7ff febe 	bl	800bd9c <rshift>
 800c020:	442f      	add	r7, r5
 800c022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c026:	42bb      	cmp	r3, r7
 800c028:	da42      	bge.n	800c0b0 <__gethex+0x244>
 800c02a:	9801      	ldr	r0, [sp, #4]
 800c02c:	4621      	mov	r1, r4
 800c02e:	f000 fcf9 	bl	800ca24 <_Bfree>
 800c032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c034:	2300      	movs	r3, #0
 800c036:	6013      	str	r3, [r2, #0]
 800c038:	25a3      	movs	r5, #163	@ 0xa3
 800c03a:	e793      	b.n	800bf64 <__gethex+0xf8>
 800c03c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c040:	2a2e      	cmp	r2, #46	@ 0x2e
 800c042:	d012      	beq.n	800c06a <__gethex+0x1fe>
 800c044:	2b20      	cmp	r3, #32
 800c046:	d104      	bne.n	800c052 <__gethex+0x1e6>
 800c048:	f845 bb04 	str.w	fp, [r5], #4
 800c04c:	f04f 0b00 	mov.w	fp, #0
 800c050:	465b      	mov	r3, fp
 800c052:	7830      	ldrb	r0, [r6, #0]
 800c054:	9303      	str	r3, [sp, #12]
 800c056:	f7ff fef3 	bl	800be40 <__hexdig_fun>
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	f000 000f 	and.w	r0, r0, #15
 800c060:	4098      	lsls	r0, r3
 800c062:	ea4b 0b00 	orr.w	fp, fp, r0
 800c066:	3304      	adds	r3, #4
 800c068:	e7ae      	b.n	800bfc8 <__gethex+0x15c>
 800c06a:	45b1      	cmp	r9, r6
 800c06c:	d8ea      	bhi.n	800c044 <__gethex+0x1d8>
 800c06e:	492b      	ldr	r1, [pc, #172]	@ (800c11c <__gethex+0x2b0>)
 800c070:	9303      	str	r3, [sp, #12]
 800c072:	2201      	movs	r2, #1
 800c074:	4630      	mov	r0, r6
 800c076:	f7ff f849 	bl	800b10c <strncmp>
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d1e1      	bne.n	800c044 <__gethex+0x1d8>
 800c080:	e7a2      	b.n	800bfc8 <__gethex+0x15c>
 800c082:	1ea9      	subs	r1, r5, #2
 800c084:	4620      	mov	r0, r4
 800c086:	f001 f913 	bl	800d2b0 <__any_on>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d0c2      	beq.n	800c014 <__gethex+0x1a8>
 800c08e:	f04f 0903 	mov.w	r9, #3
 800c092:	e7c1      	b.n	800c018 <__gethex+0x1ac>
 800c094:	da09      	bge.n	800c0aa <__gethex+0x23e>
 800c096:	1b75      	subs	r5, r6, r5
 800c098:	4621      	mov	r1, r4
 800c09a:	9801      	ldr	r0, [sp, #4]
 800c09c:	462a      	mov	r2, r5
 800c09e:	f000 fed1 	bl	800ce44 <__lshift>
 800c0a2:	1b7f      	subs	r7, r7, r5
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	f100 0a14 	add.w	sl, r0, #20
 800c0aa:	f04f 0900 	mov.w	r9, #0
 800c0ae:	e7b8      	b.n	800c022 <__gethex+0x1b6>
 800c0b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c0b4:	42bd      	cmp	r5, r7
 800c0b6:	dd6f      	ble.n	800c198 <__gethex+0x32c>
 800c0b8:	1bed      	subs	r5, r5, r7
 800c0ba:	42ae      	cmp	r6, r5
 800c0bc:	dc34      	bgt.n	800c128 <__gethex+0x2bc>
 800c0be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d022      	beq.n	800c10c <__gethex+0x2a0>
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	d024      	beq.n	800c114 <__gethex+0x2a8>
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d115      	bne.n	800c0fa <__gethex+0x28e>
 800c0ce:	42ae      	cmp	r6, r5
 800c0d0:	d113      	bne.n	800c0fa <__gethex+0x28e>
 800c0d2:	2e01      	cmp	r6, #1
 800c0d4:	d10b      	bne.n	800c0ee <__gethex+0x282>
 800c0d6:	9a02      	ldr	r2, [sp, #8]
 800c0d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0dc:	6013      	str	r3, [r2, #0]
 800c0de:	2301      	movs	r3, #1
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	f8ca 3000 	str.w	r3, [sl]
 800c0e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0e8:	2562      	movs	r5, #98	@ 0x62
 800c0ea:	601c      	str	r4, [r3, #0]
 800c0ec:	e73a      	b.n	800bf64 <__gethex+0xf8>
 800c0ee:	1e71      	subs	r1, r6, #1
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f001 f8dd 	bl	800d2b0 <__any_on>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d1ed      	bne.n	800c0d6 <__gethex+0x26a>
 800c0fa:	9801      	ldr	r0, [sp, #4]
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	f000 fc91 	bl	800ca24 <_Bfree>
 800c102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c104:	2300      	movs	r3, #0
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	2550      	movs	r5, #80	@ 0x50
 800c10a:	e72b      	b.n	800bf64 <__gethex+0xf8>
 800c10c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1f3      	bne.n	800c0fa <__gethex+0x28e>
 800c112:	e7e0      	b.n	800c0d6 <__gethex+0x26a>
 800c114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1dd      	bne.n	800c0d6 <__gethex+0x26a>
 800c11a:	e7ee      	b.n	800c0fa <__gethex+0x28e>
 800c11c:	0800e6d9 	.word	0x0800e6d9
 800c120:	0800e75f 	.word	0x0800e75f
 800c124:	0800e770 	.word	0x0800e770
 800c128:	1e6f      	subs	r7, r5, #1
 800c12a:	f1b9 0f00 	cmp.w	r9, #0
 800c12e:	d130      	bne.n	800c192 <__gethex+0x326>
 800c130:	b127      	cbz	r7, 800c13c <__gethex+0x2d0>
 800c132:	4639      	mov	r1, r7
 800c134:	4620      	mov	r0, r4
 800c136:	f001 f8bb 	bl	800d2b0 <__any_on>
 800c13a:	4681      	mov	r9, r0
 800c13c:	117a      	asrs	r2, r7, #5
 800c13e:	2301      	movs	r3, #1
 800c140:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c144:	f007 071f 	and.w	r7, r7, #31
 800c148:	40bb      	lsls	r3, r7
 800c14a:	4213      	tst	r3, r2
 800c14c:	4629      	mov	r1, r5
 800c14e:	4620      	mov	r0, r4
 800c150:	bf18      	it	ne
 800c152:	f049 0902 	orrne.w	r9, r9, #2
 800c156:	f7ff fe21 	bl	800bd9c <rshift>
 800c15a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c15e:	1b76      	subs	r6, r6, r5
 800c160:	2502      	movs	r5, #2
 800c162:	f1b9 0f00 	cmp.w	r9, #0
 800c166:	d047      	beq.n	800c1f8 <__gethex+0x38c>
 800c168:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d015      	beq.n	800c19c <__gethex+0x330>
 800c170:	2b03      	cmp	r3, #3
 800c172:	d017      	beq.n	800c1a4 <__gethex+0x338>
 800c174:	2b01      	cmp	r3, #1
 800c176:	d109      	bne.n	800c18c <__gethex+0x320>
 800c178:	f019 0f02 	tst.w	r9, #2
 800c17c:	d006      	beq.n	800c18c <__gethex+0x320>
 800c17e:	f8da 3000 	ldr.w	r3, [sl]
 800c182:	ea49 0903 	orr.w	r9, r9, r3
 800c186:	f019 0f01 	tst.w	r9, #1
 800c18a:	d10e      	bne.n	800c1aa <__gethex+0x33e>
 800c18c:	f045 0510 	orr.w	r5, r5, #16
 800c190:	e032      	b.n	800c1f8 <__gethex+0x38c>
 800c192:	f04f 0901 	mov.w	r9, #1
 800c196:	e7d1      	b.n	800c13c <__gethex+0x2d0>
 800c198:	2501      	movs	r5, #1
 800c19a:	e7e2      	b.n	800c162 <__gethex+0x2f6>
 800c19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c19e:	f1c3 0301 	rsb	r3, r3, #1
 800c1a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d0f0      	beq.n	800c18c <__gethex+0x320>
 800c1aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c1ae:	f104 0314 	add.w	r3, r4, #20
 800c1b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c1b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c1ba:	f04f 0c00 	mov.w	ip, #0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c1c8:	d01b      	beq.n	800c202 <__gethex+0x396>
 800c1ca:	3201      	adds	r2, #1
 800c1cc:	6002      	str	r2, [r0, #0]
 800c1ce:	2d02      	cmp	r5, #2
 800c1d0:	f104 0314 	add.w	r3, r4, #20
 800c1d4:	d13c      	bne.n	800c250 <__gethex+0x3e4>
 800c1d6:	f8d8 2000 	ldr.w	r2, [r8]
 800c1da:	3a01      	subs	r2, #1
 800c1dc:	42b2      	cmp	r2, r6
 800c1de:	d109      	bne.n	800c1f4 <__gethex+0x388>
 800c1e0:	1171      	asrs	r1, r6, #5
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1e8:	f006 061f 	and.w	r6, r6, #31
 800c1ec:	fa02 f606 	lsl.w	r6, r2, r6
 800c1f0:	421e      	tst	r6, r3
 800c1f2:	d13a      	bne.n	800c26a <__gethex+0x3fe>
 800c1f4:	f045 0520 	orr.w	r5, r5, #32
 800c1f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1fa:	601c      	str	r4, [r3, #0]
 800c1fc:	9b02      	ldr	r3, [sp, #8]
 800c1fe:	601f      	str	r7, [r3, #0]
 800c200:	e6b0      	b.n	800bf64 <__gethex+0xf8>
 800c202:	4299      	cmp	r1, r3
 800c204:	f843 cc04 	str.w	ip, [r3, #-4]
 800c208:	d8d9      	bhi.n	800c1be <__gethex+0x352>
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	459b      	cmp	fp, r3
 800c20e:	db17      	blt.n	800c240 <__gethex+0x3d4>
 800c210:	6861      	ldr	r1, [r4, #4]
 800c212:	9801      	ldr	r0, [sp, #4]
 800c214:	3101      	adds	r1, #1
 800c216:	f000 fbc5 	bl	800c9a4 <_Balloc>
 800c21a:	4681      	mov	r9, r0
 800c21c:	b918      	cbnz	r0, 800c226 <__gethex+0x3ba>
 800c21e:	4b1a      	ldr	r3, [pc, #104]	@ (800c288 <__gethex+0x41c>)
 800c220:	4602      	mov	r2, r0
 800c222:	2184      	movs	r1, #132	@ 0x84
 800c224:	e6c5      	b.n	800bfb2 <__gethex+0x146>
 800c226:	6922      	ldr	r2, [r4, #16]
 800c228:	3202      	adds	r2, #2
 800c22a:	f104 010c 	add.w	r1, r4, #12
 800c22e:	0092      	lsls	r2, r2, #2
 800c230:	300c      	adds	r0, #12
 800c232:	f7fe ffaf 	bl	800b194 <memcpy>
 800c236:	4621      	mov	r1, r4
 800c238:	9801      	ldr	r0, [sp, #4]
 800c23a:	f000 fbf3 	bl	800ca24 <_Bfree>
 800c23e:	464c      	mov	r4, r9
 800c240:	6923      	ldr	r3, [r4, #16]
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c248:	6122      	str	r2, [r4, #16]
 800c24a:	2201      	movs	r2, #1
 800c24c:	615a      	str	r2, [r3, #20]
 800c24e:	e7be      	b.n	800c1ce <__gethex+0x362>
 800c250:	6922      	ldr	r2, [r4, #16]
 800c252:	455a      	cmp	r2, fp
 800c254:	dd0b      	ble.n	800c26e <__gethex+0x402>
 800c256:	2101      	movs	r1, #1
 800c258:	4620      	mov	r0, r4
 800c25a:	f7ff fd9f 	bl	800bd9c <rshift>
 800c25e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c262:	3701      	adds	r7, #1
 800c264:	42bb      	cmp	r3, r7
 800c266:	f6ff aee0 	blt.w	800c02a <__gethex+0x1be>
 800c26a:	2501      	movs	r5, #1
 800c26c:	e7c2      	b.n	800c1f4 <__gethex+0x388>
 800c26e:	f016 061f 	ands.w	r6, r6, #31
 800c272:	d0fa      	beq.n	800c26a <__gethex+0x3fe>
 800c274:	4453      	add	r3, sl
 800c276:	f1c6 0620 	rsb	r6, r6, #32
 800c27a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c27e:	f000 fc83 	bl	800cb88 <__hi0bits>
 800c282:	42b0      	cmp	r0, r6
 800c284:	dbe7      	blt.n	800c256 <__gethex+0x3ea>
 800c286:	e7f0      	b.n	800c26a <__gethex+0x3fe>
 800c288:	0800e75f 	.word	0x0800e75f

0800c28c <L_shift>:
 800c28c:	f1c2 0208 	rsb	r2, r2, #8
 800c290:	0092      	lsls	r2, r2, #2
 800c292:	b570      	push	{r4, r5, r6, lr}
 800c294:	f1c2 0620 	rsb	r6, r2, #32
 800c298:	6843      	ldr	r3, [r0, #4]
 800c29a:	6804      	ldr	r4, [r0, #0]
 800c29c:	fa03 f506 	lsl.w	r5, r3, r6
 800c2a0:	432c      	orrs	r4, r5
 800c2a2:	40d3      	lsrs	r3, r2
 800c2a4:	6004      	str	r4, [r0, #0]
 800c2a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c2aa:	4288      	cmp	r0, r1
 800c2ac:	d3f4      	bcc.n	800c298 <L_shift+0xc>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}

0800c2b0 <__match>:
 800c2b0:	b530      	push	{r4, r5, lr}
 800c2b2:	6803      	ldr	r3, [r0, #0]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ba:	b914      	cbnz	r4, 800c2c2 <__match+0x12>
 800c2bc:	6003      	str	r3, [r0, #0]
 800c2be:	2001      	movs	r0, #1
 800c2c0:	bd30      	pop	{r4, r5, pc}
 800c2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c2ca:	2d19      	cmp	r5, #25
 800c2cc:	bf98      	it	ls
 800c2ce:	3220      	addls	r2, #32
 800c2d0:	42a2      	cmp	r2, r4
 800c2d2:	d0f0      	beq.n	800c2b6 <__match+0x6>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	e7f3      	b.n	800c2c0 <__match+0x10>

0800c2d8 <__hexnan>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	680b      	ldr	r3, [r1, #0]
 800c2de:	6801      	ldr	r1, [r0, #0]
 800c2e0:	115e      	asrs	r6, r3, #5
 800c2e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2e6:	f013 031f 	ands.w	r3, r3, #31
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	bf18      	it	ne
 800c2ee:	3604      	addne	r6, #4
 800c2f0:	2500      	movs	r5, #0
 800c2f2:	1f37      	subs	r7, r6, #4
 800c2f4:	4682      	mov	sl, r0
 800c2f6:	4690      	mov	r8, r2
 800c2f8:	9301      	str	r3, [sp, #4]
 800c2fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800c2fe:	46b9      	mov	r9, r7
 800c300:	463c      	mov	r4, r7
 800c302:	9502      	str	r5, [sp, #8]
 800c304:	46ab      	mov	fp, r5
 800c306:	784a      	ldrb	r2, [r1, #1]
 800c308:	1c4b      	adds	r3, r1, #1
 800c30a:	9303      	str	r3, [sp, #12]
 800c30c:	b342      	cbz	r2, 800c360 <__hexnan+0x88>
 800c30e:	4610      	mov	r0, r2
 800c310:	9105      	str	r1, [sp, #20]
 800c312:	9204      	str	r2, [sp, #16]
 800c314:	f7ff fd94 	bl	800be40 <__hexdig_fun>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d151      	bne.n	800c3c0 <__hexnan+0xe8>
 800c31c:	9a04      	ldr	r2, [sp, #16]
 800c31e:	9905      	ldr	r1, [sp, #20]
 800c320:	2a20      	cmp	r2, #32
 800c322:	d818      	bhi.n	800c356 <__hexnan+0x7e>
 800c324:	9b02      	ldr	r3, [sp, #8]
 800c326:	459b      	cmp	fp, r3
 800c328:	dd13      	ble.n	800c352 <__hexnan+0x7a>
 800c32a:	454c      	cmp	r4, r9
 800c32c:	d206      	bcs.n	800c33c <__hexnan+0x64>
 800c32e:	2d07      	cmp	r5, #7
 800c330:	dc04      	bgt.n	800c33c <__hexnan+0x64>
 800c332:	462a      	mov	r2, r5
 800c334:	4649      	mov	r1, r9
 800c336:	4620      	mov	r0, r4
 800c338:	f7ff ffa8 	bl	800c28c <L_shift>
 800c33c:	4544      	cmp	r4, r8
 800c33e:	d952      	bls.n	800c3e6 <__hexnan+0x10e>
 800c340:	2300      	movs	r3, #0
 800c342:	f1a4 0904 	sub.w	r9, r4, #4
 800c346:	f844 3c04 	str.w	r3, [r4, #-4]
 800c34a:	f8cd b008 	str.w	fp, [sp, #8]
 800c34e:	464c      	mov	r4, r9
 800c350:	461d      	mov	r5, r3
 800c352:	9903      	ldr	r1, [sp, #12]
 800c354:	e7d7      	b.n	800c306 <__hexnan+0x2e>
 800c356:	2a29      	cmp	r2, #41	@ 0x29
 800c358:	d157      	bne.n	800c40a <__hexnan+0x132>
 800c35a:	3102      	adds	r1, #2
 800c35c:	f8ca 1000 	str.w	r1, [sl]
 800c360:	f1bb 0f00 	cmp.w	fp, #0
 800c364:	d051      	beq.n	800c40a <__hexnan+0x132>
 800c366:	454c      	cmp	r4, r9
 800c368:	d206      	bcs.n	800c378 <__hexnan+0xa0>
 800c36a:	2d07      	cmp	r5, #7
 800c36c:	dc04      	bgt.n	800c378 <__hexnan+0xa0>
 800c36e:	462a      	mov	r2, r5
 800c370:	4649      	mov	r1, r9
 800c372:	4620      	mov	r0, r4
 800c374:	f7ff ff8a 	bl	800c28c <L_shift>
 800c378:	4544      	cmp	r4, r8
 800c37a:	d936      	bls.n	800c3ea <__hexnan+0x112>
 800c37c:	f1a8 0204 	sub.w	r2, r8, #4
 800c380:	4623      	mov	r3, r4
 800c382:	f853 1b04 	ldr.w	r1, [r3], #4
 800c386:	f842 1f04 	str.w	r1, [r2, #4]!
 800c38a:	429f      	cmp	r7, r3
 800c38c:	d2f9      	bcs.n	800c382 <__hexnan+0xaa>
 800c38e:	1b3b      	subs	r3, r7, r4
 800c390:	f023 0303 	bic.w	r3, r3, #3
 800c394:	3304      	adds	r3, #4
 800c396:	3401      	adds	r4, #1
 800c398:	3e03      	subs	r6, #3
 800c39a:	42b4      	cmp	r4, r6
 800c39c:	bf88      	it	hi
 800c39e:	2304      	movhi	r3, #4
 800c3a0:	4443      	add	r3, r8
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f843 2b04 	str.w	r2, [r3], #4
 800c3a8:	429f      	cmp	r7, r3
 800c3aa:	d2fb      	bcs.n	800c3a4 <__hexnan+0xcc>
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	b91b      	cbnz	r3, 800c3b8 <__hexnan+0xe0>
 800c3b0:	4547      	cmp	r7, r8
 800c3b2:	d128      	bne.n	800c406 <__hexnan+0x12e>
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	2005      	movs	r0, #5
 800c3ba:	b007      	add	sp, #28
 800c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	3501      	adds	r5, #1
 800c3c2:	2d08      	cmp	r5, #8
 800c3c4:	f10b 0b01 	add.w	fp, fp, #1
 800c3c8:	dd06      	ble.n	800c3d8 <__hexnan+0x100>
 800c3ca:	4544      	cmp	r4, r8
 800c3cc:	d9c1      	bls.n	800c352 <__hexnan+0x7a>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3d4:	2501      	movs	r5, #1
 800c3d6:	3c04      	subs	r4, #4
 800c3d8:	6822      	ldr	r2, [r4, #0]
 800c3da:	f000 000f 	and.w	r0, r0, #15
 800c3de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c3e2:	6020      	str	r0, [r4, #0]
 800c3e4:	e7b5      	b.n	800c352 <__hexnan+0x7a>
 800c3e6:	2508      	movs	r5, #8
 800c3e8:	e7b3      	b.n	800c352 <__hexnan+0x7a>
 800c3ea:	9b01      	ldr	r3, [sp, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0dd      	beq.n	800c3ac <__hexnan+0xd4>
 800c3f0:	f1c3 0320 	rsb	r3, r3, #32
 800c3f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3f8:	40da      	lsrs	r2, r3
 800c3fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c3fe:	4013      	ands	r3, r2
 800c400:	f846 3c04 	str.w	r3, [r6, #-4]
 800c404:	e7d2      	b.n	800c3ac <__hexnan+0xd4>
 800c406:	3f04      	subs	r7, #4
 800c408:	e7d0      	b.n	800c3ac <__hexnan+0xd4>
 800c40a:	2004      	movs	r0, #4
 800c40c:	e7d5      	b.n	800c3ba <__hexnan+0xe2>

0800c40e <__ssputs_r>:
 800c40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c412:	688e      	ldr	r6, [r1, #8]
 800c414:	461f      	mov	r7, r3
 800c416:	42be      	cmp	r6, r7
 800c418:	680b      	ldr	r3, [r1, #0]
 800c41a:	4682      	mov	sl, r0
 800c41c:	460c      	mov	r4, r1
 800c41e:	4690      	mov	r8, r2
 800c420:	d82d      	bhi.n	800c47e <__ssputs_r+0x70>
 800c422:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c426:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c42a:	d026      	beq.n	800c47a <__ssputs_r+0x6c>
 800c42c:	6965      	ldr	r5, [r4, #20]
 800c42e:	6909      	ldr	r1, [r1, #16]
 800c430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c434:	eba3 0901 	sub.w	r9, r3, r1
 800c438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c43c:	1c7b      	adds	r3, r7, #1
 800c43e:	444b      	add	r3, r9
 800c440:	106d      	asrs	r5, r5, #1
 800c442:	429d      	cmp	r5, r3
 800c444:	bf38      	it	cc
 800c446:	461d      	movcc	r5, r3
 800c448:	0553      	lsls	r3, r2, #21
 800c44a:	d527      	bpl.n	800c49c <__ssputs_r+0x8e>
 800c44c:	4629      	mov	r1, r5
 800c44e:	f000 f95f 	bl	800c710 <_malloc_r>
 800c452:	4606      	mov	r6, r0
 800c454:	b360      	cbz	r0, 800c4b0 <__ssputs_r+0xa2>
 800c456:	6921      	ldr	r1, [r4, #16]
 800c458:	464a      	mov	r2, r9
 800c45a:	f7fe fe9b 	bl	800b194 <memcpy>
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c468:	81a3      	strh	r3, [r4, #12]
 800c46a:	6126      	str	r6, [r4, #16]
 800c46c:	6165      	str	r5, [r4, #20]
 800c46e:	444e      	add	r6, r9
 800c470:	eba5 0509 	sub.w	r5, r5, r9
 800c474:	6026      	str	r6, [r4, #0]
 800c476:	60a5      	str	r5, [r4, #8]
 800c478:	463e      	mov	r6, r7
 800c47a:	42be      	cmp	r6, r7
 800c47c:	d900      	bls.n	800c480 <__ssputs_r+0x72>
 800c47e:	463e      	mov	r6, r7
 800c480:	6820      	ldr	r0, [r4, #0]
 800c482:	4632      	mov	r2, r6
 800c484:	4641      	mov	r1, r8
 800c486:	f000 ffb2 	bl	800d3ee <memmove>
 800c48a:	68a3      	ldr	r3, [r4, #8]
 800c48c:	1b9b      	subs	r3, r3, r6
 800c48e:	60a3      	str	r3, [r4, #8]
 800c490:	6823      	ldr	r3, [r4, #0]
 800c492:	4433      	add	r3, r6
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	2000      	movs	r0, #0
 800c498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c49c:	462a      	mov	r2, r5
 800c49e:	f000 ff6b 	bl	800d378 <_realloc_r>
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d1e0      	bne.n	800c46a <__ssputs_r+0x5c>
 800c4a8:	6921      	ldr	r1, [r4, #16]
 800c4aa:	4650      	mov	r0, sl
 800c4ac:	f001 f842 	bl	800d534 <_free_r>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	f8ca 3000 	str.w	r3, [sl]
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4bc:	81a3      	strh	r3, [r4, #12]
 800c4be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4c2:	e7e9      	b.n	800c498 <__ssputs_r+0x8a>

0800c4c4 <_svfiprintf_r>:
 800c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c8:	4698      	mov	r8, r3
 800c4ca:	898b      	ldrh	r3, [r1, #12]
 800c4cc:	061b      	lsls	r3, r3, #24
 800c4ce:	b09d      	sub	sp, #116	@ 0x74
 800c4d0:	4607      	mov	r7, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	4614      	mov	r4, r2
 800c4d6:	d510      	bpl.n	800c4fa <_svfiprintf_r+0x36>
 800c4d8:	690b      	ldr	r3, [r1, #16]
 800c4da:	b973      	cbnz	r3, 800c4fa <_svfiprintf_r+0x36>
 800c4dc:	2140      	movs	r1, #64	@ 0x40
 800c4de:	f000 f917 	bl	800c710 <_malloc_r>
 800c4e2:	6028      	str	r0, [r5, #0]
 800c4e4:	6128      	str	r0, [r5, #16]
 800c4e6:	b930      	cbnz	r0, 800c4f6 <_svfiprintf_r+0x32>
 800c4e8:	230c      	movs	r3, #12
 800c4ea:	603b      	str	r3, [r7, #0]
 800c4ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4f0:	b01d      	add	sp, #116	@ 0x74
 800c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f6:	2340      	movs	r3, #64	@ 0x40
 800c4f8:	616b      	str	r3, [r5, #20]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4fe:	2320      	movs	r3, #32
 800c500:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c504:	f8cd 800c 	str.w	r8, [sp, #12]
 800c508:	2330      	movs	r3, #48	@ 0x30
 800c50a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c6a8 <_svfiprintf_r+0x1e4>
 800c50e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c512:	f04f 0901 	mov.w	r9, #1
 800c516:	4623      	mov	r3, r4
 800c518:	469a      	mov	sl, r3
 800c51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c51e:	b10a      	cbz	r2, 800c524 <_svfiprintf_r+0x60>
 800c520:	2a25      	cmp	r2, #37	@ 0x25
 800c522:	d1f9      	bne.n	800c518 <_svfiprintf_r+0x54>
 800c524:	ebba 0b04 	subs.w	fp, sl, r4
 800c528:	d00b      	beq.n	800c542 <_svfiprintf_r+0x7e>
 800c52a:	465b      	mov	r3, fp
 800c52c:	4622      	mov	r2, r4
 800c52e:	4629      	mov	r1, r5
 800c530:	4638      	mov	r0, r7
 800c532:	f7ff ff6c 	bl	800c40e <__ssputs_r>
 800c536:	3001      	adds	r0, #1
 800c538:	f000 80a7 	beq.w	800c68a <_svfiprintf_r+0x1c6>
 800c53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c53e:	445a      	add	r2, fp
 800c540:	9209      	str	r2, [sp, #36]	@ 0x24
 800c542:	f89a 3000 	ldrb.w	r3, [sl]
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 809f 	beq.w	800c68a <_svfiprintf_r+0x1c6>
 800c54c:	2300      	movs	r3, #0
 800c54e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c556:	f10a 0a01 	add.w	sl, sl, #1
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	9307      	str	r3, [sp, #28]
 800c55e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c562:	931a      	str	r3, [sp, #104]	@ 0x68
 800c564:	4654      	mov	r4, sl
 800c566:	2205      	movs	r2, #5
 800c568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56c:	484e      	ldr	r0, [pc, #312]	@ (800c6a8 <_svfiprintf_r+0x1e4>)
 800c56e:	f7f3 feb7 	bl	80002e0 <memchr>
 800c572:	9a04      	ldr	r2, [sp, #16]
 800c574:	b9d8      	cbnz	r0, 800c5ae <_svfiprintf_r+0xea>
 800c576:	06d0      	lsls	r0, r2, #27
 800c578:	bf44      	itt	mi
 800c57a:	2320      	movmi	r3, #32
 800c57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c580:	0711      	lsls	r1, r2, #28
 800c582:	bf44      	itt	mi
 800c584:	232b      	movmi	r3, #43	@ 0x2b
 800c586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c58a:	f89a 3000 	ldrb.w	r3, [sl]
 800c58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c590:	d015      	beq.n	800c5be <_svfiprintf_r+0xfa>
 800c592:	9a07      	ldr	r2, [sp, #28]
 800c594:	4654      	mov	r4, sl
 800c596:	2000      	movs	r0, #0
 800c598:	f04f 0c0a 	mov.w	ip, #10
 800c59c:	4621      	mov	r1, r4
 800c59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5a2:	3b30      	subs	r3, #48	@ 0x30
 800c5a4:	2b09      	cmp	r3, #9
 800c5a6:	d94b      	bls.n	800c640 <_svfiprintf_r+0x17c>
 800c5a8:	b1b0      	cbz	r0, 800c5d8 <_svfiprintf_r+0x114>
 800c5aa:	9207      	str	r2, [sp, #28]
 800c5ac:	e014      	b.n	800c5d8 <_svfiprintf_r+0x114>
 800c5ae:	eba0 0308 	sub.w	r3, r0, r8
 800c5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	46a2      	mov	sl, r4
 800c5bc:	e7d2      	b.n	800c564 <_svfiprintf_r+0xa0>
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	1d19      	adds	r1, r3, #4
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	9103      	str	r1, [sp, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	bfbb      	ittet	lt
 800c5ca:	425b      	neglt	r3, r3
 800c5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c5d0:	9307      	strge	r3, [sp, #28]
 800c5d2:	9307      	strlt	r3, [sp, #28]
 800c5d4:	bfb8      	it	lt
 800c5d6:	9204      	strlt	r2, [sp, #16]
 800c5d8:	7823      	ldrb	r3, [r4, #0]
 800c5da:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5dc:	d10a      	bne.n	800c5f4 <_svfiprintf_r+0x130>
 800c5de:	7863      	ldrb	r3, [r4, #1]
 800c5e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5e2:	d132      	bne.n	800c64a <_svfiprintf_r+0x186>
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	1d1a      	adds	r2, r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	9203      	str	r2, [sp, #12]
 800c5ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5f0:	3402      	adds	r4, #2
 800c5f2:	9305      	str	r3, [sp, #20]
 800c5f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6b8 <_svfiprintf_r+0x1f4>
 800c5f8:	7821      	ldrb	r1, [r4, #0]
 800c5fa:	2203      	movs	r2, #3
 800c5fc:	4650      	mov	r0, sl
 800c5fe:	f7f3 fe6f 	bl	80002e0 <memchr>
 800c602:	b138      	cbz	r0, 800c614 <_svfiprintf_r+0x150>
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	eba0 000a 	sub.w	r0, r0, sl
 800c60a:	2240      	movs	r2, #64	@ 0x40
 800c60c:	4082      	lsls	r2, r0
 800c60e:	4313      	orrs	r3, r2
 800c610:	3401      	adds	r4, #1
 800c612:	9304      	str	r3, [sp, #16]
 800c614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c618:	4824      	ldr	r0, [pc, #144]	@ (800c6ac <_svfiprintf_r+0x1e8>)
 800c61a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c61e:	2206      	movs	r2, #6
 800c620:	f7f3 fe5e 	bl	80002e0 <memchr>
 800c624:	2800      	cmp	r0, #0
 800c626:	d036      	beq.n	800c696 <_svfiprintf_r+0x1d2>
 800c628:	4b21      	ldr	r3, [pc, #132]	@ (800c6b0 <_svfiprintf_r+0x1ec>)
 800c62a:	bb1b      	cbnz	r3, 800c674 <_svfiprintf_r+0x1b0>
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	3307      	adds	r3, #7
 800c630:	f023 0307 	bic.w	r3, r3, #7
 800c634:	3308      	adds	r3, #8
 800c636:	9303      	str	r3, [sp, #12]
 800c638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c63a:	4433      	add	r3, r6
 800c63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c63e:	e76a      	b.n	800c516 <_svfiprintf_r+0x52>
 800c640:	fb0c 3202 	mla	r2, ip, r2, r3
 800c644:	460c      	mov	r4, r1
 800c646:	2001      	movs	r0, #1
 800c648:	e7a8      	b.n	800c59c <_svfiprintf_r+0xd8>
 800c64a:	2300      	movs	r3, #0
 800c64c:	3401      	adds	r4, #1
 800c64e:	9305      	str	r3, [sp, #20]
 800c650:	4619      	mov	r1, r3
 800c652:	f04f 0c0a 	mov.w	ip, #10
 800c656:	4620      	mov	r0, r4
 800c658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c65c:	3a30      	subs	r2, #48	@ 0x30
 800c65e:	2a09      	cmp	r2, #9
 800c660:	d903      	bls.n	800c66a <_svfiprintf_r+0x1a6>
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0c6      	beq.n	800c5f4 <_svfiprintf_r+0x130>
 800c666:	9105      	str	r1, [sp, #20]
 800c668:	e7c4      	b.n	800c5f4 <_svfiprintf_r+0x130>
 800c66a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c66e:	4604      	mov	r4, r0
 800c670:	2301      	movs	r3, #1
 800c672:	e7f0      	b.n	800c656 <_svfiprintf_r+0x192>
 800c674:	ab03      	add	r3, sp, #12
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	462a      	mov	r2, r5
 800c67a:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b4 <_svfiprintf_r+0x1f0>)
 800c67c:	a904      	add	r1, sp, #16
 800c67e:	4638      	mov	r0, r7
 800c680:	f7fd f876 	bl	8009770 <_printf_float>
 800c684:	1c42      	adds	r2, r0, #1
 800c686:	4606      	mov	r6, r0
 800c688:	d1d6      	bne.n	800c638 <_svfiprintf_r+0x174>
 800c68a:	89ab      	ldrh	r3, [r5, #12]
 800c68c:	065b      	lsls	r3, r3, #25
 800c68e:	f53f af2d 	bmi.w	800c4ec <_svfiprintf_r+0x28>
 800c692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c694:	e72c      	b.n	800c4f0 <_svfiprintf_r+0x2c>
 800c696:	ab03      	add	r3, sp, #12
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	462a      	mov	r2, r5
 800c69c:	4b05      	ldr	r3, [pc, #20]	@ (800c6b4 <_svfiprintf_r+0x1f0>)
 800c69e:	a904      	add	r1, sp, #16
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f7fd faed 	bl	8009c80 <_printf_i>
 800c6a6:	e7ed      	b.n	800c684 <_svfiprintf_r+0x1c0>
 800c6a8:	0800e7d0 	.word	0x0800e7d0
 800c6ac:	0800e7da 	.word	0x0800e7da
 800c6b0:	08009771 	.word	0x08009771
 800c6b4:	0800c40f 	.word	0x0800c40f
 800c6b8:	0800e7d6 	.word	0x0800e7d6

0800c6bc <malloc>:
 800c6bc:	4b02      	ldr	r3, [pc, #8]	@ (800c6c8 <malloc+0xc>)
 800c6be:	4601      	mov	r1, r0
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f000 b825 	b.w	800c710 <_malloc_r>
 800c6c6:	bf00      	nop
 800c6c8:	2400018c 	.word	0x2400018c

0800c6cc <sbrk_aligned>:
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	4e0f      	ldr	r6, [pc, #60]	@ (800c70c <sbrk_aligned+0x40>)
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	6831      	ldr	r1, [r6, #0]
 800c6d4:	4605      	mov	r5, r0
 800c6d6:	b911      	cbnz	r1, 800c6de <sbrk_aligned+0x12>
 800c6d8:	f000 fec8 	bl	800d46c <_sbrk_r>
 800c6dc:	6030      	str	r0, [r6, #0]
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f000 fec3 	bl	800d46c <_sbrk_r>
 800c6e6:	1c43      	adds	r3, r0, #1
 800c6e8:	d103      	bne.n	800c6f2 <sbrk_aligned+0x26>
 800c6ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	bd70      	pop	{r4, r5, r6, pc}
 800c6f2:	1cc4      	adds	r4, r0, #3
 800c6f4:	f024 0403 	bic.w	r4, r4, #3
 800c6f8:	42a0      	cmp	r0, r4
 800c6fa:	d0f8      	beq.n	800c6ee <sbrk_aligned+0x22>
 800c6fc:	1a21      	subs	r1, r4, r0
 800c6fe:	4628      	mov	r0, r5
 800c700:	f000 feb4 	bl	800d46c <_sbrk_r>
 800c704:	3001      	adds	r0, #1
 800c706:	d1f2      	bne.n	800c6ee <sbrk_aligned+0x22>
 800c708:	e7ef      	b.n	800c6ea <sbrk_aligned+0x1e>
 800c70a:	bf00      	nop
 800c70c:	240006ac 	.word	0x240006ac

0800c710 <_malloc_r>:
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c714:	1ccd      	adds	r5, r1, #3
 800c716:	f025 0503 	bic.w	r5, r5, #3
 800c71a:	3508      	adds	r5, #8
 800c71c:	2d0c      	cmp	r5, #12
 800c71e:	bf38      	it	cc
 800c720:	250c      	movcc	r5, #12
 800c722:	2d00      	cmp	r5, #0
 800c724:	4606      	mov	r6, r0
 800c726:	db01      	blt.n	800c72c <_malloc_r+0x1c>
 800c728:	42a9      	cmp	r1, r5
 800c72a:	d904      	bls.n	800c736 <_malloc_r+0x26>
 800c72c:	230c      	movs	r3, #12
 800c72e:	6033      	str	r3, [r6, #0]
 800c730:	2000      	movs	r0, #0
 800c732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c736:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c80c <_malloc_r+0xfc>
 800c73a:	f000 f927 	bl	800c98c <__malloc_lock>
 800c73e:	f8d8 3000 	ldr.w	r3, [r8]
 800c742:	461c      	mov	r4, r3
 800c744:	bb44      	cbnz	r4, 800c798 <_malloc_r+0x88>
 800c746:	4629      	mov	r1, r5
 800c748:	4630      	mov	r0, r6
 800c74a:	f7ff ffbf 	bl	800c6cc <sbrk_aligned>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	4604      	mov	r4, r0
 800c752:	d158      	bne.n	800c806 <_malloc_r+0xf6>
 800c754:	f8d8 4000 	ldr.w	r4, [r8]
 800c758:	4627      	mov	r7, r4
 800c75a:	2f00      	cmp	r7, #0
 800c75c:	d143      	bne.n	800c7e6 <_malloc_r+0xd6>
 800c75e:	2c00      	cmp	r4, #0
 800c760:	d04b      	beq.n	800c7fa <_malloc_r+0xea>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	4639      	mov	r1, r7
 800c766:	4630      	mov	r0, r6
 800c768:	eb04 0903 	add.w	r9, r4, r3
 800c76c:	f000 fe7e 	bl	800d46c <_sbrk_r>
 800c770:	4581      	cmp	r9, r0
 800c772:	d142      	bne.n	800c7fa <_malloc_r+0xea>
 800c774:	6821      	ldr	r1, [r4, #0]
 800c776:	1a6d      	subs	r5, r5, r1
 800c778:	4629      	mov	r1, r5
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7ff ffa6 	bl	800c6cc <sbrk_aligned>
 800c780:	3001      	adds	r0, #1
 800c782:	d03a      	beq.n	800c7fa <_malloc_r+0xea>
 800c784:	6823      	ldr	r3, [r4, #0]
 800c786:	442b      	add	r3, r5
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	f8d8 3000 	ldr.w	r3, [r8]
 800c78e:	685a      	ldr	r2, [r3, #4]
 800c790:	bb62      	cbnz	r2, 800c7ec <_malloc_r+0xdc>
 800c792:	f8c8 7000 	str.w	r7, [r8]
 800c796:	e00f      	b.n	800c7b8 <_malloc_r+0xa8>
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	1b52      	subs	r2, r2, r5
 800c79c:	d420      	bmi.n	800c7e0 <_malloc_r+0xd0>
 800c79e:	2a0b      	cmp	r2, #11
 800c7a0:	d917      	bls.n	800c7d2 <_malloc_r+0xc2>
 800c7a2:	1961      	adds	r1, r4, r5
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	6025      	str	r5, [r4, #0]
 800c7a8:	bf18      	it	ne
 800c7aa:	6059      	strne	r1, [r3, #4]
 800c7ac:	6863      	ldr	r3, [r4, #4]
 800c7ae:	bf08      	it	eq
 800c7b0:	f8c8 1000 	streq.w	r1, [r8]
 800c7b4:	5162      	str	r2, [r4, r5]
 800c7b6:	604b      	str	r3, [r1, #4]
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f000 f8ed 	bl	800c998 <__malloc_unlock>
 800c7be:	f104 000b 	add.w	r0, r4, #11
 800c7c2:	1d23      	adds	r3, r4, #4
 800c7c4:	f020 0007 	bic.w	r0, r0, #7
 800c7c8:	1ac2      	subs	r2, r0, r3
 800c7ca:	bf1c      	itt	ne
 800c7cc:	1a1b      	subne	r3, r3, r0
 800c7ce:	50a3      	strne	r3, [r4, r2]
 800c7d0:	e7af      	b.n	800c732 <_malloc_r+0x22>
 800c7d2:	6862      	ldr	r2, [r4, #4]
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	bf0c      	ite	eq
 800c7d8:	f8c8 2000 	streq.w	r2, [r8]
 800c7dc:	605a      	strne	r2, [r3, #4]
 800c7de:	e7eb      	b.n	800c7b8 <_malloc_r+0xa8>
 800c7e0:	4623      	mov	r3, r4
 800c7e2:	6864      	ldr	r4, [r4, #4]
 800c7e4:	e7ae      	b.n	800c744 <_malloc_r+0x34>
 800c7e6:	463c      	mov	r4, r7
 800c7e8:	687f      	ldr	r7, [r7, #4]
 800c7ea:	e7b6      	b.n	800c75a <_malloc_r+0x4a>
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	42a3      	cmp	r3, r4
 800c7f2:	d1fb      	bne.n	800c7ec <_malloc_r+0xdc>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	6053      	str	r3, [r2, #4]
 800c7f8:	e7de      	b.n	800c7b8 <_malloc_r+0xa8>
 800c7fa:	230c      	movs	r3, #12
 800c7fc:	6033      	str	r3, [r6, #0]
 800c7fe:	4630      	mov	r0, r6
 800c800:	f000 f8ca 	bl	800c998 <__malloc_unlock>
 800c804:	e794      	b.n	800c730 <_malloc_r+0x20>
 800c806:	6005      	str	r5, [r0, #0]
 800c808:	e7d6      	b.n	800c7b8 <_malloc_r+0xa8>
 800c80a:	bf00      	nop
 800c80c:	240006b0 	.word	0x240006b0

0800c810 <__ascii_mbtowc>:
 800c810:	b082      	sub	sp, #8
 800c812:	b901      	cbnz	r1, 800c816 <__ascii_mbtowc+0x6>
 800c814:	a901      	add	r1, sp, #4
 800c816:	b142      	cbz	r2, 800c82a <__ascii_mbtowc+0x1a>
 800c818:	b14b      	cbz	r3, 800c82e <__ascii_mbtowc+0x1e>
 800c81a:	7813      	ldrb	r3, [r2, #0]
 800c81c:	600b      	str	r3, [r1, #0]
 800c81e:	7812      	ldrb	r2, [r2, #0]
 800c820:	1e10      	subs	r0, r2, #0
 800c822:	bf18      	it	ne
 800c824:	2001      	movne	r0, #1
 800c826:	b002      	add	sp, #8
 800c828:	4770      	bx	lr
 800c82a:	4610      	mov	r0, r2
 800c82c:	e7fb      	b.n	800c826 <__ascii_mbtowc+0x16>
 800c82e:	f06f 0001 	mvn.w	r0, #1
 800c832:	e7f8      	b.n	800c826 <__ascii_mbtowc+0x16>

0800c834 <__sflush_r>:
 800c834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c83c:	0716      	lsls	r6, r2, #28
 800c83e:	4605      	mov	r5, r0
 800c840:	460c      	mov	r4, r1
 800c842:	d454      	bmi.n	800c8ee <__sflush_r+0xba>
 800c844:	684b      	ldr	r3, [r1, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	dc02      	bgt.n	800c850 <__sflush_r+0x1c>
 800c84a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	dd48      	ble.n	800c8e2 <__sflush_r+0xae>
 800c850:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c852:	2e00      	cmp	r6, #0
 800c854:	d045      	beq.n	800c8e2 <__sflush_r+0xae>
 800c856:	2300      	movs	r3, #0
 800c858:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c85c:	682f      	ldr	r7, [r5, #0]
 800c85e:	6a21      	ldr	r1, [r4, #32]
 800c860:	602b      	str	r3, [r5, #0]
 800c862:	d030      	beq.n	800c8c6 <__sflush_r+0x92>
 800c864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	0759      	lsls	r1, r3, #29
 800c86a:	d505      	bpl.n	800c878 <__sflush_r+0x44>
 800c86c:	6863      	ldr	r3, [r4, #4]
 800c86e:	1ad2      	subs	r2, r2, r3
 800c870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c872:	b10b      	cbz	r3, 800c878 <__sflush_r+0x44>
 800c874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c876:	1ad2      	subs	r2, r2, r3
 800c878:	2300      	movs	r3, #0
 800c87a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c87c:	6a21      	ldr	r1, [r4, #32]
 800c87e:	4628      	mov	r0, r5
 800c880:	47b0      	blx	r6
 800c882:	1c43      	adds	r3, r0, #1
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	d106      	bne.n	800c896 <__sflush_r+0x62>
 800c888:	6829      	ldr	r1, [r5, #0]
 800c88a:	291d      	cmp	r1, #29
 800c88c:	d82b      	bhi.n	800c8e6 <__sflush_r+0xb2>
 800c88e:	4a2a      	ldr	r2, [pc, #168]	@ (800c938 <__sflush_r+0x104>)
 800c890:	40ca      	lsrs	r2, r1
 800c892:	07d6      	lsls	r6, r2, #31
 800c894:	d527      	bpl.n	800c8e6 <__sflush_r+0xb2>
 800c896:	2200      	movs	r2, #0
 800c898:	6062      	str	r2, [r4, #4]
 800c89a:	04d9      	lsls	r1, r3, #19
 800c89c:	6922      	ldr	r2, [r4, #16]
 800c89e:	6022      	str	r2, [r4, #0]
 800c8a0:	d504      	bpl.n	800c8ac <__sflush_r+0x78>
 800c8a2:	1c42      	adds	r2, r0, #1
 800c8a4:	d101      	bne.n	800c8aa <__sflush_r+0x76>
 800c8a6:	682b      	ldr	r3, [r5, #0]
 800c8a8:	b903      	cbnz	r3, 800c8ac <__sflush_r+0x78>
 800c8aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ae:	602f      	str	r7, [r5, #0]
 800c8b0:	b1b9      	cbz	r1, 800c8e2 <__sflush_r+0xae>
 800c8b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8b6:	4299      	cmp	r1, r3
 800c8b8:	d002      	beq.n	800c8c0 <__sflush_r+0x8c>
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	f000 fe3a 	bl	800d534 <_free_r>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8c4:	e00d      	b.n	800c8e2 <__sflush_r+0xae>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	47b0      	blx	r6
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	1c50      	adds	r0, r2, #1
 800c8d0:	d1c9      	bne.n	800c866 <__sflush_r+0x32>
 800c8d2:	682b      	ldr	r3, [r5, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d0c6      	beq.n	800c866 <__sflush_r+0x32>
 800c8d8:	2b1d      	cmp	r3, #29
 800c8da:	d001      	beq.n	800c8e0 <__sflush_r+0xac>
 800c8dc:	2b16      	cmp	r3, #22
 800c8de:	d11e      	bne.n	800c91e <__sflush_r+0xea>
 800c8e0:	602f      	str	r7, [r5, #0]
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	e022      	b.n	800c92c <__sflush_r+0xf8>
 800c8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ea:	b21b      	sxth	r3, r3
 800c8ec:	e01b      	b.n	800c926 <__sflush_r+0xf2>
 800c8ee:	690f      	ldr	r7, [r1, #16]
 800c8f0:	2f00      	cmp	r7, #0
 800c8f2:	d0f6      	beq.n	800c8e2 <__sflush_r+0xae>
 800c8f4:	0793      	lsls	r3, r2, #30
 800c8f6:	680e      	ldr	r6, [r1, #0]
 800c8f8:	bf08      	it	eq
 800c8fa:	694b      	ldreq	r3, [r1, #20]
 800c8fc:	600f      	str	r7, [r1, #0]
 800c8fe:	bf18      	it	ne
 800c900:	2300      	movne	r3, #0
 800c902:	eba6 0807 	sub.w	r8, r6, r7
 800c906:	608b      	str	r3, [r1, #8]
 800c908:	f1b8 0f00 	cmp.w	r8, #0
 800c90c:	dde9      	ble.n	800c8e2 <__sflush_r+0xae>
 800c90e:	6a21      	ldr	r1, [r4, #32]
 800c910:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c912:	4643      	mov	r3, r8
 800c914:	463a      	mov	r2, r7
 800c916:	4628      	mov	r0, r5
 800c918:	47b0      	blx	r6
 800c91a:	2800      	cmp	r0, #0
 800c91c:	dc08      	bgt.n	800c930 <__sflush_r+0xfc>
 800c91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c930:	4407      	add	r7, r0
 800c932:	eba8 0800 	sub.w	r8, r8, r0
 800c936:	e7e7      	b.n	800c908 <__sflush_r+0xd4>
 800c938:	20400001 	.word	0x20400001

0800c93c <_fflush_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	690b      	ldr	r3, [r1, #16]
 800c940:	4605      	mov	r5, r0
 800c942:	460c      	mov	r4, r1
 800c944:	b913      	cbnz	r3, 800c94c <_fflush_r+0x10>
 800c946:	2500      	movs	r5, #0
 800c948:	4628      	mov	r0, r5
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	b118      	cbz	r0, 800c956 <_fflush_r+0x1a>
 800c94e:	6a03      	ldr	r3, [r0, #32]
 800c950:	b90b      	cbnz	r3, 800c956 <_fflush_r+0x1a>
 800c952:	f7fd fd67 	bl	800a424 <__sinit>
 800c956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d0f3      	beq.n	800c946 <_fflush_r+0xa>
 800c95e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c960:	07d0      	lsls	r0, r2, #31
 800c962:	d404      	bmi.n	800c96e <_fflush_r+0x32>
 800c964:	0599      	lsls	r1, r3, #22
 800c966:	d402      	bmi.n	800c96e <_fflush_r+0x32>
 800c968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c96a:	f7fe fc0c 	bl	800b186 <__retarget_lock_acquire_recursive>
 800c96e:	4628      	mov	r0, r5
 800c970:	4621      	mov	r1, r4
 800c972:	f7ff ff5f 	bl	800c834 <__sflush_r>
 800c976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c978:	07da      	lsls	r2, r3, #31
 800c97a:	4605      	mov	r5, r0
 800c97c:	d4e4      	bmi.n	800c948 <_fflush_r+0xc>
 800c97e:	89a3      	ldrh	r3, [r4, #12]
 800c980:	059b      	lsls	r3, r3, #22
 800c982:	d4e1      	bmi.n	800c948 <_fflush_r+0xc>
 800c984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c986:	f7fe fbff 	bl	800b188 <__retarget_lock_release_recursive>
 800c98a:	e7dd      	b.n	800c948 <_fflush_r+0xc>

0800c98c <__malloc_lock>:
 800c98c:	4801      	ldr	r0, [pc, #4]	@ (800c994 <__malloc_lock+0x8>)
 800c98e:	f7fe bbfa 	b.w	800b186 <__retarget_lock_acquire_recursive>
 800c992:	bf00      	nop
 800c994:	240006a8 	.word	0x240006a8

0800c998 <__malloc_unlock>:
 800c998:	4801      	ldr	r0, [pc, #4]	@ (800c9a0 <__malloc_unlock+0x8>)
 800c99a:	f7fe bbf5 	b.w	800b188 <__retarget_lock_release_recursive>
 800c99e:	bf00      	nop
 800c9a0:	240006a8 	.word	0x240006a8

0800c9a4 <_Balloc>:
 800c9a4:	b570      	push	{r4, r5, r6, lr}
 800c9a6:	69c6      	ldr	r6, [r0, #28]
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	460d      	mov	r5, r1
 800c9ac:	b976      	cbnz	r6, 800c9cc <_Balloc+0x28>
 800c9ae:	2010      	movs	r0, #16
 800c9b0:	f7ff fe84 	bl	800c6bc <malloc>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	61e0      	str	r0, [r4, #28]
 800c9b8:	b920      	cbnz	r0, 800c9c4 <_Balloc+0x20>
 800c9ba:	4b18      	ldr	r3, [pc, #96]	@ (800ca1c <_Balloc+0x78>)
 800c9bc:	4818      	ldr	r0, [pc, #96]	@ (800ca20 <_Balloc+0x7c>)
 800c9be:	216b      	movs	r1, #107	@ 0x6b
 800c9c0:	f000 fd86 	bl	800d4d0 <__assert_func>
 800c9c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9c8:	6006      	str	r6, [r0, #0]
 800c9ca:	60c6      	str	r6, [r0, #12]
 800c9cc:	69e6      	ldr	r6, [r4, #28]
 800c9ce:	68f3      	ldr	r3, [r6, #12]
 800c9d0:	b183      	cbz	r3, 800c9f4 <_Balloc+0x50>
 800c9d2:	69e3      	ldr	r3, [r4, #28]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9da:	b9b8      	cbnz	r0, 800ca0c <_Balloc+0x68>
 800c9dc:	2101      	movs	r1, #1
 800c9de:	fa01 f605 	lsl.w	r6, r1, r5
 800c9e2:	1d72      	adds	r2, r6, #5
 800c9e4:	0092      	lsls	r2, r2, #2
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 fd90 	bl	800d50c <_calloc_r>
 800c9ec:	b160      	cbz	r0, 800ca08 <_Balloc+0x64>
 800c9ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9f2:	e00e      	b.n	800ca12 <_Balloc+0x6e>
 800c9f4:	2221      	movs	r2, #33	@ 0x21
 800c9f6:	2104      	movs	r1, #4
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f000 fd87 	bl	800d50c <_calloc_r>
 800c9fe:	69e3      	ldr	r3, [r4, #28]
 800ca00:	60f0      	str	r0, [r6, #12]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1e4      	bne.n	800c9d2 <_Balloc+0x2e>
 800ca08:	2000      	movs	r0, #0
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}
 800ca0c:	6802      	ldr	r2, [r0, #0]
 800ca0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca12:	2300      	movs	r3, #0
 800ca14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca18:	e7f7      	b.n	800ca0a <_Balloc+0x66>
 800ca1a:	bf00      	nop
 800ca1c:	0800e6f0 	.word	0x0800e6f0
 800ca20:	0800e7e1 	.word	0x0800e7e1

0800ca24 <_Bfree>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	69c6      	ldr	r6, [r0, #28]
 800ca28:	4605      	mov	r5, r0
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	b976      	cbnz	r6, 800ca4c <_Bfree+0x28>
 800ca2e:	2010      	movs	r0, #16
 800ca30:	f7ff fe44 	bl	800c6bc <malloc>
 800ca34:	4602      	mov	r2, r0
 800ca36:	61e8      	str	r0, [r5, #28]
 800ca38:	b920      	cbnz	r0, 800ca44 <_Bfree+0x20>
 800ca3a:	4b09      	ldr	r3, [pc, #36]	@ (800ca60 <_Bfree+0x3c>)
 800ca3c:	4809      	ldr	r0, [pc, #36]	@ (800ca64 <_Bfree+0x40>)
 800ca3e:	218f      	movs	r1, #143	@ 0x8f
 800ca40:	f000 fd46 	bl	800d4d0 <__assert_func>
 800ca44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca48:	6006      	str	r6, [r0, #0]
 800ca4a:	60c6      	str	r6, [r0, #12]
 800ca4c:	b13c      	cbz	r4, 800ca5e <_Bfree+0x3a>
 800ca4e:	69eb      	ldr	r3, [r5, #28]
 800ca50:	6862      	ldr	r2, [r4, #4]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca58:	6021      	str	r1, [r4, #0]
 800ca5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
 800ca60:	0800e6f0 	.word	0x0800e6f0
 800ca64:	0800e7e1 	.word	0x0800e7e1

0800ca68 <__multadd>:
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	690d      	ldr	r5, [r1, #16]
 800ca6e:	4607      	mov	r7, r0
 800ca70:	460c      	mov	r4, r1
 800ca72:	461e      	mov	r6, r3
 800ca74:	f101 0c14 	add.w	ip, r1, #20
 800ca78:	2000      	movs	r0, #0
 800ca7a:	f8dc 3000 	ldr.w	r3, [ip]
 800ca7e:	b299      	uxth	r1, r3
 800ca80:	fb02 6101 	mla	r1, r2, r1, r6
 800ca84:	0c1e      	lsrs	r6, r3, #16
 800ca86:	0c0b      	lsrs	r3, r1, #16
 800ca88:	fb02 3306 	mla	r3, r2, r6, r3
 800ca8c:	b289      	uxth	r1, r1
 800ca8e:	3001      	adds	r0, #1
 800ca90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca94:	4285      	cmp	r5, r0
 800ca96:	f84c 1b04 	str.w	r1, [ip], #4
 800ca9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca9e:	dcec      	bgt.n	800ca7a <__multadd+0x12>
 800caa0:	b30e      	cbz	r6, 800cae6 <__multadd+0x7e>
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	42ab      	cmp	r3, r5
 800caa6:	dc19      	bgt.n	800cadc <__multadd+0x74>
 800caa8:	6861      	ldr	r1, [r4, #4]
 800caaa:	4638      	mov	r0, r7
 800caac:	3101      	adds	r1, #1
 800caae:	f7ff ff79 	bl	800c9a4 <_Balloc>
 800cab2:	4680      	mov	r8, r0
 800cab4:	b928      	cbnz	r0, 800cac2 <__multadd+0x5a>
 800cab6:	4602      	mov	r2, r0
 800cab8:	4b0c      	ldr	r3, [pc, #48]	@ (800caec <__multadd+0x84>)
 800caba:	480d      	ldr	r0, [pc, #52]	@ (800caf0 <__multadd+0x88>)
 800cabc:	21ba      	movs	r1, #186	@ 0xba
 800cabe:	f000 fd07 	bl	800d4d0 <__assert_func>
 800cac2:	6922      	ldr	r2, [r4, #16]
 800cac4:	3202      	adds	r2, #2
 800cac6:	f104 010c 	add.w	r1, r4, #12
 800caca:	0092      	lsls	r2, r2, #2
 800cacc:	300c      	adds	r0, #12
 800cace:	f7fe fb61 	bl	800b194 <memcpy>
 800cad2:	4621      	mov	r1, r4
 800cad4:	4638      	mov	r0, r7
 800cad6:	f7ff ffa5 	bl	800ca24 <_Bfree>
 800cada:	4644      	mov	r4, r8
 800cadc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cae0:	3501      	adds	r5, #1
 800cae2:	615e      	str	r6, [r3, #20]
 800cae4:	6125      	str	r5, [r4, #16]
 800cae6:	4620      	mov	r0, r4
 800cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caec:	0800e75f 	.word	0x0800e75f
 800caf0:	0800e7e1 	.word	0x0800e7e1

0800caf4 <__s2b>:
 800caf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	4615      	mov	r5, r2
 800cafc:	461f      	mov	r7, r3
 800cafe:	2209      	movs	r2, #9
 800cb00:	3308      	adds	r3, #8
 800cb02:	4606      	mov	r6, r0
 800cb04:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb08:	2100      	movs	r1, #0
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	db09      	blt.n	800cb24 <__s2b+0x30>
 800cb10:	4630      	mov	r0, r6
 800cb12:	f7ff ff47 	bl	800c9a4 <_Balloc>
 800cb16:	b940      	cbnz	r0, 800cb2a <__s2b+0x36>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	4b19      	ldr	r3, [pc, #100]	@ (800cb80 <__s2b+0x8c>)
 800cb1c:	4819      	ldr	r0, [pc, #100]	@ (800cb84 <__s2b+0x90>)
 800cb1e:	21d3      	movs	r1, #211	@ 0xd3
 800cb20:	f000 fcd6 	bl	800d4d0 <__assert_func>
 800cb24:	0052      	lsls	r2, r2, #1
 800cb26:	3101      	adds	r1, #1
 800cb28:	e7f0      	b.n	800cb0c <__s2b+0x18>
 800cb2a:	9b08      	ldr	r3, [sp, #32]
 800cb2c:	6143      	str	r3, [r0, #20]
 800cb2e:	2d09      	cmp	r5, #9
 800cb30:	f04f 0301 	mov.w	r3, #1
 800cb34:	6103      	str	r3, [r0, #16]
 800cb36:	dd16      	ble.n	800cb66 <__s2b+0x72>
 800cb38:	f104 0909 	add.w	r9, r4, #9
 800cb3c:	46c8      	mov	r8, r9
 800cb3e:	442c      	add	r4, r5
 800cb40:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb44:	4601      	mov	r1, r0
 800cb46:	3b30      	subs	r3, #48	@ 0x30
 800cb48:	220a      	movs	r2, #10
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f7ff ff8c 	bl	800ca68 <__multadd>
 800cb50:	45a0      	cmp	r8, r4
 800cb52:	d1f5      	bne.n	800cb40 <__s2b+0x4c>
 800cb54:	f1a5 0408 	sub.w	r4, r5, #8
 800cb58:	444c      	add	r4, r9
 800cb5a:	1b2d      	subs	r5, r5, r4
 800cb5c:	1963      	adds	r3, r4, r5
 800cb5e:	42bb      	cmp	r3, r7
 800cb60:	db04      	blt.n	800cb6c <__s2b+0x78>
 800cb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb66:	340a      	adds	r4, #10
 800cb68:	2509      	movs	r5, #9
 800cb6a:	e7f6      	b.n	800cb5a <__s2b+0x66>
 800cb6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb70:	4601      	mov	r1, r0
 800cb72:	3b30      	subs	r3, #48	@ 0x30
 800cb74:	220a      	movs	r2, #10
 800cb76:	4630      	mov	r0, r6
 800cb78:	f7ff ff76 	bl	800ca68 <__multadd>
 800cb7c:	e7ee      	b.n	800cb5c <__s2b+0x68>
 800cb7e:	bf00      	nop
 800cb80:	0800e75f 	.word	0x0800e75f
 800cb84:	0800e7e1 	.word	0x0800e7e1

0800cb88 <__hi0bits>:
 800cb88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	bf36      	itet	cc
 800cb90:	0403      	lslcc	r3, r0, #16
 800cb92:	2000      	movcs	r0, #0
 800cb94:	2010      	movcc	r0, #16
 800cb96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb9a:	bf3c      	itt	cc
 800cb9c:	021b      	lslcc	r3, r3, #8
 800cb9e:	3008      	addcc	r0, #8
 800cba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cba4:	bf3c      	itt	cc
 800cba6:	011b      	lslcc	r3, r3, #4
 800cba8:	3004      	addcc	r0, #4
 800cbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbae:	bf3c      	itt	cc
 800cbb0:	009b      	lslcc	r3, r3, #2
 800cbb2:	3002      	addcc	r0, #2
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	db05      	blt.n	800cbc4 <__hi0bits+0x3c>
 800cbb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cbbc:	f100 0001 	add.w	r0, r0, #1
 800cbc0:	bf08      	it	eq
 800cbc2:	2020      	moveq	r0, #32
 800cbc4:	4770      	bx	lr

0800cbc6 <__lo0bits>:
 800cbc6:	6803      	ldr	r3, [r0, #0]
 800cbc8:	4602      	mov	r2, r0
 800cbca:	f013 0007 	ands.w	r0, r3, #7
 800cbce:	d00b      	beq.n	800cbe8 <__lo0bits+0x22>
 800cbd0:	07d9      	lsls	r1, r3, #31
 800cbd2:	d421      	bmi.n	800cc18 <__lo0bits+0x52>
 800cbd4:	0798      	lsls	r0, r3, #30
 800cbd6:	bf49      	itett	mi
 800cbd8:	085b      	lsrmi	r3, r3, #1
 800cbda:	089b      	lsrpl	r3, r3, #2
 800cbdc:	2001      	movmi	r0, #1
 800cbde:	6013      	strmi	r3, [r2, #0]
 800cbe0:	bf5c      	itt	pl
 800cbe2:	6013      	strpl	r3, [r2, #0]
 800cbe4:	2002      	movpl	r0, #2
 800cbe6:	4770      	bx	lr
 800cbe8:	b299      	uxth	r1, r3
 800cbea:	b909      	cbnz	r1, 800cbf0 <__lo0bits+0x2a>
 800cbec:	0c1b      	lsrs	r3, r3, #16
 800cbee:	2010      	movs	r0, #16
 800cbf0:	b2d9      	uxtb	r1, r3
 800cbf2:	b909      	cbnz	r1, 800cbf8 <__lo0bits+0x32>
 800cbf4:	3008      	adds	r0, #8
 800cbf6:	0a1b      	lsrs	r3, r3, #8
 800cbf8:	0719      	lsls	r1, r3, #28
 800cbfa:	bf04      	itt	eq
 800cbfc:	091b      	lsreq	r3, r3, #4
 800cbfe:	3004      	addeq	r0, #4
 800cc00:	0799      	lsls	r1, r3, #30
 800cc02:	bf04      	itt	eq
 800cc04:	089b      	lsreq	r3, r3, #2
 800cc06:	3002      	addeq	r0, #2
 800cc08:	07d9      	lsls	r1, r3, #31
 800cc0a:	d403      	bmi.n	800cc14 <__lo0bits+0x4e>
 800cc0c:	085b      	lsrs	r3, r3, #1
 800cc0e:	f100 0001 	add.w	r0, r0, #1
 800cc12:	d003      	beq.n	800cc1c <__lo0bits+0x56>
 800cc14:	6013      	str	r3, [r2, #0]
 800cc16:	4770      	bx	lr
 800cc18:	2000      	movs	r0, #0
 800cc1a:	4770      	bx	lr
 800cc1c:	2020      	movs	r0, #32
 800cc1e:	4770      	bx	lr

0800cc20 <__i2b>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	460c      	mov	r4, r1
 800cc24:	2101      	movs	r1, #1
 800cc26:	f7ff febd 	bl	800c9a4 <_Balloc>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	b928      	cbnz	r0, 800cc3a <__i2b+0x1a>
 800cc2e:	4b05      	ldr	r3, [pc, #20]	@ (800cc44 <__i2b+0x24>)
 800cc30:	4805      	ldr	r0, [pc, #20]	@ (800cc48 <__i2b+0x28>)
 800cc32:	f240 1145 	movw	r1, #325	@ 0x145
 800cc36:	f000 fc4b 	bl	800d4d0 <__assert_func>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	6144      	str	r4, [r0, #20]
 800cc3e:	6103      	str	r3, [r0, #16]
 800cc40:	bd10      	pop	{r4, pc}
 800cc42:	bf00      	nop
 800cc44:	0800e75f 	.word	0x0800e75f
 800cc48:	0800e7e1 	.word	0x0800e7e1

0800cc4c <__multiply>:
 800cc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc50:	4617      	mov	r7, r2
 800cc52:	690a      	ldr	r2, [r1, #16]
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	bfa8      	it	ge
 800cc5a:	463b      	movge	r3, r7
 800cc5c:	4689      	mov	r9, r1
 800cc5e:	bfa4      	itt	ge
 800cc60:	460f      	movge	r7, r1
 800cc62:	4699      	movge	r9, r3
 800cc64:	693d      	ldr	r5, [r7, #16]
 800cc66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	6879      	ldr	r1, [r7, #4]
 800cc6e:	eb05 060a 	add.w	r6, r5, sl
 800cc72:	42b3      	cmp	r3, r6
 800cc74:	b085      	sub	sp, #20
 800cc76:	bfb8      	it	lt
 800cc78:	3101      	addlt	r1, #1
 800cc7a:	f7ff fe93 	bl	800c9a4 <_Balloc>
 800cc7e:	b930      	cbnz	r0, 800cc8e <__multiply+0x42>
 800cc80:	4602      	mov	r2, r0
 800cc82:	4b41      	ldr	r3, [pc, #260]	@ (800cd88 <__multiply+0x13c>)
 800cc84:	4841      	ldr	r0, [pc, #260]	@ (800cd8c <__multiply+0x140>)
 800cc86:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc8a:	f000 fc21 	bl	800d4d0 <__assert_func>
 800cc8e:	f100 0414 	add.w	r4, r0, #20
 800cc92:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cc96:	4623      	mov	r3, r4
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4573      	cmp	r3, lr
 800cc9c:	d320      	bcc.n	800cce0 <__multiply+0x94>
 800cc9e:	f107 0814 	add.w	r8, r7, #20
 800cca2:	f109 0114 	add.w	r1, r9, #20
 800cca6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ccaa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ccae:	9302      	str	r3, [sp, #8]
 800ccb0:	1beb      	subs	r3, r5, r7
 800ccb2:	3b15      	subs	r3, #21
 800ccb4:	f023 0303 	bic.w	r3, r3, #3
 800ccb8:	3304      	adds	r3, #4
 800ccba:	3715      	adds	r7, #21
 800ccbc:	42bd      	cmp	r5, r7
 800ccbe:	bf38      	it	cc
 800ccc0:	2304      	movcc	r3, #4
 800ccc2:	9301      	str	r3, [sp, #4]
 800ccc4:	9b02      	ldr	r3, [sp, #8]
 800ccc6:	9103      	str	r1, [sp, #12]
 800ccc8:	428b      	cmp	r3, r1
 800ccca:	d80c      	bhi.n	800cce6 <__multiply+0x9a>
 800cccc:	2e00      	cmp	r6, #0
 800ccce:	dd03      	ble.n	800ccd8 <__multiply+0x8c>
 800ccd0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d055      	beq.n	800cd84 <__multiply+0x138>
 800ccd8:	6106      	str	r6, [r0, #16]
 800ccda:	b005      	add	sp, #20
 800ccdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce0:	f843 2b04 	str.w	r2, [r3], #4
 800cce4:	e7d9      	b.n	800cc9a <__multiply+0x4e>
 800cce6:	f8b1 a000 	ldrh.w	sl, [r1]
 800ccea:	f1ba 0f00 	cmp.w	sl, #0
 800ccee:	d01f      	beq.n	800cd30 <__multiply+0xe4>
 800ccf0:	46c4      	mov	ip, r8
 800ccf2:	46a1      	mov	r9, r4
 800ccf4:	2700      	movs	r7, #0
 800ccf6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccfa:	f8d9 3000 	ldr.w	r3, [r9]
 800ccfe:	fa1f fb82 	uxth.w	fp, r2
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd08:	443b      	add	r3, r7
 800cd0a:	f8d9 7000 	ldr.w	r7, [r9]
 800cd0e:	0c12      	lsrs	r2, r2, #16
 800cd10:	0c3f      	lsrs	r7, r7, #16
 800cd12:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd16:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd20:	4565      	cmp	r5, ip
 800cd22:	f849 3b04 	str.w	r3, [r9], #4
 800cd26:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cd2a:	d8e4      	bhi.n	800ccf6 <__multiply+0xaa>
 800cd2c:	9b01      	ldr	r3, [sp, #4]
 800cd2e:	50e7      	str	r7, [r4, r3]
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd36:	3104      	adds	r1, #4
 800cd38:	f1b9 0f00 	cmp.w	r9, #0
 800cd3c:	d020      	beq.n	800cd80 <__multiply+0x134>
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	4647      	mov	r7, r8
 800cd42:	46a4      	mov	ip, r4
 800cd44:	f04f 0a00 	mov.w	sl, #0
 800cd48:	f8b7 b000 	ldrh.w	fp, [r7]
 800cd4c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cd50:	fb09 220b 	mla	r2, r9, fp, r2
 800cd54:	4452      	add	r2, sl
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd5c:	f84c 3b04 	str.w	r3, [ip], #4
 800cd60:	f857 3b04 	ldr.w	r3, [r7], #4
 800cd64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd68:	f8bc 3000 	ldrh.w	r3, [ip]
 800cd6c:	fb09 330a 	mla	r3, r9, sl, r3
 800cd70:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cd74:	42bd      	cmp	r5, r7
 800cd76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd7a:	d8e5      	bhi.n	800cd48 <__multiply+0xfc>
 800cd7c:	9a01      	ldr	r2, [sp, #4]
 800cd7e:	50a3      	str	r3, [r4, r2]
 800cd80:	3404      	adds	r4, #4
 800cd82:	e79f      	b.n	800ccc4 <__multiply+0x78>
 800cd84:	3e01      	subs	r6, #1
 800cd86:	e7a1      	b.n	800cccc <__multiply+0x80>
 800cd88:	0800e75f 	.word	0x0800e75f
 800cd8c:	0800e7e1 	.word	0x0800e7e1

0800cd90 <__pow5mult>:
 800cd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd94:	4615      	mov	r5, r2
 800cd96:	f012 0203 	ands.w	r2, r2, #3
 800cd9a:	4607      	mov	r7, r0
 800cd9c:	460e      	mov	r6, r1
 800cd9e:	d007      	beq.n	800cdb0 <__pow5mult+0x20>
 800cda0:	4c25      	ldr	r4, [pc, #148]	@ (800ce38 <__pow5mult+0xa8>)
 800cda2:	3a01      	subs	r2, #1
 800cda4:	2300      	movs	r3, #0
 800cda6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdaa:	f7ff fe5d 	bl	800ca68 <__multadd>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	10ad      	asrs	r5, r5, #2
 800cdb2:	d03d      	beq.n	800ce30 <__pow5mult+0xa0>
 800cdb4:	69fc      	ldr	r4, [r7, #28]
 800cdb6:	b97c      	cbnz	r4, 800cdd8 <__pow5mult+0x48>
 800cdb8:	2010      	movs	r0, #16
 800cdba:	f7ff fc7f 	bl	800c6bc <malloc>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	61f8      	str	r0, [r7, #28]
 800cdc2:	b928      	cbnz	r0, 800cdd0 <__pow5mult+0x40>
 800cdc4:	4b1d      	ldr	r3, [pc, #116]	@ (800ce3c <__pow5mult+0xac>)
 800cdc6:	481e      	ldr	r0, [pc, #120]	@ (800ce40 <__pow5mult+0xb0>)
 800cdc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdcc:	f000 fb80 	bl	800d4d0 <__assert_func>
 800cdd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdd4:	6004      	str	r4, [r0, #0]
 800cdd6:	60c4      	str	r4, [r0, #12]
 800cdd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cde0:	b94c      	cbnz	r4, 800cdf6 <__pow5mult+0x66>
 800cde2:	f240 2171 	movw	r1, #625	@ 0x271
 800cde6:	4638      	mov	r0, r7
 800cde8:	f7ff ff1a 	bl	800cc20 <__i2b>
 800cdec:	2300      	movs	r3, #0
 800cdee:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	6003      	str	r3, [r0, #0]
 800cdf6:	f04f 0900 	mov.w	r9, #0
 800cdfa:	07eb      	lsls	r3, r5, #31
 800cdfc:	d50a      	bpl.n	800ce14 <__pow5mult+0x84>
 800cdfe:	4631      	mov	r1, r6
 800ce00:	4622      	mov	r2, r4
 800ce02:	4638      	mov	r0, r7
 800ce04:	f7ff ff22 	bl	800cc4c <__multiply>
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4680      	mov	r8, r0
 800ce0c:	4638      	mov	r0, r7
 800ce0e:	f7ff fe09 	bl	800ca24 <_Bfree>
 800ce12:	4646      	mov	r6, r8
 800ce14:	106d      	asrs	r5, r5, #1
 800ce16:	d00b      	beq.n	800ce30 <__pow5mult+0xa0>
 800ce18:	6820      	ldr	r0, [r4, #0]
 800ce1a:	b938      	cbnz	r0, 800ce2c <__pow5mult+0x9c>
 800ce1c:	4622      	mov	r2, r4
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4638      	mov	r0, r7
 800ce22:	f7ff ff13 	bl	800cc4c <__multiply>
 800ce26:	6020      	str	r0, [r4, #0]
 800ce28:	f8c0 9000 	str.w	r9, [r0]
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	e7e4      	b.n	800cdfa <__pow5mult+0x6a>
 800ce30:	4630      	mov	r0, r6
 800ce32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce36:	bf00      	nop
 800ce38:	0800e9cc 	.word	0x0800e9cc
 800ce3c:	0800e6f0 	.word	0x0800e6f0
 800ce40:	0800e7e1 	.word	0x0800e7e1

0800ce44 <__lshift>:
 800ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce48:	460c      	mov	r4, r1
 800ce4a:	6849      	ldr	r1, [r1, #4]
 800ce4c:	6923      	ldr	r3, [r4, #16]
 800ce4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce52:	68a3      	ldr	r3, [r4, #8]
 800ce54:	4607      	mov	r7, r0
 800ce56:	4691      	mov	r9, r2
 800ce58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce5c:	f108 0601 	add.w	r6, r8, #1
 800ce60:	42b3      	cmp	r3, r6
 800ce62:	db0b      	blt.n	800ce7c <__lshift+0x38>
 800ce64:	4638      	mov	r0, r7
 800ce66:	f7ff fd9d 	bl	800c9a4 <_Balloc>
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	b948      	cbnz	r0, 800ce82 <__lshift+0x3e>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	4b28      	ldr	r3, [pc, #160]	@ (800cf14 <__lshift+0xd0>)
 800ce72:	4829      	ldr	r0, [pc, #164]	@ (800cf18 <__lshift+0xd4>)
 800ce74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce78:	f000 fb2a 	bl	800d4d0 <__assert_func>
 800ce7c:	3101      	adds	r1, #1
 800ce7e:	005b      	lsls	r3, r3, #1
 800ce80:	e7ee      	b.n	800ce60 <__lshift+0x1c>
 800ce82:	2300      	movs	r3, #0
 800ce84:	f100 0114 	add.w	r1, r0, #20
 800ce88:	f100 0210 	add.w	r2, r0, #16
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	4553      	cmp	r3, sl
 800ce90:	db33      	blt.n	800cefa <__lshift+0xb6>
 800ce92:	6920      	ldr	r0, [r4, #16]
 800ce94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce98:	f104 0314 	add.w	r3, r4, #20
 800ce9c:	f019 091f 	ands.w	r9, r9, #31
 800cea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cea4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cea8:	d02b      	beq.n	800cf02 <__lshift+0xbe>
 800ceaa:	f1c9 0e20 	rsb	lr, r9, #32
 800ceae:	468a      	mov	sl, r1
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	fa00 f009 	lsl.w	r0, r0, r9
 800ceb8:	4310      	orrs	r0, r2
 800ceba:	f84a 0b04 	str.w	r0, [sl], #4
 800cebe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cec2:	459c      	cmp	ip, r3
 800cec4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cec8:	d8f3      	bhi.n	800ceb2 <__lshift+0x6e>
 800ceca:	ebac 0304 	sub.w	r3, ip, r4
 800cece:	3b15      	subs	r3, #21
 800ced0:	f023 0303 	bic.w	r3, r3, #3
 800ced4:	3304      	adds	r3, #4
 800ced6:	f104 0015 	add.w	r0, r4, #21
 800ceda:	4560      	cmp	r0, ip
 800cedc:	bf88      	it	hi
 800cede:	2304      	movhi	r3, #4
 800cee0:	50ca      	str	r2, [r1, r3]
 800cee2:	b10a      	cbz	r2, 800cee8 <__lshift+0xa4>
 800cee4:	f108 0602 	add.w	r6, r8, #2
 800cee8:	3e01      	subs	r6, #1
 800ceea:	4638      	mov	r0, r7
 800ceec:	612e      	str	r6, [r5, #16]
 800ceee:	4621      	mov	r1, r4
 800cef0:	f7ff fd98 	bl	800ca24 <_Bfree>
 800cef4:	4628      	mov	r0, r5
 800cef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cefa:	f842 0f04 	str.w	r0, [r2, #4]!
 800cefe:	3301      	adds	r3, #1
 800cf00:	e7c5      	b.n	800ce8e <__lshift+0x4a>
 800cf02:	3904      	subs	r1, #4
 800cf04:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf08:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf0c:	459c      	cmp	ip, r3
 800cf0e:	d8f9      	bhi.n	800cf04 <__lshift+0xc0>
 800cf10:	e7ea      	b.n	800cee8 <__lshift+0xa4>
 800cf12:	bf00      	nop
 800cf14:	0800e75f 	.word	0x0800e75f
 800cf18:	0800e7e1 	.word	0x0800e7e1

0800cf1c <__mcmp>:
 800cf1c:	690a      	ldr	r2, [r1, #16]
 800cf1e:	4603      	mov	r3, r0
 800cf20:	6900      	ldr	r0, [r0, #16]
 800cf22:	1a80      	subs	r0, r0, r2
 800cf24:	b530      	push	{r4, r5, lr}
 800cf26:	d10e      	bne.n	800cf46 <__mcmp+0x2a>
 800cf28:	3314      	adds	r3, #20
 800cf2a:	3114      	adds	r1, #20
 800cf2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf3c:	4295      	cmp	r5, r2
 800cf3e:	d003      	beq.n	800cf48 <__mcmp+0x2c>
 800cf40:	d205      	bcs.n	800cf4e <__mcmp+0x32>
 800cf42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf46:	bd30      	pop	{r4, r5, pc}
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	d3f3      	bcc.n	800cf34 <__mcmp+0x18>
 800cf4c:	e7fb      	b.n	800cf46 <__mcmp+0x2a>
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e7f9      	b.n	800cf46 <__mcmp+0x2a>
	...

0800cf54 <__mdiff>:
 800cf54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf58:	4689      	mov	r9, r1
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	4648      	mov	r0, r9
 800cf60:	4614      	mov	r4, r2
 800cf62:	f7ff ffdb 	bl	800cf1c <__mcmp>
 800cf66:	1e05      	subs	r5, r0, #0
 800cf68:	d112      	bne.n	800cf90 <__mdiff+0x3c>
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	f7ff fd19 	bl	800c9a4 <_Balloc>
 800cf72:	4602      	mov	r2, r0
 800cf74:	b928      	cbnz	r0, 800cf82 <__mdiff+0x2e>
 800cf76:	4b3f      	ldr	r3, [pc, #252]	@ (800d074 <__mdiff+0x120>)
 800cf78:	f240 2137 	movw	r1, #567	@ 0x237
 800cf7c:	483e      	ldr	r0, [pc, #248]	@ (800d078 <__mdiff+0x124>)
 800cf7e:	f000 faa7 	bl	800d4d0 <__assert_func>
 800cf82:	2301      	movs	r3, #1
 800cf84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf88:	4610      	mov	r0, r2
 800cf8a:	b003      	add	sp, #12
 800cf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf90:	bfbc      	itt	lt
 800cf92:	464b      	movlt	r3, r9
 800cf94:	46a1      	movlt	r9, r4
 800cf96:	4630      	mov	r0, r6
 800cf98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf9c:	bfba      	itte	lt
 800cf9e:	461c      	movlt	r4, r3
 800cfa0:	2501      	movlt	r5, #1
 800cfa2:	2500      	movge	r5, #0
 800cfa4:	f7ff fcfe 	bl	800c9a4 <_Balloc>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	b918      	cbnz	r0, 800cfb4 <__mdiff+0x60>
 800cfac:	4b31      	ldr	r3, [pc, #196]	@ (800d074 <__mdiff+0x120>)
 800cfae:	f240 2145 	movw	r1, #581	@ 0x245
 800cfb2:	e7e3      	b.n	800cf7c <__mdiff+0x28>
 800cfb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfb8:	6926      	ldr	r6, [r4, #16]
 800cfba:	60c5      	str	r5, [r0, #12]
 800cfbc:	f109 0310 	add.w	r3, r9, #16
 800cfc0:	f109 0514 	add.w	r5, r9, #20
 800cfc4:	f104 0e14 	add.w	lr, r4, #20
 800cfc8:	f100 0b14 	add.w	fp, r0, #20
 800cfcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cfd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cfd4:	9301      	str	r3, [sp, #4]
 800cfd6:	46d9      	mov	r9, fp
 800cfd8:	f04f 0c00 	mov.w	ip, #0
 800cfdc:	9b01      	ldr	r3, [sp, #4]
 800cfde:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cfe2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cfe6:	9301      	str	r3, [sp, #4]
 800cfe8:	fa1f f38a 	uxth.w	r3, sl
 800cfec:	4619      	mov	r1, r3
 800cfee:	b283      	uxth	r3, r0
 800cff0:	1acb      	subs	r3, r1, r3
 800cff2:	0c00      	lsrs	r0, r0, #16
 800cff4:	4463      	add	r3, ip
 800cff6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cffa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cffe:	b29b      	uxth	r3, r3
 800d000:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d004:	4576      	cmp	r6, lr
 800d006:	f849 3b04 	str.w	r3, [r9], #4
 800d00a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d00e:	d8e5      	bhi.n	800cfdc <__mdiff+0x88>
 800d010:	1b33      	subs	r3, r6, r4
 800d012:	3b15      	subs	r3, #21
 800d014:	f023 0303 	bic.w	r3, r3, #3
 800d018:	3415      	adds	r4, #21
 800d01a:	3304      	adds	r3, #4
 800d01c:	42a6      	cmp	r6, r4
 800d01e:	bf38      	it	cc
 800d020:	2304      	movcc	r3, #4
 800d022:	441d      	add	r5, r3
 800d024:	445b      	add	r3, fp
 800d026:	461e      	mov	r6, r3
 800d028:	462c      	mov	r4, r5
 800d02a:	4544      	cmp	r4, r8
 800d02c:	d30e      	bcc.n	800d04c <__mdiff+0xf8>
 800d02e:	f108 0103 	add.w	r1, r8, #3
 800d032:	1b49      	subs	r1, r1, r5
 800d034:	f021 0103 	bic.w	r1, r1, #3
 800d038:	3d03      	subs	r5, #3
 800d03a:	45a8      	cmp	r8, r5
 800d03c:	bf38      	it	cc
 800d03e:	2100      	movcc	r1, #0
 800d040:	440b      	add	r3, r1
 800d042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d046:	b191      	cbz	r1, 800d06e <__mdiff+0x11a>
 800d048:	6117      	str	r7, [r2, #16]
 800d04a:	e79d      	b.n	800cf88 <__mdiff+0x34>
 800d04c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d050:	46e6      	mov	lr, ip
 800d052:	0c08      	lsrs	r0, r1, #16
 800d054:	fa1c fc81 	uxtah	ip, ip, r1
 800d058:	4471      	add	r1, lr
 800d05a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d05e:	b289      	uxth	r1, r1
 800d060:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d064:	f846 1b04 	str.w	r1, [r6], #4
 800d068:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d06c:	e7dd      	b.n	800d02a <__mdiff+0xd6>
 800d06e:	3f01      	subs	r7, #1
 800d070:	e7e7      	b.n	800d042 <__mdiff+0xee>
 800d072:	bf00      	nop
 800d074:	0800e75f 	.word	0x0800e75f
 800d078:	0800e7e1 	.word	0x0800e7e1

0800d07c <__ulp>:
 800d07c:	b082      	sub	sp, #8
 800d07e:	ed8d 0b00 	vstr	d0, [sp]
 800d082:	9a01      	ldr	r2, [sp, #4]
 800d084:	4b0f      	ldr	r3, [pc, #60]	@ (800d0c4 <__ulp+0x48>)
 800d086:	4013      	ands	r3, r2
 800d088:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	dc08      	bgt.n	800d0a2 <__ulp+0x26>
 800d090:	425b      	negs	r3, r3
 800d092:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d096:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d09a:	da04      	bge.n	800d0a6 <__ulp+0x2a>
 800d09c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d0a0:	4113      	asrs	r3, r2
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	e008      	b.n	800d0b8 <__ulp+0x3c>
 800d0a6:	f1a2 0314 	sub.w	r3, r2, #20
 800d0aa:	2b1e      	cmp	r3, #30
 800d0ac:	bfda      	itte	le
 800d0ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d0b2:	40da      	lsrle	r2, r3
 800d0b4:	2201      	movgt	r2, #1
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	4610      	mov	r0, r2
 800d0bc:	ec41 0b10 	vmov	d0, r0, r1
 800d0c0:	b002      	add	sp, #8
 800d0c2:	4770      	bx	lr
 800d0c4:	7ff00000 	.word	0x7ff00000

0800d0c8 <__b2d>:
 800d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0cc:	6906      	ldr	r6, [r0, #16]
 800d0ce:	f100 0814 	add.w	r8, r0, #20
 800d0d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d0d6:	1f37      	subs	r7, r6, #4
 800d0d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d0dc:	4610      	mov	r0, r2
 800d0de:	f7ff fd53 	bl	800cb88 <__hi0bits>
 800d0e2:	f1c0 0320 	rsb	r3, r0, #32
 800d0e6:	280a      	cmp	r0, #10
 800d0e8:	600b      	str	r3, [r1, #0]
 800d0ea:	491b      	ldr	r1, [pc, #108]	@ (800d158 <__b2d+0x90>)
 800d0ec:	dc15      	bgt.n	800d11a <__b2d+0x52>
 800d0ee:	f1c0 0c0b 	rsb	ip, r0, #11
 800d0f2:	fa22 f30c 	lsr.w	r3, r2, ip
 800d0f6:	45b8      	cmp	r8, r7
 800d0f8:	ea43 0501 	orr.w	r5, r3, r1
 800d0fc:	bf34      	ite	cc
 800d0fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d102:	2300      	movcs	r3, #0
 800d104:	3015      	adds	r0, #21
 800d106:	fa02 f000 	lsl.w	r0, r2, r0
 800d10a:	fa23 f30c 	lsr.w	r3, r3, ip
 800d10e:	4303      	orrs	r3, r0
 800d110:	461c      	mov	r4, r3
 800d112:	ec45 4b10 	vmov	d0, r4, r5
 800d116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11a:	45b8      	cmp	r8, r7
 800d11c:	bf3a      	itte	cc
 800d11e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d122:	f1a6 0708 	subcc.w	r7, r6, #8
 800d126:	2300      	movcs	r3, #0
 800d128:	380b      	subs	r0, #11
 800d12a:	d012      	beq.n	800d152 <__b2d+0x8a>
 800d12c:	f1c0 0120 	rsb	r1, r0, #32
 800d130:	fa23 f401 	lsr.w	r4, r3, r1
 800d134:	4082      	lsls	r2, r0
 800d136:	4322      	orrs	r2, r4
 800d138:	4547      	cmp	r7, r8
 800d13a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d13e:	bf8c      	ite	hi
 800d140:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d144:	2200      	movls	r2, #0
 800d146:	4083      	lsls	r3, r0
 800d148:	40ca      	lsrs	r2, r1
 800d14a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d14e:	4313      	orrs	r3, r2
 800d150:	e7de      	b.n	800d110 <__b2d+0x48>
 800d152:	ea42 0501 	orr.w	r5, r2, r1
 800d156:	e7db      	b.n	800d110 <__b2d+0x48>
 800d158:	3ff00000 	.word	0x3ff00000

0800d15c <__d2b>:
 800d15c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d160:	460f      	mov	r7, r1
 800d162:	2101      	movs	r1, #1
 800d164:	ec59 8b10 	vmov	r8, r9, d0
 800d168:	4616      	mov	r6, r2
 800d16a:	f7ff fc1b 	bl	800c9a4 <_Balloc>
 800d16e:	4604      	mov	r4, r0
 800d170:	b930      	cbnz	r0, 800d180 <__d2b+0x24>
 800d172:	4602      	mov	r2, r0
 800d174:	4b23      	ldr	r3, [pc, #140]	@ (800d204 <__d2b+0xa8>)
 800d176:	4824      	ldr	r0, [pc, #144]	@ (800d208 <__d2b+0xac>)
 800d178:	f240 310f 	movw	r1, #783	@ 0x30f
 800d17c:	f000 f9a8 	bl	800d4d0 <__assert_func>
 800d180:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d184:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d188:	b10d      	cbz	r5, 800d18e <__d2b+0x32>
 800d18a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	f1b8 0300 	subs.w	r3, r8, #0
 800d194:	d023      	beq.n	800d1de <__d2b+0x82>
 800d196:	4668      	mov	r0, sp
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	f7ff fd14 	bl	800cbc6 <__lo0bits>
 800d19e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1a2:	b1d0      	cbz	r0, 800d1da <__d2b+0x7e>
 800d1a4:	f1c0 0320 	rsb	r3, r0, #32
 800d1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ac:	430b      	orrs	r3, r1
 800d1ae:	40c2      	lsrs	r2, r0
 800d1b0:	6163      	str	r3, [r4, #20]
 800d1b2:	9201      	str	r2, [sp, #4]
 800d1b4:	9b01      	ldr	r3, [sp, #4]
 800d1b6:	61a3      	str	r3, [r4, #24]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	bf0c      	ite	eq
 800d1bc:	2201      	moveq	r2, #1
 800d1be:	2202      	movne	r2, #2
 800d1c0:	6122      	str	r2, [r4, #16]
 800d1c2:	b1a5      	cbz	r5, 800d1ee <__d2b+0x92>
 800d1c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d1c8:	4405      	add	r5, r0
 800d1ca:	603d      	str	r5, [r7, #0]
 800d1cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d1d0:	6030      	str	r0, [r6, #0]
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	b003      	add	sp, #12
 800d1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1da:	6161      	str	r1, [r4, #20]
 800d1dc:	e7ea      	b.n	800d1b4 <__d2b+0x58>
 800d1de:	a801      	add	r0, sp, #4
 800d1e0:	f7ff fcf1 	bl	800cbc6 <__lo0bits>
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	6163      	str	r3, [r4, #20]
 800d1e8:	3020      	adds	r0, #32
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	e7e8      	b.n	800d1c0 <__d2b+0x64>
 800d1ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d1f6:	6038      	str	r0, [r7, #0]
 800d1f8:	6918      	ldr	r0, [r3, #16]
 800d1fa:	f7ff fcc5 	bl	800cb88 <__hi0bits>
 800d1fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d202:	e7e5      	b.n	800d1d0 <__d2b+0x74>
 800d204:	0800e75f 	.word	0x0800e75f
 800d208:	0800e7e1 	.word	0x0800e7e1

0800d20c <__ratio>:
 800d20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d210:	4688      	mov	r8, r1
 800d212:	4669      	mov	r1, sp
 800d214:	4681      	mov	r9, r0
 800d216:	f7ff ff57 	bl	800d0c8 <__b2d>
 800d21a:	a901      	add	r1, sp, #4
 800d21c:	4640      	mov	r0, r8
 800d21e:	ec55 4b10 	vmov	r4, r5, d0
 800d222:	f7ff ff51 	bl	800d0c8 <__b2d>
 800d226:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d22a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d22e:	1ad2      	subs	r2, r2, r3
 800d230:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d234:	1a5b      	subs	r3, r3, r1
 800d236:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d23a:	ec57 6b10 	vmov	r6, r7, d0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	bfd6      	itet	le
 800d242:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d246:	462a      	movgt	r2, r5
 800d248:	463a      	movle	r2, r7
 800d24a:	46ab      	mov	fp, r5
 800d24c:	46a2      	mov	sl, r4
 800d24e:	bfce      	itee	gt
 800d250:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d254:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d258:	ee00 3a90 	vmovle	s1, r3
 800d25c:	ec4b ab17 	vmov	d7, sl, fp
 800d260:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d264:	b003      	add	sp, #12
 800d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d26a <__copybits>:
 800d26a:	3901      	subs	r1, #1
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	1149      	asrs	r1, r1, #5
 800d270:	6914      	ldr	r4, [r2, #16]
 800d272:	3101      	adds	r1, #1
 800d274:	f102 0314 	add.w	r3, r2, #20
 800d278:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d27c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d280:	1f05      	subs	r5, r0, #4
 800d282:	42a3      	cmp	r3, r4
 800d284:	d30c      	bcc.n	800d2a0 <__copybits+0x36>
 800d286:	1aa3      	subs	r3, r4, r2
 800d288:	3b11      	subs	r3, #17
 800d28a:	f023 0303 	bic.w	r3, r3, #3
 800d28e:	3211      	adds	r2, #17
 800d290:	42a2      	cmp	r2, r4
 800d292:	bf88      	it	hi
 800d294:	2300      	movhi	r3, #0
 800d296:	4418      	add	r0, r3
 800d298:	2300      	movs	r3, #0
 800d29a:	4288      	cmp	r0, r1
 800d29c:	d305      	bcc.n	800d2aa <__copybits+0x40>
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d2a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d2a8:	e7eb      	b.n	800d282 <__copybits+0x18>
 800d2aa:	f840 3b04 	str.w	r3, [r0], #4
 800d2ae:	e7f4      	b.n	800d29a <__copybits+0x30>

0800d2b0 <__any_on>:
 800d2b0:	f100 0214 	add.w	r2, r0, #20
 800d2b4:	6900      	ldr	r0, [r0, #16]
 800d2b6:	114b      	asrs	r3, r1, #5
 800d2b8:	4298      	cmp	r0, r3
 800d2ba:	b510      	push	{r4, lr}
 800d2bc:	db11      	blt.n	800d2e2 <__any_on+0x32>
 800d2be:	dd0a      	ble.n	800d2d6 <__any_on+0x26>
 800d2c0:	f011 011f 	ands.w	r1, r1, #31
 800d2c4:	d007      	beq.n	800d2d6 <__any_on+0x26>
 800d2c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d2ca:	fa24 f001 	lsr.w	r0, r4, r1
 800d2ce:	fa00 f101 	lsl.w	r1, r0, r1
 800d2d2:	428c      	cmp	r4, r1
 800d2d4:	d10b      	bne.n	800d2ee <__any_on+0x3e>
 800d2d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d803      	bhi.n	800d2e6 <__any_on+0x36>
 800d2de:	2000      	movs	r0, #0
 800d2e0:	bd10      	pop	{r4, pc}
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	e7f7      	b.n	800d2d6 <__any_on+0x26>
 800d2e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d2ea:	2900      	cmp	r1, #0
 800d2ec:	d0f5      	beq.n	800d2da <__any_on+0x2a>
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	e7f6      	b.n	800d2e0 <__any_on+0x30>

0800d2f2 <__sread>:
 800d2f2:	b510      	push	{r4, lr}
 800d2f4:	460c      	mov	r4, r1
 800d2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2fa:	f000 f8a5 	bl	800d448 <_read_r>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	bfab      	itete	ge
 800d302:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d304:	89a3      	ldrhlt	r3, [r4, #12]
 800d306:	181b      	addge	r3, r3, r0
 800d308:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d30c:	bfac      	ite	ge
 800d30e:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d310:	81a3      	strhlt	r3, [r4, #12]
 800d312:	bd10      	pop	{r4, pc}

0800d314 <__swrite>:
 800d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	461f      	mov	r7, r3
 800d31a:	898b      	ldrh	r3, [r1, #12]
 800d31c:	05db      	lsls	r3, r3, #23
 800d31e:	4605      	mov	r5, r0
 800d320:	460c      	mov	r4, r1
 800d322:	4616      	mov	r6, r2
 800d324:	d505      	bpl.n	800d332 <__swrite+0x1e>
 800d326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32a:	2302      	movs	r3, #2
 800d32c:	2200      	movs	r2, #0
 800d32e:	f000 f879 	bl	800d424 <_lseek_r>
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d338:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d33c:	81a3      	strh	r3, [r4, #12]
 800d33e:	4632      	mov	r2, r6
 800d340:	463b      	mov	r3, r7
 800d342:	4628      	mov	r0, r5
 800d344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d348:	f000 b8a0 	b.w	800d48c <_write_r>

0800d34c <__sseek>:
 800d34c:	b510      	push	{r4, lr}
 800d34e:	460c      	mov	r4, r1
 800d350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d354:	f000 f866 	bl	800d424 <_lseek_r>
 800d358:	1c43      	adds	r3, r0, #1
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	bf15      	itete	ne
 800d35e:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d360:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d364:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d368:	81a3      	strheq	r3, [r4, #12]
 800d36a:	bf18      	it	ne
 800d36c:	81a3      	strhne	r3, [r4, #12]
 800d36e:	bd10      	pop	{r4, pc}

0800d370 <__sclose>:
 800d370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d374:	f000 b89c 	b.w	800d4b0 <_close_r>

0800d378 <_realloc_r>:
 800d378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d37c:	4607      	mov	r7, r0
 800d37e:	4614      	mov	r4, r2
 800d380:	460d      	mov	r5, r1
 800d382:	b921      	cbnz	r1, 800d38e <_realloc_r+0x16>
 800d384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d388:	4611      	mov	r1, r2
 800d38a:	f7ff b9c1 	b.w	800c710 <_malloc_r>
 800d38e:	b92a      	cbnz	r2, 800d39c <_realloc_r+0x24>
 800d390:	f000 f8d0 	bl	800d534 <_free_r>
 800d394:	4625      	mov	r5, r4
 800d396:	4628      	mov	r0, r5
 800d398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39c:	f000 f914 	bl	800d5c8 <_malloc_usable_size_r>
 800d3a0:	4284      	cmp	r4, r0
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	d802      	bhi.n	800d3ac <_realloc_r+0x34>
 800d3a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3aa:	d8f4      	bhi.n	800d396 <_realloc_r+0x1e>
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	f7ff f9ae 	bl	800c710 <_malloc_r>
 800d3b4:	4680      	mov	r8, r0
 800d3b6:	b908      	cbnz	r0, 800d3bc <_realloc_r+0x44>
 800d3b8:	4645      	mov	r5, r8
 800d3ba:	e7ec      	b.n	800d396 <_realloc_r+0x1e>
 800d3bc:	42b4      	cmp	r4, r6
 800d3be:	4622      	mov	r2, r4
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	bf28      	it	cs
 800d3c4:	4632      	movcs	r2, r6
 800d3c6:	f7fd fee5 	bl	800b194 <memcpy>
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	f000 f8b1 	bl	800d534 <_free_r>
 800d3d2:	e7f1      	b.n	800d3b8 <_realloc_r+0x40>

0800d3d4 <__ascii_wctomb>:
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	b141      	cbz	r1, 800d3ec <__ascii_wctomb+0x18>
 800d3da:	2aff      	cmp	r2, #255	@ 0xff
 800d3dc:	d904      	bls.n	800d3e8 <__ascii_wctomb+0x14>
 800d3de:	228a      	movs	r2, #138	@ 0x8a
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3e6:	4770      	bx	lr
 800d3e8:	700a      	strb	r2, [r1, #0]
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	4770      	bx	lr

0800d3ee <memmove>:
 800d3ee:	4288      	cmp	r0, r1
 800d3f0:	b510      	push	{r4, lr}
 800d3f2:	eb01 0402 	add.w	r4, r1, r2
 800d3f6:	d902      	bls.n	800d3fe <memmove+0x10>
 800d3f8:	4284      	cmp	r4, r0
 800d3fa:	4623      	mov	r3, r4
 800d3fc:	d807      	bhi.n	800d40e <memmove+0x20>
 800d3fe:	1e43      	subs	r3, r0, #1
 800d400:	42a1      	cmp	r1, r4
 800d402:	d008      	beq.n	800d416 <memmove+0x28>
 800d404:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d408:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d40c:	e7f8      	b.n	800d400 <memmove+0x12>
 800d40e:	4402      	add	r2, r0
 800d410:	4601      	mov	r1, r0
 800d412:	428a      	cmp	r2, r1
 800d414:	d100      	bne.n	800d418 <memmove+0x2a>
 800d416:	bd10      	pop	{r4, pc}
 800d418:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d41c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d420:	e7f7      	b.n	800d412 <memmove+0x24>
	...

0800d424 <_lseek_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4d07      	ldr	r5, [pc, #28]	@ (800d444 <_lseek_r+0x20>)
 800d428:	4604      	mov	r4, r0
 800d42a:	4608      	mov	r0, r1
 800d42c:	4611      	mov	r1, r2
 800d42e:	2200      	movs	r2, #0
 800d430:	602a      	str	r2, [r5, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	f7f5 fb91 	bl	8002b5a <_lseek>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_lseek_r+0x1e>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_lseek_r+0x1e>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	240006b4 	.word	0x240006b4

0800d448 <_read_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4d07      	ldr	r5, [pc, #28]	@ (800d468 <_read_r+0x20>)
 800d44c:	4604      	mov	r4, r0
 800d44e:	4608      	mov	r0, r1
 800d450:	4611      	mov	r1, r2
 800d452:	2200      	movs	r2, #0
 800d454:	602a      	str	r2, [r5, #0]
 800d456:	461a      	mov	r2, r3
 800d458:	f7f5 fb3b 	bl	8002ad2 <_read>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	d102      	bne.n	800d466 <_read_r+0x1e>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	b103      	cbz	r3, 800d466 <_read_r+0x1e>
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}
 800d468:	240006b4 	.word	0x240006b4

0800d46c <_sbrk_r>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	4d06      	ldr	r5, [pc, #24]	@ (800d488 <_sbrk_r+0x1c>)
 800d470:	2300      	movs	r3, #0
 800d472:	4604      	mov	r4, r0
 800d474:	4608      	mov	r0, r1
 800d476:	602b      	str	r3, [r5, #0]
 800d478:	f7f5 fb7c 	bl	8002b74 <_sbrk>
 800d47c:	1c43      	adds	r3, r0, #1
 800d47e:	d102      	bne.n	800d486 <_sbrk_r+0x1a>
 800d480:	682b      	ldr	r3, [r5, #0]
 800d482:	b103      	cbz	r3, 800d486 <_sbrk_r+0x1a>
 800d484:	6023      	str	r3, [r4, #0]
 800d486:	bd38      	pop	{r3, r4, r5, pc}
 800d488:	240006b4 	.word	0x240006b4

0800d48c <_write_r>:
 800d48c:	b538      	push	{r3, r4, r5, lr}
 800d48e:	4d07      	ldr	r5, [pc, #28]	@ (800d4ac <_write_r+0x20>)
 800d490:	4604      	mov	r4, r0
 800d492:	4608      	mov	r0, r1
 800d494:	4611      	mov	r1, r2
 800d496:	2200      	movs	r2, #0
 800d498:	602a      	str	r2, [r5, #0]
 800d49a:	461a      	mov	r2, r3
 800d49c:	f7f4 fd86 	bl	8001fac <_write>
 800d4a0:	1c43      	adds	r3, r0, #1
 800d4a2:	d102      	bne.n	800d4aa <_write_r+0x1e>
 800d4a4:	682b      	ldr	r3, [r5, #0]
 800d4a6:	b103      	cbz	r3, 800d4aa <_write_r+0x1e>
 800d4a8:	6023      	str	r3, [r4, #0]
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	240006b4 	.word	0x240006b4

0800d4b0 <_close_r>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	4d06      	ldr	r5, [pc, #24]	@ (800d4cc <_close_r+0x1c>)
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	4608      	mov	r0, r1
 800d4ba:	602b      	str	r3, [r5, #0]
 800d4bc:	f7f5 fb26 	bl	8002b0c <_close>
 800d4c0:	1c43      	adds	r3, r0, #1
 800d4c2:	d102      	bne.n	800d4ca <_close_r+0x1a>
 800d4c4:	682b      	ldr	r3, [r5, #0]
 800d4c6:	b103      	cbz	r3, 800d4ca <_close_r+0x1a>
 800d4c8:	6023      	str	r3, [r4, #0]
 800d4ca:	bd38      	pop	{r3, r4, r5, pc}
 800d4cc:	240006b4 	.word	0x240006b4

0800d4d0 <__assert_func>:
 800d4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4d2:	4614      	mov	r4, r2
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	4b09      	ldr	r3, [pc, #36]	@ (800d4fc <__assert_func+0x2c>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4605      	mov	r5, r0
 800d4dc:	68d8      	ldr	r0, [r3, #12]
 800d4de:	b14c      	cbz	r4, 800d4f4 <__assert_func+0x24>
 800d4e0:	4b07      	ldr	r3, [pc, #28]	@ (800d500 <__assert_func+0x30>)
 800d4e2:	9100      	str	r1, [sp, #0]
 800d4e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4e8:	4906      	ldr	r1, [pc, #24]	@ (800d504 <__assert_func+0x34>)
 800d4ea:	462b      	mov	r3, r5
 800d4ec:	f000 f874 	bl	800d5d8 <fiprintf>
 800d4f0:	f000 f884 	bl	800d5fc <abort>
 800d4f4:	4b04      	ldr	r3, [pc, #16]	@ (800d508 <__assert_func+0x38>)
 800d4f6:	461c      	mov	r4, r3
 800d4f8:	e7f3      	b.n	800d4e2 <__assert_func+0x12>
 800d4fa:	bf00      	nop
 800d4fc:	2400018c 	.word	0x2400018c
 800d500:	0800e83a 	.word	0x0800e83a
 800d504:	0800e847 	.word	0x0800e847
 800d508:	0800e875 	.word	0x0800e875

0800d50c <_calloc_r>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	fba1 5402 	umull	r5, r4, r1, r2
 800d512:	b934      	cbnz	r4, 800d522 <_calloc_r+0x16>
 800d514:	4629      	mov	r1, r5
 800d516:	f7ff f8fb 	bl	800c710 <_malloc_r>
 800d51a:	4606      	mov	r6, r0
 800d51c:	b928      	cbnz	r0, 800d52a <_calloc_r+0x1e>
 800d51e:	4630      	mov	r0, r6
 800d520:	bd70      	pop	{r4, r5, r6, pc}
 800d522:	220c      	movs	r2, #12
 800d524:	6002      	str	r2, [r0, #0]
 800d526:	2600      	movs	r6, #0
 800d528:	e7f9      	b.n	800d51e <_calloc_r+0x12>
 800d52a:	462a      	mov	r2, r5
 800d52c:	4621      	mov	r1, r4
 800d52e:	f7fd fde5 	bl	800b0fc <memset>
 800d532:	e7f4      	b.n	800d51e <_calloc_r+0x12>

0800d534 <_free_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4605      	mov	r5, r0
 800d538:	2900      	cmp	r1, #0
 800d53a:	d041      	beq.n	800d5c0 <_free_r+0x8c>
 800d53c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d540:	1f0c      	subs	r4, r1, #4
 800d542:	2b00      	cmp	r3, #0
 800d544:	bfb8      	it	lt
 800d546:	18e4      	addlt	r4, r4, r3
 800d548:	f7ff fa20 	bl	800c98c <__malloc_lock>
 800d54c:	4a1d      	ldr	r2, [pc, #116]	@ (800d5c4 <_free_r+0x90>)
 800d54e:	6813      	ldr	r3, [r2, #0]
 800d550:	b933      	cbnz	r3, 800d560 <_free_r+0x2c>
 800d552:	6063      	str	r3, [r4, #4]
 800d554:	6014      	str	r4, [r2, #0]
 800d556:	4628      	mov	r0, r5
 800d558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d55c:	f7ff ba1c 	b.w	800c998 <__malloc_unlock>
 800d560:	42a3      	cmp	r3, r4
 800d562:	d908      	bls.n	800d576 <_free_r+0x42>
 800d564:	6820      	ldr	r0, [r4, #0]
 800d566:	1821      	adds	r1, r4, r0
 800d568:	428b      	cmp	r3, r1
 800d56a:	bf01      	itttt	eq
 800d56c:	6819      	ldreq	r1, [r3, #0]
 800d56e:	685b      	ldreq	r3, [r3, #4]
 800d570:	1809      	addeq	r1, r1, r0
 800d572:	6021      	streq	r1, [r4, #0]
 800d574:	e7ed      	b.n	800d552 <_free_r+0x1e>
 800d576:	461a      	mov	r2, r3
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	b10b      	cbz	r3, 800d580 <_free_r+0x4c>
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	d9fa      	bls.n	800d576 <_free_r+0x42>
 800d580:	6811      	ldr	r1, [r2, #0]
 800d582:	1850      	adds	r0, r2, r1
 800d584:	42a0      	cmp	r0, r4
 800d586:	d10b      	bne.n	800d5a0 <_free_r+0x6c>
 800d588:	6820      	ldr	r0, [r4, #0]
 800d58a:	4401      	add	r1, r0
 800d58c:	1850      	adds	r0, r2, r1
 800d58e:	4283      	cmp	r3, r0
 800d590:	6011      	str	r1, [r2, #0]
 800d592:	d1e0      	bne.n	800d556 <_free_r+0x22>
 800d594:	6818      	ldr	r0, [r3, #0]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	6053      	str	r3, [r2, #4]
 800d59a:	4408      	add	r0, r1
 800d59c:	6010      	str	r0, [r2, #0]
 800d59e:	e7da      	b.n	800d556 <_free_r+0x22>
 800d5a0:	d902      	bls.n	800d5a8 <_free_r+0x74>
 800d5a2:	230c      	movs	r3, #12
 800d5a4:	602b      	str	r3, [r5, #0]
 800d5a6:	e7d6      	b.n	800d556 <_free_r+0x22>
 800d5a8:	6820      	ldr	r0, [r4, #0]
 800d5aa:	1821      	adds	r1, r4, r0
 800d5ac:	428b      	cmp	r3, r1
 800d5ae:	bf04      	itt	eq
 800d5b0:	6819      	ldreq	r1, [r3, #0]
 800d5b2:	685b      	ldreq	r3, [r3, #4]
 800d5b4:	6063      	str	r3, [r4, #4]
 800d5b6:	bf04      	itt	eq
 800d5b8:	1809      	addeq	r1, r1, r0
 800d5ba:	6021      	streq	r1, [r4, #0]
 800d5bc:	6054      	str	r4, [r2, #4]
 800d5be:	e7ca      	b.n	800d556 <_free_r+0x22>
 800d5c0:	bd38      	pop	{r3, r4, r5, pc}
 800d5c2:	bf00      	nop
 800d5c4:	240006b0 	.word	0x240006b0

0800d5c8 <_malloc_usable_size_r>:
 800d5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5cc:	1f18      	subs	r0, r3, #4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	bfbc      	itt	lt
 800d5d2:	580b      	ldrlt	r3, [r1, r0]
 800d5d4:	18c0      	addlt	r0, r0, r3
 800d5d6:	4770      	bx	lr

0800d5d8 <fiprintf>:
 800d5d8:	b40e      	push	{r1, r2, r3}
 800d5da:	b503      	push	{r0, r1, lr}
 800d5dc:	4601      	mov	r1, r0
 800d5de:	ab03      	add	r3, sp, #12
 800d5e0:	4805      	ldr	r0, [pc, #20]	@ (800d5f8 <fiprintf+0x20>)
 800d5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e6:	6800      	ldr	r0, [r0, #0]
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	f000 f837 	bl	800d65c <_vfiprintf_r>
 800d5ee:	b002      	add	sp, #8
 800d5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5f4:	b003      	add	sp, #12
 800d5f6:	4770      	bx	lr
 800d5f8:	2400018c 	.word	0x2400018c

0800d5fc <abort>:
 800d5fc:	b508      	push	{r3, lr}
 800d5fe:	2006      	movs	r0, #6
 800d600:	f000 fa62 	bl	800dac8 <raise>
 800d604:	2001      	movs	r0, #1
 800d606:	f7f5 fa59 	bl	8002abc <_exit>

0800d60a <__sfputc_r>:
 800d60a:	6893      	ldr	r3, [r2, #8]
 800d60c:	3b01      	subs	r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	b410      	push	{r4}
 800d612:	6093      	str	r3, [r2, #8]
 800d614:	da08      	bge.n	800d628 <__sfputc_r+0x1e>
 800d616:	6994      	ldr	r4, [r2, #24]
 800d618:	42a3      	cmp	r3, r4
 800d61a:	db01      	blt.n	800d620 <__sfputc_r+0x16>
 800d61c:	290a      	cmp	r1, #10
 800d61e:	d103      	bne.n	800d628 <__sfputc_r+0x1e>
 800d620:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d624:	f000 b932 	b.w	800d88c <__swbuf_r>
 800d628:	6813      	ldr	r3, [r2, #0]
 800d62a:	1c58      	adds	r0, r3, #1
 800d62c:	6010      	str	r0, [r2, #0]
 800d62e:	7019      	strb	r1, [r3, #0]
 800d630:	4608      	mov	r0, r1
 800d632:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <__sfputs_r>:
 800d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63a:	4606      	mov	r6, r0
 800d63c:	460f      	mov	r7, r1
 800d63e:	4614      	mov	r4, r2
 800d640:	18d5      	adds	r5, r2, r3
 800d642:	42ac      	cmp	r4, r5
 800d644:	d101      	bne.n	800d64a <__sfputs_r+0x12>
 800d646:	2000      	movs	r0, #0
 800d648:	e007      	b.n	800d65a <__sfputs_r+0x22>
 800d64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d64e:	463a      	mov	r2, r7
 800d650:	4630      	mov	r0, r6
 800d652:	f7ff ffda 	bl	800d60a <__sfputc_r>
 800d656:	1c43      	adds	r3, r0, #1
 800d658:	d1f3      	bne.n	800d642 <__sfputs_r+0xa>
 800d65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d65c <_vfiprintf_r>:
 800d65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	460d      	mov	r5, r1
 800d662:	b09d      	sub	sp, #116	@ 0x74
 800d664:	4614      	mov	r4, r2
 800d666:	4698      	mov	r8, r3
 800d668:	4606      	mov	r6, r0
 800d66a:	b118      	cbz	r0, 800d674 <_vfiprintf_r+0x18>
 800d66c:	6a03      	ldr	r3, [r0, #32]
 800d66e:	b90b      	cbnz	r3, 800d674 <_vfiprintf_r+0x18>
 800d670:	f7fc fed8 	bl	800a424 <__sinit>
 800d674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d676:	07d9      	lsls	r1, r3, #31
 800d678:	d405      	bmi.n	800d686 <_vfiprintf_r+0x2a>
 800d67a:	89ab      	ldrh	r3, [r5, #12]
 800d67c:	059a      	lsls	r2, r3, #22
 800d67e:	d402      	bmi.n	800d686 <_vfiprintf_r+0x2a>
 800d680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d682:	f7fd fd80 	bl	800b186 <__retarget_lock_acquire_recursive>
 800d686:	89ab      	ldrh	r3, [r5, #12]
 800d688:	071b      	lsls	r3, r3, #28
 800d68a:	d501      	bpl.n	800d690 <_vfiprintf_r+0x34>
 800d68c:	692b      	ldr	r3, [r5, #16]
 800d68e:	b99b      	cbnz	r3, 800d6b8 <_vfiprintf_r+0x5c>
 800d690:	4629      	mov	r1, r5
 800d692:	4630      	mov	r0, r6
 800d694:	f000 f938 	bl	800d908 <__swsetup_r>
 800d698:	b170      	cbz	r0, 800d6b8 <_vfiprintf_r+0x5c>
 800d69a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d69c:	07dc      	lsls	r4, r3, #31
 800d69e:	d504      	bpl.n	800d6aa <_vfiprintf_r+0x4e>
 800d6a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6a4:	b01d      	add	sp, #116	@ 0x74
 800d6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6aa:	89ab      	ldrh	r3, [r5, #12]
 800d6ac:	0598      	lsls	r0, r3, #22
 800d6ae:	d4f7      	bmi.n	800d6a0 <_vfiprintf_r+0x44>
 800d6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6b2:	f7fd fd69 	bl	800b188 <__retarget_lock_release_recursive>
 800d6b6:	e7f3      	b.n	800d6a0 <_vfiprintf_r+0x44>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6bc:	2320      	movs	r3, #32
 800d6be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6c6:	2330      	movs	r3, #48	@ 0x30
 800d6c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d878 <_vfiprintf_r+0x21c>
 800d6cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6d0:	f04f 0901 	mov.w	r9, #1
 800d6d4:	4623      	mov	r3, r4
 800d6d6:	469a      	mov	sl, r3
 800d6d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6dc:	b10a      	cbz	r2, 800d6e2 <_vfiprintf_r+0x86>
 800d6de:	2a25      	cmp	r2, #37	@ 0x25
 800d6e0:	d1f9      	bne.n	800d6d6 <_vfiprintf_r+0x7a>
 800d6e2:	ebba 0b04 	subs.w	fp, sl, r4
 800d6e6:	d00b      	beq.n	800d700 <_vfiprintf_r+0xa4>
 800d6e8:	465b      	mov	r3, fp
 800d6ea:	4622      	mov	r2, r4
 800d6ec:	4629      	mov	r1, r5
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7ff ffa2 	bl	800d638 <__sfputs_r>
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	f000 80a7 	beq.w	800d848 <_vfiprintf_r+0x1ec>
 800d6fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6fc:	445a      	add	r2, fp
 800d6fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800d700:	f89a 3000 	ldrb.w	r3, [sl]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f000 809f 	beq.w	800d848 <_vfiprintf_r+0x1ec>
 800d70a:	2300      	movs	r3, #0
 800d70c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d714:	f10a 0a01 	add.w	sl, sl, #1
 800d718:	9304      	str	r3, [sp, #16]
 800d71a:	9307      	str	r3, [sp, #28]
 800d71c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d720:	931a      	str	r3, [sp, #104]	@ 0x68
 800d722:	4654      	mov	r4, sl
 800d724:	2205      	movs	r2, #5
 800d726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72a:	4853      	ldr	r0, [pc, #332]	@ (800d878 <_vfiprintf_r+0x21c>)
 800d72c:	f7f2 fdd8 	bl	80002e0 <memchr>
 800d730:	9a04      	ldr	r2, [sp, #16]
 800d732:	b9d8      	cbnz	r0, 800d76c <_vfiprintf_r+0x110>
 800d734:	06d1      	lsls	r1, r2, #27
 800d736:	bf44      	itt	mi
 800d738:	2320      	movmi	r3, #32
 800d73a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d73e:	0713      	lsls	r3, r2, #28
 800d740:	bf44      	itt	mi
 800d742:	232b      	movmi	r3, #43	@ 0x2b
 800d744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d748:	f89a 3000 	ldrb.w	r3, [sl]
 800d74c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d74e:	d015      	beq.n	800d77c <_vfiprintf_r+0x120>
 800d750:	9a07      	ldr	r2, [sp, #28]
 800d752:	4654      	mov	r4, sl
 800d754:	2000      	movs	r0, #0
 800d756:	f04f 0c0a 	mov.w	ip, #10
 800d75a:	4621      	mov	r1, r4
 800d75c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d760:	3b30      	subs	r3, #48	@ 0x30
 800d762:	2b09      	cmp	r3, #9
 800d764:	d94b      	bls.n	800d7fe <_vfiprintf_r+0x1a2>
 800d766:	b1b0      	cbz	r0, 800d796 <_vfiprintf_r+0x13a>
 800d768:	9207      	str	r2, [sp, #28]
 800d76a:	e014      	b.n	800d796 <_vfiprintf_r+0x13a>
 800d76c:	eba0 0308 	sub.w	r3, r0, r8
 800d770:	fa09 f303 	lsl.w	r3, r9, r3
 800d774:	4313      	orrs	r3, r2
 800d776:	9304      	str	r3, [sp, #16]
 800d778:	46a2      	mov	sl, r4
 800d77a:	e7d2      	b.n	800d722 <_vfiprintf_r+0xc6>
 800d77c:	9b03      	ldr	r3, [sp, #12]
 800d77e:	1d19      	adds	r1, r3, #4
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	9103      	str	r1, [sp, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	bfbb      	ittet	lt
 800d788:	425b      	neglt	r3, r3
 800d78a:	f042 0202 	orrlt.w	r2, r2, #2
 800d78e:	9307      	strge	r3, [sp, #28]
 800d790:	9307      	strlt	r3, [sp, #28]
 800d792:	bfb8      	it	lt
 800d794:	9204      	strlt	r2, [sp, #16]
 800d796:	7823      	ldrb	r3, [r4, #0]
 800d798:	2b2e      	cmp	r3, #46	@ 0x2e
 800d79a:	d10a      	bne.n	800d7b2 <_vfiprintf_r+0x156>
 800d79c:	7863      	ldrb	r3, [r4, #1]
 800d79e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7a0:	d132      	bne.n	800d808 <_vfiprintf_r+0x1ac>
 800d7a2:	9b03      	ldr	r3, [sp, #12]
 800d7a4:	1d1a      	adds	r2, r3, #4
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	9203      	str	r2, [sp, #12]
 800d7aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7ae:	3402      	adds	r4, #2
 800d7b0:	9305      	str	r3, [sp, #20]
 800d7b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d888 <_vfiprintf_r+0x22c>
 800d7b6:	7821      	ldrb	r1, [r4, #0]
 800d7b8:	2203      	movs	r2, #3
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	f7f2 fd90 	bl	80002e0 <memchr>
 800d7c0:	b138      	cbz	r0, 800d7d2 <_vfiprintf_r+0x176>
 800d7c2:	9b04      	ldr	r3, [sp, #16]
 800d7c4:	eba0 000a 	sub.w	r0, r0, sl
 800d7c8:	2240      	movs	r2, #64	@ 0x40
 800d7ca:	4082      	lsls	r2, r0
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	3401      	adds	r4, #1
 800d7d0:	9304      	str	r3, [sp, #16]
 800d7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7d6:	4829      	ldr	r0, [pc, #164]	@ (800d87c <_vfiprintf_r+0x220>)
 800d7d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7dc:	2206      	movs	r2, #6
 800d7de:	f7f2 fd7f 	bl	80002e0 <memchr>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d03f      	beq.n	800d866 <_vfiprintf_r+0x20a>
 800d7e6:	4b26      	ldr	r3, [pc, #152]	@ (800d880 <_vfiprintf_r+0x224>)
 800d7e8:	bb1b      	cbnz	r3, 800d832 <_vfiprintf_r+0x1d6>
 800d7ea:	9b03      	ldr	r3, [sp, #12]
 800d7ec:	3307      	adds	r3, #7
 800d7ee:	f023 0307 	bic.w	r3, r3, #7
 800d7f2:	3308      	adds	r3, #8
 800d7f4:	9303      	str	r3, [sp, #12]
 800d7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7f8:	443b      	add	r3, r7
 800d7fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7fc:	e76a      	b.n	800d6d4 <_vfiprintf_r+0x78>
 800d7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800d802:	460c      	mov	r4, r1
 800d804:	2001      	movs	r0, #1
 800d806:	e7a8      	b.n	800d75a <_vfiprintf_r+0xfe>
 800d808:	2300      	movs	r3, #0
 800d80a:	3401      	adds	r4, #1
 800d80c:	9305      	str	r3, [sp, #20]
 800d80e:	4619      	mov	r1, r3
 800d810:	f04f 0c0a 	mov.w	ip, #10
 800d814:	4620      	mov	r0, r4
 800d816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d81a:	3a30      	subs	r2, #48	@ 0x30
 800d81c:	2a09      	cmp	r2, #9
 800d81e:	d903      	bls.n	800d828 <_vfiprintf_r+0x1cc>
 800d820:	2b00      	cmp	r3, #0
 800d822:	d0c6      	beq.n	800d7b2 <_vfiprintf_r+0x156>
 800d824:	9105      	str	r1, [sp, #20]
 800d826:	e7c4      	b.n	800d7b2 <_vfiprintf_r+0x156>
 800d828:	fb0c 2101 	mla	r1, ip, r1, r2
 800d82c:	4604      	mov	r4, r0
 800d82e:	2301      	movs	r3, #1
 800d830:	e7f0      	b.n	800d814 <_vfiprintf_r+0x1b8>
 800d832:	ab03      	add	r3, sp, #12
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	462a      	mov	r2, r5
 800d838:	4b12      	ldr	r3, [pc, #72]	@ (800d884 <_vfiprintf_r+0x228>)
 800d83a:	a904      	add	r1, sp, #16
 800d83c:	4630      	mov	r0, r6
 800d83e:	f7fb ff97 	bl	8009770 <_printf_float>
 800d842:	4607      	mov	r7, r0
 800d844:	1c78      	adds	r0, r7, #1
 800d846:	d1d6      	bne.n	800d7f6 <_vfiprintf_r+0x19a>
 800d848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d84a:	07d9      	lsls	r1, r3, #31
 800d84c:	d405      	bmi.n	800d85a <_vfiprintf_r+0x1fe>
 800d84e:	89ab      	ldrh	r3, [r5, #12]
 800d850:	059a      	lsls	r2, r3, #22
 800d852:	d402      	bmi.n	800d85a <_vfiprintf_r+0x1fe>
 800d854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d856:	f7fd fc97 	bl	800b188 <__retarget_lock_release_recursive>
 800d85a:	89ab      	ldrh	r3, [r5, #12]
 800d85c:	065b      	lsls	r3, r3, #25
 800d85e:	f53f af1f 	bmi.w	800d6a0 <_vfiprintf_r+0x44>
 800d862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d864:	e71e      	b.n	800d6a4 <_vfiprintf_r+0x48>
 800d866:	ab03      	add	r3, sp, #12
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	462a      	mov	r2, r5
 800d86c:	4b05      	ldr	r3, [pc, #20]	@ (800d884 <_vfiprintf_r+0x228>)
 800d86e:	a904      	add	r1, sp, #16
 800d870:	4630      	mov	r0, r6
 800d872:	f7fc fa05 	bl	8009c80 <_printf_i>
 800d876:	e7e4      	b.n	800d842 <_vfiprintf_r+0x1e6>
 800d878:	0800e7d0 	.word	0x0800e7d0
 800d87c:	0800e7da 	.word	0x0800e7da
 800d880:	08009771 	.word	0x08009771
 800d884:	0800d639 	.word	0x0800d639
 800d888:	0800e7d6 	.word	0x0800e7d6

0800d88c <__swbuf_r>:
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	460e      	mov	r6, r1
 800d890:	4614      	mov	r4, r2
 800d892:	4605      	mov	r5, r0
 800d894:	b118      	cbz	r0, 800d89e <__swbuf_r+0x12>
 800d896:	6a03      	ldr	r3, [r0, #32]
 800d898:	b90b      	cbnz	r3, 800d89e <__swbuf_r+0x12>
 800d89a:	f7fc fdc3 	bl	800a424 <__sinit>
 800d89e:	69a3      	ldr	r3, [r4, #24]
 800d8a0:	60a3      	str	r3, [r4, #8]
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	071a      	lsls	r2, r3, #28
 800d8a6:	d501      	bpl.n	800d8ac <__swbuf_r+0x20>
 800d8a8:	6923      	ldr	r3, [r4, #16]
 800d8aa:	b943      	cbnz	r3, 800d8be <__swbuf_r+0x32>
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f000 f82a 	bl	800d908 <__swsetup_r>
 800d8b4:	b118      	cbz	r0, 800d8be <__swbuf_r+0x32>
 800d8b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d8ba:	4638      	mov	r0, r7
 800d8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	6922      	ldr	r2, [r4, #16]
 800d8c2:	1a98      	subs	r0, r3, r2
 800d8c4:	6963      	ldr	r3, [r4, #20]
 800d8c6:	b2f6      	uxtb	r6, r6
 800d8c8:	4283      	cmp	r3, r0
 800d8ca:	4637      	mov	r7, r6
 800d8cc:	dc05      	bgt.n	800d8da <__swbuf_r+0x4e>
 800d8ce:	4621      	mov	r1, r4
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	f7ff f833 	bl	800c93c <_fflush_r>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d1ed      	bne.n	800d8b6 <__swbuf_r+0x2a>
 800d8da:	68a3      	ldr	r3, [r4, #8]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	60a3      	str	r3, [r4, #8]
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	1c5a      	adds	r2, r3, #1
 800d8e4:	6022      	str	r2, [r4, #0]
 800d8e6:	701e      	strb	r6, [r3, #0]
 800d8e8:	6962      	ldr	r2, [r4, #20]
 800d8ea:	1c43      	adds	r3, r0, #1
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d004      	beq.n	800d8fa <__swbuf_r+0x6e>
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	07db      	lsls	r3, r3, #31
 800d8f4:	d5e1      	bpl.n	800d8ba <__swbuf_r+0x2e>
 800d8f6:	2e0a      	cmp	r6, #10
 800d8f8:	d1df      	bne.n	800d8ba <__swbuf_r+0x2e>
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	f7ff f81d 	bl	800c93c <_fflush_r>
 800d902:	2800      	cmp	r0, #0
 800d904:	d0d9      	beq.n	800d8ba <__swbuf_r+0x2e>
 800d906:	e7d6      	b.n	800d8b6 <__swbuf_r+0x2a>

0800d908 <__swsetup_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4b29      	ldr	r3, [pc, #164]	@ (800d9b0 <__swsetup_r+0xa8>)
 800d90c:	4605      	mov	r5, r0
 800d90e:	6818      	ldr	r0, [r3, #0]
 800d910:	460c      	mov	r4, r1
 800d912:	b118      	cbz	r0, 800d91c <__swsetup_r+0x14>
 800d914:	6a03      	ldr	r3, [r0, #32]
 800d916:	b90b      	cbnz	r3, 800d91c <__swsetup_r+0x14>
 800d918:	f7fc fd84 	bl	800a424 <__sinit>
 800d91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d920:	0719      	lsls	r1, r3, #28
 800d922:	d422      	bmi.n	800d96a <__swsetup_r+0x62>
 800d924:	06da      	lsls	r2, r3, #27
 800d926:	d407      	bmi.n	800d938 <__swsetup_r+0x30>
 800d928:	2209      	movs	r2, #9
 800d92a:	602a      	str	r2, [r5, #0]
 800d92c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d930:	81a3      	strh	r3, [r4, #12]
 800d932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d936:	e033      	b.n	800d9a0 <__swsetup_r+0x98>
 800d938:	0758      	lsls	r0, r3, #29
 800d93a:	d512      	bpl.n	800d962 <__swsetup_r+0x5a>
 800d93c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d93e:	b141      	cbz	r1, 800d952 <__swsetup_r+0x4a>
 800d940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d944:	4299      	cmp	r1, r3
 800d946:	d002      	beq.n	800d94e <__swsetup_r+0x46>
 800d948:	4628      	mov	r0, r5
 800d94a:	f7ff fdf3 	bl	800d534 <_free_r>
 800d94e:	2300      	movs	r3, #0
 800d950:	6363      	str	r3, [r4, #52]	@ 0x34
 800d952:	89a3      	ldrh	r3, [r4, #12]
 800d954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d958:	81a3      	strh	r3, [r4, #12]
 800d95a:	2300      	movs	r3, #0
 800d95c:	6063      	str	r3, [r4, #4]
 800d95e:	6923      	ldr	r3, [r4, #16]
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	89a3      	ldrh	r3, [r4, #12]
 800d964:	f043 0308 	orr.w	r3, r3, #8
 800d968:	81a3      	strh	r3, [r4, #12]
 800d96a:	6923      	ldr	r3, [r4, #16]
 800d96c:	b94b      	cbnz	r3, 800d982 <__swsetup_r+0x7a>
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d978:	d003      	beq.n	800d982 <__swsetup_r+0x7a>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4628      	mov	r0, r5
 800d97e:	f000 f83f 	bl	800da00 <__smakebuf_r>
 800d982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d986:	f013 0201 	ands.w	r2, r3, #1
 800d98a:	d00a      	beq.n	800d9a2 <__swsetup_r+0x9a>
 800d98c:	2200      	movs	r2, #0
 800d98e:	60a2      	str	r2, [r4, #8]
 800d990:	6962      	ldr	r2, [r4, #20]
 800d992:	4252      	negs	r2, r2
 800d994:	61a2      	str	r2, [r4, #24]
 800d996:	6922      	ldr	r2, [r4, #16]
 800d998:	b942      	cbnz	r2, 800d9ac <__swsetup_r+0xa4>
 800d99a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d99e:	d1c5      	bne.n	800d92c <__swsetup_r+0x24>
 800d9a0:	bd38      	pop	{r3, r4, r5, pc}
 800d9a2:	0799      	lsls	r1, r3, #30
 800d9a4:	bf58      	it	pl
 800d9a6:	6962      	ldrpl	r2, [r4, #20]
 800d9a8:	60a2      	str	r2, [r4, #8]
 800d9aa:	e7f4      	b.n	800d996 <__swsetup_r+0x8e>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	e7f7      	b.n	800d9a0 <__swsetup_r+0x98>
 800d9b0:	2400018c 	.word	0x2400018c

0800d9b4 <__swhatbuf_r>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9bc:	2900      	cmp	r1, #0
 800d9be:	b096      	sub	sp, #88	@ 0x58
 800d9c0:	4615      	mov	r5, r2
 800d9c2:	461e      	mov	r6, r3
 800d9c4:	da0d      	bge.n	800d9e2 <__swhatbuf_r+0x2e>
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9cc:	f04f 0100 	mov.w	r1, #0
 800d9d0:	bf14      	ite	ne
 800d9d2:	2340      	movne	r3, #64	@ 0x40
 800d9d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9d8:	2000      	movs	r0, #0
 800d9da:	6031      	str	r1, [r6, #0]
 800d9dc:	602b      	str	r3, [r5, #0]
 800d9de:	b016      	add	sp, #88	@ 0x58
 800d9e0:	bd70      	pop	{r4, r5, r6, pc}
 800d9e2:	466a      	mov	r2, sp
 800d9e4:	f000 f89c 	bl	800db20 <_fstat_r>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	dbec      	blt.n	800d9c6 <__swhatbuf_r+0x12>
 800d9ec:	9901      	ldr	r1, [sp, #4]
 800d9ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d9f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d9f6:	4259      	negs	r1, r3
 800d9f8:	4159      	adcs	r1, r3
 800d9fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9fe:	e7eb      	b.n	800d9d8 <__swhatbuf_r+0x24>

0800da00 <__smakebuf_r>:
 800da00:	898b      	ldrh	r3, [r1, #12]
 800da02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da04:	079d      	lsls	r5, r3, #30
 800da06:	4606      	mov	r6, r0
 800da08:	460c      	mov	r4, r1
 800da0a:	d507      	bpl.n	800da1c <__smakebuf_r+0x1c>
 800da0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	6123      	str	r3, [r4, #16]
 800da14:	2301      	movs	r3, #1
 800da16:	6163      	str	r3, [r4, #20]
 800da18:	b003      	add	sp, #12
 800da1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da1c:	ab01      	add	r3, sp, #4
 800da1e:	466a      	mov	r2, sp
 800da20:	f7ff ffc8 	bl	800d9b4 <__swhatbuf_r>
 800da24:	9f00      	ldr	r7, [sp, #0]
 800da26:	4605      	mov	r5, r0
 800da28:	4639      	mov	r1, r7
 800da2a:	4630      	mov	r0, r6
 800da2c:	f7fe fe70 	bl	800c710 <_malloc_r>
 800da30:	b948      	cbnz	r0, 800da46 <__smakebuf_r+0x46>
 800da32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da36:	059a      	lsls	r2, r3, #22
 800da38:	d4ee      	bmi.n	800da18 <__smakebuf_r+0x18>
 800da3a:	f023 0303 	bic.w	r3, r3, #3
 800da3e:	f043 0302 	orr.w	r3, r3, #2
 800da42:	81a3      	strh	r3, [r4, #12]
 800da44:	e7e2      	b.n	800da0c <__smakebuf_r+0xc>
 800da46:	89a3      	ldrh	r3, [r4, #12]
 800da48:	6020      	str	r0, [r4, #0]
 800da4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da4e:	81a3      	strh	r3, [r4, #12]
 800da50:	9b01      	ldr	r3, [sp, #4]
 800da52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da56:	b15b      	cbz	r3, 800da70 <__smakebuf_r+0x70>
 800da58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da5c:	4630      	mov	r0, r6
 800da5e:	f000 f83b 	bl	800dad8 <_isatty_r>
 800da62:	b128      	cbz	r0, 800da70 <__smakebuf_r+0x70>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	f023 0303 	bic.w	r3, r3, #3
 800da6a:	f043 0301 	orr.w	r3, r3, #1
 800da6e:	81a3      	strh	r3, [r4, #12]
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	431d      	orrs	r5, r3
 800da74:	81a5      	strh	r5, [r4, #12]
 800da76:	e7cf      	b.n	800da18 <__smakebuf_r+0x18>

0800da78 <_raise_r>:
 800da78:	291f      	cmp	r1, #31
 800da7a:	b538      	push	{r3, r4, r5, lr}
 800da7c:	4605      	mov	r5, r0
 800da7e:	460c      	mov	r4, r1
 800da80:	d904      	bls.n	800da8c <_raise_r+0x14>
 800da82:	2316      	movs	r3, #22
 800da84:	6003      	str	r3, [r0, #0]
 800da86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da8e:	b112      	cbz	r2, 800da96 <_raise_r+0x1e>
 800da90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da94:	b94b      	cbnz	r3, 800daaa <_raise_r+0x32>
 800da96:	4628      	mov	r0, r5
 800da98:	f000 f840 	bl	800db1c <_getpid_r>
 800da9c:	4622      	mov	r2, r4
 800da9e:	4601      	mov	r1, r0
 800daa0:	4628      	mov	r0, r5
 800daa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa6:	f000 b827 	b.w	800daf8 <_kill_r>
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d00a      	beq.n	800dac4 <_raise_r+0x4c>
 800daae:	1c59      	adds	r1, r3, #1
 800dab0:	d103      	bne.n	800daba <_raise_r+0x42>
 800dab2:	2316      	movs	r3, #22
 800dab4:	6003      	str	r3, [r0, #0]
 800dab6:	2001      	movs	r0, #1
 800dab8:	e7e7      	b.n	800da8a <_raise_r+0x12>
 800daba:	2100      	movs	r1, #0
 800dabc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dac0:	4620      	mov	r0, r4
 800dac2:	4798      	blx	r3
 800dac4:	2000      	movs	r0, #0
 800dac6:	e7e0      	b.n	800da8a <_raise_r+0x12>

0800dac8 <raise>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	@ (800dad4 <raise+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f7ff bfd3 	b.w	800da78 <_raise_r>
 800dad2:	bf00      	nop
 800dad4:	2400018c 	.word	0x2400018c

0800dad8 <_isatty_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d06      	ldr	r5, [pc, #24]	@ (800daf4 <_isatty_r+0x1c>)
 800dadc:	2300      	movs	r3, #0
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	602b      	str	r3, [r5, #0]
 800dae4:	f7f5 f82e 	bl	8002b44 <_isatty>
 800dae8:	1c43      	adds	r3, r0, #1
 800daea:	d102      	bne.n	800daf2 <_isatty_r+0x1a>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	b103      	cbz	r3, 800daf2 <_isatty_r+0x1a>
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	bd38      	pop	{r3, r4, r5, pc}
 800daf4:	240006b4 	.word	0x240006b4

0800daf8 <_kill_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	4d07      	ldr	r5, [pc, #28]	@ (800db18 <_kill_r+0x20>)
 800dafc:	2300      	movs	r3, #0
 800dafe:	4604      	mov	r4, r0
 800db00:	4608      	mov	r0, r1
 800db02:	4611      	mov	r1, r2
 800db04:	602b      	str	r3, [r5, #0]
 800db06:	f7f4 ffc9 	bl	8002a9c <_kill>
 800db0a:	1c43      	adds	r3, r0, #1
 800db0c:	d102      	bne.n	800db14 <_kill_r+0x1c>
 800db0e:	682b      	ldr	r3, [r5, #0]
 800db10:	b103      	cbz	r3, 800db14 <_kill_r+0x1c>
 800db12:	6023      	str	r3, [r4, #0]
 800db14:	bd38      	pop	{r3, r4, r5, pc}
 800db16:	bf00      	nop
 800db18:	240006b4 	.word	0x240006b4

0800db1c <_getpid_r>:
 800db1c:	f7f4 bfb6 	b.w	8002a8c <_getpid>

0800db20 <_fstat_r>:
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4d07      	ldr	r5, [pc, #28]	@ (800db40 <_fstat_r+0x20>)
 800db24:	2300      	movs	r3, #0
 800db26:	4604      	mov	r4, r0
 800db28:	4608      	mov	r0, r1
 800db2a:	4611      	mov	r1, r2
 800db2c:	602b      	str	r3, [r5, #0]
 800db2e:	f7f4 fff9 	bl	8002b24 <_fstat>
 800db32:	1c43      	adds	r3, r0, #1
 800db34:	d102      	bne.n	800db3c <_fstat_r+0x1c>
 800db36:	682b      	ldr	r3, [r5, #0]
 800db38:	b103      	cbz	r3, 800db3c <_fstat_r+0x1c>
 800db3a:	6023      	str	r3, [r4, #0]
 800db3c:	bd38      	pop	{r3, r4, r5, pc}
 800db3e:	bf00      	nop
 800db40:	240006b4 	.word	0x240006b4

0800db44 <asinf>:
 800db44:	b508      	push	{r3, lr}
 800db46:	ed2d 8b02 	vpush	{d8}
 800db4a:	eeb0 8a40 	vmov.f32	s16, s0
 800db4e:	f000 fab3 	bl	800e0b8 <__ieee754_asinf>
 800db52:	eeb4 8a48 	vcmp.f32	s16, s16
 800db56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db5a:	eef0 8a40 	vmov.f32	s17, s0
 800db5e:	d615      	bvs.n	800db8c <asinf+0x48>
 800db60:	eeb0 0a48 	vmov.f32	s0, s16
 800db64:	f000 faa0 	bl	800e0a8 <fabsf>
 800db68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800db6c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800db70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db74:	dd0a      	ble.n	800db8c <asinf+0x48>
 800db76:	f7fd fadb 	bl	800b130 <__errno>
 800db7a:	ecbd 8b02 	vpop	{d8}
 800db7e:	2321      	movs	r3, #33	@ 0x21
 800db80:	6003      	str	r3, [r0, #0]
 800db82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db86:	4804      	ldr	r0, [pc, #16]	@ (800db98 <asinf+0x54>)
 800db88:	f7fd bb1a 	b.w	800b1c0 <nanf>
 800db8c:	eeb0 0a68 	vmov.f32	s0, s17
 800db90:	ecbd 8b02 	vpop	{d8}
 800db94:	bd08      	pop	{r3, pc}
 800db96:	bf00      	nop
 800db98:	0800e875 	.word	0x0800e875

0800db9c <atan2f>:
 800db9c:	f000 bb70 	b.w	800e280 <__ieee754_atan2f>

0800dba0 <checkint>:
 800dba0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dba4:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	b570      	push	{r4, r5, r6, lr}
 800dbac:	dd2a      	ble.n	800dc04 <checkint+0x64>
 800dbae:	f240 4333 	movw	r3, #1075	@ 0x433
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	dc24      	bgt.n	800dc00 <checkint+0x60>
 800dbb6:	1a9b      	subs	r3, r3, r2
 800dbb8:	f1a3 0620 	sub.w	r6, r3, #32
 800dbbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dbc0:	fa02 f403 	lsl.w	r4, r2, r3
 800dbc4:	fa02 f606 	lsl.w	r6, r2, r6
 800dbc8:	f1c3 0520 	rsb	r5, r3, #32
 800dbcc:	fa22 f505 	lsr.w	r5, r2, r5
 800dbd0:	4334      	orrs	r4, r6
 800dbd2:	432c      	orrs	r4, r5
 800dbd4:	409a      	lsls	r2, r3
 800dbd6:	ea20 0202 	bic.w	r2, r0, r2
 800dbda:	ea21 0404 	bic.w	r4, r1, r4
 800dbde:	4322      	orrs	r2, r4
 800dbe0:	f1a3 0420 	sub.w	r4, r3, #32
 800dbe4:	f1c3 0220 	rsb	r2, r3, #32
 800dbe8:	d10c      	bne.n	800dc04 <checkint+0x64>
 800dbea:	40d8      	lsrs	r0, r3
 800dbec:	fa01 f302 	lsl.w	r3, r1, r2
 800dbf0:	4318      	orrs	r0, r3
 800dbf2:	40e1      	lsrs	r1, r4
 800dbf4:	4308      	orrs	r0, r1
 800dbf6:	f000 0001 	and.w	r0, r0, #1
 800dbfa:	f1d0 0002 	rsbs	r0, r0, #2
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
 800dc00:	2002      	movs	r0, #2
 800dc02:	e7fc      	b.n	800dbfe <checkint+0x5e>
 800dc04:	2000      	movs	r0, #0
 800dc06:	e7fa      	b.n	800dbfe <checkint+0x5e>

0800dc08 <pow>:
 800dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0c:	ee10 4a90 	vmov	r4, s1
 800dc10:	ed2d 8b0a 	vpush	{d8-d12}
 800dc14:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800dc18:	ee11 aa90 	vmov	sl, s3
 800dc1c:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800dc20:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800dc24:	429a      	cmp	r2, r3
 800dc26:	ee10 5a10 	vmov	r5, s0
 800dc2a:	ee11 0a10 	vmov	r0, s2
 800dc2e:	b087      	sub	sp, #28
 800dc30:	46c4      	mov	ip, r8
 800dc32:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800dc36:	d806      	bhi.n	800dc46 <pow+0x3e>
 800dc38:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800dc3c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800dc40:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc42:	f240 8157 	bls.w	800def4 <pow+0x2ec>
 800dc46:	1802      	adds	r2, r0, r0
 800dc48:	eb4a 010a 	adc.w	r1, sl, sl
 800dc4c:	f06f 0b01 	mvn.w	fp, #1
 800dc50:	1e57      	subs	r7, r2, #1
 800dc52:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 800dc56:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800dc5a:	45bb      	cmp	fp, r7
 800dc5c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800dc60:	d242      	bcs.n	800dce8 <pow+0xe0>
 800dc62:	ea52 0301 	orrs.w	r3, r2, r1
 800dc66:	f04f 0300 	mov.w	r3, #0
 800dc6a:	d10c      	bne.n	800dc86 <pow+0x7e>
 800dc6c:	196d      	adds	r5, r5, r5
 800dc6e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800dc72:	4164      	adcs	r4, r4
 800dc74:	42ab      	cmp	r3, r5
 800dc76:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dc7a:	41a3      	sbcs	r3, r4
 800dc7c:	f0c0 808f 	bcc.w	800dd9e <pow+0x196>
 800dc80:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dc84:	e02b      	b.n	800dcde <pow+0xd6>
 800dc86:	4ed4      	ldr	r6, [pc, #848]	@ (800dfd8 <pow+0x3d0>)
 800dc88:	42b4      	cmp	r4, r6
 800dc8a:	bf08      	it	eq
 800dc8c:	429d      	cmpeq	r5, r3
 800dc8e:	d109      	bne.n	800dca4 <pow+0x9c>
 800dc90:	1800      	adds	r0, r0, r0
 800dc92:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800dc96:	eb4a 0a0a 	adc.w	sl, sl, sl
 800dc9a:	4283      	cmp	r3, r0
 800dc9c:	4bcf      	ldr	r3, [pc, #828]	@ (800dfdc <pow+0x3d4>)
 800dc9e:	eb73 030a 	sbcs.w	r3, r3, sl
 800dca2:	e7eb      	b.n	800dc7c <pow+0x74>
 800dca4:	196d      	adds	r5, r5, r5
 800dca6:	48ce      	ldr	r0, [pc, #824]	@ (800dfe0 <pow+0x3d8>)
 800dca8:	4164      	adcs	r4, r4
 800dcaa:	42ab      	cmp	r3, r5
 800dcac:	eb70 0604 	sbcs.w	r6, r0, r4
 800dcb0:	d375      	bcc.n	800dd9e <pow+0x196>
 800dcb2:	4281      	cmp	r1, r0
 800dcb4:	bf08      	it	eq
 800dcb6:	429a      	cmpeq	r2, r3
 800dcb8:	d171      	bne.n	800dd9e <pow+0x196>
 800dcba:	4aca      	ldr	r2, [pc, #808]	@ (800dfe4 <pow+0x3dc>)
 800dcbc:	4294      	cmp	r4, r2
 800dcbe:	bf08      	it	eq
 800dcc0:	429d      	cmpeq	r5, r3
 800dcc2:	d0dd      	beq.n	800dc80 <pow+0x78>
 800dcc4:	4294      	cmp	r4, r2
 800dcc6:	ea6f 0a0a 	mvn.w	sl, sl
 800dcca:	bf34      	ite	cc
 800dccc:	2400      	movcc	r4, #0
 800dcce:	2401      	movcs	r4, #1
 800dcd0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800dcd4:	4554      	cmp	r4, sl
 800dcd6:	f040 81dc 	bne.w	800e092 <pow+0x48a>
 800dcda:	ee21 0b01 	vmul.f64	d0, d1, d1
 800dcde:	b007      	add	sp, #28
 800dce0:	ecbd 8b0a 	vpop	{d8-d12}
 800dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce8:	196f      	adds	r7, r5, r5
 800dcea:	eb44 0904 	adc.w	r9, r4, r4
 800dcee:	1e7a      	subs	r2, r7, #1
 800dcf0:	f169 0300 	sbc.w	r3, r9, #0
 800dcf4:	4593      	cmp	fp, r2
 800dcf6:	eb7e 0303 	sbcs.w	r3, lr, r3
 800dcfa:	d225      	bcs.n	800dd48 <pow+0x140>
 800dcfc:	ee20 0b00 	vmul.f64	d0, d0, d0
 800dd00:	2c00      	cmp	r4, #0
 800dd02:	da13      	bge.n	800dd2c <pow+0x124>
 800dd04:	4651      	mov	r1, sl
 800dd06:	f7ff ff4b 	bl	800dba0 <checkint>
 800dd0a:	2801      	cmp	r0, #1
 800dd0c:	d10e      	bne.n	800dd2c <pow+0x124>
 800dd0e:	eeb1 0b40 	vneg.f64	d0, d0
 800dd12:	ea57 0909 	orrs.w	r9, r7, r9
 800dd16:	d10b      	bne.n	800dd30 <pow+0x128>
 800dd18:	f1ba 0f00 	cmp.w	sl, #0
 800dd1c:	dadf      	bge.n	800dcde <pow+0xd6>
 800dd1e:	b007      	add	sp, #28
 800dd20:	ecbd 8b0a 	vpop	{d8-d12}
 800dd24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	f000 bb7a 	b.w	800e420 <__math_divzero>
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	e7f0      	b.n	800dd12 <pow+0x10a>
 800dd30:	f1ba 0f00 	cmp.w	sl, #0
 800dd34:	dad3      	bge.n	800dcde <pow+0xd6>
 800dd36:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800dd3a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dd3e:	ed8d 7b00 	vstr	d7, [sp]
 800dd42:	ed9d 0b00 	vldr	d0, [sp]
 800dd46:	e7ca      	b.n	800dcde <pow+0xd6>
 800dd48:	2c00      	cmp	r4, #0
 800dd4a:	da2b      	bge.n	800dda4 <pow+0x19c>
 800dd4c:	4651      	mov	r1, sl
 800dd4e:	f7ff ff27 	bl	800dba0 <checkint>
 800dd52:	b930      	cbnz	r0, 800dd62 <pow+0x15a>
 800dd54:	b007      	add	sp, #28
 800dd56:	ecbd 8b0a 	vpop	{d8-d12}
 800dd5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5e:	f000 bb77 	b.w	800e450 <__math_invalid>
 800dd62:	1e41      	subs	r1, r0, #1
 800dd64:	4248      	negs	r0, r1
 800dd66:	4148      	adcs	r0, r1
 800dd68:	0480      	lsls	r0, r0, #18
 800dd6a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dd6e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800dd72:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800dd76:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800dd7a:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd7c:	d92d      	bls.n	800ddda <pow+0x1d2>
 800dd7e:	4b96      	ldr	r3, [pc, #600]	@ (800dfd8 <pow+0x3d0>)
 800dd80:	2000      	movs	r0, #0
 800dd82:	429c      	cmp	r4, r3
 800dd84:	bf08      	it	eq
 800dd86:	4285      	cmpeq	r5, r0
 800dd88:	f43f af7a 	beq.w	800dc80 <pow+0x78>
 800dd8c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800dd90:	428a      	cmp	r2, r1
 800dd92:	d80c      	bhi.n	800ddae <pow+0x1a6>
 800dd94:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dd98:	42a8      	cmp	r0, r5
 800dd9a:	41a3      	sbcs	r3, r4
 800dd9c:	d204      	bcs.n	800dda8 <pow+0x1a0>
 800dd9e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800dda2:	e79c      	b.n	800dcde <pow+0xd6>
 800dda4:	2000      	movs	r0, #0
 800dda6:	e7e4      	b.n	800dd72 <pow+0x16a>
 800dda8:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ddac:	e797      	b.n	800dcde <pow+0xd6>
 800ddae:	2d01      	cmp	r5, #1
 800ddb0:	eb74 0303 	sbcs.w	r3, r4, r3
 800ddb4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ddb8:	bf34      	ite	cc
 800ddba:	2301      	movcc	r3, #1
 800ddbc:	2300      	movcs	r3, #0
 800ddbe:	4296      	cmp	r6, r2
 800ddc0:	bf8c      	ite	hi
 800ddc2:	2600      	movhi	r6, #0
 800ddc4:	2601      	movls	r6, #1
 800ddc6:	42b3      	cmp	r3, r6
 800ddc8:	f000 809c 	beq.w	800df04 <pow+0x2fc>
 800ddcc:	b007      	add	sp, #28
 800ddce:	ecbd 8b0a 	vpop	{d8-d12}
 800ddd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd6:	f000 bb1b 	b.w	800e410 <__math_oflow>
 800ddda:	f1bc 0f00 	cmp.w	ip, #0
 800ddde:	d10a      	bne.n	800ddf6 <pow+0x1ee>
 800dde0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800dfc8 <pow+0x3c0>
 800dde4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dde8:	ec53 2b17 	vmov	r2, r3, d7
 800ddec:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800ddf0:	4615      	mov	r5, r2
 800ddf2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800ddf6:	4a7c      	ldr	r2, [pc, #496]	@ (800dfe8 <pow+0x3e0>)
 800ddf8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800ddfc:	4422      	add	r2, r4
 800ddfe:	1513      	asrs	r3, r2, #20
 800de00:	ee03 3a10 	vmov	s6, r3
 800de04:	4b79      	ldr	r3, [pc, #484]	@ (800dfec <pow+0x3e4>)
 800de06:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800de0a:	f36f 0213 	bfc	r2, #0, #20
 800de0e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800de12:	1aa7      	subs	r7, r4, r2
 800de14:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800de18:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800de1c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800de20:	1e2e      	subs	r6, r5, #0
 800de22:	ec47 6b14 	vmov	d4, r6, r7
 800de26:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800de2a:	eea4 6b05 	vfma.f64	d6, d4, d5
 800de2e:	ed93 5b00 	vldr	d5, [r3]
 800de32:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800de36:	eea3 2b05 	vfma.f64	d2, d3, d5
 800de3a:	ed93 5b02 	vldr	d5, [r3, #8]
 800de3e:	ee36 4b02 	vadd.f64	d4, d6, d2
 800de42:	ee32 2b44 	vsub.f64	d2, d2, d4
 800de46:	eea3 7b05 	vfma.f64	d7, d3, d5
 800de4a:	ed93 5b04 	vldr	d5, [r3, #16]
 800de4e:	ee32 2b06 	vadd.f64	d2, d2, d6
 800de52:	ee37 7b02 	vadd.f64	d7, d7, d2
 800de56:	ee26 5b05 	vmul.f64	d5, d6, d5
 800de5a:	ee26 0b05 	vmul.f64	d0, d6, d5
 800de5e:	ee34 8b00 	vadd.f64	d8, d4, d0
 800de62:	eeb0 9b40 	vmov.f64	d9, d0
 800de66:	ee34 4b48 	vsub.f64	d4, d4, d8
 800de6a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800de6e:	ee34 ab00 	vadd.f64	d10, d4, d0
 800de72:	ed93 5b06 	vldr	d5, [r3, #24]
 800de76:	ee26 bb00 	vmul.f64	d11, d6, d0
 800de7a:	ee37 7b09 	vadd.f64	d7, d7, d9
 800de7e:	ed93 4b08 	vldr	d4, [r3, #32]
 800de82:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800de86:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800de8a:	eea6 5b04 	vfma.f64	d5, d6, d4
 800de8e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800de92:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800de96:	eea6 4b03 	vfma.f64	d4, d6, d3
 800de9a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800de9e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800dea2:	eea0 4b03 	vfma.f64	d4, d0, d3
 800dea6:	eea0 5b04 	vfma.f64	d5, d0, d4
 800deaa:	eeab 7b05 	vfma.f64	d7, d11, d5
 800deae:	ee38 4b07 	vadd.f64	d4, d8, d7
 800deb2:	ee21 6b04 	vmul.f64	d6, d1, d4
 800deb6:	ee16 3a90 	vmov	r3, s13
 800deba:	eeb0 5b46 	vmov.f64	d5, d6
 800debe:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800dec2:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800dec6:	18b2      	adds	r2, r6, r2
 800dec8:	2a3e      	cmp	r2, #62	@ 0x3e
 800deca:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800dece:	ee38 8b44 	vsub.f64	d8, d8, d4
 800ded2:	ee38 8b07 	vadd.f64	d8, d8, d7
 800ded6:	eea1 5b08 	vfma.f64	d5, d1, d8
 800deda:	d91b      	bls.n	800df14 <pow+0x30c>
 800dedc:	2a00      	cmp	r2, #0
 800dede:	da0b      	bge.n	800def8 <pow+0x2f0>
 800dee0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dee4:	ee36 0b00 	vadd.f64	d0, d6, d0
 800dee8:	2800      	cmp	r0, #0
 800deea:	f43f aef8 	beq.w	800dcde <pow+0xd6>
 800deee:	eeb1 0b40 	vneg.f64	d0, d0
 800def2:	e6f4      	b.n	800dcde <pow+0xd6>
 800def4:	2000      	movs	r0, #0
 800def6:	e77e      	b.n	800ddf6 <pow+0x1ee>
 800def8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800defc:	d909      	bls.n	800df12 <pow+0x30a>
 800defe:	2b00      	cmp	r3, #0
 800df00:	f6bf af64 	bge.w	800ddcc <pow+0x1c4>
 800df04:	b007      	add	sp, #28
 800df06:	ecbd 8b0a 	vpop	{d8-d12}
 800df0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0e:	f000 ba77 	b.w	800e400 <__math_uflow>
 800df12:	2600      	movs	r6, #0
 800df14:	4936      	ldr	r1, [pc, #216]	@ (800dff0 <pow+0x3e8>)
 800df16:	ed91 4b02 	vldr	d4, [r1, #8]
 800df1a:	ed91 3b00 	vldr	d3, [r1]
 800df1e:	eeb0 7b44 	vmov.f64	d7, d4
 800df22:	eea6 7b03 	vfma.f64	d7, d6, d3
 800df26:	ee17 5a10 	vmov	r5, s14
 800df2a:	ee37 7b44 	vsub.f64	d7, d7, d4
 800df2e:	ed91 4b04 	vldr	d4, [r1, #16]
 800df32:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800df36:	eea7 6b04 	vfma.f64	d6, d7, d4
 800df3a:	ed91 4b06 	vldr	d4, [r1, #24]
 800df3e:	18dc      	adds	r4, r3, r3
 800df40:	f104 030f 	add.w	r3, r4, #15
 800df44:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800df48:	eea7 6b04 	vfma.f64	d6, d7, d4
 800df4c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800df50:	ee35 5b06 	vadd.f64	d5, d5, d6
 800df54:	ee25 6b05 	vmul.f64	d6, d5, d5
 800df58:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800df5c:	ed91 4b08 	vldr	d4, [r1, #32]
 800df60:	ee35 7b07 	vadd.f64	d7, d5, d7
 800df64:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800df68:	eea5 4b03 	vfma.f64	d4, d5, d3
 800df6c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800df70:	eea6 7b04 	vfma.f64	d7, d6, d4
 800df74:	ee26 6b06 	vmul.f64	d6, d6, d6
 800df78:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800df7c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800df80:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800df84:	eea5 4b03 	vfma.f64	d4, d5, d3
 800df88:	1940      	adds	r0, r0, r5
 800df8a:	2700      	movs	r7, #0
 800df8c:	eb17 020c 	adds.w	r2, r7, ip
 800df90:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800df94:	eea6 7b04 	vfma.f64	d7, d6, d4
 800df98:	2e00      	cmp	r6, #0
 800df9a:	d175      	bne.n	800e088 <pow+0x480>
 800df9c:	42bd      	cmp	r5, r7
 800df9e:	db29      	blt.n	800dff4 <pow+0x3ec>
 800dfa0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800dfa4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	ec41 0b10 	vmov	d0, r0, r1
 800dfae:	eea7 0b00 	vfma.f64	d0, d7, d0
 800dfb2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800dfd0 <pow+0x3c8>
 800dfb6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dfba:	b007      	add	sp, #28
 800dfbc:	ecbd 8b0a 	vpop	{d8-d12}
 800dfc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc4:	f000 ba5c 	b.w	800e480 <__math_check_oflow>
 800dfc8:	00000000 	.word	0x00000000
 800dfcc:	43300000 	.word	0x43300000
 800dfd0:	00000000 	.word	0x00000000
 800dfd4:	7f000000 	.word	0x7f000000
 800dfd8:	3ff00000 	.word	0x3ff00000
 800dfdc:	fff00000 	.word	0xfff00000
 800dfe0:	ffe00000 	.word	0xffe00000
 800dfe4:	7fe00000 	.word	0x7fe00000
 800dfe8:	c0196aab 	.word	0xc0196aab
 800dfec:	0800eac8 	.word	0x0800eac8
 800dff0:	0800fb28 	.word	0x0800fb28
 800dff4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800dff8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800dffc:	4610      	mov	r0, r2
 800dffe:	ec41 0b15 	vmov	d5, r0, r1
 800e002:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800e006:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e00a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e00e:	eeb0 4bc7 	vabs.f64	d4, d7
 800e012:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800e016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e01a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800e098 <pow+0x490>
 800e01e:	d52a      	bpl.n	800e076 <pow+0x46e>
 800e020:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e024:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e02c:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e030:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800e034:	bf58      	it	pl
 800e036:	eeb0 4b43 	vmovpl.f64	d4, d3
 800e03a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e03e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800e042:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e046:	ee36 6b05 	vadd.f64	d6, d6, d5
 800e04a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800e04e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800e052:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e05a:	d104      	bne.n	800e066 <pow+0x45e>
 800e05c:	4632      	mov	r2, r6
 800e05e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e062:	ec43 2b17 	vmov	d7, r2, r3
 800e066:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e06a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e06e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e072:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e076:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e07a:	b007      	add	sp, #28
 800e07c:	ecbd 8b0a 	vpop	{d8-d12}
 800e080:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e084:	f000 b9f3 	b.w	800e46e <__math_check_uflow>
 800e088:	ec43 2b10 	vmov	d0, r2, r3
 800e08c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e090:	e625      	b.n	800dcde <pow+0xd6>
 800e092:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800e0a0 <pow+0x498>
 800e096:	e622      	b.n	800dcde <pow+0xd6>
 800e098:	00000000 	.word	0x00000000
 800e09c:	00100000 	.word	0x00100000
	...

0800e0a8 <fabsf>:
 800e0a8:	ee10 3a10 	vmov	r3, s0
 800e0ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e0b0:	ee00 3a10 	vmov	s0, r3
 800e0b4:	4770      	bx	lr
	...

0800e0b8 <__ieee754_asinf>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	ee10 5a10 	vmov	r5, s0
 800e0be:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e0c2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800e0c6:	ed2d 8b04 	vpush	{d8-d9}
 800e0ca:	d10c      	bne.n	800e0e6 <__ieee754_asinf+0x2e>
 800e0cc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e240 <__ieee754_asinf+0x188>
 800e0d0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800e244 <__ieee754_asinf+0x18c>
 800e0d4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e0d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e0dc:	eeb0 0a67 	vmov.f32	s0, s15
 800e0e0:	ecbd 8b04 	vpop	{d8-d9}
 800e0e4:	bd38      	pop	{r3, r4, r5, pc}
 800e0e6:	d904      	bls.n	800e0f2 <__ieee754_asinf+0x3a>
 800e0e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e0ec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e0f0:	e7f6      	b.n	800e0e0 <__ieee754_asinf+0x28>
 800e0f2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e0f6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e0fa:	d20b      	bcs.n	800e114 <__ieee754_asinf+0x5c>
 800e0fc:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800e100:	d252      	bcs.n	800e1a8 <__ieee754_asinf+0xf0>
 800e102:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800e248 <__ieee754_asinf+0x190>
 800e106:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e10a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e112:	dce5      	bgt.n	800e0e0 <__ieee754_asinf+0x28>
 800e114:	f7ff ffc8 	bl	800e0a8 <fabsf>
 800e118:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800e11c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e120:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e124:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e24c <__ieee754_asinf+0x194>
 800e128:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800e250 <__ieee754_asinf+0x198>
 800e12c:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 800e254 <__ieee754_asinf+0x19c>
 800e130:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e134:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800e258 <__ieee754_asinf+0x1a0>
 800e138:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e13c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800e25c <__ieee754_asinf+0x1a4>
 800e140:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e144:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800e260 <__ieee754_asinf+0x1a8>
 800e148:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e14c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800e264 <__ieee754_asinf+0x1ac>
 800e150:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e154:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800e268 <__ieee754_asinf+0x1b0>
 800e158:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e15c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800e26c <__ieee754_asinf+0x1b4>
 800e160:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e164:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800e270 <__ieee754_asinf+0x1b8>
 800e168:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e16c:	eeb0 0a48 	vmov.f32	s0, s16
 800e170:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e174:	f000 f922 	bl	800e3bc <__ieee754_sqrtf>
 800e178:	4b3e      	ldr	r3, [pc, #248]	@ (800e274 <__ieee754_asinf+0x1bc>)
 800e17a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e17e:	429c      	cmp	r4, r3
 800e180:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e184:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e188:	d93d      	bls.n	800e206 <__ieee754_asinf+0x14e>
 800e18a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e18e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800e278 <__ieee754_asinf+0x1c0>
 800e192:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e196:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800e244 <__ieee754_asinf+0x18c>
 800e19a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e19e:	2d00      	cmp	r5, #0
 800e1a0:	bfd8      	it	le
 800e1a2:	eeb1 0a40 	vnegle.f32	s0, s0
 800e1a6:	e79b      	b.n	800e0e0 <__ieee754_asinf+0x28>
 800e1a8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e1ac:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800e250 <__ieee754_asinf+0x198>
 800e1b0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e24c <__ieee754_asinf+0x194>
 800e1b4:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 800e264 <__ieee754_asinf+0x1ac>
 800e1b8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e1bc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e258 <__ieee754_asinf+0x1a0>
 800e1c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e1c4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800e25c <__ieee754_asinf+0x1a4>
 800e1c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e1cc:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800e260 <__ieee754_asinf+0x1a8>
 800e1d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e1d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800e254 <__ieee754_asinf+0x19c>
 800e1d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e1dc:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800e268 <__ieee754_asinf+0x1b0>
 800e1e0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e1e4:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800e26c <__ieee754_asinf+0x1b4>
 800e1e8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e1ec:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800e270 <__ieee754_asinf+0x1b8>
 800e1f0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e1f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1f8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e1fc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e200:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e204:	e76c      	b.n	800e0e0 <__ieee754_asinf+0x28>
 800e206:	ee10 3a10 	vmov	r3, s0
 800e20a:	f36f 030b 	bfc	r3, #0, #12
 800e20e:	ee07 3a10 	vmov	s14, r3
 800e212:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e216:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e21a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e21e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e240 <__ieee754_asinf+0x188>
 800e222:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e226:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800e27c <__ieee754_asinf+0x1c4>
 800e22a:	eee5 7a66 	vfms.f32	s15, s10, s13
 800e22e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e232:	eeb0 6a40 	vmov.f32	s12, s0
 800e236:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e23a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e23e:	e7ac      	b.n	800e19a <__ieee754_asinf+0xe2>
 800e240:	b33bbd2e 	.word	0xb33bbd2e
 800e244:	3fc90fdb 	.word	0x3fc90fdb
 800e248:	7149f2ca 	.word	0x7149f2ca
 800e24c:	3a4f7f04 	.word	0x3a4f7f04
 800e250:	3811ef08 	.word	0x3811ef08
 800e254:	3e2aaaab 	.word	0x3e2aaaab
 800e258:	bd241146 	.word	0xbd241146
 800e25c:	3e4e0aa8 	.word	0x3e4e0aa8
 800e260:	bea6b090 	.word	0xbea6b090
 800e264:	3d9dc62e 	.word	0x3d9dc62e
 800e268:	bf303361 	.word	0xbf303361
 800e26c:	4001572d 	.word	0x4001572d
 800e270:	c019d139 	.word	0xc019d139
 800e274:	3f799999 	.word	0x3f799999
 800e278:	333bbd2e 	.word	0x333bbd2e
 800e27c:	3f490fdb 	.word	0x3f490fdb

0800e280 <__ieee754_atan2f>:
 800e280:	ee10 2a90 	vmov	r2, s1
 800e284:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e288:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e28c:	b510      	push	{r4, lr}
 800e28e:	eef0 7a40 	vmov.f32	s15, s0
 800e292:	d806      	bhi.n	800e2a2 <__ieee754_atan2f+0x22>
 800e294:	ee10 0a10 	vmov	r0, s0
 800e298:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e29c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e2a0:	d904      	bls.n	800e2ac <__ieee754_atan2f+0x2c>
 800e2a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e2a6:	eeb0 0a67 	vmov.f32	s0, s15
 800e2aa:	bd10      	pop	{r4, pc}
 800e2ac:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e2b0:	d103      	bne.n	800e2ba <__ieee754_atan2f+0x3a>
 800e2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2b6:	f000 b8f7 	b.w	800e4a8 <atanf>
 800e2ba:	1794      	asrs	r4, r2, #30
 800e2bc:	f004 0402 	and.w	r4, r4, #2
 800e2c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e2c4:	b93b      	cbnz	r3, 800e2d6 <__ieee754_atan2f+0x56>
 800e2c6:	2c02      	cmp	r4, #2
 800e2c8:	d05c      	beq.n	800e384 <__ieee754_atan2f+0x104>
 800e2ca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800e398 <__ieee754_atan2f+0x118>
 800e2ce:	2c03      	cmp	r4, #3
 800e2d0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800e2d4:	e7e7      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e2d6:	b939      	cbnz	r1, 800e2e8 <__ieee754_atan2f+0x68>
 800e2d8:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800e39c <__ieee754_atan2f+0x11c>
 800e2dc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800e3a0 <__ieee754_atan2f+0x120>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	fe67 7a27 	vselge.f32	s15, s14, s15
 800e2e6:	e7de      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e2e8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e2ec:	d110      	bne.n	800e310 <__ieee754_atan2f+0x90>
 800e2ee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e2f2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800e2f6:	d107      	bne.n	800e308 <__ieee754_atan2f+0x88>
 800e2f8:	2c02      	cmp	r4, #2
 800e2fa:	d846      	bhi.n	800e38a <__ieee754_atan2f+0x10a>
 800e2fc:	4b29      	ldr	r3, [pc, #164]	@ (800e3a4 <__ieee754_atan2f+0x124>)
 800e2fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e302:	edd3 7a00 	vldr	s15, [r3]
 800e306:	e7ce      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e308:	2c02      	cmp	r4, #2
 800e30a:	d841      	bhi.n	800e390 <__ieee754_atan2f+0x110>
 800e30c:	4b26      	ldr	r3, [pc, #152]	@ (800e3a8 <__ieee754_atan2f+0x128>)
 800e30e:	e7f6      	b.n	800e2fe <__ieee754_atan2f+0x7e>
 800e310:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e314:	d0e0      	beq.n	800e2d8 <__ieee754_atan2f+0x58>
 800e316:	1a5b      	subs	r3, r3, r1
 800e318:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e31c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e320:	da1a      	bge.n	800e358 <__ieee754_atan2f+0xd8>
 800e322:	2a00      	cmp	r2, #0
 800e324:	da01      	bge.n	800e32a <__ieee754_atan2f+0xaa>
 800e326:	313c      	adds	r1, #60	@ 0x3c
 800e328:	db19      	blt.n	800e35e <__ieee754_atan2f+0xde>
 800e32a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e32e:	f7ff febb 	bl	800e0a8 <fabsf>
 800e332:	f000 f8b9 	bl	800e4a8 <atanf>
 800e336:	eef0 7a40 	vmov.f32	s15, s0
 800e33a:	2c01      	cmp	r4, #1
 800e33c:	d012      	beq.n	800e364 <__ieee754_atan2f+0xe4>
 800e33e:	2c02      	cmp	r4, #2
 800e340:	d017      	beq.n	800e372 <__ieee754_atan2f+0xf2>
 800e342:	2c00      	cmp	r4, #0
 800e344:	d0af      	beq.n	800e2a6 <__ieee754_atan2f+0x26>
 800e346:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e3ac <__ieee754_atan2f+0x12c>
 800e34a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e34e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e3b0 <__ieee754_atan2f+0x130>
 800e352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e356:	e7a6      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e358:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800e3a0 <__ieee754_atan2f+0x120>
 800e35c:	e7ed      	b.n	800e33a <__ieee754_atan2f+0xba>
 800e35e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e3b4 <__ieee754_atan2f+0x134>
 800e362:	e7ea      	b.n	800e33a <__ieee754_atan2f+0xba>
 800e364:	ee17 3a90 	vmov	r3, s15
 800e368:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e36c:	ee07 3a90 	vmov	s15, r3
 800e370:	e799      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e372:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e3ac <__ieee754_atan2f+0x12c>
 800e376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e37a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e3b0 <__ieee754_atan2f+0x130>
 800e37e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e382:	e790      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e384:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e3b0 <__ieee754_atan2f+0x130>
 800e388:	e78d      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e38a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e3b8 <__ieee754_atan2f+0x138>
 800e38e:	e78a      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e390:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e3b4 <__ieee754_atan2f+0x134>
 800e394:	e787      	b.n	800e2a6 <__ieee754_atan2f+0x26>
 800e396:	bf00      	nop
 800e398:	c0490fdb 	.word	0xc0490fdb
 800e39c:	bfc90fdb 	.word	0xbfc90fdb
 800e3a0:	3fc90fdb 	.word	0x3fc90fdb
 800e3a4:	0800fb1c 	.word	0x0800fb1c
 800e3a8:	0800fb10 	.word	0x0800fb10
 800e3ac:	33bbbd2e 	.word	0x33bbbd2e
 800e3b0:	40490fdb 	.word	0x40490fdb
 800e3b4:	00000000 	.word	0x00000000
 800e3b8:	3f490fdb 	.word	0x3f490fdb

0800e3bc <__ieee754_sqrtf>:
 800e3bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e3c0:	4770      	bx	lr

0800e3c2 <with_errno>:
 800e3c2:	b510      	push	{r4, lr}
 800e3c4:	ed2d 8b02 	vpush	{d8}
 800e3c8:	eeb0 8b40 	vmov.f64	d8, d0
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	f7fc feaf 	bl	800b130 <__errno>
 800e3d2:	eeb0 0b48 	vmov.f64	d0, d8
 800e3d6:	ecbd 8b02 	vpop	{d8}
 800e3da:	6004      	str	r4, [r0, #0]
 800e3dc:	bd10      	pop	{r4, pc}

0800e3de <xflow>:
 800e3de:	b082      	sub	sp, #8
 800e3e0:	b158      	cbz	r0, 800e3fa <xflow+0x1c>
 800e3e2:	eeb1 7b40 	vneg.f64	d7, d0
 800e3e6:	ed8d 7b00 	vstr	d7, [sp]
 800e3ea:	ed9d 7b00 	vldr	d7, [sp]
 800e3ee:	2022      	movs	r0, #34	@ 0x22
 800e3f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3f4:	b002      	add	sp, #8
 800e3f6:	f7ff bfe4 	b.w	800e3c2 <with_errno>
 800e3fa:	eeb0 7b40 	vmov.f64	d7, d0
 800e3fe:	e7f2      	b.n	800e3e6 <xflow+0x8>

0800e400 <__math_uflow>:
 800e400:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e408 <__math_uflow+0x8>
 800e404:	f7ff bfeb 	b.w	800e3de <xflow>
 800e408:	00000000 	.word	0x00000000
 800e40c:	10000000 	.word	0x10000000

0800e410 <__math_oflow>:
 800e410:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e418 <__math_oflow+0x8>
 800e414:	f7ff bfe3 	b.w	800e3de <xflow>
 800e418:	00000000 	.word	0x00000000
 800e41c:	70000000 	.word	0x70000000

0800e420 <__math_divzero>:
 800e420:	b082      	sub	sp, #8
 800e422:	2800      	cmp	r0, #0
 800e424:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800e428:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e42c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800e430:	ed8d 7b00 	vstr	d7, [sp]
 800e434:	ed9d 0b00 	vldr	d0, [sp]
 800e438:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800e448 <__math_divzero+0x28>
 800e43c:	2022      	movs	r0, #34	@ 0x22
 800e43e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e442:	b002      	add	sp, #8
 800e444:	f7ff bfbd 	b.w	800e3c2 <with_errno>
	...

0800e450 <__math_invalid>:
 800e450:	eeb0 7b40 	vmov.f64	d7, d0
 800e454:	eeb4 7b47 	vcmp.f64	d7, d7
 800e458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e460:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e464:	d602      	bvs.n	800e46c <__math_invalid+0x1c>
 800e466:	2021      	movs	r0, #33	@ 0x21
 800e468:	f7ff bfab 	b.w	800e3c2 <with_errno>
 800e46c:	4770      	bx	lr

0800e46e <__math_check_uflow>:
 800e46e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e476:	d102      	bne.n	800e47e <__math_check_uflow+0x10>
 800e478:	2022      	movs	r0, #34	@ 0x22
 800e47a:	f7ff bfa2 	b.w	800e3c2 <with_errno>
 800e47e:	4770      	bx	lr

0800e480 <__math_check_oflow>:
 800e480:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800e4a0 <__math_check_oflow+0x20>
 800e484:	eeb0 7bc0 	vabs.f64	d7, d0
 800e488:	eeb4 7b46 	vcmp.f64	d7, d6
 800e48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e490:	dd02      	ble.n	800e498 <__math_check_oflow+0x18>
 800e492:	2022      	movs	r0, #34	@ 0x22
 800e494:	f7ff bf95 	b.w	800e3c2 <with_errno>
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop
 800e49c:	f3af 8000 	nop.w
 800e4a0:	ffffffff 	.word	0xffffffff
 800e4a4:	7fefffff 	.word	0x7fefffff

0800e4a8 <atanf>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	ee10 5a10 	vmov	r5, s0
 800e4ae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e4b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e4b6:	eef0 7a40 	vmov.f32	s15, s0
 800e4ba:	d30f      	bcc.n	800e4dc <atanf+0x34>
 800e4bc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e4c0:	d904      	bls.n	800e4cc <atanf+0x24>
 800e4c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e4c6:	eeb0 0a67 	vmov.f32	s0, s15
 800e4ca:	bd38      	pop	{r3, r4, r5, pc}
 800e4cc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e604 <atanf+0x15c>
 800e4d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e608 <atanf+0x160>
 800e4d4:	2d00      	cmp	r5, #0
 800e4d6:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800e4da:	e7f4      	b.n	800e4c6 <atanf+0x1e>
 800e4dc:	4b4b      	ldr	r3, [pc, #300]	@ (800e60c <atanf+0x164>)
 800e4de:	429c      	cmp	r4, r3
 800e4e0:	d810      	bhi.n	800e504 <atanf+0x5c>
 800e4e2:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e4e6:	d20a      	bcs.n	800e4fe <atanf+0x56>
 800e4e8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e610 <atanf+0x168>
 800e4ec:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e4f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4f4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fc:	dce3      	bgt.n	800e4c6 <atanf+0x1e>
 800e4fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e502:	e013      	b.n	800e52c <atanf+0x84>
 800e504:	f7ff fdd0 	bl	800e0a8 <fabsf>
 800e508:	4b42      	ldr	r3, [pc, #264]	@ (800e614 <atanf+0x16c>)
 800e50a:	429c      	cmp	r4, r3
 800e50c:	d84f      	bhi.n	800e5ae <atanf+0x106>
 800e50e:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e512:	429c      	cmp	r4, r3
 800e514:	d841      	bhi.n	800e59a <atanf+0xf2>
 800e516:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e51a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e51e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e522:	2300      	movs	r3, #0
 800e524:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e528:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e52c:	1c5a      	adds	r2, r3, #1
 800e52e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e532:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800e618 <atanf+0x170>
 800e536:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800e61c <atanf+0x174>
 800e53a:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800e620 <atanf+0x178>
 800e53e:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e542:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e546:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800e624 <atanf+0x17c>
 800e54a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e54e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800e628 <atanf+0x180>
 800e552:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e556:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800e62c <atanf+0x184>
 800e55a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e55e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e630 <atanf+0x188>
 800e562:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e566:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800e634 <atanf+0x18c>
 800e56a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e56e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e638 <atanf+0x190>
 800e572:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e576:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800e63c <atanf+0x194>
 800e57a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e57e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800e640 <atanf+0x198>
 800e582:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e586:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e58a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e58e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e592:	d121      	bne.n	800e5d8 <atanf+0x130>
 800e594:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e598:	e795      	b.n	800e4c6 <atanf+0x1e>
 800e59a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e59e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e5a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e5ac:	e7be      	b.n	800e52c <atanf+0x84>
 800e5ae:	4b25      	ldr	r3, [pc, #148]	@ (800e644 <atanf+0x19c>)
 800e5b0:	429c      	cmp	r4, r3
 800e5b2:	d80b      	bhi.n	800e5cc <atanf+0x124>
 800e5b4:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e5b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e5bc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e5c0:	2302      	movs	r3, #2
 800e5c2:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e5c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5ca:	e7af      	b.n	800e52c <atanf+0x84>
 800e5cc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e5d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	e7a9      	b.n	800e52c <atanf+0x84>
 800e5d8:	4a1b      	ldr	r2, [pc, #108]	@ (800e648 <atanf+0x1a0>)
 800e5da:	491c      	ldr	r1, [pc, #112]	@ (800e64c <atanf+0x1a4>)
 800e5dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e5e0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e5e4:	edd3 6a00 	vldr	s13, [r3]
 800e5e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e5ec:	2d00      	cmp	r5, #0
 800e5ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e5f2:	edd2 7a00 	vldr	s15, [r2]
 800e5f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5fa:	bfb8      	it	lt
 800e5fc:	eef1 7a67 	vneglt.f32	s15, s15
 800e600:	e761      	b.n	800e4c6 <atanf+0x1e>
 800e602:	bf00      	nop
 800e604:	bfc90fdb 	.word	0xbfc90fdb
 800e608:	3fc90fdb 	.word	0x3fc90fdb
 800e60c:	3edfffff 	.word	0x3edfffff
 800e610:	7149f2ca 	.word	0x7149f2ca
 800e614:	3f97ffff 	.word	0x3f97ffff
 800e618:	3c8569d7 	.word	0x3c8569d7
 800e61c:	3d4bda59 	.word	0x3d4bda59
 800e620:	bd6ef16b 	.word	0xbd6ef16b
 800e624:	3d886b35 	.word	0x3d886b35
 800e628:	3dba2e6e 	.word	0x3dba2e6e
 800e62c:	3e124925 	.word	0x3e124925
 800e630:	3eaaaaab 	.word	0x3eaaaaab
 800e634:	bd15a221 	.word	0xbd15a221
 800e638:	bd9d8795 	.word	0xbd9d8795
 800e63c:	bde38e38 	.word	0xbde38e38
 800e640:	be4ccccd 	.word	0xbe4ccccd
 800e644:	401bffff 	.word	0x401bffff
 800e648:	080103a8 	.word	0x080103a8
 800e64c:	08010398 	.word	0x08010398

0800e650 <_init>:
 800e650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e652:	bf00      	nop
 800e654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e656:	bc08      	pop	{r3}
 800e658:	469e      	mov	lr, r3
 800e65a:	4770      	bx	lr

0800e65c <_fini>:
 800e65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65e:	bf00      	nop
 800e660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e662:	bc08      	pop	{r3}
 800e664:	469e      	mov	lr, r3
 800e666:	4770      	bx	lr
