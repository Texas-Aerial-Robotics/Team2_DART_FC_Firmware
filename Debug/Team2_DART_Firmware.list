
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d400  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  0800d6a0  0800d6a0  0000e6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f408  0800f408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f410  0800f410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f414  0800f414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800f418  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000488  240001e0  0800f5f4  000111e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000668  0800f5f4  00011668  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019093  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f0f  00000000  00000000  0002a29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  0002d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eeb  00000000  00000000  0002e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038eb8  00000000  00000000  0002f3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019c07  00000000  00000000  0006827b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001696be  00000000  00000000  00081e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eb540  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068a0  00000000  00000000  001eb584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001f1e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d688 	.word	0x0800d688

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800d688 	.word	0x0800d688

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float q[4], float gx, float gy, float gz, float ax, float ay, float az) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b092      	sub	sp, #72	@ 0x48
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	61f8      	str	r0, [r7, #28]
 8000a70:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a74:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a78:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000a80:	ed87 2a02 	vstr	s4, [r7, #8]
 8000a84:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a94:	d10e      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa2:	d107      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab0:	f000 8136 	beq.w	8000d20 <MahonyAHRSupdateIMU+0x2b8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	f000 fa3c 	bl	8000f54 <invSqrt>
 8000adc:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8000ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ae4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aec:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8000af0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000af4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afc:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8000b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b04:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b0c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3304      	adds	r3, #4
 8000b14:	ed93 7a00 	vldr	s14, [r3]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	330c      	adds	r3, #12
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	edd3 6a00 	vldr	s13, [r3]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	ed93 7a00 	vldr	s14, [r3]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	3308      	adds	r3, #8
 8000b54:	edd3 6a00 	vldr	s13, [r3]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	330c      	adds	r3, #12
 8000b5c:	edd3 7a00 	vldr	s15, [r3]
 8000b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	ed93 7a00 	vldr	s14, [r3]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	330c      	adds	r3, #12
 8000b88:	edd3 6a00 	vldr	s13, [r3]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	330c      	adds	r3, #12
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8000ba0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ba4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bac:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bb0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 8000bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bcc:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bdc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8000be0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bec:	edd7 6a02 	vldr	s13, [r7, #8]
 8000bf0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bfc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8000c00:	4bcd      	ldr	r3, [pc, #820]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	dd54      	ble.n	8000cba <MahonyAHRSupdateIMU+0x252>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8000c10:	4bc9      	ldr	r3, [pc, #804]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c26:	4bc6      	ldr	r3, [pc, #792]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c30:	4bc3      	ldr	r3, [pc, #780]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c32:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8000c36:	4bc0      	ldr	r3, [pc, #768]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c38:	ed93 7a00 	vldr	s14, [r3]
 8000c3c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c44:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c4c:	4bbd      	ldr	r3, [pc, #756]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	4bbb      	ldr	r3, [pc, #748]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8000c5c:	4bb6      	ldr	r3, [pc, #728]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c72:	4bb5      	ldr	r3, [pc, #724]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	4bb2      	ldr	r3, [pc, #712]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8000c82:	4baf      	ldr	r3, [pc, #700]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c90:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8000c94:	4bab      	ldr	r3, [pc, #684]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca2:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8000ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a04 	vstr	s15, [r7, #16]
 8000cb8:	e00b      	b.n	8000cd2 <MahonyAHRSupdateIMU+0x26a>
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8000cba:	4ba1      	ldr	r3, [pc, #644]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8000cca:	4b9f      	ldr	r3, [pc, #636]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8000cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cd4:	ed93 7a00 	vldr	s14, [r3]
 8000cd8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8000cec:	4b97      	ldr	r3, [pc, #604]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cee:	ed93 7a00 	vldr	s14, [r3]
 8000cf2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d02:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8000d06:	4b91      	ldr	r3, [pc, #580]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000d08:	ed93 7a00 	vldr	s14, [r3]
 8000d0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d14:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1c:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8000d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d24:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2c:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * (1.0f / sampleFreq));
 8000d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d34:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * (1.0f / sampleFreq));
 8000d40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d44:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q[0];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	ed93 7a00 	vldr	s14, [r3]
 8000d68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d6c:	eef1 6a67 	vneg.f32	s13, s15
 8000d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d78:	ed97 6a08 	vldr	s12, [r7, #32]
 8000d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	330c      	adds	r3, #12
 8000d8c:	ed93 6a00 	vldr	s12, [r3]
 8000d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	ed93 7a00 	vldr	s14, [r3]
 8000dae:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dba:	ed97 6a08 	vldr	s12, [r7, #32]
 8000dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	ed93 6a00 	vldr	s12, [r3]
 8000dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3308      	adds	r3, #8
 8000dee:	ed93 7a00 	vldr	s14, [r3]
 8000df2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dfe:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	330c      	adds	r3, #12
 8000e12:	ed93 6a00 	vldr	s12, [r3]
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3308      	adds	r3, #8
 8000e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2a:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	330c      	adds	r3, #12
 8000e32:	ed93 7a00 	vldr	s14, [r3]
 8000e36:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e42:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e52:	ed97 6a08 	vldr	s12, [r7, #32]
 8000e56:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	330c      	adds	r3, #12
 8000e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6a:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	ed93 7a00 	vldr	s14, [r3]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	edd3 6a00 	vldr	s13, [r3]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3308      	adds	r3, #8
 8000e9a:	edd3 6a00 	vldr	s13, [r3]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	edd3 6a00 	vldr	s13, [r3]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f000 f843 	bl	8000f54 <invSqrt>
 8000ece:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efa:	edc3 7a00 	vstr	s15, [r3]
	q[2] *= recipNorm;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3308      	adds	r3, #8
 8000f02:	ed93 7a00 	vldr	s14, [r3]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f12:	edc3 7a00 	vstr	s15, [r3]
	q[3] *= recipNorm;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	ed93 7a00 	vldr	s14, [r3]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	330c      	adds	r3, #12
 8000f22:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f2e:	bf00      	nop
 8000f30:	3748      	adds	r7, #72	@ 0x48
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	240001fc 	.word	0x240001fc
 8000f3c:	3b5a740e 	.word	0x3b5a740e
 8000f40:	24000200 	.word	0x24000200
 8000f44:	24000204 	.word	0x24000204
 8000f48:	24000208 	.word	0x24000208
 8000f4c:	24000000 	.word	0x24000000
 8000f50:	3ada740e 	.word	0x3ada740e

08000f54 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	105a      	asrs	r2, r3, #1
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <invSqrt+0x74>)
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000f8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	ee07 3a90 	vmov	s15, r3
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	5f3759df 	.word	0x5f3759df
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <bmp388_quantize_calibration>:
volatile double altitude;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (double)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe0:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 8000fe4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fe8:	4b78      	ldr	r3, [pc, #480]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
  quantized_bmp388_calib.par_t2 = (double)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8000fee:	4b76      	ldr	r3, [pc, #472]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000ff0:	885b      	ldrh	r3, [r3, #2]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ffa:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 8001178 <bmp388_quantize_calibration+0x1a8>
 8000ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001002:	4b72      	ldr	r3, [pc, #456]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001004:	ed83 7b02 	vstr	d7, [r3, #8]
  quantized_bmp388_calib.par_t3 = (double)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8001008:	4b6f      	ldr	r3, [pc, #444]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800100a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001016:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800101a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800101e:	4b6b      	ldr	r3, [pc, #428]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001020:	ed83 7b04 	vstr	d7, [r3, #16]

  quantized_bmp388_calib.par_p1 = ((double)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 8001024:	4b68      	ldr	r3, [pc, #416]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001026:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001032:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 8001036:	ee37 6b46 	vsub.f64	d6, d7, d6
 800103a:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8001190 <bmp388_quantize_calibration+0x1c0>
 800103e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001044:	ed83 7b06 	vstr	d7, [r3, #24]
  quantized_bmp388_calib.par_p2 = ((double)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8001048:	4b5f      	ldr	r3, [pc, #380]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800104a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001056:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 800105a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800105e:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8001198 <bmp388_quantize_calibration+0x1c8>
 8001062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001066:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001068:	ed83 7b08 	vstr	d7, [r3, #32]
  quantized_bmp388_calib.par_p3 = (double)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 800106c:	4b56      	ldr	r3, [pc, #344]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800106e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800107a:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80011a0 <bmp388_quantize_calibration+0x1d0>
 800107e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001082:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001084:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p4 = (double)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 8001088:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800108a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001096:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80011a8 <bmp388_quantize_calibration+0x1d8>
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010a0:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p5 = (double)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 80010a4:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010a6:	899b      	ldrh	r3, [r3, #12]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010b0:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80010b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b8:	4b44      	ldr	r3, [pc, #272]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010ba:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  quantized_bmp388_calib.par_p6 = (double)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 80010be:	4b42      	ldr	r3, [pc, #264]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010c0:	89db      	ldrh	r3, [r3, #14]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010ca:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 80011b0 <bmp388_quantize_calibration+0x1e0>
 80010ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010d4:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
  quantized_bmp388_calib.par_p7 = (double)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 80010d8:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010da:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010e6:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 80010ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010f0:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  quantized_bmp388_calib.par_p8 = (double)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010f6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001102:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80011b8 <bmp388_quantize_calibration+0x1e8>
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 800110c:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
  quantized_bmp388_calib.par_p9 = (double)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001112:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800111e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 8001122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001128:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
  quantized_bmp388_calib.par_p10 = (double)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800112e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113a:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800113e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001142:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001144:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
  quantized_bmp388_calib.par_p11 = (double)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800114a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001156:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80011c0 <bmp388_quantize_calibration+0x1f0>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001160:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	00000000 	.word	0x00000000
 8001174:	40700000 	.word	0x40700000
 8001178:	00000000 	.word	0x00000000
 800117c:	41d00000 	.word	0x41d00000
 8001180:	00000000 	.word	0x00000000
 8001184:	42f00000 	.word	0x42f00000
 8001188:	00000000 	.word	0x00000000
 800118c:	40d00000 	.word	0x40d00000
 8001190:	00000000 	.word	0x00000000
 8001194:	41300000 	.word	0x41300000
 8001198:	00000000 	.word	0x00000000
 800119c:	41c00000 	.word	0x41c00000
 80011a0:	00000000 	.word	0x00000000
 80011a4:	41f00000 	.word	0x41f00000
 80011a8:	00000000 	.word	0x00000000
 80011ac:	42400000 	.word	0x42400000
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40500000 	.word	0x40500000
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40e00000 	.word	0x40e00000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	44000000 	.word	0x44000000
 80011c8:	2400020c 	.word	0x2400020c
 80011cc:	24000228 	.word	0x24000228

080011d0 <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	@ 0x40
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <bmp388_write_reg+0x44>)
 80011e6:	f001 ff85 	bl	80030f4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	2201      	movs	r2, #1
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <bmp388_write_reg+0x48>)
 80011f2:	f004 ff09 	bl	8006008 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80011f6:	1db9      	adds	r1, r7, #6
 80011f8:	2364      	movs	r3, #100	@ 0x64
 80011fa:	2201      	movs	r2, #1
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <bmp388_write_reg+0x48>)
 80011fe:	f004 ff03 	bl	8006008 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	@ 0x40
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <bmp388_write_reg+0x44>)
 8001208:	f001 ff74 	bl	80030f4 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58020000 	.word	0x58020000
 8001218:	24000348 	.word	0x24000348

0800121c <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint8_t dummy;
  uint8_t temp_data = 0x80 | reg;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001232:	b2db      	uxtb	r3, r3
 8001234:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	4817      	ldr	r0, [pc, #92]	@ (8001298 <bmp388_read_reg+0x7c>)
 800123c:	f001 ff5a 	bl	80030f4 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8001240:	f107 010d 	add.w	r1, r7, #13
 8001244:	2364      	movs	r3, #100	@ 0x64
 8001246:	2201      	movs	r2, #1
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <bmp388_read_reg+0x80>)
 800124a:	f004 fedd 	bl	8006008 <HAL_SPI_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <bmp388_read_reg+0x40>
    Error_Handler();
 8001258:	f000 fd38 	bl	8001ccc <Error_Handler>
  HAL_SPI_Receive(&hspi2, &dummy, 1, 100);
 800125c:	f107 010e 	add.w	r1, r7, #14
 8001260:	2364      	movs	r3, #100	@ 0x64
 8001262:	2201      	movs	r2, #1
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <bmp388_read_reg+0x80>)
 8001266:	f005 f8bd 	bl	80063e4 <HAL_SPI_Receive>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	b29a      	uxth	r2, r3
 800126e:	2364      	movs	r3, #100	@ 0x64
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	480a      	ldr	r0, [pc, #40]	@ (800129c <bmp388_read_reg+0x80>)
 8001274:	f005 f8b6 	bl	80063e4 <HAL_SPI_Receive>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <bmp388_read_reg+0x6a>
    Error_Handler();
 8001282:	f000 fd23 	bl	8001ccc <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <bmp388_read_reg+0x7c>)
 800128c:	f001 ff32 	bl	80030f4 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58020000 	.word	0x58020000
 800129c:	24000348 	.word	0x24000348

080012a0 <bmp388_setup>:
void bmp388_setup()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  bmp388_write_reg(0x7E, 0xB6); // Soft reset
 80012a6:	21b6      	movs	r1, #182	@ 0xb6
 80012a8:	207e      	movs	r0, #126	@ 0x7e
 80012aa:	f7ff ff91 	bl	80011d0 <bmp388_write_reg>
  HAL_Delay(10); // Wait for reset to complete
 80012ae:	200a      	movs	r0, #10
 80012b0:	f001 fbb8 	bl	8002a24 <HAL_Delay>
  uint8_t calib_data[21];
  uint8_t chip[2];
  bmp388_read_reg(0x31, calib_data, 21);
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	2215      	movs	r2, #21
 80012ba:	4619      	mov	r1, r3
 80012bc:	2031      	movs	r0, #49	@ 0x31
 80012be:	f7ff ffad 	bl	800121c <bmp388_read_reg>
  bmp388_read_reg(0x00, chip, 2);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2202      	movs	r2, #2
 80012c6:	4619      	mov	r1, r3
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff ffa7 	bl	800121c <bmp388_read_reg>
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <bmp388_setup+0x120>)
 80012e0:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <bmp388_setup+0x120>)
 80012f4:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <bmp388_setup+0x120>)
 80012fc:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 80012fe:	7b7b      	ldrb	r3, [r7, #13]
 8001300:	b21a      	sxth	r2, r3
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <bmp388_setup+0x120>)
 800130e:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	b21a      	sxth	r2, r3
 8001314:	7c3b      	ldrb	r3, [r7, #16]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <bmp388_setup+0x120>)
 8001320:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8001322:	7c7b      	ldrb	r3, [r7, #17]
 8001324:	b25a      	sxtb	r2, r3
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <bmp388_setup+0x120>)
 8001328:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 800132a:	7cbb      	ldrb	r3, [r7, #18]
 800132c:	b25a      	sxtb	r2, r3
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <bmp388_setup+0x120>)
 8001330:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	b21a      	sxth	r2, r3
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <bmp388_setup+0x120>)
 8001344:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	b21a      	sxth	r2, r3
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <bmp388_setup+0x120>)
 8001358:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	b25a      	sxtb	r2, r3
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <bmp388_setup+0x120>)
 8001360:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 8001362:	7e3b      	ldrb	r3, [r7, #24]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <bmp388_setup+0x120>)
 8001368:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 800136a:	7e7b      	ldrb	r3, [r7, #25]
 800136c:	b21a      	sxth	r2, r3
 800136e:	7ebb      	ldrb	r3, [r7, #26]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <bmp388_setup+0x120>)
 800137a:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	b25a      	sxtb	r2, r3
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <bmp388_setup+0x120>)
 8001382:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 8001384:	7f3b      	ldrb	r3, [r7, #28]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <bmp388_setup+0x120>)
 800138a:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 800138c:	f7ff fe20 	bl	8000fd0 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1A, 0x00);
 8001390:	2100      	movs	r1, #0
 8001392:	201a      	movs	r0, #26
 8001394:	f7ff ff1c 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1B, 0x33);  // normal mode, temp pressure on by default with it
 8001398:	2133      	movs	r1, #51	@ 0x33
 800139a:	201b      	movs	r0, #27
 800139c:	f7ff ff18 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 80013a0:	2103      	movs	r1, #3
 80013a2:	201c      	movs	r0, #28
 80013a4:	f7ff ff14 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 80013a8:	2102      	movs	r1, #2
 80013aa:	201d      	movs	r0, #29
 80013ac:	f7ff ff10 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x04);  // coefficient for IIR filter, ideally low value for the dart
 80013b0:	2104      	movs	r1, #4
 80013b2:	201f      	movs	r0, #31
 80013b4:	f7ff ff0c 	bl	80011d0 <bmp388_write_reg>
}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2400020c 	.word	0x2400020c

080013c4 <bmp388_read_raw_data>:

void bmp388_read_raw_data()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  uint8_t data[6];
  bmp388_read_reg(0x04, data, 6); // 0x04-0x06 pressure, 0x07-0x09 temperature
 80013ca:	463b      	mov	r3, r7
 80013cc:	2206      	movs	r2, #6
 80013ce:	4619      	mov	r1, r3
 80013d0:	2004      	movs	r0, #4
 80013d2:	f7ff ff23 	bl	800121c <bmp388_read_reg>
  bmp388_rawData.pressure = (((int32_t)data[2] << 16) | ((int32_t)data[1] << 8) | ((int32_t)data[0]));
 80013d6:	78bb      	ldrb	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4313      	orrs	r3, r2
 80013e0:	783a      	ldrb	r2, [r7, #0]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <bmp388_read_raw_data+0x44>)
 80013e8:	605a      	str	r2, [r3, #4]
  bmp388_rawData.temperature = (((int32_t)data[5] << 16) | ((int32_t)data[4] << 8) | ((int32_t)data[3]));
 80013ea:	797b      	ldrb	r3, [r7, #5]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	793b      	ldrb	r3, [r7, #4]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	4313      	orrs	r3, r2
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <bmp388_read_raw_data+0x44>)
 80013fc:	601a      	str	r2, [r3, #0]

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	240002a0 	.word	0x240002a0

0800140c <bmp388_compensated_temperature>:

// the math performed in both functions are directly from the datasheet
static double bmp388_compensated_temperature(uint32_t raw_temp)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  double partial_data1 = (double)(raw_temp)-quantized_bmp388_calib.par_t1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001420:	ed93 7b00 	vldr	d7, [r3]
 8001424:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001428:	ed87 7b04 	vstr	d7, [r7, #16]
  double partial_data2 = partial_data1 * quantized_bmp388_calib.par_t2;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 800142e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001432:	ed97 6b04 	vldr	d6, [r7, #16]
 8001436:	ee26 7b07 	vmul.f64	d7, d6, d7
 800143a:	ed87 7b02 	vstr	d7, [r7, #8]
  quantized_bmp388_calib.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantized_bmp388_calib.par_t3;
 800143e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001442:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001448:	ed93 7b04 	vldr	d7, [r3, #16]
 800144c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001450:	ed97 7b02 	vldr	d7, [r7, #8]
 8001454:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 800145a:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
  return quantized_bmp388_calib.t_lin;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001460:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001464:	ec43 2b17 	vmov	d7, r2, r3
}
 8001468:	eeb0 0b47 	vmov.f64	d0, d7
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	24000228 	.word	0x24000228

0800147c <bmp388_compensated_pressure>:

static double bmp388_compensated_pressure(uint32_t raw_pressure)
{
 800147c:	b480      	push	{r7}
 800147e:	b091      	sub	sp, #68	@ 0x44
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  double pressure;
  double partial_data1, partial_data2, partial_data3, partial_data4;
  double partial_out1, partial_out2;

  partial_data1 = quantized_bmp388_calib.par_p6 * quantized_bmp388_calib.t_lin;
 8001484:	4b6e      	ldr	r3, [pc, #440]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001486:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800148c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001490:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001494:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p7 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001498:	4b69      	ldr	r3, [pc, #420]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800149a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800149e:	4b68      	ldr	r3, [pc, #416]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014a0:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014a8:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014aa:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014b2:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p8 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 80014b6:	4b62      	ldr	r3, [pc, #392]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014b8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80014bc:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014be:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014c8:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014d2:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014da:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out1 = quantized_bmp388_calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80014de:	4b58      	ldr	r3, [pc, #352]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014e0:	ed93 6b0e 	vldr	d6, [r3, #56]	@ 0x38
 80014e4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80014e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ec:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80014f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014f4:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80014f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014fc:	ed87 7b08 	vstr	d7, [r7, #32]

  partial_data1 = quantized_bmp388_calib.par_p2 * quantized_bmp388_calib.t_lin;
 8001500:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001502:	ed93 6b08 	vldr	d6, [r3, #32]
 8001506:	4b4e      	ldr	r3, [pc, #312]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001508:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800150c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001510:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p3 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001514:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001516:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800151a:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800151c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001520:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001524:	4b46      	ldr	r3, [pc, #280]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001526:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800152a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800152e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p4 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001532:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001534:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001538:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800153a:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800153e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001542:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001544:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001548:	ee26 6b07 	vmul.f64	d6, d6, d7
 800154c:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800154e:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001552:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001556:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out2 = (double)raw_pressure * (quantized_bmp388_calib.par_p1 + partial_data1 + partial_data2 + partial_data3);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001564:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001566:	ed93 5b06 	vldr	d5, [r3, #24]
 800156a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800156e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001572:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001576:	ee35 5b07 	vadd.f64	d5, d5, d7
 800157a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800157e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001582:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001586:	ed87 7b06 	vstr	d7, [r7, #24]

  partial_data1 = (double)raw_pressure * (double)raw_pressure;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800159e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015a2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p9 + quantized_bmp388_calib.par_p10 * quantized_bmp388_calib.t_lin;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015a8:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015ae:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80015b2:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015b4:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80015b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015c0:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = partial_data1 * partial_data2;
 80015c4:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80015c8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80015cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015d0:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_data4 = partial_data3 + ((double)raw_pressure * (double)raw_pressure * (double)raw_pressure) * quantized_bmp388_calib.par_p11;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015fc:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8001600:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001604:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001608:	ee36 7b07 	vadd.f64	d7, d6, d7
 800160c:	ed87 7b04 	vstr	d7, [r7, #16]

  pressure = partial_out1 + partial_out2 + partial_data4;
 8001610:	ed97 6b08 	vldr	d6, [r7, #32]
 8001614:	ed97 7b06 	vldr	d7, [r7, #24]
 8001618:	ee36 7b07 	vadd.f64	d7, d6, d7
 800161c:	ed97 6b04 	vldr	d6, [r7, #16]
 8001620:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001624:	ed87 7b02 	vstr	d7, [r7, #8]

  return pressure;
 8001628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800162c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001630:	eeb0 0b47 	vmov.f64	d0, d7
 8001634:	3744      	adds	r7, #68	@ 0x44
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	24000228 	.word	0x24000228
 8001644:	00000000 	.word	0x00000000

08001648 <bmp388_getAltitude>:
double bmp388_getAltitude(double pressure)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	ed87 0b00 	vstr	d0, [r7]
	double altitude = 44330 * (1-pow(pressure/1019.0e2, 0.190294)); // pressure divided by pressure of sea level at austin
 8001652:	ed97 7b00 	vldr	d7, [r7]
 8001656:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8001698 <bmp388_getAltitude+0x50>
 800165a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800165e:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 80016a0 <bmp388_getAltitude+0x58>
 8001662:	eeb0 0b46 	vmov.f64	d0, d6
 8001666:	f00b faef 	bl	800cc48 <pow>
 800166a:	eeb0 7b40 	vmov.f64	d7, d0
 800166e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001672:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001676:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80016a8 <bmp388_getAltitude+0x60>
 800167a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167e:	ed87 7b02 	vstr	d7, [r7, #8]
	return altitude;
 8001682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001686:	ec43 2b17 	vmov	d7, r2, r3
}
 800168a:	eeb0 0b47 	vmov.f64	d0, d7
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	00000000 	.word	0x00000000
 800169c:	40f8e0c0 	.word	0x40f8e0c0
 80016a0:	c55000c9 	.word	0xc55000c9
 80016a4:	3fc85b8d 	.word	0x3fc85b8d
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40e5a540 	.word	0x40e5a540

080016b0 <bmp388_getData>:

void bmp388_getData()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  bmp388_read_raw_data();
 80016b4:	f7ff fe86 	bl	80013c4 <bmp388_read_raw_data>
  bmp388_processedData.temperature = bmp388_compensated_temperature(bmp388_rawData.temperature);
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <bmp388_getData+0x4c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fea5 	bl	800140c <bmp388_compensated_temperature>
 80016c2:	eeb0 7b40 	vmov.f64	d7, d0
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <bmp388_getData+0x50>)
 80016c8:	ed83 7b00 	vstr	d7, [r3]
  bmp388_processedData.pressure = bmp388_compensated_pressure(bmp388_rawData.pressure);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <bmp388_getData+0x4c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fed3 	bl	800147c <bmp388_compensated_pressure>
 80016d6:	eeb0 7b40 	vmov.f64	d7, d0
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <bmp388_getData+0x50>)
 80016dc:	ed83 7b02 	vstr	d7, [r3, #8]
  altitude = bmp388_getAltitude(bmp388_processedData.pressure);
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <bmp388_getData+0x50>)
 80016e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80016e6:	eeb0 0b47 	vmov.f64	d0, d7
 80016ea:	f7ff ffad 	bl	8001648 <bmp388_getAltitude>
 80016ee:	eeb0 7b40 	vmov.f64	d7, d0
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <bmp388_getData+0x54>)
 80016f4:	ed83 7b00 	vstr	d7, [r3]
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	240002a0 	.word	0x240002a0
 8001700:	240002a8 	.word	0x240002a8
 8001704:	240002b8 	.word	0x240002b8

08001708 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001710:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001714:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001720:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001724:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001728:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001730:	e000      	b.n	8001734 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001732:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001734:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f9      	beq.n	8001732 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800173e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b090      	sub	sp, #64	@ 0x40
 800175c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800175e:	f000 fa89 	bl	8001c74 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f001 f8cd 	bl	8002900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f849 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 fa0d 	bl	8001b88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800176e:	f000 f9bf 	bl	8001af0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001772:	f000 f8bf 	bl	80018f4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001776:	f000 f96d 	bl	8001a54 <MX_TIM2_Init>
  MX_SPI2_Init();
 800177a:	f000 f913 	bl	80019a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 800177e:	481b      	ldr	r0, [pc, #108]	@ (80017ec <main+0x94>)
 8001780:	f005 f9e2 	bl	8006b48 <HAL_TIM_Base_Start_IT>
  char buffer[40] = {'\0'};
 8001784:	2300      	movs	r3, #0
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2224      	movs	r2, #36	@ 0x24
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f007 fedb 	bl	800954a <memset>
  mpu9250_setup();
 8001794:	f000 fb02 	bl	8001d9c <mpu9250_setup>
  bmp388_setup();
 8001798:	f7ff fd82 	bl	80012a0 <bmp388_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <main+0x98>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <main+0x5c>
	  {
		  timer_flag = 0;	//reset timer flag
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <main+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]

		  mpu9250_getProcessedAngle();
 80017ac:	f000 fbd4 	bl	8001f58 <mpu9250_getProcessedAngle>
		  bmp388_getData();
 80017b0:	f7ff ff7e 	bl	80016b0 <bmp388_getData>
	  }

	  //send data through UART
	  snprintf(buffer, sizeof(buffer), "%.4f,%.4f,%.4f\n", imu_angles.pitch, imu_angles.roll, imu_angles.yaw);
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <main+0x9c>)
 80017b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <main+0x9c>)
 80017c0:	edd3 6a00 	vldr	s13, [r3]
 80017c4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <main+0x9c>)
 80017ca:	edd3 5a02 	vldr	s11, [r3, #8]
 80017ce:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80017d2:	463b      	mov	r3, r7
 80017d4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80017d8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80017dc:	ed8d 7b00 	vstr	d7, [sp]
 80017e0:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <main+0xa0>)
 80017e2:	2128      	movs	r1, #40	@ 0x28
 80017e4:	4618      	mov	r0, r3
 80017e6:	f007 fe19 	bl	800941c <sniprintf>
	  if(timer_flag)
 80017ea:	e7d7      	b.n	800179c <main+0x44>
 80017ec:	240003d0 	.word	0x240003d0
 80017f0:	240004b0 	.word	0x240004b0
 80017f4:	240004f8 	.word	0x240004f8
 80017f8:	0800d6a0 	.word	0x0800d6a0

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b09c      	sub	sp, #112	@ 0x70
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001806:	224c      	movs	r2, #76	@ 0x4c
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f007 fe9d 	bl	800954a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2220      	movs	r2, #32
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f007 fe97 	bl	800954a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800181c:	2002      	movs	r0, #2
 800181e:	f001 fc83 	bl	8003128 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <SystemClock_Config+0xf0>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a30      	ldr	r2, [pc, #192]	@ (80018ec <SystemClock_Config+0xf0>)
 800182c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <SystemClock_Config+0xf0>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <SystemClock_Config+0xf4>)
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	4a2b      	ldr	r2, [pc, #172]	@ (80018f0 <SystemClock_Config+0xf4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001848:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <SystemClock_Config+0xf4>)
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001854:	bf00      	nop
 8001856:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <SystemClock_Config+0xf0>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800185e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001862:	d1f8      	bne.n	8001856 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001864:	2302      	movs	r3, #2
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001868:	2301      	movs	r3, #1
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186c:	2340      	movs	r3, #64	@ 0x40
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2302      	movs	r3, #2
 8001872:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001874:	2300      	movs	r3, #0
 8001876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001878:	2304      	movs	r3, #4
 800187a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800187c:	233c      	movs	r3, #60	@ 0x3c
 800187e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001880:	2302      	movs	r3, #2
 8001882:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001884:	2305      	movs	r3, #5
 8001886:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001888:	2302      	movs	r3, #2
 800188a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800188c:	230c      	movs	r3, #12
 800188e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001890:	2300      	movs	r3, #0
 8001892:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189c:	4618      	mov	r0, r3
 800189e:	f001 fc7d 	bl	800319c <HAL_RCC_OscConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80018a8:	f000 fa10 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ac:	233f      	movs	r3, #63	@ 0x3f
 80018ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b0:	2303      	movs	r3, #3
 80018b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80018b8:	2308      	movs	r3, #8
 80018ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018bc:	2340      	movs	r3, #64	@ 0x40
 80018be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018c0:	2340      	movs	r3, #64	@ 0x40
 80018c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018ca:	2340      	movs	r3, #64	@ 0x40
 80018cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2104      	movs	r1, #4
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 f8bc 	bl	8003a50 <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80018de:	f000 f9f5 	bl	8001ccc <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3770      	adds	r7, #112	@ 0x70
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	58024800 	.word	0x58024800
 80018f0:	58000400 	.word	0x58000400

080018f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018f8:	4b28      	ldr	r3, [pc, #160]	@ (800199c <MX_SPI1_Init+0xa8>)
 80018fa:	4a29      	ldr	r2, [pc, #164]	@ (80019a0 <MX_SPI1_Init+0xac>)
 80018fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b27      	ldr	r3, [pc, #156]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001900:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001906:	4b25      	ldr	r3, [pc, #148]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800190c:	4b23      	ldr	r3, [pc, #140]	@ (800199c <MX_SPI1_Init+0xa8>)
 800190e:	2207      	movs	r2, #7
 8001910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001912:	4b22      	ldr	r3, [pc, #136]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001914:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800191a:	4b20      	ldr	r3, [pc, #128]	@ (800199c <MX_SPI1_Init+0xa8>)
 800191c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001920:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001922:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001924:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001928:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800192a:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <MX_SPI1_Init+0xa8>)
 800192c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001930:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001932:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <MX_SPI1_Init+0xa8>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193e:	4b17      	ldr	r3, [pc, #92]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001944:	4b15      	ldr	r3, [pc, #84]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001946:	2200      	movs	r2, #0
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <MX_SPI1_Init+0xa8>)
 800194c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001950:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001954:	2200      	movs	r2, #0
 8001956:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001958:	4b10      	ldr	r3, [pc, #64]	@ (800199c <MX_SPI1_Init+0xa8>)
 800195a:	2200      	movs	r2, #0
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001960:	2200      	movs	r2, #0
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001964:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_SPI1_Init+0xa8>)
 800196c:	2200      	movs	r2, #0
 800196e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001972:	2200      	movs	r2, #0
 8001974:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001978:	2200      	movs	r2, #0
 800197a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800197c:	4b07      	ldr	r3, [pc, #28]	@ (800199c <MX_SPI1_Init+0xa8>)
 800197e:	2200      	movs	r2, #0
 8001980:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_SPI1_Init+0xa8>)
 8001984:	2200      	movs	r2, #0
 8001986:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <MX_SPI1_Init+0xa8>)
 800198a:	f004 fa19 	bl	8005dc0 <HAL_SPI_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001994:	f000 f99a 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	240002c0 	.word	0x240002c0
 80019a0:	40013000 	.word	0x40013000

080019a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019aa:	4a29      	ldr	r2, [pc, #164]	@ (8001a50 <MX_SPI2_Init+0xac>)
 80019ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ae:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80019b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019b6:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019be:	2207      	movs	r2, #7
 80019c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019c2:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019dc:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80019e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ee:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80019f4:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019fa:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 80019fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a08:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a14:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <MX_SPI2_Init+0xa8>)
 8001a3a:	f004 f9c1 	bl	8005dc0 <HAL_SPI_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001a44:	f000 f942 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	24000348 	.word	0x24000348
 8001a50:	40003800 	.word	0x40003800

08001a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001a74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001a7c:	f240 321f 	movw	r2, #799	@ 0x31f
 8001a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001a88:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001a8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a9c:	4813      	ldr	r0, [pc, #76]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001a9e:	f004 fffc 	bl	8006a9a <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001aa8:	f000 f910 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001aba:	f005 f9c5 	bl	8006e48 <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ac4:	f000 f902 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	@ (8001aec <MX_TIM2_Init+0x98>)
 8001ad6:	f005 fc15 	bl	8007304 <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ae0:	f000 f8f4 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	240003d0 	.word	0x240003d0

08001af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af4:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001af6:	4a23      	ldr	r2, [pc, #140]	@ (8001b84 <MX_USART2_UART_Init+0x94>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b38:	4811      	ldr	r0, [pc, #68]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b3a:	f005 fc8f 	bl	800745c <HAL_UART_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b44:	f000 f8c2 	bl	8001ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b4c:	f006 fc97 	bl	800847e <HAL_UARTEx_SetTxFifoThreshold>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b56:	f000 f8b9 	bl	8001ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4808      	ldr	r0, [pc, #32]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b5e:	f006 fccc 	bl	80084fa <HAL_UARTEx_SetRxFifoThreshold>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b68:	f000 f8b0 	bl	8001ccc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b6e:	f006 fc4d 	bl	800840c <HAL_UARTEx_DisableFifoMode>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b78:	f000 f8a8 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2400041c 	.word	0x2400041c
 8001b84:	40004400 	.word	0x40004400

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_GPIO_Init+0x80>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba4:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <MX_GPIO_Init+0x80>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bae:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <MX_GPIO_Init+0x80>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <MX_GPIO_Init+0x80>)
 8001bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc2:	4a11      	ldr	r2, [pc, #68]	@ (8001c08 <MX_GPIO_Init+0x80>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <MX_GPIO_Init+0x80>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2160      	movs	r1, #96	@ 0x60
 8001bde:	480b      	ldr	r0, [pc, #44]	@ (8001c0c <MX_GPIO_Init+0x84>)
 8001be0:	f001 fa88 	bl	80030f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 8001be4:	2360      	movs	r3, #96	@ 0x60
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <MX_GPIO_Init+0x84>)
 8001bfc:	f001 f8ca 	bl	8002d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	58020000 	.word	0x58020000

08001c10 <HAL_TIM_PeriodElapsedCallback>:
    double dt = current_time - previous_time;
    previous_time = current_time;  // Update for the next call
    return dt;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a06      	ldr	r2, [pc, #24]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d102      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
	}
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	240003d0 	.word	0x240003d0
 8001c38:	240004b0 	.word	0x240004b0

08001c3c <_write>:
int _write(int file, char *ptr, int len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e009      	b.n	8001c62 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fd56 	bl	8001708 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf1      	blt.n	8001c4e <_write+0x12>
	}
	return len;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c86:	f001 f80d 	bl	8002ca4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c96:	231f      	movs	r3, #31
 8001c98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001c9a:	2387      	movs	r3, #135	@ 0x87
 8001c9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 f82b 	bl	8002d14 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cbe:	2004      	movs	r0, #4
 8001cc0:	f001 f808 	bl	8002cd4 <HAL_MPU_Enable>

}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <Error_Handler+0x8>

08001cd8 <mpu9250_write_reg>:
Mag_CalibData_t mag_calibration_data;

float quat[4];

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2120      	movs	r1, #32
 8001cec:	480b      	ldr	r0, [pc, #44]	@ (8001d1c <mpu9250_write_reg+0x44>)
 8001cee:	f001 fa01 	bl	80030f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001cf2:	1df9      	adds	r1, r7, #7
 8001cf4:	2364      	movs	r3, #100	@ 0x64
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4809      	ldr	r0, [pc, #36]	@ (8001d20 <mpu9250_write_reg+0x48>)
 8001cfa:	f004 f985 	bl	8006008 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001cfe:	1db9      	adds	r1, r7, #6
 8001d00:	2364      	movs	r3, #100	@ 0x64
 8001d02:	2201      	movs	r2, #1
 8001d04:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <mpu9250_write_reg+0x48>)
 8001d06:	f004 f97f 	bl	8006008 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <mpu9250_write_reg+0x44>)
 8001d10:	f001 f9f0 	bl	80030f4 <HAL_GPIO_WritePin>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	58020000 	.word	0x58020000
 8001d20:	240002c0 	.word	0x240002c0

08001d24 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2120      	movs	r1, #32
 8001d42:	4814      	ldr	r0, [pc, #80]	@ (8001d94 <mpu9250_read_reg+0x70>)
 8001d44:	f001 f9d6 	bl	80030f4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001d48:	f107 010e 	add.w	r1, r7, #14
 8001d4c:	2364      	movs	r3, #100	@ 0x64
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4811      	ldr	r0, [pc, #68]	@ (8001d98 <mpu9250_read_reg+0x74>)
 8001d52:	f004 f959 	bl	8006008 <HAL_SPI_Transmit>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <mpu9250_read_reg+0x40>
		Error_Handler();
 8001d60:	f7ff ffb4 	bl	8001ccc <Error_Handler>
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	2364      	movs	r3, #100	@ 0x64
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	480a      	ldr	r0, [pc, #40]	@ (8001d98 <mpu9250_read_reg+0x74>)
 8001d6e:	f004 fb39 	bl	80063e4 <HAL_SPI_Receive>
 8001d72:	4603      	mov	r3, r0
 8001d74:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <mpu9250_read_reg+0x5c>
		Error_Handler();
 8001d7c:	f7ff ffa6 	bl	8001ccc <Error_Handler>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2120      	movs	r1, #32
 8001d84:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <mpu9250_read_reg+0x70>)
 8001d86:	f001 f9b5 	bl	80030f4 <HAL_GPIO_WritePin>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	58020000 	.word	0x58020000
 8001d98:	240002c0 	.word	0x240002c0

08001d9c <mpu9250_setup>:

void mpu9250_setup()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001da0:	2105      	movs	r1, #5
 8001da2:	201a      	movs	r0, #26
 8001da4:	f7ff ff98 	bl	8001cd8 <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 8001da8:	2110      	movs	r1, #16
 8001daa:	201c      	movs	r0, #28
 8001dac:	f7ff ff94 	bl	8001cd8 <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001db0:	2108      	movs	r1, #8
 8001db2:	201b      	movs	r0, #27
 8001db4:	f7ff ff90 	bl	8001cd8 <mpu9250_write_reg>
	mpu9250_calibrateGyro(1500);
 8001db8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001dbc:	f000 f814 	bl	8001de8 <mpu9250_calibrateGyro>
	quat[0] = 1.0f;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <mpu9250_setup+0x48>)
 8001dc2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001dc6:	601a      	str	r2, [r3, #0]
	quat[1] = 0.0f;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <mpu9250_setup+0x48>)
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
	quat[2] = 0.0f;
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <mpu9250_setup+0x48>)
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
	quat[3] = 0.0f;
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <mpu9250_setup+0x48>)
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
//	// magnetometer setup
//	mpu9250_write_reg(0x6A, 0x20);
//	mpu9250_write_reg(0x24, 0x0D);
//	mpu9250_write_reg(0x25, 0x8C);
//	mpu9250_write_reg(0x26, 0x03);
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	24000504 	.word	0x24000504

08001de8 <mpu9250_calibrateGyro>:
    mpu9250_write_reg(0x26, 0x03);                   // Start at HXL register
    mpu9250_write_reg(0x27, 0x87);                   // Enable reading 7 bytes (0x80 | 7)
}

void mpu9250_calibrateGyro(uint16_t numCalPoints)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <mpu9250_calibrateGyro+0x20>
    {
        numCalPoints = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	817b      	strh	r3, [r7, #10]
 8001e0c:	e01c      	b.n	8001e48 <mpu9250_calibrateGyro+0x60>
    {
        mpu9250_getRawData();
 8001e0e:	f000 f855 	bl	8001ebc <mpu9250_getRawData>
        x += imu_raw_data.gyro_x;
 8001e12:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <mpu9250_calibrateGyro+0xcc>)
 8001e14:	88db      	ldrh	r3, [r3, #6]
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
        y += imu_raw_data.gyro_y;
 8001e20:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <mpu9250_calibrateGyro+0xcc>)
 8001e22:	891b      	ldrh	r3, [r3, #8]
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        z += imu_raw_data.gyro_z;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <mpu9250_calibrateGyro+0xcc>)
 8001e30:	895b      	ldrh	r3, [r3, #10]
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f000 fdf1 	bl	8002a24 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	3301      	adds	r3, #1
 8001e46:	817b      	strh	r3, [r7, #10]
 8001e48:	897a      	ldrh	r2, [r7, #10]
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3de      	bcc.n	8001e0e <mpu9250_calibrateGyro+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    imu_processed_data.gyro_offX = (float)x / (float)numCalPoints;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <mpu9250_calibrateGyro+0xd0>)
 8001e6a:	edc3 7a00 	vstr	s15, [r3]
    imu_processed_data.gyro_offY = (float)y / (float)numCalPoints;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <mpu9250_calibrateGyro+0xd0>)
 8001e88:	edc3 7a01 	vstr	s15, [r3, #4]
    imu_processed_data.gyro_offZ = (float)z / (float)numCalPoints;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <mpu9250_calibrateGyro+0xd0>)
 8001ea6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	240004b4 	.word	0x240004b4
 8001eb8:	240004c8 	.word	0x240004c8

08001ebc <mpu9250_getRawData>:



void mpu9250_getRawData()
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	2206      	movs	r2, #6
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	203b      	movs	r0, #59	@ 0x3b
 8001eca:	f7ff ff2b 	bl	8001d24 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8001ece:	783b      	ldrb	r3, [r7, #0]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <mpu9250_getRawData+0x94>)
 8001ede:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001ee0:	78bb      	ldrb	r3, [r7, #2]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	4313      	orrs	r3, r2
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <mpu9250_getRawData+0x94>)
 8001ef0:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8001ef2:	793b      	ldrb	r3, [r7, #4]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	797b      	ldrb	r3, [r7, #5]
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <mpu9250_getRawData+0x94>)
 8001f02:	809a      	strh	r2, [r3, #4]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 8001f04:	463b      	mov	r3, r7
 8001f06:	2206      	movs	r2, #6
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2043      	movs	r0, #67	@ 0x43
 8001f0c:	f7ff ff0a 	bl	8001d24 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8001f10:	783b      	ldrb	r3, [r7, #0]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b21a      	sxth	r2, r3
 8001f16:	787b      	ldrb	r3, [r7, #1]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <mpu9250_getRawData+0x94>)
 8001f20:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001f22:	78bb      	ldrb	r3, [r7, #2]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <mpu9250_getRawData+0x94>)
 8001f32:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8001f34:	793b      	ldrb	r3, [r7, #4]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	797b      	ldrb	r3, [r7, #5]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <mpu9250_getRawData+0x94>)
 8001f44:	815a      	strh	r2, [r3, #10]
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240004b4 	.word	0x240004b4
 8001f54:	00000000 	.word	0x00000000

08001f58 <mpu9250_getProcessedAngle>:

void mpu9250_getProcessedAngle()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
	  mpu9250_getRawData();
 8001f5e:	f7ff ffad 	bl	8001ebc <mpu9250_getRawData>

	  imu_processed_data.accel_x = ((float)imu_raw_data.accel_x/4096.0) * 9.81;
 8001f62:	4bc3      	ldr	r3, [pc, #780]	@ (8002270 <mpu9250_getProcessedAngle+0x318>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f70:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f74:	ed9f 5bb2 	vldr	d5, [pc, #712]	@ 8002240 <mpu9250_getProcessedAngle+0x2e8>
 8001f78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f7c:	ed9f 6bb2 	vldr	d6, [pc, #712]	@ 8002248 <mpu9250_getProcessedAngle+0x2f0>
 8001f80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f88:	4bba      	ldr	r3, [pc, #744]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 8001f8a:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.accel_y = ((float)imu_raw_data.accel_y/4096.0) * 9.81;
 8001f8e:	4bb8      	ldr	r3, [pc, #736]	@ (8002270 <mpu9250_getProcessedAngle+0x318>)
 8001f90:	885b      	ldrh	r3, [r3, #2]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fa0:	ed9f 5ba7 	vldr	d5, [pc, #668]	@ 8002240 <mpu9250_getProcessedAngle+0x2e8>
 8001fa4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fa8:	ed9f 6ba7 	vldr	d6, [pc, #668]	@ 8002248 <mpu9250_getProcessedAngle+0x2f0>
 8001fac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fb4:	4baf      	ldr	r3, [pc, #700]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 8001fb6:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.accel_z = ((float)imu_raw_data.accel_z/4096.0) * 9.81;
 8001fba:	4bad      	ldr	r3, [pc, #692]	@ (8002270 <mpu9250_getProcessedAngle+0x318>)
 8001fbc:	889b      	ldrh	r3, [r3, #4]
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fcc:	ed9f 5b9c 	vldr	d5, [pc, #624]	@ 8002240 <mpu9250_getProcessedAngle+0x2e8>
 8001fd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fd4:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8002248 <mpu9250_getProcessedAngle+0x2f0>
 8001fd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fe0:	4ba4      	ldr	r3, [pc, #656]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 8001fe2:	edc3 7a05 	vstr	s15, [r3, #20]
//	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0

	  imu_processed_data.gyro_x = ((float)imu_raw_data.gyro_x - imu_processed_data.gyro_offX)/65.5 * M_PI/180.0f;
 8001fe6:	4ba2      	ldr	r3, [pc, #648]	@ (8002270 <mpu9250_getProcessedAngle+0x318>)
 8001fe8:	88db      	ldrh	r3, [r3, #6]
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff4:	4b9f      	ldr	r3, [pc, #636]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002002:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 8002250 <mpu9250_getProcessedAngle+0x2f8>
 8002006:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800200a:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8002258 <mpu9250_getProcessedAngle+0x300>
 800200e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002012:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 8002260 <mpu9250_getProcessedAngle+0x308>
 8002016:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800201a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800201e:	4b95      	ldr	r3, [pc, #596]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 8002020:	edc3 7a06 	vstr	s15, [r3, #24]
	  imu_processed_data.gyro_y = ((float)imu_raw_data.gyro_y - imu_processed_data.gyro_offY)/65.5 * M_PI/180.0f;;
 8002024:	4b92      	ldr	r3, [pc, #584]	@ (8002270 <mpu9250_getProcessedAngle+0x318>)
 8002026:	891b      	ldrh	r3, [r3, #8]
 8002028:	b21b      	sxth	r3, r3
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002032:	4b90      	ldr	r3, [pc, #576]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 8002034:	edd3 7a01 	vldr	s15, [r3, #4]
 8002038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002040:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 8002250 <mpu9250_getProcessedAngle+0x2f8>
 8002044:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002048:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8002258 <mpu9250_getProcessedAngle+0x300>
 800204c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002050:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 8002260 <mpu9250_getProcessedAngle+0x308>
 8002054:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002058:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800205c:	4b85      	ldr	r3, [pc, #532]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 800205e:	edc3 7a07 	vstr	s15, [r3, #28]
	  imu_processed_data.gyro_z = ((float)imu_raw_data.gyro_z - imu_processed_data.gyro_offZ)/65.5 * M_PI/180.0f;;
 8002062:	4b83      	ldr	r3, [pc, #524]	@ (8002270 <mpu9250_getProcessedAngle+0x318>)
 8002064:	895b      	ldrh	r3, [r3, #10]
 8002066:	b21b      	sxth	r3, r3
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002070:	4b80      	ldr	r3, [pc, #512]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 8002072:	edd3 7a02 	vldr	s15, [r3, #8]
 8002076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800207a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800207e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8002250 <mpu9250_getProcessedAngle+0x2f8>
 8002082:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002086:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8002258 <mpu9250_getProcessedAngle+0x300>
 800208a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800208e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8002260 <mpu9250_getProcessedAngle+0x308>
 8002092:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002096:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800209a:	4b76      	ldr	r3, [pc, #472]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 800209c:	edc3 7a08 	vstr	s15, [r3, #32]
//	  mpu9250_read_reg(0x49, imu_data, sizeof(imu_data));
//	  imu_raw_data.mag_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
//	  imu_raw_data.mag_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
//	  imu_raw_data.mag_z = ((int16_t)imu_data[4]<<8) | imu_data[5];

	  MahonyAHRSupdateIMU(quat, imu_processed_data.gyro_x, imu_processed_data.gyro_y, imu_processed_data.gyro_z, imu_processed_data.accel_x, imu_processed_data.accel_y ,imu_processed_data.accel_z);
 80020a0:	4b74      	ldr	r3, [pc, #464]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 80020a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80020a6:	4b73      	ldr	r3, [pc, #460]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 80020a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80020ac:	4b71      	ldr	r3, [pc, #452]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 80020ae:	edd3 6a08 	vldr	s13, [r3, #32]
 80020b2:	4b70      	ldr	r3, [pc, #448]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 80020b4:	ed93 6a03 	vldr	s12, [r3, #12]
 80020b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 80020ba:	edd3 5a04 	vldr	s11, [r3, #16]
 80020be:	4b6d      	ldr	r3, [pc, #436]	@ (8002274 <mpu9250_getProcessedAngle+0x31c>)
 80020c0:	ed93 5a05 	vldr	s10, [r3, #20]
 80020c4:	eef0 2a45 	vmov.f32	s5, s10
 80020c8:	eeb0 2a65 	vmov.f32	s4, s11
 80020cc:	eef0 1a46 	vmov.f32	s3, s12
 80020d0:	eeb0 1a66 	vmov.f32	s2, s13
 80020d4:	eef0 0a47 	vmov.f32	s1, s14
 80020d8:	eeb0 0a67 	vmov.f32	s0, s15
 80020dc:	4866      	ldr	r0, [pc, #408]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80020de:	f7fe fcc3 	bl	8000a68 <MahonyAHRSupdateIMU>

	    /* Quternion to Euler */
	  float radPitch = asinf(-2.0f * (quat[1] * quat[3] - quat[0] * quat[2]));
 80020e2:	4b65      	ldr	r3, [pc, #404]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80020e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80020e8:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80020ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80020ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f2:	4b61      	ldr	r3, [pc, #388]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80020f4:	edd3 6a00 	vldr	s13, [r3]
 80020f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80020fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80020fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002106:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800210a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	f00a fd2f 	bl	800cb74 <asinf>
 8002116:	ed87 0a03 	vstr	s0, [r7, #12]
	  float radRoll = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]), 2.0f * (quat[0] * quat[0] + quat[3] * quat[3]) - 1.0f);
 800211a:	4b57      	ldr	r3, [pc, #348]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 800211c:	ed93 7a00 	vldr	s14, [r3]
 8002120:	4b55      	ldr	r3, [pc, #340]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 8002122:	edd3 7a01 	vldr	s15, [r3, #4]
 8002126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212a:	4b53      	ldr	r3, [pc, #332]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 800212c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002130:	4b51      	ldr	r3, [pc, #324]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 8002132:	edd3 7a03 	vldr	s15, [r3, #12]
 8002136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800213a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002142:	4b4d      	ldr	r3, [pc, #308]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 8002144:	ed93 7a00 	vldr	s14, [r3]
 8002148:	4b4b      	ldr	r3, [pc, #300]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002152:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 8002154:	edd3 6a03 	vldr	s13, [r3, #12]
 8002158:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 800215a:	edd3 7a03 	vldr	s15, [r3, #12]
 800215e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002166:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800216a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800216e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002172:	eef0 0a67 	vmov.f32	s1, s15
 8002176:	eeb0 0a46 	vmov.f32	s0, s12
 800217a:	f00a fd27 	bl	800cbcc <atan2f>
 800217e:	ed87 0a02 	vstr	s0, [r7, #8]
	  float radYaw =  atan2f(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]), 2.0f * (quat[0] * quat[0] + quat[1] * quat[1]) - 1.0f);
 8002182:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 8002184:	ed93 7a00 	vldr	s14, [r3]
 8002188:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 800218a:	edd3 7a03 	vldr	s15, [r3, #12]
 800218e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002192:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 8002194:	edd3 6a01 	vldr	s13, [r3, #4]
 8002198:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 800219a:	edd3 7a02 	vldr	s15, [r3, #8]
 800219e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80021aa:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80021ac:	ed93 7a00 	vldr	s14, [r3]
 80021b0:	4b31      	ldr	r3, [pc, #196]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80021bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80021c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002278 <mpu9250_getProcessedAngle+0x320>)
 80021c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80021c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021da:	eef0 0a67 	vmov.f32	s1, s15
 80021de:	eeb0 0a46 	vmov.f32	s0, s12
 80021e2:	f00a fcf3 	bl	800cbcc <atan2f>
 80021e6:	ed87 0a01 	vstr	s0, [r7, #4]
	    /* Radian to Degree*/
	  imu_angles.pitch = radPitch * RAD_TO_DEG;
 80021ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002268 <mpu9250_getProcessedAngle+0x310>
 80021f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021fe:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <mpu9250_getProcessedAngle+0x324>)
 8002200:	edc3 7a01 	vstr	s15, [r3, #4]
	  imu_angles.roll = radRoll * RAD_TO_DEG;
 8002204:	edd7 7a02 	vldr	s15, [r7, #8]
 8002208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800220c:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002268 <mpu9250_getProcessedAngle+0x310>
 8002210:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002214:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002218:	4b18      	ldr	r3, [pc, #96]	@ (800227c <mpu9250_getProcessedAngle+0x324>)
 800221a:	edc3 7a00 	vstr	s15, [r3]
	  imu_angles.yaw = radYaw * RAD_TO_DEG;
 800221e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002222:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002226:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8002268 <mpu9250_getProcessedAngle+0x310>
 800222a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800222e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <mpu9250_getProcessedAngle+0x324>)
 8002234:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	00000000 	.word	0x00000000
 8002244:	40b00000 	.word	0x40b00000
 8002248:	51eb851f 	.word	0x51eb851f
 800224c:	40239eb8 	.word	0x40239eb8
 8002250:	00000000 	.word	0x00000000
 8002254:	40506000 	.word	0x40506000
 8002258:	54442d18 	.word	0x54442d18
 800225c:	400921fb 	.word	0x400921fb
 8002260:	00000000 	.word	0x00000000
 8002264:	40668000 	.word	0x40668000
 8002268:	1a63c1f8 	.word	0x1a63c1f8
 800226c:	404ca5dc 	.word	0x404ca5dc
 8002270:	240004b4 	.word	0x240004b4
 8002274:	240004c8 	.word	0x240004c8
 8002278:	24000504 	.word	0x24000504
 800227c:	240004f8 	.word	0x240004f8

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_MspInit+0x30>)
 8002288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800228c:	4a08      	ldr	r2, [pc, #32]	@ (80022b0 <HAL_MspInit+0x30>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002296:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_MspInit+0x30>)
 8002298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	58024400 	.word	0x58024400

080022b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0be      	sub	sp, #248	@ 0xf8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 0320 	add.w	r3, r7, #32
 80022d0:	22c0      	movs	r2, #192	@ 0xc0
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f007 f938 	bl	800954a <memset>
  if(hspi->Instance==SPI1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a71      	ldr	r2, [pc, #452]	@ (80024a4 <HAL_SPI_MspInit+0x1f0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d16a      	bne.n	80023ba <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f6:	f107 0320 	add.w	r3, r7, #32
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 ff34 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002306:	f7ff fce1 	bl	8001ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800230a:	4b67      	ldr	r3, [pc, #412]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 800230c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002310:	4a65      	ldr	r2, [pc, #404]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 8002312:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002316:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800231a:	4b63      	ldr	r3, [pc, #396]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 800231c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b5f      	ldr	r3, [pc, #380]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 800232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800232e:	4a5e      	ldr	r2, [pc, #376]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002338:	4b5b      	ldr	r3, [pc, #364]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 800233a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	4b58      	ldr	r3, [pc, #352]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234c:	4a56      	ldr	r2, [pc, #344]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002356:	4b54      	ldr	r3, [pc, #336]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800237c:	2305      	movs	r3, #5
 800237e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002386:	4619      	mov	r1, r3
 8002388:	4848      	ldr	r0, [pc, #288]	@ (80024ac <HAL_SPI_MspInit+0x1f8>)
 800238a:	f000 fd03 	bl	8002d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800238e:	2318      	movs	r3, #24
 8002390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a6:	2305      	movs	r3, #5
 80023a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80023b0:	4619      	mov	r1, r3
 80023b2:	483f      	ldr	r0, [pc, #252]	@ (80024b0 <HAL_SPI_MspInit+0x1fc>)
 80023b4:	f000 fcee 	bl	8002d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023b8:	e070      	b.n	800249c <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3d      	ldr	r2, [pc, #244]	@ (80024b4 <HAL_SPI_MspInit+0x200>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d16b      	bne.n	800249c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80023c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d6:	f107 0320 	add.w	r3, r7, #32
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 fec4 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_SPI_MspInit+0x136>
      Error_Handler();
 80023e6:	f7ff fc71 	bl	8001ccc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023ea:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 80023ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f0:	4a2d      	ldr	r2, [pc, #180]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 80023f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023fa:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 80023fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002408:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 800240a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240e:	4a26      	ldr	r2, [pc, #152]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002418:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 8002428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800242c:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <HAL_SPI_MspInit+0x1f4>)
 8002438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002444:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002448:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800245e:	2305      	movs	r3, #5
 8002460:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002468:	4619      	mov	r1, r3
 800246a:	4811      	ldr	r0, [pc, #68]	@ (80024b0 <HAL_SPI_MspInit+0x1fc>)
 800246c:	f000 fc92 	bl	8002d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002474:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800248a:	2305      	movs	r3, #5
 800248c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002494:	4619      	mov	r1, r3
 8002496:	4805      	ldr	r0, [pc, #20]	@ (80024ac <HAL_SPI_MspInit+0x1f8>)
 8002498:	f000 fc7c 	bl	8002d94 <HAL_GPIO_Init>
}
 800249c:	bf00      	nop
 800249e:	37f8      	adds	r7, #248	@ 0xf8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40013000 	.word	0x40013000
 80024a8:	58024400 	.word	0x58024400
 80024ac:	58020000 	.word	0x58020000
 80024b0:	58020400 	.word	0x58020400
 80024b4:	40003800 	.word	0x40003800

080024b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d116      	bne.n	80024f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <HAL_TIM_Base_MspInit+0x48>)
 80024cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <HAL_TIM_Base_MspInit+0x48>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_TIM_Base_MspInit+0x48>)
 80024dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	201c      	movs	r0, #28
 80024ee:	f000 fba4 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024f2:	201c      	movs	r0, #28
 80024f4:	f000 fbbb 	bl	8002c6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	58024400 	.word	0x58024400

08002504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b0ba      	sub	sp, #232	@ 0xe8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	22c0      	movs	r2, #192	@ 0xc0
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f007 f810 	bl	800954a <memset>
  if(huart->Instance==USART2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a26      	ldr	r2, [pc, #152]	@ (80025c8 <HAL_UART_MspInit+0xc4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d145      	bne.n	80025c0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002534:	f04f 0202 	mov.w	r2, #2
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	4618      	mov	r0, r3
 800254c:	f001 fe0c 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002556:	f7ff fbb9 	bl	8001ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800255a:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <HAL_UART_MspInit+0xc8>)
 800255c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002560:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <HAL_UART_MspInit+0xc8>)
 8002562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002566:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_UART_MspInit+0xc8>)
 800256c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <HAL_UART_MspInit+0xc8>)
 800257a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800257e:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <HAL_UART_MspInit+0xc8>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002588:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <HAL_UART_MspInit+0xc8>)
 800258a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002596:	230c      	movs	r3, #12
 8002598:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ae:	2307      	movs	r3, #7
 80025b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <HAL_UART_MspInit+0xcc>)
 80025bc:	f000 fbea 	bl	8002d94 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80025c0:	bf00      	nop
 80025c2:	37e8      	adds	r7, #232	@ 0xe8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40004400 	.word	0x40004400
 80025cc:	58024400 	.word	0x58024400
 80025d0:	58020000 	.word	0x58020000

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <NMI_Handler+0x4>

080025dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <MemManage_Handler+0x4>

080025ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262a:	f000 f9db 	bl	80029e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <TIM2_IRQHandler+0x10>)
 800263a:	f004 fafd 	bl	8006c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	240003d0 	.word	0x240003d0

08002648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_kill>:

int _kill(int pid, int sig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002662:	f006 ffc5 	bl	80095f0 <__errno>
 8002666:	4603      	mov	r3, r0
 8002668:	2216      	movs	r2, #22
 800266a:	601a      	str	r2, [r3, #0]
  return -1;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_exit>:

void _exit (int status)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffe7 	bl	8002658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <_exit+0x12>

0800268e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e00a      	b.n	80026b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a0:	f3af 8000 	nop.w
 80026a4:	4601      	mov	r1, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	60ba      	str	r2, [r7, #8]
 80026ac:	b2ca      	uxtb	r2, r1
 80026ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	dbf0      	blt.n	80026a0 <_read+0x12>
  }

  return len;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f0:	605a      	str	r2, [r3, #4]
  return 0;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_isatty>:

int _isatty(int file)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002738:	4a14      	ldr	r2, [pc, #80]	@ (800278c <_sbrk+0x5c>)
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <_sbrk+0x60>)
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <_sbrk+0x64>)
 800274e:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <_sbrk+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d207      	bcs.n	8002770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002760:	f006 ff46 	bl	80095f0 <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	e009      	b.n	8002784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002776:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <_sbrk+0x64>)
 8002780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	24080000 	.word	0x24080000
 8002790:	00000400 	.word	0x00000400
 8002794:	24000514 	.word	0x24000514
 8002798:	24000668 	.word	0x24000668

0800279c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027a0:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <SystemInit+0xe4>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	4a36      	ldr	r2, [pc, #216]	@ (8002880 <SystemInit+0xe4>)
 80027a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027b0:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <SystemInit+0xe8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d807      	bhi.n	80027cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027bc:	4b31      	ldr	r3, [pc, #196]	@ (8002884 <SystemInit+0xe8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 030f 	bic.w	r3, r3, #15
 80027c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002884 <SystemInit+0xe8>)
 80027c6:	f043 0307 	orr.w	r3, r3, #7
 80027ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002888 <SystemInit+0xec>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <SystemInit+0xec>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <SystemInit+0xec>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027de:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <SystemInit+0xec>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4929      	ldr	r1, [pc, #164]	@ (8002888 <SystemInit+0xec>)
 80027e4:	4b29      	ldr	r3, [pc, #164]	@ (800288c <SystemInit+0xf0>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027ea:	4b26      	ldr	r3, [pc, #152]	@ (8002884 <SystemInit+0xe8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027f6:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <SystemInit+0xe8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 030f 	bic.w	r3, r3, #15
 80027fe:	4a21      	ldr	r2, [pc, #132]	@ (8002884 <SystemInit+0xe8>)
 8002800:	f043 0307 	orr.w	r3, r3, #7
 8002804:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <SystemInit+0xec>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800280c:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <SystemInit+0xec>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002812:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <SystemInit+0xec>)
 8002814:	2200      	movs	r2, #0
 8002816:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <SystemInit+0xec>)
 800281a:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <SystemInit+0xf4>)
 800281c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <SystemInit+0xec>)
 8002820:	4a1c      	ldr	r2, [pc, #112]	@ (8002894 <SystemInit+0xf8>)
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002824:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <SystemInit+0xec>)
 8002826:	4a1c      	ldr	r2, [pc, #112]	@ (8002898 <SystemInit+0xfc>)
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <SystemInit+0xec>)
 800282c:	2200      	movs	r2, #0
 800282e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <SystemInit+0xec>)
 8002832:	4a19      	ldr	r2, [pc, #100]	@ (8002898 <SystemInit+0xfc>)
 8002834:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <SystemInit+0xec>)
 8002838:	2200      	movs	r2, #0
 800283a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <SystemInit+0xec>)
 800283e:	4a16      	ldr	r2, [pc, #88]	@ (8002898 <SystemInit+0xfc>)
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <SystemInit+0xec>)
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <SystemInit+0xec>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0e      	ldr	r2, [pc, #56]	@ (8002888 <SystemInit+0xec>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002852:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <SystemInit+0xec>)
 8002856:	2200      	movs	r2, #0
 8002858:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <SystemInit+0x100>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b10      	ldr	r3, [pc, #64]	@ (80028a0 <SystemInit+0x104>)
 8002860:	4013      	ands	r3, r2
 8002862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002866:	d202      	bcs.n	800286e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002868:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <SystemInit+0x108>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800286e:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <SystemInit+0x10c>)
 8002870:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002874:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00
 8002884:	52002000 	.word	0x52002000
 8002888:	58024400 	.word	0x58024400
 800288c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002890:	02020200 	.word	0x02020200
 8002894:	01ff0000 	.word	0x01ff0000
 8002898:	01010280 	.word	0x01010280
 800289c:	5c001000 	.word	0x5c001000
 80028a0:	ffff0000 	.word	0xffff0000
 80028a4:	51008108 	.word	0x51008108
 80028a8:	52004000 	.word	0x52004000

080028ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028b0:	f7ff ff74 	bl	800279c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b4:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028b6:	490d      	ldr	r1, [pc, #52]	@ (80028ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028bc:	e002      	b.n	80028c4 <LoopCopyDataInit>

080028be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c2:	3304      	adds	r3, #4

080028c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c8:	d3f9      	bcc.n	80028be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028cc:	4c0a      	ldr	r4, [pc, #40]	@ (80028f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d0:	e001      	b.n	80028d6 <LoopFillZerobss>

080028d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d4:	3204      	adds	r2, #4

080028d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d8:	d3fb      	bcc.n	80028d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028da:	f006 fe8f 	bl	80095fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028de:	f7fe ff3b 	bl	8001758 <main>
  bx  lr
 80028e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028ec:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80028f0:	0800f418 	.word	0x0800f418
  ldr r2, =_sbss
 80028f4:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80028f8:	24000668 	.word	0x24000668

080028fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC3_IRQHandler>
	...

08002900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002906:	2003      	movs	r0, #3
 8002908:	f000 f98c 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800290c:	f001 fa56 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <HAL_Init+0x68>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	4913      	ldr	r1, [pc, #76]	@ (800296c <HAL_Init+0x6c>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
 8002928:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800292a:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <HAL_Init+0x68>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	4a0e      	ldr	r2, [pc, #56]	@ (800296c <HAL_Init+0x6c>)
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	4a0b      	ldr	r2, [pc, #44]	@ (8002970 <HAL_Init+0x70>)
 8002942:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002944:	4a0b      	ldr	r2, [pc, #44]	@ (8002974 <HAL_Init+0x74>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800294a:	200f      	movs	r0, #15
 800294c:	f000 f814 	bl	8002978 <HAL_InitTick>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e002      	b.n	8002960 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800295a:	f7ff fc91 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	58024400 	.word	0x58024400
 800296c:	0800d6b0 	.word	0x0800d6b0
 8002970:	24000008 	.word	0x24000008
 8002974:	24000004 	.word	0x24000004

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <HAL_InitTick+0x60>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e021      	b.n	80029d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <HAL_InitTick+0x64>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_InitTick+0x60>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800299a:	fbb3 f3f1 	udiv	r3, r3, r1
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f971 	bl	8002c8a <HAL_SYSTICK_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00e      	b.n	80029d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b0f      	cmp	r3, #15
 80029b6:	d80a      	bhi.n	80029ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b8:	2200      	movs	r2, #0
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f000 f93b 	bl	8002c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c4:	4a06      	ldr	r2, [pc, #24]	@ (80029e0 <HAL_InitTick+0x68>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	24000010 	.word	0x24000010
 80029dc:	24000004 	.word	0x24000004
 80029e0:	2400000c 	.word	0x2400000c

080029e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_IncTick+0x20>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_IncTick+0x24>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <HAL_IncTick+0x24>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	24000010 	.word	0x24000010
 8002a08:	24000518 	.word	0x24000518

08002a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <HAL_GetTick+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	24000518 	.word	0x24000518

08002a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff ffee 	bl	8002a0c <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d005      	beq.n	8002a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <HAL_Delay+0x44>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a4a:	bf00      	nop
 8002a4c:	f7ff ffde 	bl	8002a0c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d8f7      	bhi.n	8002a4c <HAL_Delay+0x28>
  {
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	24000010 	.word	0x24000010

08002a6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a70:	4b03      	ldr	r3, [pc, #12]	@ (8002a80 <HAL_GetREVID+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0c1b      	lsrs	r3, r3, #16
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	5c001000 	.word	0x5c001000

08002a84 <__NVIC_SetPriorityGrouping>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00
 8002ac8:	05fa0000 	.word	0x05fa0000

08002acc <__NVIC_GetPriorityGrouping>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	@ (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	@ (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	@ (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <SysTick_Config>:
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f7ff ff8e 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff29 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff40 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff90 	bl	8002b78 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5f 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff33 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa4 	bl	8002be0 <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ca8:	f3bf 8f5f 	dmb	sy
}
 8002cac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <HAL_MPU_Disable+0x28>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	4a06      	ldr	r2, [pc, #24]	@ (8002ccc <HAL_MPU_Disable+0x28>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002cba:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_MPU_Disable+0x2c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000ed00 	.word	0xe000ed00
 8002cd0:	e000ed90 	.word	0xe000ed90

08002cd4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d0c <HAL_MPU_Enable+0x38>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <HAL_MPU_Enable+0x3c>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <HAL_MPU_Enable+0x3c>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002cf2:	f3bf 8f4f 	dsb	sy
}
 8002cf6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cf8:	f3bf 8f6f 	isb	sy
}
 8002cfc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed90 	.word	0xe000ed90
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	785a      	ldrb	r2, [r3, #1]
 8002d20:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_MPU_ConfigRegion+0x7c>)
 8002d22:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d24:	4b1a      	ldr	r3, [pc, #104]	@ (8002d90 <HAL_MPU_ConfigRegion+0x7c>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	4a19      	ldr	r2, [pc, #100]	@ (8002d90 <HAL_MPU_ConfigRegion+0x7c>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d30:	4a17      	ldr	r2, [pc, #92]	@ (8002d90 <HAL_MPU_ConfigRegion+0x7c>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7adb      	ldrb	r3, [r3, #11]
 8002d42:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7a9b      	ldrb	r3, [r3, #10]
 8002d4a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7b5b      	ldrb	r3, [r3, #13]
 8002d52:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7b9b      	ldrb	r3, [r3, #14]
 8002d5a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7bdb      	ldrb	r3, [r3, #15]
 8002d62:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7a5b      	ldrb	r3, [r3, #9]
 8002d6a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7a1b      	ldrb	r3, [r3, #8]
 8002d72:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d74:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d7e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d80:	6113      	str	r3, [r2, #16]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed90 	.word	0xe000ed90

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	@ 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002da2:	4b89      	ldr	r3, [pc, #548]	@ (8002fc8 <HAL_GPIO_Init+0x234>)
 8002da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002da6:	e194      	b.n	80030d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2101      	movs	r1, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8186 	beq.w	80030cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d005      	beq.n	8002dd8 <HAL_GPIO_Init+0x44>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d130      	bne.n	8002e3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e0e:	2201      	movs	r2, #1
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 0201 	and.w	r2, r3, #1
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d017      	beq.n	8002e76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d123      	bne.n	8002eca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	08da      	lsrs	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3208      	adds	r2, #8
 8002e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0203 	and.w	r2, r3, #3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80e0 	beq.w	80030cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <HAL_GPIO_Init+0x238>)
 8002f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f12:	4a2e      	ldr	r2, [pc, #184]	@ (8002fcc <HAL_GPIO_Init+0x238>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fcc <HAL_GPIO_Init+0x238>)
 8002f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f2a:	4a29      	ldr	r2, [pc, #164]	@ (8002fd0 <HAL_GPIO_Init+0x23c>)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	3302      	adds	r3, #2
 8002f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a20      	ldr	r2, [pc, #128]	@ (8002fd4 <HAL_GPIO_Init+0x240>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d052      	beq.n	8002ffc <HAL_GPIO_Init+0x268>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <HAL_GPIO_Init+0x244>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d031      	beq.n	8002fc2 <HAL_GPIO_Init+0x22e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1e      	ldr	r2, [pc, #120]	@ (8002fdc <HAL_GPIO_Init+0x248>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02b      	beq.n	8002fbe <HAL_GPIO_Init+0x22a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <HAL_GPIO_Init+0x24c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d025      	beq.n	8002fba <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_GPIO_Init+0x250>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <HAL_GPIO_Init+0x254>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d019      	beq.n	8002fb2 <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1a      	ldr	r2, [pc, #104]	@ (8002fec <HAL_GPIO_Init+0x258>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_GPIO_Init+0x21a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <HAL_GPIO_Init+0x25c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00d      	beq.n	8002faa <HAL_GPIO_Init+0x216>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <HAL_GPIO_Init+0x260>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <HAL_GPIO_Init+0x212>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a17      	ldr	r2, [pc, #92]	@ (8002ff8 <HAL_GPIO_Init+0x264>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d101      	bne.n	8002fa2 <HAL_GPIO_Init+0x20e>
 8002f9e:	2309      	movs	r3, #9
 8002fa0:	e02d      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	e02b      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	e029      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e027      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e025      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	e023      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e021      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e01f      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e01d      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e01b      	b.n	8002ffe <HAL_GPIO_Init+0x26a>
 8002fc6:	bf00      	nop
 8002fc8:	58000080 	.word	0x58000080
 8002fcc:	58024400 	.word	0x58024400
 8002fd0:	58000400 	.word	0x58000400
 8002fd4:	58020000 	.word	0x58020000
 8002fd8:	58020400 	.word	0x58020400
 8002fdc:	58020800 	.word	0x58020800
 8002fe0:	58020c00 	.word	0x58020c00
 8002fe4:	58021000 	.word	0x58021000
 8002fe8:	58021400 	.word	0x58021400
 8002fec:	58021800 	.word	0x58021800
 8002ff0:	58021c00 	.word	0x58021c00
 8002ff4:	58022000 	.word	0x58022000
 8002ff8:	58022400 	.word	0x58022400
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	f002 0203 	and.w	r2, r2, #3
 8003004:	0092      	lsls	r2, r2, #2
 8003006:	4093      	lsls	r3, r2
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300e:	4938      	ldr	r1, [pc, #224]	@ (80030f0 <HAL_GPIO_Init+0x35c>)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	3301      	adds	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f47f ae63 	bne.w	8002da8 <HAL_GPIO_Init+0x14>
  }
}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	3724      	adds	r7, #36	@ 0x24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	58000400 	.word	0x58000400

080030f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]
 8003100:	4613      	mov	r3, r2
 8003102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003104:	787b      	ldrb	r3, [r7, #1]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800310a:	887a      	ldrh	r2, [r7, #2]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003110:	e003      	b.n	800311a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003112:	887b      	ldrh	r3, [r7, #2]
 8003114:	041a      	lsls	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	619a      	str	r2, [r3, #24]
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003130:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <HAL_PWREx_ConfigSupply+0x70>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d00a      	beq.n	8003152 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800313c:	4b16      	ldr	r3, [pc, #88]	@ (8003198 <HAL_PWREx_ConfigSupply+0x70>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d001      	beq.n	800314e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e01f      	b.n	800318e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e01d      	b.n	800318e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_PWREx_ConfigSupply+0x70>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f023 0207 	bic.w	r2, r3, #7
 800315a:	490f      	ldr	r1, [pc, #60]	@ (8003198 <HAL_PWREx_ConfigSupply+0x70>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003162:	f7ff fc53 	bl	8002a0c <HAL_GetTick>
 8003166:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003168:	e009      	b.n	800317e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800316a:	f7ff fc4f 	bl	8002a0c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003178:	d901      	bls.n	800317e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e007      	b.n	800318e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_PWREx_ConfigSupply+0x70>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800318a:	d1ee      	bne.n	800316a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	58024800 	.word	0x58024800

0800319c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	@ 0x30
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f000 bc48 	b.w	8003a40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8088 	beq.w	80032ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031be:	4b99      	ldr	r3, [pc, #612]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031c8:	4b96      	ldr	r3, [pc, #600]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d007      	beq.n	80031e4 <HAL_RCC_OscConfig+0x48>
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	2b18      	cmp	r3, #24
 80031d8:	d111      	bne.n	80031fe <HAL_RCC_OscConfig+0x62>
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d06d      	beq.n	80032cc <HAL_RCC_OscConfig+0x130>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d169      	bne.n	80032cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f000 bc21 	b.w	8003a40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x7a>
 8003208:	4b86      	ldr	r3, [pc, #536]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a85      	ldr	r2, [pc, #532]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e02e      	b.n	8003274 <HAL_RCC_OscConfig+0xd8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x9c>
 800321e:	4b81      	ldr	r3, [pc, #516]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a80      	ldr	r2, [pc, #512]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b7e      	ldr	r3, [pc, #504]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7d      	ldr	r2, [pc, #500]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xd8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0xc0>
 8003242:	4b78      	ldr	r3, [pc, #480]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a77      	ldr	r2, [pc, #476]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b75      	ldr	r3, [pc, #468]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a74      	ldr	r2, [pc, #464]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xd8>
 800325c:	4b71      	ldr	r3, [pc, #452]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a70      	ldr	r2, [pc, #448]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b6e      	ldr	r3, [pc, #440]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6d      	ldr	r2, [pc, #436]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7ff fbc6 	bl	8002a0c <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7ff fbc2 	bl	8002a0c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	@ 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e3d4      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003296:	4b63      	ldr	r3, [pc, #396]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xe8>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7ff fbb2 	bl	8002a0c <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7ff fbae 	bl	8002a0c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e3c0      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032be:	4b59      	ldr	r3, [pc, #356]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x110>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80ca 	beq.w	8003470 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032dc:	4b51      	ldr	r3, [pc, #324]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_RCC_OscConfig+0x166>
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2b18      	cmp	r3, #24
 80032f6:	d156      	bne.n	80033a6 <HAL_RCC_OscConfig+0x20a>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d151      	bne.n	80033a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003302:	4b48      	ldr	r3, [pc, #288]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x17e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e392      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800331a:	4b42      	ldr	r3, [pc, #264]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0219 	bic.w	r2, r3, #25
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	493f      	ldr	r1, [pc, #252]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7ff fb6e 	bl	8002a0c <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003334:	f7ff fb6a 	bl	8002a0c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e37c      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003346:	4b37      	ldr	r3, [pc, #220]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	f7ff fb8b 	bl	8002a6c <HAL_GetREVID>
 8003356:	4603      	mov	r3, r0
 8003358:	f241 0203 	movw	r2, #4099	@ 0x1003
 800335c:	4293      	cmp	r3, r2
 800335e:	d817      	bhi.n	8003390 <HAL_RCC_OscConfig+0x1f4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b40      	cmp	r3, #64	@ 0x40
 8003366:	d108      	bne.n	800337a <HAL_RCC_OscConfig+0x1de>
 8003368:	4b2e      	ldr	r3, [pc, #184]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003370:	4a2c      	ldr	r2, [pc, #176]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003376:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003378:	e07a      	b.n	8003470 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b2a      	ldr	r3, [pc, #168]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	031b      	lsls	r3, r3, #12
 8003388:	4926      	ldr	r1, [pc, #152]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338e:	e06f      	b.n	8003470 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003390:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	4921      	ldr	r1, [pc, #132]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a4:	e064      	b.n	8003470 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d047      	beq.n	800343e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 0219 	bic.w	r2, r3, #25
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	491a      	ldr	r1, [pc, #104]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7ff fb24 	bl	8002a0c <HAL_GetTick>
 80033c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c8:	f7ff fb20 	bl	8002a0c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e332      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033da:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	f7ff fb41 	bl	8002a6c <HAL_GetREVID>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d819      	bhi.n	8003428 <HAL_RCC_OscConfig+0x28c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	d108      	bne.n	800340e <HAL_RCC_OscConfig+0x272>
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003404:	4a07      	ldr	r2, [pc, #28]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800340a:	6053      	str	r3, [r2, #4]
 800340c:	e030      	b.n	8003470 <HAL_RCC_OscConfig+0x2d4>
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	031b      	lsls	r3, r3, #12
 800341c:	4901      	ldr	r1, [pc, #4]	@ (8003424 <HAL_RCC_OscConfig+0x288>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
 8003422:	e025      	b.n	8003470 <HAL_RCC_OscConfig+0x2d4>
 8003424:	58024400 	.word	0x58024400
 8003428:	4b9a      	ldr	r3, [pc, #616]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	4997      	ldr	r1, [pc, #604]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
 800343c:	e018      	b.n	8003470 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b95      	ldr	r3, [pc, #596]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a94      	ldr	r2, [pc, #592]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7ff fadf 	bl	8002a0c <HAL_GetTick>
 800344e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003452:	f7ff fadb 	bl	8002a0c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e2ed      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003464:	4b8b      	ldr	r3, [pc, #556]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a9 	beq.w	80035d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347e:	4b85      	ldr	r3, [pc, #532]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003486:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003488:	4b82      	ldr	r3, [pc, #520]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d007      	beq.n	80034a4 <HAL_RCC_OscConfig+0x308>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b18      	cmp	r3, #24
 8003498:	d13a      	bne.n	8003510 <HAL_RCC_OscConfig+0x374>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d135      	bne.n	8003510 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_OscConfig+0x320>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	2b80      	cmp	r3, #128	@ 0x80
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e2c1      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034bc:	f7ff fad6 	bl	8002a6c <HAL_GetREVID>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d817      	bhi.n	80034fa <HAL_RCC_OscConfig+0x35e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d108      	bne.n	80034e4 <HAL_RCC_OscConfig+0x348>
 80034d2:	4b70      	ldr	r3, [pc, #448]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80034da:	4a6e      	ldr	r2, [pc, #440]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80034dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034e2:	e075      	b.n	80035d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	069b      	lsls	r3, r3, #26
 80034f2:	4968      	ldr	r1, [pc, #416]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034f8:	e06a      	b.n	80035d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034fa:	4b66      	ldr	r3, [pc, #408]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	061b      	lsls	r3, r3, #24
 8003508:	4962      	ldr	r1, [pc, #392]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800350e:	e05f      	b.n	80035d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d042      	beq.n	800359e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003518:	4b5e      	ldr	r3, [pc, #376]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5d      	ldr	r2, [pc, #372]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800351e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7ff fa72 	bl	8002a0c <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800352c:	f7ff fa6e 	bl	8002a0c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e280      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800353e:	4b55      	ldr	r3, [pc, #340]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800354a:	f7ff fa8f 	bl	8002a6c <HAL_GetREVID>
 800354e:	4603      	mov	r3, r0
 8003550:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003554:	4293      	cmp	r3, r2
 8003556:	d817      	bhi.n	8003588 <HAL_RCC_OscConfig+0x3ec>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	2b20      	cmp	r3, #32
 800355e:	d108      	bne.n	8003572 <HAL_RCC_OscConfig+0x3d6>
 8003560:	4b4c      	ldr	r3, [pc, #304]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003568:	4a4a      	ldr	r2, [pc, #296]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800356a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800356e:	6053      	str	r3, [r2, #4]
 8003570:	e02e      	b.n	80035d0 <HAL_RCC_OscConfig+0x434>
 8003572:	4b48      	ldr	r3, [pc, #288]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	069b      	lsls	r3, r3, #26
 8003580:	4944      	ldr	r1, [pc, #272]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
 8003586:	e023      	b.n	80035d0 <HAL_RCC_OscConfig+0x434>
 8003588:	4b42      	ldr	r3, [pc, #264]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	493f      	ldr	r1, [pc, #252]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003598:	4313      	orrs	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
 800359c:	e018      	b.n	80035d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800359e:	4b3d      	ldr	r3, [pc, #244]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80035a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7ff fa2f 	bl	8002a0c <HAL_GetTick>
 80035ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035b2:	f7ff fa2b 	bl	8002a0c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e23d      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035c4:	4b33      	ldr	r3, [pc, #204]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d036      	beq.n	800364a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d019      	beq.n	8003618 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80035e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7ff fa0c 	bl	8002a0c <HAL_GetTick>
 80035f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f8:	f7ff fa08 	bl	8002a0c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e21a      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800360a:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800360c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x45c>
 8003616:	e018      	b.n	800364a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003618:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800361a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361c:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7ff f9f2 	bl	8002a0c <HAL_GetTick>
 8003628:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362c:	f7ff f9ee 	bl	8002a0c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e200      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800363e:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d039      	beq.n	80036ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01c      	beq.n	8003698 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800365e:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a0c      	ldr	r2, [pc, #48]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003664:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003668:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800366a:	f7ff f9cf 	bl	8002a0c <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003672:	f7ff f9cb 	bl	8002a0c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1dd      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003684:	4b03      	ldr	r3, [pc, #12]	@ (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x4d6>
 8003690:	e01b      	b.n	80036ca <HAL_RCC_OscConfig+0x52e>
 8003692:	bf00      	nop
 8003694:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003698:	4b9b      	ldr	r3, [pc, #620]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a9a      	ldr	r2, [pc, #616]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800369e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036a4:	f7ff f9b2 	bl	8002a0c <HAL_GetTick>
 80036a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ac:	f7ff f9ae 	bl	8002a0c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1c0      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036be:	4b92      	ldr	r3, [pc, #584]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8081 	beq.w	80037da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036d8:	4b8c      	ldr	r3, [pc, #560]	@ (800390c <HAL_RCC_OscConfig+0x770>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a8b      	ldr	r2, [pc, #556]	@ (800390c <HAL_RCC_OscConfig+0x770>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e4:	f7ff f992 	bl	8002a0c <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7ff f98e 	bl	8002a0c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	@ 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e1a0      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036fe:	4b83      	ldr	r3, [pc, #524]	@ (800390c <HAL_RCC_OscConfig+0x770>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d106      	bne.n	8003720 <HAL_RCC_OscConfig+0x584>
 8003712:	4b7d      	ldr	r3, [pc, #500]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003716:	4a7c      	ldr	r2, [pc, #496]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	@ 0x70
 800371e:	e02d      	b.n	800377c <HAL_RCC_OscConfig+0x5e0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10c      	bne.n	8003742 <HAL_RCC_OscConfig+0x5a6>
 8003728:	4b77      	ldr	r3, [pc, #476]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	4a76      	ldr	r2, [pc, #472]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6713      	str	r3, [r2, #112]	@ 0x70
 8003734:	4b74      	ldr	r3, [pc, #464]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	4a73      	ldr	r2, [pc, #460]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800373a:	f023 0304 	bic.w	r3, r3, #4
 800373e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003740:	e01c      	b.n	800377c <HAL_RCC_OscConfig+0x5e0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b05      	cmp	r3, #5
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x5c8>
 800374a:	4b6f      	ldr	r3, [pc, #444]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374e:	4a6e      	ldr	r2, [pc, #440]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	6713      	str	r3, [r2, #112]	@ 0x70
 8003756:	4b6c      	ldr	r3, [pc, #432]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	4a6b      	ldr	r2, [pc, #428]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6713      	str	r3, [r2, #112]	@ 0x70
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0x5e0>
 8003764:	4b68      	ldr	r3, [pc, #416]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003768:	4a67      	ldr	r2, [pc, #412]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003770:	4b65      	ldr	r3, [pc, #404]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	4a64      	ldr	r2, [pc, #400]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003776:	f023 0304 	bic.w	r3, r3, #4
 800377a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7ff f942 	bl	8002a0c <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7ff f93e 	bl	8002a0c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e14e      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a2:	4b59      	ldr	r3, [pc, #356]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ee      	beq.n	800378c <HAL_RCC_OscConfig+0x5f0>
 80037ae:	e014      	b.n	80037da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7ff f92c 	bl	8002a0c <HAL_GetTick>
 80037b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7ff f928 	bl	8002a0c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e138      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ee      	bne.n	80037b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 812d 	beq.w	8003a3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037e4:	4b48      	ldr	r3, [pc, #288]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ec:	2b18      	cmp	r3, #24
 80037ee:	f000 80bd 	beq.w	800396c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	f040 809e 	bne.w	8003938 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fc:	4b42      	ldr	r3, [pc, #264]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a41      	ldr	r2, [pc, #260]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7ff f900 	bl	8002a0c <HAL_GetTick>
 800380c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7ff f8fc 	bl	8002a0c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e10e      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003822:	4b39      	ldr	r3, [pc, #228]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382e:	4b36      	ldr	r3, [pc, #216]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003832:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <HAL_RCC_OscConfig+0x774>)
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	430a      	orrs	r2, r1
 8003842:	4931      	ldr	r1, [pc, #196]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	628b      	str	r3, [r1, #40]	@ 0x28
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384c:	3b01      	subs	r3, #1
 800384e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003856:	3b01      	subs	r3, #1
 8003858:	025b      	lsls	r3, r3, #9
 800385a:	b29b      	uxth	r3, r3
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	3b01      	subs	r3, #1
 8003864:	041b      	lsls	r3, r3, #16
 8003866:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	3b01      	subs	r3, #1
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003878:	4923      	ldr	r1, [pc, #140]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800387e:	4b22      	ldr	r3, [pc, #136]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	4a21      	ldr	r2, [pc, #132]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800388a:	4b1f      	ldr	r3, [pc, #124]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800388c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800388e:	4b21      	ldr	r3, [pc, #132]	@ (8003914 <HAL_RCC_OscConfig+0x778>)
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003896:	00d2      	lsls	r2, r2, #3
 8003898:	491b      	ldr	r1, [pc, #108]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 800389a:	4313      	orrs	r3, r2
 800389c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800389e:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a2:	f023 020c 	bic.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	4917      	ldr	r1, [pc, #92]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038b0:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	f023 0202 	bic.w	r2, r3, #2
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	4912      	ldr	r1, [pc, #72]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038c2:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c6:	4a10      	ldr	r2, [pc, #64]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038da:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038de:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80038e6:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	4a07      	ldr	r2, [pc, #28]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f2:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <HAL_RCC_OscConfig+0x76c>)
 80038f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7ff f885 	bl	8002a0c <HAL_GetTick>
 8003902:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003904:	e011      	b.n	800392a <HAL_RCC_OscConfig+0x78e>
 8003906:	bf00      	nop
 8003908:	58024400 	.word	0x58024400
 800390c:	58024800 	.word	0x58024800
 8003910:	fffffc0c 	.word	0xfffffc0c
 8003914:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7ff f878 	bl	8002a0c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e08a      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800392a:	4b47      	ldr	r3, [pc, #284]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x77c>
 8003936:	e082      	b.n	8003a3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003938:	4b43      	ldr	r3, [pc, #268]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a42      	ldr	r2, [pc, #264]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 800393e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7ff f862 	bl	8002a0c <HAL_GetTick>
 8003948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7ff f85e 	bl	8002a0c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e070      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800395e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x7b0>
 800396a:	e068      	b.n	8003a3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800396c:	4b36      	ldr	r3, [pc, #216]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003972:	4b35      	ldr	r3, [pc, #212]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	2b01      	cmp	r3, #1
 800397e:	d031      	beq.n	80039e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0203 	and.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d12a      	bne.n	80039e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d122      	bne.n	80039e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d11a      	bne.n	80039e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0a5b      	lsrs	r3, r3, #9
 80039b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d111      	bne.n	80039e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	0c1b      	lsrs	r3, r3, #16
 80039c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d108      	bne.n	80039e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	0e1b      	lsrs	r3, r3, #24
 80039d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e02b      	b.n	8003a40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80039e8:	4b17      	ldr	r3, [pc, #92]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 80039ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ec:	08db      	lsrs	r3, r3, #3
 80039ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d01f      	beq.n	8003a3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80039fe:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	4a11      	ldr	r2, [pc, #68]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a0a:	f7fe ffff 	bl	8002a0c <HAL_GetTick>
 8003a0e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a10:	bf00      	nop
 8003a12:	f7fe fffb 	bl	8002a0c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d0f9      	beq.n	8003a12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 8003a20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a22:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <HAL_RCC_OscConfig+0x8b0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a2a:	00d2      	lsls	r2, r2, #3
 8003a2c:	4906      	ldr	r1, [pc, #24]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a32:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <HAL_RCC_OscConfig+0x8ac>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3730      	adds	r7, #48	@ 0x30
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	ffff0007 	.word	0xffff0007

08003a50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e19c      	b.n	8003d9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b8a      	ldr	r3, [pc, #552]	@ (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d910      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b87      	ldr	r3, [pc, #540]	@ (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 020f 	bic.w	r2, r3, #15
 8003a7a:	4985      	ldr	r1, [pc, #532]	@ (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b83      	ldr	r3, [pc, #524]	@ (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e184      	b.n	8003d9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d010      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d908      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ab0:	4b78      	ldr	r3, [pc, #480]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	4975      	ldr	r1, [pc, #468]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d010      	beq.n	8003af0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	4b70      	ldr	r3, [pc, #448]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d908      	bls.n	8003af0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ade:	4b6d      	ldr	r3, [pc, #436]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	496a      	ldr	r1, [pc, #424]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d010      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	4b64      	ldr	r3, [pc, #400]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d908      	bls.n	8003b1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b0c:	4b61      	ldr	r3, [pc, #388]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	495e      	ldr	r1, [pc, #376]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d010      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	4b59      	ldr	r3, [pc, #356]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d908      	bls.n	8003b4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b3a:	4b56      	ldr	r3, [pc, #344]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4953      	ldr	r1, [pc, #332]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d908      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b4a      	ldr	r3, [pc, #296]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f023 020f 	bic.w	r2, r3, #15
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4947      	ldr	r1, [pc, #284]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d055      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b86:	4b43      	ldr	r3, [pc, #268]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4940      	ldr	r1, [pc, #256]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ba0:	4b3c      	ldr	r3, [pc, #240]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d121      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0f6      	b.n	8003d9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bb8:	4b36      	ldr	r3, [pc, #216]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d115      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0ea      	b.n	8003d9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bd0:	4b30      	ldr	r3, [pc, #192]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0de      	b.n	8003d9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0d6      	b.n	8003d9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bf0:	4b28      	ldr	r3, [pc, #160]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f023 0207 	bic.w	r2, r3, #7
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4925      	ldr	r1, [pc, #148]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c02:	f7fe ff03 	bl	8002a0c <HAL_GetTick>
 8003c06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0a:	f7fe feff 	bl	8002a0c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0be      	b.n	8003d9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c20:	4b1c      	ldr	r3, [pc, #112]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d1eb      	bne.n	8003c0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d010      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	4b14      	ldr	r3, [pc, #80]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d208      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4e:	4b11      	ldr	r3, [pc, #68]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	490e      	ldr	r1, [pc, #56]	@ (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d214      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b08      	ldr	r3, [pc, #32]	@ (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 020f 	bic.w	r2, r3, #15
 8003c76:	4906      	ldr	r1, [pc, #24]	@ (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e086      	b.n	8003d9e <HAL_RCC_ClockConfig+0x34e>
 8003c90:	52002000 	.word	0x52002000
 8003c94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d208      	bcs.n	8003cc6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	4939      	ldr	r1, [pc, #228]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d010      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	4b34      	ldr	r3, [pc, #208]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d208      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ce2:	4b31      	ldr	r3, [pc, #196]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	492e      	ldr	r1, [pc, #184]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d010      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699a      	ldr	r2, [r3, #24]
 8003d04:	4b28      	ldr	r3, [pc, #160]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d208      	bcs.n	8003d22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d10:	4b25      	ldr	r3, [pc, #148]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	4922      	ldr	r1, [pc, #136]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d010      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d208      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4917      	ldr	r1, [pc, #92]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d50:	f000 f834 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b14      	ldr	r3, [pc, #80]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	4912      	ldr	r1, [pc, #72]	@ (8003dac <HAL_RCC_ClockConfig+0x35c>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <HAL_RCC_ClockConfig+0x358>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <HAL_RCC_ClockConfig+0x35c>)
 8003d78:	5cd3      	ldrb	r3, [r2, r3]
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
 8003d84:	4a0a      	ldr	r2, [pc, #40]	@ (8003db0 <HAL_RCC_ClockConfig+0x360>)
 8003d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d88:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <HAL_RCC_ClockConfig+0x364>)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003db8 <HAL_RCC_ClockConfig+0x368>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fdf0 	bl	8002978 <HAL_InitTick>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400
 8003dac:	0800d6b0 	.word	0x0800d6b0
 8003db0:	24000008 	.word	0x24000008
 8003db4:	24000004 	.word	0x24000004
 8003db8:	2400000c 	.word	0x2400000c

08003dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	@ 0x24
 8003dc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dc2:	4bb3      	ldr	r3, [pc, #716]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dca:	2b18      	cmp	r3, #24
 8003dcc:	f200 8155 	bhi.w	800407a <HAL_RCC_GetSysClockFreq+0x2be>
 8003dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003e3d 	.word	0x08003e3d
 8003ddc:	0800407b 	.word	0x0800407b
 8003de0:	0800407b 	.word	0x0800407b
 8003de4:	0800407b 	.word	0x0800407b
 8003de8:	0800407b 	.word	0x0800407b
 8003dec:	0800407b 	.word	0x0800407b
 8003df0:	0800407b 	.word	0x0800407b
 8003df4:	0800407b 	.word	0x0800407b
 8003df8:	08003e63 	.word	0x08003e63
 8003dfc:	0800407b 	.word	0x0800407b
 8003e00:	0800407b 	.word	0x0800407b
 8003e04:	0800407b 	.word	0x0800407b
 8003e08:	0800407b 	.word	0x0800407b
 8003e0c:	0800407b 	.word	0x0800407b
 8003e10:	0800407b 	.word	0x0800407b
 8003e14:	0800407b 	.word	0x0800407b
 8003e18:	08003e69 	.word	0x08003e69
 8003e1c:	0800407b 	.word	0x0800407b
 8003e20:	0800407b 	.word	0x0800407b
 8003e24:	0800407b 	.word	0x0800407b
 8003e28:	0800407b 	.word	0x0800407b
 8003e2c:	0800407b 	.word	0x0800407b
 8003e30:	0800407b 	.word	0x0800407b
 8003e34:	0800407b 	.word	0x0800407b
 8003e38:	08003e6f 	.word	0x08003e6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e3c:	4b94      	ldr	r3, [pc, #592]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d009      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e48:	4b91      	ldr	r3, [pc, #580]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	4a90      	ldr	r2, [pc, #576]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
 8003e58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e5a:	e111      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e5c:	4b8d      	ldr	r3, [pc, #564]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e5e:	61bb      	str	r3, [r7, #24]
      break;
 8003e60:	e10e      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e62:	4b8d      	ldr	r3, [pc, #564]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e64:	61bb      	str	r3, [r7, #24]
      break;
 8003e66:	e10b      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e68:	4b8c      	ldr	r3, [pc, #560]	@ (800409c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e6a:	61bb      	str	r3, [r7, #24]
      break;
 8003e6c:	e108      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e6e:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e78:	4b85      	ldr	r3, [pc, #532]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e84:	4b82      	ldr	r3, [pc, #520]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e8e:	4b80      	ldr	r3, [pc, #512]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e92:	08db      	lsrs	r3, r3, #3
 8003e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80e1 	beq.w	8004074 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	f000 8083 	beq.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x204>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	f200 80a1 	bhi.w	8004004 <HAL_RCC_GetSysClockFreq+0x248>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x114>
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d056      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ece:	e099      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02d      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003edc:	4b6c      	ldr	r3, [pc, #432]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	08db      	lsrs	r3, r3, #3
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	4a6b      	ldr	r2, [pc, #428]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	ee07 3a90 	vmov	s15, r3
 8003ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f06:	4b62      	ldr	r3, [pc, #392]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80040a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f36:	e087      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80040a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4a:	4b51      	ldr	r3, [pc, #324]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80040a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f7a:	e065      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80040a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8e:	4b40      	ldr	r3, [pc, #256]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80040a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fbe:	e043      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80040ac <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fe6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80040a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004002:	e021      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80040a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004016:	4b1e      	ldr	r3, [pc, #120]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004026:	ed97 6a02 	vldr	s12, [r7, #8]
 800402a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80040a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800402e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800403a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004046:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004048:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	0a5b      	lsrs	r3, r3, #9
 800404e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004052:	3301      	adds	r3, #1
 8004054:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004060:	edd7 6a07 	vldr	s13, [r7, #28]
 8004064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004072:	e005      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
      break;
 8004078:	e002      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800407c:	61bb      	str	r3, [r7, #24]
      break;
 800407e:	bf00      	nop
  }

  return sysclockfreq;
 8004080:	69bb      	ldr	r3, [r7, #24]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3724      	adds	r7, #36	@ 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400
 8004094:	03d09000 	.word	0x03d09000
 8004098:	003d0900 	.word	0x003d0900
 800409c:	017d7840 	.word	0x017d7840
 80040a0:	46000000 	.word	0x46000000
 80040a4:	4c742400 	.word	0x4c742400
 80040a8:	4a742400 	.word	0x4a742400
 80040ac:	4bbebc20 	.word	0x4bbebc20

080040b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80040b6:	f7ff fe81 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 80040ba:	4602      	mov	r2, r0
 80040bc:	4b10      	ldr	r3, [pc, #64]	@ (8004100 <HAL_RCC_GetHCLKFreq+0x50>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	490f      	ldr	r1, [pc, #60]	@ (8004104 <HAL_RCC_GetHCLKFreq+0x54>)
 80040c8:	5ccb      	ldrb	r3, [r1, r3]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <HAL_RCC_GetHCLKFreq+0x50>)
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	4a09      	ldr	r2, [pc, #36]	@ (8004104 <HAL_RCC_GetHCLKFreq+0x54>)
 80040de:	5cd3      	ldrb	r3, [r2, r3]
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	4a07      	ldr	r2, [pc, #28]	@ (8004108 <HAL_RCC_GetHCLKFreq+0x58>)
 80040ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040ee:	4a07      	ldr	r2, [pc, #28]	@ (800410c <HAL_RCC_GetHCLKFreq+0x5c>)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040f4:	4b04      	ldr	r3, [pc, #16]	@ (8004108 <HAL_RCC_GetHCLKFreq+0x58>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	58024400 	.word	0x58024400
 8004104:	0800d6b0 	.word	0x0800d6b0
 8004108:	24000008 	.word	0x24000008
 800410c:	24000004 	.word	0x24000004

08004110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004114:	f7ff ffcc 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4904      	ldr	r1, [pc, #16]	@ (8004138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	58024400 	.word	0x58024400
 8004138:	0800d6b0 	.word	0x0800d6b0

0800413c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004140:	f7ff ffb6 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4904      	ldr	r1, [pc, #16]	@ (8004164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	58024400 	.word	0x58024400
 8004164:	0800d6b0 	.word	0x0800d6b0

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b0ca      	sub	sp, #296	@ 0x128
 800416e:	af00      	add	r7, sp, #0
 8004170:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800417a:	2300      	movs	r3, #0
 800417c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800418c:	2500      	movs	r5, #0
 800418e:	ea54 0305 	orrs.w	r3, r4, r5
 8004192:	d049      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800419a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800419e:	d02f      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80041a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041a4:	d828      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041aa:	d01a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80041ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b0:	d822      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ba:	d007      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041bc:	e01c      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041be:	4bb8      	ldr	r3, [pc, #736]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	4ab7      	ldr	r2, [pc, #732]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041ca:	e01a      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d0:	3308      	adds	r3, #8
 80041d2:	2102      	movs	r1, #2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 fc8f 	bl	8005af8 <RCCEx_PLL2_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041e0:	e00f      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	3328      	adds	r3, #40	@ 0x28
 80041e8:	2102      	movs	r1, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 fd36 	bl	8005c5c <RCCEx_PLL3_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800420a:	4ba5      	ldr	r3, [pc, #660]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800420c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004218:	4aa1      	ldr	r2, [pc, #644]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800421a:	430b      	orrs	r3, r1
 800421c:	6513      	str	r3, [r2, #80]	@ 0x50
 800421e:	e003      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004234:	f04f 0900 	mov.w	r9, #0
 8004238:	ea58 0309 	orrs.w	r3, r8, r9
 800423c:	d047      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	2b04      	cmp	r3, #4
 8004246:	d82a      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004248:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004265 	.word	0x08004265
 8004254:	08004273 	.word	0x08004273
 8004258:	08004289 	.word	0x08004289
 800425c:	080042a7 	.word	0x080042a7
 8004260:	080042a7 	.word	0x080042a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004264:	4b8e      	ldr	r3, [pc, #568]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	4a8d      	ldr	r2, [pc, #564]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800426a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800426e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004270:	e01a      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	3308      	adds	r3, #8
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fc3c 	bl	8005af8 <RCCEx_PLL2_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004286:	e00f      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	3328      	adds	r3, #40	@ 0x28
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f001 fce3 	bl	8005c5c <RCCEx_PLL3_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800429c:	e004      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042a4:	e000      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80042a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042b0:	4b7b      	ldr	r3, [pc, #492]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b4:	f023 0107 	bic.w	r1, r3, #7
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042be:	4a78      	ldr	r2, [pc, #480]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80042da:	f04f 0b00 	mov.w	fp, #0
 80042de:	ea5a 030b 	orrs.w	r3, sl, fp
 80042e2:	d04c      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ee:	d030      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80042f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f4:	d829      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80042f8:	d02d      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80042fc:	d825      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042fe:	2b80      	cmp	r3, #128	@ 0x80
 8004300:	d018      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004302:	2b80      	cmp	r3, #128	@ 0x80
 8004304:	d821      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800430a:	2b40      	cmp	r3, #64	@ 0x40
 800430c:	d007      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800430e:	e01c      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004310:	4b63      	ldr	r3, [pc, #396]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004314:	4a62      	ldr	r2, [pc, #392]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800431c:	e01c      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	3308      	adds	r3, #8
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f001 fbe6 	bl	8005af8 <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004332:	e011      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	3328      	adds	r3, #40	@ 0x28
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f001 fc8d 	bl	8005c5c <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004350:	e002      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004360:	4b4f      	ldr	r3, [pc, #316]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004364:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	4a4c      	ldr	r2, [pc, #304]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004370:	430b      	orrs	r3, r1
 8004372:	6513      	str	r3, [r2, #80]	@ 0x50
 8004374:	e003      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800437a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800438a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800438e:	2300      	movs	r3, #0
 8004390:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004394:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004398:	460b      	mov	r3, r1
 800439a:	4313      	orrs	r3, r2
 800439c:	d053      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80043a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043aa:	d035      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80043ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043b0:	d82e      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80043b6:	d031      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80043b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80043bc:	d828      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c2:	d01a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80043c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c8:	d822      	bhi.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80043ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043d2:	d007      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80043d4:	e01c      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d6:	4b32      	ldr	r3, [pc, #200]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	4a31      	ldr	r2, [pc, #196]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043e2:	e01c      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	3308      	adds	r3, #8
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 fb83 	bl	8005af8 <RCCEx_PLL2_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043f8:	e011      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	3328      	adds	r3, #40	@ 0x28
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f001 fc2a 	bl	8005c5c <RCCEx_PLL3_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800440e:	e006      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004416:	e002      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800441c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004426:	4b1e      	ldr	r3, [pc, #120]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004432:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004436:	4a1a      	ldr	r2, [pc, #104]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004438:	430b      	orrs	r3, r1
 800443a:	6593      	str	r3, [r2, #88]	@ 0x58
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004452:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800445c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004460:	460b      	mov	r3, r1
 8004462:	4313      	orrs	r3, r2
 8004464:	d056      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800446e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004472:	d038      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004474:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004478:	d831      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800447a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800447e:	d034      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004480:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004484:	d82b      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800448a:	d01d      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800448c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004490:	d825      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004496:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800449c:	e01f      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800449e:	bf00      	nop
 80044a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4ba2      	ldr	r3, [pc, #648]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	4aa1      	ldr	r2, [pc, #644]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044b0:	e01c      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	3308      	adds	r3, #8
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f001 fb1c 	bl	8005af8 <RCCEx_PLL2_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044c6:	e011      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	3328      	adds	r3, #40	@ 0x28
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 fbc3 	bl	8005c5c <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044dc:	e006      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044e4:	e002      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044f4:	4b8e      	ldr	r3, [pc, #568]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004504:	4a8a      	ldr	r2, [pc, #552]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004506:	430b      	orrs	r3, r1
 8004508:	6593      	str	r3, [r2, #88]	@ 0x58
 800450a:	e003      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004520:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800452a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d03a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453a:	2b30      	cmp	r3, #48	@ 0x30
 800453c:	d01f      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800453e:	2b30      	cmp	r3, #48	@ 0x30
 8004540:	d819      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004542:	2b20      	cmp	r3, #32
 8004544:	d00c      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004546:	2b20      	cmp	r3, #32
 8004548:	d815      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d019      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800454e:	2b10      	cmp	r3, #16
 8004550:	d111      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004552:	4b77      	ldr	r3, [pc, #476]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	4a76      	ldr	r2, [pc, #472]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800455c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800455e:	e011      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004564:	3308      	adds	r3, #8
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f001 fac5 	bl	8005af8 <RCCEx_PLL2_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800457c:	e002      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800457e:	bf00      	nop
 8004580:	e000      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800458c:	4b68      	ldr	r3, [pc, #416]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800458e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004590:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459a:	4a65      	ldr	r2, [pc, #404]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800459c:	430b      	orrs	r3, r1
 800459e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80045b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80045ba:	2300      	movs	r3, #0
 80045bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80045c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d051      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045d4:	d035      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80045d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045da:	d82e      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045e0:	d031      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80045e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045e6:	d828      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ec:	d01a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f2:	d822      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80045f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fc:	d007      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80045fe:	e01c      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004600:	4b4b      	ldr	r3, [pc, #300]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	4a4a      	ldr	r2, [pc, #296]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800460c:	e01c      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	3308      	adds	r3, #8
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fa6e 	bl	8005af8 <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004622:	e011      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004628:	3328      	adds	r3, #40	@ 0x28
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f001 fb15 	bl	8005c5c <RCCEx_PLL3_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004640:	e002      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004650:	4b37      	ldr	r3, [pc, #220]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004654:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465e:	4a34      	ldr	r2, [pc, #208]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004660:	430b      	orrs	r3, r1
 8004662:	6513      	str	r3, [r2, #80]	@ 0x50
 8004664:	e003      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800467a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800467e:	2300      	movs	r3, #0
 8004680:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004684:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004688:	460b      	mov	r3, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	d056      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004698:	d033      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800469a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800469e:	d82c      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046a4:	d02f      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80046a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046aa:	d826      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046b0:	d02b      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80046b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046b6:	d820      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046bc:	d012      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80046be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c2:	d81a      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d022      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046cc:	d115      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	3308      	adds	r3, #8
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 fa0e 	bl	8005af8 <RCCEx_PLL2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046e2:	e015      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e8:	3328      	adds	r3, #40	@ 0x28
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f001 fab5 	bl	8005c5c <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046f8:	e00a      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004702:	bf00      	nop
 8004704:	e004      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800470e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10d      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004718:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800471a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004726:	4a02      	ldr	r2, [pc, #8]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004728:	430b      	orrs	r3, r1
 800472a:	6513      	str	r3, [r2, #80]	@ 0x50
 800472c:	e006      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800472e:	bf00      	nop
 8004730:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800473c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004752:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d055      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004768:	d033      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800476a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800476e:	d82c      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004774:	d02f      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477a:	d826      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800477c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004780:	d02b      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004782:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004786:	d820      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800478c:	d012      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800478e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004792:	d81a      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d022      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800479c:	d115      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	3308      	adds	r3, #8
 80047a4:	2101      	movs	r1, #1
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 f9a6 	bl	8005af8 <RCCEx_PLL2_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047b2:	e015      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	3328      	adds	r3, #40	@ 0x28
 80047ba:	2101      	movs	r1, #1
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 fa4d 	bl	8005c5c <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047c8:	e00a      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047d0:	e006      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047d2:	bf00      	nop
 80047d4:	e004      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047d6:	bf00      	nop
 80047d8:	e002      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047e8:	4ba3      	ldr	r3, [pc, #652]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80047f8:	4a9f      	ldr	r2, [pc, #636]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047fa:	430b      	orrs	r3, r1
 80047fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80047fe:	e003      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004804:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800481e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d037      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004832:	d00e      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004838:	d816      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d018      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800483e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004842:	d111      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004844:	4b8c      	ldr	r3, [pc, #560]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	4a8b      	ldr	r2, [pc, #556]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800484a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800484e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004850:	e00f      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	3308      	adds	r3, #8
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f94c 	bl	8005af8 <RCCEx_PLL2_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004866:	e004      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800487a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800487c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004888:	4a7b      	ldr	r2, [pc, #492]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800488a:	430b      	orrs	r3, r1
 800488c:	6513      	str	r3, [r2, #80]	@ 0x50
 800488e:	e003      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80048a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80048ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	d039      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d81c      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80048c2:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	08004905 	.word	0x08004905
 80048cc:	080048d9 	.word	0x080048d9
 80048d0:	080048e7 	.word	0x080048e7
 80048d4:	08004905 	.word	0x08004905
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d8:	4b67      	ldr	r3, [pc, #412]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	4a66      	ldr	r2, [pc, #408]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048e4:	e00f      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	3308      	adds	r3, #8
 80048ec:	2102      	movs	r1, #2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 f902 	bl	8005af8 <RCCEx_PLL2_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048fa:	e004      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800490e:	4b5a      	ldr	r3, [pc, #360]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004912:	f023 0103 	bic.w	r1, r3, #3
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491c:	4a56      	ldr	r2, [pc, #344]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800491e:	430b      	orrs	r3, r1
 8004920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004938:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800493c:	2300      	movs	r3, #0
 800493e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004942:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004946:	460b      	mov	r3, r1
 8004948:	4313      	orrs	r3, r2
 800494a:	f000 809f 	beq.w	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800494e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a4a      	ldr	r2, [pc, #296]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004958:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800495a:	f7fe f857 	bl	8002a0c <HAL_GetTick>
 800495e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004962:	e00b      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fe f852 	bl	8002a0c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b64      	cmp	r3, #100	@ 0x64
 8004972:	d903      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800497a:	e005      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800497c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ed      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498c:	2b00      	cmp	r3, #0
 800498e:	d179      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004990:	4b39      	ldr	r3, [pc, #228]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004992:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800499c:	4053      	eors	r3, r2
 800499e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d015      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a6:	4b34      	ldr	r3, [pc, #208]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b2:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b6:	4a30      	ldr	r2, [pc, #192]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049be:	4b2e      	ldr	r3, [pc, #184]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049de:	d118      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fe f814 	bl	8002a0c <HAL_GetTick>
 80049e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049e8:	e00d      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ea:	f7fe f80f 	bl	8002a0c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80049f4:	1ad2      	subs	r2, r2, r3
 80049f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d903      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004a04:	e005      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a06:	4b1c      	ldr	r3, [pc, #112]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0eb      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d129      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a2a:	d10e      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004a2c:	4b12      	ldr	r3, [pc, #72]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a3c:	091a      	lsrs	r2, r3, #4
 8004a3e:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	4a0d      	ldr	r2, [pc, #52]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6113      	str	r3, [r2, #16]
 8004a48:	e005      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a54:	6113      	str	r3, [r2, #16]
 8004a56:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a58:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a66:	4a04      	ldr	r2, [pc, #16]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a6c:	e00e      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004a76:	e009      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004a78:	58024400 	.word	0x58024400
 8004a7c:	58024800 	.word	0x58024800
 8004a80:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f002 0301 	and.w	r3, r2, #1
 8004a98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004aa2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f000 8089 	beq.w	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ab4:	2b28      	cmp	r3, #40	@ 0x28
 8004ab6:	d86b      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004b99 	.word	0x08004b99
 8004ac4:	08004b91 	.word	0x08004b91
 8004ac8:	08004b91 	.word	0x08004b91
 8004acc:	08004b91 	.word	0x08004b91
 8004ad0:	08004b91 	.word	0x08004b91
 8004ad4:	08004b91 	.word	0x08004b91
 8004ad8:	08004b91 	.word	0x08004b91
 8004adc:	08004b91 	.word	0x08004b91
 8004ae0:	08004b65 	.word	0x08004b65
 8004ae4:	08004b91 	.word	0x08004b91
 8004ae8:	08004b91 	.word	0x08004b91
 8004aec:	08004b91 	.word	0x08004b91
 8004af0:	08004b91 	.word	0x08004b91
 8004af4:	08004b91 	.word	0x08004b91
 8004af8:	08004b91 	.word	0x08004b91
 8004afc:	08004b91 	.word	0x08004b91
 8004b00:	08004b7b 	.word	0x08004b7b
 8004b04:	08004b91 	.word	0x08004b91
 8004b08:	08004b91 	.word	0x08004b91
 8004b0c:	08004b91 	.word	0x08004b91
 8004b10:	08004b91 	.word	0x08004b91
 8004b14:	08004b91 	.word	0x08004b91
 8004b18:	08004b91 	.word	0x08004b91
 8004b1c:	08004b91 	.word	0x08004b91
 8004b20:	08004b99 	.word	0x08004b99
 8004b24:	08004b91 	.word	0x08004b91
 8004b28:	08004b91 	.word	0x08004b91
 8004b2c:	08004b91 	.word	0x08004b91
 8004b30:	08004b91 	.word	0x08004b91
 8004b34:	08004b91 	.word	0x08004b91
 8004b38:	08004b91 	.word	0x08004b91
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004b99 	.word	0x08004b99
 8004b44:	08004b91 	.word	0x08004b91
 8004b48:	08004b91 	.word	0x08004b91
 8004b4c:	08004b91 	.word	0x08004b91
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b91 	.word	0x08004b91
 8004b58:	08004b91 	.word	0x08004b91
 8004b5c:	08004b91 	.word	0x08004b91
 8004b60:	08004b99 	.word	0x08004b99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	3308      	adds	r3, #8
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 ffc3 	bl	8005af8 <RCCEx_PLL2_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b78:	e00f      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	3328      	adds	r3, #40	@ 0x28
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 f86a 	bl	8005c5c <RCCEx_PLL3_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b8e:	e004      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ba2:	4bbf      	ldr	r3, [pc, #764]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bb0:	4abb      	ldr	r2, [pc, #748]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bb6:	e003      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f002 0302 	and.w	r3, r2, #2
 8004bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004bd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	d041      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004be6:	2b05      	cmp	r3, #5
 8004be8:	d824      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004bea:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c3d 	.word	0x08004c3d
 8004bf4:	08004c09 	.word	0x08004c09
 8004bf8:	08004c1f 	.word	0x08004c1f
 8004bfc:	08004c3d 	.word	0x08004c3d
 8004c00:	08004c3d 	.word	0x08004c3d
 8004c04:	08004c3d 	.word	0x08004c3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	2101      	movs	r1, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 ff71 	bl	8005af8 <RCCEx_PLL2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c1c:	e00f      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c22:	3328      	adds	r3, #40	@ 0x28
 8004c24:	2101      	movs	r1, #1
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f818 	bl	8005c5c <RCCEx_PLL3_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c32:	e004      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c3a:	e000      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c46:	4b96      	ldr	r3, [pc, #600]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4a:	f023 0107 	bic.w	r1, r3, #7
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c54:	4a92      	ldr	r2, [pc, #584]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c5a:	e003      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f002 0304 	and.w	r3, r2, #4
 8004c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d044      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c8c:	2b05      	cmp	r3, #5
 8004c8e:	d825      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004c90:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ce5 	.word	0x08004ce5
 8004c9c:	08004cb1 	.word	0x08004cb1
 8004ca0:	08004cc7 	.word	0x08004cc7
 8004ca4:	08004ce5 	.word	0x08004ce5
 8004ca8:	08004ce5 	.word	0x08004ce5
 8004cac:	08004ce5 	.word	0x08004ce5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 ff1d 	bl	8005af8 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cc4:	e00f      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	3328      	adds	r3, #40	@ 0x28
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 ffc4 	bl	8005c5c <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cda:	e004      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cee:	4b6c      	ldr	r3, [pc, #432]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf2:	f023 0107 	bic.w	r1, r3, #7
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cfe:	4a68      	ldr	r2, [pc, #416]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d04:	e003      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f002 0320 	and.w	r3, r2, #32
 8004d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	d055      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d3a:	d033      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d40:	d82c      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d46:	d02f      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4c:	d826      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d52:	d02b      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004d54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d58:	d820      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d5e:	d012      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d64:	d81a      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d022      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d6e:	d115      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d74:	3308      	adds	r3, #8
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 febd 	bl	8005af8 <RCCEx_PLL2_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d84:	e015      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	3328      	adds	r3, #40	@ 0x28
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 ff64 	bl	8005c5c <RCCEx_PLL3_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004da2:	e006      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004da4:	bf00      	nop
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dba:	4b39      	ldr	r3, [pc, #228]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	4a35      	ldr	r2, [pc, #212]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6553      	str	r3, [r2, #84]	@ 0x54
 8004dd0:	e003      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dea:	2300      	movs	r3, #0
 8004dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004df0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4313      	orrs	r3, r2
 8004df8:	d058      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004e06:	d033      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004e08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004e0c:	d82c      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e12:	d02f      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e18:	d826      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e1e:	d02b      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004e20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e24:	d820      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e2a:	d012      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e30:	d81a      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d022      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3a:	d115      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	3308      	adds	r3, #8
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fe57 	bl	8005af8 <RCCEx_PLL2_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e50:	e015      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e56:	3328      	adds	r3, #40	@ 0x28
 8004e58:	2102      	movs	r1, #2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fefe 	bl	8005c5c <RCCEx_PLL3_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e66:	e00a      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e6e:	e006      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e70:	bf00      	nop
 8004e72:	e004      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e74:	bf00      	nop
 8004e76:	e002      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10e      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e86:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e96:	4a02      	ldr	r2, [pc, #8]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e9c:	e006      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004e9e:	bf00      	nop
 8004ea0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ec2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d055      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ed4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ed8:	d033      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004eda:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ede:	d82c      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee4:	d02f      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eea:	d826      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004eec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ef0:	d02b      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004ef2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ef6:	d820      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004efc:	d012      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004efe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f02:	d81a      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d022      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f0c:	d115      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	3308      	adds	r3, #8
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fdee 	bl	8005af8 <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f22:	e015      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f28:	3328      	adds	r3, #40	@ 0x28
 8004f2a:	2102      	movs	r1, #2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fe95 	bl	8005c5c <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f38:	e00a      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f42:	bf00      	nop
 8004f44:	e004      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10b      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f58:	4ba1      	ldr	r3, [pc, #644]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f68:	4a9d      	ldr	r2, [pc, #628]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f002 0308 	and.w	r3, r2, #8
 8004f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004f92:	460b      	mov	r3, r1
 8004f94:	4313      	orrs	r3, r2
 8004f96:	d01e      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004faa:	3328      	adds	r3, #40	@ 0x28
 8004fac:	2102      	movs	r1, #2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fe54 	bl	8005c5c <RCCEx_PLL3_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004fc0:	4b87      	ldr	r3, [pc, #540]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd0:	4a83      	ldr	r2, [pc, #524]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f002 0310 	and.w	r3, r2, #16
 8004fe2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004fec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	d01e      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005002:	d10c      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005008:	3328      	adds	r3, #40	@ 0x28
 800500a:	2102      	movs	r1, #2
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fe25 	bl	8005c5c <RCCEx_PLL3_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800501e:	4b70      	ldr	r3, [pc, #448]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005022:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800502e:	4a6c      	ldr	r2, [pc, #432]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800504a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d03e      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005058:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800505c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005060:	d022      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005062:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005066:	d81b      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d00b      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005072:	e015      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005078:	3308      	adds	r3, #8
 800507a:	2100      	movs	r1, #0
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fd3b 	bl	8005af8 <RCCEx_PLL2_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005088:	e00f      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800508a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508e:	3328      	adds	r3, #40	@ 0x28
 8005090:	2102      	movs	r1, #2
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fde2 	bl	8005c5c <RCCEx_PLL3_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800509e:	e004      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050a6:	e000      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80050a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050b2:	4b4b      	ldr	r3, [pc, #300]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050c2:	4a47      	ldr	r2, [pc, #284]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050c8:	e003      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80050de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050e0:	2300      	movs	r3, #0
 80050e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d03b      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050fa:	d01f      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80050fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005100:	d818      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005106:	d003      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005108:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800510c:	d007      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800510e:	e011      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005110:	4b33      	ldr	r3, [pc, #204]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005114:	4a32      	ldr	r2, [pc, #200]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800511a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800511c:	e00f      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005122:	3328      	adds	r3, #40	@ 0x28
 8005124:	2101      	movs	r1, #1
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fd98 	bl	8005c5c <RCCEx_PLL3_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800513c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005146:	4b26      	ldr	r3, [pc, #152]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005156:	4a22      	ldr	r2, [pc, #136]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005158:	430b      	orrs	r3, r1
 800515a:	6553      	str	r3, [r2, #84]	@ 0x54
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005172:	673b      	str	r3, [r7, #112]	@ 0x70
 8005174:	2300      	movs	r3, #0
 8005176:	677b      	str	r3, [r7, #116]	@ 0x74
 8005178:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800517c:	460b      	mov	r3, r1
 800517e:	4313      	orrs	r3, r2
 8005180:	d034      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005190:	d007      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005192:	e011      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005194:	4b12      	ldr	r3, [pc, #72]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	4a11      	ldr	r2, [pc, #68]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800519a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800519e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051a0:	e00e      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a6:	3308      	adds	r3, #8
 80051a8:	2102      	movs	r1, #2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fca4 	bl	8005af8 <RCCEx_PLL2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10d      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051c8:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d6:	4a02      	ldr	r2, [pc, #8]	@ (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051d8:	430b      	orrs	r3, r1
 80051da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051dc:	e006      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80051f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051fa:	2300      	movs	r3, #0
 80051fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005202:	460b      	mov	r3, r1
 8005204:	4313      	orrs	r3, r2
 8005206:	d00c      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520c:	3328      	adds	r3, #40	@ 0x28
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fd23 	bl	8005c5c <RCCEx_PLL3_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800522e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005230:	2300      	movs	r3, #0
 8005232:	667b      	str	r3, [r7, #100]	@ 0x64
 8005234:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d038      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800524a:	d018      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800524c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005250:	d811      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005256:	d014      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800525c:	d80b      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d011      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005266:	d106      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005268:	4bc3      	ldr	r3, [pc, #780]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	4ac2      	ldr	r2, [pc, #776]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800526e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005274:	e008      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800527c:	e004      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005290:	4bb9      	ldr	r3, [pc, #740]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005294:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a0:	4ab5      	ldr	r2, [pc, #724]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052a2:	430b      	orrs	r3, r1
 80052a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80052a6:	e003      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80052bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052be:	2300      	movs	r3, #0
 80052c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052cc:	4baa      	ldr	r3, [pc, #680]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80052d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052da:	4aa7      	ldr	r2, [pc, #668]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80052ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ee:	2300      	movs	r3, #0
 80052f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80052f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80052f6:	460b      	mov	r3, r1
 80052f8:	4313      	orrs	r3, r2
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80052fc:	4b9e      	ldr	r3, [pc, #632]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005308:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800530c:	4a9a      	ldr	r2, [pc, #616]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800530e:	430b      	orrs	r3, r1
 8005310:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005320:	2300      	movs	r3, #0
 8005322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005324:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005328:	460b      	mov	r3, r1
 800532a:	4313      	orrs	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800532e:	4b92      	ldr	r3, [pc, #584]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005332:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533c:	4a8e      	ldr	r2, [pc, #568]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800533e:	430b      	orrs	r3, r1
 8005340:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800534e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005350:	2300      	movs	r3, #0
 8005352:	647b      	str	r3, [r7, #68]	@ 0x44
 8005354:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005358:	460b      	mov	r3, r1
 800535a:	4313      	orrs	r3, r2
 800535c:	d00e      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800535e:	4b86      	ldr	r3, [pc, #536]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	4a85      	ldr	r2, [pc, #532]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005364:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005368:	6113      	str	r3, [r2, #16]
 800536a:	4b83      	ldr	r3, [pc, #524]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800536c:	6919      	ldr	r1, [r3, #16]
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005372:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005376:	4a80      	ldr	r2, [pc, #512]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005378:	430b      	orrs	r3, r1
 800537a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005388:	63bb      	str	r3, [r7, #56]	@ 0x38
 800538a:	2300      	movs	r3, #0
 800538c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800538e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005392:	460b      	mov	r3, r1
 8005394:	4313      	orrs	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005398:	4b77      	ldr	r3, [pc, #476]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800539a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	4a74      	ldr	r2, [pc, #464]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053a8:	430b      	orrs	r3, r1
 80053aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80053b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ba:	2300      	movs	r3, #0
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053d8:	4a67      	ldr	r2, [pc, #412]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053da:	430b      	orrs	r3, r1
 80053dc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	2100      	movs	r1, #0
 80053e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053f4:	460b      	mov	r3, r1
 80053f6:	4313      	orrs	r3, r2
 80053f8:	d011      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fe:	3308      	adds	r3, #8
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fb78 	bl	8005af8 <RCCEx_PLL2_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800540e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800541a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	2100      	movs	r1, #0
 8005428:	6239      	str	r1, [r7, #32]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005430:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	d011      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543e:	3308      	adds	r3, #8
 8005440:	2101      	movs	r1, #1
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fb58 	bl	8005af8 <RCCEx_PLL2_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800544e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	2100      	movs	r1, #0
 8005468:	61b9      	str	r1, [r7, #24]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005474:	460b      	mov	r3, r1
 8005476:	4313      	orrs	r3, r2
 8005478:	d011      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547e:	3308      	adds	r3, #8
 8005480:	2102      	movs	r1, #2
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fb38 	bl	8005af8 <RCCEx_PLL2_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800548e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	2100      	movs	r1, #0
 80054a8:	6139      	str	r1, [r7, #16]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054b4:	460b      	mov	r3, r1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	d011      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	3328      	adds	r3, #40	@ 0x28
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fbca 	bl	8005c5c <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80054ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	2100      	movs	r1, #0
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054f4:	460b      	mov	r3, r1
 80054f6:	4313      	orrs	r3, r2
 80054f8:	d011      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fe:	3328      	adds	r3, #40	@ 0x28
 8005500:	2101      	movs	r1, #1
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fbaa 	bl	8005c5c <RCCEx_PLL3_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800550e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	2100      	movs	r1, #0
 8005528:	6039      	str	r1, [r7, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005534:	460b      	mov	r3, r1
 8005536:	4313      	orrs	r3, r2
 8005538:	d011      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553e:	3328      	adds	r3, #40	@ 0x28
 8005540:	2102      	movs	r1, #2
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fb8a 	bl	8005c5c <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800554e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800555e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
}
 800556c:	4618      	mov	r0, r3
 800556e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005572:	46bd      	mov	sp, r7
 8005574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005578:	58024400 	.word	0x58024400

0800557c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005580:	f7fe fd96 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 8005584:	4602      	mov	r2, r0
 8005586:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	4904      	ldr	r1, [pc, #16]	@ (80055a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005592:	5ccb      	ldrb	r3, [r1, r3]
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	58024400 	.word	0x58024400
 80055a4:	0800d6b0 	.word	0x0800d6b0

080055a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	@ 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055b0:	4ba1      	ldr	r3, [pc, #644]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80055ba:	4b9f      	ldr	r3, [pc, #636]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055be:	0b1b      	lsrs	r3, r3, #12
 80055c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055c6:	4b9c      	ldr	r3, [pc, #624]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80055d2:	4b99      	ldr	r3, [pc, #612]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d6:	08db      	lsrs	r3, r3, #3
 80055d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8111 	beq.w	8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	f000 8083 	beq.w	8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b02      	cmp	r3, #2
 8005602:	f200 80a1 	bhi.w	8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d056      	beq.n	80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005612:	e099      	b.n	8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005614:	4b88      	ldr	r3, [pc, #544]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d02d      	beq.n	800567c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005620:	4b85      	ldr	r3, [pc, #532]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	08db      	lsrs	r3, r3, #3
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	4a84      	ldr	r2, [pc, #528]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564a:	4b7b      	ldr	r3, [pc, #492]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800564c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565a:	ed97 6a03 	vldr	s12, [r7, #12]
 800565e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800566e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005676:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800567a:	e087      	b.n	800578c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005686:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800568a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568e:	4b6a      	ldr	r3, [pc, #424]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569e:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056be:	e065      	b.n	800578c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d2:	4b59      	ldr	r3, [pc, #356]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005702:	e043      	b.n	800578c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800584c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005716:	4b48      	ldr	r3, [pc, #288]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005726:	ed97 6a03 	vldr	s12, [r7, #12]
 800572a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800572e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800573a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800573e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005746:	e021      	b.n	800578c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005752:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800575a:	4b37      	ldr	r3, [pc, #220]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800575c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576a:	ed97 6a03 	vldr	s12, [r7, #12]
 800576e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800577e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800578a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800578c:	4b2a      	ldr	r3, [pc, #168]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800578e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005790:	0a5b      	lsrs	r3, r3, #9
 8005792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b2:	ee17 2a90 	vmov	r2, s15
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80057ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	0c1b      	lsrs	r3, r3, #16
 80057c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e0:	ee17 2a90 	vmov	r2, s15
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80057e8:	4b13      	ldr	r3, [pc, #76]	@ (8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	0e1b      	lsrs	r3, r3, #24
 80057ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005802:	edd7 6a07 	vldr	s13, [r7, #28]
 8005806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800580e:	ee17 2a90 	vmov	r2, s15
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005816:	e008      	b.n	800582a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	609a      	str	r2, [r3, #8]
}
 800582a:	bf00      	nop
 800582c:	3724      	adds	r7, #36	@ 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	03d09000 	.word	0x03d09000
 8005840:	46000000 	.word	0x46000000
 8005844:	4c742400 	.word	0x4c742400
 8005848:	4a742400 	.word	0x4a742400
 800584c:	4bbebc20 	.word	0x4bbebc20

08005850 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	@ 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005858:	4ba1      	ldr	r3, [pc, #644]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800585a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005862:	4b9f      	ldr	r3, [pc, #636]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	0d1b      	lsrs	r3, r3, #20
 8005868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800586c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800586e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	0a1b      	lsrs	r3, r3, #8
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800587a:	4b99      	ldr	r3, [pc, #612]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	08db      	lsrs	r3, r3, #3
 8005880:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8111 	beq.w	8005ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	f000 8083 	beq.w	80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	f200 80a1 	bhi.w	80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d056      	beq.n	8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80058ba:	e099      	b.n	80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058bc:	4b88      	ldr	r3, [pc, #544]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d02d      	beq.n	8005924 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058c8:	4b85      	ldr	r3, [pc, #532]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	08db      	lsrs	r3, r3, #3
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	4a84      	ldr	r2, [pc, #528]	@ (8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
 80058d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	ee07 3a90 	vmov	s15, r3
 80058e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005902:	ed97 6a03 	vldr	s12, [r7, #12]
 8005906:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800590a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005922:	e087      	b.n	8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005aec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005936:	4b6a      	ldr	r3, [pc, #424]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005946:	ed97 6a03 	vldr	s12, [r7, #12]
 800594a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800594e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800595a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005966:	e065      	b.n	8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597a:	4b59      	ldr	r3, [pc, #356]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598a:	ed97 6a03 	vldr	s12, [r7, #12]
 800598e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800599e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059aa:	e043      	b.n	8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	4b48      	ldr	r3, [pc, #288]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80059d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ee:	e021      	b.n	8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a02:	4b37      	ldr	r3, [pc, #220]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005a34:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a38:	0a5b      	lsrs	r3, r3, #9
 8005a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a5a:	ee17 2a90 	vmov	r2, s15
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005a62:	4b1f      	ldr	r3, [pc, #124]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a6c:	ee07 3a90 	vmov	s15, r3
 8005a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a88:	ee17 2a90 	vmov	r2, s15
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a90:	4b13      	ldr	r3, [pc, #76]	@ (8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	0e1b      	lsrs	r3, r3, #24
 8005a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ab6:	ee17 2a90 	vmov	r2, s15
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005abe:	e008      	b.n	8005ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
}
 8005ad2:	bf00      	nop
 8005ad4:	3724      	adds	r7, #36	@ 0x24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	03d09000 	.word	0x03d09000
 8005ae8:	46000000 	.word	0x46000000
 8005aec:	4c742400 	.word	0x4c742400
 8005af0:	4a742400 	.word	0x4a742400
 8005af4:	4bbebc20 	.word	0x4bbebc20

08005af8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b06:	4b53      	ldr	r3, [pc, #332]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d101      	bne.n	8005b16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e099      	b.n	8005c4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b16:	4b4f      	ldr	r3, [pc, #316]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a4e      	ldr	r2, [pc, #312]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005b1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b22:	f7fc ff73 	bl	8002a0c <HAL_GetTick>
 8005b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b2a:	f7fc ff6f 	bl	8002a0c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e086      	b.n	8005c4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b3c:	4b45      	ldr	r3, [pc, #276]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b48:	4b42      	ldr	r3, [pc, #264]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	031b      	lsls	r3, r3, #12
 8005b56:	493f      	ldr	r1, [pc, #252]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	025b      	lsls	r3, r3, #9
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	061b      	lsls	r3, r3, #24
 8005b88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b8c:	4931      	ldr	r1, [pc, #196]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b92:	4b30      	ldr	r3, [pc, #192]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	492d      	ldr	r1, [pc, #180]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba8:	f023 0220 	bic.w	r2, r3, #32
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	4928      	ldr	r1, [pc, #160]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005bb6:	4b27      	ldr	r3, [pc, #156]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	4a26      	ldr	r2, [pc, #152]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bbc:	f023 0310 	bic.w	r3, r3, #16
 8005bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005bc2:	4b24      	ldr	r3, [pc, #144]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc6:	4b24      	ldr	r3, [pc, #144]	@ (8005c58 <RCCEx_PLL2_Config+0x160>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	69d2      	ldr	r2, [r2, #28]
 8005bce:	00d2      	lsls	r2, r2, #3
 8005bd0:	4920      	ldr	r1, [pc, #128]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bda:	4a1e      	ldr	r2, [pc, #120]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bdc:	f043 0310 	orr.w	r3, r3, #16
 8005be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d106      	bne.n	8005bf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005be8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	4a19      	ldr	r2, [pc, #100]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bf4:	e00f      	b.n	8005c16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005bfc:	4b15      	ldr	r3, [pc, #84]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	4a14      	ldr	r2, [pc, #80]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c08:	e005      	b.n	8005c16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c0a:	4b12      	ldr	r3, [pc, #72]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	4a11      	ldr	r2, [pc, #68]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005c10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c16:	4b0f      	ldr	r3, [pc, #60]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005c1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c22:	f7fc fef3 	bl	8002a0c <HAL_GetTick>
 8005c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c28:	e008      	b.n	8005c3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c2a:	f7fc feef 	bl	8002a0c <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e006      	b.n	8005c4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <RCCEx_PLL2_Config+0x15c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	58024400 	.word	0x58024400
 8005c58:	ffff0007 	.word	0xffff0007

08005c5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c6a:	4b53      	ldr	r3, [pc, #332]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d101      	bne.n	8005c7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e099      	b.n	8005dae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c7a:	4b4f      	ldr	r3, [pc, #316]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a4e      	ldr	r2, [pc, #312]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005c80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c86:	f7fc fec1 	bl	8002a0c <HAL_GetTick>
 8005c8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c8c:	e008      	b.n	8005ca0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c8e:	f7fc febd 	bl	8002a0c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e086      	b.n	8005dae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ca0:	4b45      	ldr	r3, [pc, #276]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005cac:	4b42      	ldr	r3, [pc, #264]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	051b      	lsls	r3, r3, #20
 8005cba:	493f      	ldr	r1, [pc, #252]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	025b      	lsls	r3, r3, #9
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	061b      	lsls	r3, r3, #24
 8005cec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cf0:	4931      	ldr	r1, [pc, #196]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cf6:	4b30      	ldr	r3, [pc, #192]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	492d      	ldr	r1, [pc, #180]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d08:	4b2b      	ldr	r3, [pc, #172]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	4928      	ldr	r1, [pc, #160]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d1a:	4b27      	ldr	r3, [pc, #156]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	4a26      	ldr	r2, [pc, #152]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d26:	4b24      	ldr	r3, [pc, #144]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d2a:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <RCCEx_PLL3_Config+0x160>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	69d2      	ldr	r2, [r2, #28]
 8005d32:	00d2      	lsls	r2, r2, #3
 8005d34:	4920      	ldr	r1, [pc, #128]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d50:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d58:	e00f      	b.n	8005d7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d106      	bne.n	8005d6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d60:	4b15      	ldr	r3, [pc, #84]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4a14      	ldr	r2, [pc, #80]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d6c:	e005      	b.n	8005d7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d6e:	4b12      	ldr	r3, [pc, #72]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	4a11      	ldr	r2, [pc, #68]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d86:	f7fc fe41 	bl	8002a0c <HAL_GetTick>
 8005d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d8c:	e008      	b.n	8005da0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d8e:	f7fc fe3d 	bl	8002a0c <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e006      	b.n	8005dae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005da0:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <RCCEx_PLL3_Config+0x15c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	ffff0007 	.word	0xffff0007

08005dc0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e10f      	b.n	8005ff2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a87      	ldr	r2, [pc, #540]	@ (8005ffc <HAL_SPI_Init+0x23c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00f      	beq.n	8005e02 <HAL_SPI_Init+0x42>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a86      	ldr	r2, [pc, #536]	@ (8006000 <HAL_SPI_Init+0x240>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00a      	beq.n	8005e02 <HAL_SPI_Init+0x42>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a84      	ldr	r2, [pc, #528]	@ (8006004 <HAL_SPI_Init+0x244>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d005      	beq.n	8005e02 <HAL_SPI_Init+0x42>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d901      	bls.n	8005e02 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0f7      	b.n	8005ff2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fe2e 	bl	8006a64 <SPI_GetPacketSize>
 8005e08:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8005ffc <HAL_SPI_Init+0x23c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00c      	beq.n	8005e2e <HAL_SPI_Init+0x6e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a79      	ldr	r2, [pc, #484]	@ (8006000 <HAL_SPI_Init+0x240>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d007      	beq.n	8005e2e <HAL_SPI_Init+0x6e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a78      	ldr	r2, [pc, #480]	@ (8006004 <HAL_SPI_Init+0x244>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d002      	beq.n	8005e2e <HAL_SPI_Init+0x6e>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d811      	bhi.n	8005e52 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005e32:	4a72      	ldr	r2, [pc, #456]	@ (8005ffc <HAL_SPI_Init+0x23c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d009      	beq.n	8005e4c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a70      	ldr	r2, [pc, #448]	@ (8006000 <HAL_SPI_Init+0x240>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d004      	beq.n	8005e4c <HAL_SPI_Init+0x8c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a6f      	ldr	r2, [pc, #444]	@ (8006004 <HAL_SPI_Init+0x244>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d104      	bne.n	8005e56 <HAL_SPI_Init+0x96>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d901      	bls.n	8005e56 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e0cd      	b.n	8005ff2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fc fa22 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0201 	bic.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005e92:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e9c:	d119      	bne.n	8005ed2 <HAL_SPI_Init+0x112>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ea6:	d103      	bne.n	8005eb0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ec0:	d107      	bne.n	8005ed2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00f      	beq.n	8005efe <HAL_SPI_Init+0x13e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b06      	cmp	r3, #6
 8005ee4:	d90b      	bls.n	8005efe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e007      	b.n	8005f0e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	431a      	orrs	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	ea42 0103 	orr.w	r1, r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6e:	ea42 0103 	orr.w	r1, r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d113      	bne.n	8005fae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40013000 	.word	0x40013000
 8006000:	40003800 	.word	0x40003800
 8006004:	40003c00 	.word	0x40003c00

08006008 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	4613      	mov	r3, r2
 8006016:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3320      	adds	r3, #32
 800601e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006020:	f7fc fcf4 	bl	8002a0c <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b01      	cmp	r3, #1
 8006030:	d001      	beq.n	8006036 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006032:	2302      	movs	r3, #2
 8006034:	e1d1      	b.n	80063da <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_SPI_Transmit+0x3a>
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e1c9      	b.n	80063da <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_SPI_Transmit+0x4c>
 8006050:	2302      	movs	r3, #2
 8006052:	e1c2      	b.n	80063da <HAL_SPI_Transmit+0x3d2>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2203      	movs	r2, #3
 8006060:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80060ac:	d108      	bne.n	80060c0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e009      	b.n	80060d4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80060d2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	4b96      	ldr	r3, [pc, #600]	@ (8006334 <HAL_SPI_Transmit+0x32c>)
 80060dc:	4013      	ands	r3, r2
 80060de:	88f9      	ldrh	r1, [r7, #6]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	6812      	ldr	r2, [r2, #0]
 80060e4:	430b      	orrs	r3, r1
 80060e6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006100:	d107      	bne.n	8006112 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006110:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d947      	bls.n	80061aa <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800611a:	e03f      	b.n	800619c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d114      	bne.n	8006154 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800613a:	1d1a      	adds	r2, r3, #4
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006152:	e023      	b.n	800619c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006154:	f7fc fc5a 	bl	8002a0c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d803      	bhi.n	800616c <HAL_SPI_Transmit+0x164>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	d102      	bne.n	8006172 <HAL_SPI_Transmit+0x16a>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d114      	bne.n	800619c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fba8 	bl	80068c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800617e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e11e      	b.n	80063da <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1b9      	bne.n	800611c <HAL_SPI_Transmit+0x114>
 80061a8:	e0f1      	b.n	800638e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b07      	cmp	r3, #7
 80061b0:	f240 80e6 	bls.w	8006380 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80061b4:	e05d      	b.n	8006272 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d132      	bne.n	800622a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d918      	bls.n	8006202 <HAL_SPI_Transmit+0x1fa>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d014      	beq.n	8006202 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b02      	subs	r3, #2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006200:	e037      	b.n	8006272 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006228:	e023      	b.n	8006272 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800622a:	f7fc fbef 	bl	8002a0c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d803      	bhi.n	8006242 <HAL_SPI_Transmit+0x23a>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d102      	bne.n	8006248 <HAL_SPI_Transmit+0x240>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d114      	bne.n	8006272 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fb3d 	bl	80068c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006254:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e0b3      	b.n	80063da <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d19b      	bne.n	80061b6 <HAL_SPI_Transmit+0x1ae>
 800627e:	e086      	b.n	800638e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d154      	bne.n	8006338 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b03      	cmp	r3, #3
 8006298:	d918      	bls.n	80062cc <HAL_SPI_Transmit+0x2c4>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629e:	2b40      	cmp	r3, #64	@ 0x40
 80062a0:	d914      	bls.n	80062cc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b2:	1d1a      	adds	r2, r3, #4
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b04      	subs	r3, #4
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80062ca:	e059      	b.n	8006380 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d917      	bls.n	8006308 <HAL_SPI_Transmit+0x300>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d013      	beq.n	8006308 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e4:	881a      	ldrh	r2, [r3, #0]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ee:	1c9a      	adds	r2, r3, #2
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b02      	subs	r3, #2
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006306:	e03b      	b.n	8006380 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3320      	adds	r3, #32
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006332:	e025      	b.n	8006380 <HAL_SPI_Transmit+0x378>
 8006334:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006338:	f7fc fb68 	bl	8002a0c <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d803      	bhi.n	8006350 <HAL_SPI_Transmit+0x348>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d102      	bne.n	8006356 <HAL_SPI_Transmit+0x34e>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d114      	bne.n	8006380 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fab6 	bl	80068c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006362:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e02c      	b.n	80063da <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	f47f af79 	bne.w	8006280 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2200      	movs	r2, #0
 8006396:	2108      	movs	r1, #8
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fb35 	bl	8006a08 <SPI_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fa87 	bl	80068c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
  }
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop

080063e4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3301      	adds	r3, #1
 80063fe:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3330      	adds	r3, #48	@ 0x30
 8006406:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006408:	f7fc fb00 	bl	8002a0c <HAL_GetTick>
 800640c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	d001      	beq.n	800641e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
 800641c:	e250      	b.n	80068c0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_SPI_Receive+0x46>
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e248      	b.n	80068c0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_SPI_Receive+0x58>
 8006438:	2302      	movs	r3, #2
 800643a:	e241      	b.n	80068c0 <HAL_SPI_Receive+0x4dc>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2204      	movs	r2, #4
 8006448:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	88fa      	ldrh	r2, [r7, #6]
 800645e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	88fa      	ldrh	r2, [r7, #6]
 8006466:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006494:	d108      	bne.n	80064a8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	e009      	b.n	80064bc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80064ba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	4b95      	ldr	r3, [pc, #596]	@ (8006718 <HAL_SPI_Receive+0x334>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	88f9      	ldrh	r1, [r7, #6]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	430b      	orrs	r3, r1
 80064ce:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064e8:	d107      	bne.n	80064fa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d96c      	bls.n	80065dc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006502:	e064      	b.n	80065ce <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b01      	cmp	r3, #1
 8006518:	d114      	bne.n	8006544 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006522:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006524:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006542:	e044      	b.n	80065ce <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800654a:	b29b      	uxth	r3, r3
 800654c:	8bfa      	ldrh	r2, [r7, #30]
 800654e:	429a      	cmp	r2, r3
 8006550:	d919      	bls.n	8006586 <HAL_SPI_Receive+0x1a2>
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d014      	beq.n	8006586 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006564:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006566:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800656c:	1d1a      	adds	r2, r3, #4
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006584:	e023      	b.n	80065ce <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006586:	f7fc fa41 	bl	8002a0c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d803      	bhi.n	800659e <HAL_SPI_Receive+0x1ba>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d102      	bne.n	80065a4 <HAL_SPI_Receive+0x1c0>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d114      	bne.n	80065ce <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f98f 	bl	80068c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e178      	b.n	80068c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d194      	bne.n	8006504 <HAL_SPI_Receive+0x120>
 80065da:	e15e      	b.n	800689a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	2b07      	cmp	r3, #7
 80065e2:	f240 8153 	bls.w	800688c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80065e6:	e08f      	b.n	8006708 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d114      	bne.n	8006628 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	8812      	ldrh	r2, [r2, #0]
 8006606:	b292      	uxth	r2, r2
 8006608:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800660e:	1c9a      	adds	r2, r3, #2
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006626:	e06f      	b.n	8006708 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800662e:	b29b      	uxth	r3, r3
 8006630:	8bfa      	ldrh	r2, [r7, #30]
 8006632:	429a      	cmp	r2, r3
 8006634:	d924      	bls.n	8006680 <HAL_SPI_Receive+0x29c>
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01f      	beq.n	8006680 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	8812      	ldrh	r2, [r2, #0]
 8006648:	b292      	uxth	r2, r2
 800664a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006650:	1c9a      	adds	r2, r3, #2
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	8812      	ldrh	r2, [r2, #0]
 800665e:	b292      	uxth	r2, r2
 8006660:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006666:	1c9a      	adds	r2, r3, #2
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b02      	subs	r3, #2
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800667e:	e043      	b.n	8006708 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006686:	b29b      	uxth	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d119      	bne.n	80066c0 <HAL_SPI_Receive+0x2dc>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d014      	beq.n	80066c0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	8812      	ldrh	r2, [r2, #0]
 800669e:	b292      	uxth	r2, r2
 80066a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80066be:	e023      	b.n	8006708 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066c0:	f7fc f9a4 	bl	8002a0c <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d803      	bhi.n	80066d8 <HAL_SPI_Receive+0x2f4>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d102      	bne.n	80066de <HAL_SPI_Receive+0x2fa>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d114      	bne.n	8006708 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f8f2 	bl	80068c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e0db      	b.n	80068c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	f47f af69 	bne.w	80065e8 <HAL_SPI_Receive+0x204>
 8006716:	e0c0      	b.n	800689a <HAL_SPI_Receive+0x4b6>
 8006718:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d117      	bne.n	8006762 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006760:	e094      	b.n	800688c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006768:	b29b      	uxth	r3, r3
 800676a:	8bfa      	ldrh	r2, [r7, #30]
 800676c:	429a      	cmp	r2, r3
 800676e:	d946      	bls.n	80067fe <HAL_SPI_Receive+0x41a>
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d041      	beq.n	80067fe <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006786:	7812      	ldrb	r2, [r2, #0]
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067be:	7812      	ldrb	r2, [r2, #0]
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b04      	subs	r3, #4
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80067fc:	e046      	b.n	800688c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b03      	cmp	r3, #3
 8006808:	d81c      	bhi.n	8006844 <HAL_SPI_Receive+0x460>
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006842:	e023      	b.n	800688c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006844:	f7fc f8e2 	bl	8002a0c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	429a      	cmp	r2, r3
 8006852:	d803      	bhi.n	800685c <HAL_SPI_Receive+0x478>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d102      	bne.n	8006862 <HAL_SPI_Receive+0x47e>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d114      	bne.n	800688c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f830 	bl	80068c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800686e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e019      	b.n	80068c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	f47f af41 	bne.w	800671c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f814 	bl	80068c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80068be:	2300      	movs	r3, #0
  }
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0208 	orr.w	r2, r2, #8
 80068e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0210 	orr.w	r2, r2, #16
 80068f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6919      	ldr	r1, [r3, #16]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4b3c      	ldr	r3, [pc, #240]	@ (8006a04 <SPI_CloseTransfer+0x13c>)
 8006914:	400b      	ands	r3, r1
 8006916:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006926:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b04      	cmp	r3, #4
 8006932:	d014      	beq.n	800695e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00f      	beq.n	800695e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006944:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f042 0220 	orr.w	r2, r2, #32
 800695c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b03      	cmp	r3, #3
 8006968:	d014      	beq.n	8006994 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00f      	beq.n	8006994 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800697a:	f043 0204 	orr.w	r2, r3, #4
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006992:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00f      	beq.n	80069be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069a4:	f043 0201 	orr.w	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00f      	beq.n	80069e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ce:	f043 0208 	orr.w	r2, r3, #8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	fffffc90 	.word	0xfffffc90

08006a08 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a18:	e010      	b.n	8006a3c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1a:	f7fb fff7 	bl	8002a0c <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d803      	bhi.n	8006a32 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d102      	bne.n	8006a38 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e00f      	b.n	8006a5c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695a      	ldr	r2, [r3, #20]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4013      	ands	r3, r2
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2301      	moveq	r3, #1
 8006a4e:	2300      	movne	r3, #0
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d0df      	beq.n	8006a1a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	3301      	adds	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	3307      	adds	r3, #7
 8006a82:	08db      	lsrs	r3, r3, #3
 8006a84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e049      	b.n	8006b40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d106      	bne.n	8006ac6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fb fcf9 	bl	80024b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f000 fad5 	bl	8007088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d001      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e054      	b.n	8006c0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a26      	ldr	r2, [pc, #152]	@ (8006c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d022      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x80>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8a:	d01d      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x80>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a22      	ldr	r2, [pc, #136]	@ (8006c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d018      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x80>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a21      	ldr	r2, [pc, #132]	@ (8006c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d013      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x80>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00e      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x80>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a1e      	ldr	r2, [pc, #120]	@ (8006c28 <HAL_TIM_Base_Start_IT+0xe0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d009      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x80>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c2c <HAL_TIM_Base_Start_IT+0xe4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x80>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c30 <HAL_TIM_Base_Start_IT+0xe8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d115      	bne.n	8006bf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	4b19      	ldr	r3, [pc, #100]	@ (8006c34 <HAL_TIM_Base_Start_IT+0xec>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b06      	cmp	r3, #6
 8006bd8:	d015      	beq.n	8006c06 <HAL_TIM_Base_Start_IT+0xbe>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006be0:	d011      	beq.n	8006c06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf2:	e008      	b.n	8006c06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e000      	b.n	8006c08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40000400 	.word	0x40000400
 8006c20:	40000800 	.word	0x40000800
 8006c24:	40000c00 	.word	0x40000c00
 8006c28:	40010400 	.word	0x40010400
 8006c2c:	40001800 	.word	0x40001800
 8006c30:	40014000 	.word	0x40014000
 8006c34:	00010007 	.word	0x00010007

08006c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d020      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01b      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0202 	mvn.w	r2, #2
 8006c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9e2 	bl	800704c <HAL_TIM_IC_CaptureCallback>
 8006c88:	e005      	b.n	8006c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9d4 	bl	8007038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f9e5 	bl	8007060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d020      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01b      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0204 	mvn.w	r2, #4
 8006cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9bc 	bl	800704c <HAL_TIM_IC_CaptureCallback>
 8006cd4:	e005      	b.n	8006ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9ae 	bl	8007038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f9bf 	bl	8007060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d020      	beq.n	8006d34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01b      	beq.n	8006d34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0208 	mvn.w	r2, #8
 8006d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f996 	bl	800704c <HAL_TIM_IC_CaptureCallback>
 8006d20:	e005      	b.n	8006d2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f988 	bl	8007038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f999 	bl	8007060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d020      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0210 	mvn.w	r2, #16
 8006d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2208      	movs	r2, #8
 8006d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f970 	bl	800704c <HAL_TIM_IC_CaptureCallback>
 8006d6c:	e005      	b.n	8006d7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f962 	bl	8007038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f973 	bl	8007060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00c      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0201 	mvn.w	r2, #1
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fa ff36 	bl	8001c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00c      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d007      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb31 	bl	8007434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb29 	bl	8007448 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00c      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f92d 	bl	8007074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00c      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d007      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f06f 0220 	mvn.w	r2, #32
 8006e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 faf1 	bl	8007420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIM_ConfigClockSource+0x1c>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0dc      	b.n	800701e <HAL_TIM_ConfigClockSource+0x1d6>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007028 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a64      	ldr	r2, [pc, #400]	@ (800702c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	f000 80a9 	beq.w	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ea0:	4a62      	ldr	r2, [pc, #392]	@ (800702c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	f200 80ae 	bhi.w	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ea8:	4a61      	ldr	r2, [pc, #388]	@ (8007030 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	f000 80a1 	beq.w	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006eb0:	4a5f      	ldr	r2, [pc, #380]	@ (8007030 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	f200 80a6 	bhi.w	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006eb8:	4a5e      	ldr	r2, [pc, #376]	@ (8007034 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	f000 8099 	beq.w	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8007034 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	f200 809e 	bhi.w	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ec8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ecc:	f000 8091 	beq.w	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ed0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ed4:	f200 8096 	bhi.w	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ed8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006edc:	f000 8089 	beq.w	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ee4:	f200 808e 	bhi.w	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eec:	d03e      	beq.n	8006f6c <HAL_TIM_ConfigClockSource+0x124>
 8006eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef2:	f200 8087 	bhi.w	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006efa:	f000 8086 	beq.w	800700a <HAL_TIM_ConfigClockSource+0x1c2>
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f02:	d87f      	bhi.n	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f04:	2b70      	cmp	r3, #112	@ 0x70
 8006f06:	d01a      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0xf6>
 8006f08:	2b70      	cmp	r3, #112	@ 0x70
 8006f0a:	d87b      	bhi.n	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f0c:	2b60      	cmp	r3, #96	@ 0x60
 8006f0e:	d050      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x16a>
 8006f10:	2b60      	cmp	r3, #96	@ 0x60
 8006f12:	d877      	bhi.n	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f14:	2b50      	cmp	r3, #80	@ 0x50
 8006f16:	d03c      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0x14a>
 8006f18:	2b50      	cmp	r3, #80	@ 0x50
 8006f1a:	d873      	bhi.n	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f1c:	2b40      	cmp	r3, #64	@ 0x40
 8006f1e:	d058      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0x18a>
 8006f20:	2b40      	cmp	r3, #64	@ 0x40
 8006f22:	d86f      	bhi.n	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f24:	2b30      	cmp	r3, #48	@ 0x30
 8006f26:	d064      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f28:	2b30      	cmp	r3, #48	@ 0x30
 8006f2a:	d86b      	bhi.n	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d060      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d867      	bhi.n	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d05c      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f38:	2b10      	cmp	r3, #16
 8006f3a:	d05a      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f3c:	e062      	b.n	8007004 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f4e:	f000 f9b9 	bl	80072c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	609a      	str	r2, [r3, #8]
      break;
 8006f6a:	e04f      	b.n	800700c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f7c:	f000 f9a2 	bl	80072c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f8e:	609a      	str	r2, [r3, #8]
      break;
 8006f90:	e03c      	b.n	800700c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f000 f912 	bl	80071c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2150      	movs	r1, #80	@ 0x50
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f96c 	bl	8007288 <TIM_ITRx_SetConfig>
      break;
 8006fb0:	e02c      	b.n	800700c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f000 f931 	bl	8007226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2160      	movs	r1, #96	@ 0x60
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 f95c 	bl	8007288 <TIM_ITRx_SetConfig>
      break;
 8006fd0:	e01c      	b.n	800700c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f000 f8f2 	bl	80071c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2140      	movs	r1, #64	@ 0x40
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f94c 	bl	8007288 <TIM_ITRx_SetConfig>
      break;
 8006ff0:	e00c      	b.n	800700c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	f000 f943 	bl	8007288 <TIM_ITRx_SetConfig>
      break;
 8007002:	e003      	b.n	800700c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
      break;
 8007008:	e000      	b.n	800700c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800700a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	ffceff88 	.word	0xffceff88
 800702c:	00100040 	.word	0x00100040
 8007030:	00100030 	.word	0x00100030
 8007034:	00100020 	.word	0x00100020

08007038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a43      	ldr	r2, [pc, #268]	@ (80071a8 <TIM_Base_SetConfig+0x120>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d013      	beq.n	80070c8 <TIM_Base_SetConfig+0x40>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a6:	d00f      	beq.n	80070c8 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a40      	ldr	r2, [pc, #256]	@ (80071ac <TIM_Base_SetConfig+0x124>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00b      	beq.n	80070c8 <TIM_Base_SetConfig+0x40>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a3f      	ldr	r2, [pc, #252]	@ (80071b0 <TIM_Base_SetConfig+0x128>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d007      	beq.n	80070c8 <TIM_Base_SetConfig+0x40>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a3e      	ldr	r2, [pc, #248]	@ (80071b4 <TIM_Base_SetConfig+0x12c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d003      	beq.n	80070c8 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a3d      	ldr	r2, [pc, #244]	@ (80071b8 <TIM_Base_SetConfig+0x130>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d108      	bne.n	80070da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a32      	ldr	r2, [pc, #200]	@ (80071a8 <TIM_Base_SetConfig+0x120>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01f      	beq.n	8007122 <TIM_Base_SetConfig+0x9a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e8:	d01b      	beq.n	8007122 <TIM_Base_SetConfig+0x9a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a2f      	ldr	r2, [pc, #188]	@ (80071ac <TIM_Base_SetConfig+0x124>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d017      	beq.n	8007122 <TIM_Base_SetConfig+0x9a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a2e      	ldr	r2, [pc, #184]	@ (80071b0 <TIM_Base_SetConfig+0x128>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <TIM_Base_SetConfig+0x9a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2d      	ldr	r2, [pc, #180]	@ (80071b4 <TIM_Base_SetConfig+0x12c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00f      	beq.n	8007122 <TIM_Base_SetConfig+0x9a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2c      	ldr	r2, [pc, #176]	@ (80071b8 <TIM_Base_SetConfig+0x130>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00b      	beq.n	8007122 <TIM_Base_SetConfig+0x9a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2b      	ldr	r2, [pc, #172]	@ (80071bc <TIM_Base_SetConfig+0x134>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d007      	beq.n	8007122 <TIM_Base_SetConfig+0x9a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2a      	ldr	r2, [pc, #168]	@ (80071c0 <TIM_Base_SetConfig+0x138>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d003      	beq.n	8007122 <TIM_Base_SetConfig+0x9a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a29      	ldr	r2, [pc, #164]	@ (80071c4 <TIM_Base_SetConfig+0x13c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d108      	bne.n	8007134 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a14      	ldr	r2, [pc, #80]	@ (80071a8 <TIM_Base_SetConfig+0x120>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00f      	beq.n	800717a <TIM_Base_SetConfig+0xf2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a16      	ldr	r2, [pc, #88]	@ (80071b8 <TIM_Base_SetConfig+0x130>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00b      	beq.n	800717a <TIM_Base_SetConfig+0xf2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a15      	ldr	r2, [pc, #84]	@ (80071bc <TIM_Base_SetConfig+0x134>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d007      	beq.n	800717a <TIM_Base_SetConfig+0xf2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a14      	ldr	r2, [pc, #80]	@ (80071c0 <TIM_Base_SetConfig+0x138>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <TIM_Base_SetConfig+0xf2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a13      	ldr	r2, [pc, #76]	@ (80071c4 <TIM_Base_SetConfig+0x13c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d103      	bne.n	8007182 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	691a      	ldr	r2, [r3, #16]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f043 0204 	orr.w	r2, r3, #4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]
}
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40010400 	.word	0x40010400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400
 80071c4:	40014800 	.word	0x40014800

080071c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0201 	bic.w	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 030a 	bic.w	r3, r3, #10
 8007204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007226:	b480      	push	{r7}
 8007228:	b087      	sub	sp, #28
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f023 0210 	bic.w	r2, r3, #16
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	031b      	lsls	r3, r3, #12
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4b09      	ldr	r3, [pc, #36]	@ (80072c0 <TIM_ITRx_SetConfig+0x38>)
 800729c:	4013      	ands	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f043 0307 	orr.w	r3, r3, #7
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	609a      	str	r2, [r3, #8]
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	ffcfff8f 	.word	0xffcfff8f

080072c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	021a      	lsls	r2, r3, #8
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	609a      	str	r2, [r3, #8]
}
 80072f8:	bf00      	nop
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007314:	2b01      	cmp	r3, #1
 8007316:	d101      	bne.n	800731c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007318:	2302      	movs	r3, #2
 800731a:	e06d      	b.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a30      	ldr	r2, [pc, #192]	@ (8007404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a2f      	ldr	r2, [pc, #188]	@ (8007408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d108      	bne.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a20      	ldr	r2, [pc, #128]	@ (8007404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d022      	beq.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800738e:	d01d      	beq.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1d      	ldr	r2, [pc, #116]	@ (800740c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d018      	beq.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1c      	ldr	r2, [pc, #112]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d013      	beq.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d00e      	beq.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a15      	ldr	r2, [pc, #84]	@ (8007408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d009      	beq.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a16      	ldr	r2, [pc, #88]	@ (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d004      	beq.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a15      	ldr	r2, [pc, #84]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10c      	bne.n	80073e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	40010000 	.word	0x40010000
 8007408:	40010400 	.word	0x40010400
 800740c:	40000400 	.word	0x40000400
 8007410:	40000800 	.word	0x40000800
 8007414:	40000c00 	.word	0x40000c00
 8007418:	40001800 	.word	0x40001800
 800741c:	40014000 	.word	0x40014000

08007420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e042      	b.n	80074f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fb f83f 	bl	8002504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2224      	movs	r2, #36	@ 0x24
 800748a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0201 	bic.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fd90 	bl	8007fcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f825 	bl	80074fc <UART_SetConfig>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e01b      	b.n	80074f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fe0f 	bl	8008110 <UART_CheckIdleState>
 80074f2:	4603      	mov	r3, r0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007500:	b092      	sub	sp, #72	@ 0x48
 8007502:	af00      	add	r7, sp, #0
 8007504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	431a      	orrs	r2, r3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	431a      	orrs	r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	4313      	orrs	r3, r2
 8007522:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4bbe      	ldr	r3, [pc, #760]	@ (8007824 <UART_SetConfig+0x328>)
 800752c:	4013      	ands	r3, r2
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007534:	430b      	orrs	r3, r1
 8007536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4ab3      	ldr	r2, [pc, #716]	@ (8007828 <UART_SetConfig+0x32c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007564:	4313      	orrs	r3, r2
 8007566:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	4baf      	ldr	r3, [pc, #700]	@ (800782c <UART_SetConfig+0x330>)
 8007570:	4013      	ands	r3, r2
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007578:	430b      	orrs	r3, r1
 800757a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	f023 010f 	bic.w	r1, r3, #15
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4aa6      	ldr	r2, [pc, #664]	@ (8007830 <UART_SetConfig+0x334>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d177      	bne.n	800768c <UART_SetConfig+0x190>
 800759c:	4ba5      	ldr	r3, [pc, #660]	@ (8007834 <UART_SetConfig+0x338>)
 800759e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075a4:	2b28      	cmp	r3, #40	@ 0x28
 80075a6:	d86d      	bhi.n	8007684 <UART_SetConfig+0x188>
 80075a8:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <UART_SetConfig+0xb4>)
 80075aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	08007655 	.word	0x08007655
 80075b4:	08007685 	.word	0x08007685
 80075b8:	08007685 	.word	0x08007685
 80075bc:	08007685 	.word	0x08007685
 80075c0:	08007685 	.word	0x08007685
 80075c4:	08007685 	.word	0x08007685
 80075c8:	08007685 	.word	0x08007685
 80075cc:	08007685 	.word	0x08007685
 80075d0:	0800765d 	.word	0x0800765d
 80075d4:	08007685 	.word	0x08007685
 80075d8:	08007685 	.word	0x08007685
 80075dc:	08007685 	.word	0x08007685
 80075e0:	08007685 	.word	0x08007685
 80075e4:	08007685 	.word	0x08007685
 80075e8:	08007685 	.word	0x08007685
 80075ec:	08007685 	.word	0x08007685
 80075f0:	08007665 	.word	0x08007665
 80075f4:	08007685 	.word	0x08007685
 80075f8:	08007685 	.word	0x08007685
 80075fc:	08007685 	.word	0x08007685
 8007600:	08007685 	.word	0x08007685
 8007604:	08007685 	.word	0x08007685
 8007608:	08007685 	.word	0x08007685
 800760c:	08007685 	.word	0x08007685
 8007610:	0800766d 	.word	0x0800766d
 8007614:	08007685 	.word	0x08007685
 8007618:	08007685 	.word	0x08007685
 800761c:	08007685 	.word	0x08007685
 8007620:	08007685 	.word	0x08007685
 8007624:	08007685 	.word	0x08007685
 8007628:	08007685 	.word	0x08007685
 800762c:	08007685 	.word	0x08007685
 8007630:	08007675 	.word	0x08007675
 8007634:	08007685 	.word	0x08007685
 8007638:	08007685 	.word	0x08007685
 800763c:	08007685 	.word	0x08007685
 8007640:	08007685 	.word	0x08007685
 8007644:	08007685 	.word	0x08007685
 8007648:	08007685 	.word	0x08007685
 800764c:	08007685 	.word	0x08007685
 8007650:	0800767d 	.word	0x0800767d
 8007654:	2301      	movs	r3, #1
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765a:	e222      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800765c:	2304      	movs	r3, #4
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007662:	e21e      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007664:	2308      	movs	r3, #8
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766a:	e21a      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800766c:	2310      	movs	r3, #16
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e216      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007674:	2320      	movs	r3, #32
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e212      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800767c:	2340      	movs	r3, #64	@ 0x40
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007682:	e20e      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007684:	2380      	movs	r3, #128	@ 0x80
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768a:	e20a      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a69      	ldr	r2, [pc, #420]	@ (8007838 <UART_SetConfig+0x33c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d130      	bne.n	80076f8 <UART_SetConfig+0x1fc>
 8007696:	4b67      	ldr	r3, [pc, #412]	@ (8007834 <UART_SetConfig+0x338>)
 8007698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b05      	cmp	r3, #5
 80076a0:	d826      	bhi.n	80076f0 <UART_SetConfig+0x1f4>
 80076a2:	a201      	add	r2, pc, #4	@ (adr r2, 80076a8 <UART_SetConfig+0x1ac>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076c1 	.word	0x080076c1
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076d1 	.word	0x080076d1
 80076b4:	080076d9 	.word	0x080076d9
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076e9 	.word	0x080076e9
 80076c0:	2300      	movs	r3, #0
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c6:	e1ec      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80076c8:	2304      	movs	r3, #4
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e1e8      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80076d0:	2308      	movs	r3, #8
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d6:	e1e4      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80076d8:	2310      	movs	r3, #16
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e1e0      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80076e0:	2320      	movs	r3, #32
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e1dc      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80076e8:	2340      	movs	r3, #64	@ 0x40
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e1d8      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80076f0:	2380      	movs	r3, #128	@ 0x80
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e1d4      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a4f      	ldr	r2, [pc, #316]	@ (800783c <UART_SetConfig+0x340>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d130      	bne.n	8007764 <UART_SetConfig+0x268>
 8007702:	4b4c      	ldr	r3, [pc, #304]	@ (8007834 <UART_SetConfig+0x338>)
 8007704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	2b05      	cmp	r3, #5
 800770c:	d826      	bhi.n	800775c <UART_SetConfig+0x260>
 800770e:	a201      	add	r2, pc, #4	@ (adr r2, 8007714 <UART_SetConfig+0x218>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	0800772d 	.word	0x0800772d
 8007718:	08007735 	.word	0x08007735
 800771c:	0800773d 	.word	0x0800773d
 8007720:	08007745 	.word	0x08007745
 8007724:	0800774d 	.word	0x0800774d
 8007728:	08007755 	.word	0x08007755
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007732:	e1b6      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007734:	2304      	movs	r3, #4
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773a:	e1b2      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800773c:	2308      	movs	r3, #8
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007742:	e1ae      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007744:	2310      	movs	r3, #16
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774a:	e1aa      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800774c:	2320      	movs	r3, #32
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e1a6      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007754:	2340      	movs	r3, #64	@ 0x40
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e1a2      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800775c:	2380      	movs	r3, #128	@ 0x80
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e19e      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a35      	ldr	r2, [pc, #212]	@ (8007840 <UART_SetConfig+0x344>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d130      	bne.n	80077d0 <UART_SetConfig+0x2d4>
 800776e:	4b31      	ldr	r3, [pc, #196]	@ (8007834 <UART_SetConfig+0x338>)
 8007770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b05      	cmp	r3, #5
 8007778:	d826      	bhi.n	80077c8 <UART_SetConfig+0x2cc>
 800777a:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <UART_SetConfig+0x284>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007799 	.word	0x08007799
 8007784:	080077a1 	.word	0x080077a1
 8007788:	080077a9 	.word	0x080077a9
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077b9 	.word	0x080077b9
 8007794:	080077c1 	.word	0x080077c1
 8007798:	2300      	movs	r3, #0
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779e:	e180      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80077a0:	2304      	movs	r3, #4
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a6:	e17c      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80077a8:	2308      	movs	r3, #8
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ae:	e178      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80077b0:	2310      	movs	r3, #16
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b6:	e174      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80077b8:	2320      	movs	r3, #32
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e170      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80077c0:	2340      	movs	r3, #64	@ 0x40
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e16c      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80077c8:	2380      	movs	r3, #128	@ 0x80
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e168      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007844 <UART_SetConfig+0x348>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d142      	bne.n	8007860 <UART_SetConfig+0x364>
 80077da:	4b16      	ldr	r3, [pc, #88]	@ (8007834 <UART_SetConfig+0x338>)
 80077dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	d838      	bhi.n	8007858 <UART_SetConfig+0x35c>
 80077e6:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <UART_SetConfig+0x2f0>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007805 	.word	0x08007805
 80077f0:	0800780d 	.word	0x0800780d
 80077f4:	08007815 	.word	0x08007815
 80077f8:	0800781d 	.word	0x0800781d
 80077fc:	08007849 	.word	0x08007849
 8007800:	08007851 	.word	0x08007851
 8007804:	2300      	movs	r3, #0
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780a:	e14a      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800780c:	2304      	movs	r3, #4
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007812:	e146      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007814:	2308      	movs	r3, #8
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781a:	e142      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800781c:	2310      	movs	r3, #16
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007822:	e13e      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007824:	cfff69f3 	.word	0xcfff69f3
 8007828:	58000c00 	.word	0x58000c00
 800782c:	11fff4ff 	.word	0x11fff4ff
 8007830:	40011000 	.word	0x40011000
 8007834:	58024400 	.word	0x58024400
 8007838:	40004400 	.word	0x40004400
 800783c:	40004800 	.word	0x40004800
 8007840:	40004c00 	.word	0x40004c00
 8007844:	40005000 	.word	0x40005000
 8007848:	2320      	movs	r3, #32
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e128      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007850:	2340      	movs	r3, #64	@ 0x40
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e124      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007858:	2380      	movs	r3, #128	@ 0x80
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e120      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4acb      	ldr	r2, [pc, #812]	@ (8007b94 <UART_SetConfig+0x698>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d176      	bne.n	8007958 <UART_SetConfig+0x45c>
 800786a:	4bcb      	ldr	r3, [pc, #812]	@ (8007b98 <UART_SetConfig+0x69c>)
 800786c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007872:	2b28      	cmp	r3, #40	@ 0x28
 8007874:	d86c      	bhi.n	8007950 <UART_SetConfig+0x454>
 8007876:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <UART_SetConfig+0x380>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	08007921 	.word	0x08007921
 8007880:	08007951 	.word	0x08007951
 8007884:	08007951 	.word	0x08007951
 8007888:	08007951 	.word	0x08007951
 800788c:	08007951 	.word	0x08007951
 8007890:	08007951 	.word	0x08007951
 8007894:	08007951 	.word	0x08007951
 8007898:	08007951 	.word	0x08007951
 800789c:	08007929 	.word	0x08007929
 80078a0:	08007951 	.word	0x08007951
 80078a4:	08007951 	.word	0x08007951
 80078a8:	08007951 	.word	0x08007951
 80078ac:	08007951 	.word	0x08007951
 80078b0:	08007951 	.word	0x08007951
 80078b4:	08007951 	.word	0x08007951
 80078b8:	08007951 	.word	0x08007951
 80078bc:	08007931 	.word	0x08007931
 80078c0:	08007951 	.word	0x08007951
 80078c4:	08007951 	.word	0x08007951
 80078c8:	08007951 	.word	0x08007951
 80078cc:	08007951 	.word	0x08007951
 80078d0:	08007951 	.word	0x08007951
 80078d4:	08007951 	.word	0x08007951
 80078d8:	08007951 	.word	0x08007951
 80078dc:	08007939 	.word	0x08007939
 80078e0:	08007951 	.word	0x08007951
 80078e4:	08007951 	.word	0x08007951
 80078e8:	08007951 	.word	0x08007951
 80078ec:	08007951 	.word	0x08007951
 80078f0:	08007951 	.word	0x08007951
 80078f4:	08007951 	.word	0x08007951
 80078f8:	08007951 	.word	0x08007951
 80078fc:	08007941 	.word	0x08007941
 8007900:	08007951 	.word	0x08007951
 8007904:	08007951 	.word	0x08007951
 8007908:	08007951 	.word	0x08007951
 800790c:	08007951 	.word	0x08007951
 8007910:	08007951 	.word	0x08007951
 8007914:	08007951 	.word	0x08007951
 8007918:	08007951 	.word	0x08007951
 800791c:	08007949 	.word	0x08007949
 8007920:	2301      	movs	r3, #1
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e0bc      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007928:	2304      	movs	r3, #4
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e0b8      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007930:	2308      	movs	r3, #8
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e0b4      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007938:	2310      	movs	r3, #16
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e0b0      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007940:	2320      	movs	r3, #32
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e0ac      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007948:	2340      	movs	r3, #64	@ 0x40
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e0a8      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007950:	2380      	movs	r3, #128	@ 0x80
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e0a4      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a8f      	ldr	r2, [pc, #572]	@ (8007b9c <UART_SetConfig+0x6a0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d130      	bne.n	80079c4 <UART_SetConfig+0x4c8>
 8007962:	4b8d      	ldr	r3, [pc, #564]	@ (8007b98 <UART_SetConfig+0x69c>)
 8007964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b05      	cmp	r3, #5
 800796c:	d826      	bhi.n	80079bc <UART_SetConfig+0x4c0>
 800796e:	a201      	add	r2, pc, #4	@ (adr r2, 8007974 <UART_SetConfig+0x478>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	0800798d 	.word	0x0800798d
 8007978:	08007995 	.word	0x08007995
 800797c:	0800799d 	.word	0x0800799d
 8007980:	080079a5 	.word	0x080079a5
 8007984:	080079ad 	.word	0x080079ad
 8007988:	080079b5 	.word	0x080079b5
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e086      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007994:	2304      	movs	r3, #4
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e082      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 800799c:	2308      	movs	r3, #8
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e07e      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80079a4:	2310      	movs	r3, #16
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e07a      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80079ac:	2320      	movs	r3, #32
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e076      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80079b4:	2340      	movs	r3, #64	@ 0x40
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e072      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80079bc:	2380      	movs	r3, #128	@ 0x80
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e06e      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a75      	ldr	r2, [pc, #468]	@ (8007ba0 <UART_SetConfig+0x6a4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d130      	bne.n	8007a30 <UART_SetConfig+0x534>
 80079ce:	4b72      	ldr	r3, [pc, #456]	@ (8007b98 <UART_SetConfig+0x69c>)
 80079d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d826      	bhi.n	8007a28 <UART_SetConfig+0x52c>
 80079da:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <UART_SetConfig+0x4e4>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079f9 	.word	0x080079f9
 80079e4:	08007a01 	.word	0x08007a01
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e050      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a00:	2304      	movs	r3, #4
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e04c      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a08:	2308      	movs	r3, #8
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e048      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a10:	2310      	movs	r3, #16
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e044      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1e:	e040      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a20:	2340      	movs	r3, #64	@ 0x40
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a26:	e03c      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a28:	2380      	movs	r3, #128	@ 0x80
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	e038      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a5b      	ldr	r2, [pc, #364]	@ (8007ba4 <UART_SetConfig+0x6a8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d130      	bne.n	8007a9c <UART_SetConfig+0x5a0>
 8007a3a:	4b57      	ldr	r3, [pc, #348]	@ (8007b98 <UART_SetConfig+0x69c>)
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	2b05      	cmp	r3, #5
 8007a44:	d826      	bhi.n	8007a94 <UART_SetConfig+0x598>
 8007a46:	a201      	add	r2, pc, #4	@ (adr r2, 8007a4c <UART_SetConfig+0x550>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a65 	.word	0x08007a65
 8007a50:	08007a6d 	.word	0x08007a6d
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a8d 	.word	0x08007a8d
 8007a64:	2302      	movs	r3, #2
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e01a      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e016      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a74:	2308      	movs	r3, #8
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e012      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e00e      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a84:	2320      	movs	r3, #32
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e00a      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a8c:	2340      	movs	r3, #64	@ 0x40
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e006      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a94:	2380      	movs	r3, #128	@ 0x80
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e002      	b.n	8007aa2 <UART_SetConfig+0x5a6>
 8007a9c:	2380      	movs	r3, #128	@ 0x80
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ba4 <UART_SetConfig+0x6a8>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	f040 80f8 	bne.w	8007c9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	dc46      	bgt.n	8007b44 <UART_SetConfig+0x648>
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	f2c0 8082 	blt.w	8007bc0 <UART_SetConfig+0x6c4>
 8007abc:	3b02      	subs	r3, #2
 8007abe:	2b1e      	cmp	r3, #30
 8007ac0:	d87e      	bhi.n	8007bc0 <UART_SetConfig+0x6c4>
 8007ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac8 <UART_SetConfig+0x5cc>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007b4b 	.word	0x08007b4b
 8007acc:	08007bc1 	.word	0x08007bc1
 8007ad0:	08007b53 	.word	0x08007b53
 8007ad4:	08007bc1 	.word	0x08007bc1
 8007ad8:	08007bc1 	.word	0x08007bc1
 8007adc:	08007bc1 	.word	0x08007bc1
 8007ae0:	08007b63 	.word	0x08007b63
 8007ae4:	08007bc1 	.word	0x08007bc1
 8007ae8:	08007bc1 	.word	0x08007bc1
 8007aec:	08007bc1 	.word	0x08007bc1
 8007af0:	08007bc1 	.word	0x08007bc1
 8007af4:	08007bc1 	.word	0x08007bc1
 8007af8:	08007bc1 	.word	0x08007bc1
 8007afc:	08007bc1 	.word	0x08007bc1
 8007b00:	08007b73 	.word	0x08007b73
 8007b04:	08007bc1 	.word	0x08007bc1
 8007b08:	08007bc1 	.word	0x08007bc1
 8007b0c:	08007bc1 	.word	0x08007bc1
 8007b10:	08007bc1 	.word	0x08007bc1
 8007b14:	08007bc1 	.word	0x08007bc1
 8007b18:	08007bc1 	.word	0x08007bc1
 8007b1c:	08007bc1 	.word	0x08007bc1
 8007b20:	08007bc1 	.word	0x08007bc1
 8007b24:	08007bc1 	.word	0x08007bc1
 8007b28:	08007bc1 	.word	0x08007bc1
 8007b2c:	08007bc1 	.word	0x08007bc1
 8007b30:	08007bc1 	.word	0x08007bc1
 8007b34:	08007bc1 	.word	0x08007bc1
 8007b38:	08007bc1 	.word	0x08007bc1
 8007b3c:	08007bc1 	.word	0x08007bc1
 8007b40:	08007bb3 	.word	0x08007bb3
 8007b44:	2b40      	cmp	r3, #64	@ 0x40
 8007b46:	d037      	beq.n	8007bb8 <UART_SetConfig+0x6bc>
 8007b48:	e03a      	b.n	8007bc0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b4a:	f7fd fd17 	bl	800557c <HAL_RCCEx_GetD3PCLK1Freq>
 8007b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b50:	e03c      	b.n	8007bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd fd26 	bl	80055a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b60:	e034      	b.n	8007bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b62:	f107 0318 	add.w	r3, r7, #24
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fd fe72 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b70:	e02c      	b.n	8007bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b72:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <UART_SetConfig+0x69c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0320 	and.w	r3, r3, #32
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d016      	beq.n	8007bac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b7e:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <UART_SetConfig+0x69c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	08db      	lsrs	r3, r3, #3
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	4a07      	ldr	r2, [pc, #28]	@ (8007ba8 <UART_SetConfig+0x6ac>)
 8007b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b90:	e01c      	b.n	8007bcc <UART_SetConfig+0x6d0>
 8007b92:	bf00      	nop
 8007b94:	40011400 	.word	0x40011400
 8007b98:	58024400 	.word	0x58024400
 8007b9c:	40007800 	.word	0x40007800
 8007ba0:	40007c00 	.word	0x40007c00
 8007ba4:	58000c00 	.word	0x58000c00
 8007ba8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007bac:	4b9d      	ldr	r3, [pc, #628]	@ (8007e24 <UART_SetConfig+0x928>)
 8007bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb0:	e00c      	b.n	8007bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bb2:	4b9d      	ldr	r3, [pc, #628]	@ (8007e28 <UART_SetConfig+0x92c>)
 8007bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb6:	e009      	b.n	8007bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bbe:	e005      	b.n	8007bcc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007bca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 81de 	beq.w	8007f90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd8:	4a94      	ldr	r2, [pc, #592]	@ (8007e2c <UART_SetConfig+0x930>)
 8007bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bde:	461a      	mov	r2, r3
 8007be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007be6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d305      	bcc.n	8007c04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d903      	bls.n	8007c0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c0a:	e1c1      	b.n	8007f90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c0e:	2200      	movs	r2, #0
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	60fa      	str	r2, [r7, #12]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c18:	4a84      	ldr	r2, [pc, #528]	@ (8007e2c <UART_SetConfig+0x930>)
 8007c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2200      	movs	r2, #0
 8007c22:	603b      	str	r3, [r7, #0]
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c2e:	f7f8 fd6b 	bl	8000708 <__aeabi_uldivmod>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4610      	mov	r0, r2
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f04f 0200 	mov.w	r2, #0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	020b      	lsls	r3, r1, #8
 8007c44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c48:	0202      	lsls	r2, r0, #8
 8007c4a:	6979      	ldr	r1, [r7, #20]
 8007c4c:	6849      	ldr	r1, [r1, #4]
 8007c4e:	0849      	lsrs	r1, r1, #1
 8007c50:	2000      	movs	r0, #0
 8007c52:	460c      	mov	r4, r1
 8007c54:	4605      	mov	r5, r0
 8007c56:	eb12 0804 	adds.w	r8, r2, r4
 8007c5a:	eb43 0905 	adc.w	r9, r3, r5
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	469a      	mov	sl, r3
 8007c66:	4693      	mov	fp, r2
 8007c68:	4652      	mov	r2, sl
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	f7f8 fd4a 	bl	8000708 <__aeabi_uldivmod>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4613      	mov	r3, r2
 8007c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c82:	d308      	bcc.n	8007c96 <UART_SetConfig+0x79a>
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c8a:	d204      	bcs.n	8007c96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c92:	60da      	str	r2, [r3, #12]
 8007c94:	e17c      	b.n	8007f90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c9c:	e178      	b.n	8007f90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca6:	f040 80c5 	bne.w	8007e34 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007caa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	dc48      	bgt.n	8007d44 <UART_SetConfig+0x848>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	db7b      	blt.n	8007dae <UART_SetConfig+0x8b2>
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d879      	bhi.n	8007dae <UART_SetConfig+0x8b2>
 8007cba:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc0 <UART_SetConfig+0x7c4>)
 8007cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc0:	08007d4b 	.word	0x08007d4b
 8007cc4:	08007d53 	.word	0x08007d53
 8007cc8:	08007daf 	.word	0x08007daf
 8007ccc:	08007daf 	.word	0x08007daf
 8007cd0:	08007d5b 	.word	0x08007d5b
 8007cd4:	08007daf 	.word	0x08007daf
 8007cd8:	08007daf 	.word	0x08007daf
 8007cdc:	08007daf 	.word	0x08007daf
 8007ce0:	08007d6b 	.word	0x08007d6b
 8007ce4:	08007daf 	.word	0x08007daf
 8007ce8:	08007daf 	.word	0x08007daf
 8007cec:	08007daf 	.word	0x08007daf
 8007cf0:	08007daf 	.word	0x08007daf
 8007cf4:	08007daf 	.word	0x08007daf
 8007cf8:	08007daf 	.word	0x08007daf
 8007cfc:	08007daf 	.word	0x08007daf
 8007d00:	08007d7b 	.word	0x08007d7b
 8007d04:	08007daf 	.word	0x08007daf
 8007d08:	08007daf 	.word	0x08007daf
 8007d0c:	08007daf 	.word	0x08007daf
 8007d10:	08007daf 	.word	0x08007daf
 8007d14:	08007daf 	.word	0x08007daf
 8007d18:	08007daf 	.word	0x08007daf
 8007d1c:	08007daf 	.word	0x08007daf
 8007d20:	08007daf 	.word	0x08007daf
 8007d24:	08007daf 	.word	0x08007daf
 8007d28:	08007daf 	.word	0x08007daf
 8007d2c:	08007daf 	.word	0x08007daf
 8007d30:	08007daf 	.word	0x08007daf
 8007d34:	08007daf 	.word	0x08007daf
 8007d38:	08007daf 	.word	0x08007daf
 8007d3c:	08007daf 	.word	0x08007daf
 8007d40:	08007da1 	.word	0x08007da1
 8007d44:	2b40      	cmp	r3, #64	@ 0x40
 8007d46:	d02e      	beq.n	8007da6 <UART_SetConfig+0x8aa>
 8007d48:	e031      	b.n	8007dae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d4a:	f7fc f9e1 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8007d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d50:	e033      	b.n	8007dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d52:	f7fc f9f3 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 8007d56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d58:	e02f      	b.n	8007dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fd fc22 	bl	80055a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d68:	e027      	b.n	8007dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d6a:	f107 0318 	add.w	r3, r7, #24
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fd fd6e 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d78:	e01f      	b.n	8007dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007e30 <UART_SetConfig+0x934>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d86:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <UART_SetConfig+0x934>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	08db      	lsrs	r3, r3, #3
 8007d8c:	f003 0303 	and.w	r3, r3, #3
 8007d90:	4a24      	ldr	r2, [pc, #144]	@ (8007e24 <UART_SetConfig+0x928>)
 8007d92:	fa22 f303 	lsr.w	r3, r2, r3
 8007d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d98:	e00f      	b.n	8007dba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d9a:	4b22      	ldr	r3, [pc, #136]	@ (8007e24 <UART_SetConfig+0x928>)
 8007d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d9e:	e00c      	b.n	8007dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007da0:	4b21      	ldr	r3, [pc, #132]	@ (8007e28 <UART_SetConfig+0x92c>)
 8007da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da4:	e009      	b.n	8007dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dac:	e005      	b.n	8007dba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80e7 	beq.w	8007f90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc6:	4a19      	ldr	r2, [pc, #100]	@ (8007e2c <UART_SetConfig+0x930>)
 8007dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dd4:	005a      	lsls	r2, r3, #1
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	085b      	lsrs	r3, r3, #1
 8007ddc:	441a      	add	r2, r3
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dea:	2b0f      	cmp	r3, #15
 8007dec:	d916      	bls.n	8007e1c <UART_SetConfig+0x920>
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df4:	d212      	bcs.n	8007e1c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	f023 030f 	bic.w	r3, r3, #15
 8007dfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	e0b9      	b.n	8007f90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e22:	e0b5      	b.n	8007f90 <UART_SetConfig+0xa94>
 8007e24:	03d09000 	.word	0x03d09000
 8007e28:	003d0900 	.word	0x003d0900
 8007e2c:	0800d6c0 	.word	0x0800d6c0
 8007e30:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e34:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	dc49      	bgt.n	8007ed0 <UART_SetConfig+0x9d4>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	db7c      	blt.n	8007f3a <UART_SetConfig+0xa3e>
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	d87a      	bhi.n	8007f3a <UART_SetConfig+0xa3e>
 8007e44:	a201      	add	r2, pc, #4	@ (adr r2, 8007e4c <UART_SetConfig+0x950>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007ed7 	.word	0x08007ed7
 8007e50:	08007edf 	.word	0x08007edf
 8007e54:	08007f3b 	.word	0x08007f3b
 8007e58:	08007f3b 	.word	0x08007f3b
 8007e5c:	08007ee7 	.word	0x08007ee7
 8007e60:	08007f3b 	.word	0x08007f3b
 8007e64:	08007f3b 	.word	0x08007f3b
 8007e68:	08007f3b 	.word	0x08007f3b
 8007e6c:	08007ef7 	.word	0x08007ef7
 8007e70:	08007f3b 	.word	0x08007f3b
 8007e74:	08007f3b 	.word	0x08007f3b
 8007e78:	08007f3b 	.word	0x08007f3b
 8007e7c:	08007f3b 	.word	0x08007f3b
 8007e80:	08007f3b 	.word	0x08007f3b
 8007e84:	08007f3b 	.word	0x08007f3b
 8007e88:	08007f3b 	.word	0x08007f3b
 8007e8c:	08007f07 	.word	0x08007f07
 8007e90:	08007f3b 	.word	0x08007f3b
 8007e94:	08007f3b 	.word	0x08007f3b
 8007e98:	08007f3b 	.word	0x08007f3b
 8007e9c:	08007f3b 	.word	0x08007f3b
 8007ea0:	08007f3b 	.word	0x08007f3b
 8007ea4:	08007f3b 	.word	0x08007f3b
 8007ea8:	08007f3b 	.word	0x08007f3b
 8007eac:	08007f3b 	.word	0x08007f3b
 8007eb0:	08007f3b 	.word	0x08007f3b
 8007eb4:	08007f3b 	.word	0x08007f3b
 8007eb8:	08007f3b 	.word	0x08007f3b
 8007ebc:	08007f3b 	.word	0x08007f3b
 8007ec0:	08007f3b 	.word	0x08007f3b
 8007ec4:	08007f3b 	.word	0x08007f3b
 8007ec8:	08007f3b 	.word	0x08007f3b
 8007ecc:	08007f2d 	.word	0x08007f2d
 8007ed0:	2b40      	cmp	r3, #64	@ 0x40
 8007ed2:	d02e      	beq.n	8007f32 <UART_SetConfig+0xa36>
 8007ed4:	e031      	b.n	8007f3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed6:	f7fc f91b 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8007eda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007edc:	e033      	b.n	8007f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ede:	f7fc f92d 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 8007ee2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ee4:	e02f      	b.n	8007f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fd fb5c 	bl	80055a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef4:	e027      	b.n	8007f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ef6:	f107 0318 	add.w	r3, r7, #24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fd fca8 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f04:	e01f      	b.n	8007f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f06:	4b2d      	ldr	r3, [pc, #180]	@ (8007fbc <UART_SetConfig+0xac0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f12:	4b2a      	ldr	r3, [pc, #168]	@ (8007fbc <UART_SetConfig+0xac0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	08db      	lsrs	r3, r3, #3
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	4a28      	ldr	r2, [pc, #160]	@ (8007fc0 <UART_SetConfig+0xac4>)
 8007f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f24:	e00f      	b.n	8007f46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007f26:	4b26      	ldr	r3, [pc, #152]	@ (8007fc0 <UART_SetConfig+0xac4>)
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2a:	e00c      	b.n	8007f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f2c:	4b25      	ldr	r3, [pc, #148]	@ (8007fc4 <UART_SetConfig+0xac8>)
 8007f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f30:	e009      	b.n	8007f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f38:	e005      	b.n	8007f46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f44:	bf00      	nop
    }

    if (pclk != 0U)
 8007f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d021      	beq.n	8007f90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc8 <UART_SetConfig+0xacc>)
 8007f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	441a      	add	r2, r3
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	2b0f      	cmp	r3, #15
 8007f74:	d909      	bls.n	8007f8a <UART_SetConfig+0xa8e>
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f7c:	d205      	bcs.n	8007f8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60da      	str	r2, [r3, #12]
 8007f88:	e002      	b.n	8007f90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007fac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3748      	adds	r7, #72	@ 0x48
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fba:	bf00      	nop
 8007fbc:	58024400 	.word	0x58024400
 8007fc0:	03d09000 	.word	0x03d09000
 8007fc4:	003d0900 	.word	0x003d0900
 8007fc8:	0800d6c0 	.word	0x0800d6c0

08007fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01a      	beq.n	80080e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080ca:	d10a      	bne.n	80080e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	605a      	str	r2, [r3, #4]
  }
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b098      	sub	sp, #96	@ 0x60
 8008114:	af02      	add	r7, sp, #8
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008120:	f7fa fc74 	bl	8002a0c <HAL_GetTick>
 8008124:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b08      	cmp	r3, #8
 8008132:	d12f      	bne.n	8008194 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008134:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800813c:	2200      	movs	r2, #0
 800813e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f88e 	bl	8008264 <UART_WaitOnFlagUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d022      	beq.n	8008194 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008156:	e853 3f00 	ldrex	r3, [r3]
 800815a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800815c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800815e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008162:	653b      	str	r3, [r7, #80]	@ 0x50
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	461a      	mov	r2, r3
 800816a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800816c:	647b      	str	r3, [r7, #68]	@ 0x44
 800816e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800817a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e6      	bne.n	800814e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2220      	movs	r2, #32
 8008184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e063      	b.n	800825c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0304 	and.w	r3, r3, #4
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d149      	bne.n	8008236 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081aa:	2200      	movs	r2, #0
 80081ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f857 	bl	8008264 <UART_WaitOnFlagUntilTimeout>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d03c      	beq.n	8008236 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	623b      	str	r3, [r7, #32]
   return(result);
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081da:	633b      	str	r3, [r7, #48]	@ 0x30
 80081dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e6      	bne.n	80081bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3308      	adds	r3, #8
 80081f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800820e:	61fa      	str	r2, [r7, #28]
 8008210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	69b9      	ldr	r1, [r7, #24]
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	617b      	str	r3, [r7, #20]
   return(result);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e5      	bne.n	80081ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e012      	b.n	800825c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3758      	adds	r7, #88	@ 0x58
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008274:	e04f      	b.n	8008316 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d04b      	beq.n	8008316 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800827e:	f7fa fbc5 	bl	8002a0c <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	429a      	cmp	r2, r3
 800828c:	d302      	bcc.n	8008294 <UART_WaitOnFlagUntilTimeout+0x30>
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e04e      	b.n	8008336 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d037      	beq.n	8008316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b80      	cmp	r3, #128	@ 0x80
 80082aa:	d034      	beq.n	8008316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b40      	cmp	r3, #64	@ 0x40
 80082b0:	d031      	beq.n	8008316 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	f003 0308 	and.w	r3, r3, #8
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d110      	bne.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2208      	movs	r2, #8
 80082c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f839 	bl	8008340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2208      	movs	r2, #8
 80082d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e029      	b.n	8008336 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082f0:	d111      	bne.n	8008316 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 f81f 	bl	8008340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2220      	movs	r2, #32
 8008306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e00f      	b.n	8008336 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69da      	ldr	r2, [r3, #28]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4013      	ands	r3, r2
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	429a      	cmp	r2, r3
 8008324:	bf0c      	ite	eq
 8008326:	2301      	moveq	r3, #1
 8008328:	2300      	movne	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	461a      	mov	r2, r3
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	429a      	cmp	r2, r3
 8008332:	d0a0      	beq.n	8008276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008340:	b480      	push	{r7}
 8008342:	b095      	sub	sp, #84	@ 0x54
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800835c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008366:	643b      	str	r3, [r7, #64]	@ 0x40
 8008368:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800836c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e6      	bne.n	8008348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	61fb      	str	r3, [r7, #28]
   return(result);
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	4b1e      	ldr	r3, [pc, #120]	@ (8008408 <UART_EndRxTransfer+0xc8>)
 800838e:	4013      	ands	r3, r2
 8008390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3308      	adds	r3, #8
 8008398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800839a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800839c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e5      	bne.n	800837a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d118      	bne.n	80083e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f023 0310 	bic.w	r3, r3, #16
 80083ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083d4:	61bb      	str	r3, [r7, #24]
 80083d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	6979      	ldr	r1, [r7, #20]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	613b      	str	r3, [r7, #16]
   return(result);
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e6      	bne.n	80083b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80083fc:	bf00      	nop
 80083fe:	3754      	adds	r7, #84	@ 0x54
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	effffffe 	.word	0xeffffffe

0800840c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_UARTEx_DisableFifoMode+0x16>
 800841e:	2302      	movs	r3, #2
 8008420:	e027      	b.n	8008472 <HAL_UARTEx_DisableFifoMode+0x66>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2224      	movs	r2, #36	@ 0x24
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0201 	bic.w	r2, r2, #1
 8008448:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008450:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008492:	2302      	movs	r3, #2
 8008494:	e02d      	b.n	80084f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2224      	movs	r2, #36	@ 0x24
 80084a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0201 	bic.w	r2, r2, #1
 80084bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f850 	bl	8008578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800850e:	2302      	movs	r3, #2
 8008510:	e02d      	b.n	800856e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2224      	movs	r2, #36	@ 0x24
 800851e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0201 	bic.w	r2, r2, #1
 8008538:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f812 	bl	8008578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2220      	movs	r2, #32
 8008560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008584:	2b00      	cmp	r3, #0
 8008586:	d108      	bne.n	800859a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008598:	e031      	b.n	80085fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800859a:	2310      	movs	r3, #16
 800859c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800859e:	2310      	movs	r3, #16
 80085a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	0e5b      	lsrs	r3, r3, #25
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	0f5b      	lsrs	r3, r3, #29
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	7b3a      	ldrb	r2, [r7, #12]
 80085c6:	4911      	ldr	r1, [pc, #68]	@ (800860c <UARTEx_SetNbDataToProcess+0x94>)
 80085c8:	5c8a      	ldrb	r2, [r1, r2]
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085ce:	7b3a      	ldrb	r2, [r7, #12]
 80085d0:	490f      	ldr	r1, [pc, #60]	@ (8008610 <UARTEx_SetNbDataToProcess+0x98>)
 80085d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	7b7a      	ldrb	r2, [r7, #13]
 80085e4:	4909      	ldr	r1, [pc, #36]	@ (800860c <UARTEx_SetNbDataToProcess+0x94>)
 80085e6:	5c8a      	ldrb	r2, [r1, r2]
 80085e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085ec:	7b7a      	ldrb	r2, [r7, #13]
 80085ee:	4908      	ldr	r1, [pc, #32]	@ (8008610 <UARTEx_SetNbDataToProcess+0x98>)
 80085f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	0800d6d8 	.word	0x0800d6d8
 8008610:	0800d6e0 	.word	0x0800d6e0

08008614 <__cvt>:
 8008614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008616:	ed2d 8b02 	vpush	{d8}
 800861a:	eeb0 8b40 	vmov.f64	d8, d0
 800861e:	b085      	sub	sp, #20
 8008620:	4617      	mov	r7, r2
 8008622:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008624:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008626:	ee18 2a90 	vmov	r2, s17
 800862a:	f025 0520 	bic.w	r5, r5, #32
 800862e:	2a00      	cmp	r2, #0
 8008630:	bfb6      	itet	lt
 8008632:	222d      	movlt	r2, #45	@ 0x2d
 8008634:	2200      	movge	r2, #0
 8008636:	eeb1 8b40 	vneglt.f64	d8, d0
 800863a:	2d46      	cmp	r5, #70	@ 0x46
 800863c:	460c      	mov	r4, r1
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	d004      	beq.n	800864c <__cvt+0x38>
 8008642:	2d45      	cmp	r5, #69	@ 0x45
 8008644:	d100      	bne.n	8008648 <__cvt+0x34>
 8008646:	3401      	adds	r4, #1
 8008648:	2102      	movs	r1, #2
 800864a:	e000      	b.n	800864e <__cvt+0x3a>
 800864c:	2103      	movs	r1, #3
 800864e:	ab03      	add	r3, sp, #12
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	ab02      	add	r3, sp, #8
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4622      	mov	r2, r4
 8008658:	4633      	mov	r3, r6
 800865a:	eeb0 0b48 	vmov.f64	d0, d8
 800865e:	f001 f883 	bl	8009768 <_dtoa_r>
 8008662:	2d47      	cmp	r5, #71	@ 0x47
 8008664:	d114      	bne.n	8008690 <__cvt+0x7c>
 8008666:	07fb      	lsls	r3, r7, #31
 8008668:	d50a      	bpl.n	8008680 <__cvt+0x6c>
 800866a:	1902      	adds	r2, r0, r4
 800866c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008674:	bf08      	it	eq
 8008676:	9203      	streq	r2, [sp, #12]
 8008678:	2130      	movs	r1, #48	@ 0x30
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	4293      	cmp	r3, r2
 800867e:	d319      	bcc.n	80086b4 <__cvt+0xa0>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008684:	1a1b      	subs	r3, r3, r0
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	b005      	add	sp, #20
 800868a:	ecbd 8b02 	vpop	{d8}
 800868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008690:	2d46      	cmp	r5, #70	@ 0x46
 8008692:	eb00 0204 	add.w	r2, r0, r4
 8008696:	d1e9      	bne.n	800866c <__cvt+0x58>
 8008698:	7803      	ldrb	r3, [r0, #0]
 800869a:	2b30      	cmp	r3, #48	@ 0x30
 800869c:	d107      	bne.n	80086ae <__cvt+0x9a>
 800869e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a6:	bf1c      	itt	ne
 80086a8:	f1c4 0401 	rsbne	r4, r4, #1
 80086ac:	6034      	strne	r4, [r6, #0]
 80086ae:	6833      	ldr	r3, [r6, #0]
 80086b0:	441a      	add	r2, r3
 80086b2:	e7db      	b.n	800866c <__cvt+0x58>
 80086b4:	1c5c      	adds	r4, r3, #1
 80086b6:	9403      	str	r4, [sp, #12]
 80086b8:	7019      	strb	r1, [r3, #0]
 80086ba:	e7de      	b.n	800867a <__cvt+0x66>

080086bc <__exponent>:
 80086bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086be:	2900      	cmp	r1, #0
 80086c0:	bfba      	itte	lt
 80086c2:	4249      	neglt	r1, r1
 80086c4:	232d      	movlt	r3, #45	@ 0x2d
 80086c6:	232b      	movge	r3, #43	@ 0x2b
 80086c8:	2909      	cmp	r1, #9
 80086ca:	7002      	strb	r2, [r0, #0]
 80086cc:	7043      	strb	r3, [r0, #1]
 80086ce:	dd29      	ble.n	8008724 <__exponent+0x68>
 80086d0:	f10d 0307 	add.w	r3, sp, #7
 80086d4:	461d      	mov	r5, r3
 80086d6:	270a      	movs	r7, #10
 80086d8:	461a      	mov	r2, r3
 80086da:	fbb1 f6f7 	udiv	r6, r1, r7
 80086de:	fb07 1416 	mls	r4, r7, r6, r1
 80086e2:	3430      	adds	r4, #48	@ 0x30
 80086e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80086e8:	460c      	mov	r4, r1
 80086ea:	2c63      	cmp	r4, #99	@ 0x63
 80086ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80086f0:	4631      	mov	r1, r6
 80086f2:	dcf1      	bgt.n	80086d8 <__exponent+0x1c>
 80086f4:	3130      	adds	r1, #48	@ 0x30
 80086f6:	1e94      	subs	r4, r2, #2
 80086f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80086fc:	1c41      	adds	r1, r0, #1
 80086fe:	4623      	mov	r3, r4
 8008700:	42ab      	cmp	r3, r5
 8008702:	d30a      	bcc.n	800871a <__exponent+0x5e>
 8008704:	f10d 0309 	add.w	r3, sp, #9
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	42ac      	cmp	r4, r5
 800870c:	bf88      	it	hi
 800870e:	2300      	movhi	r3, #0
 8008710:	3302      	adds	r3, #2
 8008712:	4403      	add	r3, r0
 8008714:	1a18      	subs	r0, r3, r0
 8008716:	b003      	add	sp, #12
 8008718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800871e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008722:	e7ed      	b.n	8008700 <__exponent+0x44>
 8008724:	2330      	movs	r3, #48	@ 0x30
 8008726:	3130      	adds	r1, #48	@ 0x30
 8008728:	7083      	strb	r3, [r0, #2]
 800872a:	70c1      	strb	r1, [r0, #3]
 800872c:	1d03      	adds	r3, r0, #4
 800872e:	e7f1      	b.n	8008714 <__exponent+0x58>

08008730 <_printf_float>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	b08d      	sub	sp, #52	@ 0x34
 8008736:	460c      	mov	r4, r1
 8008738:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800873c:	4616      	mov	r6, r2
 800873e:	461f      	mov	r7, r3
 8008740:	4605      	mov	r5, r0
 8008742:	f000 ff0b 	bl	800955c <_localeconv_r>
 8008746:	f8d0 b000 	ldr.w	fp, [r0]
 800874a:	4658      	mov	r0, fp
 800874c:	f7f7 fe18 	bl	8000380 <strlen>
 8008750:	2300      	movs	r3, #0
 8008752:	930a      	str	r3, [sp, #40]	@ 0x28
 8008754:	f8d8 3000 	ldr.w	r3, [r8]
 8008758:	f894 9018 	ldrb.w	r9, [r4, #24]
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	9005      	str	r0, [sp, #20]
 8008760:	3307      	adds	r3, #7
 8008762:	f023 0307 	bic.w	r3, r3, #7
 8008766:	f103 0108 	add.w	r1, r3, #8
 800876a:	f8c8 1000 	str.w	r1, [r8]
 800876e:	ed93 0b00 	vldr	d0, [r3]
 8008772:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80089d0 <_printf_float+0x2a0>
 8008776:	eeb0 7bc0 	vabs.f64	d7, d0
 800877a:	eeb4 7b46 	vcmp.f64	d7, d6
 800877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008782:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008786:	dd24      	ble.n	80087d2 <_printf_float+0xa2>
 8008788:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800878c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008790:	d502      	bpl.n	8008798 <_printf_float+0x68>
 8008792:	232d      	movs	r3, #45	@ 0x2d
 8008794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008798:	498f      	ldr	r1, [pc, #572]	@ (80089d8 <_printf_float+0x2a8>)
 800879a:	4b90      	ldr	r3, [pc, #576]	@ (80089dc <_printf_float+0x2ac>)
 800879c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80087a0:	bf94      	ite	ls
 80087a2:	4688      	movls	r8, r1
 80087a4:	4698      	movhi	r8, r3
 80087a6:	f022 0204 	bic.w	r2, r2, #4
 80087aa:	2303      	movs	r3, #3
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	6022      	str	r2, [r4, #0]
 80087b0:	f04f 0a00 	mov.w	sl, #0
 80087b4:	9700      	str	r7, [sp, #0]
 80087b6:	4633      	mov	r3, r6
 80087b8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80087ba:	4621      	mov	r1, r4
 80087bc:	4628      	mov	r0, r5
 80087be:	f000 f9d1 	bl	8008b64 <_printf_common>
 80087c2:	3001      	adds	r0, #1
 80087c4:	f040 8089 	bne.w	80088da <_printf_float+0x1aa>
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	b00d      	add	sp, #52	@ 0x34
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80087d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087da:	d709      	bvc.n	80087f0 <_printf_float+0xc0>
 80087dc:	ee10 3a90 	vmov	r3, s1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bfbc      	itt	lt
 80087e4:	232d      	movlt	r3, #45	@ 0x2d
 80087e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80087ea:	497d      	ldr	r1, [pc, #500]	@ (80089e0 <_printf_float+0x2b0>)
 80087ec:	4b7d      	ldr	r3, [pc, #500]	@ (80089e4 <_printf_float+0x2b4>)
 80087ee:	e7d5      	b.n	800879c <_printf_float+0x6c>
 80087f0:	6863      	ldr	r3, [r4, #4]
 80087f2:	1c59      	adds	r1, r3, #1
 80087f4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80087f8:	d139      	bne.n	800886e <_printf_float+0x13e>
 80087fa:	2306      	movs	r3, #6
 80087fc:	6063      	str	r3, [r4, #4]
 80087fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008802:	2300      	movs	r3, #0
 8008804:	6022      	str	r2, [r4, #0]
 8008806:	9303      	str	r3, [sp, #12]
 8008808:	ab0a      	add	r3, sp, #40	@ 0x28
 800880a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800880e:	ab09      	add	r3, sp, #36	@ 0x24
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	6861      	ldr	r1, [r4, #4]
 8008814:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008818:	4628      	mov	r0, r5
 800881a:	f7ff fefb 	bl	8008614 <__cvt>
 800881e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008822:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008824:	4680      	mov	r8, r0
 8008826:	d129      	bne.n	800887c <_printf_float+0x14c>
 8008828:	1cc8      	adds	r0, r1, #3
 800882a:	db02      	blt.n	8008832 <_printf_float+0x102>
 800882c:	6863      	ldr	r3, [r4, #4]
 800882e:	4299      	cmp	r1, r3
 8008830:	dd41      	ble.n	80088b6 <_printf_float+0x186>
 8008832:	f1a9 0902 	sub.w	r9, r9, #2
 8008836:	fa5f f989 	uxtb.w	r9, r9
 800883a:	3901      	subs	r1, #1
 800883c:	464a      	mov	r2, r9
 800883e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008842:	9109      	str	r1, [sp, #36]	@ 0x24
 8008844:	f7ff ff3a 	bl	80086bc <__exponent>
 8008848:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800884a:	1813      	adds	r3, r2, r0
 800884c:	2a01      	cmp	r2, #1
 800884e:	4682      	mov	sl, r0
 8008850:	6123      	str	r3, [r4, #16]
 8008852:	dc02      	bgt.n	800885a <_printf_float+0x12a>
 8008854:	6822      	ldr	r2, [r4, #0]
 8008856:	07d2      	lsls	r2, r2, #31
 8008858:	d501      	bpl.n	800885e <_printf_float+0x12e>
 800885a:	3301      	adds	r3, #1
 800885c:	6123      	str	r3, [r4, #16]
 800885e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0a6      	beq.n	80087b4 <_printf_float+0x84>
 8008866:	232d      	movs	r3, #45	@ 0x2d
 8008868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800886c:	e7a2      	b.n	80087b4 <_printf_float+0x84>
 800886e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008872:	d1c4      	bne.n	80087fe <_printf_float+0xce>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1c2      	bne.n	80087fe <_printf_float+0xce>
 8008878:	2301      	movs	r3, #1
 800887a:	e7bf      	b.n	80087fc <_printf_float+0xcc>
 800887c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008880:	d9db      	bls.n	800883a <_printf_float+0x10a>
 8008882:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008886:	d118      	bne.n	80088ba <_printf_float+0x18a>
 8008888:	2900      	cmp	r1, #0
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	dd0b      	ble.n	80088a6 <_printf_float+0x176>
 800888e:	6121      	str	r1, [r4, #16]
 8008890:	b913      	cbnz	r3, 8008898 <_printf_float+0x168>
 8008892:	6822      	ldr	r2, [r4, #0]
 8008894:	07d0      	lsls	r0, r2, #31
 8008896:	d502      	bpl.n	800889e <_printf_float+0x16e>
 8008898:	3301      	adds	r3, #1
 800889a:	440b      	add	r3, r1
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088a0:	f04f 0a00 	mov.w	sl, #0
 80088a4:	e7db      	b.n	800885e <_printf_float+0x12e>
 80088a6:	b913      	cbnz	r3, 80088ae <_printf_float+0x17e>
 80088a8:	6822      	ldr	r2, [r4, #0]
 80088aa:	07d2      	lsls	r2, r2, #31
 80088ac:	d501      	bpl.n	80088b2 <_printf_float+0x182>
 80088ae:	3302      	adds	r3, #2
 80088b0:	e7f4      	b.n	800889c <_printf_float+0x16c>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e7f2      	b.n	800889c <_printf_float+0x16c>
 80088b6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80088ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088bc:	4299      	cmp	r1, r3
 80088be:	db05      	blt.n	80088cc <_printf_float+0x19c>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	6121      	str	r1, [r4, #16]
 80088c4:	07d8      	lsls	r0, r3, #31
 80088c6:	d5ea      	bpl.n	800889e <_printf_float+0x16e>
 80088c8:	1c4b      	adds	r3, r1, #1
 80088ca:	e7e7      	b.n	800889c <_printf_float+0x16c>
 80088cc:	2900      	cmp	r1, #0
 80088ce:	bfd4      	ite	le
 80088d0:	f1c1 0202 	rsble	r2, r1, #2
 80088d4:	2201      	movgt	r2, #1
 80088d6:	4413      	add	r3, r2
 80088d8:	e7e0      	b.n	800889c <_printf_float+0x16c>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	055a      	lsls	r2, r3, #21
 80088de:	d407      	bmi.n	80088f0 <_printf_float+0x1c0>
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	4642      	mov	r2, r8
 80088e4:	4631      	mov	r1, r6
 80088e6:	4628      	mov	r0, r5
 80088e8:	47b8      	blx	r7
 80088ea:	3001      	adds	r0, #1
 80088ec:	d12a      	bne.n	8008944 <_printf_float+0x214>
 80088ee:	e76b      	b.n	80087c8 <_printf_float+0x98>
 80088f0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80088f4:	f240 80e0 	bls.w	8008ab8 <_printf_float+0x388>
 80088f8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80088fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008904:	d133      	bne.n	800896e <_printf_float+0x23e>
 8008906:	4a38      	ldr	r2, [pc, #224]	@ (80089e8 <_printf_float+0x2b8>)
 8008908:	2301      	movs	r3, #1
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	f43f af59 	beq.w	80087c8 <_printf_float+0x98>
 8008916:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800891a:	4543      	cmp	r3, r8
 800891c:	db02      	blt.n	8008924 <_printf_float+0x1f4>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	07d8      	lsls	r0, r3, #31
 8008922:	d50f      	bpl.n	8008944 <_printf_float+0x214>
 8008924:	9b05      	ldr	r3, [sp, #20]
 8008926:	465a      	mov	r2, fp
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af4a 	beq.w	80087c8 <_printf_float+0x98>
 8008934:	f04f 0900 	mov.w	r9, #0
 8008938:	f108 38ff 	add.w	r8, r8, #4294967295
 800893c:	f104 0a1a 	add.w	sl, r4, #26
 8008940:	45c8      	cmp	r8, r9
 8008942:	dc09      	bgt.n	8008958 <_printf_float+0x228>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	079b      	lsls	r3, r3, #30
 8008948:	f100 8107 	bmi.w	8008b5a <_printf_float+0x42a>
 800894c:	68e0      	ldr	r0, [r4, #12]
 800894e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008950:	4298      	cmp	r0, r3
 8008952:	bfb8      	it	lt
 8008954:	4618      	movlt	r0, r3
 8008956:	e739      	b.n	80087cc <_printf_float+0x9c>
 8008958:	2301      	movs	r3, #1
 800895a:	4652      	mov	r2, sl
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	f43f af30 	beq.w	80087c8 <_printf_float+0x98>
 8008968:	f109 0901 	add.w	r9, r9, #1
 800896c:	e7e8      	b.n	8008940 <_printf_float+0x210>
 800896e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc3b      	bgt.n	80089ec <_printf_float+0x2bc>
 8008974:	4a1c      	ldr	r2, [pc, #112]	@ (80089e8 <_printf_float+0x2b8>)
 8008976:	2301      	movs	r3, #1
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	47b8      	blx	r7
 800897e:	3001      	adds	r0, #1
 8008980:	f43f af22 	beq.w	80087c8 <_printf_float+0x98>
 8008984:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008988:	ea59 0303 	orrs.w	r3, r9, r3
 800898c:	d102      	bne.n	8008994 <_printf_float+0x264>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	07d9      	lsls	r1, r3, #31
 8008992:	d5d7      	bpl.n	8008944 <_printf_float+0x214>
 8008994:	9b05      	ldr	r3, [sp, #20]
 8008996:	465a      	mov	r2, fp
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f af12 	beq.w	80087c8 <_printf_float+0x98>
 80089a4:	f04f 0a00 	mov.w	sl, #0
 80089a8:	f104 0b1a 	add.w	fp, r4, #26
 80089ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ae:	425b      	negs	r3, r3
 80089b0:	4553      	cmp	r3, sl
 80089b2:	dc01      	bgt.n	80089b8 <_printf_float+0x288>
 80089b4:	464b      	mov	r3, r9
 80089b6:	e794      	b.n	80088e2 <_printf_float+0x1b2>
 80089b8:	2301      	movs	r3, #1
 80089ba:	465a      	mov	r2, fp
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f af00 	beq.w	80087c8 <_printf_float+0x98>
 80089c8:	f10a 0a01 	add.w	sl, sl, #1
 80089cc:	e7ee      	b.n	80089ac <_printf_float+0x27c>
 80089ce:	bf00      	nop
 80089d0:	ffffffff 	.word	0xffffffff
 80089d4:	7fefffff 	.word	0x7fefffff
 80089d8:	0800d6e8 	.word	0x0800d6e8
 80089dc:	0800d6ec 	.word	0x0800d6ec
 80089e0:	0800d6f0 	.word	0x0800d6f0
 80089e4:	0800d6f4 	.word	0x0800d6f4
 80089e8:	0800d6f8 	.word	0x0800d6f8
 80089ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089f2:	4553      	cmp	r3, sl
 80089f4:	bfa8      	it	ge
 80089f6:	4653      	movge	r3, sl
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	4699      	mov	r9, r3
 80089fc:	dc37      	bgt.n	8008a6e <_printf_float+0x33e>
 80089fe:	2300      	movs	r3, #0
 8008a00:	9307      	str	r3, [sp, #28]
 8008a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a06:	f104 021a 	add.w	r2, r4, #26
 8008a0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a0c:	9907      	ldr	r1, [sp, #28]
 8008a0e:	9306      	str	r3, [sp, #24]
 8008a10:	eba3 0309 	sub.w	r3, r3, r9
 8008a14:	428b      	cmp	r3, r1
 8008a16:	dc31      	bgt.n	8008a7c <_printf_float+0x34c>
 8008a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a1a:	459a      	cmp	sl, r3
 8008a1c:	dc3b      	bgt.n	8008a96 <_printf_float+0x366>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	07da      	lsls	r2, r3, #31
 8008a22:	d438      	bmi.n	8008a96 <_printf_float+0x366>
 8008a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a26:	ebaa 0903 	sub.w	r9, sl, r3
 8008a2a:	9b06      	ldr	r3, [sp, #24]
 8008a2c:	ebaa 0303 	sub.w	r3, sl, r3
 8008a30:	4599      	cmp	r9, r3
 8008a32:	bfa8      	it	ge
 8008a34:	4699      	movge	r9, r3
 8008a36:	f1b9 0f00 	cmp.w	r9, #0
 8008a3a:	dc34      	bgt.n	8008aa6 <_printf_float+0x376>
 8008a3c:	f04f 0800 	mov.w	r8, #0
 8008a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a44:	f104 0b1a 	add.w	fp, r4, #26
 8008a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a4a:	ebaa 0303 	sub.w	r3, sl, r3
 8008a4e:	eba3 0309 	sub.w	r3, r3, r9
 8008a52:	4543      	cmp	r3, r8
 8008a54:	f77f af76 	ble.w	8008944 <_printf_float+0x214>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	465a      	mov	r2, fp
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b8      	blx	r7
 8008a62:	3001      	adds	r0, #1
 8008a64:	f43f aeb0 	beq.w	80087c8 <_printf_float+0x98>
 8008a68:	f108 0801 	add.w	r8, r8, #1
 8008a6c:	e7ec      	b.n	8008a48 <_printf_float+0x318>
 8008a6e:	4642      	mov	r2, r8
 8008a70:	4631      	mov	r1, r6
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	d1c1      	bne.n	80089fe <_printf_float+0x2ce>
 8008a7a:	e6a5      	b.n	80087c8 <_printf_float+0x98>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	9206      	str	r2, [sp, #24]
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f ae9e 	beq.w	80087c8 <_printf_float+0x98>
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	9a06      	ldr	r2, [sp, #24]
 8008a90:	3301      	adds	r3, #1
 8008a92:	9307      	str	r3, [sp, #28]
 8008a94:	e7b9      	b.n	8008a0a <_printf_float+0x2da>
 8008a96:	9b05      	ldr	r3, [sp, #20]
 8008a98:	465a      	mov	r2, fp
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d1bf      	bne.n	8008a24 <_printf_float+0x2f4>
 8008aa4:	e690      	b.n	80087c8 <_printf_float+0x98>
 8008aa6:	9a06      	ldr	r2, [sp, #24]
 8008aa8:	464b      	mov	r3, r9
 8008aaa:	4442      	add	r2, r8
 8008aac:	4631      	mov	r1, r6
 8008aae:	4628      	mov	r0, r5
 8008ab0:	47b8      	blx	r7
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d1c2      	bne.n	8008a3c <_printf_float+0x30c>
 8008ab6:	e687      	b.n	80087c8 <_printf_float+0x98>
 8008ab8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008abc:	f1b9 0f01 	cmp.w	r9, #1
 8008ac0:	dc01      	bgt.n	8008ac6 <_printf_float+0x396>
 8008ac2:	07db      	lsls	r3, r3, #31
 8008ac4:	d536      	bpl.n	8008b34 <_printf_float+0x404>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4642      	mov	r2, r8
 8008aca:	4631      	mov	r1, r6
 8008acc:	4628      	mov	r0, r5
 8008ace:	47b8      	blx	r7
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	f43f ae79 	beq.w	80087c8 <_printf_float+0x98>
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	465a      	mov	r2, fp
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f43f ae71 	beq.w	80087c8 <_printf_float+0x98>
 8008ae6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008aea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af2:	f109 39ff 	add.w	r9, r9, #4294967295
 8008af6:	d018      	beq.n	8008b2a <_printf_float+0x3fa>
 8008af8:	464b      	mov	r3, r9
 8008afa:	f108 0201 	add.w	r2, r8, #1
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	47b8      	blx	r7
 8008b04:	3001      	adds	r0, #1
 8008b06:	d10c      	bne.n	8008b22 <_printf_float+0x3f2>
 8008b08:	e65e      	b.n	80087c8 <_printf_float+0x98>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	465a      	mov	r2, fp
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	f43f ae57 	beq.w	80087c8 <_printf_float+0x98>
 8008b1a:	f108 0801 	add.w	r8, r8, #1
 8008b1e:	45c8      	cmp	r8, r9
 8008b20:	dbf3      	blt.n	8008b0a <_printf_float+0x3da>
 8008b22:	4653      	mov	r3, sl
 8008b24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b28:	e6dc      	b.n	80088e4 <_printf_float+0x1b4>
 8008b2a:	f04f 0800 	mov.w	r8, #0
 8008b2e:	f104 0b1a 	add.w	fp, r4, #26
 8008b32:	e7f4      	b.n	8008b1e <_printf_float+0x3ee>
 8008b34:	2301      	movs	r3, #1
 8008b36:	4642      	mov	r2, r8
 8008b38:	e7e1      	b.n	8008afe <_printf_float+0x3ce>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	464a      	mov	r2, r9
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	f43f ae3f 	beq.w	80087c8 <_printf_float+0x98>
 8008b4a:	f108 0801 	add.w	r8, r8, #1
 8008b4e:	68e3      	ldr	r3, [r4, #12]
 8008b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b52:	1a5b      	subs	r3, r3, r1
 8008b54:	4543      	cmp	r3, r8
 8008b56:	dcf0      	bgt.n	8008b3a <_printf_float+0x40a>
 8008b58:	e6f8      	b.n	800894c <_printf_float+0x21c>
 8008b5a:	f04f 0800 	mov.w	r8, #0
 8008b5e:	f104 0919 	add.w	r9, r4, #25
 8008b62:	e7f4      	b.n	8008b4e <_printf_float+0x41e>

08008b64 <_printf_common>:
 8008b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	4616      	mov	r6, r2
 8008b6a:	4698      	mov	r8, r3
 8008b6c:	688a      	ldr	r2, [r1, #8]
 8008b6e:	690b      	ldr	r3, [r1, #16]
 8008b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b74:	4293      	cmp	r3, r2
 8008b76:	bfb8      	it	lt
 8008b78:	4613      	movlt	r3, r2
 8008b7a:	6033      	str	r3, [r6, #0]
 8008b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b80:	4607      	mov	r7, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	b10a      	cbz	r2, 8008b8a <_printf_common+0x26>
 8008b86:	3301      	adds	r3, #1
 8008b88:	6033      	str	r3, [r6, #0]
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	0699      	lsls	r1, r3, #26
 8008b8e:	bf42      	ittt	mi
 8008b90:	6833      	ldrmi	r3, [r6, #0]
 8008b92:	3302      	addmi	r3, #2
 8008b94:	6033      	strmi	r3, [r6, #0]
 8008b96:	6825      	ldr	r5, [r4, #0]
 8008b98:	f015 0506 	ands.w	r5, r5, #6
 8008b9c:	d106      	bne.n	8008bac <_printf_common+0x48>
 8008b9e:	f104 0a19 	add.w	sl, r4, #25
 8008ba2:	68e3      	ldr	r3, [r4, #12]
 8008ba4:	6832      	ldr	r2, [r6, #0]
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	42ab      	cmp	r3, r5
 8008baa:	dc26      	bgt.n	8008bfa <_printf_common+0x96>
 8008bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bb0:	6822      	ldr	r2, [r4, #0]
 8008bb2:	3b00      	subs	r3, #0
 8008bb4:	bf18      	it	ne
 8008bb6:	2301      	movne	r3, #1
 8008bb8:	0692      	lsls	r2, r2, #26
 8008bba:	d42b      	bmi.n	8008c14 <_printf_common+0xb0>
 8008bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	47c8      	blx	r9
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d01e      	beq.n	8008c08 <_printf_common+0xa4>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	f003 0306 	and.w	r3, r3, #6
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	bf02      	ittt	eq
 8008bd6:	68e5      	ldreq	r5, [r4, #12]
 8008bd8:	6833      	ldreq	r3, [r6, #0]
 8008bda:	1aed      	subeq	r5, r5, r3
 8008bdc:	68a3      	ldr	r3, [r4, #8]
 8008bde:	bf0c      	ite	eq
 8008be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be4:	2500      	movne	r5, #0
 8008be6:	4293      	cmp	r3, r2
 8008be8:	bfc4      	itt	gt
 8008bea:	1a9b      	subgt	r3, r3, r2
 8008bec:	18ed      	addgt	r5, r5, r3
 8008bee:	2600      	movs	r6, #0
 8008bf0:	341a      	adds	r4, #26
 8008bf2:	42b5      	cmp	r5, r6
 8008bf4:	d11a      	bne.n	8008c2c <_printf_common+0xc8>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e008      	b.n	8008c0c <_printf_common+0xa8>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4652      	mov	r2, sl
 8008bfe:	4641      	mov	r1, r8
 8008c00:	4638      	mov	r0, r7
 8008c02:	47c8      	blx	r9
 8008c04:	3001      	adds	r0, #1
 8008c06:	d103      	bne.n	8008c10 <_printf_common+0xac>
 8008c08:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c10:	3501      	adds	r5, #1
 8008c12:	e7c6      	b.n	8008ba2 <_printf_common+0x3e>
 8008c14:	18e1      	adds	r1, r4, r3
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	2030      	movs	r0, #48	@ 0x30
 8008c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c1e:	4422      	add	r2, r4
 8008c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c28:	3302      	adds	r3, #2
 8008c2a:	e7c7      	b.n	8008bbc <_printf_common+0x58>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	4622      	mov	r2, r4
 8008c30:	4641      	mov	r1, r8
 8008c32:	4638      	mov	r0, r7
 8008c34:	47c8      	blx	r9
 8008c36:	3001      	adds	r0, #1
 8008c38:	d0e6      	beq.n	8008c08 <_printf_common+0xa4>
 8008c3a:	3601      	adds	r6, #1
 8008c3c:	e7d9      	b.n	8008bf2 <_printf_common+0x8e>
	...

08008c40 <_printf_i>:
 8008c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c44:	7e0f      	ldrb	r7, [r1, #24]
 8008c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c48:	2f78      	cmp	r7, #120	@ 0x78
 8008c4a:	4691      	mov	r9, r2
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	469a      	mov	sl, r3
 8008c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c56:	d807      	bhi.n	8008c68 <_printf_i+0x28>
 8008c58:	2f62      	cmp	r7, #98	@ 0x62
 8008c5a:	d80a      	bhi.n	8008c72 <_printf_i+0x32>
 8008c5c:	2f00      	cmp	r7, #0
 8008c5e:	f000 80d2 	beq.w	8008e06 <_printf_i+0x1c6>
 8008c62:	2f58      	cmp	r7, #88	@ 0x58
 8008c64:	f000 80b9 	beq.w	8008dda <_printf_i+0x19a>
 8008c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c70:	e03a      	b.n	8008ce8 <_printf_i+0xa8>
 8008c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c76:	2b15      	cmp	r3, #21
 8008c78:	d8f6      	bhi.n	8008c68 <_printf_i+0x28>
 8008c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8008c80 <_printf_i+0x40>)
 8008c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c80:	08008cd9 	.word	0x08008cd9
 8008c84:	08008ced 	.word	0x08008ced
 8008c88:	08008c69 	.word	0x08008c69
 8008c8c:	08008c69 	.word	0x08008c69
 8008c90:	08008c69 	.word	0x08008c69
 8008c94:	08008c69 	.word	0x08008c69
 8008c98:	08008ced 	.word	0x08008ced
 8008c9c:	08008c69 	.word	0x08008c69
 8008ca0:	08008c69 	.word	0x08008c69
 8008ca4:	08008c69 	.word	0x08008c69
 8008ca8:	08008c69 	.word	0x08008c69
 8008cac:	08008ded 	.word	0x08008ded
 8008cb0:	08008d17 	.word	0x08008d17
 8008cb4:	08008da7 	.word	0x08008da7
 8008cb8:	08008c69 	.word	0x08008c69
 8008cbc:	08008c69 	.word	0x08008c69
 8008cc0:	08008e0f 	.word	0x08008e0f
 8008cc4:	08008c69 	.word	0x08008c69
 8008cc8:	08008d17 	.word	0x08008d17
 8008ccc:	08008c69 	.word	0x08008c69
 8008cd0:	08008c69 	.word	0x08008c69
 8008cd4:	08008daf 	.word	0x08008daf
 8008cd8:	6833      	ldr	r3, [r6, #0]
 8008cda:	1d1a      	adds	r2, r3, #4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6032      	str	r2, [r6, #0]
 8008ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e09d      	b.n	8008e28 <_printf_i+0x1e8>
 8008cec:	6833      	ldr	r3, [r6, #0]
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	1d19      	adds	r1, r3, #4
 8008cf2:	6031      	str	r1, [r6, #0]
 8008cf4:	0606      	lsls	r6, r0, #24
 8008cf6:	d501      	bpl.n	8008cfc <_printf_i+0xbc>
 8008cf8:	681d      	ldr	r5, [r3, #0]
 8008cfa:	e003      	b.n	8008d04 <_printf_i+0xc4>
 8008cfc:	0645      	lsls	r5, r0, #25
 8008cfe:	d5fb      	bpl.n	8008cf8 <_printf_i+0xb8>
 8008d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	da03      	bge.n	8008d10 <_printf_i+0xd0>
 8008d08:	232d      	movs	r3, #45	@ 0x2d
 8008d0a:	426d      	negs	r5, r5
 8008d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d10:	4859      	ldr	r0, [pc, #356]	@ (8008e78 <_printf_i+0x238>)
 8008d12:	230a      	movs	r3, #10
 8008d14:	e011      	b.n	8008d3a <_printf_i+0xfa>
 8008d16:	6821      	ldr	r1, [r4, #0]
 8008d18:	6833      	ldr	r3, [r6, #0]
 8008d1a:	0608      	lsls	r0, r1, #24
 8008d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d20:	d402      	bmi.n	8008d28 <_printf_i+0xe8>
 8008d22:	0649      	lsls	r1, r1, #25
 8008d24:	bf48      	it	mi
 8008d26:	b2ad      	uxthmi	r5, r5
 8008d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d2a:	4853      	ldr	r0, [pc, #332]	@ (8008e78 <_printf_i+0x238>)
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	bf14      	ite	ne
 8008d30:	230a      	movne	r3, #10
 8008d32:	2308      	moveq	r3, #8
 8008d34:	2100      	movs	r1, #0
 8008d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d3a:	6866      	ldr	r6, [r4, #4]
 8008d3c:	60a6      	str	r6, [r4, #8]
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	bfa2      	ittt	ge
 8008d42:	6821      	ldrge	r1, [r4, #0]
 8008d44:	f021 0104 	bicge.w	r1, r1, #4
 8008d48:	6021      	strge	r1, [r4, #0]
 8008d4a:	b90d      	cbnz	r5, 8008d50 <_printf_i+0x110>
 8008d4c:	2e00      	cmp	r6, #0
 8008d4e:	d04b      	beq.n	8008de8 <_printf_i+0x1a8>
 8008d50:	4616      	mov	r6, r2
 8008d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d56:	fb03 5711 	mls	r7, r3, r1, r5
 8008d5a:	5dc7      	ldrb	r7, [r0, r7]
 8008d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d60:	462f      	mov	r7, r5
 8008d62:	42bb      	cmp	r3, r7
 8008d64:	460d      	mov	r5, r1
 8008d66:	d9f4      	bls.n	8008d52 <_printf_i+0x112>
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d10b      	bne.n	8008d84 <_printf_i+0x144>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	07df      	lsls	r7, r3, #31
 8008d70:	d508      	bpl.n	8008d84 <_printf_i+0x144>
 8008d72:	6923      	ldr	r3, [r4, #16]
 8008d74:	6861      	ldr	r1, [r4, #4]
 8008d76:	4299      	cmp	r1, r3
 8008d78:	bfde      	ittt	le
 8008d7a:	2330      	movle	r3, #48	@ 0x30
 8008d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d84:	1b92      	subs	r2, r2, r6
 8008d86:	6122      	str	r2, [r4, #16]
 8008d88:	f8cd a000 	str.w	sl, [sp]
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	aa03      	add	r2, sp, #12
 8008d90:	4621      	mov	r1, r4
 8008d92:	4640      	mov	r0, r8
 8008d94:	f7ff fee6 	bl	8008b64 <_printf_common>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d14a      	bne.n	8008e32 <_printf_i+0x1f2>
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	b004      	add	sp, #16
 8008da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	f043 0320 	orr.w	r3, r3, #32
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	4833      	ldr	r0, [pc, #204]	@ (8008e7c <_printf_i+0x23c>)
 8008db0:	2778      	movs	r7, #120	@ 0x78
 8008db2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	6831      	ldr	r1, [r6, #0]
 8008dba:	061f      	lsls	r7, r3, #24
 8008dbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008dc0:	d402      	bmi.n	8008dc8 <_printf_i+0x188>
 8008dc2:	065f      	lsls	r7, r3, #25
 8008dc4:	bf48      	it	mi
 8008dc6:	b2ad      	uxthmi	r5, r5
 8008dc8:	6031      	str	r1, [r6, #0]
 8008dca:	07d9      	lsls	r1, r3, #31
 8008dcc:	bf44      	itt	mi
 8008dce:	f043 0320 	orrmi.w	r3, r3, #32
 8008dd2:	6023      	strmi	r3, [r4, #0]
 8008dd4:	b11d      	cbz	r5, 8008dde <_printf_i+0x19e>
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	e7ac      	b.n	8008d34 <_printf_i+0xf4>
 8008dda:	4827      	ldr	r0, [pc, #156]	@ (8008e78 <_printf_i+0x238>)
 8008ddc:	e7e9      	b.n	8008db2 <_printf_i+0x172>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	f023 0320 	bic.w	r3, r3, #32
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	e7f6      	b.n	8008dd6 <_printf_i+0x196>
 8008de8:	4616      	mov	r6, r2
 8008dea:	e7bd      	b.n	8008d68 <_printf_i+0x128>
 8008dec:	6833      	ldr	r3, [r6, #0]
 8008dee:	6825      	ldr	r5, [r4, #0]
 8008df0:	6961      	ldr	r1, [r4, #20]
 8008df2:	1d18      	adds	r0, r3, #4
 8008df4:	6030      	str	r0, [r6, #0]
 8008df6:	062e      	lsls	r6, r5, #24
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	d501      	bpl.n	8008e00 <_printf_i+0x1c0>
 8008dfc:	6019      	str	r1, [r3, #0]
 8008dfe:	e002      	b.n	8008e06 <_printf_i+0x1c6>
 8008e00:	0668      	lsls	r0, r5, #25
 8008e02:	d5fb      	bpl.n	8008dfc <_printf_i+0x1bc>
 8008e04:	8019      	strh	r1, [r3, #0]
 8008e06:	2300      	movs	r3, #0
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	4616      	mov	r6, r2
 8008e0c:	e7bc      	b.n	8008d88 <_printf_i+0x148>
 8008e0e:	6833      	ldr	r3, [r6, #0]
 8008e10:	1d1a      	adds	r2, r3, #4
 8008e12:	6032      	str	r2, [r6, #0]
 8008e14:	681e      	ldr	r6, [r3, #0]
 8008e16:	6862      	ldr	r2, [r4, #4]
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7f7 fa60 	bl	80002e0 <memchr>
 8008e20:	b108      	cbz	r0, 8008e26 <_printf_i+0x1e6>
 8008e22:	1b80      	subs	r0, r0, r6
 8008e24:	6060      	str	r0, [r4, #4]
 8008e26:	6863      	ldr	r3, [r4, #4]
 8008e28:	6123      	str	r3, [r4, #16]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e30:	e7aa      	b.n	8008d88 <_printf_i+0x148>
 8008e32:	6923      	ldr	r3, [r4, #16]
 8008e34:	4632      	mov	r2, r6
 8008e36:	4649      	mov	r1, r9
 8008e38:	4640      	mov	r0, r8
 8008e3a:	47d0      	blx	sl
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d0ad      	beq.n	8008d9c <_printf_i+0x15c>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	079b      	lsls	r3, r3, #30
 8008e44:	d413      	bmi.n	8008e6e <_printf_i+0x22e>
 8008e46:	68e0      	ldr	r0, [r4, #12]
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	4298      	cmp	r0, r3
 8008e4c:	bfb8      	it	lt
 8008e4e:	4618      	movlt	r0, r3
 8008e50:	e7a6      	b.n	8008da0 <_printf_i+0x160>
 8008e52:	2301      	movs	r3, #1
 8008e54:	4632      	mov	r2, r6
 8008e56:	4649      	mov	r1, r9
 8008e58:	4640      	mov	r0, r8
 8008e5a:	47d0      	blx	sl
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d09d      	beq.n	8008d9c <_printf_i+0x15c>
 8008e60:	3501      	adds	r5, #1
 8008e62:	68e3      	ldr	r3, [r4, #12]
 8008e64:	9903      	ldr	r1, [sp, #12]
 8008e66:	1a5b      	subs	r3, r3, r1
 8008e68:	42ab      	cmp	r3, r5
 8008e6a:	dcf2      	bgt.n	8008e52 <_printf_i+0x212>
 8008e6c:	e7eb      	b.n	8008e46 <_printf_i+0x206>
 8008e6e:	2500      	movs	r5, #0
 8008e70:	f104 0619 	add.w	r6, r4, #25
 8008e74:	e7f5      	b.n	8008e62 <_printf_i+0x222>
 8008e76:	bf00      	nop
 8008e78:	0800d6fa 	.word	0x0800d6fa
 8008e7c:	0800d70b 	.word	0x0800d70b

08008e80 <_scanf_float>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	b087      	sub	sp, #28
 8008e86:	4617      	mov	r7, r2
 8008e88:	9303      	str	r3, [sp, #12]
 8008e8a:	688b      	ldr	r3, [r1, #8]
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008e92:	bf81      	itttt	hi
 8008e94:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008e98:	eb03 0b05 	addhi.w	fp, r3, r5
 8008e9c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008ea0:	608b      	strhi	r3, [r1, #8]
 8008ea2:	680b      	ldr	r3, [r1, #0]
 8008ea4:	460a      	mov	r2, r1
 8008ea6:	f04f 0500 	mov.w	r5, #0
 8008eaa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008eae:	f842 3b1c 	str.w	r3, [r2], #28
 8008eb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008eb6:	4680      	mov	r8, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	bf98      	it	ls
 8008ebc:	f04f 0b00 	movls.w	fp, #0
 8008ec0:	9201      	str	r2, [sp, #4]
 8008ec2:	4616      	mov	r6, r2
 8008ec4:	46aa      	mov	sl, r5
 8008ec6:	46a9      	mov	r9, r5
 8008ec8:	9502      	str	r5, [sp, #8]
 8008eca:	68a2      	ldr	r2, [r4, #8]
 8008ecc:	b152      	cbz	r2, 8008ee4 <_scanf_float+0x64>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b4e      	cmp	r3, #78	@ 0x4e
 8008ed4:	d864      	bhi.n	8008fa0 <_scanf_float+0x120>
 8008ed6:	2b40      	cmp	r3, #64	@ 0x40
 8008ed8:	d83c      	bhi.n	8008f54 <_scanf_float+0xd4>
 8008eda:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008ede:	b2c8      	uxtb	r0, r1
 8008ee0:	280e      	cmp	r0, #14
 8008ee2:	d93a      	bls.n	8008f5a <_scanf_float+0xda>
 8008ee4:	f1b9 0f00 	cmp.w	r9, #0
 8008ee8:	d003      	beq.n	8008ef2 <_scanf_float+0x72>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ef6:	f1ba 0f01 	cmp.w	sl, #1
 8008efa:	f200 8117 	bhi.w	800912c <_scanf_float+0x2ac>
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	429e      	cmp	r6, r3
 8008f02:	f200 8108 	bhi.w	8009116 <_scanf_float+0x296>
 8008f06:	2001      	movs	r0, #1
 8008f08:	b007      	add	sp, #28
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008f12:	2a0d      	cmp	r2, #13
 8008f14:	d8e6      	bhi.n	8008ee4 <_scanf_float+0x64>
 8008f16:	a101      	add	r1, pc, #4	@ (adr r1, 8008f1c <_scanf_float+0x9c>)
 8008f18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f1c:	08009063 	.word	0x08009063
 8008f20:	08008ee5 	.word	0x08008ee5
 8008f24:	08008ee5 	.word	0x08008ee5
 8008f28:	08008ee5 	.word	0x08008ee5
 8008f2c:	080090c3 	.word	0x080090c3
 8008f30:	0800909b 	.word	0x0800909b
 8008f34:	08008ee5 	.word	0x08008ee5
 8008f38:	08008ee5 	.word	0x08008ee5
 8008f3c:	08009071 	.word	0x08009071
 8008f40:	08008ee5 	.word	0x08008ee5
 8008f44:	08008ee5 	.word	0x08008ee5
 8008f48:	08008ee5 	.word	0x08008ee5
 8008f4c:	08008ee5 	.word	0x08008ee5
 8008f50:	08009029 	.word	0x08009029
 8008f54:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008f58:	e7db      	b.n	8008f12 <_scanf_float+0x92>
 8008f5a:	290e      	cmp	r1, #14
 8008f5c:	d8c2      	bhi.n	8008ee4 <_scanf_float+0x64>
 8008f5e:	a001      	add	r0, pc, #4	@ (adr r0, 8008f64 <_scanf_float+0xe4>)
 8008f60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f64:	08009019 	.word	0x08009019
 8008f68:	08008ee5 	.word	0x08008ee5
 8008f6c:	08009019 	.word	0x08009019
 8008f70:	080090af 	.word	0x080090af
 8008f74:	08008ee5 	.word	0x08008ee5
 8008f78:	08008fc1 	.word	0x08008fc1
 8008f7c:	08008fff 	.word	0x08008fff
 8008f80:	08008fff 	.word	0x08008fff
 8008f84:	08008fff 	.word	0x08008fff
 8008f88:	08008fff 	.word	0x08008fff
 8008f8c:	08008fff 	.word	0x08008fff
 8008f90:	08008fff 	.word	0x08008fff
 8008f94:	08008fff 	.word	0x08008fff
 8008f98:	08008fff 	.word	0x08008fff
 8008f9c:	08008fff 	.word	0x08008fff
 8008fa0:	2b6e      	cmp	r3, #110	@ 0x6e
 8008fa2:	d809      	bhi.n	8008fb8 <_scanf_float+0x138>
 8008fa4:	2b60      	cmp	r3, #96	@ 0x60
 8008fa6:	d8b2      	bhi.n	8008f0e <_scanf_float+0x8e>
 8008fa8:	2b54      	cmp	r3, #84	@ 0x54
 8008faa:	d07b      	beq.n	80090a4 <_scanf_float+0x224>
 8008fac:	2b59      	cmp	r3, #89	@ 0x59
 8008fae:	d199      	bne.n	8008ee4 <_scanf_float+0x64>
 8008fb0:	2d07      	cmp	r5, #7
 8008fb2:	d197      	bne.n	8008ee4 <_scanf_float+0x64>
 8008fb4:	2508      	movs	r5, #8
 8008fb6:	e02c      	b.n	8009012 <_scanf_float+0x192>
 8008fb8:	2b74      	cmp	r3, #116	@ 0x74
 8008fba:	d073      	beq.n	80090a4 <_scanf_float+0x224>
 8008fbc:	2b79      	cmp	r3, #121	@ 0x79
 8008fbe:	e7f6      	b.n	8008fae <_scanf_float+0x12e>
 8008fc0:	6821      	ldr	r1, [r4, #0]
 8008fc2:	05c8      	lsls	r0, r1, #23
 8008fc4:	d51b      	bpl.n	8008ffe <_scanf_float+0x17e>
 8008fc6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008fca:	6021      	str	r1, [r4, #0]
 8008fcc:	f109 0901 	add.w	r9, r9, #1
 8008fd0:	f1bb 0f00 	cmp.w	fp, #0
 8008fd4:	d003      	beq.n	8008fde <_scanf_float+0x15e>
 8008fd6:	3201      	adds	r2, #1
 8008fd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fdc:	60a2      	str	r2, [r4, #8]
 8008fde:	68a3      	ldr	r3, [r4, #8]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	60a3      	str	r3, [r4, #8]
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	6123      	str	r3, [r4, #16]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	607b      	str	r3, [r7, #4]
 8008ff2:	f340 8087 	ble.w	8009104 <_scanf_float+0x284>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	e765      	b.n	8008eca <_scanf_float+0x4a>
 8008ffe:	eb1a 0105 	adds.w	r1, sl, r5
 8009002:	f47f af6f 	bne.w	8008ee4 <_scanf_float+0x64>
 8009006:	6822      	ldr	r2, [r4, #0]
 8009008:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800900c:	6022      	str	r2, [r4, #0]
 800900e:	460d      	mov	r5, r1
 8009010:	468a      	mov	sl, r1
 8009012:	f806 3b01 	strb.w	r3, [r6], #1
 8009016:	e7e2      	b.n	8008fde <_scanf_float+0x15e>
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	0610      	lsls	r0, r2, #24
 800901c:	f57f af62 	bpl.w	8008ee4 <_scanf_float+0x64>
 8009020:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009024:	6022      	str	r2, [r4, #0]
 8009026:	e7f4      	b.n	8009012 <_scanf_float+0x192>
 8009028:	f1ba 0f00 	cmp.w	sl, #0
 800902c:	d10e      	bne.n	800904c <_scanf_float+0x1cc>
 800902e:	f1b9 0f00 	cmp.w	r9, #0
 8009032:	d10e      	bne.n	8009052 <_scanf_float+0x1d2>
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800903a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800903e:	d108      	bne.n	8009052 <_scanf_float+0x1d2>
 8009040:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009044:	6022      	str	r2, [r4, #0]
 8009046:	f04f 0a01 	mov.w	sl, #1
 800904a:	e7e2      	b.n	8009012 <_scanf_float+0x192>
 800904c:	f1ba 0f02 	cmp.w	sl, #2
 8009050:	d055      	beq.n	80090fe <_scanf_float+0x27e>
 8009052:	2d01      	cmp	r5, #1
 8009054:	d002      	beq.n	800905c <_scanf_float+0x1dc>
 8009056:	2d04      	cmp	r5, #4
 8009058:	f47f af44 	bne.w	8008ee4 <_scanf_float+0x64>
 800905c:	3501      	adds	r5, #1
 800905e:	b2ed      	uxtb	r5, r5
 8009060:	e7d7      	b.n	8009012 <_scanf_float+0x192>
 8009062:	f1ba 0f01 	cmp.w	sl, #1
 8009066:	f47f af3d 	bne.w	8008ee4 <_scanf_float+0x64>
 800906a:	f04f 0a02 	mov.w	sl, #2
 800906e:	e7d0      	b.n	8009012 <_scanf_float+0x192>
 8009070:	b97d      	cbnz	r5, 8009092 <_scanf_float+0x212>
 8009072:	f1b9 0f00 	cmp.w	r9, #0
 8009076:	f47f af38 	bne.w	8008eea <_scanf_float+0x6a>
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009080:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009084:	f040 8101 	bne.w	800928a <_scanf_float+0x40a>
 8009088:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800908c:	6022      	str	r2, [r4, #0]
 800908e:	2501      	movs	r5, #1
 8009090:	e7bf      	b.n	8009012 <_scanf_float+0x192>
 8009092:	2d03      	cmp	r5, #3
 8009094:	d0e2      	beq.n	800905c <_scanf_float+0x1dc>
 8009096:	2d05      	cmp	r5, #5
 8009098:	e7de      	b.n	8009058 <_scanf_float+0x1d8>
 800909a:	2d02      	cmp	r5, #2
 800909c:	f47f af22 	bne.w	8008ee4 <_scanf_float+0x64>
 80090a0:	2503      	movs	r5, #3
 80090a2:	e7b6      	b.n	8009012 <_scanf_float+0x192>
 80090a4:	2d06      	cmp	r5, #6
 80090a6:	f47f af1d 	bne.w	8008ee4 <_scanf_float+0x64>
 80090aa:	2507      	movs	r5, #7
 80090ac:	e7b1      	b.n	8009012 <_scanf_float+0x192>
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	0591      	lsls	r1, r2, #22
 80090b2:	f57f af17 	bpl.w	8008ee4 <_scanf_float+0x64>
 80090b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80090ba:	6022      	str	r2, [r4, #0]
 80090bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80090c0:	e7a7      	b.n	8009012 <_scanf_float+0x192>
 80090c2:	6822      	ldr	r2, [r4, #0]
 80090c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80090c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80090cc:	d006      	beq.n	80090dc <_scanf_float+0x25c>
 80090ce:	0550      	lsls	r0, r2, #21
 80090d0:	f57f af08 	bpl.w	8008ee4 <_scanf_float+0x64>
 80090d4:	f1b9 0f00 	cmp.w	r9, #0
 80090d8:	f000 80d7 	beq.w	800928a <_scanf_float+0x40a>
 80090dc:	0591      	lsls	r1, r2, #22
 80090de:	bf58      	it	pl
 80090e0:	9902      	ldrpl	r1, [sp, #8]
 80090e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80090e6:	bf58      	it	pl
 80090e8:	eba9 0101 	subpl.w	r1, r9, r1
 80090ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80090f0:	bf58      	it	pl
 80090f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80090f6:	6022      	str	r2, [r4, #0]
 80090f8:	f04f 0900 	mov.w	r9, #0
 80090fc:	e789      	b.n	8009012 <_scanf_float+0x192>
 80090fe:	f04f 0a03 	mov.w	sl, #3
 8009102:	e786      	b.n	8009012 <_scanf_float+0x192>
 8009104:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009108:	4639      	mov	r1, r7
 800910a:	4640      	mov	r0, r8
 800910c:	4798      	blx	r3
 800910e:	2800      	cmp	r0, #0
 8009110:	f43f aedb 	beq.w	8008eca <_scanf_float+0x4a>
 8009114:	e6e6      	b.n	8008ee4 <_scanf_float+0x64>
 8009116:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800911a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800911e:	463a      	mov	r2, r7
 8009120:	4640      	mov	r0, r8
 8009122:	4798      	blx	r3
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	3b01      	subs	r3, #1
 8009128:	6123      	str	r3, [r4, #16]
 800912a:	e6e8      	b.n	8008efe <_scanf_float+0x7e>
 800912c:	1e6b      	subs	r3, r5, #1
 800912e:	2b06      	cmp	r3, #6
 8009130:	d824      	bhi.n	800917c <_scanf_float+0x2fc>
 8009132:	2d02      	cmp	r5, #2
 8009134:	d836      	bhi.n	80091a4 <_scanf_float+0x324>
 8009136:	9b01      	ldr	r3, [sp, #4]
 8009138:	429e      	cmp	r6, r3
 800913a:	f67f aee4 	bls.w	8008f06 <_scanf_float+0x86>
 800913e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009142:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009146:	463a      	mov	r2, r7
 8009148:	4640      	mov	r0, r8
 800914a:	4798      	blx	r3
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	3b01      	subs	r3, #1
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	e7f0      	b.n	8009136 <_scanf_float+0x2b6>
 8009154:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009158:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800915c:	463a      	mov	r2, r7
 800915e:	4640      	mov	r0, r8
 8009160:	4798      	blx	r3
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	3b01      	subs	r3, #1
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916c:	fa5f fa8a 	uxtb.w	sl, sl
 8009170:	f1ba 0f02 	cmp.w	sl, #2
 8009174:	d1ee      	bne.n	8009154 <_scanf_float+0x2d4>
 8009176:	3d03      	subs	r5, #3
 8009178:	b2ed      	uxtb	r5, r5
 800917a:	1b76      	subs	r6, r6, r5
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	05da      	lsls	r2, r3, #23
 8009180:	d530      	bpl.n	80091e4 <_scanf_float+0x364>
 8009182:	055b      	lsls	r3, r3, #21
 8009184:	d511      	bpl.n	80091aa <_scanf_float+0x32a>
 8009186:	9b01      	ldr	r3, [sp, #4]
 8009188:	429e      	cmp	r6, r3
 800918a:	f67f aebc 	bls.w	8008f06 <_scanf_float+0x86>
 800918e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009196:	463a      	mov	r2, r7
 8009198:	4640      	mov	r0, r8
 800919a:	4798      	blx	r3
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	3b01      	subs	r3, #1
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	e7f0      	b.n	8009186 <_scanf_float+0x306>
 80091a4:	46aa      	mov	sl, r5
 80091a6:	46b3      	mov	fp, r6
 80091a8:	e7de      	b.n	8009168 <_scanf_float+0x2e8>
 80091aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	2965      	cmp	r1, #101	@ 0x65
 80091b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80091b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80091ba:	6123      	str	r3, [r4, #16]
 80091bc:	d00c      	beq.n	80091d8 <_scanf_float+0x358>
 80091be:	2945      	cmp	r1, #69	@ 0x45
 80091c0:	d00a      	beq.n	80091d8 <_scanf_float+0x358>
 80091c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80091c6:	463a      	mov	r2, r7
 80091c8:	4640      	mov	r0, r8
 80091ca:	4798      	blx	r3
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	1eb5      	subs	r5, r6, #2
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80091dc:	463a      	mov	r2, r7
 80091de:	4640      	mov	r0, r8
 80091e0:	4798      	blx	r3
 80091e2:	462e      	mov	r6, r5
 80091e4:	6822      	ldr	r2, [r4, #0]
 80091e6:	f012 0210 	ands.w	r2, r2, #16
 80091ea:	d001      	beq.n	80091f0 <_scanf_float+0x370>
 80091ec:	2000      	movs	r0, #0
 80091ee:	e68b      	b.n	8008f08 <_scanf_float+0x88>
 80091f0:	7032      	strb	r2, [r6, #0]
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80091f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091fc:	d11a      	bne.n	8009234 <_scanf_float+0x3b4>
 80091fe:	9b02      	ldr	r3, [sp, #8]
 8009200:	454b      	cmp	r3, r9
 8009202:	eba3 0209 	sub.w	r2, r3, r9
 8009206:	d121      	bne.n	800924c <_scanf_float+0x3cc>
 8009208:	9901      	ldr	r1, [sp, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	4640      	mov	r0, r8
 800920e:	f002 fb61 	bl	800b8d4 <_strtod_r>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	6821      	ldr	r1, [r4, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f011 0f02 	tst.w	r1, #2
 800921c:	f103 0204 	add.w	r2, r3, #4
 8009220:	d01f      	beq.n	8009262 <_scanf_float+0x3e2>
 8009222:	9903      	ldr	r1, [sp, #12]
 8009224:	600a      	str	r2, [r1, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	ed83 0b00 	vstr	d0, [r3]
 800922c:	68e3      	ldr	r3, [r4, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60e3      	str	r3, [r4, #12]
 8009232:	e7db      	b.n	80091ec <_scanf_float+0x36c>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0e6      	beq.n	8009208 <_scanf_float+0x388>
 800923a:	9905      	ldr	r1, [sp, #20]
 800923c:	230a      	movs	r3, #10
 800923e:	3101      	adds	r1, #1
 8009240:	4640      	mov	r0, r8
 8009242:	f002 fbc7 	bl	800b9d4 <_strtol_r>
 8009246:	9b04      	ldr	r3, [sp, #16]
 8009248:	9e05      	ldr	r6, [sp, #20]
 800924a:	1ac2      	subs	r2, r0, r3
 800924c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009250:	429e      	cmp	r6, r3
 8009252:	bf28      	it	cs
 8009254:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009258:	490d      	ldr	r1, [pc, #52]	@ (8009290 <_scanf_float+0x410>)
 800925a:	4630      	mov	r0, r6
 800925c:	f000 f912 	bl	8009484 <siprintf>
 8009260:	e7d2      	b.n	8009208 <_scanf_float+0x388>
 8009262:	f011 0f04 	tst.w	r1, #4
 8009266:	9903      	ldr	r1, [sp, #12]
 8009268:	600a      	str	r2, [r1, #0]
 800926a:	d1dc      	bne.n	8009226 <_scanf_float+0x3a6>
 800926c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009274:	681d      	ldr	r5, [r3, #0]
 8009276:	d705      	bvc.n	8009284 <_scanf_float+0x404>
 8009278:	4806      	ldr	r0, [pc, #24]	@ (8009294 <_scanf_float+0x414>)
 800927a:	f000 f9e7 	bl	800964c <nanf>
 800927e:	ed85 0a00 	vstr	s0, [r5]
 8009282:	e7d3      	b.n	800922c <_scanf_float+0x3ac>
 8009284:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009288:	e7f9      	b.n	800927e <_scanf_float+0x3fe>
 800928a:	f04f 0900 	mov.w	r9, #0
 800928e:	e630      	b.n	8008ef2 <_scanf_float+0x72>
 8009290:	0800d71c 	.word	0x0800d71c
 8009294:	0800dab5 	.word	0x0800dab5

08009298 <std>:
 8009298:	2300      	movs	r3, #0
 800929a:	b510      	push	{r4, lr}
 800929c:	4604      	mov	r4, r0
 800929e:	e9c0 3300 	strd	r3, r3, [r0]
 80092a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092a6:	6083      	str	r3, [r0, #8]
 80092a8:	8181      	strh	r1, [r0, #12]
 80092aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80092ac:	81c2      	strh	r2, [r0, #14]
 80092ae:	6183      	str	r3, [r0, #24]
 80092b0:	4619      	mov	r1, r3
 80092b2:	2208      	movs	r2, #8
 80092b4:	305c      	adds	r0, #92	@ 0x5c
 80092b6:	f000 f948 	bl	800954a <memset>
 80092ba:	4b0d      	ldr	r3, [pc, #52]	@ (80092f0 <std+0x58>)
 80092bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80092be:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <std+0x5c>)
 80092c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092c2:	4b0d      	ldr	r3, [pc, #52]	@ (80092f8 <std+0x60>)
 80092c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092c6:	4b0d      	ldr	r3, [pc, #52]	@ (80092fc <std+0x64>)
 80092c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80092ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009300 <std+0x68>)
 80092cc:	6224      	str	r4, [r4, #32]
 80092ce:	429c      	cmp	r4, r3
 80092d0:	d006      	beq.n	80092e0 <std+0x48>
 80092d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80092d6:	4294      	cmp	r4, r2
 80092d8:	d002      	beq.n	80092e0 <std+0x48>
 80092da:	33d0      	adds	r3, #208	@ 0xd0
 80092dc:	429c      	cmp	r4, r3
 80092de:	d105      	bne.n	80092ec <std+0x54>
 80092e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80092e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e8:	f000 b9ac 	b.w	8009644 <__retarget_lock_init_recursive>
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	bf00      	nop
 80092f0:	080094c5 	.word	0x080094c5
 80092f4:	080094e7 	.word	0x080094e7
 80092f8:	0800951f 	.word	0x0800951f
 80092fc:	08009543 	.word	0x08009543
 8009300:	2400051c 	.word	0x2400051c

08009304 <stdio_exit_handler>:
 8009304:	4a02      	ldr	r2, [pc, #8]	@ (8009310 <stdio_exit_handler+0xc>)
 8009306:	4903      	ldr	r1, [pc, #12]	@ (8009314 <stdio_exit_handler+0x10>)
 8009308:	4803      	ldr	r0, [pc, #12]	@ (8009318 <stdio_exit_handler+0x14>)
 800930a:	f000 b869 	b.w	80093e0 <_fwalk_sglue>
 800930e:	bf00      	nop
 8009310:	24000014 	.word	0x24000014
 8009314:	0800bd91 	.word	0x0800bd91
 8009318:	24000024 	.word	0x24000024

0800931c <cleanup_stdio>:
 800931c:	6841      	ldr	r1, [r0, #4]
 800931e:	4b0c      	ldr	r3, [pc, #48]	@ (8009350 <cleanup_stdio+0x34>)
 8009320:	4299      	cmp	r1, r3
 8009322:	b510      	push	{r4, lr}
 8009324:	4604      	mov	r4, r0
 8009326:	d001      	beq.n	800932c <cleanup_stdio+0x10>
 8009328:	f002 fd32 	bl	800bd90 <_fflush_r>
 800932c:	68a1      	ldr	r1, [r4, #8]
 800932e:	4b09      	ldr	r3, [pc, #36]	@ (8009354 <cleanup_stdio+0x38>)
 8009330:	4299      	cmp	r1, r3
 8009332:	d002      	beq.n	800933a <cleanup_stdio+0x1e>
 8009334:	4620      	mov	r0, r4
 8009336:	f002 fd2b 	bl	800bd90 <_fflush_r>
 800933a:	68e1      	ldr	r1, [r4, #12]
 800933c:	4b06      	ldr	r3, [pc, #24]	@ (8009358 <cleanup_stdio+0x3c>)
 800933e:	4299      	cmp	r1, r3
 8009340:	d004      	beq.n	800934c <cleanup_stdio+0x30>
 8009342:	4620      	mov	r0, r4
 8009344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009348:	f002 bd22 	b.w	800bd90 <_fflush_r>
 800934c:	bd10      	pop	{r4, pc}
 800934e:	bf00      	nop
 8009350:	2400051c 	.word	0x2400051c
 8009354:	24000584 	.word	0x24000584
 8009358:	240005ec 	.word	0x240005ec

0800935c <global_stdio_init.part.0>:
 800935c:	b510      	push	{r4, lr}
 800935e:	4b0b      	ldr	r3, [pc, #44]	@ (800938c <global_stdio_init.part.0+0x30>)
 8009360:	4c0b      	ldr	r4, [pc, #44]	@ (8009390 <global_stdio_init.part.0+0x34>)
 8009362:	4a0c      	ldr	r2, [pc, #48]	@ (8009394 <global_stdio_init.part.0+0x38>)
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	4620      	mov	r0, r4
 8009368:	2200      	movs	r2, #0
 800936a:	2104      	movs	r1, #4
 800936c:	f7ff ff94 	bl	8009298 <std>
 8009370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009374:	2201      	movs	r2, #1
 8009376:	2109      	movs	r1, #9
 8009378:	f7ff ff8e 	bl	8009298 <std>
 800937c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009380:	2202      	movs	r2, #2
 8009382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009386:	2112      	movs	r1, #18
 8009388:	f7ff bf86 	b.w	8009298 <std>
 800938c:	24000654 	.word	0x24000654
 8009390:	2400051c 	.word	0x2400051c
 8009394:	08009305 	.word	0x08009305

08009398 <__sfp_lock_acquire>:
 8009398:	4801      	ldr	r0, [pc, #4]	@ (80093a0 <__sfp_lock_acquire+0x8>)
 800939a:	f000 b954 	b.w	8009646 <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	2400065d 	.word	0x2400065d

080093a4 <__sfp_lock_release>:
 80093a4:	4801      	ldr	r0, [pc, #4]	@ (80093ac <__sfp_lock_release+0x8>)
 80093a6:	f000 b94f 	b.w	8009648 <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	2400065d 	.word	0x2400065d

080093b0 <__sinit>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	4604      	mov	r4, r0
 80093b4:	f7ff fff0 	bl	8009398 <__sfp_lock_acquire>
 80093b8:	6a23      	ldr	r3, [r4, #32]
 80093ba:	b11b      	cbz	r3, 80093c4 <__sinit+0x14>
 80093bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c0:	f7ff bff0 	b.w	80093a4 <__sfp_lock_release>
 80093c4:	4b04      	ldr	r3, [pc, #16]	@ (80093d8 <__sinit+0x28>)
 80093c6:	6223      	str	r3, [r4, #32]
 80093c8:	4b04      	ldr	r3, [pc, #16]	@ (80093dc <__sinit+0x2c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1f5      	bne.n	80093bc <__sinit+0xc>
 80093d0:	f7ff ffc4 	bl	800935c <global_stdio_init.part.0>
 80093d4:	e7f2      	b.n	80093bc <__sinit+0xc>
 80093d6:	bf00      	nop
 80093d8:	0800931d 	.word	0x0800931d
 80093dc:	24000654 	.word	0x24000654

080093e0 <_fwalk_sglue>:
 80093e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e4:	4607      	mov	r7, r0
 80093e6:	4688      	mov	r8, r1
 80093e8:	4614      	mov	r4, r2
 80093ea:	2600      	movs	r6, #0
 80093ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093f0:	f1b9 0901 	subs.w	r9, r9, #1
 80093f4:	d505      	bpl.n	8009402 <_fwalk_sglue+0x22>
 80093f6:	6824      	ldr	r4, [r4, #0]
 80093f8:	2c00      	cmp	r4, #0
 80093fa:	d1f7      	bne.n	80093ec <_fwalk_sglue+0xc>
 80093fc:	4630      	mov	r0, r6
 80093fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d907      	bls.n	8009418 <_fwalk_sglue+0x38>
 8009408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800940c:	3301      	adds	r3, #1
 800940e:	d003      	beq.n	8009418 <_fwalk_sglue+0x38>
 8009410:	4629      	mov	r1, r5
 8009412:	4638      	mov	r0, r7
 8009414:	47c0      	blx	r8
 8009416:	4306      	orrs	r6, r0
 8009418:	3568      	adds	r5, #104	@ 0x68
 800941a:	e7e9      	b.n	80093f0 <_fwalk_sglue+0x10>

0800941c <sniprintf>:
 800941c:	b40c      	push	{r2, r3}
 800941e:	b530      	push	{r4, r5, lr}
 8009420:	4b17      	ldr	r3, [pc, #92]	@ (8009480 <sniprintf+0x64>)
 8009422:	1e0c      	subs	r4, r1, #0
 8009424:	681d      	ldr	r5, [r3, #0]
 8009426:	b09d      	sub	sp, #116	@ 0x74
 8009428:	da08      	bge.n	800943c <sniprintf+0x20>
 800942a:	238b      	movs	r3, #139	@ 0x8b
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	f04f 30ff 	mov.w	r0, #4294967295
 8009432:	b01d      	add	sp, #116	@ 0x74
 8009434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009438:	b002      	add	sp, #8
 800943a:	4770      	bx	lr
 800943c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009440:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009444:	bf14      	ite	ne
 8009446:	f104 33ff 	addne.w	r3, r4, #4294967295
 800944a:	4623      	moveq	r3, r4
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	9307      	str	r3, [sp, #28]
 8009450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009454:	9002      	str	r0, [sp, #8]
 8009456:	9006      	str	r0, [sp, #24]
 8009458:	f8ad 3016 	strh.w	r3, [sp, #22]
 800945c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800945e:	ab21      	add	r3, sp, #132	@ 0x84
 8009460:	a902      	add	r1, sp, #8
 8009462:	4628      	mov	r0, r5
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	f002 fb13 	bl	800ba90 <_svfiprintf_r>
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	bfbc      	itt	lt
 800946e:	238b      	movlt	r3, #139	@ 0x8b
 8009470:	602b      	strlt	r3, [r5, #0]
 8009472:	2c00      	cmp	r4, #0
 8009474:	d0dd      	beq.n	8009432 <sniprintf+0x16>
 8009476:	9b02      	ldr	r3, [sp, #8]
 8009478:	2200      	movs	r2, #0
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	e7d9      	b.n	8009432 <sniprintf+0x16>
 800947e:	bf00      	nop
 8009480:	24000020 	.word	0x24000020

08009484 <siprintf>:
 8009484:	b40e      	push	{r1, r2, r3}
 8009486:	b500      	push	{lr}
 8009488:	b09c      	sub	sp, #112	@ 0x70
 800948a:	ab1d      	add	r3, sp, #116	@ 0x74
 800948c:	9002      	str	r0, [sp, #8]
 800948e:	9006      	str	r0, [sp, #24]
 8009490:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009494:	4809      	ldr	r0, [pc, #36]	@ (80094bc <siprintf+0x38>)
 8009496:	9107      	str	r1, [sp, #28]
 8009498:	9104      	str	r1, [sp, #16]
 800949a:	4909      	ldr	r1, [pc, #36]	@ (80094c0 <siprintf+0x3c>)
 800949c:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a0:	9105      	str	r1, [sp, #20]
 80094a2:	6800      	ldr	r0, [r0, #0]
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	a902      	add	r1, sp, #8
 80094a8:	f002 faf2 	bl	800ba90 <_svfiprintf_r>
 80094ac:	9b02      	ldr	r3, [sp, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	b01c      	add	sp, #112	@ 0x70
 80094b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b8:	b003      	add	sp, #12
 80094ba:	4770      	bx	lr
 80094bc:	24000020 	.word	0x24000020
 80094c0:	ffff0208 	.word	0xffff0208

080094c4 <__sread>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	460c      	mov	r4, r1
 80094c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094cc:	f000 f86c 	bl	80095a8 <_read_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	bfab      	itete	ge
 80094d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094d6:	89a3      	ldrhlt	r3, [r4, #12]
 80094d8:	181b      	addge	r3, r3, r0
 80094da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094de:	bfac      	ite	ge
 80094e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094e2:	81a3      	strhlt	r3, [r4, #12]
 80094e4:	bd10      	pop	{r4, pc}

080094e6 <__swrite>:
 80094e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ea:	461f      	mov	r7, r3
 80094ec:	898b      	ldrh	r3, [r1, #12]
 80094ee:	05db      	lsls	r3, r3, #23
 80094f0:	4605      	mov	r5, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	4616      	mov	r6, r2
 80094f6:	d505      	bpl.n	8009504 <__swrite+0x1e>
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	2302      	movs	r3, #2
 80094fe:	2200      	movs	r2, #0
 8009500:	f000 f840 	bl	8009584 <_lseek_r>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800950a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	4632      	mov	r2, r6
 8009512:	463b      	mov	r3, r7
 8009514:	4628      	mov	r0, r5
 8009516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	f000 b857 	b.w	80095cc <_write_r>

0800951e <__sseek>:
 800951e:	b510      	push	{r4, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009526:	f000 f82d 	bl	8009584 <_lseek_r>
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	bf15      	itete	ne
 8009530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800953a:	81a3      	strheq	r3, [r4, #12]
 800953c:	bf18      	it	ne
 800953e:	81a3      	strhne	r3, [r4, #12]
 8009540:	bd10      	pop	{r4, pc}

08009542 <__sclose>:
 8009542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009546:	f000 b80d 	b.w	8009564 <_close_r>

0800954a <memset>:
 800954a:	4402      	add	r2, r0
 800954c:	4603      	mov	r3, r0
 800954e:	4293      	cmp	r3, r2
 8009550:	d100      	bne.n	8009554 <memset+0xa>
 8009552:	4770      	bx	lr
 8009554:	f803 1b01 	strb.w	r1, [r3], #1
 8009558:	e7f9      	b.n	800954e <memset+0x4>
	...

0800955c <_localeconv_r>:
 800955c:	4800      	ldr	r0, [pc, #0]	@ (8009560 <_localeconv_r+0x4>)
 800955e:	4770      	bx	lr
 8009560:	24000160 	.word	0x24000160

08009564 <_close_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d06      	ldr	r5, [pc, #24]	@ (8009580 <_close_r+0x1c>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f9 f8aa 	bl	80026c8 <_close>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_close_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_close_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	24000658 	.word	0x24000658

08009584 <_lseek_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4d07      	ldr	r5, [pc, #28]	@ (80095a4 <_lseek_r+0x20>)
 8009588:	4604      	mov	r4, r0
 800958a:	4608      	mov	r0, r1
 800958c:	4611      	mov	r1, r2
 800958e:	2200      	movs	r2, #0
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f9 f8bf 	bl	8002716 <_lseek>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_lseek_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_lseek_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	24000658 	.word	0x24000658

080095a8 <_read_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d07      	ldr	r5, [pc, #28]	@ (80095c8 <_read_r+0x20>)
 80095ac:	4604      	mov	r4, r0
 80095ae:	4608      	mov	r0, r1
 80095b0:	4611      	mov	r1, r2
 80095b2:	2200      	movs	r2, #0
 80095b4:	602a      	str	r2, [r5, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f7f9 f869 	bl	800268e <_read>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_read_r+0x1e>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_read_r+0x1e>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	24000658 	.word	0x24000658

080095cc <_write_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d07      	ldr	r5, [pc, #28]	@ (80095ec <_write_r+0x20>)
 80095d0:	4604      	mov	r4, r0
 80095d2:	4608      	mov	r0, r1
 80095d4:	4611      	mov	r1, r2
 80095d6:	2200      	movs	r2, #0
 80095d8:	602a      	str	r2, [r5, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	f7f8 fb2e 	bl	8001c3c <_write>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_write_r+0x1e>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_write_r+0x1e>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	24000658 	.word	0x24000658

080095f0 <__errno>:
 80095f0:	4b01      	ldr	r3, [pc, #4]	@ (80095f8 <__errno+0x8>)
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	24000020 	.word	0x24000020

080095fc <__libc_init_array>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4d0d      	ldr	r5, [pc, #52]	@ (8009634 <__libc_init_array+0x38>)
 8009600:	4c0d      	ldr	r4, [pc, #52]	@ (8009638 <__libc_init_array+0x3c>)
 8009602:	1b64      	subs	r4, r4, r5
 8009604:	10a4      	asrs	r4, r4, #2
 8009606:	2600      	movs	r6, #0
 8009608:	42a6      	cmp	r6, r4
 800960a:	d109      	bne.n	8009620 <__libc_init_array+0x24>
 800960c:	4d0b      	ldr	r5, [pc, #44]	@ (800963c <__libc_init_array+0x40>)
 800960e:	4c0c      	ldr	r4, [pc, #48]	@ (8009640 <__libc_init_array+0x44>)
 8009610:	f004 f83a 	bl	800d688 <_init>
 8009614:	1b64      	subs	r4, r4, r5
 8009616:	10a4      	asrs	r4, r4, #2
 8009618:	2600      	movs	r6, #0
 800961a:	42a6      	cmp	r6, r4
 800961c:	d105      	bne.n	800962a <__libc_init_array+0x2e>
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	f855 3b04 	ldr.w	r3, [r5], #4
 8009624:	4798      	blx	r3
 8009626:	3601      	adds	r6, #1
 8009628:	e7ee      	b.n	8009608 <__libc_init_array+0xc>
 800962a:	f855 3b04 	ldr.w	r3, [r5], #4
 800962e:	4798      	blx	r3
 8009630:	3601      	adds	r6, #1
 8009632:	e7f2      	b.n	800961a <__libc_init_array+0x1e>
 8009634:	0800f410 	.word	0x0800f410
 8009638:	0800f410 	.word	0x0800f410
 800963c:	0800f410 	.word	0x0800f410
 8009640:	0800f414 	.word	0x0800f414

08009644 <__retarget_lock_init_recursive>:
 8009644:	4770      	bx	lr

08009646 <__retarget_lock_acquire_recursive>:
 8009646:	4770      	bx	lr

08009648 <__retarget_lock_release_recursive>:
 8009648:	4770      	bx	lr
	...

0800964c <nanf>:
 800964c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009654 <nanf+0x8>
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	7fc00000 	.word	0x7fc00000

08009658 <quorem>:
 8009658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	6903      	ldr	r3, [r0, #16]
 800965e:	690c      	ldr	r4, [r1, #16]
 8009660:	42a3      	cmp	r3, r4
 8009662:	4607      	mov	r7, r0
 8009664:	db7e      	blt.n	8009764 <quorem+0x10c>
 8009666:	3c01      	subs	r4, #1
 8009668:	f101 0814 	add.w	r8, r1, #20
 800966c:	00a3      	lsls	r3, r4, #2
 800966e:	f100 0514 	add.w	r5, r0, #20
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800967e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009682:	3301      	adds	r3, #1
 8009684:	429a      	cmp	r2, r3
 8009686:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800968a:	fbb2 f6f3 	udiv	r6, r2, r3
 800968e:	d32e      	bcc.n	80096ee <quorem+0x96>
 8009690:	f04f 0a00 	mov.w	sl, #0
 8009694:	46c4      	mov	ip, r8
 8009696:	46ae      	mov	lr, r5
 8009698:	46d3      	mov	fp, sl
 800969a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800969e:	b298      	uxth	r0, r3
 80096a0:	fb06 a000 	mla	r0, r6, r0, sl
 80096a4:	0c02      	lsrs	r2, r0, #16
 80096a6:	0c1b      	lsrs	r3, r3, #16
 80096a8:	fb06 2303 	mla	r3, r6, r3, r2
 80096ac:	f8de 2000 	ldr.w	r2, [lr]
 80096b0:	b280      	uxth	r0, r0
 80096b2:	b292      	uxth	r2, r2
 80096b4:	1a12      	subs	r2, r2, r0
 80096b6:	445a      	add	r2, fp
 80096b8:	f8de 0000 	ldr.w	r0, [lr]
 80096bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80096c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096ca:	b292      	uxth	r2, r2
 80096cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80096d0:	45e1      	cmp	r9, ip
 80096d2:	f84e 2b04 	str.w	r2, [lr], #4
 80096d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096da:	d2de      	bcs.n	800969a <quorem+0x42>
 80096dc:	9b00      	ldr	r3, [sp, #0]
 80096de:	58eb      	ldr	r3, [r5, r3]
 80096e0:	b92b      	cbnz	r3, 80096ee <quorem+0x96>
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	3b04      	subs	r3, #4
 80096e6:	429d      	cmp	r5, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	d32f      	bcc.n	800974c <quorem+0xf4>
 80096ec:	613c      	str	r4, [r7, #16]
 80096ee:	4638      	mov	r0, r7
 80096f0:	f001 f954 	bl	800a99c <__mcmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	db25      	blt.n	8009744 <quorem+0xec>
 80096f8:	4629      	mov	r1, r5
 80096fa:	2000      	movs	r0, #0
 80096fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009700:	f8d1 c000 	ldr.w	ip, [r1]
 8009704:	fa1f fe82 	uxth.w	lr, r2
 8009708:	fa1f f38c 	uxth.w	r3, ip
 800970c:	eba3 030e 	sub.w	r3, r3, lr
 8009710:	4403      	add	r3, r0
 8009712:	0c12      	lsrs	r2, r2, #16
 8009714:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009718:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800971c:	b29b      	uxth	r3, r3
 800971e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009722:	45c1      	cmp	r9, r8
 8009724:	f841 3b04 	str.w	r3, [r1], #4
 8009728:	ea4f 4022 	mov.w	r0, r2, asr #16
 800972c:	d2e6      	bcs.n	80096fc <quorem+0xa4>
 800972e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009736:	b922      	cbnz	r2, 8009742 <quorem+0xea>
 8009738:	3b04      	subs	r3, #4
 800973a:	429d      	cmp	r5, r3
 800973c:	461a      	mov	r2, r3
 800973e:	d30b      	bcc.n	8009758 <quorem+0x100>
 8009740:	613c      	str	r4, [r7, #16]
 8009742:	3601      	adds	r6, #1
 8009744:	4630      	mov	r0, r6
 8009746:	b003      	add	sp, #12
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	3b04      	subs	r3, #4
 8009750:	2a00      	cmp	r2, #0
 8009752:	d1cb      	bne.n	80096ec <quorem+0x94>
 8009754:	3c01      	subs	r4, #1
 8009756:	e7c6      	b.n	80096e6 <quorem+0x8e>
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	3b04      	subs	r3, #4
 800975c:	2a00      	cmp	r2, #0
 800975e:	d1ef      	bne.n	8009740 <quorem+0xe8>
 8009760:	3c01      	subs	r4, #1
 8009762:	e7ea      	b.n	800973a <quorem+0xe2>
 8009764:	2000      	movs	r0, #0
 8009766:	e7ee      	b.n	8009746 <quorem+0xee>

08009768 <_dtoa_r>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	ed2d 8b02 	vpush	{d8}
 8009770:	69c7      	ldr	r7, [r0, #28]
 8009772:	b091      	sub	sp, #68	@ 0x44
 8009774:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009778:	ec55 4b10 	vmov	r4, r5, d0
 800977c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800977e:	9107      	str	r1, [sp, #28]
 8009780:	4681      	mov	r9, r0
 8009782:	9209      	str	r2, [sp, #36]	@ 0x24
 8009784:	930d      	str	r3, [sp, #52]	@ 0x34
 8009786:	b97f      	cbnz	r7, 80097a8 <_dtoa_r+0x40>
 8009788:	2010      	movs	r0, #16
 800978a:	f000 fd8d 	bl	800a2a8 <malloc>
 800978e:	4602      	mov	r2, r0
 8009790:	f8c9 001c 	str.w	r0, [r9, #28]
 8009794:	b920      	cbnz	r0, 80097a0 <_dtoa_r+0x38>
 8009796:	4ba0      	ldr	r3, [pc, #640]	@ (8009a18 <_dtoa_r+0x2b0>)
 8009798:	21ef      	movs	r1, #239	@ 0xef
 800979a:	48a0      	ldr	r0, [pc, #640]	@ (8009a1c <_dtoa_r+0x2b4>)
 800979c:	f002 fb74 	bl	800be88 <__assert_func>
 80097a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80097a4:	6007      	str	r7, [r0, #0]
 80097a6:	60c7      	str	r7, [r0, #12]
 80097a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097ac:	6819      	ldr	r1, [r3, #0]
 80097ae:	b159      	cbz	r1, 80097c8 <_dtoa_r+0x60>
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	604a      	str	r2, [r1, #4]
 80097b4:	2301      	movs	r3, #1
 80097b6:	4093      	lsls	r3, r2
 80097b8:	608b      	str	r3, [r1, #8]
 80097ba:	4648      	mov	r0, r9
 80097bc:	f000 fe6a 	bl	800a494 <_Bfree>
 80097c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097c4:	2200      	movs	r2, #0
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	1e2b      	subs	r3, r5, #0
 80097ca:	bfbb      	ittet	lt
 80097cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80097d0:	9303      	strlt	r3, [sp, #12]
 80097d2:	2300      	movge	r3, #0
 80097d4:	2201      	movlt	r2, #1
 80097d6:	bfac      	ite	ge
 80097d8:	6033      	strge	r3, [r6, #0]
 80097da:	6032      	strlt	r2, [r6, #0]
 80097dc:	4b90      	ldr	r3, [pc, #576]	@ (8009a20 <_dtoa_r+0x2b8>)
 80097de:	9e03      	ldr	r6, [sp, #12]
 80097e0:	43b3      	bics	r3, r6
 80097e2:	d110      	bne.n	8009806 <_dtoa_r+0x9e>
 80097e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80097f0:	4323      	orrs	r3, r4
 80097f2:	f000 84de 	beq.w	800a1b2 <_dtoa_r+0xa4a>
 80097f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097f8:	4f8a      	ldr	r7, [pc, #552]	@ (8009a24 <_dtoa_r+0x2bc>)
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 84e0 	beq.w	800a1c0 <_dtoa_r+0xa58>
 8009800:	1cfb      	adds	r3, r7, #3
 8009802:	f000 bcdb 	b.w	800a1bc <_dtoa_r+0xa54>
 8009806:	ed9d 8b02 	vldr	d8, [sp, #8]
 800980a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800980e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009812:	d10a      	bne.n	800982a <_dtoa_r+0xc2>
 8009814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009816:	2301      	movs	r3, #1
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800981c:	b113      	cbz	r3, 8009824 <_dtoa_r+0xbc>
 800981e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009820:	4b81      	ldr	r3, [pc, #516]	@ (8009a28 <_dtoa_r+0x2c0>)
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	4f81      	ldr	r7, [pc, #516]	@ (8009a2c <_dtoa_r+0x2c4>)
 8009826:	f000 bccb 	b.w	800a1c0 <_dtoa_r+0xa58>
 800982a:	aa0e      	add	r2, sp, #56	@ 0x38
 800982c:	a90f      	add	r1, sp, #60	@ 0x3c
 800982e:	4648      	mov	r0, r9
 8009830:	eeb0 0b48 	vmov.f64	d0, d8
 8009834:	f001 f9d2 	bl	800abdc <__d2b>
 8009838:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800983c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800983e:	9001      	str	r0, [sp, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d045      	beq.n	80098d0 <_dtoa_r+0x168>
 8009844:	eeb0 7b48 	vmov.f64	d7, d8
 8009848:	ee18 1a90 	vmov	r1, s17
 800984c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009850:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009854:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009858:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800985c:	2500      	movs	r5, #0
 800985e:	ee07 1a90 	vmov	s15, r1
 8009862:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009866:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009a00 <_dtoa_r+0x298>
 800986a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800986e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009a08 <_dtoa_r+0x2a0>
 8009872:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009876:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009a10 <_dtoa_r+0x2a8>
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009882:	eeb0 7b46 	vmov.f64	d7, d6
 8009886:	eea4 7b05 	vfma.f64	d7, d4, d5
 800988a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800988e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009896:	ee16 8a90 	vmov	r8, s13
 800989a:	d508      	bpl.n	80098ae <_dtoa_r+0x146>
 800989c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80098a0:	eeb4 6b47 	vcmp.f64	d6, d7
 80098a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a8:	bf18      	it	ne
 80098aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 80098ae:	f1b8 0f16 	cmp.w	r8, #22
 80098b2:	d82b      	bhi.n	800990c <_dtoa_r+0x1a4>
 80098b4:	495e      	ldr	r1, [pc, #376]	@ (8009a30 <_dtoa_r+0x2c8>)
 80098b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80098ba:	ed91 7b00 	vldr	d7, [r1]
 80098be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80098c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c6:	d501      	bpl.n	80098cc <_dtoa_r+0x164>
 80098c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80098cc:	2100      	movs	r1, #0
 80098ce:	e01e      	b.n	800990e <_dtoa_r+0x1a6>
 80098d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098d2:	4413      	add	r3, r2
 80098d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80098d8:	2920      	cmp	r1, #32
 80098da:	bfc1      	itttt	gt
 80098dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80098e0:	408e      	lslgt	r6, r1
 80098e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80098e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80098ea:	bfd6      	itet	le
 80098ec:	f1c1 0120 	rsble	r1, r1, #32
 80098f0:	4331      	orrgt	r1, r6
 80098f2:	fa04 f101 	lslle.w	r1, r4, r1
 80098f6:	ee07 1a90 	vmov	s15, r1
 80098fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098fe:	3b01      	subs	r3, #1
 8009900:	ee17 1a90 	vmov	r1, s15
 8009904:	2501      	movs	r5, #1
 8009906:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800990a:	e7a8      	b.n	800985e <_dtoa_r+0xf6>
 800990c:	2101      	movs	r1, #1
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	1e53      	subs	r3, r2, #1
 8009912:	9306      	str	r3, [sp, #24]
 8009914:	bf45      	ittet	mi
 8009916:	f1c2 0301 	rsbmi	r3, r2, #1
 800991a:	9305      	strmi	r3, [sp, #20]
 800991c:	2300      	movpl	r3, #0
 800991e:	2300      	movmi	r3, #0
 8009920:	bf4c      	ite	mi
 8009922:	9306      	strmi	r3, [sp, #24]
 8009924:	9305      	strpl	r3, [sp, #20]
 8009926:	f1b8 0f00 	cmp.w	r8, #0
 800992a:	910c      	str	r1, [sp, #48]	@ 0x30
 800992c:	db18      	blt.n	8009960 <_dtoa_r+0x1f8>
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009934:	4443      	add	r3, r8
 8009936:	9306      	str	r3, [sp, #24]
 8009938:	2300      	movs	r3, #0
 800993a:	9a07      	ldr	r2, [sp, #28]
 800993c:	2a09      	cmp	r2, #9
 800993e:	d849      	bhi.n	80099d4 <_dtoa_r+0x26c>
 8009940:	2a05      	cmp	r2, #5
 8009942:	bfc4      	itt	gt
 8009944:	3a04      	subgt	r2, #4
 8009946:	9207      	strgt	r2, [sp, #28]
 8009948:	9a07      	ldr	r2, [sp, #28]
 800994a:	f1a2 0202 	sub.w	r2, r2, #2
 800994e:	bfcc      	ite	gt
 8009950:	2400      	movgt	r4, #0
 8009952:	2401      	movle	r4, #1
 8009954:	2a03      	cmp	r2, #3
 8009956:	d848      	bhi.n	80099ea <_dtoa_r+0x282>
 8009958:	e8df f002 	tbb	[pc, r2]
 800995c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009960:	9b05      	ldr	r3, [sp, #20]
 8009962:	2200      	movs	r2, #0
 8009964:	eba3 0308 	sub.w	r3, r3, r8
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	920a      	str	r2, [sp, #40]	@ 0x28
 800996c:	f1c8 0300 	rsb	r3, r8, #0
 8009970:	e7e3      	b.n	800993a <_dtoa_r+0x1d2>
 8009972:	2200      	movs	r2, #0
 8009974:	9208      	str	r2, [sp, #32]
 8009976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009978:	2a00      	cmp	r2, #0
 800997a:	dc39      	bgt.n	80099f0 <_dtoa_r+0x288>
 800997c:	f04f 0b01 	mov.w	fp, #1
 8009980:	46da      	mov	sl, fp
 8009982:	465a      	mov	r2, fp
 8009984:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009988:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800998c:	2100      	movs	r1, #0
 800998e:	2004      	movs	r0, #4
 8009990:	f100 0614 	add.w	r6, r0, #20
 8009994:	4296      	cmp	r6, r2
 8009996:	d930      	bls.n	80099fa <_dtoa_r+0x292>
 8009998:	6079      	str	r1, [r7, #4]
 800999a:	4648      	mov	r0, r9
 800999c:	9304      	str	r3, [sp, #16]
 800999e:	f000 fd39 	bl	800a414 <_Balloc>
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	4607      	mov	r7, r0
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d146      	bne.n	8009a38 <_dtoa_r+0x2d0>
 80099aa:	4b22      	ldr	r3, [pc, #136]	@ (8009a34 <_dtoa_r+0x2cc>)
 80099ac:	4602      	mov	r2, r0
 80099ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80099b2:	e6f2      	b.n	800979a <_dtoa_r+0x32>
 80099b4:	2201      	movs	r2, #1
 80099b6:	e7dd      	b.n	8009974 <_dtoa_r+0x20c>
 80099b8:	2200      	movs	r2, #0
 80099ba:	9208      	str	r2, [sp, #32]
 80099bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099be:	eb08 0b02 	add.w	fp, r8, r2
 80099c2:	f10b 0a01 	add.w	sl, fp, #1
 80099c6:	4652      	mov	r2, sl
 80099c8:	2a01      	cmp	r2, #1
 80099ca:	bfb8      	it	lt
 80099cc:	2201      	movlt	r2, #1
 80099ce:	e7db      	b.n	8009988 <_dtoa_r+0x220>
 80099d0:	2201      	movs	r2, #1
 80099d2:	e7f2      	b.n	80099ba <_dtoa_r+0x252>
 80099d4:	2401      	movs	r4, #1
 80099d6:	2200      	movs	r2, #0
 80099d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80099dc:	f04f 3bff 	mov.w	fp, #4294967295
 80099e0:	2100      	movs	r1, #0
 80099e2:	46da      	mov	sl, fp
 80099e4:	2212      	movs	r2, #18
 80099e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80099e8:	e7ce      	b.n	8009988 <_dtoa_r+0x220>
 80099ea:	2201      	movs	r2, #1
 80099ec:	9208      	str	r2, [sp, #32]
 80099ee:	e7f5      	b.n	80099dc <_dtoa_r+0x274>
 80099f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80099f4:	46da      	mov	sl, fp
 80099f6:	465a      	mov	r2, fp
 80099f8:	e7c6      	b.n	8009988 <_dtoa_r+0x220>
 80099fa:	3101      	adds	r1, #1
 80099fc:	0040      	lsls	r0, r0, #1
 80099fe:	e7c7      	b.n	8009990 <_dtoa_r+0x228>
 8009a00:	636f4361 	.word	0x636f4361
 8009a04:	3fd287a7 	.word	0x3fd287a7
 8009a08:	8b60c8b3 	.word	0x8b60c8b3
 8009a0c:	3fc68a28 	.word	0x3fc68a28
 8009a10:	509f79fb 	.word	0x509f79fb
 8009a14:	3fd34413 	.word	0x3fd34413
 8009a18:	0800d72e 	.word	0x0800d72e
 8009a1c:	0800d745 	.word	0x0800d745
 8009a20:	7ff00000 	.word	0x7ff00000
 8009a24:	0800d72a 	.word	0x0800d72a
 8009a28:	0800d6f9 	.word	0x0800d6f9
 8009a2c:	0800d6f8 	.word	0x0800d6f8
 8009a30:	0800d840 	.word	0x0800d840
 8009a34:	0800d79d 	.word	0x0800d79d
 8009a38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009a3c:	f1ba 0f0e 	cmp.w	sl, #14
 8009a40:	6010      	str	r0, [r2, #0]
 8009a42:	d86f      	bhi.n	8009b24 <_dtoa_r+0x3bc>
 8009a44:	2c00      	cmp	r4, #0
 8009a46:	d06d      	beq.n	8009b24 <_dtoa_r+0x3bc>
 8009a48:	f1b8 0f00 	cmp.w	r8, #0
 8009a4c:	f340 80c2 	ble.w	8009bd4 <_dtoa_r+0x46c>
 8009a50:	4aca      	ldr	r2, [pc, #808]	@ (8009d7c <_dtoa_r+0x614>)
 8009a52:	f008 010f 	and.w	r1, r8, #15
 8009a56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009a5e:	ed92 7b00 	vldr	d7, [r2]
 8009a62:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009a66:	f000 80a9 	beq.w	8009bbc <_dtoa_r+0x454>
 8009a6a:	4ac5      	ldr	r2, [pc, #788]	@ (8009d80 <_dtoa_r+0x618>)
 8009a6c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009a74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a78:	f001 010f 	and.w	r1, r1, #15
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	48c0      	ldr	r0, [pc, #768]	@ (8009d80 <_dtoa_r+0x618>)
 8009a80:	2900      	cmp	r1, #0
 8009a82:	f040 809d 	bne.w	8009bc0 <_dtoa_r+0x458>
 8009a86:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a98:	2900      	cmp	r1, #0
 8009a9a:	f000 80c1 	beq.w	8009c20 <_dtoa_r+0x4b8>
 8009a9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009aa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aaa:	f140 80b9 	bpl.w	8009c20 <_dtoa_r+0x4b8>
 8009aae:	f1ba 0f00 	cmp.w	sl, #0
 8009ab2:	f000 80b5 	beq.w	8009c20 <_dtoa_r+0x4b8>
 8009ab6:	f1bb 0f00 	cmp.w	fp, #0
 8009aba:	dd31      	ble.n	8009b20 <_dtoa_r+0x3b8>
 8009abc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ac4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ac8:	f108 31ff 	add.w	r1, r8, #4294967295
 8009acc:	9104      	str	r1, [sp, #16]
 8009ace:	3201      	adds	r2, #1
 8009ad0:	465c      	mov	r4, fp
 8009ad2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ad6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009ada:	ee07 2a90 	vmov	s15, r2
 8009ade:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ae2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009ae6:	ee15 2a90 	vmov	r2, s11
 8009aea:	ec51 0b15 	vmov	r0, r1, d5
 8009aee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009af2:	2c00      	cmp	r4, #0
 8009af4:	f040 8098 	bne.w	8009c28 <_dtoa_r+0x4c0>
 8009af8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009afc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b00:	ec41 0b17 	vmov	d7, r0, r1
 8009b04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b0c:	f300 8261 	bgt.w	8009fd2 <_dtoa_r+0x86a>
 8009b10:	eeb1 7b47 	vneg.f64	d7, d7
 8009b14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1c:	f100 80f5 	bmi.w	8009d0a <_dtoa_r+0x5a2>
 8009b20:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	f2c0 812c 	blt.w	8009d84 <_dtoa_r+0x61c>
 8009b2c:	f1b8 0f0e 	cmp.w	r8, #14
 8009b30:	f300 8128 	bgt.w	8009d84 <_dtoa_r+0x61c>
 8009b34:	4b91      	ldr	r3, [pc, #580]	@ (8009d7c <_dtoa_r+0x614>)
 8009b36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b3a:	ed93 6b00 	vldr	d6, [r3]
 8009b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	da03      	bge.n	8009b4c <_dtoa_r+0x3e4>
 8009b44:	f1ba 0f00 	cmp.w	sl, #0
 8009b48:	f340 80d2 	ble.w	8009cf0 <_dtoa_r+0x588>
 8009b4c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b54:	463e      	mov	r6, r7
 8009b56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009b5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009b5e:	ee15 3a10 	vmov	r3, s10
 8009b62:	3330      	adds	r3, #48	@ 0x30
 8009b64:	f806 3b01 	strb.w	r3, [r6], #1
 8009b68:	1bf3      	subs	r3, r6, r7
 8009b6a:	459a      	cmp	sl, r3
 8009b6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009b70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009b74:	f040 80f8 	bne.w	8009d68 <_dtoa_r+0x600>
 8009b78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009b7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b84:	f300 80dd 	bgt.w	8009d42 <_dtoa_r+0x5da>
 8009b88:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b90:	d104      	bne.n	8009b9c <_dtoa_r+0x434>
 8009b92:	ee15 3a10 	vmov	r3, s10
 8009b96:	07db      	lsls	r3, r3, #31
 8009b98:	f100 80d3 	bmi.w	8009d42 <_dtoa_r+0x5da>
 8009b9c:	9901      	ldr	r1, [sp, #4]
 8009b9e:	4648      	mov	r0, r9
 8009ba0:	f000 fc78 	bl	800a494 <_Bfree>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ba8:	7033      	strb	r3, [r6, #0]
 8009baa:	f108 0301 	add.w	r3, r8, #1
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 8304 	beq.w	800a1c0 <_dtoa_r+0xa58>
 8009bb8:	601e      	str	r6, [r3, #0]
 8009bba:	e301      	b.n	800a1c0 <_dtoa_r+0xa58>
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	e75e      	b.n	8009a7e <_dtoa_r+0x316>
 8009bc0:	07cc      	lsls	r4, r1, #31
 8009bc2:	d504      	bpl.n	8009bce <_dtoa_r+0x466>
 8009bc4:	ed90 6b00 	vldr	d6, [r0]
 8009bc8:	3201      	adds	r2, #1
 8009bca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bce:	1049      	asrs	r1, r1, #1
 8009bd0:	3008      	adds	r0, #8
 8009bd2:	e755      	b.n	8009a80 <_dtoa_r+0x318>
 8009bd4:	d022      	beq.n	8009c1c <_dtoa_r+0x4b4>
 8009bd6:	f1c8 0100 	rsb	r1, r8, #0
 8009bda:	4a68      	ldr	r2, [pc, #416]	@ (8009d7c <_dtoa_r+0x614>)
 8009bdc:	f001 000f 	and.w	r0, r1, #15
 8009be0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009be4:	ed92 7b00 	vldr	d7, [r2]
 8009be8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009bec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bf0:	4863      	ldr	r0, [pc, #396]	@ (8009d80 <_dtoa_r+0x618>)
 8009bf2:	1109      	asrs	r1, r1, #4
 8009bf4:	2400      	movs	r4, #0
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	b929      	cbnz	r1, 8009c06 <_dtoa_r+0x49e>
 8009bfa:	2c00      	cmp	r4, #0
 8009bfc:	f43f af49 	beq.w	8009a92 <_dtoa_r+0x32a>
 8009c00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c04:	e745      	b.n	8009a92 <_dtoa_r+0x32a>
 8009c06:	07ce      	lsls	r6, r1, #31
 8009c08:	d505      	bpl.n	8009c16 <_dtoa_r+0x4ae>
 8009c0a:	ed90 6b00 	vldr	d6, [r0]
 8009c0e:	3201      	adds	r2, #1
 8009c10:	2401      	movs	r4, #1
 8009c12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c16:	1049      	asrs	r1, r1, #1
 8009c18:	3008      	adds	r0, #8
 8009c1a:	e7ed      	b.n	8009bf8 <_dtoa_r+0x490>
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	e738      	b.n	8009a92 <_dtoa_r+0x32a>
 8009c20:	f8cd 8010 	str.w	r8, [sp, #16]
 8009c24:	4654      	mov	r4, sl
 8009c26:	e754      	b.n	8009ad2 <_dtoa_r+0x36a>
 8009c28:	4a54      	ldr	r2, [pc, #336]	@ (8009d7c <_dtoa_r+0x614>)
 8009c2a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009c2e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009c32:	9a08      	ldr	r2, [sp, #32]
 8009c34:	ec41 0b17 	vmov	d7, r0, r1
 8009c38:	443c      	add	r4, r7
 8009c3a:	b34a      	cbz	r2, 8009c90 <_dtoa_r+0x528>
 8009c3c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009c40:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009c44:	463e      	mov	r6, r7
 8009c46:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c4a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c4e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c52:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c56:	ee14 2a90 	vmov	r2, s9
 8009c5a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c5e:	3230      	adds	r2, #48	@ 0x30
 8009c60:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6c:	f806 2b01 	strb.w	r2, [r6], #1
 8009c70:	d438      	bmi.n	8009ce4 <_dtoa_r+0x57c>
 8009c72:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c76:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7e:	d462      	bmi.n	8009d46 <_dtoa_r+0x5de>
 8009c80:	42a6      	cmp	r6, r4
 8009c82:	f43f af4d 	beq.w	8009b20 <_dtoa_r+0x3b8>
 8009c86:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009c8a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c8e:	e7e0      	b.n	8009c52 <_dtoa_r+0x4ea>
 8009c90:	4621      	mov	r1, r4
 8009c92:	463e      	mov	r6, r7
 8009c94:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c98:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c9c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ca0:	ee14 2a90 	vmov	r2, s9
 8009ca4:	3230      	adds	r2, #48	@ 0x30
 8009ca6:	f806 2b01 	strb.w	r2, [r6], #1
 8009caa:	42a6      	cmp	r6, r4
 8009cac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009cb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009cb4:	d119      	bne.n	8009cea <_dtoa_r+0x582>
 8009cb6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009cba:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009cbe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc6:	dc3e      	bgt.n	8009d46 <_dtoa_r+0x5de>
 8009cc8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009ccc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd4:	f57f af24 	bpl.w	8009b20 <_dtoa_r+0x3b8>
 8009cd8:	460e      	mov	r6, r1
 8009cda:	3901      	subs	r1, #1
 8009cdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ce0:	2b30      	cmp	r3, #48	@ 0x30
 8009ce2:	d0f9      	beq.n	8009cd8 <_dtoa_r+0x570>
 8009ce4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009ce8:	e758      	b.n	8009b9c <_dtoa_r+0x434>
 8009cea:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009cee:	e7d5      	b.n	8009c9c <_dtoa_r+0x534>
 8009cf0:	d10b      	bne.n	8009d0a <_dtoa_r+0x5a2>
 8009cf2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009cf6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009cfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d06:	f2c0 8161 	blt.w	8009fcc <_dtoa_r+0x864>
 8009d0a:	2400      	movs	r4, #0
 8009d0c:	4625      	mov	r5, r4
 8009d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d10:	43db      	mvns	r3, r3
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	463e      	mov	r6, r7
 8009d16:	f04f 0800 	mov.w	r8, #0
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4648      	mov	r0, r9
 8009d1e:	f000 fbb9 	bl	800a494 <_Bfree>
 8009d22:	2d00      	cmp	r5, #0
 8009d24:	d0de      	beq.n	8009ce4 <_dtoa_r+0x57c>
 8009d26:	f1b8 0f00 	cmp.w	r8, #0
 8009d2a:	d005      	beq.n	8009d38 <_dtoa_r+0x5d0>
 8009d2c:	45a8      	cmp	r8, r5
 8009d2e:	d003      	beq.n	8009d38 <_dtoa_r+0x5d0>
 8009d30:	4641      	mov	r1, r8
 8009d32:	4648      	mov	r0, r9
 8009d34:	f000 fbae 	bl	800a494 <_Bfree>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4648      	mov	r0, r9
 8009d3c:	f000 fbaa 	bl	800a494 <_Bfree>
 8009d40:	e7d0      	b.n	8009ce4 <_dtoa_r+0x57c>
 8009d42:	f8cd 8010 	str.w	r8, [sp, #16]
 8009d46:	4633      	mov	r3, r6
 8009d48:	461e      	mov	r6, r3
 8009d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d4e:	2a39      	cmp	r2, #57	@ 0x39
 8009d50:	d106      	bne.n	8009d60 <_dtoa_r+0x5f8>
 8009d52:	429f      	cmp	r7, r3
 8009d54:	d1f8      	bne.n	8009d48 <_dtoa_r+0x5e0>
 8009d56:	9a04      	ldr	r2, [sp, #16]
 8009d58:	3201      	adds	r2, #1
 8009d5a:	9204      	str	r2, [sp, #16]
 8009d5c:	2230      	movs	r2, #48	@ 0x30
 8009d5e:	703a      	strb	r2, [r7, #0]
 8009d60:	781a      	ldrb	r2, [r3, #0]
 8009d62:	3201      	adds	r2, #1
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e7bd      	b.n	8009ce4 <_dtoa_r+0x57c>
 8009d68:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d74:	f47f aeef 	bne.w	8009b56 <_dtoa_r+0x3ee>
 8009d78:	e710      	b.n	8009b9c <_dtoa_r+0x434>
 8009d7a:	bf00      	nop
 8009d7c:	0800d840 	.word	0x0800d840
 8009d80:	0800d818 	.word	0x0800d818
 8009d84:	9908      	ldr	r1, [sp, #32]
 8009d86:	2900      	cmp	r1, #0
 8009d88:	f000 80e3 	beq.w	8009f52 <_dtoa_r+0x7ea>
 8009d8c:	9907      	ldr	r1, [sp, #28]
 8009d8e:	2901      	cmp	r1, #1
 8009d90:	f300 80c8 	bgt.w	8009f24 <_dtoa_r+0x7bc>
 8009d94:	2d00      	cmp	r5, #0
 8009d96:	f000 80c1 	beq.w	8009f1c <_dtoa_r+0x7b4>
 8009d9a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d9e:	9e05      	ldr	r6, [sp, #20]
 8009da0:	461c      	mov	r4, r3
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	9b05      	ldr	r3, [sp, #20]
 8009da6:	4413      	add	r3, r2
 8009da8:	9305      	str	r3, [sp, #20]
 8009daa:	9b06      	ldr	r3, [sp, #24]
 8009dac:	2101      	movs	r1, #1
 8009dae:	4413      	add	r3, r2
 8009db0:	4648      	mov	r0, r9
 8009db2:	9306      	str	r3, [sp, #24]
 8009db4:	f000 fc6c 	bl	800a690 <__i2b>
 8009db8:	9b04      	ldr	r3, [sp, #16]
 8009dba:	4605      	mov	r5, r0
 8009dbc:	b166      	cbz	r6, 8009dd8 <_dtoa_r+0x670>
 8009dbe:	9a06      	ldr	r2, [sp, #24]
 8009dc0:	2a00      	cmp	r2, #0
 8009dc2:	dd09      	ble.n	8009dd8 <_dtoa_r+0x670>
 8009dc4:	42b2      	cmp	r2, r6
 8009dc6:	9905      	ldr	r1, [sp, #20]
 8009dc8:	bfa8      	it	ge
 8009dca:	4632      	movge	r2, r6
 8009dcc:	1a89      	subs	r1, r1, r2
 8009dce:	9105      	str	r1, [sp, #20]
 8009dd0:	9906      	ldr	r1, [sp, #24]
 8009dd2:	1ab6      	subs	r6, r6, r2
 8009dd4:	1a8a      	subs	r2, r1, r2
 8009dd6:	9206      	str	r2, [sp, #24]
 8009dd8:	b1fb      	cbz	r3, 8009e1a <_dtoa_r+0x6b2>
 8009dda:	9a08      	ldr	r2, [sp, #32]
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	f000 80bc 	beq.w	8009f5a <_dtoa_r+0x7f2>
 8009de2:	b19c      	cbz	r4, 8009e0c <_dtoa_r+0x6a4>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4622      	mov	r2, r4
 8009de8:	4648      	mov	r0, r9
 8009dea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dec:	f000 fd10 	bl	800a810 <__pow5mult>
 8009df0:	9a01      	ldr	r2, [sp, #4]
 8009df2:	4601      	mov	r1, r0
 8009df4:	4605      	mov	r5, r0
 8009df6:	4648      	mov	r0, r9
 8009df8:	f000 fc60 	bl	800a6bc <__multiply>
 8009dfc:	9901      	ldr	r1, [sp, #4]
 8009dfe:	9004      	str	r0, [sp, #16]
 8009e00:	4648      	mov	r0, r9
 8009e02:	f000 fb47 	bl	800a494 <_Bfree>
 8009e06:	9a04      	ldr	r2, [sp, #16]
 8009e08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e0a:	9201      	str	r2, [sp, #4]
 8009e0c:	1b1a      	subs	r2, r3, r4
 8009e0e:	d004      	beq.n	8009e1a <_dtoa_r+0x6b2>
 8009e10:	9901      	ldr	r1, [sp, #4]
 8009e12:	4648      	mov	r0, r9
 8009e14:	f000 fcfc 	bl	800a810 <__pow5mult>
 8009e18:	9001      	str	r0, [sp, #4]
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	4648      	mov	r0, r9
 8009e1e:	f000 fc37 	bl	800a690 <__i2b>
 8009e22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e24:	4604      	mov	r4, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 81d0 	beq.w	800a1cc <_dtoa_r+0xa64>
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4601      	mov	r1, r0
 8009e30:	4648      	mov	r0, r9
 8009e32:	f000 fced 	bl	800a810 <__pow5mult>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	f300 8095 	bgt.w	8009f6a <_dtoa_r+0x802>
 8009e40:	9b02      	ldr	r3, [sp, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f040 808b 	bne.w	8009f5e <_dtoa_r+0x7f6>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009e4e:	2a00      	cmp	r2, #0
 8009e50:	f040 8087 	bne.w	8009f62 <_dtoa_r+0x7fa>
 8009e54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e58:	0d12      	lsrs	r2, r2, #20
 8009e5a:	0512      	lsls	r2, r2, #20
 8009e5c:	2a00      	cmp	r2, #0
 8009e5e:	f000 8082 	beq.w	8009f66 <_dtoa_r+0x7fe>
 8009e62:	9b05      	ldr	r3, [sp, #20]
 8009e64:	3301      	adds	r3, #1
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	9b06      	ldr	r3, [sp, #24]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	9306      	str	r3, [sp, #24]
 8009e6e:	2301      	movs	r3, #1
 8009e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 81af 	beq.w	800a1d8 <_dtoa_r+0xa70>
 8009e7a:	6922      	ldr	r2, [r4, #16]
 8009e7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e80:	6910      	ldr	r0, [r2, #16]
 8009e82:	f000 fbb9 	bl	800a5f8 <__hi0bits>
 8009e86:	f1c0 0020 	rsb	r0, r0, #32
 8009e8a:	9b06      	ldr	r3, [sp, #24]
 8009e8c:	4418      	add	r0, r3
 8009e8e:	f010 001f 	ands.w	r0, r0, #31
 8009e92:	d076      	beq.n	8009f82 <_dtoa_r+0x81a>
 8009e94:	f1c0 0220 	rsb	r2, r0, #32
 8009e98:	2a04      	cmp	r2, #4
 8009e9a:	dd69      	ble.n	8009f70 <_dtoa_r+0x808>
 8009e9c:	9b05      	ldr	r3, [sp, #20]
 8009e9e:	f1c0 001c 	rsb	r0, r0, #28
 8009ea2:	4403      	add	r3, r0
 8009ea4:	9305      	str	r3, [sp, #20]
 8009ea6:	9b06      	ldr	r3, [sp, #24]
 8009ea8:	4406      	add	r6, r0
 8009eaa:	4403      	add	r3, r0
 8009eac:	9306      	str	r3, [sp, #24]
 8009eae:	9b05      	ldr	r3, [sp, #20]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dd05      	ble.n	8009ec0 <_dtoa_r+0x758>
 8009eb4:	9901      	ldr	r1, [sp, #4]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	4648      	mov	r0, r9
 8009eba:	f000 fd03 	bl	800a8c4 <__lshift>
 8009ebe:	9001      	str	r0, [sp, #4]
 8009ec0:	9b06      	ldr	r3, [sp, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	dd05      	ble.n	8009ed2 <_dtoa_r+0x76a>
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4648      	mov	r0, r9
 8009ecc:	f000 fcfa 	bl	800a8c4 <__lshift>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d056      	beq.n	8009f86 <_dtoa_r+0x81e>
 8009ed8:	9801      	ldr	r0, [sp, #4]
 8009eda:	4621      	mov	r1, r4
 8009edc:	f000 fd5e 	bl	800a99c <__mcmp>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	da50      	bge.n	8009f86 <_dtoa_r+0x81e>
 8009ee4:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	9901      	ldr	r1, [sp, #4]
 8009eec:	2300      	movs	r3, #0
 8009eee:	220a      	movs	r2, #10
 8009ef0:	4648      	mov	r0, r9
 8009ef2:	f000 faf1 	bl	800a4d8 <__multadd>
 8009ef6:	9b08      	ldr	r3, [sp, #32]
 8009ef8:	9001      	str	r0, [sp, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 816e 	beq.w	800a1dc <_dtoa_r+0xa74>
 8009f00:	4629      	mov	r1, r5
 8009f02:	2300      	movs	r3, #0
 8009f04:	220a      	movs	r2, #10
 8009f06:	4648      	mov	r0, r9
 8009f08:	f000 fae6 	bl	800a4d8 <__multadd>
 8009f0c:	f1bb 0f00 	cmp.w	fp, #0
 8009f10:	4605      	mov	r5, r0
 8009f12:	dc64      	bgt.n	8009fde <_dtoa_r+0x876>
 8009f14:	9b07      	ldr	r3, [sp, #28]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	dc3e      	bgt.n	8009f98 <_dtoa_r+0x830>
 8009f1a:	e060      	b.n	8009fde <_dtoa_r+0x876>
 8009f1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009f22:	e73c      	b.n	8009d9e <_dtoa_r+0x636>
 8009f24:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	bfbf      	itttt	lt
 8009f2c:	1ae2      	sublt	r2, r4, r3
 8009f2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f30:	189b      	addlt	r3, r3, r2
 8009f32:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009f34:	bfae      	itee	ge
 8009f36:	1b1c      	subge	r4, r3, r4
 8009f38:	4623      	movlt	r3, r4
 8009f3a:	2400      	movlt	r4, #0
 8009f3c:	f1ba 0f00 	cmp.w	sl, #0
 8009f40:	bfb5      	itete	lt
 8009f42:	9a05      	ldrlt	r2, [sp, #20]
 8009f44:	9e05      	ldrge	r6, [sp, #20]
 8009f46:	eba2 060a 	sublt.w	r6, r2, sl
 8009f4a:	4652      	movge	r2, sl
 8009f4c:	bfb8      	it	lt
 8009f4e:	2200      	movlt	r2, #0
 8009f50:	e727      	b.n	8009da2 <_dtoa_r+0x63a>
 8009f52:	9e05      	ldr	r6, [sp, #20]
 8009f54:	9d08      	ldr	r5, [sp, #32]
 8009f56:	461c      	mov	r4, r3
 8009f58:	e730      	b.n	8009dbc <_dtoa_r+0x654>
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	e758      	b.n	8009e10 <_dtoa_r+0x6a8>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e786      	b.n	8009e70 <_dtoa_r+0x708>
 8009f62:	9b02      	ldr	r3, [sp, #8]
 8009f64:	e784      	b.n	8009e70 <_dtoa_r+0x708>
 8009f66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f68:	e783      	b.n	8009e72 <_dtoa_r+0x70a>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f6e:	e784      	b.n	8009e7a <_dtoa_r+0x712>
 8009f70:	d09d      	beq.n	8009eae <_dtoa_r+0x746>
 8009f72:	9b05      	ldr	r3, [sp, #20]
 8009f74:	321c      	adds	r2, #28
 8009f76:	4413      	add	r3, r2
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	4416      	add	r6, r2
 8009f7e:	4413      	add	r3, r2
 8009f80:	e794      	b.n	8009eac <_dtoa_r+0x744>
 8009f82:	4602      	mov	r2, r0
 8009f84:	e7f5      	b.n	8009f72 <_dtoa_r+0x80a>
 8009f86:	f1ba 0f00 	cmp.w	sl, #0
 8009f8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f8e:	46d3      	mov	fp, sl
 8009f90:	dc21      	bgt.n	8009fd6 <_dtoa_r+0x86e>
 8009f92:	9b07      	ldr	r3, [sp, #28]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	dd1e      	ble.n	8009fd6 <_dtoa_r+0x86e>
 8009f98:	f1bb 0f00 	cmp.w	fp, #0
 8009f9c:	f47f aeb7 	bne.w	8009d0e <_dtoa_r+0x5a6>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	2205      	movs	r2, #5
 8009fa6:	4648      	mov	r0, r9
 8009fa8:	f000 fa96 	bl	800a4d8 <__multadd>
 8009fac:	4601      	mov	r1, r0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	9801      	ldr	r0, [sp, #4]
 8009fb2:	f000 fcf3 	bl	800a99c <__mcmp>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f77f aea9 	ble.w	8009d0e <_dtoa_r+0x5a6>
 8009fbc:	463e      	mov	r6, r7
 8009fbe:	2331      	movs	r3, #49	@ 0x31
 8009fc0:	f806 3b01 	strb.w	r3, [r6], #1
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	9304      	str	r3, [sp, #16]
 8009fca:	e6a4      	b.n	8009d16 <_dtoa_r+0x5ae>
 8009fcc:	f8cd 8010 	str.w	r8, [sp, #16]
 8009fd0:	4654      	mov	r4, sl
 8009fd2:	4625      	mov	r5, r4
 8009fd4:	e7f2      	b.n	8009fbc <_dtoa_r+0x854>
 8009fd6:	9b08      	ldr	r3, [sp, #32]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8103 	beq.w	800a1e4 <_dtoa_r+0xa7c>
 8009fde:	2e00      	cmp	r6, #0
 8009fe0:	dd05      	ble.n	8009fee <_dtoa_r+0x886>
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	4648      	mov	r0, r9
 8009fe8:	f000 fc6c 	bl	800a8c4 <__lshift>
 8009fec:	4605      	mov	r5, r0
 8009fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d058      	beq.n	800a0a6 <_dtoa_r+0x93e>
 8009ff4:	6869      	ldr	r1, [r5, #4]
 8009ff6:	4648      	mov	r0, r9
 8009ff8:	f000 fa0c 	bl	800a414 <_Balloc>
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	b928      	cbnz	r0, 800a00c <_dtoa_r+0x8a4>
 800a000:	4b82      	ldr	r3, [pc, #520]	@ (800a20c <_dtoa_r+0xaa4>)
 800a002:	4602      	mov	r2, r0
 800a004:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a008:	f7ff bbc7 	b.w	800979a <_dtoa_r+0x32>
 800a00c:	692a      	ldr	r2, [r5, #16]
 800a00e:	3202      	adds	r2, #2
 800a010:	0092      	lsls	r2, r2, #2
 800a012:	f105 010c 	add.w	r1, r5, #12
 800a016:	300c      	adds	r0, #12
 800a018:	f001 ff1e 	bl	800be58 <memcpy>
 800a01c:	2201      	movs	r2, #1
 800a01e:	4631      	mov	r1, r6
 800a020:	4648      	mov	r0, r9
 800a022:	f000 fc4f 	bl	800a8c4 <__lshift>
 800a026:	1c7b      	adds	r3, r7, #1
 800a028:	9305      	str	r3, [sp, #20]
 800a02a:	eb07 030b 	add.w	r3, r7, fp
 800a02e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a030:	9b02      	ldr	r3, [sp, #8]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	46a8      	mov	r8, r5
 800a038:	9308      	str	r3, [sp, #32]
 800a03a:	4605      	mov	r5, r0
 800a03c:	9b05      	ldr	r3, [sp, #20]
 800a03e:	9801      	ldr	r0, [sp, #4]
 800a040:	4621      	mov	r1, r4
 800a042:	f103 3bff 	add.w	fp, r3, #4294967295
 800a046:	f7ff fb07 	bl	8009658 <quorem>
 800a04a:	4641      	mov	r1, r8
 800a04c:	9002      	str	r0, [sp, #8]
 800a04e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a052:	9801      	ldr	r0, [sp, #4]
 800a054:	f000 fca2 	bl	800a99c <__mcmp>
 800a058:	462a      	mov	r2, r5
 800a05a:	9006      	str	r0, [sp, #24]
 800a05c:	4621      	mov	r1, r4
 800a05e:	4648      	mov	r0, r9
 800a060:	f000 fcb8 	bl	800a9d4 <__mdiff>
 800a064:	68c2      	ldr	r2, [r0, #12]
 800a066:	4606      	mov	r6, r0
 800a068:	b9fa      	cbnz	r2, 800a0aa <_dtoa_r+0x942>
 800a06a:	4601      	mov	r1, r0
 800a06c:	9801      	ldr	r0, [sp, #4]
 800a06e:	f000 fc95 	bl	800a99c <__mcmp>
 800a072:	4602      	mov	r2, r0
 800a074:	4631      	mov	r1, r6
 800a076:	4648      	mov	r0, r9
 800a078:	920a      	str	r2, [sp, #40]	@ 0x28
 800a07a:	f000 fa0b 	bl	800a494 <_Bfree>
 800a07e:	9b07      	ldr	r3, [sp, #28]
 800a080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a082:	9e05      	ldr	r6, [sp, #20]
 800a084:	ea43 0102 	orr.w	r1, r3, r2
 800a088:	9b08      	ldr	r3, [sp, #32]
 800a08a:	4319      	orrs	r1, r3
 800a08c:	d10f      	bne.n	800a0ae <_dtoa_r+0x946>
 800a08e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a092:	d028      	beq.n	800a0e6 <_dtoa_r+0x97e>
 800a094:	9b06      	ldr	r3, [sp, #24]
 800a096:	2b00      	cmp	r3, #0
 800a098:	dd02      	ble.n	800a0a0 <_dtoa_r+0x938>
 800a09a:	9b02      	ldr	r3, [sp, #8]
 800a09c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a0a0:	f88b a000 	strb.w	sl, [fp]
 800a0a4:	e639      	b.n	8009d1a <_dtoa_r+0x5b2>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	e7bd      	b.n	800a026 <_dtoa_r+0x8be>
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	e7e2      	b.n	800a074 <_dtoa_r+0x90c>
 800a0ae:	9b06      	ldr	r3, [sp, #24]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	db04      	blt.n	800a0be <_dtoa_r+0x956>
 800a0b4:	9907      	ldr	r1, [sp, #28]
 800a0b6:	430b      	orrs	r3, r1
 800a0b8:	9908      	ldr	r1, [sp, #32]
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	d120      	bne.n	800a100 <_dtoa_r+0x998>
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	ddee      	ble.n	800a0a0 <_dtoa_r+0x938>
 800a0c2:	9901      	ldr	r1, [sp, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	4648      	mov	r0, r9
 800a0c8:	f000 fbfc 	bl	800a8c4 <__lshift>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	9001      	str	r0, [sp, #4]
 800a0d0:	f000 fc64 	bl	800a99c <__mcmp>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	dc03      	bgt.n	800a0e0 <_dtoa_r+0x978>
 800a0d8:	d1e2      	bne.n	800a0a0 <_dtoa_r+0x938>
 800a0da:	f01a 0f01 	tst.w	sl, #1
 800a0de:	d0df      	beq.n	800a0a0 <_dtoa_r+0x938>
 800a0e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a0e4:	d1d9      	bne.n	800a09a <_dtoa_r+0x932>
 800a0e6:	2339      	movs	r3, #57	@ 0x39
 800a0e8:	f88b 3000 	strb.w	r3, [fp]
 800a0ec:	4633      	mov	r3, r6
 800a0ee:	461e      	mov	r6, r3
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0f6:	2a39      	cmp	r2, #57	@ 0x39
 800a0f8:	d053      	beq.n	800a1a2 <_dtoa_r+0xa3a>
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	701a      	strb	r2, [r3, #0]
 800a0fe:	e60c      	b.n	8009d1a <_dtoa_r+0x5b2>
 800a100:	2a00      	cmp	r2, #0
 800a102:	dd07      	ble.n	800a114 <_dtoa_r+0x9ac>
 800a104:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a108:	d0ed      	beq.n	800a0e6 <_dtoa_r+0x97e>
 800a10a:	f10a 0301 	add.w	r3, sl, #1
 800a10e:	f88b 3000 	strb.w	r3, [fp]
 800a112:	e602      	b.n	8009d1a <_dtoa_r+0x5b2>
 800a114:	9b05      	ldr	r3, [sp, #20]
 800a116:	9a05      	ldr	r2, [sp, #20]
 800a118:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a11e:	4293      	cmp	r3, r2
 800a120:	d029      	beq.n	800a176 <_dtoa_r+0xa0e>
 800a122:	9901      	ldr	r1, [sp, #4]
 800a124:	2300      	movs	r3, #0
 800a126:	220a      	movs	r2, #10
 800a128:	4648      	mov	r0, r9
 800a12a:	f000 f9d5 	bl	800a4d8 <__multadd>
 800a12e:	45a8      	cmp	r8, r5
 800a130:	9001      	str	r0, [sp, #4]
 800a132:	f04f 0300 	mov.w	r3, #0
 800a136:	f04f 020a 	mov.w	r2, #10
 800a13a:	4641      	mov	r1, r8
 800a13c:	4648      	mov	r0, r9
 800a13e:	d107      	bne.n	800a150 <_dtoa_r+0x9e8>
 800a140:	f000 f9ca 	bl	800a4d8 <__multadd>
 800a144:	4680      	mov	r8, r0
 800a146:	4605      	mov	r5, r0
 800a148:	9b05      	ldr	r3, [sp, #20]
 800a14a:	3301      	adds	r3, #1
 800a14c:	9305      	str	r3, [sp, #20]
 800a14e:	e775      	b.n	800a03c <_dtoa_r+0x8d4>
 800a150:	f000 f9c2 	bl	800a4d8 <__multadd>
 800a154:	4629      	mov	r1, r5
 800a156:	4680      	mov	r8, r0
 800a158:	2300      	movs	r3, #0
 800a15a:	220a      	movs	r2, #10
 800a15c:	4648      	mov	r0, r9
 800a15e:	f000 f9bb 	bl	800a4d8 <__multadd>
 800a162:	4605      	mov	r5, r0
 800a164:	e7f0      	b.n	800a148 <_dtoa_r+0x9e0>
 800a166:	f1bb 0f00 	cmp.w	fp, #0
 800a16a:	bfcc      	ite	gt
 800a16c:	465e      	movgt	r6, fp
 800a16e:	2601      	movle	r6, #1
 800a170:	443e      	add	r6, r7
 800a172:	f04f 0800 	mov.w	r8, #0
 800a176:	9901      	ldr	r1, [sp, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	4648      	mov	r0, r9
 800a17c:	f000 fba2 	bl	800a8c4 <__lshift>
 800a180:	4621      	mov	r1, r4
 800a182:	9001      	str	r0, [sp, #4]
 800a184:	f000 fc0a 	bl	800a99c <__mcmp>
 800a188:	2800      	cmp	r0, #0
 800a18a:	dcaf      	bgt.n	800a0ec <_dtoa_r+0x984>
 800a18c:	d102      	bne.n	800a194 <_dtoa_r+0xa2c>
 800a18e:	f01a 0f01 	tst.w	sl, #1
 800a192:	d1ab      	bne.n	800a0ec <_dtoa_r+0x984>
 800a194:	4633      	mov	r3, r6
 800a196:	461e      	mov	r6, r3
 800a198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a19c:	2a30      	cmp	r2, #48	@ 0x30
 800a19e:	d0fa      	beq.n	800a196 <_dtoa_r+0xa2e>
 800a1a0:	e5bb      	b.n	8009d1a <_dtoa_r+0x5b2>
 800a1a2:	429f      	cmp	r7, r3
 800a1a4:	d1a3      	bne.n	800a0ee <_dtoa_r+0x986>
 800a1a6:	9b04      	ldr	r3, [sp, #16]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	9304      	str	r3, [sp, #16]
 800a1ac:	2331      	movs	r3, #49	@ 0x31
 800a1ae:	703b      	strb	r3, [r7, #0]
 800a1b0:	e5b3      	b.n	8009d1a <_dtoa_r+0x5b2>
 800a1b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1b4:	4f16      	ldr	r7, [pc, #88]	@ (800a210 <_dtoa_r+0xaa8>)
 800a1b6:	b11b      	cbz	r3, 800a1c0 <_dtoa_r+0xa58>
 800a1b8:	f107 0308 	add.w	r3, r7, #8
 800a1bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	b011      	add	sp, #68	@ 0x44
 800a1c4:	ecbd 8b02 	vpop	{d8}
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	9b07      	ldr	r3, [sp, #28]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	f77f ae36 	ble.w	8009e40 <_dtoa_r+0x6d8>
 800a1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1d8:	2001      	movs	r0, #1
 800a1da:	e656      	b.n	8009e8a <_dtoa_r+0x722>
 800a1dc:	f1bb 0f00 	cmp.w	fp, #0
 800a1e0:	f77f aed7 	ble.w	8009f92 <_dtoa_r+0x82a>
 800a1e4:	463e      	mov	r6, r7
 800a1e6:	9801      	ldr	r0, [sp, #4]
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	f7ff fa35 	bl	8009658 <quorem>
 800a1ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a1f2:	f806 ab01 	strb.w	sl, [r6], #1
 800a1f6:	1bf2      	subs	r2, r6, r7
 800a1f8:	4593      	cmp	fp, r2
 800a1fa:	ddb4      	ble.n	800a166 <_dtoa_r+0x9fe>
 800a1fc:	9901      	ldr	r1, [sp, #4]
 800a1fe:	2300      	movs	r3, #0
 800a200:	220a      	movs	r2, #10
 800a202:	4648      	mov	r0, r9
 800a204:	f000 f968 	bl	800a4d8 <__multadd>
 800a208:	9001      	str	r0, [sp, #4]
 800a20a:	e7ec      	b.n	800a1e6 <_dtoa_r+0xa7e>
 800a20c:	0800d79d 	.word	0x0800d79d
 800a210:	0800d721 	.word	0x0800d721

0800a214 <_free_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4605      	mov	r5, r0
 800a218:	2900      	cmp	r1, #0
 800a21a:	d041      	beq.n	800a2a0 <_free_r+0x8c>
 800a21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a220:	1f0c      	subs	r4, r1, #4
 800a222:	2b00      	cmp	r3, #0
 800a224:	bfb8      	it	lt
 800a226:	18e4      	addlt	r4, r4, r3
 800a228:	f000 f8e8 	bl	800a3fc <__malloc_lock>
 800a22c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2a4 <_free_r+0x90>)
 800a22e:	6813      	ldr	r3, [r2, #0]
 800a230:	b933      	cbnz	r3, 800a240 <_free_r+0x2c>
 800a232:	6063      	str	r3, [r4, #4]
 800a234:	6014      	str	r4, [r2, #0]
 800a236:	4628      	mov	r0, r5
 800a238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a23c:	f000 b8e4 	b.w	800a408 <__malloc_unlock>
 800a240:	42a3      	cmp	r3, r4
 800a242:	d908      	bls.n	800a256 <_free_r+0x42>
 800a244:	6820      	ldr	r0, [r4, #0]
 800a246:	1821      	adds	r1, r4, r0
 800a248:	428b      	cmp	r3, r1
 800a24a:	bf01      	itttt	eq
 800a24c:	6819      	ldreq	r1, [r3, #0]
 800a24e:	685b      	ldreq	r3, [r3, #4]
 800a250:	1809      	addeq	r1, r1, r0
 800a252:	6021      	streq	r1, [r4, #0]
 800a254:	e7ed      	b.n	800a232 <_free_r+0x1e>
 800a256:	461a      	mov	r2, r3
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	b10b      	cbz	r3, 800a260 <_free_r+0x4c>
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	d9fa      	bls.n	800a256 <_free_r+0x42>
 800a260:	6811      	ldr	r1, [r2, #0]
 800a262:	1850      	adds	r0, r2, r1
 800a264:	42a0      	cmp	r0, r4
 800a266:	d10b      	bne.n	800a280 <_free_r+0x6c>
 800a268:	6820      	ldr	r0, [r4, #0]
 800a26a:	4401      	add	r1, r0
 800a26c:	1850      	adds	r0, r2, r1
 800a26e:	4283      	cmp	r3, r0
 800a270:	6011      	str	r1, [r2, #0]
 800a272:	d1e0      	bne.n	800a236 <_free_r+0x22>
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	6053      	str	r3, [r2, #4]
 800a27a:	4408      	add	r0, r1
 800a27c:	6010      	str	r0, [r2, #0]
 800a27e:	e7da      	b.n	800a236 <_free_r+0x22>
 800a280:	d902      	bls.n	800a288 <_free_r+0x74>
 800a282:	230c      	movs	r3, #12
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	e7d6      	b.n	800a236 <_free_r+0x22>
 800a288:	6820      	ldr	r0, [r4, #0]
 800a28a:	1821      	adds	r1, r4, r0
 800a28c:	428b      	cmp	r3, r1
 800a28e:	bf04      	itt	eq
 800a290:	6819      	ldreq	r1, [r3, #0]
 800a292:	685b      	ldreq	r3, [r3, #4]
 800a294:	6063      	str	r3, [r4, #4]
 800a296:	bf04      	itt	eq
 800a298:	1809      	addeq	r1, r1, r0
 800a29a:	6021      	streq	r1, [r4, #0]
 800a29c:	6054      	str	r4, [r2, #4]
 800a29e:	e7ca      	b.n	800a236 <_free_r+0x22>
 800a2a0:	bd38      	pop	{r3, r4, r5, pc}
 800a2a2:	bf00      	nop
 800a2a4:	24000664 	.word	0x24000664

0800a2a8 <malloc>:
 800a2a8:	4b02      	ldr	r3, [pc, #8]	@ (800a2b4 <malloc+0xc>)
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	f000 b825 	b.w	800a2fc <_malloc_r>
 800a2b2:	bf00      	nop
 800a2b4:	24000020 	.word	0x24000020

0800a2b8 <sbrk_aligned>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	4e0f      	ldr	r6, [pc, #60]	@ (800a2f8 <sbrk_aligned+0x40>)
 800a2bc:	460c      	mov	r4, r1
 800a2be:	6831      	ldr	r1, [r6, #0]
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	b911      	cbnz	r1, 800a2ca <sbrk_aligned+0x12>
 800a2c4:	f001 fdb8 	bl	800be38 <_sbrk_r>
 800a2c8:	6030      	str	r0, [r6, #0]
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f001 fdb3 	bl	800be38 <_sbrk_r>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	d103      	bne.n	800a2de <sbrk_aligned+0x26>
 800a2d6:	f04f 34ff 	mov.w	r4, #4294967295
 800a2da:	4620      	mov	r0, r4
 800a2dc:	bd70      	pop	{r4, r5, r6, pc}
 800a2de:	1cc4      	adds	r4, r0, #3
 800a2e0:	f024 0403 	bic.w	r4, r4, #3
 800a2e4:	42a0      	cmp	r0, r4
 800a2e6:	d0f8      	beq.n	800a2da <sbrk_aligned+0x22>
 800a2e8:	1a21      	subs	r1, r4, r0
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f001 fda4 	bl	800be38 <_sbrk_r>
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d1f2      	bne.n	800a2da <sbrk_aligned+0x22>
 800a2f4:	e7ef      	b.n	800a2d6 <sbrk_aligned+0x1e>
 800a2f6:	bf00      	nop
 800a2f8:	24000660 	.word	0x24000660

0800a2fc <_malloc_r>:
 800a2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a300:	1ccd      	adds	r5, r1, #3
 800a302:	f025 0503 	bic.w	r5, r5, #3
 800a306:	3508      	adds	r5, #8
 800a308:	2d0c      	cmp	r5, #12
 800a30a:	bf38      	it	cc
 800a30c:	250c      	movcc	r5, #12
 800a30e:	2d00      	cmp	r5, #0
 800a310:	4606      	mov	r6, r0
 800a312:	db01      	blt.n	800a318 <_malloc_r+0x1c>
 800a314:	42a9      	cmp	r1, r5
 800a316:	d904      	bls.n	800a322 <_malloc_r+0x26>
 800a318:	230c      	movs	r3, #12
 800a31a:	6033      	str	r3, [r6, #0]
 800a31c:	2000      	movs	r0, #0
 800a31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3f8 <_malloc_r+0xfc>
 800a326:	f000 f869 	bl	800a3fc <__malloc_lock>
 800a32a:	f8d8 3000 	ldr.w	r3, [r8]
 800a32e:	461c      	mov	r4, r3
 800a330:	bb44      	cbnz	r4, 800a384 <_malloc_r+0x88>
 800a332:	4629      	mov	r1, r5
 800a334:	4630      	mov	r0, r6
 800a336:	f7ff ffbf 	bl	800a2b8 <sbrk_aligned>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	4604      	mov	r4, r0
 800a33e:	d158      	bne.n	800a3f2 <_malloc_r+0xf6>
 800a340:	f8d8 4000 	ldr.w	r4, [r8]
 800a344:	4627      	mov	r7, r4
 800a346:	2f00      	cmp	r7, #0
 800a348:	d143      	bne.n	800a3d2 <_malloc_r+0xd6>
 800a34a:	2c00      	cmp	r4, #0
 800a34c:	d04b      	beq.n	800a3e6 <_malloc_r+0xea>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	4639      	mov	r1, r7
 800a352:	4630      	mov	r0, r6
 800a354:	eb04 0903 	add.w	r9, r4, r3
 800a358:	f001 fd6e 	bl	800be38 <_sbrk_r>
 800a35c:	4581      	cmp	r9, r0
 800a35e:	d142      	bne.n	800a3e6 <_malloc_r+0xea>
 800a360:	6821      	ldr	r1, [r4, #0]
 800a362:	1a6d      	subs	r5, r5, r1
 800a364:	4629      	mov	r1, r5
 800a366:	4630      	mov	r0, r6
 800a368:	f7ff ffa6 	bl	800a2b8 <sbrk_aligned>
 800a36c:	3001      	adds	r0, #1
 800a36e:	d03a      	beq.n	800a3e6 <_malloc_r+0xea>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	442b      	add	r3, r5
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	f8d8 3000 	ldr.w	r3, [r8]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	bb62      	cbnz	r2, 800a3d8 <_malloc_r+0xdc>
 800a37e:	f8c8 7000 	str.w	r7, [r8]
 800a382:	e00f      	b.n	800a3a4 <_malloc_r+0xa8>
 800a384:	6822      	ldr	r2, [r4, #0]
 800a386:	1b52      	subs	r2, r2, r5
 800a388:	d420      	bmi.n	800a3cc <_malloc_r+0xd0>
 800a38a:	2a0b      	cmp	r2, #11
 800a38c:	d917      	bls.n	800a3be <_malloc_r+0xc2>
 800a38e:	1961      	adds	r1, r4, r5
 800a390:	42a3      	cmp	r3, r4
 800a392:	6025      	str	r5, [r4, #0]
 800a394:	bf18      	it	ne
 800a396:	6059      	strne	r1, [r3, #4]
 800a398:	6863      	ldr	r3, [r4, #4]
 800a39a:	bf08      	it	eq
 800a39c:	f8c8 1000 	streq.w	r1, [r8]
 800a3a0:	5162      	str	r2, [r4, r5]
 800a3a2:	604b      	str	r3, [r1, #4]
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 f82f 	bl	800a408 <__malloc_unlock>
 800a3aa:	f104 000b 	add.w	r0, r4, #11
 800a3ae:	1d23      	adds	r3, r4, #4
 800a3b0:	f020 0007 	bic.w	r0, r0, #7
 800a3b4:	1ac2      	subs	r2, r0, r3
 800a3b6:	bf1c      	itt	ne
 800a3b8:	1a1b      	subne	r3, r3, r0
 800a3ba:	50a3      	strne	r3, [r4, r2]
 800a3bc:	e7af      	b.n	800a31e <_malloc_r+0x22>
 800a3be:	6862      	ldr	r2, [r4, #4]
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	bf0c      	ite	eq
 800a3c4:	f8c8 2000 	streq.w	r2, [r8]
 800a3c8:	605a      	strne	r2, [r3, #4]
 800a3ca:	e7eb      	b.n	800a3a4 <_malloc_r+0xa8>
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	6864      	ldr	r4, [r4, #4]
 800a3d0:	e7ae      	b.n	800a330 <_malloc_r+0x34>
 800a3d2:	463c      	mov	r4, r7
 800a3d4:	687f      	ldr	r7, [r7, #4]
 800a3d6:	e7b6      	b.n	800a346 <_malloc_r+0x4a>
 800a3d8:	461a      	mov	r2, r3
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	42a3      	cmp	r3, r4
 800a3de:	d1fb      	bne.n	800a3d8 <_malloc_r+0xdc>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	6053      	str	r3, [r2, #4]
 800a3e4:	e7de      	b.n	800a3a4 <_malloc_r+0xa8>
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	6033      	str	r3, [r6, #0]
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f000 f80c 	bl	800a408 <__malloc_unlock>
 800a3f0:	e794      	b.n	800a31c <_malloc_r+0x20>
 800a3f2:	6005      	str	r5, [r0, #0]
 800a3f4:	e7d6      	b.n	800a3a4 <_malloc_r+0xa8>
 800a3f6:	bf00      	nop
 800a3f8:	24000664 	.word	0x24000664

0800a3fc <__malloc_lock>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	@ (800a404 <__malloc_lock+0x8>)
 800a3fe:	f7ff b922 	b.w	8009646 <__retarget_lock_acquire_recursive>
 800a402:	bf00      	nop
 800a404:	2400065c 	.word	0x2400065c

0800a408 <__malloc_unlock>:
 800a408:	4801      	ldr	r0, [pc, #4]	@ (800a410 <__malloc_unlock+0x8>)
 800a40a:	f7ff b91d 	b.w	8009648 <__retarget_lock_release_recursive>
 800a40e:	bf00      	nop
 800a410:	2400065c 	.word	0x2400065c

0800a414 <_Balloc>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	69c6      	ldr	r6, [r0, #28]
 800a418:	4604      	mov	r4, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	b976      	cbnz	r6, 800a43c <_Balloc+0x28>
 800a41e:	2010      	movs	r0, #16
 800a420:	f7ff ff42 	bl	800a2a8 <malloc>
 800a424:	4602      	mov	r2, r0
 800a426:	61e0      	str	r0, [r4, #28]
 800a428:	b920      	cbnz	r0, 800a434 <_Balloc+0x20>
 800a42a:	4b18      	ldr	r3, [pc, #96]	@ (800a48c <_Balloc+0x78>)
 800a42c:	4818      	ldr	r0, [pc, #96]	@ (800a490 <_Balloc+0x7c>)
 800a42e:	216b      	movs	r1, #107	@ 0x6b
 800a430:	f001 fd2a 	bl	800be88 <__assert_func>
 800a434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a438:	6006      	str	r6, [r0, #0]
 800a43a:	60c6      	str	r6, [r0, #12]
 800a43c:	69e6      	ldr	r6, [r4, #28]
 800a43e:	68f3      	ldr	r3, [r6, #12]
 800a440:	b183      	cbz	r3, 800a464 <_Balloc+0x50>
 800a442:	69e3      	ldr	r3, [r4, #28]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a44a:	b9b8      	cbnz	r0, 800a47c <_Balloc+0x68>
 800a44c:	2101      	movs	r1, #1
 800a44e:	fa01 f605 	lsl.w	r6, r1, r5
 800a452:	1d72      	adds	r2, r6, #5
 800a454:	0092      	lsls	r2, r2, #2
 800a456:	4620      	mov	r0, r4
 800a458:	f001 fd34 	bl	800bec4 <_calloc_r>
 800a45c:	b160      	cbz	r0, 800a478 <_Balloc+0x64>
 800a45e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a462:	e00e      	b.n	800a482 <_Balloc+0x6e>
 800a464:	2221      	movs	r2, #33	@ 0x21
 800a466:	2104      	movs	r1, #4
 800a468:	4620      	mov	r0, r4
 800a46a:	f001 fd2b 	bl	800bec4 <_calloc_r>
 800a46e:	69e3      	ldr	r3, [r4, #28]
 800a470:	60f0      	str	r0, [r6, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e4      	bne.n	800a442 <_Balloc+0x2e>
 800a478:	2000      	movs	r0, #0
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	6802      	ldr	r2, [r0, #0]
 800a47e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a482:	2300      	movs	r3, #0
 800a484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a488:	e7f7      	b.n	800a47a <_Balloc+0x66>
 800a48a:	bf00      	nop
 800a48c:	0800d72e 	.word	0x0800d72e
 800a490:	0800d7ae 	.word	0x0800d7ae

0800a494 <_Bfree>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	69c6      	ldr	r6, [r0, #28]
 800a498:	4605      	mov	r5, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	b976      	cbnz	r6, 800a4bc <_Bfree+0x28>
 800a49e:	2010      	movs	r0, #16
 800a4a0:	f7ff ff02 	bl	800a2a8 <malloc>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	61e8      	str	r0, [r5, #28]
 800a4a8:	b920      	cbnz	r0, 800a4b4 <_Bfree+0x20>
 800a4aa:	4b09      	ldr	r3, [pc, #36]	@ (800a4d0 <_Bfree+0x3c>)
 800a4ac:	4809      	ldr	r0, [pc, #36]	@ (800a4d4 <_Bfree+0x40>)
 800a4ae:	218f      	movs	r1, #143	@ 0x8f
 800a4b0:	f001 fcea 	bl	800be88 <__assert_func>
 800a4b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b8:	6006      	str	r6, [r0, #0]
 800a4ba:	60c6      	str	r6, [r0, #12]
 800a4bc:	b13c      	cbz	r4, 800a4ce <_Bfree+0x3a>
 800a4be:	69eb      	ldr	r3, [r5, #28]
 800a4c0:	6862      	ldr	r2, [r4, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4c8:	6021      	str	r1, [r4, #0]
 800a4ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	0800d72e 	.word	0x0800d72e
 800a4d4:	0800d7ae 	.word	0x0800d7ae

0800a4d8 <__multadd>:
 800a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4dc:	690d      	ldr	r5, [r1, #16]
 800a4de:	4607      	mov	r7, r0
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	461e      	mov	r6, r3
 800a4e4:	f101 0c14 	add.w	ip, r1, #20
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ee:	b299      	uxth	r1, r3
 800a4f0:	fb02 6101 	mla	r1, r2, r1, r6
 800a4f4:	0c1e      	lsrs	r6, r3, #16
 800a4f6:	0c0b      	lsrs	r3, r1, #16
 800a4f8:	fb02 3306 	mla	r3, r2, r6, r3
 800a4fc:	b289      	uxth	r1, r1
 800a4fe:	3001      	adds	r0, #1
 800a500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a504:	4285      	cmp	r5, r0
 800a506:	f84c 1b04 	str.w	r1, [ip], #4
 800a50a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a50e:	dcec      	bgt.n	800a4ea <__multadd+0x12>
 800a510:	b30e      	cbz	r6, 800a556 <__multadd+0x7e>
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	42ab      	cmp	r3, r5
 800a516:	dc19      	bgt.n	800a54c <__multadd+0x74>
 800a518:	6861      	ldr	r1, [r4, #4]
 800a51a:	4638      	mov	r0, r7
 800a51c:	3101      	adds	r1, #1
 800a51e:	f7ff ff79 	bl	800a414 <_Balloc>
 800a522:	4680      	mov	r8, r0
 800a524:	b928      	cbnz	r0, 800a532 <__multadd+0x5a>
 800a526:	4602      	mov	r2, r0
 800a528:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <__multadd+0x84>)
 800a52a:	480d      	ldr	r0, [pc, #52]	@ (800a560 <__multadd+0x88>)
 800a52c:	21ba      	movs	r1, #186	@ 0xba
 800a52e:	f001 fcab 	bl	800be88 <__assert_func>
 800a532:	6922      	ldr	r2, [r4, #16]
 800a534:	3202      	adds	r2, #2
 800a536:	f104 010c 	add.w	r1, r4, #12
 800a53a:	0092      	lsls	r2, r2, #2
 800a53c:	300c      	adds	r0, #12
 800a53e:	f001 fc8b 	bl	800be58 <memcpy>
 800a542:	4621      	mov	r1, r4
 800a544:	4638      	mov	r0, r7
 800a546:	f7ff ffa5 	bl	800a494 <_Bfree>
 800a54a:	4644      	mov	r4, r8
 800a54c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a550:	3501      	adds	r5, #1
 800a552:	615e      	str	r6, [r3, #20]
 800a554:	6125      	str	r5, [r4, #16]
 800a556:	4620      	mov	r0, r4
 800a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55c:	0800d79d 	.word	0x0800d79d
 800a560:	0800d7ae 	.word	0x0800d7ae

0800a564 <__s2b>:
 800a564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a568:	460c      	mov	r4, r1
 800a56a:	4615      	mov	r5, r2
 800a56c:	461f      	mov	r7, r3
 800a56e:	2209      	movs	r2, #9
 800a570:	3308      	adds	r3, #8
 800a572:	4606      	mov	r6, r0
 800a574:	fb93 f3f2 	sdiv	r3, r3, r2
 800a578:	2100      	movs	r1, #0
 800a57a:	2201      	movs	r2, #1
 800a57c:	429a      	cmp	r2, r3
 800a57e:	db09      	blt.n	800a594 <__s2b+0x30>
 800a580:	4630      	mov	r0, r6
 800a582:	f7ff ff47 	bl	800a414 <_Balloc>
 800a586:	b940      	cbnz	r0, 800a59a <__s2b+0x36>
 800a588:	4602      	mov	r2, r0
 800a58a:	4b19      	ldr	r3, [pc, #100]	@ (800a5f0 <__s2b+0x8c>)
 800a58c:	4819      	ldr	r0, [pc, #100]	@ (800a5f4 <__s2b+0x90>)
 800a58e:	21d3      	movs	r1, #211	@ 0xd3
 800a590:	f001 fc7a 	bl	800be88 <__assert_func>
 800a594:	0052      	lsls	r2, r2, #1
 800a596:	3101      	adds	r1, #1
 800a598:	e7f0      	b.n	800a57c <__s2b+0x18>
 800a59a:	9b08      	ldr	r3, [sp, #32]
 800a59c:	6143      	str	r3, [r0, #20]
 800a59e:	2d09      	cmp	r5, #9
 800a5a0:	f04f 0301 	mov.w	r3, #1
 800a5a4:	6103      	str	r3, [r0, #16]
 800a5a6:	dd16      	ble.n	800a5d6 <__s2b+0x72>
 800a5a8:	f104 0909 	add.w	r9, r4, #9
 800a5ac:	46c8      	mov	r8, r9
 800a5ae:	442c      	add	r4, r5
 800a5b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a5b4:	4601      	mov	r1, r0
 800a5b6:	3b30      	subs	r3, #48	@ 0x30
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff ff8c 	bl	800a4d8 <__multadd>
 800a5c0:	45a0      	cmp	r8, r4
 800a5c2:	d1f5      	bne.n	800a5b0 <__s2b+0x4c>
 800a5c4:	f1a5 0408 	sub.w	r4, r5, #8
 800a5c8:	444c      	add	r4, r9
 800a5ca:	1b2d      	subs	r5, r5, r4
 800a5cc:	1963      	adds	r3, r4, r5
 800a5ce:	42bb      	cmp	r3, r7
 800a5d0:	db04      	blt.n	800a5dc <__s2b+0x78>
 800a5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d6:	340a      	adds	r4, #10
 800a5d8:	2509      	movs	r5, #9
 800a5da:	e7f6      	b.n	800a5ca <__s2b+0x66>
 800a5dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	3b30      	subs	r3, #48	@ 0x30
 800a5e4:	220a      	movs	r2, #10
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f7ff ff76 	bl	800a4d8 <__multadd>
 800a5ec:	e7ee      	b.n	800a5cc <__s2b+0x68>
 800a5ee:	bf00      	nop
 800a5f0:	0800d79d 	.word	0x0800d79d
 800a5f4:	0800d7ae 	.word	0x0800d7ae

0800a5f8 <__hi0bits>:
 800a5f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	bf36      	itet	cc
 800a600:	0403      	lslcc	r3, r0, #16
 800a602:	2000      	movcs	r0, #0
 800a604:	2010      	movcc	r0, #16
 800a606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a60a:	bf3c      	itt	cc
 800a60c:	021b      	lslcc	r3, r3, #8
 800a60e:	3008      	addcc	r0, #8
 800a610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a614:	bf3c      	itt	cc
 800a616:	011b      	lslcc	r3, r3, #4
 800a618:	3004      	addcc	r0, #4
 800a61a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a61e:	bf3c      	itt	cc
 800a620:	009b      	lslcc	r3, r3, #2
 800a622:	3002      	addcc	r0, #2
 800a624:	2b00      	cmp	r3, #0
 800a626:	db05      	blt.n	800a634 <__hi0bits+0x3c>
 800a628:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a62c:	f100 0001 	add.w	r0, r0, #1
 800a630:	bf08      	it	eq
 800a632:	2020      	moveq	r0, #32
 800a634:	4770      	bx	lr

0800a636 <__lo0bits>:
 800a636:	6803      	ldr	r3, [r0, #0]
 800a638:	4602      	mov	r2, r0
 800a63a:	f013 0007 	ands.w	r0, r3, #7
 800a63e:	d00b      	beq.n	800a658 <__lo0bits+0x22>
 800a640:	07d9      	lsls	r1, r3, #31
 800a642:	d421      	bmi.n	800a688 <__lo0bits+0x52>
 800a644:	0798      	lsls	r0, r3, #30
 800a646:	bf49      	itett	mi
 800a648:	085b      	lsrmi	r3, r3, #1
 800a64a:	089b      	lsrpl	r3, r3, #2
 800a64c:	2001      	movmi	r0, #1
 800a64e:	6013      	strmi	r3, [r2, #0]
 800a650:	bf5c      	itt	pl
 800a652:	6013      	strpl	r3, [r2, #0]
 800a654:	2002      	movpl	r0, #2
 800a656:	4770      	bx	lr
 800a658:	b299      	uxth	r1, r3
 800a65a:	b909      	cbnz	r1, 800a660 <__lo0bits+0x2a>
 800a65c:	0c1b      	lsrs	r3, r3, #16
 800a65e:	2010      	movs	r0, #16
 800a660:	b2d9      	uxtb	r1, r3
 800a662:	b909      	cbnz	r1, 800a668 <__lo0bits+0x32>
 800a664:	3008      	adds	r0, #8
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	0719      	lsls	r1, r3, #28
 800a66a:	bf04      	itt	eq
 800a66c:	091b      	lsreq	r3, r3, #4
 800a66e:	3004      	addeq	r0, #4
 800a670:	0799      	lsls	r1, r3, #30
 800a672:	bf04      	itt	eq
 800a674:	089b      	lsreq	r3, r3, #2
 800a676:	3002      	addeq	r0, #2
 800a678:	07d9      	lsls	r1, r3, #31
 800a67a:	d403      	bmi.n	800a684 <__lo0bits+0x4e>
 800a67c:	085b      	lsrs	r3, r3, #1
 800a67e:	f100 0001 	add.w	r0, r0, #1
 800a682:	d003      	beq.n	800a68c <__lo0bits+0x56>
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	4770      	bx	lr
 800a688:	2000      	movs	r0, #0
 800a68a:	4770      	bx	lr
 800a68c:	2020      	movs	r0, #32
 800a68e:	4770      	bx	lr

0800a690 <__i2b>:
 800a690:	b510      	push	{r4, lr}
 800a692:	460c      	mov	r4, r1
 800a694:	2101      	movs	r1, #1
 800a696:	f7ff febd 	bl	800a414 <_Balloc>
 800a69a:	4602      	mov	r2, r0
 800a69c:	b928      	cbnz	r0, 800a6aa <__i2b+0x1a>
 800a69e:	4b05      	ldr	r3, [pc, #20]	@ (800a6b4 <__i2b+0x24>)
 800a6a0:	4805      	ldr	r0, [pc, #20]	@ (800a6b8 <__i2b+0x28>)
 800a6a2:	f240 1145 	movw	r1, #325	@ 0x145
 800a6a6:	f001 fbef 	bl	800be88 <__assert_func>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	6144      	str	r4, [r0, #20]
 800a6ae:	6103      	str	r3, [r0, #16]
 800a6b0:	bd10      	pop	{r4, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800d79d 	.word	0x0800d79d
 800a6b8:	0800d7ae 	.word	0x0800d7ae

0800a6bc <__multiply>:
 800a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	690a      	ldr	r2, [r1, #16]
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	bfa8      	it	ge
 800a6ca:	4623      	movge	r3, r4
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	bfa4      	itt	ge
 800a6d0:	460c      	movge	r4, r1
 800a6d2:	461f      	movge	r7, r3
 800a6d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a6d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a6dc:	68a3      	ldr	r3, [r4, #8]
 800a6de:	6861      	ldr	r1, [r4, #4]
 800a6e0:	eb0a 0609 	add.w	r6, sl, r9
 800a6e4:	42b3      	cmp	r3, r6
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	bfb8      	it	lt
 800a6ea:	3101      	addlt	r1, #1
 800a6ec:	f7ff fe92 	bl	800a414 <_Balloc>
 800a6f0:	b930      	cbnz	r0, 800a700 <__multiply+0x44>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4b44      	ldr	r3, [pc, #272]	@ (800a808 <__multiply+0x14c>)
 800a6f6:	4845      	ldr	r0, [pc, #276]	@ (800a80c <__multiply+0x150>)
 800a6f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6fc:	f001 fbc4 	bl	800be88 <__assert_func>
 800a700:	f100 0514 	add.w	r5, r0, #20
 800a704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a708:	462b      	mov	r3, r5
 800a70a:	2200      	movs	r2, #0
 800a70c:	4543      	cmp	r3, r8
 800a70e:	d321      	bcc.n	800a754 <__multiply+0x98>
 800a710:	f107 0114 	add.w	r1, r7, #20
 800a714:	f104 0214 	add.w	r2, r4, #20
 800a718:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a71c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a720:	9302      	str	r3, [sp, #8]
 800a722:	1b13      	subs	r3, r2, r4
 800a724:	3b15      	subs	r3, #21
 800a726:	f023 0303 	bic.w	r3, r3, #3
 800a72a:	3304      	adds	r3, #4
 800a72c:	f104 0715 	add.w	r7, r4, #21
 800a730:	42ba      	cmp	r2, r7
 800a732:	bf38      	it	cc
 800a734:	2304      	movcc	r3, #4
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	9b02      	ldr	r3, [sp, #8]
 800a73a:	9103      	str	r1, [sp, #12]
 800a73c:	428b      	cmp	r3, r1
 800a73e:	d80c      	bhi.n	800a75a <__multiply+0x9e>
 800a740:	2e00      	cmp	r6, #0
 800a742:	dd03      	ble.n	800a74c <__multiply+0x90>
 800a744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d05b      	beq.n	800a804 <__multiply+0x148>
 800a74c:	6106      	str	r6, [r0, #16]
 800a74e:	b005      	add	sp, #20
 800a750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a754:	f843 2b04 	str.w	r2, [r3], #4
 800a758:	e7d8      	b.n	800a70c <__multiply+0x50>
 800a75a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a75e:	f1ba 0f00 	cmp.w	sl, #0
 800a762:	d024      	beq.n	800a7ae <__multiply+0xf2>
 800a764:	f104 0e14 	add.w	lr, r4, #20
 800a768:	46a9      	mov	r9, r5
 800a76a:	f04f 0c00 	mov.w	ip, #0
 800a76e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a772:	f8d9 3000 	ldr.w	r3, [r9]
 800a776:	fa1f fb87 	uxth.w	fp, r7
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a780:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a784:	f8d9 7000 	ldr.w	r7, [r9]
 800a788:	4463      	add	r3, ip
 800a78a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a78e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a792:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a796:	b29b      	uxth	r3, r3
 800a798:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a79c:	4572      	cmp	r2, lr
 800a79e:	f849 3b04 	str.w	r3, [r9], #4
 800a7a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7a6:	d8e2      	bhi.n	800a76e <__multiply+0xb2>
 800a7a8:	9b01      	ldr	r3, [sp, #4]
 800a7aa:	f845 c003 	str.w	ip, [r5, r3]
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a7b4:	3104      	adds	r1, #4
 800a7b6:	f1b9 0f00 	cmp.w	r9, #0
 800a7ba:	d021      	beq.n	800a800 <__multiply+0x144>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	f104 0c14 	add.w	ip, r4, #20
 800a7c2:	46ae      	mov	lr, r5
 800a7c4:	f04f 0a00 	mov.w	sl, #0
 800a7c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a7cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a7d0:	fb09 770b 	mla	r7, r9, fp, r7
 800a7d4:	4457      	add	r7, sl
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a7dc:	f84e 3b04 	str.w	r3, [lr], #4
 800a7e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7e8:	f8be 3000 	ldrh.w	r3, [lr]
 800a7ec:	fb09 330a 	mla	r3, r9, sl, r3
 800a7f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a7f4:	4562      	cmp	r2, ip
 800a7f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7fa:	d8e5      	bhi.n	800a7c8 <__multiply+0x10c>
 800a7fc:	9f01      	ldr	r7, [sp, #4]
 800a7fe:	51eb      	str	r3, [r5, r7]
 800a800:	3504      	adds	r5, #4
 800a802:	e799      	b.n	800a738 <__multiply+0x7c>
 800a804:	3e01      	subs	r6, #1
 800a806:	e79b      	b.n	800a740 <__multiply+0x84>
 800a808:	0800d79d 	.word	0x0800d79d
 800a80c:	0800d7ae 	.word	0x0800d7ae

0800a810 <__pow5mult>:
 800a810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a814:	4615      	mov	r5, r2
 800a816:	f012 0203 	ands.w	r2, r2, #3
 800a81a:	4607      	mov	r7, r0
 800a81c:	460e      	mov	r6, r1
 800a81e:	d007      	beq.n	800a830 <__pow5mult+0x20>
 800a820:	4c25      	ldr	r4, [pc, #148]	@ (800a8b8 <__pow5mult+0xa8>)
 800a822:	3a01      	subs	r2, #1
 800a824:	2300      	movs	r3, #0
 800a826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a82a:	f7ff fe55 	bl	800a4d8 <__multadd>
 800a82e:	4606      	mov	r6, r0
 800a830:	10ad      	asrs	r5, r5, #2
 800a832:	d03d      	beq.n	800a8b0 <__pow5mult+0xa0>
 800a834:	69fc      	ldr	r4, [r7, #28]
 800a836:	b97c      	cbnz	r4, 800a858 <__pow5mult+0x48>
 800a838:	2010      	movs	r0, #16
 800a83a:	f7ff fd35 	bl	800a2a8 <malloc>
 800a83e:	4602      	mov	r2, r0
 800a840:	61f8      	str	r0, [r7, #28]
 800a842:	b928      	cbnz	r0, 800a850 <__pow5mult+0x40>
 800a844:	4b1d      	ldr	r3, [pc, #116]	@ (800a8bc <__pow5mult+0xac>)
 800a846:	481e      	ldr	r0, [pc, #120]	@ (800a8c0 <__pow5mult+0xb0>)
 800a848:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a84c:	f001 fb1c 	bl	800be88 <__assert_func>
 800a850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a854:	6004      	str	r4, [r0, #0]
 800a856:	60c4      	str	r4, [r0, #12]
 800a858:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a85c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a860:	b94c      	cbnz	r4, 800a876 <__pow5mult+0x66>
 800a862:	f240 2171 	movw	r1, #625	@ 0x271
 800a866:	4638      	mov	r0, r7
 800a868:	f7ff ff12 	bl	800a690 <__i2b>
 800a86c:	2300      	movs	r3, #0
 800a86e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a872:	4604      	mov	r4, r0
 800a874:	6003      	str	r3, [r0, #0]
 800a876:	f04f 0900 	mov.w	r9, #0
 800a87a:	07eb      	lsls	r3, r5, #31
 800a87c:	d50a      	bpl.n	800a894 <__pow5mult+0x84>
 800a87e:	4631      	mov	r1, r6
 800a880:	4622      	mov	r2, r4
 800a882:	4638      	mov	r0, r7
 800a884:	f7ff ff1a 	bl	800a6bc <__multiply>
 800a888:	4631      	mov	r1, r6
 800a88a:	4680      	mov	r8, r0
 800a88c:	4638      	mov	r0, r7
 800a88e:	f7ff fe01 	bl	800a494 <_Bfree>
 800a892:	4646      	mov	r6, r8
 800a894:	106d      	asrs	r5, r5, #1
 800a896:	d00b      	beq.n	800a8b0 <__pow5mult+0xa0>
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	b938      	cbnz	r0, 800a8ac <__pow5mult+0x9c>
 800a89c:	4622      	mov	r2, r4
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	f7ff ff0b 	bl	800a6bc <__multiply>
 800a8a6:	6020      	str	r0, [r4, #0]
 800a8a8:	f8c0 9000 	str.w	r9, [r0]
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	e7e4      	b.n	800a87a <__pow5mult+0x6a>
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0800d808 	.word	0x0800d808
 800a8bc:	0800d72e 	.word	0x0800d72e
 800a8c0:	0800d7ae 	.word	0x0800d7ae

0800a8c4 <__lshift>:
 800a8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	6849      	ldr	r1, [r1, #4]
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	4691      	mov	r9, r2
 800a8d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8dc:	f108 0601 	add.w	r6, r8, #1
 800a8e0:	42b3      	cmp	r3, r6
 800a8e2:	db0b      	blt.n	800a8fc <__lshift+0x38>
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	f7ff fd95 	bl	800a414 <_Balloc>
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	b948      	cbnz	r0, 800a902 <__lshift+0x3e>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	4b28      	ldr	r3, [pc, #160]	@ (800a994 <__lshift+0xd0>)
 800a8f2:	4829      	ldr	r0, [pc, #164]	@ (800a998 <__lshift+0xd4>)
 800a8f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8f8:	f001 fac6 	bl	800be88 <__assert_func>
 800a8fc:	3101      	adds	r1, #1
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	e7ee      	b.n	800a8e0 <__lshift+0x1c>
 800a902:	2300      	movs	r3, #0
 800a904:	f100 0114 	add.w	r1, r0, #20
 800a908:	f100 0210 	add.w	r2, r0, #16
 800a90c:	4618      	mov	r0, r3
 800a90e:	4553      	cmp	r3, sl
 800a910:	db33      	blt.n	800a97a <__lshift+0xb6>
 800a912:	6920      	ldr	r0, [r4, #16]
 800a914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a918:	f104 0314 	add.w	r3, r4, #20
 800a91c:	f019 091f 	ands.w	r9, r9, #31
 800a920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a928:	d02b      	beq.n	800a982 <__lshift+0xbe>
 800a92a:	f1c9 0e20 	rsb	lr, r9, #32
 800a92e:	468a      	mov	sl, r1
 800a930:	2200      	movs	r2, #0
 800a932:	6818      	ldr	r0, [r3, #0]
 800a934:	fa00 f009 	lsl.w	r0, r0, r9
 800a938:	4310      	orrs	r0, r2
 800a93a:	f84a 0b04 	str.w	r0, [sl], #4
 800a93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a942:	459c      	cmp	ip, r3
 800a944:	fa22 f20e 	lsr.w	r2, r2, lr
 800a948:	d8f3      	bhi.n	800a932 <__lshift+0x6e>
 800a94a:	ebac 0304 	sub.w	r3, ip, r4
 800a94e:	3b15      	subs	r3, #21
 800a950:	f023 0303 	bic.w	r3, r3, #3
 800a954:	3304      	adds	r3, #4
 800a956:	f104 0015 	add.w	r0, r4, #21
 800a95a:	4584      	cmp	ip, r0
 800a95c:	bf38      	it	cc
 800a95e:	2304      	movcc	r3, #4
 800a960:	50ca      	str	r2, [r1, r3]
 800a962:	b10a      	cbz	r2, 800a968 <__lshift+0xa4>
 800a964:	f108 0602 	add.w	r6, r8, #2
 800a968:	3e01      	subs	r6, #1
 800a96a:	4638      	mov	r0, r7
 800a96c:	612e      	str	r6, [r5, #16]
 800a96e:	4621      	mov	r1, r4
 800a970:	f7ff fd90 	bl	800a494 <_Bfree>
 800a974:	4628      	mov	r0, r5
 800a976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a97e:	3301      	adds	r3, #1
 800a980:	e7c5      	b.n	800a90e <__lshift+0x4a>
 800a982:	3904      	subs	r1, #4
 800a984:	f853 2b04 	ldr.w	r2, [r3], #4
 800a988:	f841 2f04 	str.w	r2, [r1, #4]!
 800a98c:	459c      	cmp	ip, r3
 800a98e:	d8f9      	bhi.n	800a984 <__lshift+0xc0>
 800a990:	e7ea      	b.n	800a968 <__lshift+0xa4>
 800a992:	bf00      	nop
 800a994:	0800d79d 	.word	0x0800d79d
 800a998:	0800d7ae 	.word	0x0800d7ae

0800a99c <__mcmp>:
 800a99c:	690a      	ldr	r2, [r1, #16]
 800a99e:	4603      	mov	r3, r0
 800a9a0:	6900      	ldr	r0, [r0, #16]
 800a9a2:	1a80      	subs	r0, r0, r2
 800a9a4:	b530      	push	{r4, r5, lr}
 800a9a6:	d10e      	bne.n	800a9c6 <__mcmp+0x2a>
 800a9a8:	3314      	adds	r3, #20
 800a9aa:	3114      	adds	r1, #20
 800a9ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a9b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a9b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a9bc:	4295      	cmp	r5, r2
 800a9be:	d003      	beq.n	800a9c8 <__mcmp+0x2c>
 800a9c0:	d205      	bcs.n	800a9ce <__mcmp+0x32>
 800a9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c6:	bd30      	pop	{r4, r5, pc}
 800a9c8:	42a3      	cmp	r3, r4
 800a9ca:	d3f3      	bcc.n	800a9b4 <__mcmp+0x18>
 800a9cc:	e7fb      	b.n	800a9c6 <__mcmp+0x2a>
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	e7f9      	b.n	800a9c6 <__mcmp+0x2a>
	...

0800a9d4 <__mdiff>:
 800a9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	4689      	mov	r9, r1
 800a9da:	4606      	mov	r6, r0
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4648      	mov	r0, r9
 800a9e0:	4614      	mov	r4, r2
 800a9e2:	f7ff ffdb 	bl	800a99c <__mcmp>
 800a9e6:	1e05      	subs	r5, r0, #0
 800a9e8:	d112      	bne.n	800aa10 <__mdiff+0x3c>
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff fd11 	bl	800a414 <_Balloc>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	b928      	cbnz	r0, 800aa02 <__mdiff+0x2e>
 800a9f6:	4b3f      	ldr	r3, [pc, #252]	@ (800aaf4 <__mdiff+0x120>)
 800a9f8:	f240 2137 	movw	r1, #567	@ 0x237
 800a9fc:	483e      	ldr	r0, [pc, #248]	@ (800aaf8 <__mdiff+0x124>)
 800a9fe:	f001 fa43 	bl	800be88 <__assert_func>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa08:	4610      	mov	r0, r2
 800aa0a:	b003      	add	sp, #12
 800aa0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa10:	bfbc      	itt	lt
 800aa12:	464b      	movlt	r3, r9
 800aa14:	46a1      	movlt	r9, r4
 800aa16:	4630      	mov	r0, r6
 800aa18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa1c:	bfba      	itte	lt
 800aa1e:	461c      	movlt	r4, r3
 800aa20:	2501      	movlt	r5, #1
 800aa22:	2500      	movge	r5, #0
 800aa24:	f7ff fcf6 	bl	800a414 <_Balloc>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	b918      	cbnz	r0, 800aa34 <__mdiff+0x60>
 800aa2c:	4b31      	ldr	r3, [pc, #196]	@ (800aaf4 <__mdiff+0x120>)
 800aa2e:	f240 2145 	movw	r1, #581	@ 0x245
 800aa32:	e7e3      	b.n	800a9fc <__mdiff+0x28>
 800aa34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa38:	6926      	ldr	r6, [r4, #16]
 800aa3a:	60c5      	str	r5, [r0, #12]
 800aa3c:	f109 0310 	add.w	r3, r9, #16
 800aa40:	f109 0514 	add.w	r5, r9, #20
 800aa44:	f104 0e14 	add.w	lr, r4, #20
 800aa48:	f100 0b14 	add.w	fp, r0, #20
 800aa4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	46d9      	mov	r9, fp
 800aa58:	f04f 0c00 	mov.w	ip, #0
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa62:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa66:	9301      	str	r3, [sp, #4]
 800aa68:	fa1f f38a 	uxth.w	r3, sl
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	b283      	uxth	r3, r0
 800aa70:	1acb      	subs	r3, r1, r3
 800aa72:	0c00      	lsrs	r0, r0, #16
 800aa74:	4463      	add	r3, ip
 800aa76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa84:	4576      	cmp	r6, lr
 800aa86:	f849 3b04 	str.w	r3, [r9], #4
 800aa8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa8e:	d8e5      	bhi.n	800aa5c <__mdiff+0x88>
 800aa90:	1b33      	subs	r3, r6, r4
 800aa92:	3b15      	subs	r3, #21
 800aa94:	f023 0303 	bic.w	r3, r3, #3
 800aa98:	3415      	adds	r4, #21
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	42a6      	cmp	r6, r4
 800aa9e:	bf38      	it	cc
 800aaa0:	2304      	movcc	r3, #4
 800aaa2:	441d      	add	r5, r3
 800aaa4:	445b      	add	r3, fp
 800aaa6:	461e      	mov	r6, r3
 800aaa8:	462c      	mov	r4, r5
 800aaaa:	4544      	cmp	r4, r8
 800aaac:	d30e      	bcc.n	800aacc <__mdiff+0xf8>
 800aaae:	f108 0103 	add.w	r1, r8, #3
 800aab2:	1b49      	subs	r1, r1, r5
 800aab4:	f021 0103 	bic.w	r1, r1, #3
 800aab8:	3d03      	subs	r5, #3
 800aaba:	45a8      	cmp	r8, r5
 800aabc:	bf38      	it	cc
 800aabe:	2100      	movcc	r1, #0
 800aac0:	440b      	add	r3, r1
 800aac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aac6:	b191      	cbz	r1, 800aaee <__mdiff+0x11a>
 800aac8:	6117      	str	r7, [r2, #16]
 800aaca:	e79d      	b.n	800aa08 <__mdiff+0x34>
 800aacc:	f854 1b04 	ldr.w	r1, [r4], #4
 800aad0:	46e6      	mov	lr, ip
 800aad2:	0c08      	lsrs	r0, r1, #16
 800aad4:	fa1c fc81 	uxtah	ip, ip, r1
 800aad8:	4471      	add	r1, lr
 800aada:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aade:	b289      	uxth	r1, r1
 800aae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aae4:	f846 1b04 	str.w	r1, [r6], #4
 800aae8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaec:	e7dd      	b.n	800aaaa <__mdiff+0xd6>
 800aaee:	3f01      	subs	r7, #1
 800aaf0:	e7e7      	b.n	800aac2 <__mdiff+0xee>
 800aaf2:	bf00      	nop
 800aaf4:	0800d79d 	.word	0x0800d79d
 800aaf8:	0800d7ae 	.word	0x0800d7ae

0800aafc <__ulp>:
 800aafc:	b082      	sub	sp, #8
 800aafe:	ed8d 0b00 	vstr	d0, [sp]
 800ab02:	9a01      	ldr	r2, [sp, #4]
 800ab04:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <__ulp+0x48>)
 800ab06:	4013      	ands	r3, r2
 800ab08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	dc08      	bgt.n	800ab22 <__ulp+0x26>
 800ab10:	425b      	negs	r3, r3
 800ab12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ab16:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab1a:	da04      	bge.n	800ab26 <__ulp+0x2a>
 800ab1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab20:	4113      	asrs	r3, r2
 800ab22:	2200      	movs	r2, #0
 800ab24:	e008      	b.n	800ab38 <__ulp+0x3c>
 800ab26:	f1a2 0314 	sub.w	r3, r2, #20
 800ab2a:	2b1e      	cmp	r3, #30
 800ab2c:	bfda      	itte	le
 800ab2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ab32:	40da      	lsrle	r2, r3
 800ab34:	2201      	movgt	r2, #1
 800ab36:	2300      	movs	r3, #0
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	ec41 0b10 	vmov	d0, r0, r1
 800ab40:	b002      	add	sp, #8
 800ab42:	4770      	bx	lr
 800ab44:	7ff00000 	.word	0x7ff00000

0800ab48 <__b2d>:
 800ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	6906      	ldr	r6, [r0, #16]
 800ab4e:	f100 0814 	add.w	r8, r0, #20
 800ab52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab56:	1f37      	subs	r7, r6, #4
 800ab58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	f7ff fd4b 	bl	800a5f8 <__hi0bits>
 800ab62:	f1c0 0320 	rsb	r3, r0, #32
 800ab66:	280a      	cmp	r0, #10
 800ab68:	600b      	str	r3, [r1, #0]
 800ab6a:	491b      	ldr	r1, [pc, #108]	@ (800abd8 <__b2d+0x90>)
 800ab6c:	dc15      	bgt.n	800ab9a <__b2d+0x52>
 800ab6e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab72:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab76:	45b8      	cmp	r8, r7
 800ab78:	ea43 0501 	orr.w	r5, r3, r1
 800ab7c:	bf34      	ite	cc
 800ab7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab82:	2300      	movcs	r3, #0
 800ab84:	3015      	adds	r0, #21
 800ab86:	fa02 f000 	lsl.w	r0, r2, r0
 800ab8a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab8e:	4303      	orrs	r3, r0
 800ab90:	461c      	mov	r4, r3
 800ab92:	ec45 4b10 	vmov	d0, r4, r5
 800ab96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab9a:	45b8      	cmp	r8, r7
 800ab9c:	bf3a      	itte	cc
 800ab9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aba2:	f1a6 0708 	subcc.w	r7, r6, #8
 800aba6:	2300      	movcs	r3, #0
 800aba8:	380b      	subs	r0, #11
 800abaa:	d012      	beq.n	800abd2 <__b2d+0x8a>
 800abac:	f1c0 0120 	rsb	r1, r0, #32
 800abb0:	fa23 f401 	lsr.w	r4, r3, r1
 800abb4:	4082      	lsls	r2, r0
 800abb6:	4322      	orrs	r2, r4
 800abb8:	4547      	cmp	r7, r8
 800abba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800abbe:	bf8c      	ite	hi
 800abc0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800abc4:	2200      	movls	r2, #0
 800abc6:	4083      	lsls	r3, r0
 800abc8:	40ca      	lsrs	r2, r1
 800abca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800abce:	4313      	orrs	r3, r2
 800abd0:	e7de      	b.n	800ab90 <__b2d+0x48>
 800abd2:	ea42 0501 	orr.w	r5, r2, r1
 800abd6:	e7db      	b.n	800ab90 <__b2d+0x48>
 800abd8:	3ff00000 	.word	0x3ff00000

0800abdc <__d2b>:
 800abdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abe0:	460f      	mov	r7, r1
 800abe2:	2101      	movs	r1, #1
 800abe4:	ec59 8b10 	vmov	r8, r9, d0
 800abe8:	4616      	mov	r6, r2
 800abea:	f7ff fc13 	bl	800a414 <_Balloc>
 800abee:	4604      	mov	r4, r0
 800abf0:	b930      	cbnz	r0, 800ac00 <__d2b+0x24>
 800abf2:	4602      	mov	r2, r0
 800abf4:	4b23      	ldr	r3, [pc, #140]	@ (800ac84 <__d2b+0xa8>)
 800abf6:	4824      	ldr	r0, [pc, #144]	@ (800ac88 <__d2b+0xac>)
 800abf8:	f240 310f 	movw	r1, #783	@ 0x30f
 800abfc:	f001 f944 	bl	800be88 <__assert_func>
 800ac00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac08:	b10d      	cbz	r5, 800ac0e <__d2b+0x32>
 800ac0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	f1b8 0300 	subs.w	r3, r8, #0
 800ac14:	d023      	beq.n	800ac5e <__d2b+0x82>
 800ac16:	4668      	mov	r0, sp
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	f7ff fd0c 	bl	800a636 <__lo0bits>
 800ac1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac22:	b1d0      	cbz	r0, 800ac5a <__d2b+0x7e>
 800ac24:	f1c0 0320 	rsb	r3, r0, #32
 800ac28:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2c:	430b      	orrs	r3, r1
 800ac2e:	40c2      	lsrs	r2, r0
 800ac30:	6163      	str	r3, [r4, #20]
 800ac32:	9201      	str	r2, [sp, #4]
 800ac34:	9b01      	ldr	r3, [sp, #4]
 800ac36:	61a3      	str	r3, [r4, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	bf0c      	ite	eq
 800ac3c:	2201      	moveq	r2, #1
 800ac3e:	2202      	movne	r2, #2
 800ac40:	6122      	str	r2, [r4, #16]
 800ac42:	b1a5      	cbz	r5, 800ac6e <__d2b+0x92>
 800ac44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ac48:	4405      	add	r5, r0
 800ac4a:	603d      	str	r5, [r7, #0]
 800ac4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac50:	6030      	str	r0, [r6, #0]
 800ac52:	4620      	mov	r0, r4
 800ac54:	b003      	add	sp, #12
 800ac56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac5a:	6161      	str	r1, [r4, #20]
 800ac5c:	e7ea      	b.n	800ac34 <__d2b+0x58>
 800ac5e:	a801      	add	r0, sp, #4
 800ac60:	f7ff fce9 	bl	800a636 <__lo0bits>
 800ac64:	9b01      	ldr	r3, [sp, #4]
 800ac66:	6163      	str	r3, [r4, #20]
 800ac68:	3020      	adds	r0, #32
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	e7e8      	b.n	800ac40 <__d2b+0x64>
 800ac6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac76:	6038      	str	r0, [r7, #0]
 800ac78:	6918      	ldr	r0, [r3, #16]
 800ac7a:	f7ff fcbd 	bl	800a5f8 <__hi0bits>
 800ac7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac82:	e7e5      	b.n	800ac50 <__d2b+0x74>
 800ac84:	0800d79d 	.word	0x0800d79d
 800ac88:	0800d7ae 	.word	0x0800d7ae

0800ac8c <__ratio>:
 800ac8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	4688      	mov	r8, r1
 800ac92:	4669      	mov	r1, sp
 800ac94:	4681      	mov	r9, r0
 800ac96:	f7ff ff57 	bl	800ab48 <__b2d>
 800ac9a:	a901      	add	r1, sp, #4
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	ec55 4b10 	vmov	r4, r5, d0
 800aca2:	f7ff ff51 	bl	800ab48 <__b2d>
 800aca6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800acaa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800acae:	1ad2      	subs	r2, r2, r3
 800acb0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800acb4:	1a5b      	subs	r3, r3, r1
 800acb6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800acba:	ec57 6b10 	vmov	r6, r7, d0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bfd6      	itet	le
 800acc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800acc6:	462a      	movgt	r2, r5
 800acc8:	463a      	movle	r2, r7
 800acca:	46ab      	mov	fp, r5
 800accc:	46a2      	mov	sl, r4
 800acce:	bfce      	itee	gt
 800acd0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800acd4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800acd8:	ee00 3a90 	vmovle	s1, r3
 800acdc:	ec4b ab17 	vmov	d7, sl, fp
 800ace0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ace4:	b003      	add	sp, #12
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acea <__copybits>:
 800acea:	3901      	subs	r1, #1
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	1149      	asrs	r1, r1, #5
 800acf0:	6914      	ldr	r4, [r2, #16]
 800acf2:	3101      	adds	r1, #1
 800acf4:	f102 0314 	add.w	r3, r2, #20
 800acf8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad00:	1f05      	subs	r5, r0, #4
 800ad02:	42a3      	cmp	r3, r4
 800ad04:	d30c      	bcc.n	800ad20 <__copybits+0x36>
 800ad06:	1aa3      	subs	r3, r4, r2
 800ad08:	3b11      	subs	r3, #17
 800ad0a:	f023 0303 	bic.w	r3, r3, #3
 800ad0e:	3211      	adds	r2, #17
 800ad10:	42a2      	cmp	r2, r4
 800ad12:	bf88      	it	hi
 800ad14:	2300      	movhi	r3, #0
 800ad16:	4418      	add	r0, r3
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4288      	cmp	r0, r1
 800ad1c:	d305      	bcc.n	800ad2a <__copybits+0x40>
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad24:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad28:	e7eb      	b.n	800ad02 <__copybits+0x18>
 800ad2a:	f840 3b04 	str.w	r3, [r0], #4
 800ad2e:	e7f4      	b.n	800ad1a <__copybits+0x30>

0800ad30 <__any_on>:
 800ad30:	f100 0214 	add.w	r2, r0, #20
 800ad34:	6900      	ldr	r0, [r0, #16]
 800ad36:	114b      	asrs	r3, r1, #5
 800ad38:	4298      	cmp	r0, r3
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	db11      	blt.n	800ad62 <__any_on+0x32>
 800ad3e:	dd0a      	ble.n	800ad56 <__any_on+0x26>
 800ad40:	f011 011f 	ands.w	r1, r1, #31
 800ad44:	d007      	beq.n	800ad56 <__any_on+0x26>
 800ad46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad4a:	fa24 f001 	lsr.w	r0, r4, r1
 800ad4e:	fa00 f101 	lsl.w	r1, r0, r1
 800ad52:	428c      	cmp	r4, r1
 800ad54:	d10b      	bne.n	800ad6e <__any_on+0x3e>
 800ad56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d803      	bhi.n	800ad66 <__any_on+0x36>
 800ad5e:	2000      	movs	r0, #0
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	4603      	mov	r3, r0
 800ad64:	e7f7      	b.n	800ad56 <__any_on+0x26>
 800ad66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad6a:	2900      	cmp	r1, #0
 800ad6c:	d0f5      	beq.n	800ad5a <__any_on+0x2a>
 800ad6e:	2001      	movs	r0, #1
 800ad70:	e7f6      	b.n	800ad60 <__any_on+0x30>

0800ad72 <sulp>:
 800ad72:	b570      	push	{r4, r5, r6, lr}
 800ad74:	4604      	mov	r4, r0
 800ad76:	460d      	mov	r5, r1
 800ad78:	4616      	mov	r6, r2
 800ad7a:	ec45 4b10 	vmov	d0, r4, r5
 800ad7e:	f7ff febd 	bl	800aafc <__ulp>
 800ad82:	b17e      	cbz	r6, 800ada4 <sulp+0x32>
 800ad84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dd09      	ble.n	800ada4 <sulp+0x32>
 800ad90:	051b      	lsls	r3, r3, #20
 800ad92:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ad96:	2000      	movs	r0, #0
 800ad98:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800ad9c:	ec41 0b17 	vmov	d7, r0, r1
 800ada0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ada4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ada8 <_strtod_l>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	ed2d 8b0a 	vpush	{d8-d12}
 800adb0:	b097      	sub	sp, #92	@ 0x5c
 800adb2:	4688      	mov	r8, r1
 800adb4:	920e      	str	r2, [sp, #56]	@ 0x38
 800adb6:	2200      	movs	r2, #0
 800adb8:	9212      	str	r2, [sp, #72]	@ 0x48
 800adba:	9005      	str	r0, [sp, #20]
 800adbc:	f04f 0a00 	mov.w	sl, #0
 800adc0:	f04f 0b00 	mov.w	fp, #0
 800adc4:	460a      	mov	r2, r1
 800adc6:	9211      	str	r2, [sp, #68]	@ 0x44
 800adc8:	7811      	ldrb	r1, [r2, #0]
 800adca:	292b      	cmp	r1, #43	@ 0x2b
 800adcc:	d04c      	beq.n	800ae68 <_strtod_l+0xc0>
 800adce:	d839      	bhi.n	800ae44 <_strtod_l+0x9c>
 800add0:	290d      	cmp	r1, #13
 800add2:	d833      	bhi.n	800ae3c <_strtod_l+0x94>
 800add4:	2908      	cmp	r1, #8
 800add6:	d833      	bhi.n	800ae40 <_strtod_l+0x98>
 800add8:	2900      	cmp	r1, #0
 800adda:	d03c      	beq.n	800ae56 <_strtod_l+0xae>
 800addc:	2200      	movs	r2, #0
 800adde:	9208      	str	r2, [sp, #32]
 800ade0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ade2:	782a      	ldrb	r2, [r5, #0]
 800ade4:	2a30      	cmp	r2, #48	@ 0x30
 800ade6:	f040 80b5 	bne.w	800af54 <_strtod_l+0x1ac>
 800adea:	786a      	ldrb	r2, [r5, #1]
 800adec:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adf0:	2a58      	cmp	r2, #88	@ 0x58
 800adf2:	d170      	bne.n	800aed6 <_strtod_l+0x12e>
 800adf4:	9302      	str	r3, [sp, #8]
 800adf6:	9b08      	ldr	r3, [sp, #32]
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	ab12      	add	r3, sp, #72	@ 0x48
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	4a8b      	ldr	r2, [pc, #556]	@ (800b02c <_strtod_l+0x284>)
 800ae00:	9805      	ldr	r0, [sp, #20]
 800ae02:	ab13      	add	r3, sp, #76	@ 0x4c
 800ae04:	a911      	add	r1, sp, #68	@ 0x44
 800ae06:	f001 f8d9 	bl	800bfbc <__gethex>
 800ae0a:	f010 060f 	ands.w	r6, r0, #15
 800ae0e:	4604      	mov	r4, r0
 800ae10:	d005      	beq.n	800ae1e <_strtod_l+0x76>
 800ae12:	2e06      	cmp	r6, #6
 800ae14:	d12a      	bne.n	800ae6c <_strtod_l+0xc4>
 800ae16:	3501      	adds	r5, #1
 800ae18:	2300      	movs	r3, #0
 800ae1a:	9511      	str	r5, [sp, #68]	@ 0x44
 800ae1c:	9308      	str	r3, [sp, #32]
 800ae1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f040 852f 	bne.w	800b884 <_strtod_l+0xadc>
 800ae26:	9b08      	ldr	r3, [sp, #32]
 800ae28:	ec4b ab10 	vmov	d0, sl, fp
 800ae2c:	b1cb      	cbz	r3, 800ae62 <_strtod_l+0xba>
 800ae2e:	eeb1 0b40 	vneg.f64	d0, d0
 800ae32:	b017      	add	sp, #92	@ 0x5c
 800ae34:	ecbd 8b0a 	vpop	{d8-d12}
 800ae38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3c:	2920      	cmp	r1, #32
 800ae3e:	d1cd      	bne.n	800addc <_strtod_l+0x34>
 800ae40:	3201      	adds	r2, #1
 800ae42:	e7c0      	b.n	800adc6 <_strtod_l+0x1e>
 800ae44:	292d      	cmp	r1, #45	@ 0x2d
 800ae46:	d1c9      	bne.n	800addc <_strtod_l+0x34>
 800ae48:	2101      	movs	r1, #1
 800ae4a:	9108      	str	r1, [sp, #32]
 800ae4c:	1c51      	adds	r1, r2, #1
 800ae4e:	9111      	str	r1, [sp, #68]	@ 0x44
 800ae50:	7852      	ldrb	r2, [r2, #1]
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	d1c4      	bne.n	800ade0 <_strtod_l+0x38>
 800ae56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae58:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f040 850f 	bne.w	800b880 <_strtod_l+0xad8>
 800ae62:	ec4b ab10 	vmov	d0, sl, fp
 800ae66:	e7e4      	b.n	800ae32 <_strtod_l+0x8a>
 800ae68:	2100      	movs	r1, #0
 800ae6a:	e7ee      	b.n	800ae4a <_strtod_l+0xa2>
 800ae6c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae6e:	b13a      	cbz	r2, 800ae80 <_strtod_l+0xd8>
 800ae70:	2135      	movs	r1, #53	@ 0x35
 800ae72:	a814      	add	r0, sp, #80	@ 0x50
 800ae74:	f7ff ff39 	bl	800acea <__copybits>
 800ae78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae7a:	9805      	ldr	r0, [sp, #20]
 800ae7c:	f7ff fb0a 	bl	800a494 <_Bfree>
 800ae80:	1e73      	subs	r3, r6, #1
 800ae82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d806      	bhi.n	800ae96 <_strtod_l+0xee>
 800ae88:	e8df f003 	tbb	[pc, r3]
 800ae8c:	201d0314 	.word	0x201d0314
 800ae90:	14          	.byte	0x14
 800ae91:	00          	.byte	0x00
 800ae92:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800ae96:	05e3      	lsls	r3, r4, #23
 800ae98:	bf48      	it	mi
 800ae9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ae9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aea2:	0d1b      	lsrs	r3, r3, #20
 800aea4:	051b      	lsls	r3, r3, #20
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1b9      	bne.n	800ae1e <_strtod_l+0x76>
 800aeaa:	f7fe fba1 	bl	80095f0 <__errno>
 800aeae:	2322      	movs	r3, #34	@ 0x22
 800aeb0:	6003      	str	r3, [r0, #0]
 800aeb2:	e7b4      	b.n	800ae1e <_strtod_l+0x76>
 800aeb4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800aeb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aebc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aec0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aec4:	e7e7      	b.n	800ae96 <_strtod_l+0xee>
 800aec6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800b034 <_strtod_l+0x28c>
 800aeca:	e7e4      	b.n	800ae96 <_strtod_l+0xee>
 800aecc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aed0:	f04f 3aff 	mov.w	sl, #4294967295
 800aed4:	e7df      	b.n	800ae96 <_strtod_l+0xee>
 800aed6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	9211      	str	r2, [sp, #68]	@ 0x44
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	2b30      	cmp	r3, #48	@ 0x30
 800aee0:	d0f9      	beq.n	800aed6 <_strtod_l+0x12e>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d09b      	beq.n	800ae1e <_strtod_l+0x76>
 800aee6:	2301      	movs	r3, #1
 800aee8:	2600      	movs	r6, #0
 800aeea:	9307      	str	r3, [sp, #28]
 800aeec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aeee:	930a      	str	r3, [sp, #40]	@ 0x28
 800aef0:	46b1      	mov	r9, r6
 800aef2:	4635      	mov	r5, r6
 800aef4:	220a      	movs	r2, #10
 800aef6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800aef8:	7804      	ldrb	r4, [r0, #0]
 800aefa:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800aefe:	b2d9      	uxtb	r1, r3
 800af00:	2909      	cmp	r1, #9
 800af02:	d929      	bls.n	800af58 <_strtod_l+0x1b0>
 800af04:	494a      	ldr	r1, [pc, #296]	@ (800b030 <_strtod_l+0x288>)
 800af06:	2201      	movs	r2, #1
 800af08:	f000 ff84 	bl	800be14 <strncmp>
 800af0c:	b378      	cbz	r0, 800af6e <_strtod_l+0x1c6>
 800af0e:	2000      	movs	r0, #0
 800af10:	4622      	mov	r2, r4
 800af12:	462b      	mov	r3, r5
 800af14:	4607      	mov	r7, r0
 800af16:	9006      	str	r0, [sp, #24]
 800af18:	2a65      	cmp	r2, #101	@ 0x65
 800af1a:	d001      	beq.n	800af20 <_strtod_l+0x178>
 800af1c:	2a45      	cmp	r2, #69	@ 0x45
 800af1e:	d117      	bne.n	800af50 <_strtod_l+0x1a8>
 800af20:	b91b      	cbnz	r3, 800af2a <_strtod_l+0x182>
 800af22:	9b07      	ldr	r3, [sp, #28]
 800af24:	4303      	orrs	r3, r0
 800af26:	d096      	beq.n	800ae56 <_strtod_l+0xae>
 800af28:	2300      	movs	r3, #0
 800af2a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800af2e:	f108 0201 	add.w	r2, r8, #1
 800af32:	9211      	str	r2, [sp, #68]	@ 0x44
 800af34:	f898 2001 	ldrb.w	r2, [r8, #1]
 800af38:	2a2b      	cmp	r2, #43	@ 0x2b
 800af3a:	d06b      	beq.n	800b014 <_strtod_l+0x26c>
 800af3c:	2a2d      	cmp	r2, #45	@ 0x2d
 800af3e:	d071      	beq.n	800b024 <_strtod_l+0x27c>
 800af40:	f04f 0e00 	mov.w	lr, #0
 800af44:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800af48:	2c09      	cmp	r4, #9
 800af4a:	d979      	bls.n	800b040 <_strtod_l+0x298>
 800af4c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800af50:	2400      	movs	r4, #0
 800af52:	e094      	b.n	800b07e <_strtod_l+0x2d6>
 800af54:	2300      	movs	r3, #0
 800af56:	e7c7      	b.n	800aee8 <_strtod_l+0x140>
 800af58:	2d08      	cmp	r5, #8
 800af5a:	f100 0001 	add.w	r0, r0, #1
 800af5e:	bfd4      	ite	le
 800af60:	fb02 3909 	mlale	r9, r2, r9, r3
 800af64:	fb02 3606 	mlagt	r6, r2, r6, r3
 800af68:	3501      	adds	r5, #1
 800af6a:	9011      	str	r0, [sp, #68]	@ 0x44
 800af6c:	e7c3      	b.n	800aef6 <_strtod_l+0x14e>
 800af6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	9211      	str	r2, [sp, #68]	@ 0x44
 800af74:	785a      	ldrb	r2, [r3, #1]
 800af76:	b375      	cbz	r5, 800afd6 <_strtod_l+0x22e>
 800af78:	4607      	mov	r7, r0
 800af7a:	462b      	mov	r3, r5
 800af7c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800af80:	2909      	cmp	r1, #9
 800af82:	d913      	bls.n	800afac <_strtod_l+0x204>
 800af84:	2101      	movs	r1, #1
 800af86:	9106      	str	r1, [sp, #24]
 800af88:	e7c6      	b.n	800af18 <_strtod_l+0x170>
 800af8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af8c:	1c5a      	adds	r2, r3, #1
 800af8e:	9211      	str	r2, [sp, #68]	@ 0x44
 800af90:	785a      	ldrb	r2, [r3, #1]
 800af92:	3001      	adds	r0, #1
 800af94:	2a30      	cmp	r2, #48	@ 0x30
 800af96:	d0f8      	beq.n	800af8a <_strtod_l+0x1e2>
 800af98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800af9c:	2b08      	cmp	r3, #8
 800af9e:	f200 8476 	bhi.w	800b88e <_strtod_l+0xae6>
 800afa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afa4:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa6:	4607      	mov	r7, r0
 800afa8:	2000      	movs	r0, #0
 800afaa:	4603      	mov	r3, r0
 800afac:	3a30      	subs	r2, #48	@ 0x30
 800afae:	f100 0101 	add.w	r1, r0, #1
 800afb2:	d023      	beq.n	800affc <_strtod_l+0x254>
 800afb4:	440f      	add	r7, r1
 800afb6:	eb00 0c03 	add.w	ip, r0, r3
 800afba:	4619      	mov	r1, r3
 800afbc:	240a      	movs	r4, #10
 800afbe:	4561      	cmp	r1, ip
 800afc0:	d10b      	bne.n	800afda <_strtod_l+0x232>
 800afc2:	1c5c      	adds	r4, r3, #1
 800afc4:	4403      	add	r3, r0
 800afc6:	2b08      	cmp	r3, #8
 800afc8:	4404      	add	r4, r0
 800afca:	dc11      	bgt.n	800aff0 <_strtod_l+0x248>
 800afcc:	230a      	movs	r3, #10
 800afce:	fb03 2909 	mla	r9, r3, r9, r2
 800afd2:	2100      	movs	r1, #0
 800afd4:	e013      	b.n	800affe <_strtod_l+0x256>
 800afd6:	4628      	mov	r0, r5
 800afd8:	e7dc      	b.n	800af94 <_strtod_l+0x1ec>
 800afda:	2908      	cmp	r1, #8
 800afdc:	f101 0101 	add.w	r1, r1, #1
 800afe0:	dc02      	bgt.n	800afe8 <_strtod_l+0x240>
 800afe2:	fb04 f909 	mul.w	r9, r4, r9
 800afe6:	e7ea      	b.n	800afbe <_strtod_l+0x216>
 800afe8:	2910      	cmp	r1, #16
 800afea:	bfd8      	it	le
 800afec:	4366      	mulle	r6, r4
 800afee:	e7e6      	b.n	800afbe <_strtod_l+0x216>
 800aff0:	2b0f      	cmp	r3, #15
 800aff2:	dcee      	bgt.n	800afd2 <_strtod_l+0x22a>
 800aff4:	230a      	movs	r3, #10
 800aff6:	fb03 2606 	mla	r6, r3, r6, r2
 800affa:	e7ea      	b.n	800afd2 <_strtod_l+0x22a>
 800affc:	461c      	mov	r4, r3
 800affe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	9211      	str	r2, [sp, #68]	@ 0x44
 800b004:	785a      	ldrb	r2, [r3, #1]
 800b006:	4608      	mov	r0, r1
 800b008:	4623      	mov	r3, r4
 800b00a:	e7b7      	b.n	800af7c <_strtod_l+0x1d4>
 800b00c:	2301      	movs	r3, #1
 800b00e:	2700      	movs	r7, #0
 800b010:	9306      	str	r3, [sp, #24]
 800b012:	e786      	b.n	800af22 <_strtod_l+0x17a>
 800b014:	f04f 0e00 	mov.w	lr, #0
 800b018:	f108 0202 	add.w	r2, r8, #2
 800b01c:	9211      	str	r2, [sp, #68]	@ 0x44
 800b01e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b022:	e78f      	b.n	800af44 <_strtod_l+0x19c>
 800b024:	f04f 0e01 	mov.w	lr, #1
 800b028:	e7f6      	b.n	800b018 <_strtod_l+0x270>
 800b02a:	bf00      	nop
 800b02c:	0800d920 	.word	0x0800d920
 800b030:	0800d908 	.word	0x0800d908
 800b034:	7ff00000 	.word	0x7ff00000
 800b038:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b03a:	1c54      	adds	r4, r2, #1
 800b03c:	9411      	str	r4, [sp, #68]	@ 0x44
 800b03e:	7852      	ldrb	r2, [r2, #1]
 800b040:	2a30      	cmp	r2, #48	@ 0x30
 800b042:	d0f9      	beq.n	800b038 <_strtod_l+0x290>
 800b044:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b048:	2c08      	cmp	r4, #8
 800b04a:	d881      	bhi.n	800af50 <_strtod_l+0x1a8>
 800b04c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b050:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b052:	9209      	str	r2, [sp, #36]	@ 0x24
 800b054:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b056:	1c51      	adds	r1, r2, #1
 800b058:	9111      	str	r1, [sp, #68]	@ 0x44
 800b05a:	7852      	ldrb	r2, [r2, #1]
 800b05c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b060:	2c09      	cmp	r4, #9
 800b062:	d938      	bls.n	800b0d6 <_strtod_l+0x32e>
 800b064:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b066:	1b0c      	subs	r4, r1, r4
 800b068:	2c08      	cmp	r4, #8
 800b06a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b06e:	dc02      	bgt.n	800b076 <_strtod_l+0x2ce>
 800b070:	4564      	cmp	r4, ip
 800b072:	bfa8      	it	ge
 800b074:	4664      	movge	r4, ip
 800b076:	f1be 0f00 	cmp.w	lr, #0
 800b07a:	d000      	beq.n	800b07e <_strtod_l+0x2d6>
 800b07c:	4264      	negs	r4, r4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d14e      	bne.n	800b120 <_strtod_l+0x378>
 800b082:	9b07      	ldr	r3, [sp, #28]
 800b084:	4318      	orrs	r0, r3
 800b086:	f47f aeca 	bne.w	800ae1e <_strtod_l+0x76>
 800b08a:	9b06      	ldr	r3, [sp, #24]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f47f aee2 	bne.w	800ae56 <_strtod_l+0xae>
 800b092:	2a69      	cmp	r2, #105	@ 0x69
 800b094:	d027      	beq.n	800b0e6 <_strtod_l+0x33e>
 800b096:	dc24      	bgt.n	800b0e2 <_strtod_l+0x33a>
 800b098:	2a49      	cmp	r2, #73	@ 0x49
 800b09a:	d024      	beq.n	800b0e6 <_strtod_l+0x33e>
 800b09c:	2a4e      	cmp	r2, #78	@ 0x4e
 800b09e:	f47f aeda 	bne.w	800ae56 <_strtod_l+0xae>
 800b0a2:	4997      	ldr	r1, [pc, #604]	@ (800b300 <_strtod_l+0x558>)
 800b0a4:	a811      	add	r0, sp, #68	@ 0x44
 800b0a6:	f001 f9ab 	bl	800c400 <__match>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	f43f aed3 	beq.w	800ae56 <_strtod_l+0xae>
 800b0b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	2b28      	cmp	r3, #40	@ 0x28
 800b0b6:	d12d      	bne.n	800b114 <_strtod_l+0x36c>
 800b0b8:	4992      	ldr	r1, [pc, #584]	@ (800b304 <_strtod_l+0x55c>)
 800b0ba:	aa14      	add	r2, sp, #80	@ 0x50
 800b0bc:	a811      	add	r0, sp, #68	@ 0x44
 800b0be:	f001 f9b3 	bl	800c428 <__hexnan>
 800b0c2:	2805      	cmp	r0, #5
 800b0c4:	d126      	bne.n	800b114 <_strtod_l+0x36c>
 800b0c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b0c8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800b0cc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b0d0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b0d4:	e6a3      	b.n	800ae1e <_strtod_l+0x76>
 800b0d6:	240a      	movs	r4, #10
 800b0d8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800b0dc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800b0e0:	e7b8      	b.n	800b054 <_strtod_l+0x2ac>
 800b0e2:	2a6e      	cmp	r2, #110	@ 0x6e
 800b0e4:	e7db      	b.n	800b09e <_strtod_l+0x2f6>
 800b0e6:	4988      	ldr	r1, [pc, #544]	@ (800b308 <_strtod_l+0x560>)
 800b0e8:	a811      	add	r0, sp, #68	@ 0x44
 800b0ea:	f001 f989 	bl	800c400 <__match>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f43f aeb1 	beq.w	800ae56 <_strtod_l+0xae>
 800b0f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b0f6:	4985      	ldr	r1, [pc, #532]	@ (800b30c <_strtod_l+0x564>)
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	a811      	add	r0, sp, #68	@ 0x44
 800b0fc:	9311      	str	r3, [sp, #68]	@ 0x44
 800b0fe:	f001 f97f 	bl	800c400 <__match>
 800b102:	b910      	cbnz	r0, 800b10a <_strtod_l+0x362>
 800b104:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b106:	3301      	adds	r3, #1
 800b108:	9311      	str	r3, [sp, #68]	@ 0x44
 800b10a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800b320 <_strtod_l+0x578>
 800b10e:	f04f 0a00 	mov.w	sl, #0
 800b112:	e684      	b.n	800ae1e <_strtod_l+0x76>
 800b114:	487e      	ldr	r0, [pc, #504]	@ (800b310 <_strtod_l+0x568>)
 800b116:	f000 feaf 	bl	800be78 <nan>
 800b11a:	ec5b ab10 	vmov	sl, fp, d0
 800b11e:	e67e      	b.n	800ae1e <_strtod_l+0x76>
 800b120:	ee07 9a90 	vmov	s15, r9
 800b124:	1be2      	subs	r2, r4, r7
 800b126:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b12a:	2d00      	cmp	r5, #0
 800b12c:	bf08      	it	eq
 800b12e:	461d      	moveq	r5, r3
 800b130:	2b10      	cmp	r3, #16
 800b132:	9209      	str	r2, [sp, #36]	@ 0x24
 800b134:	461a      	mov	r2, r3
 800b136:	bfa8      	it	ge
 800b138:	2210      	movge	r2, #16
 800b13a:	2b09      	cmp	r3, #9
 800b13c:	ec5b ab17 	vmov	sl, fp, d7
 800b140:	dc15      	bgt.n	800b16e <_strtod_l+0x3c6>
 800b142:	1be1      	subs	r1, r4, r7
 800b144:	2900      	cmp	r1, #0
 800b146:	f43f ae6a 	beq.w	800ae1e <_strtod_l+0x76>
 800b14a:	eba4 0107 	sub.w	r1, r4, r7
 800b14e:	dd72      	ble.n	800b236 <_strtod_l+0x48e>
 800b150:	2916      	cmp	r1, #22
 800b152:	dc59      	bgt.n	800b208 <_strtod_l+0x460>
 800b154:	4b6f      	ldr	r3, [pc, #444]	@ (800b314 <_strtod_l+0x56c>)
 800b156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b15c:	ed93 7b00 	vldr	d7, [r3]
 800b160:	ec4b ab16 	vmov	d6, sl, fp
 800b164:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b168:	ec5b ab17 	vmov	sl, fp, d7
 800b16c:	e657      	b.n	800ae1e <_strtod_l+0x76>
 800b16e:	4969      	ldr	r1, [pc, #420]	@ (800b314 <_strtod_l+0x56c>)
 800b170:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b174:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800b178:	ee06 6a90 	vmov	s13, r6
 800b17c:	2b0f      	cmp	r3, #15
 800b17e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b182:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b186:	ec5b ab16 	vmov	sl, fp, d6
 800b18a:	ddda      	ble.n	800b142 <_strtod_l+0x39a>
 800b18c:	1a9a      	subs	r2, r3, r2
 800b18e:	1be1      	subs	r1, r4, r7
 800b190:	440a      	add	r2, r1
 800b192:	2a00      	cmp	r2, #0
 800b194:	f340 8094 	ble.w	800b2c0 <_strtod_l+0x518>
 800b198:	f012 000f 	ands.w	r0, r2, #15
 800b19c:	d00a      	beq.n	800b1b4 <_strtod_l+0x40c>
 800b19e:	495d      	ldr	r1, [pc, #372]	@ (800b314 <_strtod_l+0x56c>)
 800b1a0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b1a4:	ed91 7b00 	vldr	d7, [r1]
 800b1a8:	ec4b ab16 	vmov	d6, sl, fp
 800b1ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b1b0:	ec5b ab17 	vmov	sl, fp, d7
 800b1b4:	f032 020f 	bics.w	r2, r2, #15
 800b1b8:	d073      	beq.n	800b2a2 <_strtod_l+0x4fa>
 800b1ba:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800b1be:	dd47      	ble.n	800b250 <_strtod_l+0x4a8>
 800b1c0:	2400      	movs	r4, #0
 800b1c2:	4625      	mov	r5, r4
 800b1c4:	9407      	str	r4, [sp, #28]
 800b1c6:	4626      	mov	r6, r4
 800b1c8:	9a05      	ldr	r2, [sp, #20]
 800b1ca:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b320 <_strtod_l+0x578>
 800b1ce:	2322      	movs	r3, #34	@ 0x22
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	f04f 0a00 	mov.w	sl, #0
 800b1d6:	9b07      	ldr	r3, [sp, #28]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f43f ae20 	beq.w	800ae1e <_strtod_l+0x76>
 800b1de:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b1e0:	9805      	ldr	r0, [sp, #20]
 800b1e2:	f7ff f957 	bl	800a494 <_Bfree>
 800b1e6:	9805      	ldr	r0, [sp, #20]
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	f7ff f953 	bl	800a494 <_Bfree>
 800b1ee:	9805      	ldr	r0, [sp, #20]
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7ff f94f 	bl	800a494 <_Bfree>
 800b1f6:	9907      	ldr	r1, [sp, #28]
 800b1f8:	9805      	ldr	r0, [sp, #20]
 800b1fa:	f7ff f94b 	bl	800a494 <_Bfree>
 800b1fe:	9805      	ldr	r0, [sp, #20]
 800b200:	4621      	mov	r1, r4
 800b202:	f7ff f947 	bl	800a494 <_Bfree>
 800b206:	e60a      	b.n	800ae1e <_strtod_l+0x76>
 800b208:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800b20c:	1be0      	subs	r0, r4, r7
 800b20e:	4281      	cmp	r1, r0
 800b210:	dbbc      	blt.n	800b18c <_strtod_l+0x3e4>
 800b212:	4a40      	ldr	r2, [pc, #256]	@ (800b314 <_strtod_l+0x56c>)
 800b214:	f1c3 030f 	rsb	r3, r3, #15
 800b218:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b21c:	ed91 7b00 	vldr	d7, [r1]
 800b220:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b222:	ec4b ab16 	vmov	d6, sl, fp
 800b226:	1acb      	subs	r3, r1, r3
 800b228:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b22c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b230:	ed92 6b00 	vldr	d6, [r2]
 800b234:	e796      	b.n	800b164 <_strtod_l+0x3bc>
 800b236:	3116      	adds	r1, #22
 800b238:	dba8      	blt.n	800b18c <_strtod_l+0x3e4>
 800b23a:	4b36      	ldr	r3, [pc, #216]	@ (800b314 <_strtod_l+0x56c>)
 800b23c:	1b3c      	subs	r4, r7, r4
 800b23e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b242:	ed94 7b00 	vldr	d7, [r4]
 800b246:	ec4b ab16 	vmov	d6, sl, fp
 800b24a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b24e:	e78b      	b.n	800b168 <_strtod_l+0x3c0>
 800b250:	2000      	movs	r0, #0
 800b252:	ec4b ab17 	vmov	d7, sl, fp
 800b256:	4e30      	ldr	r6, [pc, #192]	@ (800b318 <_strtod_l+0x570>)
 800b258:	1112      	asrs	r2, r2, #4
 800b25a:	4601      	mov	r1, r0
 800b25c:	2a01      	cmp	r2, #1
 800b25e:	dc23      	bgt.n	800b2a8 <_strtod_l+0x500>
 800b260:	b108      	cbz	r0, 800b266 <_strtod_l+0x4be>
 800b262:	ec5b ab17 	vmov	sl, fp, d7
 800b266:	4a2c      	ldr	r2, [pc, #176]	@ (800b318 <_strtod_l+0x570>)
 800b268:	482c      	ldr	r0, [pc, #176]	@ (800b31c <_strtod_l+0x574>)
 800b26a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b26e:	ed92 7b00 	vldr	d7, [r2]
 800b272:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b276:	ec4b ab16 	vmov	d6, sl, fp
 800b27a:	4a29      	ldr	r2, [pc, #164]	@ (800b320 <_strtod_l+0x578>)
 800b27c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b280:	ee17 1a90 	vmov	r1, s15
 800b284:	400a      	ands	r2, r1
 800b286:	4282      	cmp	r2, r0
 800b288:	ec5b ab17 	vmov	sl, fp, d7
 800b28c:	d898      	bhi.n	800b1c0 <_strtod_l+0x418>
 800b28e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800b292:	4282      	cmp	r2, r0
 800b294:	bf86      	itte	hi
 800b296:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b324 <_strtod_l+0x57c>
 800b29a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b29e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	9206      	str	r2, [sp, #24]
 800b2a6:	e076      	b.n	800b396 <_strtod_l+0x5ee>
 800b2a8:	f012 0f01 	tst.w	r2, #1
 800b2ac:	d004      	beq.n	800b2b8 <_strtod_l+0x510>
 800b2ae:	ed96 6b00 	vldr	d6, [r6]
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2b8:	3101      	adds	r1, #1
 800b2ba:	1052      	asrs	r2, r2, #1
 800b2bc:	3608      	adds	r6, #8
 800b2be:	e7cd      	b.n	800b25c <_strtod_l+0x4b4>
 800b2c0:	d0ef      	beq.n	800b2a2 <_strtod_l+0x4fa>
 800b2c2:	4252      	negs	r2, r2
 800b2c4:	f012 000f 	ands.w	r0, r2, #15
 800b2c8:	d00a      	beq.n	800b2e0 <_strtod_l+0x538>
 800b2ca:	4912      	ldr	r1, [pc, #72]	@ (800b314 <_strtod_l+0x56c>)
 800b2cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b2d0:	ed91 7b00 	vldr	d7, [r1]
 800b2d4:	ec4b ab16 	vmov	d6, sl, fp
 800b2d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b2dc:	ec5b ab17 	vmov	sl, fp, d7
 800b2e0:	1112      	asrs	r2, r2, #4
 800b2e2:	d0de      	beq.n	800b2a2 <_strtod_l+0x4fa>
 800b2e4:	2a1f      	cmp	r2, #31
 800b2e6:	dd1f      	ble.n	800b328 <_strtod_l+0x580>
 800b2e8:	2400      	movs	r4, #0
 800b2ea:	4625      	mov	r5, r4
 800b2ec:	9407      	str	r4, [sp, #28]
 800b2ee:	4626      	mov	r6, r4
 800b2f0:	9a05      	ldr	r2, [sp, #20]
 800b2f2:	2322      	movs	r3, #34	@ 0x22
 800b2f4:	f04f 0a00 	mov.w	sl, #0
 800b2f8:	f04f 0b00 	mov.w	fp, #0
 800b2fc:	6013      	str	r3, [r2, #0]
 800b2fe:	e76a      	b.n	800b1d6 <_strtod_l+0x42e>
 800b300:	0800d6f5 	.word	0x0800d6f5
 800b304:	0800d90c 	.word	0x0800d90c
 800b308:	0800d6ed 	.word	0x0800d6ed
 800b30c:	0800d724 	.word	0x0800d724
 800b310:	0800dab5 	.word	0x0800dab5
 800b314:	0800d840 	.word	0x0800d840
 800b318:	0800d818 	.word	0x0800d818
 800b31c:	7ca00000 	.word	0x7ca00000
 800b320:	7ff00000 	.word	0x7ff00000
 800b324:	7fefffff 	.word	0x7fefffff
 800b328:	f012 0110 	ands.w	r1, r2, #16
 800b32c:	bf18      	it	ne
 800b32e:	216a      	movne	r1, #106	@ 0x6a
 800b330:	9106      	str	r1, [sp, #24]
 800b332:	ec4b ab17 	vmov	d7, sl, fp
 800b336:	49b0      	ldr	r1, [pc, #704]	@ (800b5f8 <_strtod_l+0x850>)
 800b338:	2000      	movs	r0, #0
 800b33a:	07d6      	lsls	r6, r2, #31
 800b33c:	d504      	bpl.n	800b348 <_strtod_l+0x5a0>
 800b33e:	ed91 6b00 	vldr	d6, [r1]
 800b342:	2001      	movs	r0, #1
 800b344:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b348:	1052      	asrs	r2, r2, #1
 800b34a:	f101 0108 	add.w	r1, r1, #8
 800b34e:	d1f4      	bne.n	800b33a <_strtod_l+0x592>
 800b350:	b108      	cbz	r0, 800b356 <_strtod_l+0x5ae>
 800b352:	ec5b ab17 	vmov	sl, fp, d7
 800b356:	9a06      	ldr	r2, [sp, #24]
 800b358:	b1b2      	cbz	r2, 800b388 <_strtod_l+0x5e0>
 800b35a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800b35e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800b362:	2a00      	cmp	r2, #0
 800b364:	4658      	mov	r0, fp
 800b366:	dd0f      	ble.n	800b388 <_strtod_l+0x5e0>
 800b368:	2a1f      	cmp	r2, #31
 800b36a:	dd55      	ble.n	800b418 <_strtod_l+0x670>
 800b36c:	2a34      	cmp	r2, #52	@ 0x34
 800b36e:	bfde      	ittt	le
 800b370:	f04f 32ff 	movle.w	r2, #4294967295
 800b374:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800b378:	408a      	lslle	r2, r1
 800b37a:	f04f 0a00 	mov.w	sl, #0
 800b37e:	bfcc      	ite	gt
 800b380:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b384:	ea02 0b00 	andle.w	fp, r2, r0
 800b388:	ec4b ab17 	vmov	d7, sl, fp
 800b38c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b394:	d0a8      	beq.n	800b2e8 <_strtod_l+0x540>
 800b396:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b398:	9805      	ldr	r0, [sp, #20]
 800b39a:	f8cd 9000 	str.w	r9, [sp]
 800b39e:	462a      	mov	r2, r5
 800b3a0:	f7ff f8e0 	bl	800a564 <__s2b>
 800b3a4:	9007      	str	r0, [sp, #28]
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f43f af0a 	beq.w	800b1c0 <_strtod_l+0x418>
 800b3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ae:	1b3f      	subs	r7, r7, r4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	bfb4      	ite	lt
 800b3b4:	463b      	movlt	r3, r7
 800b3b6:	2300      	movge	r3, #0
 800b3b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3bc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800b5e8 <_strtod_l+0x840>
 800b3c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3c4:	2400      	movs	r4, #0
 800b3c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800b3c8:	4625      	mov	r5, r4
 800b3ca:	9b07      	ldr	r3, [sp, #28]
 800b3cc:	9805      	ldr	r0, [sp, #20]
 800b3ce:	6859      	ldr	r1, [r3, #4]
 800b3d0:	f7ff f820 	bl	800a414 <_Balloc>
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f43f aef6 	beq.w	800b1c8 <_strtod_l+0x420>
 800b3dc:	9b07      	ldr	r3, [sp, #28]
 800b3de:	691a      	ldr	r2, [r3, #16]
 800b3e0:	ec4b ab19 	vmov	d9, sl, fp
 800b3e4:	3202      	adds	r2, #2
 800b3e6:	f103 010c 	add.w	r1, r3, #12
 800b3ea:	0092      	lsls	r2, r2, #2
 800b3ec:	300c      	adds	r0, #12
 800b3ee:	f000 fd33 	bl	800be58 <memcpy>
 800b3f2:	eeb0 0b49 	vmov.f64	d0, d9
 800b3f6:	9805      	ldr	r0, [sp, #20]
 800b3f8:	aa14      	add	r2, sp, #80	@ 0x50
 800b3fa:	a913      	add	r1, sp, #76	@ 0x4c
 800b3fc:	f7ff fbee 	bl	800abdc <__d2b>
 800b400:	9012      	str	r0, [sp, #72]	@ 0x48
 800b402:	2800      	cmp	r0, #0
 800b404:	f43f aee0 	beq.w	800b1c8 <_strtod_l+0x420>
 800b408:	9805      	ldr	r0, [sp, #20]
 800b40a:	2101      	movs	r1, #1
 800b40c:	f7ff f940 	bl	800a690 <__i2b>
 800b410:	4605      	mov	r5, r0
 800b412:	b940      	cbnz	r0, 800b426 <_strtod_l+0x67e>
 800b414:	2500      	movs	r5, #0
 800b416:	e6d7      	b.n	800b1c8 <_strtod_l+0x420>
 800b418:	f04f 31ff 	mov.w	r1, #4294967295
 800b41c:	fa01 f202 	lsl.w	r2, r1, r2
 800b420:	ea02 0a0a 	and.w	sl, r2, sl
 800b424:	e7b0      	b.n	800b388 <_strtod_l+0x5e0>
 800b426:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800b428:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b42a:	2f00      	cmp	r7, #0
 800b42c:	bfab      	itete	ge
 800b42e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800b430:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800b432:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800b436:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800b43a:	bfac      	ite	ge
 800b43c:	eb07 0903 	addge.w	r9, r7, r3
 800b440:	eba3 0807 	sublt.w	r8, r3, r7
 800b444:	9b06      	ldr	r3, [sp, #24]
 800b446:	1aff      	subs	r7, r7, r3
 800b448:	4417      	add	r7, r2
 800b44a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800b44e:	4a6b      	ldr	r2, [pc, #428]	@ (800b5fc <_strtod_l+0x854>)
 800b450:	3f01      	subs	r7, #1
 800b452:	4297      	cmp	r7, r2
 800b454:	da51      	bge.n	800b4fa <_strtod_l+0x752>
 800b456:	1bd1      	subs	r1, r2, r7
 800b458:	291f      	cmp	r1, #31
 800b45a:	eba3 0301 	sub.w	r3, r3, r1
 800b45e:	f04f 0201 	mov.w	r2, #1
 800b462:	dc3e      	bgt.n	800b4e2 <_strtod_l+0x73a>
 800b464:	408a      	lsls	r2, r1
 800b466:	920c      	str	r2, [sp, #48]	@ 0x30
 800b468:	2200      	movs	r2, #0
 800b46a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b46c:	eb09 0703 	add.w	r7, r9, r3
 800b470:	4498      	add	r8, r3
 800b472:	9b06      	ldr	r3, [sp, #24]
 800b474:	45b9      	cmp	r9, r7
 800b476:	4498      	add	r8, r3
 800b478:	464b      	mov	r3, r9
 800b47a:	bfa8      	it	ge
 800b47c:	463b      	movge	r3, r7
 800b47e:	4543      	cmp	r3, r8
 800b480:	bfa8      	it	ge
 800b482:	4643      	movge	r3, r8
 800b484:	2b00      	cmp	r3, #0
 800b486:	bfc2      	ittt	gt
 800b488:	1aff      	subgt	r7, r7, r3
 800b48a:	eba8 0803 	subgt.w	r8, r8, r3
 800b48e:	eba9 0903 	subgt.w	r9, r9, r3
 800b492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd16      	ble.n	800b4c6 <_strtod_l+0x71e>
 800b498:	4629      	mov	r1, r5
 800b49a:	9805      	ldr	r0, [sp, #20]
 800b49c:	461a      	mov	r2, r3
 800b49e:	f7ff f9b7 	bl	800a810 <__pow5mult>
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d0b5      	beq.n	800b414 <_strtod_l+0x66c>
 800b4a8:	4601      	mov	r1, r0
 800b4aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b4ac:	9805      	ldr	r0, [sp, #20]
 800b4ae:	f7ff f905 	bl	800a6bc <__multiply>
 800b4b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f43f ae87 	beq.w	800b1c8 <_strtod_l+0x420>
 800b4ba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b4bc:	9805      	ldr	r0, [sp, #20]
 800b4be:	f7fe ffe9 	bl	800a494 <_Bfree>
 800b4c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c4:	9312      	str	r3, [sp, #72]	@ 0x48
 800b4c6:	2f00      	cmp	r7, #0
 800b4c8:	dc1b      	bgt.n	800b502 <_strtod_l+0x75a>
 800b4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	dd21      	ble.n	800b514 <_strtod_l+0x76c>
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4d4:	9805      	ldr	r0, [sp, #20]
 800b4d6:	f7ff f99b 	bl	800a810 <__pow5mult>
 800b4da:	4606      	mov	r6, r0
 800b4dc:	b9d0      	cbnz	r0, 800b514 <_strtod_l+0x76c>
 800b4de:	2600      	movs	r6, #0
 800b4e0:	e672      	b.n	800b1c8 <_strtod_l+0x420>
 800b4e2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800b4e6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800b4ea:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800b4ee:	37e2      	adds	r7, #226	@ 0xe2
 800b4f0:	fa02 f107 	lsl.w	r1, r2, r7
 800b4f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b4f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b4f8:	e7b8      	b.n	800b46c <_strtod_l+0x6c4>
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b4fe:	2201      	movs	r2, #1
 800b500:	e7f9      	b.n	800b4f6 <_strtod_l+0x74e>
 800b502:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b504:	9805      	ldr	r0, [sp, #20]
 800b506:	463a      	mov	r2, r7
 800b508:	f7ff f9dc 	bl	800a8c4 <__lshift>
 800b50c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b50e:	2800      	cmp	r0, #0
 800b510:	d1db      	bne.n	800b4ca <_strtod_l+0x722>
 800b512:	e659      	b.n	800b1c8 <_strtod_l+0x420>
 800b514:	f1b8 0f00 	cmp.w	r8, #0
 800b518:	dd07      	ble.n	800b52a <_strtod_l+0x782>
 800b51a:	4631      	mov	r1, r6
 800b51c:	9805      	ldr	r0, [sp, #20]
 800b51e:	4642      	mov	r2, r8
 800b520:	f7ff f9d0 	bl	800a8c4 <__lshift>
 800b524:	4606      	mov	r6, r0
 800b526:	2800      	cmp	r0, #0
 800b528:	d0d9      	beq.n	800b4de <_strtod_l+0x736>
 800b52a:	f1b9 0f00 	cmp.w	r9, #0
 800b52e:	dd08      	ble.n	800b542 <_strtod_l+0x79a>
 800b530:	4629      	mov	r1, r5
 800b532:	9805      	ldr	r0, [sp, #20]
 800b534:	464a      	mov	r2, r9
 800b536:	f7ff f9c5 	bl	800a8c4 <__lshift>
 800b53a:	4605      	mov	r5, r0
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f43f ae43 	beq.w	800b1c8 <_strtod_l+0x420>
 800b542:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b544:	9805      	ldr	r0, [sp, #20]
 800b546:	4632      	mov	r2, r6
 800b548:	f7ff fa44 	bl	800a9d4 <__mdiff>
 800b54c:	4604      	mov	r4, r0
 800b54e:	2800      	cmp	r0, #0
 800b550:	f43f ae3a 	beq.w	800b1c8 <_strtod_l+0x420>
 800b554:	2300      	movs	r3, #0
 800b556:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800b55a:	60c3      	str	r3, [r0, #12]
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7ff fa1d 	bl	800a99c <__mcmp>
 800b562:	2800      	cmp	r0, #0
 800b564:	da4e      	bge.n	800b604 <_strtod_l+0x85c>
 800b566:	ea58 080a 	orrs.w	r8, r8, sl
 800b56a:	d174      	bne.n	800b656 <_strtod_l+0x8ae>
 800b56c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b570:	2b00      	cmp	r3, #0
 800b572:	d170      	bne.n	800b656 <_strtod_l+0x8ae>
 800b574:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b578:	0d1b      	lsrs	r3, r3, #20
 800b57a:	051b      	lsls	r3, r3, #20
 800b57c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b580:	d969      	bls.n	800b656 <_strtod_l+0x8ae>
 800b582:	6963      	ldr	r3, [r4, #20]
 800b584:	b913      	cbnz	r3, 800b58c <_strtod_l+0x7e4>
 800b586:	6923      	ldr	r3, [r4, #16]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	dd64      	ble.n	800b656 <_strtod_l+0x8ae>
 800b58c:	4621      	mov	r1, r4
 800b58e:	2201      	movs	r2, #1
 800b590:	9805      	ldr	r0, [sp, #20]
 800b592:	f7ff f997 	bl	800a8c4 <__lshift>
 800b596:	4629      	mov	r1, r5
 800b598:	4604      	mov	r4, r0
 800b59a:	f7ff f9ff 	bl	800a99c <__mcmp>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	dd59      	ble.n	800b656 <_strtod_l+0x8ae>
 800b5a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5a6:	9a06      	ldr	r2, [sp, #24]
 800b5a8:	0d1b      	lsrs	r3, r3, #20
 800b5aa:	051b      	lsls	r3, r3, #20
 800b5ac:	2a00      	cmp	r2, #0
 800b5ae:	d070      	beq.n	800b692 <_strtod_l+0x8ea>
 800b5b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b5b4:	d86d      	bhi.n	800b692 <_strtod_l+0x8ea>
 800b5b6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b5ba:	f67f ae99 	bls.w	800b2f0 <_strtod_l+0x548>
 800b5be:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800b5f0 <_strtod_l+0x848>
 800b5c2:	ec4b ab16 	vmov	d6, sl, fp
 800b5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b600 <_strtod_l+0x858>)
 800b5c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b5cc:	ee17 2a90 	vmov	r2, s15
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	ec5b ab17 	vmov	sl, fp, d7
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f47f ae01 	bne.w	800b1de <_strtod_l+0x436>
 800b5dc:	9a05      	ldr	r2, [sp, #20]
 800b5de:	2322      	movs	r3, #34	@ 0x22
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	e5fc      	b.n	800b1de <_strtod_l+0x436>
 800b5e4:	f3af 8000 	nop.w
 800b5e8:	ffc00000 	.word	0xffc00000
 800b5ec:	41dfffff 	.word	0x41dfffff
 800b5f0:	00000000 	.word	0x00000000
 800b5f4:	39500000 	.word	0x39500000
 800b5f8:	0800d938 	.word	0x0800d938
 800b5fc:	fffffc02 	.word	0xfffffc02
 800b600:	7ff00000 	.word	0x7ff00000
 800b604:	46d9      	mov	r9, fp
 800b606:	d15d      	bne.n	800b6c4 <_strtod_l+0x91c>
 800b608:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b60c:	f1b8 0f00 	cmp.w	r8, #0
 800b610:	d02a      	beq.n	800b668 <_strtod_l+0x8c0>
 800b612:	4aab      	ldr	r2, [pc, #684]	@ (800b8c0 <_strtod_l+0xb18>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d12a      	bne.n	800b66e <_strtod_l+0x8c6>
 800b618:	9b06      	ldr	r3, [sp, #24]
 800b61a:	4652      	mov	r2, sl
 800b61c:	b1fb      	cbz	r3, 800b65e <_strtod_l+0x8b6>
 800b61e:	4ba9      	ldr	r3, [pc, #676]	@ (800b8c4 <_strtod_l+0xb1c>)
 800b620:	ea0b 0303 	and.w	r3, fp, r3
 800b624:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b628:	f04f 31ff 	mov.w	r1, #4294967295
 800b62c:	d81a      	bhi.n	800b664 <_strtod_l+0x8bc>
 800b62e:	0d1b      	lsrs	r3, r3, #20
 800b630:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b634:	fa01 f303 	lsl.w	r3, r1, r3
 800b638:	429a      	cmp	r2, r3
 800b63a:	d118      	bne.n	800b66e <_strtod_l+0x8c6>
 800b63c:	4ba2      	ldr	r3, [pc, #648]	@ (800b8c8 <_strtod_l+0xb20>)
 800b63e:	4599      	cmp	r9, r3
 800b640:	d102      	bne.n	800b648 <_strtod_l+0x8a0>
 800b642:	3201      	adds	r2, #1
 800b644:	f43f adc0 	beq.w	800b1c8 <_strtod_l+0x420>
 800b648:	4b9e      	ldr	r3, [pc, #632]	@ (800b8c4 <_strtod_l+0xb1c>)
 800b64a:	ea09 0303 	and.w	r3, r9, r3
 800b64e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800b652:	f04f 0a00 	mov.w	sl, #0
 800b656:	9b06      	ldr	r3, [sp, #24]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1b0      	bne.n	800b5be <_strtod_l+0x816>
 800b65c:	e5bf      	b.n	800b1de <_strtod_l+0x436>
 800b65e:	f04f 33ff 	mov.w	r3, #4294967295
 800b662:	e7e9      	b.n	800b638 <_strtod_l+0x890>
 800b664:	460b      	mov	r3, r1
 800b666:	e7e7      	b.n	800b638 <_strtod_l+0x890>
 800b668:	ea53 030a 	orrs.w	r3, r3, sl
 800b66c:	d099      	beq.n	800b5a2 <_strtod_l+0x7fa>
 800b66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b670:	b1c3      	cbz	r3, 800b6a4 <_strtod_l+0x8fc>
 800b672:	ea13 0f09 	tst.w	r3, r9
 800b676:	d0ee      	beq.n	800b656 <_strtod_l+0x8ae>
 800b678:	9a06      	ldr	r2, [sp, #24]
 800b67a:	4650      	mov	r0, sl
 800b67c:	4659      	mov	r1, fp
 800b67e:	f1b8 0f00 	cmp.w	r8, #0
 800b682:	d013      	beq.n	800b6ac <_strtod_l+0x904>
 800b684:	f7ff fb75 	bl	800ad72 <sulp>
 800b688:	ee39 7b00 	vadd.f64	d7, d9, d0
 800b68c:	ec5b ab17 	vmov	sl, fp, d7
 800b690:	e7e1      	b.n	800b656 <_strtod_l+0x8ae>
 800b692:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b696:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b69a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b69e:	f04f 3aff 	mov.w	sl, #4294967295
 800b6a2:	e7d8      	b.n	800b656 <_strtod_l+0x8ae>
 800b6a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6a6:	ea13 0f0a 	tst.w	r3, sl
 800b6aa:	e7e4      	b.n	800b676 <_strtod_l+0x8ce>
 800b6ac:	f7ff fb61 	bl	800ad72 <sulp>
 800b6b0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800b6b4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6bc:	ec5b ab10 	vmov	sl, fp, d0
 800b6c0:	d1c9      	bne.n	800b656 <_strtod_l+0x8ae>
 800b6c2:	e615      	b.n	800b2f0 <_strtod_l+0x548>
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f7ff fae0 	bl	800ac8c <__ratio>
 800b6cc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b6d0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d8:	d85d      	bhi.n	800b796 <_strtod_l+0x9ee>
 800b6da:	f1b8 0f00 	cmp.w	r8, #0
 800b6de:	d164      	bne.n	800b7aa <_strtod_l+0xa02>
 800b6e0:	f1ba 0f00 	cmp.w	sl, #0
 800b6e4:	d14b      	bne.n	800b77e <_strtod_l+0x9d6>
 800b6e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6ea:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d160      	bne.n	800b7b4 <_strtod_l+0xa0c>
 800b6f2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800b6f6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fe:	d401      	bmi.n	800b704 <_strtod_l+0x95c>
 800b700:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b704:	eeb1 ab48 	vneg.f64	d10, d8
 800b708:	486e      	ldr	r0, [pc, #440]	@ (800b8c4 <_strtod_l+0xb1c>)
 800b70a:	4970      	ldr	r1, [pc, #448]	@ (800b8cc <_strtod_l+0xb24>)
 800b70c:	ea09 0700 	and.w	r7, r9, r0
 800b710:	428f      	cmp	r7, r1
 800b712:	ec53 2b1a 	vmov	r2, r3, d10
 800b716:	d17d      	bne.n	800b814 <_strtod_l+0xa6c>
 800b718:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b71c:	ec4b ab1c 	vmov	d12, sl, fp
 800b720:	eeb0 0b4c 	vmov.f64	d0, d12
 800b724:	f7ff f9ea 	bl	800aafc <__ulp>
 800b728:	4866      	ldr	r0, [pc, #408]	@ (800b8c4 <_strtod_l+0xb1c>)
 800b72a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b72e:	ee1c 3a90 	vmov	r3, s25
 800b732:	4a67      	ldr	r2, [pc, #412]	@ (800b8d0 <_strtod_l+0xb28>)
 800b734:	ea03 0100 	and.w	r1, r3, r0
 800b738:	4291      	cmp	r1, r2
 800b73a:	ec5b ab1c 	vmov	sl, fp, d12
 800b73e:	d93c      	bls.n	800b7ba <_strtod_l+0xa12>
 800b740:	ee19 2a90 	vmov	r2, s19
 800b744:	4b60      	ldr	r3, [pc, #384]	@ (800b8c8 <_strtod_l+0xb20>)
 800b746:	429a      	cmp	r2, r3
 800b748:	d104      	bne.n	800b754 <_strtod_l+0x9ac>
 800b74a:	ee19 3a10 	vmov	r3, s18
 800b74e:	3301      	adds	r3, #1
 800b750:	f43f ad3a 	beq.w	800b1c8 <_strtod_l+0x420>
 800b754:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800b8c8 <_strtod_l+0xb20>
 800b758:	f04f 3aff 	mov.w	sl, #4294967295
 800b75c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b75e:	9805      	ldr	r0, [sp, #20]
 800b760:	f7fe fe98 	bl	800a494 <_Bfree>
 800b764:	9805      	ldr	r0, [sp, #20]
 800b766:	4631      	mov	r1, r6
 800b768:	f7fe fe94 	bl	800a494 <_Bfree>
 800b76c:	9805      	ldr	r0, [sp, #20]
 800b76e:	4629      	mov	r1, r5
 800b770:	f7fe fe90 	bl	800a494 <_Bfree>
 800b774:	9805      	ldr	r0, [sp, #20]
 800b776:	4621      	mov	r1, r4
 800b778:	f7fe fe8c 	bl	800a494 <_Bfree>
 800b77c:	e625      	b.n	800b3ca <_strtod_l+0x622>
 800b77e:	f1ba 0f01 	cmp.w	sl, #1
 800b782:	d103      	bne.n	800b78c <_strtod_l+0x9e4>
 800b784:	f1bb 0f00 	cmp.w	fp, #0
 800b788:	f43f adb2 	beq.w	800b2f0 <_strtod_l+0x548>
 800b78c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b790:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b794:	e7b8      	b.n	800b708 <_strtod_l+0x960>
 800b796:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b79a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b79e:	f1b8 0f00 	cmp.w	r8, #0
 800b7a2:	d0af      	beq.n	800b704 <_strtod_l+0x95c>
 800b7a4:	eeb0 ab48 	vmov.f64	d10, d8
 800b7a8:	e7ae      	b.n	800b708 <_strtod_l+0x960>
 800b7aa:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800b7ae:	eeb0 8b4a 	vmov.f64	d8, d10
 800b7b2:	e7a9      	b.n	800b708 <_strtod_l+0x960>
 800b7b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b7b8:	e7a6      	b.n	800b708 <_strtod_l+0x960>
 800b7ba:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b7be:	9b06      	ldr	r3, [sp, #24]
 800b7c0:	46d9      	mov	r9, fp
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1ca      	bne.n	800b75c <_strtod_l+0x9b4>
 800b7c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7ca:	0d1b      	lsrs	r3, r3, #20
 800b7cc:	051b      	lsls	r3, r3, #20
 800b7ce:	429f      	cmp	r7, r3
 800b7d0:	d1c4      	bne.n	800b75c <_strtod_l+0x9b4>
 800b7d2:	ec51 0b18 	vmov	r0, r1, d8
 800b7d6:	f7f4 ffaf 	bl	8000738 <__aeabi_d2lz>
 800b7da:	f7f4 ff67 	bl	80006ac <__aeabi_l2d>
 800b7de:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800b7e2:	ec41 0b17 	vmov	d7, r0, r1
 800b7e6:	ea49 090a 	orr.w	r9, r9, sl
 800b7ea:	ea59 0908 	orrs.w	r9, r9, r8
 800b7ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b7f2:	d03c      	beq.n	800b86e <_strtod_l+0xac6>
 800b7f4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b8a8 <_strtod_l+0xb00>
 800b7f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b800:	f53f aced 	bmi.w	800b1de <_strtod_l+0x436>
 800b804:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b8b0 <_strtod_l+0xb08>
 800b808:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b810:	dda4      	ble.n	800b75c <_strtod_l+0x9b4>
 800b812:	e4e4      	b.n	800b1de <_strtod_l+0x436>
 800b814:	9906      	ldr	r1, [sp, #24]
 800b816:	b1e1      	cbz	r1, 800b852 <_strtod_l+0xaaa>
 800b818:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800b81c:	d819      	bhi.n	800b852 <_strtod_l+0xaaa>
 800b81e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b826:	d811      	bhi.n	800b84c <_strtod_l+0xaa4>
 800b828:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b82c:	ee18 3a10 	vmov	r3, s16
 800b830:	2b01      	cmp	r3, #1
 800b832:	bf38      	it	cc
 800b834:	2301      	movcc	r3, #1
 800b836:	ee08 3a10 	vmov	s16, r3
 800b83a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b83e:	f1b8 0f00 	cmp.w	r8, #0
 800b842:	d111      	bne.n	800b868 <_strtod_l+0xac0>
 800b844:	eeb1 7b48 	vneg.f64	d7, d8
 800b848:	ec53 2b17 	vmov	r2, r3, d7
 800b84c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800b850:	1bcb      	subs	r3, r1, r7
 800b852:	eeb0 0b49 	vmov.f64	d0, d9
 800b856:	ec43 2b1a 	vmov	d10, r2, r3
 800b85a:	f7ff f94f 	bl	800aafc <__ulp>
 800b85e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800b862:	ec5b ab19 	vmov	sl, fp, d9
 800b866:	e7aa      	b.n	800b7be <_strtod_l+0xa16>
 800b868:	eeb0 7b48 	vmov.f64	d7, d8
 800b86c:	e7ec      	b.n	800b848 <_strtod_l+0xaa0>
 800b86e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800b8b8 <_strtod_l+0xb10>
 800b872:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87a:	f57f af6f 	bpl.w	800b75c <_strtod_l+0x9b4>
 800b87e:	e4ae      	b.n	800b1de <_strtod_l+0x436>
 800b880:	2300      	movs	r3, #0
 800b882:	9308      	str	r3, [sp, #32]
 800b884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b886:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b888:	6013      	str	r3, [r2, #0]
 800b88a:	f7ff bacc 	b.w	800ae26 <_strtod_l+0x7e>
 800b88e:	2a65      	cmp	r2, #101	@ 0x65
 800b890:	f43f abbc 	beq.w	800b00c <_strtod_l+0x264>
 800b894:	2a45      	cmp	r2, #69	@ 0x45
 800b896:	f43f abb9 	beq.w	800b00c <_strtod_l+0x264>
 800b89a:	2301      	movs	r3, #1
 800b89c:	9306      	str	r3, [sp, #24]
 800b89e:	f7ff bbf0 	b.w	800b082 <_strtod_l+0x2da>
 800b8a2:	bf00      	nop
 800b8a4:	f3af 8000 	nop.w
 800b8a8:	94a03595 	.word	0x94a03595
 800b8ac:	3fdfffff 	.word	0x3fdfffff
 800b8b0:	35afe535 	.word	0x35afe535
 800b8b4:	3fe00000 	.word	0x3fe00000
 800b8b8:	94a03595 	.word	0x94a03595
 800b8bc:	3fcfffff 	.word	0x3fcfffff
 800b8c0:	000fffff 	.word	0x000fffff
 800b8c4:	7ff00000 	.word	0x7ff00000
 800b8c8:	7fefffff 	.word	0x7fefffff
 800b8cc:	7fe00000 	.word	0x7fe00000
 800b8d0:	7c9fffff 	.word	0x7c9fffff

0800b8d4 <_strtod_r>:
 800b8d4:	4b01      	ldr	r3, [pc, #4]	@ (800b8dc <_strtod_r+0x8>)
 800b8d6:	f7ff ba67 	b.w	800ada8 <_strtod_l>
 800b8da:	bf00      	nop
 800b8dc:	24000070 	.word	0x24000070

0800b8e0 <_strtol_l.constprop.0>:
 800b8e0:	2b24      	cmp	r3, #36	@ 0x24
 800b8e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e6:	4686      	mov	lr, r0
 800b8e8:	4690      	mov	r8, r2
 800b8ea:	d801      	bhi.n	800b8f0 <_strtol_l.constprop.0+0x10>
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d106      	bne.n	800b8fe <_strtol_l.constprop.0+0x1e>
 800b8f0:	f7fd fe7e 	bl	80095f0 <__errno>
 800b8f4:	2316      	movs	r3, #22
 800b8f6:	6003      	str	r3, [r0, #0]
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fe:	4834      	ldr	r0, [pc, #208]	@ (800b9d0 <_strtol_l.constprop.0+0xf0>)
 800b900:	460d      	mov	r5, r1
 800b902:	462a      	mov	r2, r5
 800b904:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b908:	5d06      	ldrb	r6, [r0, r4]
 800b90a:	f016 0608 	ands.w	r6, r6, #8
 800b90e:	d1f8      	bne.n	800b902 <_strtol_l.constprop.0+0x22>
 800b910:	2c2d      	cmp	r4, #45	@ 0x2d
 800b912:	d12d      	bne.n	800b970 <_strtol_l.constprop.0+0x90>
 800b914:	782c      	ldrb	r4, [r5, #0]
 800b916:	2601      	movs	r6, #1
 800b918:	1c95      	adds	r5, r2, #2
 800b91a:	f033 0210 	bics.w	r2, r3, #16
 800b91e:	d109      	bne.n	800b934 <_strtol_l.constprop.0+0x54>
 800b920:	2c30      	cmp	r4, #48	@ 0x30
 800b922:	d12a      	bne.n	800b97a <_strtol_l.constprop.0+0x9a>
 800b924:	782a      	ldrb	r2, [r5, #0]
 800b926:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b92a:	2a58      	cmp	r2, #88	@ 0x58
 800b92c:	d125      	bne.n	800b97a <_strtol_l.constprop.0+0x9a>
 800b92e:	786c      	ldrb	r4, [r5, #1]
 800b930:	2310      	movs	r3, #16
 800b932:	3502      	adds	r5, #2
 800b934:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b938:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b93c:	2200      	movs	r2, #0
 800b93e:	fbbc f9f3 	udiv	r9, ip, r3
 800b942:	4610      	mov	r0, r2
 800b944:	fb03 ca19 	mls	sl, r3, r9, ip
 800b948:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b94c:	2f09      	cmp	r7, #9
 800b94e:	d81b      	bhi.n	800b988 <_strtol_l.constprop.0+0xa8>
 800b950:	463c      	mov	r4, r7
 800b952:	42a3      	cmp	r3, r4
 800b954:	dd27      	ble.n	800b9a6 <_strtol_l.constprop.0+0xc6>
 800b956:	1c57      	adds	r7, r2, #1
 800b958:	d007      	beq.n	800b96a <_strtol_l.constprop.0+0x8a>
 800b95a:	4581      	cmp	r9, r0
 800b95c:	d320      	bcc.n	800b9a0 <_strtol_l.constprop.0+0xc0>
 800b95e:	d101      	bne.n	800b964 <_strtol_l.constprop.0+0x84>
 800b960:	45a2      	cmp	sl, r4
 800b962:	db1d      	blt.n	800b9a0 <_strtol_l.constprop.0+0xc0>
 800b964:	fb00 4003 	mla	r0, r0, r3, r4
 800b968:	2201      	movs	r2, #1
 800b96a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b96e:	e7eb      	b.n	800b948 <_strtol_l.constprop.0+0x68>
 800b970:	2c2b      	cmp	r4, #43	@ 0x2b
 800b972:	bf04      	itt	eq
 800b974:	782c      	ldrbeq	r4, [r5, #0]
 800b976:	1c95      	addeq	r5, r2, #2
 800b978:	e7cf      	b.n	800b91a <_strtol_l.constprop.0+0x3a>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1da      	bne.n	800b934 <_strtol_l.constprop.0+0x54>
 800b97e:	2c30      	cmp	r4, #48	@ 0x30
 800b980:	bf0c      	ite	eq
 800b982:	2308      	moveq	r3, #8
 800b984:	230a      	movne	r3, #10
 800b986:	e7d5      	b.n	800b934 <_strtol_l.constprop.0+0x54>
 800b988:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b98c:	2f19      	cmp	r7, #25
 800b98e:	d801      	bhi.n	800b994 <_strtol_l.constprop.0+0xb4>
 800b990:	3c37      	subs	r4, #55	@ 0x37
 800b992:	e7de      	b.n	800b952 <_strtol_l.constprop.0+0x72>
 800b994:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b998:	2f19      	cmp	r7, #25
 800b99a:	d804      	bhi.n	800b9a6 <_strtol_l.constprop.0+0xc6>
 800b99c:	3c57      	subs	r4, #87	@ 0x57
 800b99e:	e7d8      	b.n	800b952 <_strtol_l.constprop.0+0x72>
 800b9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a4:	e7e1      	b.n	800b96a <_strtol_l.constprop.0+0x8a>
 800b9a6:	1c53      	adds	r3, r2, #1
 800b9a8:	d108      	bne.n	800b9bc <_strtol_l.constprop.0+0xdc>
 800b9aa:	2322      	movs	r3, #34	@ 0x22
 800b9ac:	f8ce 3000 	str.w	r3, [lr]
 800b9b0:	4660      	mov	r0, ip
 800b9b2:	f1b8 0f00 	cmp.w	r8, #0
 800b9b6:	d0a0      	beq.n	800b8fa <_strtol_l.constprop.0+0x1a>
 800b9b8:	1e69      	subs	r1, r5, #1
 800b9ba:	e006      	b.n	800b9ca <_strtol_l.constprop.0+0xea>
 800b9bc:	b106      	cbz	r6, 800b9c0 <_strtol_l.constprop.0+0xe0>
 800b9be:	4240      	negs	r0, r0
 800b9c0:	f1b8 0f00 	cmp.w	r8, #0
 800b9c4:	d099      	beq.n	800b8fa <_strtol_l.constprop.0+0x1a>
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	d1f6      	bne.n	800b9b8 <_strtol_l.constprop.0+0xd8>
 800b9ca:	f8c8 1000 	str.w	r1, [r8]
 800b9ce:	e794      	b.n	800b8fa <_strtol_l.constprop.0+0x1a>
 800b9d0:	0800d961 	.word	0x0800d961

0800b9d4 <_strtol_r>:
 800b9d4:	f7ff bf84 	b.w	800b8e0 <_strtol_l.constprop.0>

0800b9d8 <__ssputs_r>:
 800b9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9dc:	688e      	ldr	r6, [r1, #8]
 800b9de:	461f      	mov	r7, r3
 800b9e0:	42be      	cmp	r6, r7
 800b9e2:	680b      	ldr	r3, [r1, #0]
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	4690      	mov	r8, r2
 800b9ea:	d82d      	bhi.n	800ba48 <__ssputs_r+0x70>
 800b9ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b9f4:	d026      	beq.n	800ba44 <__ssputs_r+0x6c>
 800b9f6:	6965      	ldr	r5, [r4, #20]
 800b9f8:	6909      	ldr	r1, [r1, #16]
 800b9fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9fe:	eba3 0901 	sub.w	r9, r3, r1
 800ba02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba06:	1c7b      	adds	r3, r7, #1
 800ba08:	444b      	add	r3, r9
 800ba0a:	106d      	asrs	r5, r5, #1
 800ba0c:	429d      	cmp	r5, r3
 800ba0e:	bf38      	it	cc
 800ba10:	461d      	movcc	r5, r3
 800ba12:	0553      	lsls	r3, r2, #21
 800ba14:	d527      	bpl.n	800ba66 <__ssputs_r+0x8e>
 800ba16:	4629      	mov	r1, r5
 800ba18:	f7fe fc70 	bl	800a2fc <_malloc_r>
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	b360      	cbz	r0, 800ba7a <__ssputs_r+0xa2>
 800ba20:	6921      	ldr	r1, [r4, #16]
 800ba22:	464a      	mov	r2, r9
 800ba24:	f000 fa18 	bl	800be58 <memcpy>
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	6126      	str	r6, [r4, #16]
 800ba36:	6165      	str	r5, [r4, #20]
 800ba38:	444e      	add	r6, r9
 800ba3a:	eba5 0509 	sub.w	r5, r5, r9
 800ba3e:	6026      	str	r6, [r4, #0]
 800ba40:	60a5      	str	r5, [r4, #8]
 800ba42:	463e      	mov	r6, r7
 800ba44:	42be      	cmp	r6, r7
 800ba46:	d900      	bls.n	800ba4a <__ssputs_r+0x72>
 800ba48:	463e      	mov	r6, r7
 800ba4a:	6820      	ldr	r0, [r4, #0]
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	4641      	mov	r1, r8
 800ba50:	f000 f9c6 	bl	800bde0 <memmove>
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	1b9b      	subs	r3, r3, r6
 800ba58:	60a3      	str	r3, [r4, #8]
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	4433      	add	r3, r6
 800ba5e:	6023      	str	r3, [r4, #0]
 800ba60:	2000      	movs	r0, #0
 800ba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba66:	462a      	mov	r2, r5
 800ba68:	f000 fd8b 	bl	800c582 <_realloc_r>
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d1e0      	bne.n	800ba34 <__ssputs_r+0x5c>
 800ba72:	6921      	ldr	r1, [r4, #16]
 800ba74:	4650      	mov	r0, sl
 800ba76:	f7fe fbcd 	bl	800a214 <_free_r>
 800ba7a:	230c      	movs	r3, #12
 800ba7c:	f8ca 3000 	str.w	r3, [sl]
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	e7e9      	b.n	800ba62 <__ssputs_r+0x8a>
	...

0800ba90 <_svfiprintf_r>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	4698      	mov	r8, r3
 800ba96:	898b      	ldrh	r3, [r1, #12]
 800ba98:	061b      	lsls	r3, r3, #24
 800ba9a:	b09d      	sub	sp, #116	@ 0x74
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	460d      	mov	r5, r1
 800baa0:	4614      	mov	r4, r2
 800baa2:	d510      	bpl.n	800bac6 <_svfiprintf_r+0x36>
 800baa4:	690b      	ldr	r3, [r1, #16]
 800baa6:	b973      	cbnz	r3, 800bac6 <_svfiprintf_r+0x36>
 800baa8:	2140      	movs	r1, #64	@ 0x40
 800baaa:	f7fe fc27 	bl	800a2fc <_malloc_r>
 800baae:	6028      	str	r0, [r5, #0]
 800bab0:	6128      	str	r0, [r5, #16]
 800bab2:	b930      	cbnz	r0, 800bac2 <_svfiprintf_r+0x32>
 800bab4:	230c      	movs	r3, #12
 800bab6:	603b      	str	r3, [r7, #0]
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	b01d      	add	sp, #116	@ 0x74
 800babe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac2:	2340      	movs	r3, #64	@ 0x40
 800bac4:	616b      	str	r3, [r5, #20]
 800bac6:	2300      	movs	r3, #0
 800bac8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baca:	2320      	movs	r3, #32
 800bacc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bad0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bad4:	2330      	movs	r3, #48	@ 0x30
 800bad6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc74 <_svfiprintf_r+0x1e4>
 800bada:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bade:	f04f 0901 	mov.w	r9, #1
 800bae2:	4623      	mov	r3, r4
 800bae4:	469a      	mov	sl, r3
 800bae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baea:	b10a      	cbz	r2, 800baf0 <_svfiprintf_r+0x60>
 800baec:	2a25      	cmp	r2, #37	@ 0x25
 800baee:	d1f9      	bne.n	800bae4 <_svfiprintf_r+0x54>
 800baf0:	ebba 0b04 	subs.w	fp, sl, r4
 800baf4:	d00b      	beq.n	800bb0e <_svfiprintf_r+0x7e>
 800baf6:	465b      	mov	r3, fp
 800baf8:	4622      	mov	r2, r4
 800bafa:	4629      	mov	r1, r5
 800bafc:	4638      	mov	r0, r7
 800bafe:	f7ff ff6b 	bl	800b9d8 <__ssputs_r>
 800bb02:	3001      	adds	r0, #1
 800bb04:	f000 80a7 	beq.w	800bc56 <_svfiprintf_r+0x1c6>
 800bb08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb0a:	445a      	add	r2, fp
 800bb0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 809f 	beq.w	800bc56 <_svfiprintf_r+0x1c6>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb22:	f10a 0a01 	add.w	sl, sl, #1
 800bb26:	9304      	str	r3, [sp, #16]
 800bb28:	9307      	str	r3, [sp, #28]
 800bb2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb30:	4654      	mov	r4, sl
 800bb32:	2205      	movs	r2, #5
 800bb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb38:	484e      	ldr	r0, [pc, #312]	@ (800bc74 <_svfiprintf_r+0x1e4>)
 800bb3a:	f7f4 fbd1 	bl	80002e0 <memchr>
 800bb3e:	9a04      	ldr	r2, [sp, #16]
 800bb40:	b9d8      	cbnz	r0, 800bb7a <_svfiprintf_r+0xea>
 800bb42:	06d0      	lsls	r0, r2, #27
 800bb44:	bf44      	itt	mi
 800bb46:	2320      	movmi	r3, #32
 800bb48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb4c:	0711      	lsls	r1, r2, #28
 800bb4e:	bf44      	itt	mi
 800bb50:	232b      	movmi	r3, #43	@ 0x2b
 800bb52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb56:	f89a 3000 	ldrb.w	r3, [sl]
 800bb5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb5c:	d015      	beq.n	800bb8a <_svfiprintf_r+0xfa>
 800bb5e:	9a07      	ldr	r2, [sp, #28]
 800bb60:	4654      	mov	r4, sl
 800bb62:	2000      	movs	r0, #0
 800bb64:	f04f 0c0a 	mov.w	ip, #10
 800bb68:	4621      	mov	r1, r4
 800bb6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb6e:	3b30      	subs	r3, #48	@ 0x30
 800bb70:	2b09      	cmp	r3, #9
 800bb72:	d94b      	bls.n	800bc0c <_svfiprintf_r+0x17c>
 800bb74:	b1b0      	cbz	r0, 800bba4 <_svfiprintf_r+0x114>
 800bb76:	9207      	str	r2, [sp, #28]
 800bb78:	e014      	b.n	800bba4 <_svfiprintf_r+0x114>
 800bb7a:	eba0 0308 	sub.w	r3, r0, r8
 800bb7e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb82:	4313      	orrs	r3, r2
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	46a2      	mov	sl, r4
 800bb88:	e7d2      	b.n	800bb30 <_svfiprintf_r+0xa0>
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	1d19      	adds	r1, r3, #4
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	9103      	str	r1, [sp, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bfbb      	ittet	lt
 800bb96:	425b      	neglt	r3, r3
 800bb98:	f042 0202 	orrlt.w	r2, r2, #2
 800bb9c:	9307      	strge	r3, [sp, #28]
 800bb9e:	9307      	strlt	r3, [sp, #28]
 800bba0:	bfb8      	it	lt
 800bba2:	9204      	strlt	r2, [sp, #16]
 800bba4:	7823      	ldrb	r3, [r4, #0]
 800bba6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bba8:	d10a      	bne.n	800bbc0 <_svfiprintf_r+0x130>
 800bbaa:	7863      	ldrb	r3, [r4, #1]
 800bbac:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbae:	d132      	bne.n	800bc16 <_svfiprintf_r+0x186>
 800bbb0:	9b03      	ldr	r3, [sp, #12]
 800bbb2:	1d1a      	adds	r2, r3, #4
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	9203      	str	r2, [sp, #12]
 800bbb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbbc:	3402      	adds	r4, #2
 800bbbe:	9305      	str	r3, [sp, #20]
 800bbc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc84 <_svfiprintf_r+0x1f4>
 800bbc4:	7821      	ldrb	r1, [r4, #0]
 800bbc6:	2203      	movs	r2, #3
 800bbc8:	4650      	mov	r0, sl
 800bbca:	f7f4 fb89 	bl	80002e0 <memchr>
 800bbce:	b138      	cbz	r0, 800bbe0 <_svfiprintf_r+0x150>
 800bbd0:	9b04      	ldr	r3, [sp, #16]
 800bbd2:	eba0 000a 	sub.w	r0, r0, sl
 800bbd6:	2240      	movs	r2, #64	@ 0x40
 800bbd8:	4082      	lsls	r2, r0
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	3401      	adds	r4, #1
 800bbde:	9304      	str	r3, [sp, #16]
 800bbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe4:	4824      	ldr	r0, [pc, #144]	@ (800bc78 <_svfiprintf_r+0x1e8>)
 800bbe6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbea:	2206      	movs	r2, #6
 800bbec:	f7f4 fb78 	bl	80002e0 <memchr>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d036      	beq.n	800bc62 <_svfiprintf_r+0x1d2>
 800bbf4:	4b21      	ldr	r3, [pc, #132]	@ (800bc7c <_svfiprintf_r+0x1ec>)
 800bbf6:	bb1b      	cbnz	r3, 800bc40 <_svfiprintf_r+0x1b0>
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	3307      	adds	r3, #7
 800bbfc:	f023 0307 	bic.w	r3, r3, #7
 800bc00:	3308      	adds	r3, #8
 800bc02:	9303      	str	r3, [sp, #12]
 800bc04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc06:	4433      	add	r3, r6
 800bc08:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc0a:	e76a      	b.n	800bae2 <_svfiprintf_r+0x52>
 800bc0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc10:	460c      	mov	r4, r1
 800bc12:	2001      	movs	r0, #1
 800bc14:	e7a8      	b.n	800bb68 <_svfiprintf_r+0xd8>
 800bc16:	2300      	movs	r3, #0
 800bc18:	3401      	adds	r4, #1
 800bc1a:	9305      	str	r3, [sp, #20]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f04f 0c0a 	mov.w	ip, #10
 800bc22:	4620      	mov	r0, r4
 800bc24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc28:	3a30      	subs	r2, #48	@ 0x30
 800bc2a:	2a09      	cmp	r2, #9
 800bc2c:	d903      	bls.n	800bc36 <_svfiprintf_r+0x1a6>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0c6      	beq.n	800bbc0 <_svfiprintf_r+0x130>
 800bc32:	9105      	str	r1, [sp, #20]
 800bc34:	e7c4      	b.n	800bbc0 <_svfiprintf_r+0x130>
 800bc36:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e7f0      	b.n	800bc22 <_svfiprintf_r+0x192>
 800bc40:	ab03      	add	r3, sp, #12
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	462a      	mov	r2, r5
 800bc46:	4b0e      	ldr	r3, [pc, #56]	@ (800bc80 <_svfiprintf_r+0x1f0>)
 800bc48:	a904      	add	r1, sp, #16
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	f7fc fd70 	bl	8008730 <_printf_float>
 800bc50:	1c42      	adds	r2, r0, #1
 800bc52:	4606      	mov	r6, r0
 800bc54:	d1d6      	bne.n	800bc04 <_svfiprintf_r+0x174>
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	065b      	lsls	r3, r3, #25
 800bc5a:	f53f af2d 	bmi.w	800bab8 <_svfiprintf_r+0x28>
 800bc5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc60:	e72c      	b.n	800babc <_svfiprintf_r+0x2c>
 800bc62:	ab03      	add	r3, sp, #12
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	462a      	mov	r2, r5
 800bc68:	4b05      	ldr	r3, [pc, #20]	@ (800bc80 <_svfiprintf_r+0x1f0>)
 800bc6a:	a904      	add	r1, sp, #16
 800bc6c:	4638      	mov	r0, r7
 800bc6e:	f7fc ffe7 	bl	8008c40 <_printf_i>
 800bc72:	e7ed      	b.n	800bc50 <_svfiprintf_r+0x1c0>
 800bc74:	0800da61 	.word	0x0800da61
 800bc78:	0800da6b 	.word	0x0800da6b
 800bc7c:	08008731 	.word	0x08008731
 800bc80:	0800b9d9 	.word	0x0800b9d9
 800bc84:	0800da67 	.word	0x0800da67

0800bc88 <__sflush_r>:
 800bc88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc90:	0716      	lsls	r6, r2, #28
 800bc92:	4605      	mov	r5, r0
 800bc94:	460c      	mov	r4, r1
 800bc96:	d454      	bmi.n	800bd42 <__sflush_r+0xba>
 800bc98:	684b      	ldr	r3, [r1, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	dc02      	bgt.n	800bca4 <__sflush_r+0x1c>
 800bc9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dd48      	ble.n	800bd36 <__sflush_r+0xae>
 800bca4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bca6:	2e00      	cmp	r6, #0
 800bca8:	d045      	beq.n	800bd36 <__sflush_r+0xae>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcb0:	682f      	ldr	r7, [r5, #0]
 800bcb2:	6a21      	ldr	r1, [r4, #32]
 800bcb4:	602b      	str	r3, [r5, #0]
 800bcb6:	d030      	beq.n	800bd1a <__sflush_r+0x92>
 800bcb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	0759      	lsls	r1, r3, #29
 800bcbe:	d505      	bpl.n	800bccc <__sflush_r+0x44>
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	1ad2      	subs	r2, r2, r3
 800bcc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcc6:	b10b      	cbz	r3, 800bccc <__sflush_r+0x44>
 800bcc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcca:	1ad2      	subs	r2, r2, r3
 800bccc:	2300      	movs	r3, #0
 800bcce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcd0:	6a21      	ldr	r1, [r4, #32]
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	47b0      	blx	r6
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	89a3      	ldrh	r3, [r4, #12]
 800bcda:	d106      	bne.n	800bcea <__sflush_r+0x62>
 800bcdc:	6829      	ldr	r1, [r5, #0]
 800bcde:	291d      	cmp	r1, #29
 800bce0:	d82b      	bhi.n	800bd3a <__sflush_r+0xb2>
 800bce2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd8c <__sflush_r+0x104>)
 800bce4:	410a      	asrs	r2, r1
 800bce6:	07d6      	lsls	r6, r2, #31
 800bce8:	d427      	bmi.n	800bd3a <__sflush_r+0xb2>
 800bcea:	2200      	movs	r2, #0
 800bcec:	6062      	str	r2, [r4, #4]
 800bcee:	04d9      	lsls	r1, r3, #19
 800bcf0:	6922      	ldr	r2, [r4, #16]
 800bcf2:	6022      	str	r2, [r4, #0]
 800bcf4:	d504      	bpl.n	800bd00 <__sflush_r+0x78>
 800bcf6:	1c42      	adds	r2, r0, #1
 800bcf8:	d101      	bne.n	800bcfe <__sflush_r+0x76>
 800bcfa:	682b      	ldr	r3, [r5, #0]
 800bcfc:	b903      	cbnz	r3, 800bd00 <__sflush_r+0x78>
 800bcfe:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd02:	602f      	str	r7, [r5, #0]
 800bd04:	b1b9      	cbz	r1, 800bd36 <__sflush_r+0xae>
 800bd06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd0a:	4299      	cmp	r1, r3
 800bd0c:	d002      	beq.n	800bd14 <__sflush_r+0x8c>
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7fe fa80 	bl	800a214 <_free_r>
 800bd14:	2300      	movs	r3, #0
 800bd16:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd18:	e00d      	b.n	800bd36 <__sflush_r+0xae>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b0      	blx	r6
 800bd20:	4602      	mov	r2, r0
 800bd22:	1c50      	adds	r0, r2, #1
 800bd24:	d1c9      	bne.n	800bcba <__sflush_r+0x32>
 800bd26:	682b      	ldr	r3, [r5, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0c6      	beq.n	800bcba <__sflush_r+0x32>
 800bd2c:	2b1d      	cmp	r3, #29
 800bd2e:	d001      	beq.n	800bd34 <__sflush_r+0xac>
 800bd30:	2b16      	cmp	r3, #22
 800bd32:	d11e      	bne.n	800bd72 <__sflush_r+0xea>
 800bd34:	602f      	str	r7, [r5, #0]
 800bd36:	2000      	movs	r0, #0
 800bd38:	e022      	b.n	800bd80 <__sflush_r+0xf8>
 800bd3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd3e:	b21b      	sxth	r3, r3
 800bd40:	e01b      	b.n	800bd7a <__sflush_r+0xf2>
 800bd42:	690f      	ldr	r7, [r1, #16]
 800bd44:	2f00      	cmp	r7, #0
 800bd46:	d0f6      	beq.n	800bd36 <__sflush_r+0xae>
 800bd48:	0793      	lsls	r3, r2, #30
 800bd4a:	680e      	ldr	r6, [r1, #0]
 800bd4c:	bf08      	it	eq
 800bd4e:	694b      	ldreq	r3, [r1, #20]
 800bd50:	600f      	str	r7, [r1, #0]
 800bd52:	bf18      	it	ne
 800bd54:	2300      	movne	r3, #0
 800bd56:	eba6 0807 	sub.w	r8, r6, r7
 800bd5a:	608b      	str	r3, [r1, #8]
 800bd5c:	f1b8 0f00 	cmp.w	r8, #0
 800bd60:	dde9      	ble.n	800bd36 <__sflush_r+0xae>
 800bd62:	6a21      	ldr	r1, [r4, #32]
 800bd64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd66:	4643      	mov	r3, r8
 800bd68:	463a      	mov	r2, r7
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b0      	blx	r6
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	dc08      	bgt.n	800bd84 <__sflush_r+0xfc>
 800bd72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd7a:	81a3      	strh	r3, [r4, #12]
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd84:	4407      	add	r7, r0
 800bd86:	eba8 0800 	sub.w	r8, r8, r0
 800bd8a:	e7e7      	b.n	800bd5c <__sflush_r+0xd4>
 800bd8c:	dfbffffe 	.word	0xdfbffffe

0800bd90 <_fflush_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	690b      	ldr	r3, [r1, #16]
 800bd94:	4605      	mov	r5, r0
 800bd96:	460c      	mov	r4, r1
 800bd98:	b913      	cbnz	r3, 800bda0 <_fflush_r+0x10>
 800bd9a:	2500      	movs	r5, #0
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	b118      	cbz	r0, 800bdaa <_fflush_r+0x1a>
 800bda2:	6a03      	ldr	r3, [r0, #32]
 800bda4:	b90b      	cbnz	r3, 800bdaa <_fflush_r+0x1a>
 800bda6:	f7fd fb03 	bl	80093b0 <__sinit>
 800bdaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0f3      	beq.n	800bd9a <_fflush_r+0xa>
 800bdb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdb4:	07d0      	lsls	r0, r2, #31
 800bdb6:	d404      	bmi.n	800bdc2 <_fflush_r+0x32>
 800bdb8:	0599      	lsls	r1, r3, #22
 800bdba:	d402      	bmi.n	800bdc2 <_fflush_r+0x32>
 800bdbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdbe:	f7fd fc42 	bl	8009646 <__retarget_lock_acquire_recursive>
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f7ff ff5f 	bl	800bc88 <__sflush_r>
 800bdca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdcc:	07da      	lsls	r2, r3, #31
 800bdce:	4605      	mov	r5, r0
 800bdd0:	d4e4      	bmi.n	800bd9c <_fflush_r+0xc>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	059b      	lsls	r3, r3, #22
 800bdd6:	d4e1      	bmi.n	800bd9c <_fflush_r+0xc>
 800bdd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdda:	f7fd fc35 	bl	8009648 <__retarget_lock_release_recursive>
 800bdde:	e7dd      	b.n	800bd9c <_fflush_r+0xc>

0800bde0 <memmove>:
 800bde0:	4288      	cmp	r0, r1
 800bde2:	b510      	push	{r4, lr}
 800bde4:	eb01 0402 	add.w	r4, r1, r2
 800bde8:	d902      	bls.n	800bdf0 <memmove+0x10>
 800bdea:	4284      	cmp	r4, r0
 800bdec:	4623      	mov	r3, r4
 800bdee:	d807      	bhi.n	800be00 <memmove+0x20>
 800bdf0:	1e43      	subs	r3, r0, #1
 800bdf2:	42a1      	cmp	r1, r4
 800bdf4:	d008      	beq.n	800be08 <memmove+0x28>
 800bdf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdfe:	e7f8      	b.n	800bdf2 <memmove+0x12>
 800be00:	4402      	add	r2, r0
 800be02:	4601      	mov	r1, r0
 800be04:	428a      	cmp	r2, r1
 800be06:	d100      	bne.n	800be0a <memmove+0x2a>
 800be08:	bd10      	pop	{r4, pc}
 800be0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be12:	e7f7      	b.n	800be04 <memmove+0x24>

0800be14 <strncmp>:
 800be14:	b510      	push	{r4, lr}
 800be16:	b16a      	cbz	r2, 800be34 <strncmp+0x20>
 800be18:	3901      	subs	r1, #1
 800be1a:	1884      	adds	r4, r0, r2
 800be1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800be24:	429a      	cmp	r2, r3
 800be26:	d103      	bne.n	800be30 <strncmp+0x1c>
 800be28:	42a0      	cmp	r0, r4
 800be2a:	d001      	beq.n	800be30 <strncmp+0x1c>
 800be2c:	2a00      	cmp	r2, #0
 800be2e:	d1f5      	bne.n	800be1c <strncmp+0x8>
 800be30:	1ad0      	subs	r0, r2, r3
 800be32:	bd10      	pop	{r4, pc}
 800be34:	4610      	mov	r0, r2
 800be36:	e7fc      	b.n	800be32 <strncmp+0x1e>

0800be38 <_sbrk_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d06      	ldr	r5, [pc, #24]	@ (800be54 <_sbrk_r+0x1c>)
 800be3c:	2300      	movs	r3, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	4608      	mov	r0, r1
 800be42:	602b      	str	r3, [r5, #0]
 800be44:	f7f6 fc74 	bl	8002730 <_sbrk>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_sbrk_r+0x1a>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_sbrk_r+0x1a>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	24000658 	.word	0x24000658

0800be58 <memcpy>:
 800be58:	440a      	add	r2, r1
 800be5a:	4291      	cmp	r1, r2
 800be5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800be60:	d100      	bne.n	800be64 <memcpy+0xc>
 800be62:	4770      	bx	lr
 800be64:	b510      	push	{r4, lr}
 800be66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be6e:	4291      	cmp	r1, r2
 800be70:	d1f9      	bne.n	800be66 <memcpy+0xe>
 800be72:	bd10      	pop	{r4, pc}
 800be74:	0000      	movs	r0, r0
	...

0800be78 <nan>:
 800be78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be80 <nan+0x8>
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	00000000 	.word	0x00000000
 800be84:	7ff80000 	.word	0x7ff80000

0800be88 <__assert_func>:
 800be88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be8a:	4614      	mov	r4, r2
 800be8c:	461a      	mov	r2, r3
 800be8e:	4b09      	ldr	r3, [pc, #36]	@ (800beb4 <__assert_func+0x2c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4605      	mov	r5, r0
 800be94:	68d8      	ldr	r0, [r3, #12]
 800be96:	b954      	cbnz	r4, 800beae <__assert_func+0x26>
 800be98:	4b07      	ldr	r3, [pc, #28]	@ (800beb8 <__assert_func+0x30>)
 800be9a:	461c      	mov	r4, r3
 800be9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bea0:	9100      	str	r1, [sp, #0]
 800bea2:	462b      	mov	r3, r5
 800bea4:	4905      	ldr	r1, [pc, #20]	@ (800bebc <__assert_func+0x34>)
 800bea6:	f000 fba7 	bl	800c5f8 <fiprintf>
 800beaa:	f000 fbb7 	bl	800c61c <abort>
 800beae:	4b04      	ldr	r3, [pc, #16]	@ (800bec0 <__assert_func+0x38>)
 800beb0:	e7f4      	b.n	800be9c <__assert_func+0x14>
 800beb2:	bf00      	nop
 800beb4:	24000020 	.word	0x24000020
 800beb8:	0800dab5 	.word	0x0800dab5
 800bebc:	0800da87 	.word	0x0800da87
 800bec0:	0800da7a 	.word	0x0800da7a

0800bec4 <_calloc_r>:
 800bec4:	b570      	push	{r4, r5, r6, lr}
 800bec6:	fba1 5402 	umull	r5, r4, r1, r2
 800beca:	b93c      	cbnz	r4, 800bedc <_calloc_r+0x18>
 800becc:	4629      	mov	r1, r5
 800bece:	f7fe fa15 	bl	800a2fc <_malloc_r>
 800bed2:	4606      	mov	r6, r0
 800bed4:	b928      	cbnz	r0, 800bee2 <_calloc_r+0x1e>
 800bed6:	2600      	movs	r6, #0
 800bed8:	4630      	mov	r0, r6
 800beda:	bd70      	pop	{r4, r5, r6, pc}
 800bedc:	220c      	movs	r2, #12
 800bede:	6002      	str	r2, [r0, #0]
 800bee0:	e7f9      	b.n	800bed6 <_calloc_r+0x12>
 800bee2:	462a      	mov	r2, r5
 800bee4:	4621      	mov	r1, r4
 800bee6:	f7fd fb30 	bl	800954a <memset>
 800beea:	e7f5      	b.n	800bed8 <_calloc_r+0x14>

0800beec <rshift>:
 800beec:	6903      	ldr	r3, [r0, #16]
 800beee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800befa:	f100 0414 	add.w	r4, r0, #20
 800befe:	dd45      	ble.n	800bf8c <rshift+0xa0>
 800bf00:	f011 011f 	ands.w	r1, r1, #31
 800bf04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf0c:	d10c      	bne.n	800bf28 <rshift+0x3c>
 800bf0e:	f100 0710 	add.w	r7, r0, #16
 800bf12:	4629      	mov	r1, r5
 800bf14:	42b1      	cmp	r1, r6
 800bf16:	d334      	bcc.n	800bf82 <rshift+0x96>
 800bf18:	1a9b      	subs	r3, r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	1eea      	subs	r2, r5, #3
 800bf1e:	4296      	cmp	r6, r2
 800bf20:	bf38      	it	cc
 800bf22:	2300      	movcc	r3, #0
 800bf24:	4423      	add	r3, r4
 800bf26:	e015      	b.n	800bf54 <rshift+0x68>
 800bf28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf2c:	f1c1 0820 	rsb	r8, r1, #32
 800bf30:	40cf      	lsrs	r7, r1
 800bf32:	f105 0e04 	add.w	lr, r5, #4
 800bf36:	46a1      	mov	r9, r4
 800bf38:	4576      	cmp	r6, lr
 800bf3a:	46f4      	mov	ip, lr
 800bf3c:	d815      	bhi.n	800bf6a <rshift+0x7e>
 800bf3e:	1a9a      	subs	r2, r3, r2
 800bf40:	0092      	lsls	r2, r2, #2
 800bf42:	3a04      	subs	r2, #4
 800bf44:	3501      	adds	r5, #1
 800bf46:	42ae      	cmp	r6, r5
 800bf48:	bf38      	it	cc
 800bf4a:	2200      	movcc	r2, #0
 800bf4c:	18a3      	adds	r3, r4, r2
 800bf4e:	50a7      	str	r7, [r4, r2]
 800bf50:	b107      	cbz	r7, 800bf54 <rshift+0x68>
 800bf52:	3304      	adds	r3, #4
 800bf54:	1b1a      	subs	r2, r3, r4
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf5c:	bf08      	it	eq
 800bf5e:	2300      	moveq	r3, #0
 800bf60:	6102      	str	r2, [r0, #16]
 800bf62:	bf08      	it	eq
 800bf64:	6143      	streq	r3, [r0, #20]
 800bf66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf6a:	f8dc c000 	ldr.w	ip, [ip]
 800bf6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf72:	ea4c 0707 	orr.w	r7, ip, r7
 800bf76:	f849 7b04 	str.w	r7, [r9], #4
 800bf7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf7e:	40cf      	lsrs	r7, r1
 800bf80:	e7da      	b.n	800bf38 <rshift+0x4c>
 800bf82:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf86:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf8a:	e7c3      	b.n	800bf14 <rshift+0x28>
 800bf8c:	4623      	mov	r3, r4
 800bf8e:	e7e1      	b.n	800bf54 <rshift+0x68>

0800bf90 <__hexdig_fun>:
 800bf90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bf94:	2b09      	cmp	r3, #9
 800bf96:	d802      	bhi.n	800bf9e <__hexdig_fun+0xe>
 800bf98:	3820      	subs	r0, #32
 800bf9a:	b2c0      	uxtb	r0, r0
 800bf9c:	4770      	bx	lr
 800bf9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bfa2:	2b05      	cmp	r3, #5
 800bfa4:	d801      	bhi.n	800bfaa <__hexdig_fun+0x1a>
 800bfa6:	3847      	subs	r0, #71	@ 0x47
 800bfa8:	e7f7      	b.n	800bf9a <__hexdig_fun+0xa>
 800bfaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	d801      	bhi.n	800bfb6 <__hexdig_fun+0x26>
 800bfb2:	3827      	subs	r0, #39	@ 0x27
 800bfb4:	e7f1      	b.n	800bf9a <__hexdig_fun+0xa>
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	4770      	bx	lr
	...

0800bfbc <__gethex>:
 800bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	b085      	sub	sp, #20
 800bfc2:	468a      	mov	sl, r1
 800bfc4:	9302      	str	r3, [sp, #8]
 800bfc6:	680b      	ldr	r3, [r1, #0]
 800bfc8:	9001      	str	r0, [sp, #4]
 800bfca:	4690      	mov	r8, r2
 800bfcc:	1c9c      	adds	r4, r3, #2
 800bfce:	46a1      	mov	r9, r4
 800bfd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bfd4:	2830      	cmp	r0, #48	@ 0x30
 800bfd6:	d0fa      	beq.n	800bfce <__gethex+0x12>
 800bfd8:	eba9 0303 	sub.w	r3, r9, r3
 800bfdc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bfe0:	f7ff ffd6 	bl	800bf90 <__hexdig_fun>
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d168      	bne.n	800c0bc <__gethex+0x100>
 800bfea:	49a0      	ldr	r1, [pc, #640]	@ (800c26c <__gethex+0x2b0>)
 800bfec:	2201      	movs	r2, #1
 800bfee:	4648      	mov	r0, r9
 800bff0:	f7ff ff10 	bl	800be14 <strncmp>
 800bff4:	4607      	mov	r7, r0
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d167      	bne.n	800c0ca <__gethex+0x10e>
 800bffa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bffe:	4626      	mov	r6, r4
 800c000:	f7ff ffc6 	bl	800bf90 <__hexdig_fun>
 800c004:	2800      	cmp	r0, #0
 800c006:	d062      	beq.n	800c0ce <__gethex+0x112>
 800c008:	4623      	mov	r3, r4
 800c00a:	7818      	ldrb	r0, [r3, #0]
 800c00c:	2830      	cmp	r0, #48	@ 0x30
 800c00e:	4699      	mov	r9, r3
 800c010:	f103 0301 	add.w	r3, r3, #1
 800c014:	d0f9      	beq.n	800c00a <__gethex+0x4e>
 800c016:	f7ff ffbb 	bl	800bf90 <__hexdig_fun>
 800c01a:	fab0 f580 	clz	r5, r0
 800c01e:	096d      	lsrs	r5, r5, #5
 800c020:	f04f 0b01 	mov.w	fp, #1
 800c024:	464a      	mov	r2, r9
 800c026:	4616      	mov	r6, r2
 800c028:	3201      	adds	r2, #1
 800c02a:	7830      	ldrb	r0, [r6, #0]
 800c02c:	f7ff ffb0 	bl	800bf90 <__hexdig_fun>
 800c030:	2800      	cmp	r0, #0
 800c032:	d1f8      	bne.n	800c026 <__gethex+0x6a>
 800c034:	498d      	ldr	r1, [pc, #564]	@ (800c26c <__gethex+0x2b0>)
 800c036:	2201      	movs	r2, #1
 800c038:	4630      	mov	r0, r6
 800c03a:	f7ff feeb 	bl	800be14 <strncmp>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d13f      	bne.n	800c0c2 <__gethex+0x106>
 800c042:	b944      	cbnz	r4, 800c056 <__gethex+0x9a>
 800c044:	1c74      	adds	r4, r6, #1
 800c046:	4622      	mov	r2, r4
 800c048:	4616      	mov	r6, r2
 800c04a:	3201      	adds	r2, #1
 800c04c:	7830      	ldrb	r0, [r6, #0]
 800c04e:	f7ff ff9f 	bl	800bf90 <__hexdig_fun>
 800c052:	2800      	cmp	r0, #0
 800c054:	d1f8      	bne.n	800c048 <__gethex+0x8c>
 800c056:	1ba4      	subs	r4, r4, r6
 800c058:	00a7      	lsls	r7, r4, #2
 800c05a:	7833      	ldrb	r3, [r6, #0]
 800c05c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c060:	2b50      	cmp	r3, #80	@ 0x50
 800c062:	d13e      	bne.n	800c0e2 <__gethex+0x126>
 800c064:	7873      	ldrb	r3, [r6, #1]
 800c066:	2b2b      	cmp	r3, #43	@ 0x2b
 800c068:	d033      	beq.n	800c0d2 <__gethex+0x116>
 800c06a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c06c:	d034      	beq.n	800c0d8 <__gethex+0x11c>
 800c06e:	1c71      	adds	r1, r6, #1
 800c070:	2400      	movs	r4, #0
 800c072:	7808      	ldrb	r0, [r1, #0]
 800c074:	f7ff ff8c 	bl	800bf90 <__hexdig_fun>
 800c078:	1e43      	subs	r3, r0, #1
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	2b18      	cmp	r3, #24
 800c07e:	d830      	bhi.n	800c0e2 <__gethex+0x126>
 800c080:	f1a0 0210 	sub.w	r2, r0, #16
 800c084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c088:	f7ff ff82 	bl	800bf90 <__hexdig_fun>
 800c08c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c090:	fa5f fc8c 	uxtb.w	ip, ip
 800c094:	f1bc 0f18 	cmp.w	ip, #24
 800c098:	f04f 030a 	mov.w	r3, #10
 800c09c:	d91e      	bls.n	800c0dc <__gethex+0x120>
 800c09e:	b104      	cbz	r4, 800c0a2 <__gethex+0xe6>
 800c0a0:	4252      	negs	r2, r2
 800c0a2:	4417      	add	r7, r2
 800c0a4:	f8ca 1000 	str.w	r1, [sl]
 800c0a8:	b1ed      	cbz	r5, 800c0e6 <__gethex+0x12a>
 800c0aa:	f1bb 0f00 	cmp.w	fp, #0
 800c0ae:	bf0c      	ite	eq
 800c0b0:	2506      	moveq	r5, #6
 800c0b2:	2500      	movne	r5, #0
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	b005      	add	sp, #20
 800c0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0bc:	2500      	movs	r5, #0
 800c0be:	462c      	mov	r4, r5
 800c0c0:	e7b0      	b.n	800c024 <__gethex+0x68>
 800c0c2:	2c00      	cmp	r4, #0
 800c0c4:	d1c7      	bne.n	800c056 <__gethex+0x9a>
 800c0c6:	4627      	mov	r7, r4
 800c0c8:	e7c7      	b.n	800c05a <__gethex+0x9e>
 800c0ca:	464e      	mov	r6, r9
 800c0cc:	462f      	mov	r7, r5
 800c0ce:	2501      	movs	r5, #1
 800c0d0:	e7c3      	b.n	800c05a <__gethex+0x9e>
 800c0d2:	2400      	movs	r4, #0
 800c0d4:	1cb1      	adds	r1, r6, #2
 800c0d6:	e7cc      	b.n	800c072 <__gethex+0xb6>
 800c0d8:	2401      	movs	r4, #1
 800c0da:	e7fb      	b.n	800c0d4 <__gethex+0x118>
 800c0dc:	fb03 0002 	mla	r0, r3, r2, r0
 800c0e0:	e7ce      	b.n	800c080 <__gethex+0xc4>
 800c0e2:	4631      	mov	r1, r6
 800c0e4:	e7de      	b.n	800c0a4 <__gethex+0xe8>
 800c0e6:	eba6 0309 	sub.w	r3, r6, r9
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	2b07      	cmp	r3, #7
 800c0f0:	dc0a      	bgt.n	800c108 <__gethex+0x14c>
 800c0f2:	9801      	ldr	r0, [sp, #4]
 800c0f4:	f7fe f98e 	bl	800a414 <_Balloc>
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	b940      	cbnz	r0, 800c10e <__gethex+0x152>
 800c0fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c270 <__gethex+0x2b4>)
 800c0fe:	4602      	mov	r2, r0
 800c100:	21e4      	movs	r1, #228	@ 0xe4
 800c102:	485c      	ldr	r0, [pc, #368]	@ (800c274 <__gethex+0x2b8>)
 800c104:	f7ff fec0 	bl	800be88 <__assert_func>
 800c108:	3101      	adds	r1, #1
 800c10a:	105b      	asrs	r3, r3, #1
 800c10c:	e7ef      	b.n	800c0ee <__gethex+0x132>
 800c10e:	f100 0a14 	add.w	sl, r0, #20
 800c112:	2300      	movs	r3, #0
 800c114:	4655      	mov	r5, sl
 800c116:	469b      	mov	fp, r3
 800c118:	45b1      	cmp	r9, r6
 800c11a:	d337      	bcc.n	800c18c <__gethex+0x1d0>
 800c11c:	f845 bb04 	str.w	fp, [r5], #4
 800c120:	eba5 050a 	sub.w	r5, r5, sl
 800c124:	10ad      	asrs	r5, r5, #2
 800c126:	6125      	str	r5, [r4, #16]
 800c128:	4658      	mov	r0, fp
 800c12a:	f7fe fa65 	bl	800a5f8 <__hi0bits>
 800c12e:	016d      	lsls	r5, r5, #5
 800c130:	f8d8 6000 	ldr.w	r6, [r8]
 800c134:	1a2d      	subs	r5, r5, r0
 800c136:	42b5      	cmp	r5, r6
 800c138:	dd54      	ble.n	800c1e4 <__gethex+0x228>
 800c13a:	1bad      	subs	r5, r5, r6
 800c13c:	4629      	mov	r1, r5
 800c13e:	4620      	mov	r0, r4
 800c140:	f7fe fdf6 	bl	800ad30 <__any_on>
 800c144:	4681      	mov	r9, r0
 800c146:	b178      	cbz	r0, 800c168 <__gethex+0x1ac>
 800c148:	1e6b      	subs	r3, r5, #1
 800c14a:	1159      	asrs	r1, r3, #5
 800c14c:	f003 021f 	and.w	r2, r3, #31
 800c150:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c154:	f04f 0901 	mov.w	r9, #1
 800c158:	fa09 f202 	lsl.w	r2, r9, r2
 800c15c:	420a      	tst	r2, r1
 800c15e:	d003      	beq.n	800c168 <__gethex+0x1ac>
 800c160:	454b      	cmp	r3, r9
 800c162:	dc36      	bgt.n	800c1d2 <__gethex+0x216>
 800c164:	f04f 0902 	mov.w	r9, #2
 800c168:	4629      	mov	r1, r5
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7ff febe 	bl	800beec <rshift>
 800c170:	442f      	add	r7, r5
 800c172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c176:	42bb      	cmp	r3, r7
 800c178:	da42      	bge.n	800c200 <__gethex+0x244>
 800c17a:	9801      	ldr	r0, [sp, #4]
 800c17c:	4621      	mov	r1, r4
 800c17e:	f7fe f989 	bl	800a494 <_Bfree>
 800c182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c184:	2300      	movs	r3, #0
 800c186:	6013      	str	r3, [r2, #0]
 800c188:	25a3      	movs	r5, #163	@ 0xa3
 800c18a:	e793      	b.n	800c0b4 <__gethex+0xf8>
 800c18c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c190:	2a2e      	cmp	r2, #46	@ 0x2e
 800c192:	d012      	beq.n	800c1ba <__gethex+0x1fe>
 800c194:	2b20      	cmp	r3, #32
 800c196:	d104      	bne.n	800c1a2 <__gethex+0x1e6>
 800c198:	f845 bb04 	str.w	fp, [r5], #4
 800c19c:	f04f 0b00 	mov.w	fp, #0
 800c1a0:	465b      	mov	r3, fp
 800c1a2:	7830      	ldrb	r0, [r6, #0]
 800c1a4:	9303      	str	r3, [sp, #12]
 800c1a6:	f7ff fef3 	bl	800bf90 <__hexdig_fun>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	f000 000f 	and.w	r0, r0, #15
 800c1b0:	4098      	lsls	r0, r3
 800c1b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	e7ae      	b.n	800c118 <__gethex+0x15c>
 800c1ba:	45b1      	cmp	r9, r6
 800c1bc:	d8ea      	bhi.n	800c194 <__gethex+0x1d8>
 800c1be:	492b      	ldr	r1, [pc, #172]	@ (800c26c <__gethex+0x2b0>)
 800c1c0:	9303      	str	r3, [sp, #12]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f7ff fe25 	bl	800be14 <strncmp>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d1e1      	bne.n	800c194 <__gethex+0x1d8>
 800c1d0:	e7a2      	b.n	800c118 <__gethex+0x15c>
 800c1d2:	1ea9      	subs	r1, r5, #2
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7fe fdab 	bl	800ad30 <__any_on>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d0c2      	beq.n	800c164 <__gethex+0x1a8>
 800c1de:	f04f 0903 	mov.w	r9, #3
 800c1e2:	e7c1      	b.n	800c168 <__gethex+0x1ac>
 800c1e4:	da09      	bge.n	800c1fa <__gethex+0x23e>
 800c1e6:	1b75      	subs	r5, r6, r5
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	9801      	ldr	r0, [sp, #4]
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	f7fe fb69 	bl	800a8c4 <__lshift>
 800c1f2:	1b7f      	subs	r7, r7, r5
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	f100 0a14 	add.w	sl, r0, #20
 800c1fa:	f04f 0900 	mov.w	r9, #0
 800c1fe:	e7b8      	b.n	800c172 <__gethex+0x1b6>
 800c200:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c204:	42bd      	cmp	r5, r7
 800c206:	dd6f      	ble.n	800c2e8 <__gethex+0x32c>
 800c208:	1bed      	subs	r5, r5, r7
 800c20a:	42ae      	cmp	r6, r5
 800c20c:	dc34      	bgt.n	800c278 <__gethex+0x2bc>
 800c20e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d022      	beq.n	800c25c <__gethex+0x2a0>
 800c216:	2b03      	cmp	r3, #3
 800c218:	d024      	beq.n	800c264 <__gethex+0x2a8>
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d115      	bne.n	800c24a <__gethex+0x28e>
 800c21e:	42ae      	cmp	r6, r5
 800c220:	d113      	bne.n	800c24a <__gethex+0x28e>
 800c222:	2e01      	cmp	r6, #1
 800c224:	d10b      	bne.n	800c23e <__gethex+0x282>
 800c226:	9a02      	ldr	r2, [sp, #8]
 800c228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c22c:	6013      	str	r3, [r2, #0]
 800c22e:	2301      	movs	r3, #1
 800c230:	6123      	str	r3, [r4, #16]
 800c232:	f8ca 3000 	str.w	r3, [sl]
 800c236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c238:	2562      	movs	r5, #98	@ 0x62
 800c23a:	601c      	str	r4, [r3, #0]
 800c23c:	e73a      	b.n	800c0b4 <__gethex+0xf8>
 800c23e:	1e71      	subs	r1, r6, #1
 800c240:	4620      	mov	r0, r4
 800c242:	f7fe fd75 	bl	800ad30 <__any_on>
 800c246:	2800      	cmp	r0, #0
 800c248:	d1ed      	bne.n	800c226 <__gethex+0x26a>
 800c24a:	9801      	ldr	r0, [sp, #4]
 800c24c:	4621      	mov	r1, r4
 800c24e:	f7fe f921 	bl	800a494 <_Bfree>
 800c252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c254:	2300      	movs	r3, #0
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	2550      	movs	r5, #80	@ 0x50
 800c25a:	e72b      	b.n	800c0b4 <__gethex+0xf8>
 800c25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1f3      	bne.n	800c24a <__gethex+0x28e>
 800c262:	e7e0      	b.n	800c226 <__gethex+0x26a>
 800c264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1dd      	bne.n	800c226 <__gethex+0x26a>
 800c26a:	e7ee      	b.n	800c24a <__gethex+0x28e>
 800c26c:	0800d908 	.word	0x0800d908
 800c270:	0800d79d 	.word	0x0800d79d
 800c274:	0800dab6 	.word	0x0800dab6
 800c278:	1e6f      	subs	r7, r5, #1
 800c27a:	f1b9 0f00 	cmp.w	r9, #0
 800c27e:	d130      	bne.n	800c2e2 <__gethex+0x326>
 800c280:	b127      	cbz	r7, 800c28c <__gethex+0x2d0>
 800c282:	4639      	mov	r1, r7
 800c284:	4620      	mov	r0, r4
 800c286:	f7fe fd53 	bl	800ad30 <__any_on>
 800c28a:	4681      	mov	r9, r0
 800c28c:	117a      	asrs	r2, r7, #5
 800c28e:	2301      	movs	r3, #1
 800c290:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c294:	f007 071f 	and.w	r7, r7, #31
 800c298:	40bb      	lsls	r3, r7
 800c29a:	4213      	tst	r3, r2
 800c29c:	4629      	mov	r1, r5
 800c29e:	4620      	mov	r0, r4
 800c2a0:	bf18      	it	ne
 800c2a2:	f049 0902 	orrne.w	r9, r9, #2
 800c2a6:	f7ff fe21 	bl	800beec <rshift>
 800c2aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c2ae:	1b76      	subs	r6, r6, r5
 800c2b0:	2502      	movs	r5, #2
 800c2b2:	f1b9 0f00 	cmp.w	r9, #0
 800c2b6:	d047      	beq.n	800c348 <__gethex+0x38c>
 800c2b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d015      	beq.n	800c2ec <__gethex+0x330>
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d017      	beq.n	800c2f4 <__gethex+0x338>
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d109      	bne.n	800c2dc <__gethex+0x320>
 800c2c8:	f019 0f02 	tst.w	r9, #2
 800c2cc:	d006      	beq.n	800c2dc <__gethex+0x320>
 800c2ce:	f8da 3000 	ldr.w	r3, [sl]
 800c2d2:	ea49 0903 	orr.w	r9, r9, r3
 800c2d6:	f019 0f01 	tst.w	r9, #1
 800c2da:	d10e      	bne.n	800c2fa <__gethex+0x33e>
 800c2dc:	f045 0510 	orr.w	r5, r5, #16
 800c2e0:	e032      	b.n	800c348 <__gethex+0x38c>
 800c2e2:	f04f 0901 	mov.w	r9, #1
 800c2e6:	e7d1      	b.n	800c28c <__gethex+0x2d0>
 800c2e8:	2501      	movs	r5, #1
 800c2ea:	e7e2      	b.n	800c2b2 <__gethex+0x2f6>
 800c2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ee:	f1c3 0301 	rsb	r3, r3, #1
 800c2f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d0f0      	beq.n	800c2dc <__gethex+0x320>
 800c2fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2fe:	f104 0314 	add.w	r3, r4, #20
 800c302:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c306:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c30a:	f04f 0c00 	mov.w	ip, #0
 800c30e:	4618      	mov	r0, r3
 800c310:	f853 2b04 	ldr.w	r2, [r3], #4
 800c314:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c318:	d01b      	beq.n	800c352 <__gethex+0x396>
 800c31a:	3201      	adds	r2, #1
 800c31c:	6002      	str	r2, [r0, #0]
 800c31e:	2d02      	cmp	r5, #2
 800c320:	f104 0314 	add.w	r3, r4, #20
 800c324:	d13c      	bne.n	800c3a0 <__gethex+0x3e4>
 800c326:	f8d8 2000 	ldr.w	r2, [r8]
 800c32a:	3a01      	subs	r2, #1
 800c32c:	42b2      	cmp	r2, r6
 800c32e:	d109      	bne.n	800c344 <__gethex+0x388>
 800c330:	1171      	asrs	r1, r6, #5
 800c332:	2201      	movs	r2, #1
 800c334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c338:	f006 061f 	and.w	r6, r6, #31
 800c33c:	fa02 f606 	lsl.w	r6, r2, r6
 800c340:	421e      	tst	r6, r3
 800c342:	d13a      	bne.n	800c3ba <__gethex+0x3fe>
 800c344:	f045 0520 	orr.w	r5, r5, #32
 800c348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c34a:	601c      	str	r4, [r3, #0]
 800c34c:	9b02      	ldr	r3, [sp, #8]
 800c34e:	601f      	str	r7, [r3, #0]
 800c350:	e6b0      	b.n	800c0b4 <__gethex+0xf8>
 800c352:	4299      	cmp	r1, r3
 800c354:	f843 cc04 	str.w	ip, [r3, #-4]
 800c358:	d8d9      	bhi.n	800c30e <__gethex+0x352>
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	459b      	cmp	fp, r3
 800c35e:	db17      	blt.n	800c390 <__gethex+0x3d4>
 800c360:	6861      	ldr	r1, [r4, #4]
 800c362:	9801      	ldr	r0, [sp, #4]
 800c364:	3101      	adds	r1, #1
 800c366:	f7fe f855 	bl	800a414 <_Balloc>
 800c36a:	4681      	mov	r9, r0
 800c36c:	b918      	cbnz	r0, 800c376 <__gethex+0x3ba>
 800c36e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3d8 <__gethex+0x41c>)
 800c370:	4602      	mov	r2, r0
 800c372:	2184      	movs	r1, #132	@ 0x84
 800c374:	e6c5      	b.n	800c102 <__gethex+0x146>
 800c376:	6922      	ldr	r2, [r4, #16]
 800c378:	3202      	adds	r2, #2
 800c37a:	f104 010c 	add.w	r1, r4, #12
 800c37e:	0092      	lsls	r2, r2, #2
 800c380:	300c      	adds	r0, #12
 800c382:	f7ff fd69 	bl	800be58 <memcpy>
 800c386:	4621      	mov	r1, r4
 800c388:	9801      	ldr	r0, [sp, #4]
 800c38a:	f7fe f883 	bl	800a494 <_Bfree>
 800c38e:	464c      	mov	r4, r9
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c398:	6122      	str	r2, [r4, #16]
 800c39a:	2201      	movs	r2, #1
 800c39c:	615a      	str	r2, [r3, #20]
 800c39e:	e7be      	b.n	800c31e <__gethex+0x362>
 800c3a0:	6922      	ldr	r2, [r4, #16]
 800c3a2:	455a      	cmp	r2, fp
 800c3a4:	dd0b      	ble.n	800c3be <__gethex+0x402>
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f7ff fd9f 	bl	800beec <rshift>
 800c3ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3b2:	3701      	adds	r7, #1
 800c3b4:	42bb      	cmp	r3, r7
 800c3b6:	f6ff aee0 	blt.w	800c17a <__gethex+0x1be>
 800c3ba:	2501      	movs	r5, #1
 800c3bc:	e7c2      	b.n	800c344 <__gethex+0x388>
 800c3be:	f016 061f 	ands.w	r6, r6, #31
 800c3c2:	d0fa      	beq.n	800c3ba <__gethex+0x3fe>
 800c3c4:	4453      	add	r3, sl
 800c3c6:	f1c6 0620 	rsb	r6, r6, #32
 800c3ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c3ce:	f7fe f913 	bl	800a5f8 <__hi0bits>
 800c3d2:	42b0      	cmp	r0, r6
 800c3d4:	dbe7      	blt.n	800c3a6 <__gethex+0x3ea>
 800c3d6:	e7f0      	b.n	800c3ba <__gethex+0x3fe>
 800c3d8:	0800d79d 	.word	0x0800d79d

0800c3dc <L_shift>:
 800c3dc:	f1c2 0208 	rsb	r2, r2, #8
 800c3e0:	0092      	lsls	r2, r2, #2
 800c3e2:	b570      	push	{r4, r5, r6, lr}
 800c3e4:	f1c2 0620 	rsb	r6, r2, #32
 800c3e8:	6843      	ldr	r3, [r0, #4]
 800c3ea:	6804      	ldr	r4, [r0, #0]
 800c3ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c3f0:	432c      	orrs	r4, r5
 800c3f2:	40d3      	lsrs	r3, r2
 800c3f4:	6004      	str	r4, [r0, #0]
 800c3f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3fa:	4288      	cmp	r0, r1
 800c3fc:	d3f4      	bcc.n	800c3e8 <L_shift+0xc>
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}

0800c400 <__match>:
 800c400:	b530      	push	{r4, r5, lr}
 800c402:	6803      	ldr	r3, [r0, #0]
 800c404:	3301      	adds	r3, #1
 800c406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c40a:	b914      	cbnz	r4, 800c412 <__match+0x12>
 800c40c:	6003      	str	r3, [r0, #0]
 800c40e:	2001      	movs	r0, #1
 800c410:	bd30      	pop	{r4, r5, pc}
 800c412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c416:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c41a:	2d19      	cmp	r5, #25
 800c41c:	bf98      	it	ls
 800c41e:	3220      	addls	r2, #32
 800c420:	42a2      	cmp	r2, r4
 800c422:	d0f0      	beq.n	800c406 <__match+0x6>
 800c424:	2000      	movs	r0, #0
 800c426:	e7f3      	b.n	800c410 <__match+0x10>

0800c428 <__hexnan>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	680b      	ldr	r3, [r1, #0]
 800c42e:	6801      	ldr	r1, [r0, #0]
 800c430:	115e      	asrs	r6, r3, #5
 800c432:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c436:	f013 031f 	ands.w	r3, r3, #31
 800c43a:	b087      	sub	sp, #28
 800c43c:	bf18      	it	ne
 800c43e:	3604      	addne	r6, #4
 800c440:	2500      	movs	r5, #0
 800c442:	1f37      	subs	r7, r6, #4
 800c444:	4682      	mov	sl, r0
 800c446:	4690      	mov	r8, r2
 800c448:	9301      	str	r3, [sp, #4]
 800c44a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c44e:	46b9      	mov	r9, r7
 800c450:	463c      	mov	r4, r7
 800c452:	9502      	str	r5, [sp, #8]
 800c454:	46ab      	mov	fp, r5
 800c456:	784a      	ldrb	r2, [r1, #1]
 800c458:	1c4b      	adds	r3, r1, #1
 800c45a:	9303      	str	r3, [sp, #12]
 800c45c:	b342      	cbz	r2, 800c4b0 <__hexnan+0x88>
 800c45e:	4610      	mov	r0, r2
 800c460:	9105      	str	r1, [sp, #20]
 800c462:	9204      	str	r2, [sp, #16]
 800c464:	f7ff fd94 	bl	800bf90 <__hexdig_fun>
 800c468:	2800      	cmp	r0, #0
 800c46a:	d151      	bne.n	800c510 <__hexnan+0xe8>
 800c46c:	9a04      	ldr	r2, [sp, #16]
 800c46e:	9905      	ldr	r1, [sp, #20]
 800c470:	2a20      	cmp	r2, #32
 800c472:	d818      	bhi.n	800c4a6 <__hexnan+0x7e>
 800c474:	9b02      	ldr	r3, [sp, #8]
 800c476:	459b      	cmp	fp, r3
 800c478:	dd13      	ble.n	800c4a2 <__hexnan+0x7a>
 800c47a:	454c      	cmp	r4, r9
 800c47c:	d206      	bcs.n	800c48c <__hexnan+0x64>
 800c47e:	2d07      	cmp	r5, #7
 800c480:	dc04      	bgt.n	800c48c <__hexnan+0x64>
 800c482:	462a      	mov	r2, r5
 800c484:	4649      	mov	r1, r9
 800c486:	4620      	mov	r0, r4
 800c488:	f7ff ffa8 	bl	800c3dc <L_shift>
 800c48c:	4544      	cmp	r4, r8
 800c48e:	d952      	bls.n	800c536 <__hexnan+0x10e>
 800c490:	2300      	movs	r3, #0
 800c492:	f1a4 0904 	sub.w	r9, r4, #4
 800c496:	f844 3c04 	str.w	r3, [r4, #-4]
 800c49a:	f8cd b008 	str.w	fp, [sp, #8]
 800c49e:	464c      	mov	r4, r9
 800c4a0:	461d      	mov	r5, r3
 800c4a2:	9903      	ldr	r1, [sp, #12]
 800c4a4:	e7d7      	b.n	800c456 <__hexnan+0x2e>
 800c4a6:	2a29      	cmp	r2, #41	@ 0x29
 800c4a8:	d157      	bne.n	800c55a <__hexnan+0x132>
 800c4aa:	3102      	adds	r1, #2
 800c4ac:	f8ca 1000 	str.w	r1, [sl]
 800c4b0:	f1bb 0f00 	cmp.w	fp, #0
 800c4b4:	d051      	beq.n	800c55a <__hexnan+0x132>
 800c4b6:	454c      	cmp	r4, r9
 800c4b8:	d206      	bcs.n	800c4c8 <__hexnan+0xa0>
 800c4ba:	2d07      	cmp	r5, #7
 800c4bc:	dc04      	bgt.n	800c4c8 <__hexnan+0xa0>
 800c4be:	462a      	mov	r2, r5
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f7ff ff8a 	bl	800c3dc <L_shift>
 800c4c8:	4544      	cmp	r4, r8
 800c4ca:	d936      	bls.n	800c53a <__hexnan+0x112>
 800c4cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c4d0:	4623      	mov	r3, r4
 800c4d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c4d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c4da:	429f      	cmp	r7, r3
 800c4dc:	d2f9      	bcs.n	800c4d2 <__hexnan+0xaa>
 800c4de:	1b3b      	subs	r3, r7, r4
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	3401      	adds	r4, #1
 800c4e8:	3e03      	subs	r6, #3
 800c4ea:	42b4      	cmp	r4, r6
 800c4ec:	bf88      	it	hi
 800c4ee:	2304      	movhi	r3, #4
 800c4f0:	4443      	add	r3, r8
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f843 2b04 	str.w	r2, [r3], #4
 800c4f8:	429f      	cmp	r7, r3
 800c4fa:	d2fb      	bcs.n	800c4f4 <__hexnan+0xcc>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	b91b      	cbnz	r3, 800c508 <__hexnan+0xe0>
 800c500:	4547      	cmp	r7, r8
 800c502:	d128      	bne.n	800c556 <__hexnan+0x12e>
 800c504:	2301      	movs	r3, #1
 800c506:	603b      	str	r3, [r7, #0]
 800c508:	2005      	movs	r0, #5
 800c50a:	b007      	add	sp, #28
 800c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c510:	3501      	adds	r5, #1
 800c512:	2d08      	cmp	r5, #8
 800c514:	f10b 0b01 	add.w	fp, fp, #1
 800c518:	dd06      	ble.n	800c528 <__hexnan+0x100>
 800c51a:	4544      	cmp	r4, r8
 800c51c:	d9c1      	bls.n	800c4a2 <__hexnan+0x7a>
 800c51e:	2300      	movs	r3, #0
 800c520:	f844 3c04 	str.w	r3, [r4, #-4]
 800c524:	2501      	movs	r5, #1
 800c526:	3c04      	subs	r4, #4
 800c528:	6822      	ldr	r2, [r4, #0]
 800c52a:	f000 000f 	and.w	r0, r0, #15
 800c52e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c532:	6020      	str	r0, [r4, #0]
 800c534:	e7b5      	b.n	800c4a2 <__hexnan+0x7a>
 800c536:	2508      	movs	r5, #8
 800c538:	e7b3      	b.n	800c4a2 <__hexnan+0x7a>
 800c53a:	9b01      	ldr	r3, [sp, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0dd      	beq.n	800c4fc <__hexnan+0xd4>
 800c540:	f1c3 0320 	rsb	r3, r3, #32
 800c544:	f04f 32ff 	mov.w	r2, #4294967295
 800c548:	40da      	lsrs	r2, r3
 800c54a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c54e:	4013      	ands	r3, r2
 800c550:	f846 3c04 	str.w	r3, [r6, #-4]
 800c554:	e7d2      	b.n	800c4fc <__hexnan+0xd4>
 800c556:	3f04      	subs	r7, #4
 800c558:	e7d0      	b.n	800c4fc <__hexnan+0xd4>
 800c55a:	2004      	movs	r0, #4
 800c55c:	e7d5      	b.n	800c50a <__hexnan+0xe2>

0800c55e <__ascii_mbtowc>:
 800c55e:	b082      	sub	sp, #8
 800c560:	b901      	cbnz	r1, 800c564 <__ascii_mbtowc+0x6>
 800c562:	a901      	add	r1, sp, #4
 800c564:	b142      	cbz	r2, 800c578 <__ascii_mbtowc+0x1a>
 800c566:	b14b      	cbz	r3, 800c57c <__ascii_mbtowc+0x1e>
 800c568:	7813      	ldrb	r3, [r2, #0]
 800c56a:	600b      	str	r3, [r1, #0]
 800c56c:	7812      	ldrb	r2, [r2, #0]
 800c56e:	1e10      	subs	r0, r2, #0
 800c570:	bf18      	it	ne
 800c572:	2001      	movne	r0, #1
 800c574:	b002      	add	sp, #8
 800c576:	4770      	bx	lr
 800c578:	4610      	mov	r0, r2
 800c57a:	e7fb      	b.n	800c574 <__ascii_mbtowc+0x16>
 800c57c:	f06f 0001 	mvn.w	r0, #1
 800c580:	e7f8      	b.n	800c574 <__ascii_mbtowc+0x16>

0800c582 <_realloc_r>:
 800c582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c586:	4680      	mov	r8, r0
 800c588:	4615      	mov	r5, r2
 800c58a:	460c      	mov	r4, r1
 800c58c:	b921      	cbnz	r1, 800c598 <_realloc_r+0x16>
 800c58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c592:	4611      	mov	r1, r2
 800c594:	f7fd beb2 	b.w	800a2fc <_malloc_r>
 800c598:	b92a      	cbnz	r2, 800c5a6 <_realloc_r+0x24>
 800c59a:	f7fd fe3b 	bl	800a214 <_free_r>
 800c59e:	2400      	movs	r4, #0
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5a6:	f000 f840 	bl	800c62a <_malloc_usable_size_r>
 800c5aa:	4285      	cmp	r5, r0
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	d802      	bhi.n	800c5b6 <_realloc_r+0x34>
 800c5b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c5b4:	d8f4      	bhi.n	800c5a0 <_realloc_r+0x1e>
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	f7fd fe9f 	bl	800a2fc <_malloc_r>
 800c5be:	4607      	mov	r7, r0
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d0ec      	beq.n	800c59e <_realloc_r+0x1c>
 800c5c4:	42b5      	cmp	r5, r6
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	bf28      	it	cs
 800c5cc:	4632      	movcs	r2, r6
 800c5ce:	f7ff fc43 	bl	800be58 <memcpy>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4640      	mov	r0, r8
 800c5d6:	f7fd fe1d 	bl	800a214 <_free_r>
 800c5da:	463c      	mov	r4, r7
 800c5dc:	e7e0      	b.n	800c5a0 <_realloc_r+0x1e>

0800c5de <__ascii_wctomb>:
 800c5de:	4603      	mov	r3, r0
 800c5e0:	4608      	mov	r0, r1
 800c5e2:	b141      	cbz	r1, 800c5f6 <__ascii_wctomb+0x18>
 800c5e4:	2aff      	cmp	r2, #255	@ 0xff
 800c5e6:	d904      	bls.n	800c5f2 <__ascii_wctomb+0x14>
 800c5e8:	228a      	movs	r2, #138	@ 0x8a
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f0:	4770      	bx	lr
 800c5f2:	700a      	strb	r2, [r1, #0]
 800c5f4:	2001      	movs	r0, #1
 800c5f6:	4770      	bx	lr

0800c5f8 <fiprintf>:
 800c5f8:	b40e      	push	{r1, r2, r3}
 800c5fa:	b503      	push	{r0, r1, lr}
 800c5fc:	4601      	mov	r1, r0
 800c5fe:	ab03      	add	r3, sp, #12
 800c600:	4805      	ldr	r0, [pc, #20]	@ (800c618 <fiprintf+0x20>)
 800c602:	f853 2b04 	ldr.w	r2, [r3], #4
 800c606:	6800      	ldr	r0, [r0, #0]
 800c608:	9301      	str	r3, [sp, #4]
 800c60a:	f000 f83f 	bl	800c68c <_vfiprintf_r>
 800c60e:	b002      	add	sp, #8
 800c610:	f85d eb04 	ldr.w	lr, [sp], #4
 800c614:	b003      	add	sp, #12
 800c616:	4770      	bx	lr
 800c618:	24000020 	.word	0x24000020

0800c61c <abort>:
 800c61c:	b508      	push	{r3, lr}
 800c61e:	2006      	movs	r0, #6
 800c620:	f000 fa08 	bl	800ca34 <raise>
 800c624:	2001      	movs	r0, #1
 800c626:	f7f6 f827 	bl	8002678 <_exit>

0800c62a <_malloc_usable_size_r>:
 800c62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62e:	1f18      	subs	r0, r3, #4
 800c630:	2b00      	cmp	r3, #0
 800c632:	bfbc      	itt	lt
 800c634:	580b      	ldrlt	r3, [r1, r0]
 800c636:	18c0      	addlt	r0, r0, r3
 800c638:	4770      	bx	lr

0800c63a <__sfputc_r>:
 800c63a:	6893      	ldr	r3, [r2, #8]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	2b00      	cmp	r3, #0
 800c640:	b410      	push	{r4}
 800c642:	6093      	str	r3, [r2, #8]
 800c644:	da08      	bge.n	800c658 <__sfputc_r+0x1e>
 800c646:	6994      	ldr	r4, [r2, #24]
 800c648:	42a3      	cmp	r3, r4
 800c64a:	db01      	blt.n	800c650 <__sfputc_r+0x16>
 800c64c:	290a      	cmp	r1, #10
 800c64e:	d103      	bne.n	800c658 <__sfputc_r+0x1e>
 800c650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c654:	f000 b932 	b.w	800c8bc <__swbuf_r>
 800c658:	6813      	ldr	r3, [r2, #0]
 800c65a:	1c58      	adds	r0, r3, #1
 800c65c:	6010      	str	r0, [r2, #0]
 800c65e:	7019      	strb	r1, [r3, #0]
 800c660:	4608      	mov	r0, r1
 800c662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <__sfputs_r>:
 800c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66a:	4606      	mov	r6, r0
 800c66c:	460f      	mov	r7, r1
 800c66e:	4614      	mov	r4, r2
 800c670:	18d5      	adds	r5, r2, r3
 800c672:	42ac      	cmp	r4, r5
 800c674:	d101      	bne.n	800c67a <__sfputs_r+0x12>
 800c676:	2000      	movs	r0, #0
 800c678:	e007      	b.n	800c68a <__sfputs_r+0x22>
 800c67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67e:	463a      	mov	r2, r7
 800c680:	4630      	mov	r0, r6
 800c682:	f7ff ffda 	bl	800c63a <__sfputc_r>
 800c686:	1c43      	adds	r3, r0, #1
 800c688:	d1f3      	bne.n	800c672 <__sfputs_r+0xa>
 800c68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c68c <_vfiprintf_r>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	460d      	mov	r5, r1
 800c692:	b09d      	sub	sp, #116	@ 0x74
 800c694:	4614      	mov	r4, r2
 800c696:	4698      	mov	r8, r3
 800c698:	4606      	mov	r6, r0
 800c69a:	b118      	cbz	r0, 800c6a4 <_vfiprintf_r+0x18>
 800c69c:	6a03      	ldr	r3, [r0, #32]
 800c69e:	b90b      	cbnz	r3, 800c6a4 <_vfiprintf_r+0x18>
 800c6a0:	f7fc fe86 	bl	80093b0 <__sinit>
 800c6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6a6:	07d9      	lsls	r1, r3, #31
 800c6a8:	d405      	bmi.n	800c6b6 <_vfiprintf_r+0x2a>
 800c6aa:	89ab      	ldrh	r3, [r5, #12]
 800c6ac:	059a      	lsls	r2, r3, #22
 800c6ae:	d402      	bmi.n	800c6b6 <_vfiprintf_r+0x2a>
 800c6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6b2:	f7fc ffc8 	bl	8009646 <__retarget_lock_acquire_recursive>
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	071b      	lsls	r3, r3, #28
 800c6ba:	d501      	bpl.n	800c6c0 <_vfiprintf_r+0x34>
 800c6bc:	692b      	ldr	r3, [r5, #16]
 800c6be:	b99b      	cbnz	r3, 800c6e8 <_vfiprintf_r+0x5c>
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f000 f938 	bl	800c938 <__swsetup_r>
 800c6c8:	b170      	cbz	r0, 800c6e8 <_vfiprintf_r+0x5c>
 800c6ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6cc:	07dc      	lsls	r4, r3, #31
 800c6ce:	d504      	bpl.n	800c6da <_vfiprintf_r+0x4e>
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d4:	b01d      	add	sp, #116	@ 0x74
 800c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6da:	89ab      	ldrh	r3, [r5, #12]
 800c6dc:	0598      	lsls	r0, r3, #22
 800c6de:	d4f7      	bmi.n	800c6d0 <_vfiprintf_r+0x44>
 800c6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6e2:	f7fc ffb1 	bl	8009648 <__retarget_lock_release_recursive>
 800c6e6:	e7f3      	b.n	800c6d0 <_vfiprintf_r+0x44>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6ec:	2320      	movs	r3, #32
 800c6ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6f6:	2330      	movs	r3, #48	@ 0x30
 800c6f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c8a8 <_vfiprintf_r+0x21c>
 800c6fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c700:	f04f 0901 	mov.w	r9, #1
 800c704:	4623      	mov	r3, r4
 800c706:	469a      	mov	sl, r3
 800c708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c70c:	b10a      	cbz	r2, 800c712 <_vfiprintf_r+0x86>
 800c70e:	2a25      	cmp	r2, #37	@ 0x25
 800c710:	d1f9      	bne.n	800c706 <_vfiprintf_r+0x7a>
 800c712:	ebba 0b04 	subs.w	fp, sl, r4
 800c716:	d00b      	beq.n	800c730 <_vfiprintf_r+0xa4>
 800c718:	465b      	mov	r3, fp
 800c71a:	4622      	mov	r2, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	4630      	mov	r0, r6
 800c720:	f7ff ffa2 	bl	800c668 <__sfputs_r>
 800c724:	3001      	adds	r0, #1
 800c726:	f000 80a7 	beq.w	800c878 <_vfiprintf_r+0x1ec>
 800c72a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c72c:	445a      	add	r2, fp
 800c72e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c730:	f89a 3000 	ldrb.w	r3, [sl]
 800c734:	2b00      	cmp	r3, #0
 800c736:	f000 809f 	beq.w	800c878 <_vfiprintf_r+0x1ec>
 800c73a:	2300      	movs	r3, #0
 800c73c:	f04f 32ff 	mov.w	r2, #4294967295
 800c740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c744:	f10a 0a01 	add.w	sl, sl, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	9307      	str	r3, [sp, #28]
 800c74c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c750:	931a      	str	r3, [sp, #104]	@ 0x68
 800c752:	4654      	mov	r4, sl
 800c754:	2205      	movs	r2, #5
 800c756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75a:	4853      	ldr	r0, [pc, #332]	@ (800c8a8 <_vfiprintf_r+0x21c>)
 800c75c:	f7f3 fdc0 	bl	80002e0 <memchr>
 800c760:	9a04      	ldr	r2, [sp, #16]
 800c762:	b9d8      	cbnz	r0, 800c79c <_vfiprintf_r+0x110>
 800c764:	06d1      	lsls	r1, r2, #27
 800c766:	bf44      	itt	mi
 800c768:	2320      	movmi	r3, #32
 800c76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c76e:	0713      	lsls	r3, r2, #28
 800c770:	bf44      	itt	mi
 800c772:	232b      	movmi	r3, #43	@ 0x2b
 800c774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c778:	f89a 3000 	ldrb.w	r3, [sl]
 800c77c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c77e:	d015      	beq.n	800c7ac <_vfiprintf_r+0x120>
 800c780:	9a07      	ldr	r2, [sp, #28]
 800c782:	4654      	mov	r4, sl
 800c784:	2000      	movs	r0, #0
 800c786:	f04f 0c0a 	mov.w	ip, #10
 800c78a:	4621      	mov	r1, r4
 800c78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c790:	3b30      	subs	r3, #48	@ 0x30
 800c792:	2b09      	cmp	r3, #9
 800c794:	d94b      	bls.n	800c82e <_vfiprintf_r+0x1a2>
 800c796:	b1b0      	cbz	r0, 800c7c6 <_vfiprintf_r+0x13a>
 800c798:	9207      	str	r2, [sp, #28]
 800c79a:	e014      	b.n	800c7c6 <_vfiprintf_r+0x13a>
 800c79c:	eba0 0308 	sub.w	r3, r0, r8
 800c7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	9304      	str	r3, [sp, #16]
 800c7a8:	46a2      	mov	sl, r4
 800c7aa:	e7d2      	b.n	800c752 <_vfiprintf_r+0xc6>
 800c7ac:	9b03      	ldr	r3, [sp, #12]
 800c7ae:	1d19      	adds	r1, r3, #4
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	9103      	str	r1, [sp, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bfbb      	ittet	lt
 800c7b8:	425b      	neglt	r3, r3
 800c7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c7be:	9307      	strge	r3, [sp, #28]
 800c7c0:	9307      	strlt	r3, [sp, #28]
 800c7c2:	bfb8      	it	lt
 800c7c4:	9204      	strlt	r2, [sp, #16]
 800c7c6:	7823      	ldrb	r3, [r4, #0]
 800c7c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7ca:	d10a      	bne.n	800c7e2 <_vfiprintf_r+0x156>
 800c7cc:	7863      	ldrb	r3, [r4, #1]
 800c7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7d0:	d132      	bne.n	800c838 <_vfiprintf_r+0x1ac>
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	1d1a      	adds	r2, r3, #4
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	9203      	str	r2, [sp, #12]
 800c7da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7de:	3402      	adds	r4, #2
 800c7e0:	9305      	str	r3, [sp, #20]
 800c7e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c8b8 <_vfiprintf_r+0x22c>
 800c7e6:	7821      	ldrb	r1, [r4, #0]
 800c7e8:	2203      	movs	r2, #3
 800c7ea:	4650      	mov	r0, sl
 800c7ec:	f7f3 fd78 	bl	80002e0 <memchr>
 800c7f0:	b138      	cbz	r0, 800c802 <_vfiprintf_r+0x176>
 800c7f2:	9b04      	ldr	r3, [sp, #16]
 800c7f4:	eba0 000a 	sub.w	r0, r0, sl
 800c7f8:	2240      	movs	r2, #64	@ 0x40
 800c7fa:	4082      	lsls	r2, r0
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	3401      	adds	r4, #1
 800c800:	9304      	str	r3, [sp, #16]
 800c802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c806:	4829      	ldr	r0, [pc, #164]	@ (800c8ac <_vfiprintf_r+0x220>)
 800c808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c80c:	2206      	movs	r2, #6
 800c80e:	f7f3 fd67 	bl	80002e0 <memchr>
 800c812:	2800      	cmp	r0, #0
 800c814:	d03f      	beq.n	800c896 <_vfiprintf_r+0x20a>
 800c816:	4b26      	ldr	r3, [pc, #152]	@ (800c8b0 <_vfiprintf_r+0x224>)
 800c818:	bb1b      	cbnz	r3, 800c862 <_vfiprintf_r+0x1d6>
 800c81a:	9b03      	ldr	r3, [sp, #12]
 800c81c:	3307      	adds	r3, #7
 800c81e:	f023 0307 	bic.w	r3, r3, #7
 800c822:	3308      	adds	r3, #8
 800c824:	9303      	str	r3, [sp, #12]
 800c826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c828:	443b      	add	r3, r7
 800c82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c82c:	e76a      	b.n	800c704 <_vfiprintf_r+0x78>
 800c82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c832:	460c      	mov	r4, r1
 800c834:	2001      	movs	r0, #1
 800c836:	e7a8      	b.n	800c78a <_vfiprintf_r+0xfe>
 800c838:	2300      	movs	r3, #0
 800c83a:	3401      	adds	r4, #1
 800c83c:	9305      	str	r3, [sp, #20]
 800c83e:	4619      	mov	r1, r3
 800c840:	f04f 0c0a 	mov.w	ip, #10
 800c844:	4620      	mov	r0, r4
 800c846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c84a:	3a30      	subs	r2, #48	@ 0x30
 800c84c:	2a09      	cmp	r2, #9
 800c84e:	d903      	bls.n	800c858 <_vfiprintf_r+0x1cc>
 800c850:	2b00      	cmp	r3, #0
 800c852:	d0c6      	beq.n	800c7e2 <_vfiprintf_r+0x156>
 800c854:	9105      	str	r1, [sp, #20]
 800c856:	e7c4      	b.n	800c7e2 <_vfiprintf_r+0x156>
 800c858:	fb0c 2101 	mla	r1, ip, r1, r2
 800c85c:	4604      	mov	r4, r0
 800c85e:	2301      	movs	r3, #1
 800c860:	e7f0      	b.n	800c844 <_vfiprintf_r+0x1b8>
 800c862:	ab03      	add	r3, sp, #12
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	462a      	mov	r2, r5
 800c868:	4b12      	ldr	r3, [pc, #72]	@ (800c8b4 <_vfiprintf_r+0x228>)
 800c86a:	a904      	add	r1, sp, #16
 800c86c:	4630      	mov	r0, r6
 800c86e:	f7fb ff5f 	bl	8008730 <_printf_float>
 800c872:	4607      	mov	r7, r0
 800c874:	1c78      	adds	r0, r7, #1
 800c876:	d1d6      	bne.n	800c826 <_vfiprintf_r+0x19a>
 800c878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c87a:	07d9      	lsls	r1, r3, #31
 800c87c:	d405      	bmi.n	800c88a <_vfiprintf_r+0x1fe>
 800c87e:	89ab      	ldrh	r3, [r5, #12]
 800c880:	059a      	lsls	r2, r3, #22
 800c882:	d402      	bmi.n	800c88a <_vfiprintf_r+0x1fe>
 800c884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c886:	f7fc fedf 	bl	8009648 <__retarget_lock_release_recursive>
 800c88a:	89ab      	ldrh	r3, [r5, #12]
 800c88c:	065b      	lsls	r3, r3, #25
 800c88e:	f53f af1f 	bmi.w	800c6d0 <_vfiprintf_r+0x44>
 800c892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c894:	e71e      	b.n	800c6d4 <_vfiprintf_r+0x48>
 800c896:	ab03      	add	r3, sp, #12
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	462a      	mov	r2, r5
 800c89c:	4b05      	ldr	r3, [pc, #20]	@ (800c8b4 <_vfiprintf_r+0x228>)
 800c89e:	a904      	add	r1, sp, #16
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7fc f9cd 	bl	8008c40 <_printf_i>
 800c8a6:	e7e4      	b.n	800c872 <_vfiprintf_r+0x1e6>
 800c8a8:	0800da61 	.word	0x0800da61
 800c8ac:	0800da6b 	.word	0x0800da6b
 800c8b0:	08008731 	.word	0x08008731
 800c8b4:	0800c669 	.word	0x0800c669
 800c8b8:	0800da67 	.word	0x0800da67

0800c8bc <__swbuf_r>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	460e      	mov	r6, r1
 800c8c0:	4614      	mov	r4, r2
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	b118      	cbz	r0, 800c8ce <__swbuf_r+0x12>
 800c8c6:	6a03      	ldr	r3, [r0, #32]
 800c8c8:	b90b      	cbnz	r3, 800c8ce <__swbuf_r+0x12>
 800c8ca:	f7fc fd71 	bl	80093b0 <__sinit>
 800c8ce:	69a3      	ldr	r3, [r4, #24]
 800c8d0:	60a3      	str	r3, [r4, #8]
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	071a      	lsls	r2, r3, #28
 800c8d6:	d501      	bpl.n	800c8dc <__swbuf_r+0x20>
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	b943      	cbnz	r3, 800c8ee <__swbuf_r+0x32>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 f82a 	bl	800c938 <__swsetup_r>
 800c8e4:	b118      	cbz	r0, 800c8ee <__swbuf_r+0x32>
 800c8e6:	f04f 37ff 	mov.w	r7, #4294967295
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	6922      	ldr	r2, [r4, #16]
 800c8f2:	1a98      	subs	r0, r3, r2
 800c8f4:	6963      	ldr	r3, [r4, #20]
 800c8f6:	b2f6      	uxtb	r6, r6
 800c8f8:	4283      	cmp	r3, r0
 800c8fa:	4637      	mov	r7, r6
 800c8fc:	dc05      	bgt.n	800c90a <__swbuf_r+0x4e>
 800c8fe:	4621      	mov	r1, r4
 800c900:	4628      	mov	r0, r5
 800c902:	f7ff fa45 	bl	800bd90 <_fflush_r>
 800c906:	2800      	cmp	r0, #0
 800c908:	d1ed      	bne.n	800c8e6 <__swbuf_r+0x2a>
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	60a3      	str	r3, [r4, #8]
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	701e      	strb	r6, [r3, #0]
 800c918:	6962      	ldr	r2, [r4, #20]
 800c91a:	1c43      	adds	r3, r0, #1
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d004      	beq.n	800c92a <__swbuf_r+0x6e>
 800c920:	89a3      	ldrh	r3, [r4, #12]
 800c922:	07db      	lsls	r3, r3, #31
 800c924:	d5e1      	bpl.n	800c8ea <__swbuf_r+0x2e>
 800c926:	2e0a      	cmp	r6, #10
 800c928:	d1df      	bne.n	800c8ea <__swbuf_r+0x2e>
 800c92a:	4621      	mov	r1, r4
 800c92c:	4628      	mov	r0, r5
 800c92e:	f7ff fa2f 	bl	800bd90 <_fflush_r>
 800c932:	2800      	cmp	r0, #0
 800c934:	d0d9      	beq.n	800c8ea <__swbuf_r+0x2e>
 800c936:	e7d6      	b.n	800c8e6 <__swbuf_r+0x2a>

0800c938 <__swsetup_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4b29      	ldr	r3, [pc, #164]	@ (800c9e0 <__swsetup_r+0xa8>)
 800c93c:	4605      	mov	r5, r0
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	460c      	mov	r4, r1
 800c942:	b118      	cbz	r0, 800c94c <__swsetup_r+0x14>
 800c944:	6a03      	ldr	r3, [r0, #32]
 800c946:	b90b      	cbnz	r3, 800c94c <__swsetup_r+0x14>
 800c948:	f7fc fd32 	bl	80093b0 <__sinit>
 800c94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c950:	0719      	lsls	r1, r3, #28
 800c952:	d422      	bmi.n	800c99a <__swsetup_r+0x62>
 800c954:	06da      	lsls	r2, r3, #27
 800c956:	d407      	bmi.n	800c968 <__swsetup_r+0x30>
 800c958:	2209      	movs	r2, #9
 800c95a:	602a      	str	r2, [r5, #0]
 800c95c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	f04f 30ff 	mov.w	r0, #4294967295
 800c966:	e033      	b.n	800c9d0 <__swsetup_r+0x98>
 800c968:	0758      	lsls	r0, r3, #29
 800c96a:	d512      	bpl.n	800c992 <__swsetup_r+0x5a>
 800c96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c96e:	b141      	cbz	r1, 800c982 <__swsetup_r+0x4a>
 800c970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c974:	4299      	cmp	r1, r3
 800c976:	d002      	beq.n	800c97e <__swsetup_r+0x46>
 800c978:	4628      	mov	r0, r5
 800c97a:	f7fd fc4b 	bl	800a214 <_free_r>
 800c97e:	2300      	movs	r3, #0
 800c980:	6363      	str	r3, [r4, #52]	@ 0x34
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	2300      	movs	r3, #0
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	6923      	ldr	r3, [r4, #16]
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	f043 0308 	orr.w	r3, r3, #8
 800c998:	81a3      	strh	r3, [r4, #12]
 800c99a:	6923      	ldr	r3, [r4, #16]
 800c99c:	b94b      	cbnz	r3, 800c9b2 <__swsetup_r+0x7a>
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9a8:	d003      	beq.n	800c9b2 <__swsetup_r+0x7a>
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f000 f883 	bl	800cab8 <__smakebuf_r>
 800c9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b6:	f013 0201 	ands.w	r2, r3, #1
 800c9ba:	d00a      	beq.n	800c9d2 <__swsetup_r+0x9a>
 800c9bc:	2200      	movs	r2, #0
 800c9be:	60a2      	str	r2, [r4, #8]
 800c9c0:	6962      	ldr	r2, [r4, #20]
 800c9c2:	4252      	negs	r2, r2
 800c9c4:	61a2      	str	r2, [r4, #24]
 800c9c6:	6922      	ldr	r2, [r4, #16]
 800c9c8:	b942      	cbnz	r2, 800c9dc <__swsetup_r+0xa4>
 800c9ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9ce:	d1c5      	bne.n	800c95c <__swsetup_r+0x24>
 800c9d0:	bd38      	pop	{r3, r4, r5, pc}
 800c9d2:	0799      	lsls	r1, r3, #30
 800c9d4:	bf58      	it	pl
 800c9d6:	6962      	ldrpl	r2, [r4, #20]
 800c9d8:	60a2      	str	r2, [r4, #8]
 800c9da:	e7f4      	b.n	800c9c6 <__swsetup_r+0x8e>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	e7f7      	b.n	800c9d0 <__swsetup_r+0x98>
 800c9e0:	24000020 	.word	0x24000020

0800c9e4 <_raise_r>:
 800c9e4:	291f      	cmp	r1, #31
 800c9e6:	b538      	push	{r3, r4, r5, lr}
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	d904      	bls.n	800c9f8 <_raise_r+0x14>
 800c9ee:	2316      	movs	r3, #22
 800c9f0:	6003      	str	r3, [r0, #0]
 800c9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c9fa:	b112      	cbz	r2, 800ca02 <_raise_r+0x1e>
 800c9fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca00:	b94b      	cbnz	r3, 800ca16 <_raise_r+0x32>
 800ca02:	4628      	mov	r0, r5
 800ca04:	f000 f830 	bl	800ca68 <_getpid_r>
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca12:	f000 b817 	b.w	800ca44 <_kill_r>
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d00a      	beq.n	800ca30 <_raise_r+0x4c>
 800ca1a:	1c59      	adds	r1, r3, #1
 800ca1c:	d103      	bne.n	800ca26 <_raise_r+0x42>
 800ca1e:	2316      	movs	r3, #22
 800ca20:	6003      	str	r3, [r0, #0]
 800ca22:	2001      	movs	r0, #1
 800ca24:	e7e7      	b.n	800c9f6 <_raise_r+0x12>
 800ca26:	2100      	movs	r1, #0
 800ca28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	4798      	blx	r3
 800ca30:	2000      	movs	r0, #0
 800ca32:	e7e0      	b.n	800c9f6 <_raise_r+0x12>

0800ca34 <raise>:
 800ca34:	4b02      	ldr	r3, [pc, #8]	@ (800ca40 <raise+0xc>)
 800ca36:	4601      	mov	r1, r0
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	f7ff bfd3 	b.w	800c9e4 <_raise_r>
 800ca3e:	bf00      	nop
 800ca40:	24000020 	.word	0x24000020

0800ca44 <_kill_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	4d07      	ldr	r5, [pc, #28]	@ (800ca64 <_kill_r+0x20>)
 800ca48:	2300      	movs	r3, #0
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	4611      	mov	r1, r2
 800ca50:	602b      	str	r3, [r5, #0]
 800ca52:	f7f5 fe01 	bl	8002658 <_kill>
 800ca56:	1c43      	adds	r3, r0, #1
 800ca58:	d102      	bne.n	800ca60 <_kill_r+0x1c>
 800ca5a:	682b      	ldr	r3, [r5, #0]
 800ca5c:	b103      	cbz	r3, 800ca60 <_kill_r+0x1c>
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	bd38      	pop	{r3, r4, r5, pc}
 800ca62:	bf00      	nop
 800ca64:	24000658 	.word	0x24000658

0800ca68 <_getpid_r>:
 800ca68:	f7f5 bdee 	b.w	8002648 <_getpid>

0800ca6c <__swhatbuf_r>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	460c      	mov	r4, r1
 800ca70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca74:	2900      	cmp	r1, #0
 800ca76:	b096      	sub	sp, #88	@ 0x58
 800ca78:	4615      	mov	r5, r2
 800ca7a:	461e      	mov	r6, r3
 800ca7c:	da0d      	bge.n	800ca9a <__swhatbuf_r+0x2e>
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca84:	f04f 0100 	mov.w	r1, #0
 800ca88:	bf14      	ite	ne
 800ca8a:	2340      	movne	r3, #64	@ 0x40
 800ca8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca90:	2000      	movs	r0, #0
 800ca92:	6031      	str	r1, [r6, #0]
 800ca94:	602b      	str	r3, [r5, #0]
 800ca96:	b016      	add	sp, #88	@ 0x58
 800ca98:	bd70      	pop	{r4, r5, r6, pc}
 800ca9a:	466a      	mov	r2, sp
 800ca9c:	f000 f848 	bl	800cb30 <_fstat_r>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	dbec      	blt.n	800ca7e <__swhatbuf_r+0x12>
 800caa4:	9901      	ldr	r1, [sp, #4]
 800caa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800caaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800caae:	4259      	negs	r1, r3
 800cab0:	4159      	adcs	r1, r3
 800cab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cab6:	e7eb      	b.n	800ca90 <__swhatbuf_r+0x24>

0800cab8 <__smakebuf_r>:
 800cab8:	898b      	ldrh	r3, [r1, #12]
 800caba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cabc:	079d      	lsls	r5, r3, #30
 800cabe:	4606      	mov	r6, r0
 800cac0:	460c      	mov	r4, r1
 800cac2:	d507      	bpl.n	800cad4 <__smakebuf_r+0x1c>
 800cac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	2301      	movs	r3, #1
 800cace:	6163      	str	r3, [r4, #20]
 800cad0:	b003      	add	sp, #12
 800cad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad4:	ab01      	add	r3, sp, #4
 800cad6:	466a      	mov	r2, sp
 800cad8:	f7ff ffc8 	bl	800ca6c <__swhatbuf_r>
 800cadc:	9f00      	ldr	r7, [sp, #0]
 800cade:	4605      	mov	r5, r0
 800cae0:	4639      	mov	r1, r7
 800cae2:	4630      	mov	r0, r6
 800cae4:	f7fd fc0a 	bl	800a2fc <_malloc_r>
 800cae8:	b948      	cbnz	r0, 800cafe <__smakebuf_r+0x46>
 800caea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caee:	059a      	lsls	r2, r3, #22
 800caf0:	d4ee      	bmi.n	800cad0 <__smakebuf_r+0x18>
 800caf2:	f023 0303 	bic.w	r3, r3, #3
 800caf6:	f043 0302 	orr.w	r3, r3, #2
 800cafa:	81a3      	strh	r3, [r4, #12]
 800cafc:	e7e2      	b.n	800cac4 <__smakebuf_r+0xc>
 800cafe:	89a3      	ldrh	r3, [r4, #12]
 800cb00:	6020      	str	r0, [r4, #0]
 800cb02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb06:	81a3      	strh	r3, [r4, #12]
 800cb08:	9b01      	ldr	r3, [sp, #4]
 800cb0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb0e:	b15b      	cbz	r3, 800cb28 <__smakebuf_r+0x70>
 800cb10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb14:	4630      	mov	r0, r6
 800cb16:	f000 f81d 	bl	800cb54 <_isatty_r>
 800cb1a:	b128      	cbz	r0, 800cb28 <__smakebuf_r+0x70>
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	f023 0303 	bic.w	r3, r3, #3
 800cb22:	f043 0301 	orr.w	r3, r3, #1
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	431d      	orrs	r5, r3
 800cb2c:	81a5      	strh	r5, [r4, #12]
 800cb2e:	e7cf      	b.n	800cad0 <__smakebuf_r+0x18>

0800cb30 <_fstat_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d07      	ldr	r5, [pc, #28]	@ (800cb50 <_fstat_r+0x20>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	4604      	mov	r4, r0
 800cb38:	4608      	mov	r0, r1
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	602b      	str	r3, [r5, #0]
 800cb3e:	f7f5 fdcf 	bl	80026e0 <_fstat>
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	d102      	bne.n	800cb4c <_fstat_r+0x1c>
 800cb46:	682b      	ldr	r3, [r5, #0]
 800cb48:	b103      	cbz	r3, 800cb4c <_fstat_r+0x1c>
 800cb4a:	6023      	str	r3, [r4, #0]
 800cb4c:	bd38      	pop	{r3, r4, r5, pc}
 800cb4e:	bf00      	nop
 800cb50:	24000658 	.word	0x24000658

0800cb54 <_isatty_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d06      	ldr	r5, [pc, #24]	@ (800cb70 <_isatty_r+0x1c>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f5 fdce 	bl	8002700 <_isatty>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_isatty_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_isatty_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	24000658 	.word	0x24000658

0800cb74 <asinf>:
 800cb74:	b508      	push	{r3, lr}
 800cb76:	ed2d 8b02 	vpush	{d8}
 800cb7a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb7e:	f000 fab3 	bl	800d0e8 <__ieee754_asinf>
 800cb82:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8a:	eef0 8a40 	vmov.f32	s17, s0
 800cb8e:	d615      	bvs.n	800cbbc <asinf+0x48>
 800cb90:	eeb0 0a48 	vmov.f32	s0, s16
 800cb94:	f000 f81c 	bl	800cbd0 <fabsf>
 800cb98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cb9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba4:	dd0a      	ble.n	800cbbc <asinf+0x48>
 800cba6:	f7fc fd23 	bl	80095f0 <__errno>
 800cbaa:	ecbd 8b02 	vpop	{d8}
 800cbae:	2321      	movs	r3, #33	@ 0x21
 800cbb0:	6003      	str	r3, [r0, #0]
 800cbb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cbb6:	4804      	ldr	r0, [pc, #16]	@ (800cbc8 <asinf+0x54>)
 800cbb8:	f7fc bd48 	b.w	800964c <nanf>
 800cbbc:	eeb0 0a68 	vmov.f32	s0, s17
 800cbc0:	ecbd 8b02 	vpop	{d8}
 800cbc4:	bd08      	pop	{r3, pc}
 800cbc6:	bf00      	nop
 800cbc8:	0800dab5 	.word	0x0800dab5

0800cbcc <atan2f>:
 800cbcc:	f000 bb72 	b.w	800d2b4 <__ieee754_atan2f>

0800cbd0 <fabsf>:
 800cbd0:	ee10 3a10 	vmov	r3, s0
 800cbd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cbd8:	ee00 3a10 	vmov	s0, r3
 800cbdc:	4770      	bx	lr

0800cbde <checkint>:
 800cbde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cbe2:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	dd2a      	ble.n	800cc42 <checkint+0x64>
 800cbec:	f240 4333 	movw	r3, #1075	@ 0x433
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	dc24      	bgt.n	800cc3e <checkint+0x60>
 800cbf4:	1a9b      	subs	r3, r3, r2
 800cbf6:	f1a3 0620 	sub.w	r6, r3, #32
 800cbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfe:	fa02 f403 	lsl.w	r4, r2, r3
 800cc02:	fa02 f606 	lsl.w	r6, r2, r6
 800cc06:	f1c3 0520 	rsb	r5, r3, #32
 800cc0a:	fa22 f505 	lsr.w	r5, r2, r5
 800cc0e:	4334      	orrs	r4, r6
 800cc10:	432c      	orrs	r4, r5
 800cc12:	409a      	lsls	r2, r3
 800cc14:	ea20 0202 	bic.w	r2, r0, r2
 800cc18:	ea21 0404 	bic.w	r4, r1, r4
 800cc1c:	4322      	orrs	r2, r4
 800cc1e:	f1a3 0420 	sub.w	r4, r3, #32
 800cc22:	f1c3 0220 	rsb	r2, r3, #32
 800cc26:	d10c      	bne.n	800cc42 <checkint+0x64>
 800cc28:	40d8      	lsrs	r0, r3
 800cc2a:	fa01 f302 	lsl.w	r3, r1, r2
 800cc2e:	4318      	orrs	r0, r3
 800cc30:	40e1      	lsrs	r1, r4
 800cc32:	4308      	orrs	r0, r1
 800cc34:	f000 0001 	and.w	r0, r0, #1
 800cc38:	f1d0 0002 	rsbs	r0, r0, #2
 800cc3c:	bd70      	pop	{r4, r5, r6, pc}
 800cc3e:	2002      	movs	r0, #2
 800cc40:	e7fc      	b.n	800cc3c <checkint+0x5e>
 800cc42:	2000      	movs	r0, #0
 800cc44:	e7fa      	b.n	800cc3c <checkint+0x5e>
	...

0800cc48 <pow>:
 800cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4c:	ee10 4a90 	vmov	r4, s1
 800cc50:	ed2d 8b0a 	vpush	{d8-d12}
 800cc54:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800cc58:	ee11 aa90 	vmov	sl, s3
 800cc5c:	f108 32ff 	add.w	r2, r8, #4294967295
 800cc60:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800cc64:	429a      	cmp	r2, r3
 800cc66:	ee10 5a10 	vmov	r5, s0
 800cc6a:	ee11 0a10 	vmov	r0, s2
 800cc6e:	b087      	sub	sp, #28
 800cc70:	46c4      	mov	ip, r8
 800cc72:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800cc76:	d806      	bhi.n	800cc86 <pow+0x3e>
 800cc78:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800cc7c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800cc80:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc82:	f240 8157 	bls.w	800cf34 <pow+0x2ec>
 800cc86:	1802      	adds	r2, r0, r0
 800cc88:	eb4a 010a 	adc.w	r1, sl, sl
 800cc8c:	f06f 0b01 	mvn.w	fp, #1
 800cc90:	1e57      	subs	r7, r2, #1
 800cc92:	f141 33ff 	adc.w	r3, r1, #4294967295
 800cc96:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800cc9a:	45bb      	cmp	fp, r7
 800cc9c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800cca0:	d242      	bcs.n	800cd28 <pow+0xe0>
 800cca2:	ea52 0301 	orrs.w	r3, r2, r1
 800cca6:	f04f 0300 	mov.w	r3, #0
 800ccaa:	d10c      	bne.n	800ccc6 <pow+0x7e>
 800ccac:	196d      	adds	r5, r5, r5
 800ccae:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800ccb2:	4164      	adcs	r4, r4
 800ccb4:	42ab      	cmp	r3, r5
 800ccb6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ccba:	41a3      	sbcs	r3, r4
 800ccbc:	f0c0 808f 	bcc.w	800cdde <pow+0x196>
 800ccc0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ccc4:	e02b      	b.n	800cd1e <pow+0xd6>
 800ccc6:	4ed4      	ldr	r6, [pc, #848]	@ (800d018 <pow+0x3d0>)
 800ccc8:	42b4      	cmp	r4, r6
 800ccca:	bf08      	it	eq
 800cccc:	429d      	cmpeq	r5, r3
 800ccce:	d109      	bne.n	800cce4 <pow+0x9c>
 800ccd0:	1800      	adds	r0, r0, r0
 800ccd2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800ccd6:	eb4a 0a0a 	adc.w	sl, sl, sl
 800ccda:	4283      	cmp	r3, r0
 800ccdc:	4bcf      	ldr	r3, [pc, #828]	@ (800d01c <pow+0x3d4>)
 800ccde:	eb73 030a 	sbcs.w	r3, r3, sl
 800cce2:	e7eb      	b.n	800ccbc <pow+0x74>
 800cce4:	196d      	adds	r5, r5, r5
 800cce6:	48ce      	ldr	r0, [pc, #824]	@ (800d020 <pow+0x3d8>)
 800cce8:	4164      	adcs	r4, r4
 800ccea:	42ab      	cmp	r3, r5
 800ccec:	eb70 0604 	sbcs.w	r6, r0, r4
 800ccf0:	d375      	bcc.n	800cdde <pow+0x196>
 800ccf2:	4281      	cmp	r1, r0
 800ccf4:	bf08      	it	eq
 800ccf6:	429a      	cmpeq	r2, r3
 800ccf8:	d171      	bne.n	800cdde <pow+0x196>
 800ccfa:	4aca      	ldr	r2, [pc, #808]	@ (800d024 <pow+0x3dc>)
 800ccfc:	4294      	cmp	r4, r2
 800ccfe:	bf08      	it	eq
 800cd00:	429d      	cmpeq	r5, r3
 800cd02:	d0dd      	beq.n	800ccc0 <pow+0x78>
 800cd04:	4294      	cmp	r4, r2
 800cd06:	ea6f 0a0a 	mvn.w	sl, sl
 800cd0a:	bf34      	ite	cc
 800cd0c:	2400      	movcc	r4, #0
 800cd0e:	2401      	movcs	r4, #1
 800cd10:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800cd14:	4554      	cmp	r4, sl
 800cd16:	f040 81dc 	bne.w	800d0d2 <pow+0x48a>
 800cd1a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800cd1e:	b007      	add	sp, #28
 800cd20:	ecbd 8b0a 	vpop	{d8-d12}
 800cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd28:	196f      	adds	r7, r5, r5
 800cd2a:	eb44 0904 	adc.w	r9, r4, r4
 800cd2e:	1e7a      	subs	r2, r7, #1
 800cd30:	f169 0300 	sbc.w	r3, r9, #0
 800cd34:	4593      	cmp	fp, r2
 800cd36:	eb7e 0303 	sbcs.w	r3, lr, r3
 800cd3a:	d225      	bcs.n	800cd88 <pow+0x140>
 800cd3c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800cd40:	2c00      	cmp	r4, #0
 800cd42:	da13      	bge.n	800cd6c <pow+0x124>
 800cd44:	4651      	mov	r1, sl
 800cd46:	f7ff ff4a 	bl	800cbde <checkint>
 800cd4a:	2801      	cmp	r0, #1
 800cd4c:	d10e      	bne.n	800cd6c <pow+0x124>
 800cd4e:	eeb1 0b40 	vneg.f64	d0, d0
 800cd52:	ea57 0909 	orrs.w	r9, r7, r9
 800cd56:	d10b      	bne.n	800cd70 <pow+0x128>
 800cd58:	f1ba 0f00 	cmp.w	sl, #0
 800cd5c:	dadf      	bge.n	800cd1e <pow+0xd6>
 800cd5e:	b007      	add	sp, #28
 800cd60:	ecbd 8b0a 	vpop	{d8-d12}
 800cd64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd68:	f000 bc46 	b.w	800d5f8 <__math_divzero>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e7f0      	b.n	800cd52 <pow+0x10a>
 800cd70:	f1ba 0f00 	cmp.w	sl, #0
 800cd74:	dad3      	bge.n	800cd1e <pow+0xd6>
 800cd76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cd7a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cd7e:	ed8d 7b00 	vstr	d7, [sp]
 800cd82:	ed9d 0b00 	vldr	d0, [sp]
 800cd86:	e7ca      	b.n	800cd1e <pow+0xd6>
 800cd88:	2c00      	cmp	r4, #0
 800cd8a:	da2b      	bge.n	800cde4 <pow+0x19c>
 800cd8c:	4651      	mov	r1, sl
 800cd8e:	f7ff ff26 	bl	800cbde <checkint>
 800cd92:	b930      	cbnz	r0, 800cda2 <pow+0x15a>
 800cd94:	b007      	add	sp, #28
 800cd96:	ecbd 8b0a 	vpop	{d8-d12}
 800cd9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9e:	f000 bc43 	b.w	800d628 <__math_invalid>
 800cda2:	1e41      	subs	r1, r0, #1
 800cda4:	4248      	negs	r0, r1
 800cda6:	4148      	adcs	r0, r1
 800cda8:	0480      	lsls	r0, r0, #18
 800cdaa:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cdae:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800cdb2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800cdb6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800cdba:	2b7f      	cmp	r3, #127	@ 0x7f
 800cdbc:	d92d      	bls.n	800ce1a <pow+0x1d2>
 800cdbe:	4b96      	ldr	r3, [pc, #600]	@ (800d018 <pow+0x3d0>)
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	429c      	cmp	r4, r3
 800cdc4:	bf08      	it	eq
 800cdc6:	4285      	cmpeq	r5, r0
 800cdc8:	f43f af7a 	beq.w	800ccc0 <pow+0x78>
 800cdcc:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800cdd0:	428a      	cmp	r2, r1
 800cdd2:	d80c      	bhi.n	800cdee <pow+0x1a6>
 800cdd4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cdd8:	42a8      	cmp	r0, r5
 800cdda:	41a3      	sbcs	r3, r4
 800cddc:	d204      	bcs.n	800cde8 <pow+0x1a0>
 800cdde:	ee31 0b00 	vadd.f64	d0, d1, d0
 800cde2:	e79c      	b.n	800cd1e <pow+0xd6>
 800cde4:	2000      	movs	r0, #0
 800cde6:	e7e4      	b.n	800cdb2 <pow+0x16a>
 800cde8:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cdec:	e797      	b.n	800cd1e <pow+0xd6>
 800cdee:	2d01      	cmp	r5, #1
 800cdf0:	eb74 0303 	sbcs.w	r3, r4, r3
 800cdf4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cdf8:	bf34      	ite	cc
 800cdfa:	2301      	movcc	r3, #1
 800cdfc:	2300      	movcs	r3, #0
 800cdfe:	4296      	cmp	r6, r2
 800ce00:	bf8c      	ite	hi
 800ce02:	2600      	movhi	r6, #0
 800ce04:	2601      	movls	r6, #1
 800ce06:	42b3      	cmp	r3, r6
 800ce08:	f000 809c 	beq.w	800cf44 <pow+0x2fc>
 800ce0c:	b007      	add	sp, #28
 800ce0e:	ecbd 8b0a 	vpop	{d8-d12}
 800ce12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce16:	f000 bbe7 	b.w	800d5e8 <__math_oflow>
 800ce1a:	f1bc 0f00 	cmp.w	ip, #0
 800ce1e:	d10a      	bne.n	800ce36 <pow+0x1ee>
 800ce20:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800d008 <pow+0x3c0>
 800ce24:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ce28:	ec53 2b17 	vmov	r2, r3, d7
 800ce2c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800ce30:	4615      	mov	r5, r2
 800ce32:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800ce36:	4a7c      	ldr	r2, [pc, #496]	@ (800d028 <pow+0x3e0>)
 800ce38:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800ce3c:	4422      	add	r2, r4
 800ce3e:	1513      	asrs	r3, r2, #20
 800ce40:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800ce44:	ee03 3a10 	vmov	s6, r3
 800ce48:	0d12      	lsrs	r2, r2, #20
 800ce4a:	4b78      	ldr	r3, [pc, #480]	@ (800d02c <pow+0x3e4>)
 800ce4c:	0512      	lsls	r2, r2, #20
 800ce4e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800ce52:	1aa7      	subs	r7, r4, r2
 800ce54:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800ce58:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800ce5c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800ce60:	1e2e      	subs	r6, r5, #0
 800ce62:	ec47 6b14 	vmov	d4, r6, r7
 800ce66:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800ce6a:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ce6e:	ed93 5b00 	vldr	d5, [r3]
 800ce72:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800ce76:	eea3 2b05 	vfma.f64	d2, d3, d5
 800ce7a:	ed93 5b02 	vldr	d5, [r3, #8]
 800ce7e:	ee36 4b02 	vadd.f64	d4, d6, d2
 800ce82:	ee32 2b44 	vsub.f64	d2, d2, d4
 800ce86:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ce8a:	ed93 5b04 	vldr	d5, [r3, #16]
 800ce8e:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ce92:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ce96:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ce9a:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ce9e:	ee34 8b00 	vadd.f64	d8, d4, d0
 800cea2:	eeb0 9b40 	vmov.f64	d9, d0
 800cea6:	ee34 4b48 	vsub.f64	d4, d4, d8
 800ceaa:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800ceae:	ee34 ab00 	vadd.f64	d10, d4, d0
 800ceb2:	ed93 5b06 	vldr	d5, [r3, #24]
 800ceb6:	ee26 bb00 	vmul.f64	d11, d6, d0
 800ceba:	ee37 7b09 	vadd.f64	d7, d7, d9
 800cebe:	ed93 4b08 	vldr	d4, [r3, #32]
 800cec2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800cec6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800ceca:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cece:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800ced2:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800ced6:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ceda:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800cede:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800cee2:	eea0 4b03 	vfma.f64	d4, d0, d3
 800cee6:	eea0 5b04 	vfma.f64	d5, d0, d4
 800ceea:	eeab 7b05 	vfma.f64	d7, d11, d5
 800ceee:	ee38 4b07 	vadd.f64	d4, d8, d7
 800cef2:	ee21 6b04 	vmul.f64	d6, d1, d4
 800cef6:	ee16 3a90 	vmov	r3, s13
 800cefa:	eeb0 5b46 	vmov.f64	d5, d6
 800cefe:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800cf02:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800cf06:	18b2      	adds	r2, r6, r2
 800cf08:	2a3e      	cmp	r2, #62	@ 0x3e
 800cf0a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800cf0e:	ee38 8b44 	vsub.f64	d8, d8, d4
 800cf12:	ee38 8b07 	vadd.f64	d8, d8, d7
 800cf16:	eea1 5b08 	vfma.f64	d5, d1, d8
 800cf1a:	d91b      	bls.n	800cf54 <pow+0x30c>
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	da0b      	bge.n	800cf38 <pow+0x2f0>
 800cf20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cf24:	ee36 0b00 	vadd.f64	d0, d6, d0
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	f43f aef8 	beq.w	800cd1e <pow+0xd6>
 800cf2e:	eeb1 0b40 	vneg.f64	d0, d0
 800cf32:	e6f4      	b.n	800cd1e <pow+0xd6>
 800cf34:	2000      	movs	r0, #0
 800cf36:	e77e      	b.n	800ce36 <pow+0x1ee>
 800cf38:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800cf3c:	d909      	bls.n	800cf52 <pow+0x30a>
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f6bf af64 	bge.w	800ce0c <pow+0x1c4>
 800cf44:	b007      	add	sp, #28
 800cf46:	ecbd 8b0a 	vpop	{d8-d12}
 800cf4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4e:	f000 bb43 	b.w	800d5d8 <__math_uflow>
 800cf52:	2600      	movs	r6, #0
 800cf54:	4936      	ldr	r1, [pc, #216]	@ (800d030 <pow+0x3e8>)
 800cf56:	ed91 4b02 	vldr	d4, [r1, #8]
 800cf5a:	ed91 3b00 	vldr	d3, [r1]
 800cf5e:	eeb0 7b44 	vmov.f64	d7, d4
 800cf62:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cf66:	ee17 5a10 	vmov	r5, s14
 800cf6a:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cf6e:	ed91 4b04 	vldr	d4, [r1, #16]
 800cf72:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800cf76:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cf7a:	ed91 4b06 	vldr	d4, [r1, #24]
 800cf7e:	18dc      	adds	r4, r3, r3
 800cf80:	f104 030f 	add.w	r3, r4, #15
 800cf84:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800cf88:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cf8c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800cf90:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cf94:	ee25 6b05 	vmul.f64	d6, d5, d5
 800cf98:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800cf9c:	ed91 4b08 	vldr	d4, [r1, #32]
 800cfa0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cfa4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800cfa8:	eea5 4b03 	vfma.f64	d4, d5, d3
 800cfac:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800cfb0:	eea6 7b04 	vfma.f64	d7, d6, d4
 800cfb4:	ee26 6b06 	vmul.f64	d6, d6, d6
 800cfb8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800cfbc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800cfc0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800cfc4:	eea5 4b03 	vfma.f64	d4, d5, d3
 800cfc8:	1940      	adds	r0, r0, r5
 800cfca:	2700      	movs	r7, #0
 800cfcc:	eb17 020c 	adds.w	r2, r7, ip
 800cfd0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800cfd4:	eea6 7b04 	vfma.f64	d7, d6, d4
 800cfd8:	2e00      	cmp	r6, #0
 800cfda:	d175      	bne.n	800d0c8 <pow+0x480>
 800cfdc:	42bd      	cmp	r5, r7
 800cfde:	db29      	blt.n	800d034 <pow+0x3ec>
 800cfe0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800cfe4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800cfe8:	4610      	mov	r0, r2
 800cfea:	ec41 0b10 	vmov	d0, r0, r1
 800cfee:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cff2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d010 <pow+0x3c8>
 800cff6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cffa:	b007      	add	sp, #28
 800cffc:	ecbd 8b0a 	vpop	{d8-d12}
 800d000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d004:	f000 bb28 	b.w	800d658 <__math_check_oflow>
 800d008:	00000000 	.word	0x00000000
 800d00c:	43300000 	.word	0x43300000
 800d010:	00000000 	.word	0x00000000
 800d014:	7f000000 	.word	0x7f000000
 800d018:	3ff00000 	.word	0x3ff00000
 800d01c:	fff00000 	.word	0xfff00000
 800d020:	ffe00000 	.word	0xffe00000
 800d024:	7fe00000 	.word	0x7fe00000
 800d028:	c0196aab 	.word	0xc0196aab
 800d02c:	0800db18 	.word	0x0800db18
 800d030:	0800eb98 	.word	0x0800eb98
 800d034:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d038:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800d03c:	4610      	mov	r0, r2
 800d03e:	ec41 0b15 	vmov	d5, r0, r1
 800d042:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800d046:	ee27 6b05 	vmul.f64	d6, d7, d5
 800d04a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800d04e:	eeb0 4bc7 	vabs.f64	d4, d7
 800d052:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800d056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d05a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800d0d8 <pow+0x490>
 800d05e:	d52a      	bpl.n	800d0b6 <pow+0x46e>
 800d060:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d064:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06c:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d070:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800d074:	bf58      	it	pl
 800d076:	eeb0 4b43 	vmovpl.f64	d4, d3
 800d07a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800d07e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d082:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d086:	ee36 6b05 	vadd.f64	d6, d6, d5
 800d08a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800d08e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800d092:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09a:	d104      	bne.n	800d0a6 <pow+0x45e>
 800d09c:	4632      	mov	r2, r6
 800d09e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800d0a2:	ec43 2b17 	vmov	d7, r2, r3
 800d0a6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d0aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d0ae:	ee26 6b00 	vmul.f64	d6, d6, d0
 800d0b2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d0b6:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d0ba:	b007      	add	sp, #28
 800d0bc:	ecbd 8b0a 	vpop	{d8-d12}
 800d0c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	f000 babf 	b.w	800d646 <__math_check_uflow>
 800d0c8:	ec43 2b10 	vmov	d0, r2, r3
 800d0cc:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d0d0:	e625      	b.n	800cd1e <pow+0xd6>
 800d0d2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800d0e0 <pow+0x498>
 800d0d6:	e622      	b.n	800cd1e <pow+0xd6>
 800d0d8:	00000000 	.word	0x00000000
 800d0dc:	00100000 	.word	0x00100000
	...

0800d0e8 <__ieee754_asinf>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	ee10 5a10 	vmov	r5, s0
 800d0ee:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d0f2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800d0f6:	ed2d 8b04 	vpush	{d8-d9}
 800d0fa:	d10c      	bne.n	800d116 <__ieee754_asinf+0x2e>
 800d0fc:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800d274 <__ieee754_asinf+0x18c>
 800d100:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800d278 <__ieee754_asinf+0x190>
 800d104:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d108:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d10c:	eeb0 0a67 	vmov.f32	s0, s15
 800d110:	ecbd 8b04 	vpop	{d8-d9}
 800d114:	bd38      	pop	{r3, r4, r5, pc}
 800d116:	d904      	bls.n	800d122 <__ieee754_asinf+0x3a>
 800d118:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d11c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d120:	e7f6      	b.n	800d110 <__ieee754_asinf+0x28>
 800d122:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800d126:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800d12a:	d20b      	bcs.n	800d144 <__ieee754_asinf+0x5c>
 800d12c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800d130:	d252      	bcs.n	800d1d8 <__ieee754_asinf+0xf0>
 800d132:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800d27c <__ieee754_asinf+0x194>
 800d136:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d13a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800d13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d142:	dce5      	bgt.n	800d110 <__ieee754_asinf+0x28>
 800d144:	f7ff fd44 	bl	800cbd0 <fabsf>
 800d148:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800d14c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d150:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d154:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800d280 <__ieee754_asinf+0x198>
 800d158:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800d284 <__ieee754_asinf+0x19c>
 800d15c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800d288 <__ieee754_asinf+0x1a0>
 800d160:	eea8 7a27 	vfma.f32	s14, s16, s15
 800d164:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800d28c <__ieee754_asinf+0x1a4>
 800d168:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d16c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800d290 <__ieee754_asinf+0x1a8>
 800d170:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d174:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800d294 <__ieee754_asinf+0x1ac>
 800d178:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d17c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800d298 <__ieee754_asinf+0x1b0>
 800d180:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d184:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800d29c <__ieee754_asinf+0x1b4>
 800d188:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d18c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800d2a0 <__ieee754_asinf+0x1b8>
 800d190:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d194:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800d2a4 <__ieee754_asinf+0x1bc>
 800d198:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d19c:	eeb0 0a48 	vmov.f32	s0, s16
 800d1a0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d1a4:	f000 fa6c 	bl	800d680 <__ieee754_sqrtf>
 800d1a8:	4b3f      	ldr	r3, [pc, #252]	@ (800d2a8 <__ieee754_asinf+0x1c0>)
 800d1aa:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d1ae:	429c      	cmp	r4, r3
 800d1b0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d1b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d1b8:	d93d      	bls.n	800d236 <__ieee754_asinf+0x14e>
 800d1ba:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d1be:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800d2ac <__ieee754_asinf+0x1c4>
 800d1c2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800d1c6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800d278 <__ieee754_asinf+0x190>
 800d1ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d1ce:	2d00      	cmp	r5, #0
 800d1d0:	bfd8      	it	le
 800d1d2:	eeb1 0a40 	vnegle.f32	s0, s0
 800d1d6:	e79b      	b.n	800d110 <__ieee754_asinf+0x28>
 800d1d8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d1dc:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800d284 <__ieee754_asinf+0x19c>
 800d1e0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800d280 <__ieee754_asinf+0x198>
 800d1e4:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800d298 <__ieee754_asinf+0x1b0>
 800d1e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d1ec:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800d28c <__ieee754_asinf+0x1a4>
 800d1f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d1f4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800d290 <__ieee754_asinf+0x1a8>
 800d1f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d1fc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800d294 <__ieee754_asinf+0x1ac>
 800d200:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d204:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800d288 <__ieee754_asinf+0x1a0>
 800d208:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d20c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800d29c <__ieee754_asinf+0x1b4>
 800d210:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d214:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800d2a0 <__ieee754_asinf+0x1b8>
 800d218:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d21c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800d2a4 <__ieee754_asinf+0x1bc>
 800d220:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d224:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d228:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d22c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d230:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d234:	e76c      	b.n	800d110 <__ieee754_asinf+0x28>
 800d236:	ee10 3a10 	vmov	r3, s0
 800d23a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d23e:	f023 030f 	bic.w	r3, r3, #15
 800d242:	ee07 3a10 	vmov	s14, r3
 800d246:	eea7 8a47 	vfms.f32	s16, s14, s14
 800d24a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800d24e:	ee30 0a07 	vadd.f32	s0, s0, s14
 800d252:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d274 <__ieee754_asinf+0x18c>
 800d256:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800d25a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800d2b0 <__ieee754_asinf+0x1c8>
 800d25e:	eee5 7a66 	vfms.f32	s15, s10, s13
 800d262:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800d266:	eeb0 6a40 	vmov.f32	s12, s0
 800d26a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d26e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d272:	e7aa      	b.n	800d1ca <__ieee754_asinf+0xe2>
 800d274:	b33bbd2e 	.word	0xb33bbd2e
 800d278:	3fc90fdb 	.word	0x3fc90fdb
 800d27c:	7149f2ca 	.word	0x7149f2ca
 800d280:	3a4f7f04 	.word	0x3a4f7f04
 800d284:	3811ef08 	.word	0x3811ef08
 800d288:	3e2aaaab 	.word	0x3e2aaaab
 800d28c:	bd241146 	.word	0xbd241146
 800d290:	3e4e0aa8 	.word	0x3e4e0aa8
 800d294:	bea6b090 	.word	0xbea6b090
 800d298:	3d9dc62e 	.word	0x3d9dc62e
 800d29c:	bf303361 	.word	0xbf303361
 800d2a0:	4001572d 	.word	0x4001572d
 800d2a4:	c019d139 	.word	0xc019d139
 800d2a8:	3f799999 	.word	0x3f799999
 800d2ac:	333bbd2e 	.word	0x333bbd2e
 800d2b0:	3f490fdb 	.word	0x3f490fdb

0800d2b4 <__ieee754_atan2f>:
 800d2b4:	ee10 2a90 	vmov	r2, s1
 800d2b8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d2bc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d2c0:	b510      	push	{r4, lr}
 800d2c2:	eef0 7a40 	vmov.f32	s15, s0
 800d2c6:	d806      	bhi.n	800d2d6 <__ieee754_atan2f+0x22>
 800d2c8:	ee10 0a10 	vmov	r0, s0
 800d2cc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d2d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d2d4:	d904      	bls.n	800d2e0 <__ieee754_atan2f+0x2c>
 800d2d6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d2da:	eeb0 0a67 	vmov.f32	s0, s15
 800d2de:	bd10      	pop	{r4, pc}
 800d2e0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d2e4:	d103      	bne.n	800d2ee <__ieee754_atan2f+0x3a>
 800d2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ea:	f000 b881 	b.w	800d3f0 <atanf>
 800d2ee:	1794      	asrs	r4, r2, #30
 800d2f0:	f004 0402 	and.w	r4, r4, #2
 800d2f4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d2f8:	b93b      	cbnz	r3, 800d30a <__ieee754_atan2f+0x56>
 800d2fa:	2c02      	cmp	r4, #2
 800d2fc:	d05c      	beq.n	800d3b8 <__ieee754_atan2f+0x104>
 800d2fe:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800d3cc <__ieee754_atan2f+0x118>
 800d302:	2c03      	cmp	r4, #3
 800d304:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800d308:	e7e7      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d30a:	b939      	cbnz	r1, 800d31c <__ieee754_atan2f+0x68>
 800d30c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800d3d0 <__ieee754_atan2f+0x11c>
 800d310:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800d3d4 <__ieee754_atan2f+0x120>
 800d314:	2800      	cmp	r0, #0
 800d316:	fe67 7a87 	vselge.f32	s15, s15, s14
 800d31a:	e7de      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d31c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d320:	d110      	bne.n	800d344 <__ieee754_atan2f+0x90>
 800d322:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d326:	f104 34ff 	add.w	r4, r4, #4294967295
 800d32a:	d107      	bne.n	800d33c <__ieee754_atan2f+0x88>
 800d32c:	2c02      	cmp	r4, #2
 800d32e:	d846      	bhi.n	800d3be <__ieee754_atan2f+0x10a>
 800d330:	4b29      	ldr	r3, [pc, #164]	@ (800d3d8 <__ieee754_atan2f+0x124>)
 800d332:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d336:	edd3 7a00 	vldr	s15, [r3]
 800d33a:	e7ce      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d33c:	2c02      	cmp	r4, #2
 800d33e:	d841      	bhi.n	800d3c4 <__ieee754_atan2f+0x110>
 800d340:	4b26      	ldr	r3, [pc, #152]	@ (800d3dc <__ieee754_atan2f+0x128>)
 800d342:	e7f6      	b.n	800d332 <__ieee754_atan2f+0x7e>
 800d344:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d348:	d0e0      	beq.n	800d30c <__ieee754_atan2f+0x58>
 800d34a:	1a5b      	subs	r3, r3, r1
 800d34c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d350:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d354:	da1a      	bge.n	800d38c <__ieee754_atan2f+0xd8>
 800d356:	2a00      	cmp	r2, #0
 800d358:	da01      	bge.n	800d35e <__ieee754_atan2f+0xaa>
 800d35a:	313c      	adds	r1, #60	@ 0x3c
 800d35c:	db19      	blt.n	800d392 <__ieee754_atan2f+0xde>
 800d35e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d362:	f7ff fc35 	bl	800cbd0 <fabsf>
 800d366:	f000 f843 	bl	800d3f0 <atanf>
 800d36a:	eef0 7a40 	vmov.f32	s15, s0
 800d36e:	2c01      	cmp	r4, #1
 800d370:	d012      	beq.n	800d398 <__ieee754_atan2f+0xe4>
 800d372:	2c02      	cmp	r4, #2
 800d374:	d017      	beq.n	800d3a6 <__ieee754_atan2f+0xf2>
 800d376:	2c00      	cmp	r4, #0
 800d378:	d0af      	beq.n	800d2da <__ieee754_atan2f+0x26>
 800d37a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d3e0 <__ieee754_atan2f+0x12c>
 800d37e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d382:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d3e4 <__ieee754_atan2f+0x130>
 800d386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d38a:	e7a6      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d38c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d3d0 <__ieee754_atan2f+0x11c>
 800d390:	e7ed      	b.n	800d36e <__ieee754_atan2f+0xba>
 800d392:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d3e8 <__ieee754_atan2f+0x134>
 800d396:	e7ea      	b.n	800d36e <__ieee754_atan2f+0xba>
 800d398:	ee17 3a90 	vmov	r3, s15
 800d39c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d3a0:	ee07 3a90 	vmov	s15, r3
 800d3a4:	e799      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d3a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d3e0 <__ieee754_atan2f+0x12c>
 800d3aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3ae:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d3e4 <__ieee754_atan2f+0x130>
 800d3b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3b6:	e790      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d3b8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d3e4 <__ieee754_atan2f+0x130>
 800d3bc:	e78d      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d3be:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d3ec <__ieee754_atan2f+0x138>
 800d3c2:	e78a      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d3c4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d3e8 <__ieee754_atan2f+0x134>
 800d3c8:	e787      	b.n	800d2da <__ieee754_atan2f+0x26>
 800d3ca:	bf00      	nop
 800d3cc:	c0490fdb 	.word	0xc0490fdb
 800d3d0:	3fc90fdb 	.word	0x3fc90fdb
 800d3d4:	bfc90fdb 	.word	0xbfc90fdb
 800d3d8:	0800eb6c 	.word	0x0800eb6c
 800d3dc:	0800eb60 	.word	0x0800eb60
 800d3e0:	33bbbd2e 	.word	0x33bbbd2e
 800d3e4:	40490fdb 	.word	0x40490fdb
 800d3e8:	00000000 	.word	0x00000000
 800d3ec:	3f490fdb 	.word	0x3f490fdb

0800d3f0 <atanf>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	ee10 5a10 	vmov	r5, s0
 800d3f6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d3fa:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d3fe:	eef0 7a40 	vmov.f32	s15, s0
 800d402:	d30f      	bcc.n	800d424 <atanf+0x34>
 800d404:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d408:	d904      	bls.n	800d414 <atanf+0x24>
 800d40a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d40e:	eeb0 0a67 	vmov.f32	s0, s15
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d54c <atanf+0x15c>
 800d418:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d550 <atanf+0x160>
 800d41c:	2d00      	cmp	r5, #0
 800d41e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800d422:	e7f4      	b.n	800d40e <atanf+0x1e>
 800d424:	4b4b      	ldr	r3, [pc, #300]	@ (800d554 <atanf+0x164>)
 800d426:	429c      	cmp	r4, r3
 800d428:	d810      	bhi.n	800d44c <atanf+0x5c>
 800d42a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d42e:	d20a      	bcs.n	800d446 <atanf+0x56>
 800d430:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d558 <atanf+0x168>
 800d434:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d43c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d444:	dce3      	bgt.n	800d40e <atanf+0x1e>
 800d446:	f04f 33ff 	mov.w	r3, #4294967295
 800d44a:	e013      	b.n	800d474 <atanf+0x84>
 800d44c:	f7ff fbc0 	bl	800cbd0 <fabsf>
 800d450:	4b42      	ldr	r3, [pc, #264]	@ (800d55c <atanf+0x16c>)
 800d452:	429c      	cmp	r4, r3
 800d454:	d84f      	bhi.n	800d4f6 <atanf+0x106>
 800d456:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d45a:	429c      	cmp	r4, r3
 800d45c:	d841      	bhi.n	800d4e2 <atanf+0xf2>
 800d45e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d462:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d466:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d46a:	2300      	movs	r3, #0
 800d46c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d470:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d474:	1c5a      	adds	r2, r3, #1
 800d476:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d47a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800d560 <atanf+0x170>
 800d47e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800d564 <atanf+0x174>
 800d482:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800d568 <atanf+0x178>
 800d486:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d48a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d48e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800d56c <atanf+0x17c>
 800d492:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d496:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800d570 <atanf+0x180>
 800d49a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d49e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800d574 <atanf+0x184>
 800d4a2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d4a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d578 <atanf+0x188>
 800d4aa:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d4ae:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800d57c <atanf+0x18c>
 800d4b2:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d4b6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d580 <atanf+0x190>
 800d4ba:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d4be:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800d584 <atanf+0x194>
 800d4c2:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d4c6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800d588 <atanf+0x198>
 800d4ca:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d4ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d4d2:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d4d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d4da:	d121      	bne.n	800d520 <atanf+0x130>
 800d4dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4e0:	e795      	b.n	800d40e <atanf+0x1e>
 800d4e2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d4e6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d4ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d4f4:	e7be      	b.n	800d474 <atanf+0x84>
 800d4f6:	4b25      	ldr	r3, [pc, #148]	@ (800d58c <atanf+0x19c>)
 800d4f8:	429c      	cmp	r4, r3
 800d4fa:	d80b      	bhi.n	800d514 <atanf+0x124>
 800d4fc:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d504:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d508:	2302      	movs	r3, #2
 800d50a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d512:	e7af      	b.n	800d474 <atanf+0x84>
 800d514:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d518:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d51c:	2303      	movs	r3, #3
 800d51e:	e7a9      	b.n	800d474 <atanf+0x84>
 800d520:	4a1b      	ldr	r2, [pc, #108]	@ (800d590 <atanf+0x1a0>)
 800d522:	491c      	ldr	r1, [pc, #112]	@ (800d594 <atanf+0x1a4>)
 800d524:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d528:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d52c:	edd3 6a00 	vldr	s13, [r3]
 800d530:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d534:	2d00      	cmp	r5, #0
 800d536:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d53a:	edd2 7a00 	vldr	s15, [r2]
 800d53e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d542:	bfb8      	it	lt
 800d544:	eef1 7a67 	vneglt.f32	s15, s15
 800d548:	e761      	b.n	800d40e <atanf+0x1e>
 800d54a:	bf00      	nop
 800d54c:	bfc90fdb 	.word	0xbfc90fdb
 800d550:	3fc90fdb 	.word	0x3fc90fdb
 800d554:	3edfffff 	.word	0x3edfffff
 800d558:	7149f2ca 	.word	0x7149f2ca
 800d55c:	3f97ffff 	.word	0x3f97ffff
 800d560:	3c8569d7 	.word	0x3c8569d7
 800d564:	3d4bda59 	.word	0x3d4bda59
 800d568:	bd6ef16b 	.word	0xbd6ef16b
 800d56c:	3d886b35 	.word	0x3d886b35
 800d570:	3dba2e6e 	.word	0x3dba2e6e
 800d574:	3e124925 	.word	0x3e124925
 800d578:	3eaaaaab 	.word	0x3eaaaaab
 800d57c:	bd15a221 	.word	0xbd15a221
 800d580:	bd9d8795 	.word	0xbd9d8795
 800d584:	bde38e38 	.word	0xbde38e38
 800d588:	be4ccccd 	.word	0xbe4ccccd
 800d58c:	401bffff 	.word	0x401bffff
 800d590:	0800eb88 	.word	0x0800eb88
 800d594:	0800eb78 	.word	0x0800eb78

0800d598 <with_errno>:
 800d598:	b510      	push	{r4, lr}
 800d59a:	ed2d 8b02 	vpush	{d8}
 800d59e:	eeb0 8b40 	vmov.f64	d8, d0
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	f7fc f824 	bl	80095f0 <__errno>
 800d5a8:	eeb0 0b48 	vmov.f64	d0, d8
 800d5ac:	ecbd 8b02 	vpop	{d8}
 800d5b0:	6004      	str	r4, [r0, #0]
 800d5b2:	bd10      	pop	{r4, pc}

0800d5b4 <xflow>:
 800d5b4:	b082      	sub	sp, #8
 800d5b6:	b158      	cbz	r0, 800d5d0 <xflow+0x1c>
 800d5b8:	eeb1 7b40 	vneg.f64	d7, d0
 800d5bc:	ed8d 7b00 	vstr	d7, [sp]
 800d5c0:	ed9d 7b00 	vldr	d7, [sp]
 800d5c4:	2022      	movs	r0, #34	@ 0x22
 800d5c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d5ca:	b002      	add	sp, #8
 800d5cc:	f7ff bfe4 	b.w	800d598 <with_errno>
 800d5d0:	eeb0 7b40 	vmov.f64	d7, d0
 800d5d4:	e7f2      	b.n	800d5bc <xflow+0x8>
	...

0800d5d8 <__math_uflow>:
 800d5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d5e0 <__math_uflow+0x8>
 800d5dc:	f7ff bfea 	b.w	800d5b4 <xflow>
 800d5e0:	00000000 	.word	0x00000000
 800d5e4:	10000000 	.word	0x10000000

0800d5e8 <__math_oflow>:
 800d5e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d5f0 <__math_oflow+0x8>
 800d5ec:	f7ff bfe2 	b.w	800d5b4 <xflow>
 800d5f0:	00000000 	.word	0x00000000
 800d5f4:	70000000 	.word	0x70000000

0800d5f8 <__math_divzero>:
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800d600:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800d604:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d608:	ed8d 7b00 	vstr	d7, [sp]
 800d60c:	ed9d 0b00 	vldr	d0, [sp]
 800d610:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800d620 <__math_divzero+0x28>
 800d614:	2022      	movs	r0, #34	@ 0x22
 800d616:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800d61a:	b002      	add	sp, #8
 800d61c:	f7ff bfbc 	b.w	800d598 <with_errno>
	...

0800d628 <__math_invalid>:
 800d628:	eeb0 7b40 	vmov.f64	d7, d0
 800d62c:	eeb4 7b47 	vcmp.f64	d7, d7
 800d630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d634:	ee30 6b40 	vsub.f64	d6, d0, d0
 800d638:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800d63c:	d602      	bvs.n	800d644 <__math_invalid+0x1c>
 800d63e:	2021      	movs	r0, #33	@ 0x21
 800d640:	f7ff bfaa 	b.w	800d598 <with_errno>
 800d644:	4770      	bx	lr

0800d646 <__math_check_uflow>:
 800d646:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64e:	d102      	bne.n	800d656 <__math_check_uflow+0x10>
 800d650:	2022      	movs	r0, #34	@ 0x22
 800d652:	f7ff bfa1 	b.w	800d598 <with_errno>
 800d656:	4770      	bx	lr

0800d658 <__math_check_oflow>:
 800d658:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800d678 <__math_check_oflow+0x20>
 800d65c:	eeb0 7bc0 	vabs.f64	d7, d0
 800d660:	eeb4 7b46 	vcmp.f64	d7, d6
 800d664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d668:	dd02      	ble.n	800d670 <__math_check_oflow+0x18>
 800d66a:	2022      	movs	r0, #34	@ 0x22
 800d66c:	f7ff bf94 	b.w	800d598 <with_errno>
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	f3af 8000 	nop.w
 800d678:	ffffffff 	.word	0xffffffff
 800d67c:	7fefffff 	.word	0x7fefffff

0800d680 <__ieee754_sqrtf>:
 800d680:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d684:	4770      	bx	lr
	...

0800d688 <_init>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	bf00      	nop
 800d68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68e:	bc08      	pop	{r3}
 800d690:	469e      	mov	lr, r3
 800d692:	4770      	bx	lr

0800d694 <_fini>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	bf00      	nop
 800d698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d69a:	bc08      	pop	{r3}
 800d69c:	469e      	mov	lr, r3
 800d69e:	4770      	bx	lr
