
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e320  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d50  0800e5c0  0800e5c0  0000f5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010310  08010310  00011310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010318  08010318  00011318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801031c  0801031c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08010320  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d4  240001e0  080104fc  000121e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240006b4  080104fc  000126b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000193e7  00000000  00000000  0001220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f1b  00000000  00000000  0002b5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001350  00000000  00000000  0002e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0d  00000000  00000000  0002f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038f19  00000000  00000000  0003076d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018ed1  00000000  00000000  00069686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169875  00000000  00000000  00082557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ebdcc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068dc  00000000  00000000  001ebe10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001f26ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e5a8 	.word	0x0800e5a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800e5a8 	.word	0x0800e5a8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float q[4], float gx, float gy, float gz, float ax, float ay, float az) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b092      	sub	sp, #72	@ 0x48
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	61f8      	str	r0, [r7, #28]
 8000aac:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ab0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000ab4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000ab8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000abc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000ac0:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ac8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad0:	d10e      	bne.n	8000af0 <MahonyAHRSupdateIMU+0x4c>
 8000ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ad6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ade:	d107      	bne.n	8000af0 <MahonyAHRSupdateIMU+0x4c>
 8000ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aec:	f000 8136 	beq.w	8000d5c <MahonyAHRSupdateIMU+0x2b8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000af8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000afc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b10:	eeb0 0a67 	vmov.f32	s0, s15
 8000b14:	f000 fa3c 	bl	8000f90 <invSqrt>
 8000b18:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8000b1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b20:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b28:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8000b2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b38:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8000b3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b40:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b48:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	ed93 7a00 	vldr	s14, [r3]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	330c      	adds	r3, #12
 8000b58:	edd3 7a00 	vldr	s15, [r3]
 8000b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	edd3 6a00 	vldr	s13, [r3]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3308      	adds	r3, #8
 8000b6a:	edd3 7a00 	vldr	s15, [r3]
 8000b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b76:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	ed93 7a00 	vldr	s14, [r3]
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3304      	adds	r3, #4
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	edd3 6a00 	vldr	s13, [r3]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	330c      	adds	r3, #12
 8000b98:	edd3 7a00 	vldr	s15, [r3]
 8000b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	ed93 7a00 	vldr	s14, [r3]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
 8000bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000bbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	330c      	adds	r3, #12
 8000bc4:	edd3 6a00 	vldr	s13, [r3]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	330c      	adds	r3, #12
 8000bcc:	edd3 7a00 	vldr	s15, [r3]
 8000bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8000bdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000be0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000be8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 8000bfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c00:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c08:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c0c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c18:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8000c1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c20:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c28:	edd7 6a02 	vldr	s13, [r7, #8]
 8000c2c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c38:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8000c3c:	4bcd      	ldr	r3, [pc, #820]	@ (8000f74 <MahonyAHRSupdateIMU+0x4d0>)
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4a:	dd54      	ble.n	8000cf6 <MahonyAHRSupdateIMU+0x252>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8000c4c:	4bc9      	ldr	r3, [pc, #804]	@ (8000f74 <MahonyAHRSupdateIMU+0x4d0>)
 8000c4e:	ed93 7a00 	vldr	s14, [r3]
 8000c52:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5a:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8000f78 <MahonyAHRSupdateIMU+0x4d4>
 8000c5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c62:	4bc6      	ldr	r3, [pc, #792]	@ (8000f7c <MahonyAHRSupdateIMU+0x4d8>)
 8000c64:	edd3 7a00 	vldr	s15, [r3]
 8000c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6c:	4bc3      	ldr	r3, [pc, #780]	@ (8000f7c <MahonyAHRSupdateIMU+0x4d8>)
 8000c6e:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8000c72:	4bc0      	ldr	r3, [pc, #768]	@ (8000f74 <MahonyAHRSupdateIMU+0x4d0>)
 8000c74:	ed93 7a00 	vldr	s14, [r3]
 8000c78:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c80:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8000f78 <MahonyAHRSupdateIMU+0x4d4>
 8000c84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c88:	4bbd      	ldr	r3, [pc, #756]	@ (8000f80 <MahonyAHRSupdateIMU+0x4dc>)
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c92:	4bbb      	ldr	r3, [pc, #748]	@ (8000f80 <MahonyAHRSupdateIMU+0x4dc>)
 8000c94:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8000c98:	4bb6      	ldr	r3, [pc, #728]	@ (8000f74 <MahonyAHRSupdateIMU+0x4d0>)
 8000c9a:	ed93 7a00 	vldr	s14, [r3]
 8000c9e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000f78 <MahonyAHRSupdateIMU+0x4d4>
 8000caa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cae:	4bb5      	ldr	r3, [pc, #724]	@ (8000f84 <MahonyAHRSupdateIMU+0x4e0>)
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb8:	4bb2      	ldr	r3, [pc, #712]	@ (8000f84 <MahonyAHRSupdateIMU+0x4e0>)
 8000cba:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8000cbe:	4baf      	ldr	r3, [pc, #700]	@ (8000f7c <MahonyAHRSupdateIMU+0x4d8>)
 8000cc0:	edd3 7a00 	vldr	s15, [r3]
 8000cc4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ccc:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8000cd0:	4bab      	ldr	r3, [pc, #684]	@ (8000f80 <MahonyAHRSupdateIMU+0x4dc>)
 8000cd2:	edd3 7a00 	vldr	s15, [r3]
 8000cd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cde:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8000ce2:	4ba8      	ldr	r3, [pc, #672]	@ (8000f84 <MahonyAHRSupdateIMU+0x4e0>)
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf0:	edc7 7a04 	vstr	s15, [r7, #16]
 8000cf4:	e00b      	b.n	8000d0e <MahonyAHRSupdateIMU+0x26a>
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8000cf6:	4ba1      	ldr	r3, [pc, #644]	@ (8000f7c <MahonyAHRSupdateIMU+0x4d8>)
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8000cfe:	4ba0      	ldr	r3, [pc, #640]	@ (8000f80 <MahonyAHRSupdateIMU+0x4dc>)
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8000d06:	4b9f      	ldr	r3, [pc, #636]	@ (8000f84 <MahonyAHRSupdateIMU+0x4e0>)
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8000d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8000f88 <MahonyAHRSupdateIMU+0x4e4>)
 8000d10:	ed93 7a00 	vldr	s14, [r3]
 8000d14:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d24:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8000d28:	4b97      	ldr	r3, [pc, #604]	@ (8000f88 <MahonyAHRSupdateIMU+0x4e4>)
 8000d2a:	ed93 7a00 	vldr	s14, [r3]
 8000d2e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d36:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3e:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8000d42:	4b91      	ldr	r3, [pc, #580]	@ (8000f88 <MahonyAHRSupdateIMU+0x4e4>)
 8000d44:	ed93 7a00 	vldr	s14, [r3]
 8000d48:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d50:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d58:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8000d5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d60:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000f8c <MahonyAHRSupdateIMU+0x4e8>
 8000d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d68:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * (1.0f / sampleFreq));
 8000d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d70:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8000f8c <MahonyAHRSupdateIMU+0x4e8>
 8000d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d78:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * (1.0f / sampleFreq));
 8000d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d80:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000f8c <MahonyAHRSupdateIMU+0x4e8>
 8000d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d88:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q[0];
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000da8:	eef1 6a67 	vneg.f32	s13, s15
 8000dac:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000db4:	ed97 6a08 	vldr	s12, [r7, #32]
 8000db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	330c      	adds	r3, #12
 8000dc8:	ed93 6a00 	vldr	s12, [r3]
 8000dcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dd4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	ed93 7a00 	vldr	s14, [r3]
 8000dea:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000dee:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000df6:	ed97 6a08 	vldr	s12, [r7, #32]
 8000dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	330c      	adds	r3, #12
 8000e0a:	ed93 6a00 	vldr	s12, [r3]
 8000e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e22:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3308      	adds	r3, #8
 8000e2a:	ed93 7a00 	vldr	s14, [r3]
 8000e2e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e3a:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e46:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	330c      	adds	r3, #12
 8000e4e:	ed93 6a00 	vldr	s12, [r3]
 8000e52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3308      	adds	r3, #8
 8000e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e66:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	330c      	adds	r3, #12
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e7e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e8e:	ed97 6a08 	vldr	s12, [r7, #32]
 8000e92:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea6:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	ed93 7a00 	vldr	s14, [r3]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	edd3 6a00 	vldr	s13, [r3]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	edd3 6a00 	vldr	s13, [r3]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3308      	adds	r3, #8
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	330c      	adds	r3, #12
 8000eee:	edd3 6a00 	vldr	s13, [r3]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	f000 f843 	bl	8000f90 <invSqrt>
 8000f0a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	ed93 7a00 	vldr	s14, [r3]
 8000f14:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	ed93 7a00 	vldr	s14, [r3]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f36:	edc3 7a00 	vstr	s15, [r3]
	q[2] *= recipNorm;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	ed93 7a00 	vldr	s14, [r3]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3308      	adds	r3, #8
 8000f46:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4e:	edc3 7a00 	vstr	s15, [r3]
	q[3] *= recipNorm;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	330c      	adds	r3, #12
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	330c      	adds	r3, #12
 8000f5e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	edc3 7a00 	vstr	s15, [r3]
}
 8000f6a:	bf00      	nop
 8000f6c:	3748      	adds	r7, #72	@ 0x48
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	240001fc 	.word	0x240001fc
 8000f78:	3b5a740e 	.word	0x3b5a740e
 8000f7c:	24000200 	.word	0x24000200
 8000f80:	24000204 	.word	0x24000204
 8000f84:	24000208 	.word	0x24000208
 8000f88:	24000000 	.word	0x24000000
 8000f8c:	3ada740e 	.word	0x3ada740e

08000f90 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	105a      	asrs	r2, r3, #1
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <invSqrt+0x74>)
 8000fbc:	1a9b      	subs	r3, r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000fc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fe4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	ee07 3a90 	vmov	s15, r3
}
 8000ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	5f3759df 	.word	0x5f3759df

08001008 <bmp388_quantize_calibration>:
volatile double altitude;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (double)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 800100c:	4b7c      	ldr	r3, [pc, #496]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001018:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 80011a8 <bmp388_quantize_calibration+0x1a0>
 800101c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001020:	4b78      	ldr	r3, [pc, #480]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001022:	ed83 7b00 	vstr	d7, [r3]
  quantized_bmp388_calib.par_t2 = (double)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8001026:	4b76      	ldr	r3, [pc, #472]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001028:	885b      	ldrh	r3, [r3, #2]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001032:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 80011b0 <bmp388_quantize_calibration+0x1a8>
 8001036:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800103a:	4b72      	ldr	r3, [pc, #456]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 800103c:	ed83 7b02 	vstr	d7, [r3, #8]
  quantized_bmp388_calib.par_t3 = (double)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8001040:	4b6f      	ldr	r3, [pc, #444]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001042:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800104e:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 80011b8 <bmp388_quantize_calibration+0x1b0>
 8001052:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001056:	4b6b      	ldr	r3, [pc, #428]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001058:	ed83 7b04 	vstr	d7, [r3, #16]

  quantized_bmp388_calib.par_p1 = ((double)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 800105c:	4b68      	ldr	r3, [pc, #416]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 800105e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800106a:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 80011c0 <bmp388_quantize_calibration+0x1b8>
 800106e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001072:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 80011c8 <bmp388_quantize_calibration+0x1c0>
 8001076:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107a:	4b62      	ldr	r3, [pc, #392]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 800107c:	ed83 7b06 	vstr	d7, [r3, #24]
  quantized_bmp388_calib.par_p2 = ((double)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8001080:	4b5f      	ldr	r3, [pc, #380]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001082:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800108e:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 80011c0 <bmp388_quantize_calibration+0x1b8>
 8001092:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001096:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 80011d0 <bmp388_quantize_calibration+0x1c8>
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	4b59      	ldr	r3, [pc, #356]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 80010a0:	ed83 7b08 	vstr	d7, [r3, #32]
  quantized_bmp388_calib.par_p3 = (double)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 80010a4:	4b56      	ldr	r3, [pc, #344]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 80010a6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010b2:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80011d8 <bmp388_quantize_calibration+0x1d0>
 80010b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ba:	4b52      	ldr	r3, [pc, #328]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 80010bc:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p4 = (double)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 80010c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 80010c2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010ce:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80011e0 <bmp388_quantize_calibration+0x1d8>
 80010d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 80010d8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p5 = (double)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 80010dc:	4b48      	ldr	r3, [pc, #288]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 80010de:	899b      	ldrh	r3, [r3, #12]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010e8:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80010ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010f0:	4b44      	ldr	r3, [pc, #272]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 80010f2:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  quantized_bmp388_calib.par_p6 = (double)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 80010f6:	4b42      	ldr	r3, [pc, #264]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 80010f8:	89db      	ldrh	r3, [r3, #14]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001102:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 80011e8 <bmp388_quantize_calibration+0x1e0>
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 800110c:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
  quantized_bmp388_calib.par_p7 = (double)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 8001110:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001112:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800111e:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 80011a8 <bmp388_quantize_calibration+0x1a0>
 8001122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001126:	4b37      	ldr	r3, [pc, #220]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001128:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  quantized_bmp388_calib.par_p8 = (double)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 800112c:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 800112e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113a:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80011f0 <bmp388_quantize_calibration+0x1e8>
 800113e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001142:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001144:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
  quantized_bmp388_calib.par_p9 = (double)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 800114a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001156:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 80011b8 <bmp388_quantize_calibration+0x1b0>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001160:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
  quantized_bmp388_calib.par_p10 = (double)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001166:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001172:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80011b8 <bmp388_quantize_calibration+0x1b0>
 8001176:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800117a:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 800117c:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
  quantized_bmp388_calib.par_p11 = (double)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <bmp388_quantize_calibration+0x1f8>)
 8001182:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800118e:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80011f8 <bmp388_quantize_calibration+0x1f0>
 8001192:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <bmp388_quantize_calibration+0x1fc>)
 8001198:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40700000 	.word	0x40700000
 80011b0:	00000000 	.word	0x00000000
 80011b4:	41d00000 	.word	0x41d00000
 80011b8:	00000000 	.word	0x00000000
 80011bc:	42f00000 	.word	0x42f00000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40d00000 	.word	0x40d00000
 80011c8:	00000000 	.word	0x00000000
 80011cc:	41300000 	.word	0x41300000
 80011d0:	00000000 	.word	0x00000000
 80011d4:	41c00000 	.word	0x41c00000
 80011d8:	00000000 	.word	0x00000000
 80011dc:	41f00000 	.word	0x41f00000
 80011e0:	00000000 	.word	0x00000000
 80011e4:	42400000 	.word	0x42400000
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40500000 	.word	0x40500000
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40e00000 	.word	0x40e00000
 80011f8:	00000000 	.word	0x00000000
 80011fc:	44000000 	.word	0x44000000
 8001200:	2400020c 	.word	0x2400020c
 8001204:	24000228 	.word	0x24000228

08001208 <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2140      	movs	r1, #64	@ 0x40
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <bmp388_write_reg+0x44>)
 800121e:	f002 f937 	bl	8003490 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001222:	1df9      	adds	r1, r7, #7
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	2201      	movs	r2, #1
 8001228:	4809      	ldr	r0, [pc, #36]	@ (8001250 <bmp388_write_reg+0x48>)
 800122a:	f005 f8bb 	bl	80063a4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800122e:	1db9      	adds	r1, r7, #6
 8001230:	2364      	movs	r3, #100	@ 0x64
 8001232:	2201      	movs	r2, #1
 8001234:	4806      	ldr	r0, [pc, #24]	@ (8001250 <bmp388_write_reg+0x48>)
 8001236:	f005 f8b5 	bl	80063a4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2140      	movs	r1, #64	@ 0x40
 800123e:	4803      	ldr	r0, [pc, #12]	@ (800124c <bmp388_write_reg+0x44>)
 8001240:	f002 f926 	bl	8003490 <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58020000 	.word	0x58020000
 8001250:	24000348 	.word	0x24000348

08001254 <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
  uint8_t dummy;
  uint8_t temp_data = 0x80 | reg;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800126a:	b2db      	uxtb	r3, r3
 800126c:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2140      	movs	r1, #64	@ 0x40
 8001272:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <bmp388_read_reg+0x7c>)
 8001274:	f002 f90c 	bl	8003490 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8001278:	f107 010d 	add.w	r1, r7, #13
 800127c:	2364      	movs	r3, #100	@ 0x64
 800127e:	2201      	movs	r2, #1
 8001280:	4814      	ldr	r0, [pc, #80]	@ (80012d4 <bmp388_read_reg+0x80>)
 8001282:	f005 f88f 	bl	80063a4 <HAL_SPI_Transmit>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <bmp388_read_reg+0x40>
    Error_Handler();
 8001290:	f000 fe7e 	bl	8001f90 <Error_Handler>
  HAL_SPI_Receive(&hspi2, &dummy, 1, 100);
 8001294:	f107 010e 	add.w	r1, r7, #14
 8001298:	2364      	movs	r3, #100	@ 0x64
 800129a:	2201      	movs	r2, #1
 800129c:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <bmp388_read_reg+0x80>)
 800129e:	f005 fa6f 	bl	8006780 <HAL_SPI_Receive>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	2364      	movs	r3, #100	@ 0x64
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	480a      	ldr	r0, [pc, #40]	@ (80012d4 <bmp388_read_reg+0x80>)
 80012ac:	f005 fa68 	bl	8006780 <HAL_SPI_Receive>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <bmp388_read_reg+0x6a>
    Error_Handler();
 80012ba:	f000 fe69 	bl	8001f90 <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2140      	movs	r1, #64	@ 0x40
 80012c2:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <bmp388_read_reg+0x7c>)
 80012c4:	f002 f8e4 	bl	8003490 <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	58020000 	.word	0x58020000
 80012d4:	24000348 	.word	0x24000348

080012d8 <bmp388_setup>:
void bmp388_setup()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  bmp388_write_reg(0x7E, 0xB6); // Soft reset
 80012de:	21b6      	movs	r1, #182	@ 0xb6
 80012e0:	207e      	movs	r0, #126	@ 0x7e
 80012e2:	f7ff ff91 	bl	8001208 <bmp388_write_reg>
  HAL_Delay(10); // Wait for reset to complete
 80012e6:	200a      	movs	r0, #10
 80012e8:	f001 fd6a 	bl	8002dc0 <HAL_Delay>
  uint8_t calib_data[21];
  uint8_t chip[2];
  bmp388_read_reg(0x31, calib_data, 21);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2215      	movs	r2, #21
 80012f2:	4619      	mov	r1, r3
 80012f4:	2031      	movs	r0, #49	@ 0x31
 80012f6:	f7ff ffad 	bl	8001254 <bmp388_read_reg>
  bmp388_read_reg(0x00, chip, 2);
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2202      	movs	r2, #2
 80012fe:	4619      	mov	r1, r3
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff ffa7 	bl	8001254 <bmp388_read_reg>
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 8001306:	7a3b      	ldrb	r3, [r7, #8]
 8001308:	b21a      	sxth	r2, r3
 800130a:	7a7b      	ldrb	r3, [r7, #9]
 800130c:	b21b      	sxth	r3, r3
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b3b      	ldr	r3, [pc, #236]	@ (8001408 <bmp388_setup+0x130>)
 800131a:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 800131c:	7abb      	ldrb	r3, [r7, #10]
 800131e:	b21a      	sxth	r2, r3
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	b21b      	sxth	r3, r3
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <bmp388_setup+0x130>)
 8001330:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 8001332:	7b3b      	ldrb	r3, [r7, #12]
 8001334:	b25a      	sxtb	r2, r3
 8001336:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <bmp388_setup+0x130>)
 8001338:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 800133a:	7b7b      	ldrb	r3, [r7, #13]
 800133c:	b21a      	sxth	r2, r3
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	b21b      	sxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <bmp388_setup+0x130>)
 800134c:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	b21a      	sxth	r2, r3
 8001352:	7c3b      	ldrb	r3, [r7, #16]
 8001354:	b21b      	sxth	r3, r3
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <bmp388_setup+0x130>)
 8001360:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8001362:	7c7b      	ldrb	r3, [r7, #17]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <bmp388_setup+0x130>)
 8001368:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 800136a:	7cbb      	ldrb	r3, [r7, #18]
 800136c:	b25a      	sxtb	r2, r3
 800136e:	4b26      	ldr	r3, [pc, #152]	@ (8001408 <bmp388_setup+0x130>)
 8001370:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8001372:	7cfb      	ldrb	r3, [r7, #19]
 8001374:	b21a      	sxth	r2, r3
 8001376:	7d3b      	ldrb	r3, [r7, #20]
 8001378:	b21b      	sxth	r3, r3
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <bmp388_setup+0x130>)
 8001386:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8001388:	7d7b      	ldrb	r3, [r7, #21]
 800138a:	b21a      	sxth	r2, r3
 800138c:	7dbb      	ldrb	r3, [r7, #22]
 800138e:	b21b      	sxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <bmp388_setup+0x130>)
 800139c:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <bmp388_setup+0x130>)
 80013a4:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 80013a6:	7e3b      	ldrb	r3, [r7, #24]
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <bmp388_setup+0x130>)
 80013ac:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 80013ae:	7e7b      	ldrb	r3, [r7, #25]
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7ebb      	ldrb	r3, [r7, #26]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <bmp388_setup+0x130>)
 80013c0:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 80013c2:	7efb      	ldrb	r3, [r7, #27]
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <bmp388_setup+0x130>)
 80013c8:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 80013ca:	7f3b      	ldrb	r3, [r7, #28]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <bmp388_setup+0x130>)
 80013d0:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 80013d2:	f7ff fe19 	bl	8001008 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1A, 0x00);
 80013d6:	2100      	movs	r1, #0
 80013d8:	201a      	movs	r0, #26
 80013da:	f7ff ff15 	bl	8001208 <bmp388_write_reg>
  bmp388_write_reg(0x1B, 0x33);  // normal mode, temp pressure on by default with it
 80013de:	2133      	movs	r1, #51	@ 0x33
 80013e0:	201b      	movs	r0, #27
 80013e2:	f7ff ff11 	bl	8001208 <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 80013e6:	2103      	movs	r1, #3
 80013e8:	201c      	movs	r0, #28
 80013ea:	f7ff ff0d 	bl	8001208 <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 80013ee:	2102      	movs	r1, #2
 80013f0:	201d      	movs	r0, #29
 80013f2:	f7ff ff09 	bl	8001208 <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x04);  // coefficient for IIR filter, ideally low value for the dart
 80013f6:	2104      	movs	r1, #4
 80013f8:	201f      	movs	r0, #31
 80013fa:	f7ff ff05 	bl	8001208 <bmp388_write_reg>
}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2400020c 	.word	0x2400020c

0800140c <bmp388_read_raw_data>:

void bmp388_read_raw_data()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  uint8_t data[6];
  bmp388_read_reg(0x04, data, 6); // 0x04-0x06 pressure, 0x07-0x09 temperature
 8001412:	463b      	mov	r3, r7
 8001414:	2206      	movs	r2, #6
 8001416:	4619      	mov	r1, r3
 8001418:	2004      	movs	r0, #4
 800141a:	f7ff ff1b 	bl	8001254 <bmp388_read_reg>
  bmp388_rawData.pressure = (((int32_t)data[2] << 16) | ((int32_t)data[1] << 8) | ((int32_t)data[0]));
 800141e:	78bb      	ldrb	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	787b      	ldrb	r3, [r7, #1]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	4313      	orrs	r3, r2
 8001428:	783a      	ldrb	r2, [r7, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <bmp388_read_raw_data+0x44>)
 8001430:	605a      	str	r2, [r3, #4]
  bmp388_rawData.temperature = (((int32_t)data[5] << 16) | ((int32_t)data[4] << 8) | ((int32_t)data[3]));
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	4313      	orrs	r3, r2
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	4313      	orrs	r3, r2
 8001440:	461a      	mov	r2, r3
 8001442:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <bmp388_read_raw_data+0x44>)
 8001444:	601a      	str	r2, [r3, #0]

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	240002a0 	.word	0x240002a0

08001454 <bmp388_compensated_temperature>:

// the math performed in both functions are directly from the datasheet
static double bmp388_compensated_temperature(uint32_t raw_temp)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  double partial_data1 = (double)(raw_temp)-quantized_bmp388_calib.par_t1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 8001468:	ed93 7b00 	vldr	d7, [r3]
 800146c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001470:	ed87 7b04 	vstr	d7, [r7, #16]
  double partial_data2 = partial_data1 * quantized_bmp388_calib.par_t2;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 8001476:	ed93 7b02 	vldr	d7, [r3, #8]
 800147a:	ed97 6b04 	vldr	d6, [r7, #16]
 800147e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001482:	ed87 7b02 	vstr	d7, [r7, #8]
  quantized_bmp388_calib.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantized_bmp388_calib.par_t3;
 8001486:	ed97 7b04 	vldr	d7, [r7, #16]
 800148a:	ee27 6b07 	vmul.f64	d6, d7, d7
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 8001490:	ed93 7b04 	vldr	d7, [r3, #16]
 8001494:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001498:	ed97 7b02 	vldr	d7, [r7, #8]
 800149c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 80014a2:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
  return quantized_bmp388_calib.t_lin;
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <bmp388_compensated_temperature+0x6c>)
 80014a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80014ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80014b0:	eeb0 0b47 	vmov.f64	d0, d7
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	24000228 	.word	0x24000228

080014c4 <bmp388_compensated_pressure>:

static double bmp388_compensated_pressure(uint32_t raw_pressure)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b091      	sub	sp, #68	@ 0x44
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  double pressure;
  double partial_data1, partial_data2, partial_data3, partial_data4;
  double partial_out1, partial_out2;

  partial_data1 = quantized_bmp388_calib.par_p6 * quantized_bmp388_calib.t_lin;
 80014cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014ce:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 80014d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014d4:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014dc:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p7 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 80014e0:	4b69      	ldr	r3, [pc, #420]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014e2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80014e6:	4b68      	ldr	r3, [pc, #416]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014e8:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014f0:	4b65      	ldr	r3, [pc, #404]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80014f2:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014fa:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p8 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 80014fe:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001500:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8001504:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001506:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800150a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800150e:	4b5e      	ldr	r3, [pc, #376]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001510:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001514:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001518:	4b5b      	ldr	r3, [pc, #364]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800151a:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800151e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001522:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out1 = quantized_bmp388_calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8001526:	4b58      	ldr	r3, [pc, #352]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001528:	ed93 6b0e 	vldr	d6, [r3, #56]	@ 0x38
 800152c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001538:	ee36 7b07 	vadd.f64	d7, d6, d7
 800153c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001540:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001544:	ed87 7b08 	vstr	d7, [r7, #32]

  partial_data1 = quantized_bmp388_calib.par_p2 * quantized_bmp388_calib.t_lin;
 8001548:	4b4f      	ldr	r3, [pc, #316]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800154a:	ed93 6b08 	vldr	d6, [r3, #32]
 800154e:	4b4e      	ldr	r3, [pc, #312]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001550:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001554:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001558:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p3 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 800155c:	4b4a      	ldr	r3, [pc, #296]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800155e:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8001562:	4b49      	ldr	r3, [pc, #292]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001564:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001568:	ee26 6b07 	vmul.f64	d6, d6, d7
 800156c:	4b46      	ldr	r3, [pc, #280]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800156e:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001572:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001576:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p4 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 800157a:	4b43      	ldr	r3, [pc, #268]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800157c:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001580:	4b41      	ldr	r3, [pc, #260]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001582:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001586:	ee26 6b07 	vmul.f64	d6, d6, d7
 800158a:	4b3f      	ldr	r3, [pc, #252]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 800158c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001590:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001594:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001596:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800159a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800159e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out2 = (double)raw_pressure * (quantized_bmp388_calib.par_p1 + partial_data1 + partial_data2 + partial_data3);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015ac:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80015ae:	ed93 5b06 	vldr	d5, [r3, #24]
 80015b2:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80015b6:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015ba:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80015be:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015c2:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80015c6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015ce:	ed87 7b06 	vstr	d7, [r7, #24]

  partial_data1 = (double)raw_pressure * (double)raw_pressure;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015ea:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p9 + quantized_bmp388_calib.par_p10 * quantized_bmp388_calib.t_lin;
 80015ee:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80015f0:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80015f6:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80015fa:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 80015fc:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001600:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001604:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001608:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = partial_data1 * partial_data2;
 800160c:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8001610:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001614:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001618:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_data4 = partial_data3 + ((double)raw_pressure * (double)raw_pressure * (double)raw_pressure) * quantized_bmp388_calib.par_p11;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001630:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800163e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <bmp388_compensated_pressure+0x1c4>)
 8001644:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8001648:	ee26 7b07 	vmul.f64	d7, d6, d7
 800164c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001650:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001654:	ed87 7b04 	vstr	d7, [r7, #16]

  pressure = partial_out1 + partial_out2 + partial_data4;
 8001658:	ed97 6b08 	vldr	d6, [r7, #32]
 800165c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001660:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001664:	ed97 6b04 	vldr	d6, [r7, #16]
 8001668:	ee36 7b07 	vadd.f64	d7, d6, d7
 800166c:	ed87 7b02 	vstr	d7, [r7, #8]

  return pressure;
 8001670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001674:	ec43 2b17 	vmov	d7, r2, r3
}
 8001678:	eeb0 0b47 	vmov.f64	d0, d7
 800167c:	3744      	adds	r7, #68	@ 0x44
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	24000228 	.word	0x24000228
 800168c:	00000000 	.word	0x00000000

08001690 <bmp388_getAltitude>:
double bmp388_getAltitude(double pressure)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	ed87 0b00 	vstr	d0, [r7]
	double altitude = 44330 * (1-pow(pressure/1019.0e2, 0.190294)); // pressure divided by pressure of sea level at austin
 800169a:	ed97 7b00 	vldr	d7, [r7]
 800169e:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80016e0 <bmp388_getAltitude+0x50>
 80016a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80016a6:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 80016e8 <bmp388_getAltitude+0x58>
 80016aa:	eeb0 0b46 	vmov.f64	d0, d6
 80016ae:	f00c fa57 	bl	800db60 <pow>
 80016b2:	eeb0 7b40 	vmov.f64	d7, d0
 80016b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80016ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016be:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80016f0 <bmp388_getAltitude+0x60>
 80016c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016c6:	ed87 7b02 	vstr	d7, [r7, #8]
	return altitude;
 80016ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80016d2:	eeb0 0b47 	vmov.f64	d0, d7
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	f3af 8000 	nop.w
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40f8e0c0 	.word	0x40f8e0c0
 80016e8:	c55000c9 	.word	0xc55000c9
 80016ec:	3fc85b8d 	.word	0x3fc85b8d
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40e5a540 	.word	0x40e5a540

080016f8 <bmp388_getData>:

void bmp388_getData()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  bmp388_read_raw_data();
 80016fc:	f7ff fe86 	bl	800140c <bmp388_read_raw_data>
  bmp388_processedData.temperature = bmp388_compensated_temperature(bmp388_rawData.temperature);
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <bmp388_getData+0x4c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fea5 	bl	8001454 <bmp388_compensated_temperature>
 800170a:	eeb0 7b40 	vmov.f64	d7, d0
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <bmp388_getData+0x50>)
 8001710:	ed83 7b00 	vstr	d7, [r3]
  bmp388_processedData.pressure = bmp388_compensated_pressure(bmp388_rawData.pressure);
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <bmp388_getData+0x4c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fed3 	bl	80014c4 <bmp388_compensated_pressure>
 800171e:	eeb0 7b40 	vmov.f64	d7, d0
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <bmp388_getData+0x50>)
 8001724:	ed83 7b02 	vstr	d7, [r3, #8]
  altitude = bmp388_getAltitude(bmp388_processedData.pressure);
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <bmp388_getData+0x50>)
 800172a:	ed93 7b02 	vldr	d7, [r3, #8]
 800172e:	eeb0 0b47 	vmov.f64	d0, d7
 8001732:	f7ff ffad 	bl	8001690 <bmp388_getAltitude>
 8001736:	eeb0 7b40 	vmov.f64	d7, d0
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <bmp388_getData+0x54>)
 800173c:	ed83 7b00 	vstr	d7, [r3]
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	240002a0 	.word	0x240002a0
 8001748:	240002a8 	.word	0x240002a8
 800174c:	240002b8 	.word	0x240002b8

08001750 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001758:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800175c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001768:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800176c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001770:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00b      	beq.n	8001790 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001778:	e000      	b.n	800177c <ITM_SendChar+0x2c>
    {
      __NOP();
 800177a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800177c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f9      	beq.n	800177a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001786:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001790:	687b      	ldr	r3, [r7, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80017a6:	f000 fbc7 	bl	8001f38 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017aa:	f001 fa77 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ae:	f000 f84f 	bl	8001850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b2:	f000 facf 	bl	8001d54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017b6:	f000 fa81 	bl	8001cbc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017ba:	f000 f8c5 	bl	8001948 <MX_SPI1_Init>
  MX_TIM2_Init();
 80017be:	f000 fa2f 	bl	8001c20 <MX_TIM2_Init>
  MX_SPI2_Init();
 80017c2:	f000 f919 	bl	80019f8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80017c6:	f000 f96f 	bl	8001aa8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);  // Enable TIM1 interrupt
 80017ca:	481c      	ldr	r0, [pc, #112]	@ (800183c <main+0x9c>)
 80017cc:	f005 fb8a 	bl	8006ee4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 80017d0:	481b      	ldr	r0, [pc, #108]	@ (8001840 <main+0xa0>)
 80017d2:	f005 fb87 	bl	8006ee4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Enable TIM1 Channel 1 interrupt (for IMU pitch)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4818      	ldr	r0, [pc, #96]	@ (800183c <main+0x9c>)
 80017da:	f005 fc5d 	bl	8007098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Enable TIM1 Channel 2 interrupt (for IMU roll)
 80017de:	2104      	movs	r1, #4
 80017e0:	4816      	ldr	r0, [pc, #88]	@ (800183c <main+0x9c>)
 80017e2:	f005 fc59 	bl	8007098 <HAL_TIM_PWM_Start>

  char buffer[40] = {'\0'};
 80017e6:	463b      	mov	r3, r7
 80017e8:	2228      	movs	r2, #40	@ 0x28
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f009 fc31 	bl	800b054 <memset>
  mpu9250_setup();
 80017f2:	f000 fc35 	bl	8002060 <mpu9250_setup>
  bmp388_setup();
 80017f6:	f7ff fd6f 	bl	80012d8 <bmp388_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <main+0xa4>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <main+0x72>
	  {
		  timer_flag = 0;	//reset timer flag
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <main+0xa4>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

		  mpu9250_getProcessedAngle();
 800180a:	f000 fd0d 	bl	8002228 <mpu9250_getProcessedAngle>
		  bmp388_getData();
 800180e:	f7ff ff73 	bl	80016f8 <bmp388_getData>
	  }

	  if(update_ccr){
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <main+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ee      	beq.n	80017fa <main+0x5a>
		  update_ccr = 0; //reset update ccr flag
 800181c:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <main+0xa8>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
		  Servo_Set_Angle(&htim1, TIM_CHANNEL_1, 0.0); // imu_angles.pitch
 8001822:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800184c <main+0xac>
 8001826:	2100      	movs	r1, #0
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <main+0x9c>)
 800182a:	f000 fae7 	bl	8001dfc <Servo_Set_Angle>
      Servo_Set_Angle(&htim1, TIM_CHANNEL_2, 0.0); // imu_angles.roll
 800182e:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800184c <main+0xac>
 8001832:	2104      	movs	r1, #4
 8001834:	4801      	ldr	r0, [pc, #4]	@ (800183c <main+0x9c>)
 8001836:	f000 fae1 	bl	8001dfc <Servo_Set_Angle>
	  if(timer_flag)
 800183a:	e7de      	b.n	80017fa <main+0x5a>
 800183c:	240003d0 	.word	0x240003d0
 8001840:	2400041c 	.word	0x2400041c
 8001844:	240004fc 	.word	0x240004fc
 8001848:	240004fd 	.word	0x240004fd
 800184c:	00000000 	.word	0x00000000

08001850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b09c      	sub	sp, #112	@ 0x70
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185a:	224c      	movs	r2, #76	@ 0x4c
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f009 fbf8 	bl	800b054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2220      	movs	r2, #32
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f009 fbf2 	bl	800b054 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001870:	2002      	movs	r0, #2
 8001872:	f001 fe27 	bl	80034c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b31      	ldr	r3, [pc, #196]	@ (8001940 <SystemClock_Config+0xf0>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4a30      	ldr	r2, [pc, #192]	@ (8001940 <SystemClock_Config+0xf0>)
 8001880:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001884:	6193      	str	r3, [r2, #24]
 8001886:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <SystemClock_Config+0xf0>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	4b2c      	ldr	r3, [pc, #176]	@ (8001944 <SystemClock_Config+0xf4>)
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <SystemClock_Config+0xf4>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800189c:	4b29      	ldr	r3, [pc, #164]	@ (8001944 <SystemClock_Config+0xf4>)
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018a8:	bf00      	nop
 80018aa:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <SystemClock_Config+0xf0>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018b6:	d1f8      	bne.n	80018aa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b8:	2302      	movs	r3, #2
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018bc:	2301      	movs	r3, #1
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c0:	2340      	movs	r3, #64	@ 0x40
 80018c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018c8:	2300      	movs	r3, #0
 80018ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018cc:	2304      	movs	r3, #4
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018d0:	233c      	movs	r3, #60	@ 0x3c
 80018d2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80018d8:	2305      	movs	r3, #5
 80018da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018dc:	2302      	movs	r3, #2
 80018de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80018e0:	230c      	movs	r3, #12
 80018e2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f0:	4618      	mov	r0, r3
 80018f2:	f001 fe21 	bl	8003538 <HAL_RCC_OscConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80018fc:	f000 fb48 	bl	8001f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001900:	233f      	movs	r3, #63	@ 0x3f
 8001902:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001904:	2303      	movs	r3, #3
 8001906:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800190c:	2308      	movs	r3, #8
 800190e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001910:	2340      	movs	r3, #64	@ 0x40
 8001912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001914:	2340      	movs	r3, #64	@ 0x40
 8001916:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800191c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800191e:	2340      	movs	r3, #64	@ 0x40
 8001920:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2104      	movs	r1, #4
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fa60 	bl	8003dec <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001932:	f000 fb2d 	bl	8001f90 <Error_Handler>
  }
}
 8001936:	bf00      	nop
 8001938:	3770      	adds	r7, #112	@ 0x70
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	58024800 	.word	0x58024800
 8001944:	58000400 	.word	0x58000400

08001948 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 800194e:	4a29      	ldr	r2, [pc, #164]	@ (80019f4 <MX_SPI1_Init+0xac>)
 8001950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001952:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 8001954:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800195a:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001960:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 8001962:	2207      	movs	r2, #7
 8001964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001966:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 8001968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800196c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800196e:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 8001970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001974:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 8001978:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800197c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 8001980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001984:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001986:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001992:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 8001994:	2200      	movs	r2, #0
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001998:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 800199a:	2200      	movs	r2, #0
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800199e:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019a6:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	@ (80019f0 <MX_SPI1_Init+0xa8>)
 80019de:	f004 fbbd 	bl	800615c <HAL_SPI_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80019e8:	f000 fad2 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	240002c0 	.word	0x240002c0
 80019f4:	40013000 	.word	0x40013000

080019f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019fc:	4b28      	ldr	r3, [pc, #160]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 80019fe:	4a29      	ldr	r2, [pc, #164]	@ (8001aa4 <MX_SPI2_Init+0xac>)
 8001a00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a02:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a04:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a10:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a12:	2207      	movs	r2, #7
 8001a14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a16:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a30:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001a34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a42:	4b17      	ldr	r3, [pc, #92]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001a48:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a54:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a80:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a8c:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <MX_SPI2_Init+0xa8>)
 8001a8e:	f004 fb65 	bl	800615c <HAL_SPI_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001a98:	f000 fa7a 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	24000348 	.word	0x24000348
 8001aa4:	40003800 	.word	0x40003800

08001aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09a      	sub	sp, #104	@ 0x68
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	222c      	movs	r2, #44	@ 0x2c
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f009 fab6 	bl	800b054 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001aea:	4a4c      	ldr	r2, [pc, #304]	@ (8001c1c <MX_TIM1_Init+0x174>)
 8001aec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8001aee:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001af0:	22ef      	movs	r2, #239	@ 0xef
 8001af2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b48      	ldr	r3, [pc, #288]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001afa:	4b47      	ldr	r3, [pc, #284]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001afc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b45      	ldr	r3, [pc, #276]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b08:	4b43      	ldr	r3, [pc, #268]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b42      	ldr	r3, [pc, #264]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b14:	4840      	ldr	r0, [pc, #256]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001b16:	f005 f98e 	bl	8006e36 <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b20:	f000 fa36 	bl	8001f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b28:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4839      	ldr	r0, [pc, #228]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001b32:	f005 fddb 	bl	80076ec <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b3c:	f000 fa28 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b40:	4835      	ldr	r0, [pc, #212]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001b42:	f005 fa47 	bl	8006fd4 <HAL_TIM_PWM_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b4c:	f000 fa20 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b60:	4619      	mov	r1, r3
 8001b62:	482d      	ldr	r0, [pc, #180]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001b64:	f006 fb1c 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b6e:	f000 fa0f 	bl	8001f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b72:	2360      	movs	r3, #96	@ 0x60
 8001b74:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1500;
 8001b76:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	481f      	ldr	r0, [pc, #124]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001b9a:	f005 fc93 	bl	80074c4 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ba4:	f000 f9f4 	bl	8001f90 <Error_Handler>
  }
  sConfigOC.Pulse = 1500-1;
 8001ba8:	f240 53db 	movw	r3, #1499	@ 0x5db
 8001bac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4818      	ldr	r0, [pc, #96]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001bb8:	f005 fc84 	bl	80074c4 <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001bc2:	f000 f9e5 	bl	8001f90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001be8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001bfc:	f006 fb5e 	bl	80082bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001c06:	f000 f9c3 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c0a:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <MX_TIM1_Init+0x170>)
 8001c0c:	f000 fe02 	bl	8002814 <HAL_TIM_MspPostInit>

}
 8001c10:	bf00      	nop
 8001c12:	3768      	adds	r7, #104	@ 0x68
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	240003d0 	.word	0x240003d0
 8001c1c:	40010000 	.word	0x40010000

08001c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001c40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001c48:	f240 321f 	movw	r2, #799	@ 0x31f
 8001c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001c56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c68:	4813      	ldr	r0, [pc, #76]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001c6a:	f005 f8e4 	bl	8006e36 <HAL_TIM_Base_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c74:	f000 f98c 	bl	8001f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001c86:	f005 fd31 	bl	80076ec <HAL_TIM_ConfigClockSource>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001c90:	f000 f97e 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <MX_TIM2_Init+0x98>)
 8001ca2:	f006 fa7d 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001cac:	f000 f970 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2400041c 	.word	0x2400041c

08001cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc0:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001cc2:	4a23      	ldr	r2, [pc, #140]	@ (8001d50 <MX_USART2_UART_Init+0x94>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d04:	4811      	ldr	r0, [pc, #68]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001d06:	f006 fb75 	bl	80083f4 <HAL_UART_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d10:	f000 f93e 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d14:	2100      	movs	r1, #0
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001d18:	f007 fb7d 	bl	8009416 <HAL_UARTEx_SetTxFifoThreshold>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d22:	f000 f935 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4808      	ldr	r0, [pc, #32]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001d2a:	f007 fbb2 	bl	8009492 <HAL_UARTEx_SetRxFifoThreshold>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d34:	f000 f92c 	bl	8001f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <MX_USART2_UART_Init+0x90>)
 8001d3a:	f007 fb33 	bl	80093a4 <HAL_UARTEx_DisableFifoMode>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d44:	f000 f924 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	24000468 	.word	0x24000468
 8001d50:	40004400 	.word	0x40004400

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dac:	4a11      	ldr	r2, [pc, #68]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db6:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <MX_GPIO_Init+0xa0>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2160      	movs	r1, #96	@ 0x60
 8001dc8:	480b      	ldr	r0, [pc, #44]	@ (8001df8 <MX_GPIO_Init+0xa4>)
 8001dca:	f001 fb61 	bl	8003490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 8001dce:	2360      	movs	r3, #96	@ 0x60
 8001dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <MX_GPIO_Init+0xa4>)
 8001de6:	f001 f9a3 	bl	8003130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	58024400 	.word	0x58024400
 8001df8:	58020000 	.word	0x58020000

08001dfc <Servo_Set_Angle>:
    previous_time = current_time;  // Update for the next call
    return dt;
}

void Servo_Set_Angle(TIM_HandleTypeDef *htim, uint32_t PWMchannel, float angle)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit range from 0 to 180 degrees
    if (angle < 0.0f) angle = 0.0f;
 8001e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d502      	bpl.n	8001e1e <Servo_Set_Angle+0x22>
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
    if (angle > 180.0f) angle = 180.0f;
 8001e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e22:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001eb8 <Servo_Set_Angle+0xbc>
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	dd01      	ble.n	8001e34 <Servo_Set_Angle+0x38>
 8001e30:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <Servo_Set_Angle+0xc0>)
 8001e32:	607b      	str	r3, [r7, #4]

    // Calculate the PWM pulse width in microseconds (1000 µs to 2000 µs; total period is 20000 µs)
    // Assume minimum pulse is 0.6ms and the maximum pulse is 2.4ms
    uint16_t pulse_width = (((uint8_t) angle * 1800) / 180) + 600;
 8001e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3c:	edc7 7a00 	vstr	s15, [r7]
 8001e40:	783b      	ldrb	r3, [r7, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e52:	82fb      	strh	r3, [r7, #22]
    __HAL_TIM_SET_COMPARE(htim, PWMchannel, pulse_width);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <Servo_Set_Angle+0x68>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	8afa      	ldrh	r2, [r7, #22]
 8001e60:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e62:	e023      	b.n	8001eac <Servo_Set_Angle+0xb0>
    __HAL_TIM_SET_COMPARE(htim, PWMchannel, pulse_width);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d104      	bne.n	8001e74 <Servo_Set_Angle+0x78>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	8afb      	ldrh	r3, [r7, #22]
 8001e70:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001e72:	e01b      	b.n	8001eac <Servo_Set_Angle+0xb0>
    __HAL_TIM_SET_COMPARE(htim, PWMchannel, pulse_width);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d104      	bne.n	8001e84 <Servo_Set_Angle+0x88>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	8afb      	ldrh	r3, [r7, #22]
 8001e80:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001e82:	e013      	b.n	8001eac <Servo_Set_Angle+0xb0>
    __HAL_TIM_SET_COMPARE(htim, PWMchannel, pulse_width);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d104      	bne.n	8001e94 <Servo_Set_Angle+0x98>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	8afb      	ldrh	r3, [r7, #22]
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e92:	e00b      	b.n	8001eac <Servo_Set_Angle+0xb0>
    __HAL_TIM_SET_COMPARE(htim, PWMchannel, pulse_width);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d104      	bne.n	8001ea4 <Servo_Set_Angle+0xa8>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	8afb      	ldrh	r3, [r7, #22]
 8001ea0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001ea2:	e003      	b.n	8001eac <Servo_Set_Angle+0xb0>
    __HAL_TIM_SET_COMPARE(htim, PWMchannel, pulse_width);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	8afb      	ldrh	r3, [r7, #22]
 8001eaa:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001eac:	bf00      	nop
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	43340000 	.word	0x43340000
 8001ebc:	43340000 	.word	0x43340000

08001ec0 <HAL_TIM_PeriodElapsedCallback>:
        }
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d102      	bne.n	8001ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
	}
	if (htim == &htim1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d102      	bne.n	8001ee4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		update_ccr = 1;
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
	}
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	2400041c 	.word	0x2400041c
 8001ef4:	240004fc 	.word	0x240004fc
 8001ef8:	240003d0 	.word	0x240003d0
 8001efc:	240004fd 	.word	0x240004fd

08001f00 <_write>:
int _write(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e009      	b.n	8001f26 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fc18 	bl	8001750 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dbf1      	blt.n	8001f12 <_write+0x12>
	}
	return len;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001f4a:	f001 f879 	bl	8003040 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f5a:	231f      	movs	r3, #31
 8001f5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001f5e:	2387      	movs	r3, #135	@ 0x87
 8001f60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001f66:	2300      	movs	r3, #0
 8001f68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f001 f897 	bl	80030b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f82:	2004      	movs	r0, #4
 8001f84:	f001 f874 	bl	8003070 <HAL_MPU_Enable>

}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <Error_Handler+0x8>

08001f9c <mpu9250_write_reg>:
Mag_CalibData_t mag_calibration_data;

float quat[4];

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2120      	movs	r1, #32
 8001fb0:	480b      	ldr	r0, [pc, #44]	@ (8001fe0 <mpu9250_write_reg+0x44>)
 8001fb2:	f001 fa6d 	bl	8003490 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001fb6:	1df9      	adds	r1, r7, #7
 8001fb8:	2364      	movs	r3, #100	@ 0x64
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4809      	ldr	r0, [pc, #36]	@ (8001fe4 <mpu9250_write_reg+0x48>)
 8001fbe:	f004 f9f1 	bl	80063a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001fc2:	1db9      	adds	r1, r7, #6
 8001fc4:	2364      	movs	r3, #100	@ 0x64
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4806      	ldr	r0, [pc, #24]	@ (8001fe4 <mpu9250_write_reg+0x48>)
 8001fca:	f004 f9eb 	bl	80063a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <mpu9250_write_reg+0x44>)
 8001fd4:	f001 fa5c 	bl	8003490 <HAL_GPIO_WritePin>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	58020000 	.word	0x58020000
 8001fe4:	240002c0 	.word	0x240002c0

08001fe8 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2120      	movs	r1, #32
 8002006:	4814      	ldr	r0, [pc, #80]	@ (8002058 <mpu9250_read_reg+0x70>)
 8002008:	f001 fa42 	bl	8003490 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 800200c:	f107 010e 	add.w	r1, r7, #14
 8002010:	2364      	movs	r3, #100	@ 0x64
 8002012:	2201      	movs	r2, #1
 8002014:	4811      	ldr	r0, [pc, #68]	@ (800205c <mpu9250_read_reg+0x74>)
 8002016:	f004 f9c5 	bl	80063a4 <HAL_SPI_Transmit>
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <mpu9250_read_reg+0x40>
		Error_Handler();
 8002024:	f7ff ffb4 	bl	8001f90 <Error_Handler>
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2364      	movs	r3, #100	@ 0x64
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	480a      	ldr	r0, [pc, #40]	@ (800205c <mpu9250_read_reg+0x74>)
 8002032:	f004 fba5 	bl	8006780 <HAL_SPI_Receive>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <mpu9250_read_reg+0x5c>
		Error_Handler();
 8002040:	f7ff ffa6 	bl	8001f90 <Error_Handler>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	2120      	movs	r1, #32
 8002048:	4803      	ldr	r0, [pc, #12]	@ (8002058 <mpu9250_read_reg+0x70>)
 800204a:	f001 fa21 	bl	8003490 <HAL_GPIO_WritePin>
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	58020000 	.word	0x58020000
 800205c:	240002c0 	.word	0x240002c0

08002060 <mpu9250_setup>:

void mpu9250_setup()
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8002064:	2105      	movs	r1, #5
 8002066:	201a      	movs	r0, #26
 8002068:	f7ff ff98 	bl	8001f9c <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 800206c:	2110      	movs	r1, #16
 800206e:	201c      	movs	r0, #28
 8002070:	f7ff ff94 	bl	8001f9c <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8002074:	2108      	movs	r1, #8
 8002076:	201b      	movs	r0, #27
 8002078:	f7ff ff90 	bl	8001f9c <mpu9250_write_reg>
	mpu9250_calibrateGyro(1500);
 800207c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002080:	f000 f814 	bl	80020ac <mpu9250_calibrateGyro>
	quat[0] = 1.0f;
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <mpu9250_setup+0x48>)
 8002086:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800208a:	601a      	str	r2, [r3, #0]
	quat[1] = 0.0f;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <mpu9250_setup+0x48>)
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
	quat[2] = 0.0f;
 8002094:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <mpu9250_setup+0x48>)
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
	quat[3] = 0.0f;
 800209c:	4b02      	ldr	r3, [pc, #8]	@ (80020a8 <mpu9250_setup+0x48>)
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
//	// magnetometer setup
//	mpu9250_write_reg(0x6A, 0x20);
//	mpu9250_write_reg(0x24, 0x0D);
//	mpu9250_write_reg(0x25, 0x8C);
//	mpu9250_write_reg(0x26, 0x03);
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	24000550 	.word	0x24000550

080020ac <mpu9250_calibrateGyro>:
    mpu9250_write_reg(0x26, 0x03);                   // Start at HXL register
    mpu9250_write_reg(0x27, 0x87);                   // Enable reading 7 bytes (0x80 | 7)
}

void mpu9250_calibrateGyro(uint16_t numCalPoints)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <mpu9250_calibrateGyro+0x20>
    {
        numCalPoints = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	817b      	strh	r3, [r7, #10]
 80020d0:	e01c      	b.n	800210c <mpu9250_calibrateGyro+0x60>
    {
        mpu9250_getRawData();
 80020d2:	f000 f855 	bl	8002180 <mpu9250_getRawData>
        x += imu_raw_data.gyro_x;
 80020d6:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <mpu9250_calibrateGyro+0xcc>)
 80020d8:	88db      	ldrh	r3, [r3, #6]
 80020da:	b21b      	sxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4413      	add	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
        y += imu_raw_data.gyro_y;
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <mpu9250_calibrateGyro+0xcc>)
 80020e6:	891b      	ldrh	r3, [r3, #8]
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        z += imu_raw_data.gyro_z;
 80020f2:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <mpu9250_calibrateGyro+0xcc>)
 80020f4:	895b      	ldrh	r3, [r3, #10]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8002100:	2003      	movs	r0, #3
 8002102:	f000 fe5d 	bl	8002dc0 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	3301      	adds	r3, #1
 800210a:	817b      	strh	r3, [r7, #10]
 800210c:	897a      	ldrh	r2, [r7, #10]
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	429a      	cmp	r2, r3
 8002112:	d3de      	bcc.n	80020d2 <mpu9250_calibrateGyro+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    imu_processed_data.gyro_offX = (float)x / (float)numCalPoints;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212c:	4b13      	ldr	r3, [pc, #76]	@ (800217c <mpu9250_calibrateGyro+0xd0>)
 800212e:	edc3 7a00 	vstr	s15, [r3]
    imu_processed_data.gyro_offY = (float)y / (float)numCalPoints;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214a:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <mpu9250_calibrateGyro+0xd0>)
 800214c:	edc3 7a01 	vstr	s15, [r3, #4]
    imu_processed_data.gyro_offZ = (float)z / (float)numCalPoints;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002168:	4b04      	ldr	r3, [pc, #16]	@ (800217c <mpu9250_calibrateGyro+0xd0>)
 800216a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	24000500 	.word	0x24000500
 800217c:	24000514 	.word	0x24000514

08002180 <mpu9250_getRawData>:



void mpu9250_getRawData()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8002186:	463b      	mov	r3, r7
 8002188:	2206      	movs	r2, #6
 800218a:	4619      	mov	r1, r3
 800218c:	203b      	movs	r0, #59	@ 0x3b
 800218e:	f7ff ff2b 	bl	8001fe8 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8002192:	783b      	ldrb	r3, [r7, #0]
 8002194:	b21b      	sxth	r3, r3
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	787b      	ldrb	r3, [r7, #1]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <mpu9250_getRawData+0xa0>)
 80021a4:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 80021a6:	78bb      	ldrb	r3, [r7, #2]
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <mpu9250_getRawData+0xa0>)
 80021b8:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 80021ba:	793b      	ldrb	r3, [r7, #4]
 80021bc:	b21b      	sxth	r3, r3
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	797b      	ldrb	r3, [r7, #5]
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <mpu9250_getRawData+0xa0>)
 80021cc:	809a      	strh	r2, [r3, #4]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 80021ce:	463b      	mov	r3, r7
 80021d0:	2206      	movs	r2, #6
 80021d2:	4619      	mov	r1, r3
 80021d4:	2043      	movs	r0, #67	@ 0x43
 80021d6:	f7ff ff07 	bl	8001fe8 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 80021da:	783b      	ldrb	r3, [r7, #0]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	787b      	ldrb	r3, [r7, #1]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <mpu9250_getRawData+0xa0>)
 80021ec:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 80021ee:	78bb      	ldrb	r3, [r7, #2]
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <mpu9250_getRawData+0xa0>)
 8002200:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8002202:	793b      	ldrb	r3, [r7, #4]
 8002204:	b21b      	sxth	r3, r3
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	797b      	ldrb	r3, [r7, #5]
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b21a      	sxth	r2, r3
 8002212:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <mpu9250_getRawData+0xa0>)
 8002214:	815a      	strh	r2, [r3, #10]
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	24000500 	.word	0x24000500
 8002224:	00000000 	.word	0x00000000

08002228 <mpu9250_getProcessedAngle>:

void mpu9250_getProcessedAngle()
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
	  mpu9250_getRawData();
 800222e:	f7ff ffa7 	bl	8002180 <mpu9250_getRawData>

	  imu_processed_data.accel_x = ((float)imu_raw_data.accel_x/4096.0) * 9.81;
 8002232:	4bc3      	ldr	r3, [pc, #780]	@ (8002540 <mpu9250_getProcessedAngle+0x318>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b21b      	sxth	r3, r3
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002244:	ed9f 5bb2 	vldr	d5, [pc, #712]	@ 8002510 <mpu9250_getProcessedAngle+0x2e8>
 8002248:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800224c:	ed9f 6bb2 	vldr	d6, [pc, #712]	@ 8002518 <mpu9250_getProcessedAngle+0x2f0>
 8002250:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002254:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002258:	4bba      	ldr	r3, [pc, #744]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 800225a:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.accel_y = ((float)imu_raw_data.accel_y/4096.0) * 9.81;
 800225e:	4bb8      	ldr	r3, [pc, #736]	@ (8002540 <mpu9250_getProcessedAngle+0x318>)
 8002260:	885b      	ldrh	r3, [r3, #2]
 8002262:	b21b      	sxth	r3, r3
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800226c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002270:	ed9f 5ba7 	vldr	d5, [pc, #668]	@ 8002510 <mpu9250_getProcessedAngle+0x2e8>
 8002274:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002278:	ed9f 6ba7 	vldr	d6, [pc, #668]	@ 8002518 <mpu9250_getProcessedAngle+0x2f0>
 800227c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002280:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002284:	4baf      	ldr	r3, [pc, #700]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 8002286:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.accel_z = ((float)imu_raw_data.accel_z/4096.0) * 9.81;
 800228a:	4bad      	ldr	r3, [pc, #692]	@ (8002540 <mpu9250_getProcessedAngle+0x318>)
 800228c:	889b      	ldrh	r3, [r3, #4]
 800228e:	b21b      	sxth	r3, r3
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002298:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800229c:	ed9f 5b9c 	vldr	d5, [pc, #624]	@ 8002510 <mpu9250_getProcessedAngle+0x2e8>
 80022a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022a4:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8002518 <mpu9250_getProcessedAngle+0x2f0>
 80022a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022b0:	4ba4      	ldr	r3, [pc, #656]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 80022b2:	edc3 7a05 	vstr	s15, [r3, #20]
//	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0

	  imu_processed_data.gyro_x = ((float)imu_raw_data.gyro_x - imu_processed_data.gyro_offX)/65.5 * M_PI/180.0f;
 80022b6:	4ba2      	ldr	r3, [pc, #648]	@ (8002540 <mpu9250_getProcessedAngle+0x318>)
 80022b8:	88db      	ldrh	r3, [r3, #6]
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c4:	4b9f      	ldr	r3, [pc, #636]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022d2:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 8002520 <mpu9250_getProcessedAngle+0x2f8>
 80022d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022da:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8002528 <mpu9250_getProcessedAngle+0x300>
 80022de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022e2:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 8002530 <mpu9250_getProcessedAngle+0x308>
 80022e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022ee:	4b95      	ldr	r3, [pc, #596]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 80022f0:	edc3 7a06 	vstr	s15, [r3, #24]
	  imu_processed_data.gyro_y = ((float)imu_raw_data.gyro_y - imu_processed_data.gyro_offY)/65.5 * M_PI/180.0f;;
 80022f4:	4b92      	ldr	r3, [pc, #584]	@ (8002540 <mpu9250_getProcessedAngle+0x318>)
 80022f6:	891b      	ldrh	r3, [r3, #8]
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002302:	4b90      	ldr	r3, [pc, #576]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 8002304:	edd3 7a01 	vldr	s15, [r3, #4]
 8002308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002310:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 8002520 <mpu9250_getProcessedAngle+0x2f8>
 8002314:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002318:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8002528 <mpu9250_getProcessedAngle+0x300>
 800231c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002320:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 8002530 <mpu9250_getProcessedAngle+0x308>
 8002324:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002328:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800232c:	4b85      	ldr	r3, [pc, #532]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 800232e:	edc3 7a07 	vstr	s15, [r3, #28]
	  imu_processed_data.gyro_z = ((float)imu_raw_data.gyro_z - imu_processed_data.gyro_offZ)/65.5 * M_PI/180.0f;;
 8002332:	4b83      	ldr	r3, [pc, #524]	@ (8002540 <mpu9250_getProcessedAngle+0x318>)
 8002334:	895b      	ldrh	r3, [r3, #10]
 8002336:	b21b      	sxth	r3, r3
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002340:	4b80      	ldr	r3, [pc, #512]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 8002342:	edd3 7a02 	vldr	s15, [r3, #8]
 8002346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800234e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8002520 <mpu9250_getProcessedAngle+0x2f8>
 8002352:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002356:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8002528 <mpu9250_getProcessedAngle+0x300>
 800235a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800235e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8002530 <mpu9250_getProcessedAngle+0x308>
 8002362:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002366:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800236a:	4b76      	ldr	r3, [pc, #472]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 800236c:	edc3 7a08 	vstr	s15, [r3, #32]
//	  mpu9250_read_reg(0x49, imu_data, sizeof(imu_data));
//	  imu_raw_data.mag_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
//	  imu_raw_data.mag_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
//	  imu_raw_data.mag_z = ((int16_t)imu_data[4]<<8) | imu_data[5];

	  MahonyAHRSupdateIMU(quat, imu_processed_data.gyro_x, imu_processed_data.gyro_y, imu_processed_data.gyro_z, imu_processed_data.accel_x, imu_processed_data.accel_y ,imu_processed_data.accel_z);
 8002370:	4b74      	ldr	r3, [pc, #464]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 8002372:	edd3 7a06 	vldr	s15, [r3, #24]
 8002376:	4b73      	ldr	r3, [pc, #460]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 8002378:	ed93 7a07 	vldr	s14, [r3, #28]
 800237c:	4b71      	ldr	r3, [pc, #452]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 800237e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002382:	4b70      	ldr	r3, [pc, #448]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 8002384:	ed93 6a03 	vldr	s12, [r3, #12]
 8002388:	4b6e      	ldr	r3, [pc, #440]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 800238a:	edd3 5a04 	vldr	s11, [r3, #16]
 800238e:	4b6d      	ldr	r3, [pc, #436]	@ (8002544 <mpu9250_getProcessedAngle+0x31c>)
 8002390:	ed93 5a05 	vldr	s10, [r3, #20]
 8002394:	eef0 2a45 	vmov.f32	s5, s10
 8002398:	eeb0 2a65 	vmov.f32	s4, s11
 800239c:	eef0 1a46 	vmov.f32	s3, s12
 80023a0:	eeb0 1a66 	vmov.f32	s2, s13
 80023a4:	eef0 0a47 	vmov.f32	s1, s14
 80023a8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ac:	4866      	ldr	r0, [pc, #408]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 80023ae:	f7fe fb79 	bl	8000aa4 <MahonyAHRSupdateIMU>

	    /* Quternion to Euler */
	  float radPitch = asinf(-2.0f * (quat[1] * quat[3] - quat[0] * quat[2]));
 80023b2:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 80023b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80023b8:	4b63      	ldr	r3, [pc, #396]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 80023ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80023be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c2:	4b61      	ldr	r3, [pc, #388]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 80023c4:	edd3 6a00 	vldr	s13, [r3]
 80023c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 80023ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80023da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023de:	eeb0 0a67 	vmov.f32	s0, s15
 80023e2:	f00b fb5b 	bl	800da9c <asinf>
 80023e6:	ed87 0a03 	vstr	s0, [r7, #12]
	  float radRoll = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]), 2.0f * (quat[0] * quat[0] + quat[3] * quat[3]) - 1.0f);
 80023ea:	4b57      	ldr	r3, [pc, #348]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 80023ec:	ed93 7a00 	vldr	s14, [r3]
 80023f0:	4b55      	ldr	r3, [pc, #340]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 80023f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fa:	4b53      	ldr	r3, [pc, #332]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 80023fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8002400:	4b51      	ldr	r3, [pc, #324]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 8002402:	edd3 7a03 	vldr	s15, [r3, #12]
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002412:	4b4d      	ldr	r3, [pc, #308]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	4b4b      	ldr	r3, [pc, #300]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002422:	4b49      	ldr	r3, [pc, #292]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 8002424:	edd3 6a03 	vldr	s13, [r3, #12]
 8002428:	4b47      	ldr	r3, [pc, #284]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 800242a:	edd3 7a03 	vldr	s15, [r3, #12]
 800242e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800243a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800243e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002442:	eef0 0a67 	vmov.f32	s1, s15
 8002446:	eeb0 0a46 	vmov.f32	s0, s12
 800244a:	f00b fb53 	bl	800daf4 <atan2f>
 800244e:	ed87 0a02 	vstr	s0, [r7, #8]
	  float radYaw =  atan2f(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]), 2.0f * (quat[0] * quat[0] + quat[1] * quat[1]) - 1.0f);
 8002452:	4b3d      	ldr	r3, [pc, #244]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	4b3b      	ldr	r3, [pc, #236]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 800245a:	edd3 7a03 	vldr	s15, [r3, #12]
 800245e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002462:	4b39      	ldr	r3, [pc, #228]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 8002464:	edd3 6a01 	vldr	s13, [r3, #4]
 8002468:	4b37      	ldr	r3, [pc, #220]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 800246a:	edd3 7a02 	vldr	s15, [r3, #8]
 800246e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002476:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800247a:	4b33      	ldr	r3, [pc, #204]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 800247c:	ed93 7a00 	vldr	s14, [r3]
 8002480:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248a:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 800248c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002490:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <mpu9250_getProcessedAngle+0x320>)
 8002492:	edd3 7a01 	vldr	s15, [r3, #4]
 8002496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800249a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024aa:	eef0 0a67 	vmov.f32	s1, s15
 80024ae:	eeb0 0a46 	vmov.f32	s0, s12
 80024b2:	f00b fb1f 	bl	800daf4 <atan2f>
 80024b6:	ed87 0a01 	vstr	s0, [r7, #4]
	    /* Radian to Degree*/
	  imu_angles.pitch = radPitch * RAD_TO_DEG;
 80024ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80024be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024c2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002538 <mpu9250_getProcessedAngle+0x310>
 80024c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ce:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <mpu9250_getProcessedAngle+0x324>)
 80024d0:	edc3 7a01 	vstr	s15, [r3, #4]
	  imu_angles.roll = radRoll * RAD_TO_DEG;
 80024d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024dc:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002538 <mpu9250_getProcessedAngle+0x310>
 80024e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <mpu9250_getProcessedAngle+0x324>)
 80024ea:	edc3 7a00 	vstr	s15, [r3]
	  imu_angles.yaw = radYaw * RAD_TO_DEG;
 80024ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8002538 <mpu9250_getProcessedAngle+0x310>
 80024fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <mpu9250_getProcessedAngle+0x324>)
 8002504:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	00000000 	.word	0x00000000
 8002514:	40b00000 	.word	0x40b00000
 8002518:	51eb851f 	.word	0x51eb851f
 800251c:	40239eb8 	.word	0x40239eb8
 8002520:	00000000 	.word	0x00000000
 8002524:	40506000 	.word	0x40506000
 8002528:	54442d18 	.word	0x54442d18
 800252c:	400921fb 	.word	0x400921fb
 8002530:	00000000 	.word	0x00000000
 8002534:	40668000 	.word	0x40668000
 8002538:	1a63c1f8 	.word	0x1a63c1f8
 800253c:	404ca5dc 	.word	0x404ca5dc
 8002540:	24000500 	.word	0x24000500
 8002544:	24000514 	.word	0x24000514
 8002548:	24000550 	.word	0x24000550
 800254c:	24000544 	.word	0x24000544

08002550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_MspInit+0x30>)
 8002558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800255c:	4a08      	ldr	r2, [pc, #32]	@ (8002580 <HAL_MspInit+0x30>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_MspInit+0x30>)
 8002568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	58024400 	.word	0x58024400

08002584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0be      	sub	sp, #248	@ 0xf8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800259c:	f107 0320 	add.w	r3, r7, #32
 80025a0:	22c0      	movs	r2, #192	@ 0xc0
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f008 fd55 	bl	800b054 <memset>
  if(hspi->Instance==SPI1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a71      	ldr	r2, [pc, #452]	@ (8002774 <HAL_SPI_MspInit+0x1f0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d16a      	bne.n	800268a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80025b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c6:	f107 0320 	add.w	r3, r7, #32
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 ff9a 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80025d6:	f7ff fcdb 	bl	8001f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025da:	4b67      	ldr	r3, [pc, #412]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80025dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e0:	4a65      	ldr	r2, [pc, #404]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80025e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025ea:	4b63      	ldr	r3, [pc, #396]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80025ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80025fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002608:	4b5b      	ldr	r3, [pc, #364]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 800260a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	4b58      	ldr	r3, [pc, #352]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 8002618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800261c:	4a56      	ldr	r2, [pc, #344]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002626:	4b54      	ldr	r3, [pc, #336]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800264c:	2305      	movs	r3, #5
 800264e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002656:	4619      	mov	r1, r3
 8002658:	4848      	ldr	r0, [pc, #288]	@ (800277c <HAL_SPI_MspInit+0x1f8>)
 800265a:	f000 fd69 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800265e:	2318      	movs	r3, #24
 8002660:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002676:	2305      	movs	r3, #5
 8002678:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002680:	4619      	mov	r1, r3
 8002682:	483f      	ldr	r0, [pc, #252]	@ (8002780 <HAL_SPI_MspInit+0x1fc>)
 8002684:	f000 fd54 	bl	8003130 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002688:	e070      	b.n	800276c <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a3d      	ldr	r2, [pc, #244]	@ (8002784 <HAL_SPI_MspInit+0x200>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d16b      	bne.n	800276c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002694:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	4618      	mov	r0, r3
 80026ac:	f001 ff2a 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_SPI_MspInit+0x136>
      Error_Handler();
 80026b6:	f7ff fc6b 	bl	8001f90 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80026bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80026c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80026cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	4b27      	ldr	r3, [pc, #156]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026de:	4a26      	ldr	r2, [pc, #152]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026e8:	4b23      	ldr	r3, [pc, #140]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80026ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002706:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <HAL_SPI_MspInit+0x1f4>)
 8002708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002714:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002718:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800272e:	2305      	movs	r3, #5
 8002730:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002738:	4619      	mov	r1, r3
 800273a:	4811      	ldr	r0, [pc, #68]	@ (8002780 <HAL_SPI_MspInit+0x1fc>)
 800273c:	f000 fcf8 	bl	8003130 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002744:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800275a:	2305      	movs	r3, #5
 800275c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002764:	4619      	mov	r1, r3
 8002766:	4805      	ldr	r0, [pc, #20]	@ (800277c <HAL_SPI_MspInit+0x1f8>)
 8002768:	f000 fce2 	bl	8003130 <HAL_GPIO_Init>
}
 800276c:	bf00      	nop
 800276e:	37f8      	adds	r7, #248	@ 0xf8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40013000 	.word	0x40013000
 8002778:	58024400 	.word	0x58024400
 800277c:	58020000 	.word	0x58020000
 8002780:	58020400 	.word	0x58020400
 8002784:	40003800 	.word	0x40003800

08002788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <HAL_TIM_Base_MspInit+0x84>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d117      	bne.n	80027ca <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800279a:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_TIM_Base_MspInit+0x88>)
 800279c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <HAL_TIM_Base_MspInit+0x88>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027aa:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_TIM_Base_MspInit+0x88>)
 80027ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2100      	movs	r1, #0
 80027bc:	2019      	movs	r0, #25
 80027be:	f000 fc0a 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027c2:	2019      	movs	r0, #25
 80027c4:	f000 fc21 	bl	800300a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027c8:	e01b      	b.n	8002802 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d2:	d116      	bne.n	8002802 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <HAL_TIM_Base_MspInit+0x88>)
 80027d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027da:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <HAL_TIM_Base_MspInit+0x88>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_TIM_Base_MspInit+0x88>)
 80027e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	201c      	movs	r0, #28
 80027f8:	f000 fbed 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027fc:	201c      	movs	r0, #28
 80027fe:	f000 fc04 	bl	800300a <HAL_NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40010000 	.word	0x40010000
 8002810:	58024400 	.word	0x58024400

08002814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <HAL_TIM_MspPostInit+0x6c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d11f      	bne.n	8002876 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002836:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <HAL_TIM_MspPostInit+0x70>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800283c:	4a11      	ldr	r2, [pc, #68]	@ (8002884 <HAL_TIM_MspPostInit+0x70>)
 800283e:	f043 0310 	orr.w	r3, r3, #16
 8002842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002846:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <HAL_TIM_MspPostInit+0x70>)
 8002848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002854:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002858:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002866:	2301      	movs	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	4619      	mov	r1, r3
 8002870:	4805      	ldr	r0, [pc, #20]	@ (8002888 <HAL_TIM_MspPostInit+0x74>)
 8002872:	f000 fc5d 	bl	8003130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	58024400 	.word	0x58024400
 8002888:	58021000 	.word	0x58021000

0800288c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b0ba      	sub	sp, #232	@ 0xe8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	22c0      	movs	r2, #192	@ 0xc0
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f008 fbd1 	bl	800b054 <memset>
  if(huart->Instance==USART2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <HAL_UART_MspInit+0xc4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d145      	bne.n	8002948 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028bc:	f04f 0202 	mov.w	r2, #2
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ce:	f107 0310 	add.w	r3, r7, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 fe16 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80028de:	f7ff fb57 	bl	8001f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002954 <HAL_UART_MspInit+0xc8>)
 80028e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002954 <HAL_UART_MspInit+0xc8>)
 80028ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028f2:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_UART_MspInit+0xc8>)
 80028f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	4b14      	ldr	r3, [pc, #80]	@ (8002954 <HAL_UART_MspInit+0xc8>)
 8002902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002906:	4a13      	ldr	r2, [pc, #76]	@ (8002954 <HAL_UART_MspInit+0xc8>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002910:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <HAL_UART_MspInit+0xc8>)
 8002912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800291e:	230c      	movs	r3, #12
 8002920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002936:	2307      	movs	r3, #7
 8002938:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002940:	4619      	mov	r1, r3
 8002942:	4805      	ldr	r0, [pc, #20]	@ (8002958 <HAL_UART_MspInit+0xcc>)
 8002944:	f000 fbf4 	bl	8003130 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002948:	bf00      	nop
 800294a:	37e8      	adds	r7, #232	@ 0xe8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40004400 	.word	0x40004400
 8002954:	58024400 	.word	0x58024400
 8002958:	58020000 	.word	0x58020000

0800295c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <NMI_Handler+0x4>

08002964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <HardFault_Handler+0x4>

0800296c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <MemManage_Handler+0x4>

08002974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <BusFault_Handler+0x4>

0800297c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <UsageFault_Handler+0x4>

08002984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b2:	f000 f9e5 	bl	8002d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029c0:	4802      	ldr	r0, [pc, #8]	@ (80029cc <TIM1_UP_IRQHandler+0x10>)
 80029c2:	f004 fc77 	bl	80072b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	240003d0 	.word	0x240003d0

080029d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029d4:	4802      	ldr	r0, [pc, #8]	@ (80029e0 <TIM2_IRQHandler+0x10>)
 80029d6:	f004 fc6d 	bl	80072b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2400041c 	.word	0x2400041c

080029e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return 1;
 80029e8:	2301      	movs	r3, #1
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <_kill>:

int _kill(int pid, int sig)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029fe:	f008 fb43 	bl	800b088 <__errno>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2216      	movs	r2, #22
 8002a06:	601a      	str	r2, [r3, #0]
  return -1;
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <_exit>:

void _exit (int status)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ffe7 	bl	80029f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a26:	bf00      	nop
 8002a28:	e7fd      	b.n	8002a26 <_exit+0x12>

08002a2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e00a      	b.n	8002a52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a3c:	f3af 8000 	nop.w
 8002a40:	4601      	mov	r1, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	60ba      	str	r2, [r7, #8]
 8002a48:	b2ca      	uxtb	r2, r1
 8002a4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	dbf0      	blt.n	8002a3c <_read+0x12>
  }

  return len;
 8002a5a:	687b      	ldr	r3, [r7, #4]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a8c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_isatty>:

int _isatty(int file)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aa4:	2301      	movs	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad4:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <_sbrk+0x5c>)
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <_sbrk+0x60>)
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <_sbrk+0x64>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	@ (8002b34 <_sbrk+0x68>)
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d207      	bcs.n	8002b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002afc:	f008 fac4 	bl	800b088 <__errno>
 8002b00:	4603      	mov	r3, r0
 8002b02:	220c      	movs	r2, #12
 8002b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b0a:	e009      	b.n	8002b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b12:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	4a05      	ldr	r2, [pc, #20]	@ (8002b30 <_sbrk+0x64>)
 8002b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	24080000 	.word	0x24080000
 8002b2c:	00000400 	.word	0x00000400
 8002b30:	24000560 	.word	0x24000560
 8002b34:	240006b8 	.word	0x240006b8

08002b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b3c:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <SystemInit+0xe4>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	4a36      	ldr	r2, [pc, #216]	@ (8002c1c <SystemInit+0xe4>)
 8002b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b4c:	4b34      	ldr	r3, [pc, #208]	@ (8002c20 <SystemInit+0xe8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	2b06      	cmp	r3, #6
 8002b56:	d807      	bhi.n	8002b68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b58:	4b31      	ldr	r3, [pc, #196]	@ (8002c20 <SystemInit+0xe8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 030f 	bic.w	r3, r3, #15
 8002b60:	4a2f      	ldr	r2, [pc, #188]	@ (8002c20 <SystemInit+0xe8>)
 8002b62:	f043 0307 	orr.w	r3, r3, #7
 8002b66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b68:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <SystemInit+0xec>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c24 <SystemInit+0xec>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b74:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <SystemInit+0xec>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <SystemInit+0xec>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4929      	ldr	r1, [pc, #164]	@ (8002c24 <SystemInit+0xec>)
 8002b80:	4b29      	ldr	r3, [pc, #164]	@ (8002c28 <SystemInit+0xf0>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <SystemInit+0xe8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b92:	4b23      	ldr	r3, [pc, #140]	@ (8002c20 <SystemInit+0xe8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 030f 	bic.w	r3, r3, #15
 8002b9a:	4a21      	ldr	r2, [pc, #132]	@ (8002c20 <SystemInit+0xe8>)
 8002b9c:	f043 0307 	orr.w	r3, r3, #7
 8002ba0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <SystemInit+0xec>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c24 <SystemInit+0xec>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002bae:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <SystemInit+0xec>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <SystemInit+0xec>)
 8002bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c2c <SystemInit+0xf4>)
 8002bb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <SystemInit+0xec>)
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c30 <SystemInit+0xf8>)
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <SystemInit+0xec>)
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c34 <SystemInit+0xfc>)
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <SystemInit+0xec>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002bcc:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <SystemInit+0xec>)
 8002bce:	4a19      	ldr	r2, [pc, #100]	@ (8002c34 <SystemInit+0xfc>)
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002bd2:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <SystemInit+0xec>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <SystemInit+0xec>)
 8002bda:	4a16      	ldr	r2, [pc, #88]	@ (8002c34 <SystemInit+0xfc>)
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bde:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <SystemInit+0xec>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <SystemInit+0xec>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0e      	ldr	r2, [pc, #56]	@ (8002c24 <SystemInit+0xec>)
 8002bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <SystemInit+0xec>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <SystemInit+0x100>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <SystemInit+0x104>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c02:	d202      	bcs.n	8002c0a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <SystemInit+0x108>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <SystemInit+0x10c>)
 8002c0c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002c10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00
 8002c20:	52002000 	.word	0x52002000
 8002c24:	58024400 	.word	0x58024400
 8002c28:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c2c:	02020200 	.word	0x02020200
 8002c30:	01ff0000 	.word	0x01ff0000
 8002c34:	01010280 	.word	0x01010280
 8002c38:	5c001000 	.word	0x5c001000
 8002c3c:	ffff0000 	.word	0xffff0000
 8002c40:	51008108 	.word	0x51008108
 8002c44:	52004000 	.word	0x52004000

08002c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c4c:	f7ff ff74 	bl	8002b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	@ (8002c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	@ (8002c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	@ (8002c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c76:	f008 fa0d 	bl	800b094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7fe fd91 	bl	80017a0 <main>
  bx  lr
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002c84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c88:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002c8c:	08010320 	.word	0x08010320
  ldr r2, =_sbss
 8002c90:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002c94:	240006b4 	.word	0x240006b4

08002c98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC3_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	f000 f98c 	bl	8002fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ca8:	f001 fa56 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_Init+0x68>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	4913      	ldr	r1, [pc, #76]	@ (8002d08 <HAL_Init+0x6c>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <HAL_Init+0x68>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	4a0e      	ldr	r2, [pc, #56]	@ (8002d08 <HAL_Init+0x6c>)
 8002cd0:	5cd3      	ldrb	r3, [r2, r3]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d0c <HAL_Init+0x70>)
 8002cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d10 <HAL_Init+0x74>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f814 	bl	8002d14 <HAL_InitTick>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e002      	b.n	8002cfc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf6:	f7ff fc2b 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	58024400 	.word	0x58024400
 8002d08:	0800e5c0 	.word	0x0800e5c0
 8002d0c:	24000008 	.word	0x24000008
 8002d10:	24000004 	.word	0x24000004

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d1c:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_InitTick+0x60>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e021      	b.n	8002d6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_InitTick+0x64>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_InitTick+0x60>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f971 	bl	8003026 <HAL_SYSTICK_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00e      	b.n	8002d6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d80a      	bhi.n	8002d6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d5c:	f000 f93b 	bl	8002fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d60:	4a06      	ldr	r2, [pc, #24]	@ (8002d7c <HAL_InitTick+0x68>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	24000010 	.word	0x24000010
 8002d78:	24000004 	.word	0x24000004
 8002d7c:	2400000c 	.word	0x2400000c

08002d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	24000010 	.word	0x24000010
 8002da4:	24000564 	.word	0x24000564

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	24000564 	.word	0x24000564

08002dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff ffee 	bl	8002da8 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd8:	d005      	beq.n	8002de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <HAL_Delay+0x44>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de6:	bf00      	nop
 8002de8:	f7ff ffde 	bl	8002da8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8f7      	bhi.n	8002de8 <HAL_Delay+0x28>
  {
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	24000010 	.word	0x24000010

08002e08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <HAL_GetREVID+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0c1b      	lsrs	r3, r3, #16
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	5c001000 	.word	0x5c001000

08002e20 <__NVIC_SetPriorityGrouping>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x40>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x40>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00
 8002e64:	05fa0000 	.word	0x05fa0000

08002e68 <__NVIC_GetPriorityGrouping>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <__NVIC_GetPriorityGrouping+0x18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	f003 0307 	and.w	r3, r3, #7
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_EnableIRQ>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db0b      	blt.n	8002eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4907      	ldr	r1, [pc, #28]	@ (8002ebc <__NVIC_EnableIRQ+0x38>)
 8002e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000e100 	.word	0xe000e100

08002ec0 <__NVIC_SetPriority>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db0a      	blt.n	8002eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	490c      	ldr	r1, [pc, #48]	@ (8002f0c <__NVIC_SetPriority+0x4c>)
 8002eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ee8:	e00a      	b.n	8002f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4908      	ldr	r1, [pc, #32]	@ (8002f10 <__NVIC_SetPriority+0x50>)
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	0112      	lsls	r2, r2, #4
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	440b      	add	r3, r1
 8002efe:	761a      	strb	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <NVIC_EncodePriority>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	@ 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1c3 0307 	rsb	r3, r3, #7
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	bf28      	it	cs
 8002f32:	2304      	movcs	r3, #4
 8002f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <NVIC_EncodePriority+0x30>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3b03      	subs	r3, #3
 8002f42:	e000      	b.n	8002f46 <NVIC_EncodePriority+0x32>
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	401a      	ands	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43d9      	mvns	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	4313      	orrs	r3, r2
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3724      	adds	r7, #36	@ 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <SysTick_Config>:
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f8c:	d301      	bcc.n	8002f92 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00f      	b.n	8002fb2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f92:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <SysTick_Config+0x40>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9a:	210f      	movs	r1, #15
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fa0:	f7ff ff8e 	bl	8002ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa4:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <SysTick_Config+0x40>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002faa:	4b04      	ldr	r3, [pc, #16]	@ (8002fbc <SysTick_Config+0x40>)
 8002fac:	2207      	movs	r2, #7
 8002fae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	e000e010 	.word	0xe000e010

08002fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff29 	bl	8002e20 <__NVIC_SetPriorityGrouping>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe4:	f7ff ff40 	bl	8002e68 <__NVIC_GetPriorityGrouping>
 8002fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6978      	ldr	r0, [r7, #20]
 8002ff0:	f7ff ff90 	bl	8002f14 <NVIC_EncodePriority>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff5f 	bl	8002ec0 <__NVIC_SetPriority>
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff33 	bl	8002e84 <__NVIC_EnableIRQ>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ffa4 	bl	8002f7c <SysTick_Config>
 8003034:	4603      	mov	r3, r0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003044:	f3bf 8f5f 	dmb	sy
}
 8003048:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800304a:	4b07      	ldr	r3, [pc, #28]	@ (8003068 <HAL_MPU_Disable+0x28>)
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	4a06      	ldr	r2, [pc, #24]	@ (8003068 <HAL_MPU_Disable+0x28>)
 8003050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003054:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_MPU_Disable+0x2c>)
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000ed00 	.word	0xe000ed00
 800306c:	e000ed90 	.word	0xe000ed90

08003070 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003078:	4a0b      	ldr	r2, [pc, #44]	@ (80030a8 <HAL_MPU_Enable+0x38>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003082:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <HAL_MPU_Enable+0x3c>)
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	4a09      	ldr	r2, [pc, #36]	@ (80030ac <HAL_MPU_Enable+0x3c>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800308e:	f3bf 8f4f 	dsb	sy
}
 8003092:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003094:	f3bf 8f6f 	isb	sy
}
 8003098:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed90 	.word	0xe000ed90
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	785a      	ldrb	r2, [r3, #1]
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_MPU_ConfigRegion+0x7c>)
 80030be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80030c0:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <HAL_MPU_ConfigRegion+0x7c>)
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	4a19      	ldr	r2, [pc, #100]	@ (800312c <HAL_MPU_ConfigRegion+0x7c>)
 80030c6:	f023 0301 	bic.w	r3, r3, #1
 80030ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80030cc:	4a17      	ldr	r2, [pc, #92]	@ (800312c <HAL_MPU_ConfigRegion+0x7c>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7b1b      	ldrb	r3, [r3, #12]
 80030d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7adb      	ldrb	r3, [r3, #11]
 80030de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7a9b      	ldrb	r3, [r3, #10]
 80030e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7b5b      	ldrb	r3, [r3, #13]
 80030ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7b9b      	ldrb	r3, [r3, #14]
 80030f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7bdb      	ldrb	r3, [r3, #15]
 80030fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003100:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7a5b      	ldrb	r3, [r3, #9]
 8003106:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003108:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7a1b      	ldrb	r3, [r3, #8]
 800310e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003110:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	7812      	ldrb	r2, [r2, #0]
 8003116:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003118:	4a04      	ldr	r2, [pc, #16]	@ (800312c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800311a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800311c:	6113      	str	r3, [r2, #16]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000ed90 	.word	0xe000ed90

08003130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800313e:	4b89      	ldr	r3, [pc, #548]	@ (8003364 <HAL_GPIO_Init+0x234>)
 8003140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003142:	e194      	b.n	800346e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8186 	beq.w	8003468 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d005      	beq.n	8003174 <HAL_GPIO_Init+0x44>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d130      	bne.n	80031d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031aa:	2201      	movs	r2, #1
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0201 	and.w	r2, r3, #1
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d017      	beq.n	8003212 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	2203      	movs	r2, #3
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d123      	bne.n	8003266 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	08da      	lsrs	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3208      	adds	r2, #8
 8003260:	69b9      	ldr	r1, [r7, #24]
 8003262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	2203      	movs	r2, #3
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0203 	and.w	r2, r3, #3
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80e0 	beq.w	8003468 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003368 <HAL_GPIO_Init+0x238>)
 80032aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003368 <HAL_GPIO_Init+0x238>)
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80032b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_GPIO_Init+0x238>)
 80032ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c6:	4a29      	ldr	r2, [pc, #164]	@ (800336c <HAL_GPIO_Init+0x23c>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a20      	ldr	r2, [pc, #128]	@ (8003370 <HAL_GPIO_Init+0x240>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d052      	beq.n	8003398 <HAL_GPIO_Init+0x268>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <HAL_GPIO_Init+0x244>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_GPIO_Init+0x22e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003378 <HAL_GPIO_Init+0x248>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02b      	beq.n	800335a <HAL_GPIO_Init+0x22a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1d      	ldr	r2, [pc, #116]	@ (800337c <HAL_GPIO_Init+0x24c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d025      	beq.n	8003356 <HAL_GPIO_Init+0x226>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1c      	ldr	r2, [pc, #112]	@ (8003380 <HAL_GPIO_Init+0x250>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01f      	beq.n	8003352 <HAL_GPIO_Init+0x222>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <HAL_GPIO_Init+0x254>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d019      	beq.n	800334e <HAL_GPIO_Init+0x21e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <HAL_GPIO_Init+0x258>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_GPIO_Init+0x21a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a19      	ldr	r2, [pc, #100]	@ (800338c <HAL_GPIO_Init+0x25c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00d      	beq.n	8003346 <HAL_GPIO_Init+0x216>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <HAL_GPIO_Init+0x260>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <HAL_GPIO_Init+0x212>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <HAL_GPIO_Init+0x264>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_GPIO_Init+0x20e>
 800333a:	2309      	movs	r3, #9
 800333c:	e02d      	b.n	800339a <HAL_GPIO_Init+0x26a>
 800333e:	230a      	movs	r3, #10
 8003340:	e02b      	b.n	800339a <HAL_GPIO_Init+0x26a>
 8003342:	2308      	movs	r3, #8
 8003344:	e029      	b.n	800339a <HAL_GPIO_Init+0x26a>
 8003346:	2307      	movs	r3, #7
 8003348:	e027      	b.n	800339a <HAL_GPIO_Init+0x26a>
 800334a:	2306      	movs	r3, #6
 800334c:	e025      	b.n	800339a <HAL_GPIO_Init+0x26a>
 800334e:	2305      	movs	r3, #5
 8003350:	e023      	b.n	800339a <HAL_GPIO_Init+0x26a>
 8003352:	2304      	movs	r3, #4
 8003354:	e021      	b.n	800339a <HAL_GPIO_Init+0x26a>
 8003356:	2303      	movs	r3, #3
 8003358:	e01f      	b.n	800339a <HAL_GPIO_Init+0x26a>
 800335a:	2302      	movs	r3, #2
 800335c:	e01d      	b.n	800339a <HAL_GPIO_Init+0x26a>
 800335e:	2301      	movs	r3, #1
 8003360:	e01b      	b.n	800339a <HAL_GPIO_Init+0x26a>
 8003362:	bf00      	nop
 8003364:	58000080 	.word	0x58000080
 8003368:	58024400 	.word	0x58024400
 800336c:	58000400 	.word	0x58000400
 8003370:	58020000 	.word	0x58020000
 8003374:	58020400 	.word	0x58020400
 8003378:	58020800 	.word	0x58020800
 800337c:	58020c00 	.word	0x58020c00
 8003380:	58021000 	.word	0x58021000
 8003384:	58021400 	.word	0x58021400
 8003388:	58021800 	.word	0x58021800
 800338c:	58021c00 	.word	0x58021c00
 8003390:	58022000 	.word	0x58022000
 8003394:	58022400 	.word	0x58022400
 8003398:	2300      	movs	r3, #0
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	f002 0203 	and.w	r2, r2, #3
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	4093      	lsls	r3, r2
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033aa:	4938      	ldr	r1, [pc, #224]	@ (800348c <HAL_GPIO_Init+0x35c>)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800340c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	3301      	adds	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	f47f ae63 	bne.w	8003144 <HAL_GPIO_Init+0x14>
  }
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	3724      	adds	r7, #36	@ 0x24
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	58000400 	.word	0x58000400

08003490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
 800349c:	4613      	mov	r3, r2
 800349e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034a0:	787b      	ldrb	r3, [r7, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034ac:	e003      	b.n	80034b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	041a      	lsls	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	619a      	str	r2, [r3, #24]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_PWREx_ConfigSupply+0x70>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d00a      	beq.n	80034ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80034d8:	4b16      	ldr	r3, [pc, #88]	@ (8003534 <HAL_PWREx_ConfigSupply+0x70>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e01f      	b.n	800352a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e01d      	b.n	800352a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034ee:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <HAL_PWREx_ConfigSupply+0x70>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f023 0207 	bic.w	r2, r3, #7
 80034f6:	490f      	ldr	r1, [pc, #60]	@ (8003534 <HAL_PWREx_ConfigSupply+0x70>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034fe:	f7ff fc53 	bl	8002da8 <HAL_GetTick>
 8003502:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003504:	e009      	b.n	800351a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003506:	f7ff fc4f 	bl	8002da8 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003514:	d901      	bls.n	800351a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e007      	b.n	800352a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_PWREx_ConfigSupply+0x70>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003526:	d1ee      	bne.n	8003506 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	58024800 	.word	0x58024800

08003538 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	@ 0x30
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f000 bc48 	b.w	8003ddc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8088 	beq.w	800366a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355a:	4b99      	ldr	r3, [pc, #612]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003564:	4b96      	ldr	r3, [pc, #600]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	2b10      	cmp	r3, #16
 800356e:	d007      	beq.n	8003580 <HAL_RCC_OscConfig+0x48>
 8003570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003572:	2b18      	cmp	r3, #24
 8003574:	d111      	bne.n	800359a <HAL_RCC_OscConfig+0x62>
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	4b8f      	ldr	r3, [pc, #572]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d06d      	beq.n	8003668 <HAL_RCC_OscConfig+0x130>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d169      	bne.n	8003668 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f000 bc21 	b.w	8003ddc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x7a>
 80035a4:	4b86      	ldr	r3, [pc, #536]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a85      	ldr	r2, [pc, #532]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e02e      	b.n	8003610 <HAL_RCC_OscConfig+0xd8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x9c>
 80035ba:	4b81      	ldr	r3, [pc, #516]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a80      	ldr	r2, [pc, #512]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b7e      	ldr	r3, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7d      	ldr	r2, [pc, #500]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e01d      	b.n	8003610 <HAL_RCC_OscConfig+0xd8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0xc0>
 80035de:	4b78      	ldr	r3, [pc, #480]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a77      	ldr	r2, [pc, #476]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b75      	ldr	r3, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a74      	ldr	r2, [pc, #464]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0xd8>
 80035f8:	4b71      	ldr	r3, [pc, #452]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a70      	ldr	r2, [pc, #448]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b6e      	ldr	r3, [pc, #440]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a6d      	ldr	r2, [pc, #436]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800360a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800360e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d013      	beq.n	8003640 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7ff fbc6 	bl	8002da8 <HAL_GetTick>
 800361c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7ff fbc2 	bl	8002da8 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	@ 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e3d4      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003632:	4b63      	ldr	r3, [pc, #396]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0xe8>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7ff fbb2 	bl	8002da8 <HAL_GetTick>
 8003644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7ff fbae 	bl	8002da8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e3c0      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800365a:	4b59      	ldr	r3, [pc, #356]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x110>
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80ca 	beq.w	800380c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003678:	4b51      	ldr	r3, [pc, #324]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003680:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003682:	4b4f      	ldr	r3, [pc, #316]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_RCC_OscConfig+0x166>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	2b18      	cmp	r3, #24
 8003692:	d156      	bne.n	8003742 <HAL_RCC_OscConfig+0x20a>
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d151      	bne.n	8003742 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800369e:	4b48      	ldr	r3, [pc, #288]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_RCC_OscConfig+0x17e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e392      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036b6:	4b42      	ldr	r3, [pc, #264]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 0219 	bic.w	r2, r3, #25
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	493f      	ldr	r1, [pc, #252]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7ff fb6e 	bl	8002da8 <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7ff fb6a 	bl	8002da8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e37c      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036e2:	4b37      	ldr	r3, [pc, #220]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	f7ff fb8b 	bl	8002e08 <HAL_GetREVID>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d817      	bhi.n	800372c <HAL_RCC_OscConfig+0x1f4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	d108      	bne.n	8003716 <HAL_RCC_OscConfig+0x1de>
 8003704:	4b2e      	ldr	r3, [pc, #184]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800370c:	4a2c      	ldr	r2, [pc, #176]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003712:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003714:	e07a      	b.n	800380c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	031b      	lsls	r3, r3, #12
 8003724:	4926      	ldr	r1, [pc, #152]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372a:	e06f      	b.n	800380c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	4921      	ldr	r1, [pc, #132]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003740:	e064      	b.n	800380c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d047      	beq.n	80037da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800374a:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0219 	bic.w	r2, r3, #25
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	491a      	ldr	r1, [pc, #104]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7ff fb24 	bl	8002da8 <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003764:	f7ff fb20 	bl	8002da8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e332      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003776:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003782:	f7ff fb41 	bl	8002e08 <HAL_GetREVID>
 8003786:	4603      	mov	r3, r0
 8003788:	f241 0203 	movw	r2, #4099	@ 0x1003
 800378c:	4293      	cmp	r3, r2
 800378e:	d819      	bhi.n	80037c4 <HAL_RCC_OscConfig+0x28c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b40      	cmp	r3, #64	@ 0x40
 8003796:	d108      	bne.n	80037aa <HAL_RCC_OscConfig+0x272>
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037a0:	4a07      	ldr	r2, [pc, #28]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80037a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a6:	6053      	str	r3, [r2, #4]
 80037a8:	e030      	b.n	800380c <HAL_RCC_OscConfig+0x2d4>
 80037aa:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	031b      	lsls	r3, r3, #12
 80037b8:	4901      	ldr	r1, [pc, #4]	@ (80037c0 <HAL_RCC_OscConfig+0x288>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
 80037be:	e025      	b.n	800380c <HAL_RCC_OscConfig+0x2d4>
 80037c0:	58024400 	.word	0x58024400
 80037c4:	4b9a      	ldr	r3, [pc, #616]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	4997      	ldr	r1, [pc, #604]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	e018      	b.n	800380c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b95      	ldr	r3, [pc, #596]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a94      	ldr	r2, [pc, #592]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7ff fadf 	bl	8002da8 <HAL_GetTick>
 80037ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7ff fadb 	bl	8002da8 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e2ed      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003800:	4b8b      	ldr	r3, [pc, #556]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a9 	beq.w	800396c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381a:	4b85      	ldr	r3, [pc, #532]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003822:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003824:	4b82      	ldr	r3, [pc, #520]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d007      	beq.n	8003840 <HAL_RCC_OscConfig+0x308>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b18      	cmp	r3, #24
 8003834:	d13a      	bne.n	80038ac <HAL_RCC_OscConfig+0x374>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d135      	bne.n	80038ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003840:	4b7b      	ldr	r3, [pc, #492]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_OscConfig+0x320>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	2b80      	cmp	r3, #128	@ 0x80
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e2c1      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003858:	f7ff fad6 	bl	8002e08 <HAL_GetREVID>
 800385c:	4603      	mov	r3, r0
 800385e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003862:	4293      	cmp	r3, r2
 8003864:	d817      	bhi.n	8003896 <HAL_RCC_OscConfig+0x35e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	2b20      	cmp	r3, #32
 800386c:	d108      	bne.n	8003880 <HAL_RCC_OscConfig+0x348>
 800386e:	4b70      	ldr	r3, [pc, #448]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003876:	4a6e      	ldr	r2, [pc, #440]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003878:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800387c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800387e:	e075      	b.n	800396c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003880:	4b6b      	ldr	r3, [pc, #428]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	069b      	lsls	r3, r3, #26
 800388e:	4968      	ldr	r1, [pc, #416]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003894:	e06a      	b.n	800396c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003896:	4b66      	ldr	r3, [pc, #408]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	061b      	lsls	r3, r3, #24
 80038a4:	4962      	ldr	r1, [pc, #392]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038aa:	e05f      	b.n	800396c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d042      	beq.n	800393a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80038ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7ff fa72 	bl	8002da8 <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038c8:	f7ff fa6e 	bl	8002da8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e280      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038da:	4b55      	ldr	r3, [pc, #340]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038e6:	f7ff fa8f 	bl	8002e08 <HAL_GetREVID>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d817      	bhi.n	8003924 <HAL_RCC_OscConfig+0x3ec>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d108      	bne.n	800390e <HAL_RCC_OscConfig+0x3d6>
 80038fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003904:	4a4a      	ldr	r2, [pc, #296]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003906:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800390a:	6053      	str	r3, [r2, #4]
 800390c:	e02e      	b.n	800396c <HAL_RCC_OscConfig+0x434>
 800390e:	4b48      	ldr	r3, [pc, #288]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	069b      	lsls	r3, r3, #26
 800391c:	4944      	ldr	r1, [pc, #272]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
 8003922:	e023      	b.n	800396c <HAL_RCC_OscConfig+0x434>
 8003924:	4b42      	ldr	r3, [pc, #264]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	493f      	ldr	r1, [pc, #252]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003934:	4313      	orrs	r3, r2
 8003936:	60cb      	str	r3, [r1, #12]
 8003938:	e018      	b.n	800396c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800393a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003940:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7ff fa2f 	bl	8002da8 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800394e:	f7ff fa2b 	bl	8002da8 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e23d      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003960:	4b33      	ldr	r3, [pc, #204]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d036      	beq.n	80039e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d019      	beq.n	80039b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003980:	4b2b      	ldr	r3, [pc, #172]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003984:	4a2a      	ldr	r2, [pc, #168]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7ff fa0c 	bl	8002da8 <HAL_GetTick>
 8003990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003994:	f7ff fa08 	bl	8002da8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e21a      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039a6:	4b22      	ldr	r3, [pc, #136]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x45c>
 80039b2:	e018      	b.n	80039e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80039b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7ff f9f2 	bl	8002da8 <HAL_GetTick>
 80039c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7ff f9ee 	bl	8002da8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e200      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039da:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80039dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d039      	beq.n	8003a66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003a00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a06:	f7ff f9cf 	bl	8002da8 <HAL_GetTick>
 8003a0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a0e:	f7ff f9cb 	bl	8002da8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e1dd      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a20:	4b03      	ldr	r3, [pc, #12]	@ (8003a30 <HAL_RCC_OscConfig+0x4f8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x4d6>
 8003a2c:	e01b      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
 8003a2e:	bf00      	nop
 8003a30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a34:	4b9b      	ldr	r3, [pc, #620]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a9a      	ldr	r2, [pc, #616]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a40:	f7ff f9b2 	bl	8002da8 <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a48:	f7ff f9ae 	bl	8002da8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1c0      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a5a:	4b92      	ldr	r3, [pc, #584]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8081 	beq.w	8003b76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a74:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca8 <HAL_RCC_OscConfig+0x770>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a8b      	ldr	r2, [pc, #556]	@ (8003ca8 <HAL_RCC_OscConfig+0x770>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a80:	f7ff f992 	bl	8002da8 <HAL_GetTick>
 8003a84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7ff f98e 	bl	8002da8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1a0      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a9a:	4b83      	ldr	r3, [pc, #524]	@ (8003ca8 <HAL_RCC_OscConfig+0x770>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d106      	bne.n	8003abc <HAL_RCC_OscConfig+0x584>
 8003aae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aba:	e02d      	b.n	8003b18 <HAL_RCC_OscConfig+0x5e0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x5a6>
 8003ac4:	4b77      	ldr	r3, [pc, #476]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	4a76      	ldr	r2, [pc, #472]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad0:	4b74      	ldr	r3, [pc, #464]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	4a73      	ldr	r2, [pc, #460]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003ad6:	f023 0304 	bic.w	r3, r3, #4
 8003ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8003adc:	e01c      	b.n	8003b18 <HAL_RCC_OscConfig+0x5e0>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b05      	cmp	r3, #5
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c8>
 8003ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	f043 0304 	orr.w	r3, r3, #4
 8003af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	4a6b      	ldr	r2, [pc, #428]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003afe:	e00b      	b.n	8003b18 <HAL_RCC_OscConfig+0x5e0>
 8003b00:	4b68      	ldr	r3, [pc, #416]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	4a67      	ldr	r2, [pc, #412]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0c:	4b65      	ldr	r3, [pc, #404]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	4a64      	ldr	r2, [pc, #400]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b12:	f023 0304 	bic.w	r3, r3, #4
 8003b16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d015      	beq.n	8003b4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7ff f942 	bl	8002da8 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7ff f93e 	bl	8002da8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e14e      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b3e:	4b59      	ldr	r3, [pc, #356]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0ee      	beq.n	8003b28 <HAL_RCC_OscConfig+0x5f0>
 8003b4a:	e014      	b.n	8003b76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7ff f92c 	bl	8002da8 <HAL_GetTick>
 8003b50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7ff f928 	bl	8002da8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e138      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1ee      	bne.n	8003b54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 812d 	beq.w	8003dda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b80:	4b48      	ldr	r3, [pc, #288]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b88:	2b18      	cmp	r3, #24
 8003b8a:	f000 80bd 	beq.w	8003d08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	f040 809e 	bne.w	8003cd4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b98:	4b42      	ldr	r3, [pc, #264]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a41      	ldr	r2, [pc, #260]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003b9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7ff f900 	bl	8002da8 <HAL_GetTick>
 8003ba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7ff f8fc 	bl	8002da8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e10e      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bca:	4b36      	ldr	r3, [pc, #216]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bce:	4b37      	ldr	r3, [pc, #220]	@ (8003cac <HAL_RCC_OscConfig+0x774>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bda:	0112      	lsls	r2, r2, #4
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	4931      	ldr	r1, [pc, #196]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	3b01      	subs	r3, #1
 8003bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	025b      	lsls	r3, r3, #9
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c14:	4923      	ldr	r1, [pc, #140]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c1a:	4b22      	ldr	r3, [pc, #136]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c26:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c2a:	4b21      	ldr	r3, [pc, #132]	@ (8003cb0 <HAL_RCC_OscConfig+0x778>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c32:	00d2      	lsls	r2, r2, #3
 8003c34:	491b      	ldr	r1, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	f023 020c 	bic.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4917      	ldr	r1, [pc, #92]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c4c:	4b15      	ldr	r3, [pc, #84]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	f023 0202 	bic.w	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c58:	4912      	ldr	r1, [pc, #72]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	4a10      	ldr	r2, [pc, #64]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c82:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	4a07      	ldr	r2, [pc, #28]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <HAL_RCC_OscConfig+0x76c>)
 8003c94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9a:	f7ff f885 	bl	8002da8 <HAL_GetTick>
 8003c9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ca0:	e011      	b.n	8003cc6 <HAL_RCC_OscConfig+0x78e>
 8003ca2:	bf00      	nop
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	58024800 	.word	0x58024800
 8003cac:	fffffc0c 	.word	0xfffffc0c
 8003cb0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7ff f878 	bl	8002da8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e08a      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x77c>
 8003cd2:	e082      	b.n	8003dda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd4:	4b43      	ldr	r3, [pc, #268]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a42      	ldr	r2, [pc, #264]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7ff f862 	bl	8002da8 <HAL_GetTick>
 8003ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7ff f85e 	bl	8002da8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e070      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x7b0>
 8003d06:	e068      	b.n	8003dda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d08:	4b36      	ldr	r3, [pc, #216]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d0e:	4b35      	ldr	r3, [pc, #212]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d031      	beq.n	8003d80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f003 0203 	and.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d12a      	bne.n	8003d80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d122      	bne.n	8003d80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d11a      	bne.n	8003d80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	0a5b      	lsrs	r3, r3, #9
 8003d4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d111      	bne.n	8003d80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d108      	bne.n	8003d80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e02b      	b.n	8003ddc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d84:	4b17      	ldr	r3, [pc, #92]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d88:	08db      	lsrs	r3, r3, #3
 8003d8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d01f      	beq.n	8003dda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d9a:	4b12      	ldr	r3, [pc, #72]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	4a11      	ldr	r2, [pc, #68]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003da6:	f7fe ffff 	bl	8002da8 <HAL_GetTick>
 8003daa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dac:	bf00      	nop
 8003dae:	f7fe fffb 	bl	8002da8 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d0f9      	beq.n	8003dae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dba:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003de8 <HAL_RCC_OscConfig+0x8b0>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003dc6:	00d2      	lsls	r2, r2, #3
 8003dc8:	4906      	ldr	r1, [pc, #24]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dce:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	4a04      	ldr	r2, [pc, #16]	@ (8003de4 <HAL_RCC_OscConfig+0x8ac>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3730      	adds	r7, #48	@ 0x30
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	58024400 	.word	0x58024400
 8003de8:	ffff0007 	.word	0xffff0007

08003dec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e19c      	b.n	800413a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e00:	4b8a      	ldr	r3, [pc, #552]	@ (800402c <HAL_RCC_ClockConfig+0x240>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d910      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b87      	ldr	r3, [pc, #540]	@ (800402c <HAL_RCC_ClockConfig+0x240>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 020f 	bic.w	r2, r3, #15
 8003e16:	4985      	ldr	r1, [pc, #532]	@ (800402c <HAL_RCC_ClockConfig+0x240>)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b83      	ldr	r3, [pc, #524]	@ (800402c <HAL_RCC_ClockConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e184      	b.n	800413a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	4b7b      	ldr	r3, [pc, #492]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d908      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e4c:	4b78      	ldr	r3, [pc, #480]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	4975      	ldr	r1, [pc, #468]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d010      	beq.n	8003e8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	4b70      	ldr	r3, [pc, #448]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d908      	bls.n	8003e8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	496a      	ldr	r1, [pc, #424]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d010      	beq.n	8003eba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	4b64      	ldr	r3, [pc, #400]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d908      	bls.n	8003eba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ea8:	4b61      	ldr	r3, [pc, #388]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	495e      	ldr	r1, [pc, #376]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	4b59      	ldr	r3, [pc, #356]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d908      	bls.n	8003ee8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ed6:	4b56      	ldr	r3, [pc, #344]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4953      	ldr	r1, [pc, #332]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d010      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d908      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4b4a      	ldr	r3, [pc, #296]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f023 020f 	bic.w	r2, r3, #15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4947      	ldr	r1, [pc, #284]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d055      	beq.n	8003fce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f22:	4b43      	ldr	r3, [pc, #268]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	4940      	ldr	r1, [pc, #256]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d121      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0f6      	b.n	800413a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f54:	4b36      	ldr	r3, [pc, #216]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d115      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0ea      	b.n	800413a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f6c:	4b30      	ldr	r3, [pc, #192]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0de      	b.n	800413a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0d6      	b.n	800413a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f8c:	4b28      	ldr	r3, [pc, #160]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f023 0207 	bic.w	r2, r3, #7
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4925      	ldr	r1, [pc, #148]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9e:	f7fe ff03 	bl	8002da8 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa6:	f7fe feff 	bl	8002da8 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0be      	b.n	800413a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d1eb      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d010      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	4b14      	ldr	r3, [pc, #80]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d208      	bcs.n	8003ffc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fea:	4b11      	ldr	r3, [pc, #68]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f023 020f 	bic.w	r2, r3, #15
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	490e      	ldr	r1, [pc, #56]	@ (8004030 <HAL_RCC_ClockConfig+0x244>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_RCC_ClockConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d214      	bcs.n	8004034 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b08      	ldr	r3, [pc, #32]	@ (800402c <HAL_RCC_ClockConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 020f 	bic.w	r2, r3, #15
 8004012:	4906      	ldr	r1, [pc, #24]	@ (800402c <HAL_RCC_ClockConfig+0x240>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b04      	ldr	r3, [pc, #16]	@ (800402c <HAL_RCC_ClockConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e086      	b.n	800413a <HAL_RCC_ClockConfig+0x34e>
 800402c:	52002000 	.word	0x52002000
 8004030:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d010      	beq.n	8004062 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	4b3f      	ldr	r3, [pc, #252]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800404c:	429a      	cmp	r2, r3
 800404e:	d208      	bcs.n	8004062 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004050:	4b3c      	ldr	r3, [pc, #240]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4939      	ldr	r1, [pc, #228]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 800405e:	4313      	orrs	r3, r2
 8004060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d010      	beq.n	8004090 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	4b34      	ldr	r3, [pc, #208]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800407a:	429a      	cmp	r2, r3
 800407c:	d208      	bcs.n	8004090 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800407e:	4b31      	ldr	r3, [pc, #196]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	492e      	ldr	r1, [pc, #184]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 800408c:	4313      	orrs	r3, r2
 800408e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699a      	ldr	r2, [r3, #24]
 80040a0:	4b28      	ldr	r3, [pc, #160]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d208      	bcs.n	80040be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040ac:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	4922      	ldr	r1, [pc, #136]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d010      	beq.n	80040ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d208      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040da:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	4917      	ldr	r1, [pc, #92]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040ec:	f000 f834 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	4912      	ldr	r1, [pc, #72]	@ (8004148 <HAL_RCC_ClockConfig+0x35c>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800410a:	4b0e      	ldr	r3, [pc, #56]	@ (8004144 <HAL_RCC_ClockConfig+0x358>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	4a0d      	ldr	r2, [pc, #52]	@ (8004148 <HAL_RCC_ClockConfig+0x35c>)
 8004114:	5cd3      	ldrb	r3, [r2, r3]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <HAL_RCC_ClockConfig+0x360>)
 8004122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004124:	4a0a      	ldr	r2, [pc, #40]	@ (8004150 <HAL_RCC_ClockConfig+0x364>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <HAL_RCC_ClockConfig+0x368>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fdf0 	bl	8002d14 <HAL_InitTick>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400
 8004148:	0800e5c0 	.word	0x0800e5c0
 800414c:	24000008 	.word	0x24000008
 8004150:	24000004 	.word	0x24000004
 8004154:	2400000c 	.word	0x2400000c

08004158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	b089      	sub	sp, #36	@ 0x24
 800415c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415e:	4bb3      	ldr	r3, [pc, #716]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004166:	2b18      	cmp	r3, #24
 8004168:	f200 8155 	bhi.w	8004416 <HAL_RCC_GetSysClockFreq+0x2be>
 800416c:	a201      	add	r2, pc, #4	@ (adr r2, 8004174 <HAL_RCC_GetSysClockFreq+0x1c>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	080041d9 	.word	0x080041d9
 8004178:	08004417 	.word	0x08004417
 800417c:	08004417 	.word	0x08004417
 8004180:	08004417 	.word	0x08004417
 8004184:	08004417 	.word	0x08004417
 8004188:	08004417 	.word	0x08004417
 800418c:	08004417 	.word	0x08004417
 8004190:	08004417 	.word	0x08004417
 8004194:	080041ff 	.word	0x080041ff
 8004198:	08004417 	.word	0x08004417
 800419c:	08004417 	.word	0x08004417
 80041a0:	08004417 	.word	0x08004417
 80041a4:	08004417 	.word	0x08004417
 80041a8:	08004417 	.word	0x08004417
 80041ac:	08004417 	.word	0x08004417
 80041b0:	08004417 	.word	0x08004417
 80041b4:	08004205 	.word	0x08004205
 80041b8:	08004417 	.word	0x08004417
 80041bc:	08004417 	.word	0x08004417
 80041c0:	08004417 	.word	0x08004417
 80041c4:	08004417 	.word	0x08004417
 80041c8:	08004417 	.word	0x08004417
 80041cc:	08004417 	.word	0x08004417
 80041d0:	08004417 	.word	0x08004417
 80041d4:	0800420b 	.word	0x0800420b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041d8:	4b94      	ldr	r3, [pc, #592]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041e4:	4b91      	ldr	r3, [pc, #580]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	08db      	lsrs	r3, r3, #3
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	4a90      	ldr	r2, [pc, #576]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
 80041f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80041f6:	e111      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041fa:	61bb      	str	r3, [r7, #24]
      break;
 80041fc:	e10e      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80041fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004200:	61bb      	str	r3, [r7, #24]
      break;
 8004202:	e10b      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004204:	4b8c      	ldr	r3, [pc, #560]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004206:	61bb      	str	r3, [r7, #24]
      break;
 8004208:	e108      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800420a:	4b88      	ldr	r3, [pc, #544]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004214:	4b85      	ldr	r3, [pc, #532]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800421e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004220:	4b82      	ldr	r3, [pc, #520]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800422a:	4b80      	ldr	r3, [pc, #512]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422e:	08db      	lsrs	r3, r3, #3
 8004230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004242:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80e1 	beq.w	8004410 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b02      	cmp	r3, #2
 8004252:	f000 8083 	beq.w	800435c <HAL_RCC_GetSysClockFreq+0x204>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b02      	cmp	r3, #2
 800425a:	f200 80a1 	bhi.w	80043a0 <HAL_RCC_GetSysClockFreq+0x248>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x114>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d056      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x1c0>
 800426a:	e099      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800426c:	4b6f      	ldr	r3, [pc, #444]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02d      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004278:	4b6c      	ldr	r3, [pc, #432]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	08db      	lsrs	r3, r3, #3
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	4a6b      	ldr	r2, [pc, #428]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
 8004288:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a2:	4b62      	ldr	r3, [pc, #392]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800443c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042d2:	e087      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004440 <HAL_RCC_GetSysClockFreq+0x2e8>
 80042e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e6:	4b51      	ldr	r3, [pc, #324]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800443c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800430a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004316:	e065      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004444 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432a:	4b40      	ldr	r3, [pc, #256]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433a:	ed97 6a02 	vldr	s12, [r7, #8]
 800433e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800443c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800434e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800435a:	e043      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004448 <HAL_RCC_GetSysClockFreq+0x2f0>
 800436a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436e:	4b2f      	ldr	r3, [pc, #188]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004382:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800443c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800439e:	e021      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004444 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b2:	4b1e      	ldr	r3, [pc, #120]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800443c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e8:	0a5b      	lsrs	r3, r3, #9
 80043ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ee:	3301      	adds	r3, #1
 80043f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004408:	ee17 3a90 	vmov	r3, s15
 800440c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800440e:	e005      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
      break;
 8004414:	e002      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004416:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004418:	61bb      	str	r3, [r7, #24]
      break;
 800441a:	bf00      	nop
  }

  return sysclockfreq;
 800441c:	69bb      	ldr	r3, [r7, #24]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	@ 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	58024400 	.word	0x58024400
 8004430:	03d09000 	.word	0x03d09000
 8004434:	003d0900 	.word	0x003d0900
 8004438:	017d7840 	.word	0x017d7840
 800443c:	46000000 	.word	0x46000000
 8004440:	4c742400 	.word	0x4c742400
 8004444:	4a742400 	.word	0x4a742400
 8004448:	4bbebc20 	.word	0x4bbebc20

0800444c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004452:	f7ff fe81 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8004456:	4602      	mov	r2, r0
 8004458:	4b10      	ldr	r3, [pc, #64]	@ (800449c <HAL_RCC_GetHCLKFreq+0x50>)
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	490f      	ldr	r1, [pc, #60]	@ (80044a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004464:	5ccb      	ldrb	r3, [r1, r3]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004470:	4b0a      	ldr	r3, [pc, #40]	@ (800449c <HAL_RCC_GetHCLKFreq+0x50>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800447a:	5cd3      	ldrb	r3, [r2, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	4a07      	ldr	r2, [pc, #28]	@ (80044a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004488:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800448a:	4a07      	ldr	r2, [pc, #28]	@ (80044a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004490:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004492:	681b      	ldr	r3, [r3, #0]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	58024400 	.word	0x58024400
 80044a0:	0800e5c0 	.word	0x0800e5c0
 80044a4:	24000008 	.word	0x24000008
 80044a8:	24000004 	.word	0x24000004

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044b0:	f7ff ffcc 	bl	800444c <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4904      	ldr	r1, [pc, #16]	@ (80044d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	58024400 	.word	0x58024400
 80044d4:	0800e5c0 	.word	0x0800e5c0

080044d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80044dc:	f7ff ffb6 	bl	800444c <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4904      	ldr	r1, [pc, #16]	@ (8004500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	58024400 	.word	0x58024400
 8004500:	0800e5c0 	.word	0x0800e5c0

08004504 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004508:	b0ca      	sub	sp, #296	@ 0x128
 800450a:	af00      	add	r7, sp, #0
 800450c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004510:	2300      	movs	r3, #0
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004516:	2300      	movs	r3, #0
 8004518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004528:	2500      	movs	r5, #0
 800452a:	ea54 0305 	orrs.w	r3, r4, r5
 800452e:	d049      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004536:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800453a:	d02f      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800453c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004540:	d828      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004542:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004546:	d01a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004548:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800454c:	d822      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004556:	d007      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004558:	e01c      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455a:	4bb8      	ldr	r3, [pc, #736]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	4ab7      	ldr	r2, [pc, #732]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004566:	e01a      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	3308      	adds	r3, #8
 800456e:	2102      	movs	r1, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f001 fc8f 	bl	8005e94 <RCCEx_PLL2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800457c:	e00f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	3328      	adds	r3, #40	@ 0x28
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f001 fd36 	bl	8005ff8 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004592:	e004      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800459c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045a6:	4ba5      	ldr	r3, [pc, #660]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045b4:	4aa1      	ldr	r2, [pc, #644]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b6:	430b      	orrs	r3, r1
 80045b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80045ba:	e003      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80045d0:	f04f 0900 	mov.w	r9, #0
 80045d4:	ea58 0309 	orrs.w	r3, r8, r9
 80045d8:	d047      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d82a      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045e4:	a201      	add	r2, pc, #4	@ (adr r2, 80045ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004601 	.word	0x08004601
 80045f0:	0800460f 	.word	0x0800460f
 80045f4:	08004625 	.word	0x08004625
 80045f8:	08004643 	.word	0x08004643
 80045fc:	08004643 	.word	0x08004643
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004600:	4b8e      	ldr	r3, [pc, #568]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	4a8d      	ldr	r2, [pc, #564]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800460c:	e01a      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	3308      	adds	r3, #8
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fc3c 	bl	8005e94 <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004622:	e00f      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004628:	3328      	adds	r3, #40	@ 0x28
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f001 fce3 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004638:	e004      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800464c:	4b7b      	ldr	r3, [pc, #492]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800464e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004650:	f023 0107 	bic.w	r1, r3, #7
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	4a78      	ldr	r2, [pc, #480]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004660:	e003      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004676:	f04f 0b00 	mov.w	fp, #0
 800467a:	ea5a 030b 	orrs.w	r3, sl, fp
 800467e:	d04c      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800468a:	d030      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800468c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004690:	d829      	bhi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004692:	2bc0      	cmp	r3, #192	@ 0xc0
 8004694:	d02d      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004696:	2bc0      	cmp	r3, #192	@ 0xc0
 8004698:	d825      	bhi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800469a:	2b80      	cmp	r3, #128	@ 0x80
 800469c:	d018      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800469e:	2b80      	cmp	r3, #128	@ 0x80
 80046a0:	d821      	bhi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80046a6:	2b40      	cmp	r3, #64	@ 0x40
 80046a8:	d007      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80046aa:	e01c      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ac:	4b63      	ldr	r3, [pc, #396]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b0:	4a62      	ldr	r2, [pc, #392]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046b8:	e01c      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	3308      	adds	r3, #8
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 fbe6 	bl	8005e94 <RCCEx_PLL2_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046ce:	e011      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d4:	3328      	adds	r3, #40	@ 0x28
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fc8d 	bl	8005ff8 <RCCEx_PLL3_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046e4:	e006      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80046ee:	bf00      	nop
 80046f0:	e000      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80046f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046fc:	4b4f      	ldr	r3, [pc, #316]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004700:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	4a4c      	ldr	r2, [pc, #304]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800470c:	430b      	orrs	r3, r1
 800470e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004710:	e003      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004726:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004730:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d053      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004742:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004746:	d035      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004748:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800474c:	d82e      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800474e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004752:	d031      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004754:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004758:	d828      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800475e:	d01a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004764:	d822      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800476a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800476e:	d007      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004770:	e01c      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004772:	4b32      	ldr	r3, [pc, #200]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	4a31      	ldr	r2, [pc, #196]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800477c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800477e:	e01c      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004784:	3308      	adds	r3, #8
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fb83 	bl	8005e94 <RCCEx_PLL2_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004794:	e011      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	3328      	adds	r3, #40	@ 0x28
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 fc2a 	bl	8005ff8 <RCCEx_PLL3_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047aa:	e006      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047b2:	e002      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047c2:	4b1e      	ldr	r3, [pc, #120]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047d2:	4a1a      	ldr	r2, [pc, #104]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d8:	e003      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80047ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80047f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d056      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800480a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800480e:	d038      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004814:	d831      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004816:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800481a:	d034      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800481c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004820:	d82b      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004826:	d01d      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800482c:	d825      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d006      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004838:	e01f      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	4ba2      	ldr	r3, [pc, #648]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	4aa1      	ldr	r2, [pc, #644]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800484a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800484c:	e01c      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	3308      	adds	r3, #8
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f001 fb1c 	bl	8005e94 <RCCEx_PLL2_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004862:	e011      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	3328      	adds	r3, #40	@ 0x28
 800486a:	2100      	movs	r1, #0
 800486c:	4618      	mov	r0, r3
 800486e:	f001 fbc3 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004878:	e006      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004880:	e002      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004882:	bf00      	nop
 8004884:	e000      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004890:	4b8e      	ldr	r3, [pc, #568]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048a0:	4a8a      	ldr	r2, [pc, #552]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a6:	e003      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80048bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d03a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	2b30      	cmp	r3, #48	@ 0x30
 80048d8:	d01f      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80048da:	2b30      	cmp	r3, #48	@ 0x30
 80048dc:	d819      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d00c      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d815      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d111      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ee:	4b77      	ldr	r3, [pc, #476]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	4a76      	ldr	r2, [pc, #472]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80048fa:	e011      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004900:	3308      	adds	r3, #8
 8004902:	2102      	movs	r1, #2
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fac5 	bl	8005e94 <RCCEx_PLL2_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004910:	e006      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004918:	e002      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800491e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004928:	4b68      	ldr	r3, [pc, #416]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800492a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004936:	4a65      	ldr	r2, [pc, #404]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004938:	430b      	orrs	r3, r1
 800493a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800493c:	e003      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004952:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004956:	2300      	movs	r3, #0
 8004958:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800495c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d051      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004970:	d035      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004972:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004976:	d82e      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004978:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800497c:	d031      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800497e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004982:	d828      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004988:	d01a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800498a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498e:	d822      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004998:	d007      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800499a:	e01c      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499c:	4b4b      	ldr	r3, [pc, #300]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	4a4a      	ldr	r2, [pc, #296]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049a8:	e01c      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ae:	3308      	adds	r3, #8
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 fa6e 	bl	8005e94 <RCCEx_PLL2_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049be:	e011      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	3328      	adds	r3, #40	@ 0x28
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fb15 	bl	8005ff8 <RCCEx_PLL3_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049ec:	4b37      	ldr	r3, [pc, #220]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fa:	4a34      	ldr	r2, [pc, #208]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a00:	e003      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004a16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004a24:	460b      	mov	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d056      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a34:	d033      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a3a:	d82c      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a40:	d02f      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a46:	d826      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a4c:	d02b      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004a4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a52:	d820      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a58:	d012      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004a5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a5e:	d81a      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d022      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a68:	d115      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6e:	3308      	adds	r3, #8
 8004a70:	2101      	movs	r1, #1
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 fa0e 	bl	8005e94 <RCCEx_PLL2_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a7e:	e015      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a84:	3328      	adds	r3, #40	@ 0x28
 8004a86:	2101      	movs	r1, #1
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fab5 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a94:	e00a      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e004      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10d      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ab4:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ac2:	4a02      	ldr	r2, [pc, #8]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ac8:	e006      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004aca:	bf00      	nop
 8004acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004aee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d055      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b04:	d033      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b0a:	d82c      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b10:	d02f      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b16:	d826      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b1c:	d02b      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b22:	d820      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b28:	d012      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b2e:	d81a      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d022      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b38:	d115      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	3308      	adds	r3, #8
 8004b40:	2101      	movs	r1, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f9a6 	bl	8005e94 <RCCEx_PLL2_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b4e:	e015      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b54:	3328      	adds	r3, #40	@ 0x28
 8004b56:	2101      	movs	r1, #1
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 fa4d 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b64:	e00a      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b6c:	e006      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b6e:	bf00      	nop
 8004b70:	e004      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b84:	4ba3      	ldr	r3, [pc, #652]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b88:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b94:	4a9f      	ldr	r2, [pc, #636]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b96:	430b      	orrs	r3, r1
 8004b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d037      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bce:	d00e      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bd4:	d816      	bhi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d018      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bde:	d111      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be0:	4b8c      	ldr	r3, [pc, #560]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	4a8b      	ldr	r2, [pc, #556]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004bec:	e00f      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 f94c 	bl	8005e94 <RCCEx_PLL2_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c02:	e004      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c16:	4b7f      	ldr	r3, [pc, #508]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c24:	4a7b      	ldr	r2, [pc, #492]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c26:	430b      	orrs	r3, r1
 8004c28:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c2a:	e003      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d039      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d81c      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004ca1 	.word	0x08004ca1
 8004c68:	08004c75 	.word	0x08004c75
 8004c6c:	08004c83 	.word	0x08004c83
 8004c70:	08004ca1 	.word	0x08004ca1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c74:	4b67      	ldr	r3, [pc, #412]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	4a66      	ldr	r2, [pc, #408]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c80:	e00f      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	3308      	adds	r3, #8
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 f902 	bl	8005e94 <RCCEx_PLL2_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c96:	e004      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004caa:	4b5a      	ldr	r3, [pc, #360]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cae:	f023 0103 	bic.w	r1, r3, #3
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb8:	4a56      	ldr	r2, [pc, #344]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cbe:	e003      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f000 809f 	beq.w	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cea:	4b4b      	ldr	r3, [pc, #300]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a4a      	ldr	r2, [pc, #296]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cf6:	f7fe f857 	bl	8002da8 <HAL_GetTick>
 8004cfa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d00:	f7fe f852 	bl	8002da8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b64      	cmp	r3, #100	@ 0x64
 8004d0e:	d903      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d16:	e005      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d18:	4b3f      	ldr	r3, [pc, #252]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ed      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d179      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d2c:	4b39      	ldr	r3, [pc, #228]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d38:	4053      	eors	r3, r2
 8004d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d015      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d42:	4b34      	ldr	r3, [pc, #208]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d4e:	4b31      	ldr	r3, [pc, #196]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d52:	4a30      	ldr	r2, [pc, #192]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d66:	4a2b      	ldr	r2, [pc, #172]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d7a:	d118      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fe f814 	bl	8002da8 <HAL_GetTick>
 8004d80:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d84:	e00d      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fe f80f 	bl	8002da8 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004d90:	1ad2      	subs	r2, r2, r3
 8004d92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d903      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004da0:	e005      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004da2:	4b1c      	ldr	r3, [pc, #112]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0eb      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d129      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc6:	d10e      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004dc8:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dd8:	091a      	lsrs	r2, r3, #4
 8004dda:	4b10      	ldr	r3, [pc, #64]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	4a0d      	ldr	r2, [pc, #52]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6113      	str	r3, [r2, #16]
 8004de4:	e005      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	4a0a      	ldr	r2, [pc, #40]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004df0:	6113      	str	r3, [r2, #16]
 8004df2:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e02:	4a04      	ldr	r2, [pc, #16]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e08:	e00e      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004e12:	e009      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004e14:	58024400 	.word	0x58024400
 8004e18:	58024800 	.word	0x58024800
 8004e1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f002 0301 	and.w	r3, r2, #1
 8004e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f000 8089 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e50:	2b28      	cmp	r3, #40	@ 0x28
 8004e52:	d86b      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004e54:	a201      	add	r2, pc, #4	@ (adr r2, 8004e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004f35 	.word	0x08004f35
 8004e60:	08004f2d 	.word	0x08004f2d
 8004e64:	08004f2d 	.word	0x08004f2d
 8004e68:	08004f2d 	.word	0x08004f2d
 8004e6c:	08004f2d 	.word	0x08004f2d
 8004e70:	08004f2d 	.word	0x08004f2d
 8004e74:	08004f2d 	.word	0x08004f2d
 8004e78:	08004f2d 	.word	0x08004f2d
 8004e7c:	08004f01 	.word	0x08004f01
 8004e80:	08004f2d 	.word	0x08004f2d
 8004e84:	08004f2d 	.word	0x08004f2d
 8004e88:	08004f2d 	.word	0x08004f2d
 8004e8c:	08004f2d 	.word	0x08004f2d
 8004e90:	08004f2d 	.word	0x08004f2d
 8004e94:	08004f2d 	.word	0x08004f2d
 8004e98:	08004f2d 	.word	0x08004f2d
 8004e9c:	08004f17 	.word	0x08004f17
 8004ea0:	08004f2d 	.word	0x08004f2d
 8004ea4:	08004f2d 	.word	0x08004f2d
 8004ea8:	08004f2d 	.word	0x08004f2d
 8004eac:	08004f2d 	.word	0x08004f2d
 8004eb0:	08004f2d 	.word	0x08004f2d
 8004eb4:	08004f2d 	.word	0x08004f2d
 8004eb8:	08004f2d 	.word	0x08004f2d
 8004ebc:	08004f35 	.word	0x08004f35
 8004ec0:	08004f2d 	.word	0x08004f2d
 8004ec4:	08004f2d 	.word	0x08004f2d
 8004ec8:	08004f2d 	.word	0x08004f2d
 8004ecc:	08004f2d 	.word	0x08004f2d
 8004ed0:	08004f2d 	.word	0x08004f2d
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004f35 	.word	0x08004f35
 8004ee0:	08004f2d 	.word	0x08004f2d
 8004ee4:	08004f2d 	.word	0x08004f2d
 8004ee8:	08004f2d 	.word	0x08004f2d
 8004eec:	08004f2d 	.word	0x08004f2d
 8004ef0:	08004f2d 	.word	0x08004f2d
 8004ef4:	08004f2d 	.word	0x08004f2d
 8004ef8:	08004f2d 	.word	0x08004f2d
 8004efc:	08004f35 	.word	0x08004f35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f04:	3308      	adds	r3, #8
 8004f06:	2101      	movs	r1, #1
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 ffc3 	bl	8005e94 <RCCEx_PLL2_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f14:	e00f      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1a:	3328      	adds	r3, #40	@ 0x28
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 f86a 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f2a:	e004      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f32:	e000      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f3e:	4bbf      	ldr	r3, [pc, #764]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f42:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f4c:	4abb      	ldr	r2, [pc, #748]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f52:	e003      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f002 0302 	and.w	r3, r2, #2
 8004f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004f72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004f76:	460b      	mov	r3, r1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	d041      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d824      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004f86:	a201      	add	r2, pc, #4	@ (adr r2, 8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	08004fa5 	.word	0x08004fa5
 8004f94:	08004fbb 	.word	0x08004fbb
 8004f98:	08004fd9 	.word	0x08004fd9
 8004f9c:	08004fd9 	.word	0x08004fd9
 8004fa0:	08004fd9 	.word	0x08004fd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa8:	3308      	adds	r3, #8
 8004faa:	2101      	movs	r1, #1
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 ff71 	bl	8005e94 <RCCEx_PLL2_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e00f      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbe:	3328      	adds	r3, #40	@ 0x28
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 f818 	bl	8005ff8 <RCCEx_PLL3_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fce:	e004      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fd6:	e000      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fe2:	4b96      	ldr	r3, [pc, #600]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe6:	f023 0107 	bic.w	r1, r3, #7
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ff0:	4a92      	ldr	r2, [pc, #584]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ff6:	e003      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f002 0304 	and.w	r3, r2, #4
 800500c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005010:	2300      	movs	r3, #0
 8005012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005016:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800501a:	460b      	mov	r3, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	d044      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005028:	2b05      	cmp	r3, #5
 800502a:	d825      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800502c:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005081 	.word	0x08005081
 8005038:	0800504d 	.word	0x0800504d
 800503c:	08005063 	.word	0x08005063
 8005040:	08005081 	.word	0x08005081
 8005044:	08005081 	.word	0x08005081
 8005048:	08005081 	.word	0x08005081
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800504c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005050:	3308      	adds	r3, #8
 8005052:	2101      	movs	r1, #1
 8005054:	4618      	mov	r0, r3
 8005056:	f000 ff1d 	bl	8005e94 <RCCEx_PLL2_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005060:	e00f      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005066:	3328      	adds	r3, #40	@ 0x28
 8005068:	2101      	movs	r1, #1
 800506a:	4618      	mov	r0, r3
 800506c:	f000 ffc4 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800508a:	4b6c      	ldr	r3, [pc, #432]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	f023 0107 	bic.w	r1, r3, #7
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800509a:	4a68      	ldr	r2, [pc, #416]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800509c:	430b      	orrs	r3, r1
 800509e:	6593      	str	r3, [r2, #88]	@ 0x58
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f002 0320 	and.w	r3, r2, #32
 80050b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050ba:	2300      	movs	r3, #0
 80050bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d055      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050d6:	d033      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80050d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050dc:	d82c      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e2:	d02f      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e8:	d826      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050ee:	d02b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80050f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050f4:	d820      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050fa:	d012      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80050fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005100:	d81a      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d022      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800510a:	d115      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005110:	3308      	adds	r3, #8
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 febd 	bl	8005e94 <RCCEx_PLL2_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005120:	e015      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005126:	3328      	adds	r3, #40	@ 0x28
 8005128:	2102      	movs	r1, #2
 800512a:	4618      	mov	r0, r3
 800512c:	f000 ff64 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005136:	e00a      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800513e:	e006      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005140:	bf00      	nop
 8005142:	e004      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005144:	bf00      	nop
 8005146:	e002      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005156:	4b39      	ldr	r3, [pc, #228]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005166:	4a35      	ldr	r2, [pc, #212]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005168:	430b      	orrs	r3, r1
 800516a:	6553      	str	r3, [r2, #84]	@ 0x54
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800518c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005190:	460b      	mov	r3, r1
 8005192:	4313      	orrs	r3, r2
 8005194:	d058      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800519e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80051a2:	d033      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80051a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80051a8:	d82c      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ae:	d02f      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80051b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b4:	d826      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051ba:	d02b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80051bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051c0:	d820      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c6:	d012      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80051c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051cc:	d81a      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d022      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d6:	d115      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051dc:	3308      	adds	r3, #8
 80051de:	2100      	movs	r1, #0
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fe57 	bl	8005e94 <RCCEx_PLL2_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80051ec:	e015      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f2:	3328      	adds	r3, #40	@ 0x28
 80051f4:	2102      	movs	r1, #2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fefe 	bl	8005ff8 <RCCEx_PLL3_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005202:	e00a      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800520a:	e006      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800520c:	bf00      	nop
 800520e:	e004      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005210:	bf00      	nop
 8005212:	e002      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10e      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005222:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005226:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005232:	4a02      	ldr	r2, [pc, #8]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005234:	430b      	orrs	r3, r1
 8005236:	6593      	str	r3, [r2, #88]	@ 0x58
 8005238:	e006      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005254:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800525e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005262:	460b      	mov	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	d055      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005270:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005274:	d033      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005276:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800527a:	d82c      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800527c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005280:	d02f      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005286:	d826      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005288:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800528c:	d02b      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800528e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005292:	d820      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005298:	d012      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800529a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800529e:	d81a      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d022      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a8:	d115      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ae:	3308      	adds	r3, #8
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fdee 	bl	8005e94 <RCCEx_PLL2_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052be:	e015      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c4:	3328      	adds	r3, #40	@ 0x28
 80052c6:	2102      	movs	r1, #2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fe95 	bl	8005ff8 <RCCEx_PLL3_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052d4:	e00a      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052dc:	e006      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052de:	bf00      	nop
 80052e0:	e004      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052e2:	bf00      	nop
 80052e4:	e002      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052e6:	bf00      	nop
 80052e8:	e000      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052f4:	4ba1      	ldr	r3, [pc, #644]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005300:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005304:	4a9d      	ldr	r2, [pc, #628]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005306:	430b      	orrs	r3, r1
 8005308:	6593      	str	r3, [r2, #88]	@ 0x58
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f002 0308 	and.w	r3, r2, #8
 8005320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800532a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	d01e      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005340:	d10c      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005346:	3328      	adds	r3, #40	@ 0x28
 8005348:	2102      	movs	r1, #2
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fe54 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800535c:	4b87      	ldr	r3, [pc, #540]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800535e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005360:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800536c:	4a83      	ldr	r2, [pc, #524]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800536e:	430b      	orrs	r3, r1
 8005370:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f002 0310 	and.w	r3, r2, #16
 800537e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005382:	2300      	movs	r3, #0
 8005384:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005388:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800538c:	460b      	mov	r3, r1
 800538e:	4313      	orrs	r3, r2
 8005390:	d01e      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800539a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539e:	d10c      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	3328      	adds	r3, #40	@ 0x28
 80053a6:	2102      	movs	r1, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fe25 	bl	8005ff8 <RCCEx_PLL3_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ba:	4b70      	ldr	r3, [pc, #448]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ca:	4a6c      	ldr	r2, [pc, #432]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80053dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053e0:	2300      	movs	r3, #0
 80053e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d03e      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053fc:	d022      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80053fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005402:	d81b      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540c:	d00b      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800540e:	e015      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005414:	3308      	adds	r3, #8
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fd3b 	bl	8005e94 <RCCEx_PLL2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005424:	e00f      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542a:	3328      	adds	r3, #40	@ 0x28
 800542c:	2102      	movs	r1, #2
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fde2 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800543a:	e004      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10b      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800544e:	4b4b      	ldr	r3, [pc, #300]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005452:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800545e:	4a47      	ldr	r2, [pc, #284]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005460:	430b      	orrs	r3, r1
 8005462:	6593      	str	r3, [r2, #88]	@ 0x58
 8005464:	e003      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800547a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800547c:	2300      	movs	r3, #0
 800547e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005480:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005484:	460b      	mov	r3, r1
 8005486:	4313      	orrs	r3, r2
 8005488:	d03b      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005492:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005496:	d01f      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005498:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800549c:	d818      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800549e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a2:	d003      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80054a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054a8:	d007      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80054aa:	e011      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ac:	4b33      	ldr	r3, [pc, #204]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b0:	4a32      	ldr	r2, [pc, #200]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054b8:	e00f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	3328      	adds	r3, #40	@ 0x28
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fd98 	bl	8005ff8 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e2:	4b26      	ldr	r3, [pc, #152]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f2:	4a22      	ldr	r2, [pc, #136]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800550e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005510:	2300      	movs	r3, #0
 8005512:	677b      	str	r3, [r7, #116]	@ 0x74
 8005514:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005518:	460b      	mov	r3, r1
 800551a:	4313      	orrs	r3, r2
 800551c:	d034      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552c:	d007      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800552e:	e011      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005530:	4b12      	ldr	r3, [pc, #72]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	4a11      	ldr	r2, [pc, #68]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800553a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800553c:	e00e      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005542:	3308      	adds	r3, #8
 8005544:	2102      	movs	r1, #2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fca4 	bl	8005e94 <RCCEx_PLL2_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005552:	e003      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800555a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005568:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005572:	4a02      	ldr	r2, [pc, #8]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005574:	430b      	orrs	r3, r1
 8005576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005596:	2300      	movs	r3, #0
 8005598:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800559a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800559e:	460b      	mov	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	d00c      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a8:	3328      	adds	r3, #40	@ 0x28
 80055aa:	2102      	movs	r1, #2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fd23 	bl	8005ff8 <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80055ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80055cc:	2300      	movs	r3, #0
 80055ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80055d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80055d4:	460b      	mov	r3, r1
 80055d6:	4313      	orrs	r3, r2
 80055d8:	d038      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055e6:	d018      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80055e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ec:	d811      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80055ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055f2:	d014      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80055f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055f8:	d80b      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d011      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005602:	d106      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005604:	4bc3      	ldr	r3, [pc, #780]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	4ac2      	ldr	r2, [pc, #776]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800560a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800560e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005610:	e008      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005618:	e004      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800561a:	bf00      	nop
 800561c:	e002      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800561e:	bf00      	nop
 8005620:	e000      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800562c:	4bb9      	ldr	r3, [pc, #740]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800562e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005630:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800563c:	4ab5      	ldr	r2, [pc, #724]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800563e:	430b      	orrs	r3, r1
 8005640:	6553      	str	r3, [r2, #84]	@ 0x54
 8005642:	e003      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800565a:	2300      	movs	r3, #0
 800565c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800565e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005662:	460b      	mov	r3, r1
 8005664:	4313      	orrs	r3, r2
 8005666:	d009      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005668:	4baa      	ldr	r3, [pc, #680]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800566a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005676:	4aa7      	ldr	r2, [pc, #668]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005678:	430b      	orrs	r3, r1
 800567a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005688:	653b      	str	r3, [r7, #80]	@ 0x50
 800568a:	2300      	movs	r3, #0
 800568c:	657b      	str	r3, [r7, #84]	@ 0x54
 800568e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005698:	4b9e      	ldr	r3, [pc, #632]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80056a8:	4a9a      	ldr	r2, [pc, #616]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056bc:	2300      	movs	r3, #0
 80056be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80056c4:	460b      	mov	r3, r1
 80056c6:	4313      	orrs	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ca:	4b92      	ldr	r3, [pc, #584]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80056d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d8:	4a8e      	ldr	r2, [pc, #568]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056da:	430b      	orrs	r3, r1
 80056dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80056ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ec:	2300      	movs	r3, #0
 80056ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056fa:	4b86      	ldr	r3, [pc, #536]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	4a85      	ldr	r2, [pc, #532]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005700:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005704:	6113      	str	r3, [r2, #16]
 8005706:	4b83      	ldr	r3, [pc, #524]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005708:	6919      	ldr	r1, [r3, #16]
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005712:	4a80      	ldr	r2, [pc, #512]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005714:	430b      	orrs	r3, r1
 8005716:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005724:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005726:	2300      	movs	r3, #0
 8005728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800572a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d009      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005734:	4b77      	ldr	r3, [pc, #476]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005738:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005742:	4a74      	ldr	r2, [pc, #464]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005744:	430b      	orrs	r3, r1
 8005746:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005754:	633b      	str	r3, [r7, #48]	@ 0x30
 8005756:	2300      	movs	r3, #0
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
 800575a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005764:	4b6b      	ldr	r3, [pc, #428]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005768:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005774:	4a67      	ldr	r2, [pc, #412]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005776:	430b      	orrs	r3, r1
 8005778:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	2100      	movs	r1, #0
 8005784:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800578c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005790:	460b      	mov	r3, r1
 8005792:	4313      	orrs	r3, r2
 8005794:	d011      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	3308      	adds	r3, #8
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fb78 	bl	8005e94 <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80057aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	2100      	movs	r1, #0
 80057c4:	6239      	str	r1, [r7, #32]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80057cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057d0:	460b      	mov	r3, r1
 80057d2:	4313      	orrs	r3, r2
 80057d4:	d011      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	3308      	adds	r3, #8
 80057dc:	2101      	movs	r1, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fb58 	bl	8005e94 <RCCEx_PLL2_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80057ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	2100      	movs	r1, #0
 8005804:	61b9      	str	r1, [r7, #24]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	d011      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581a:	3308      	adds	r3, #8
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fb38 	bl	8005e94 <RCCEx_PLL2_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800582a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	2100      	movs	r1, #0
 8005844:	6139      	str	r1, [r7, #16]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005850:	460b      	mov	r3, r1
 8005852:	4313      	orrs	r3, r2
 8005854:	d011      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585a:	3328      	adds	r3, #40	@ 0x28
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fbca 	bl	8005ff8 <RCCEx_PLL3_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800586a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	2100      	movs	r1, #0
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005890:	460b      	mov	r3, r1
 8005892:	4313      	orrs	r3, r2
 8005894:	d011      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589a:	3328      	adds	r3, #40	@ 0x28
 800589c:	2101      	movs	r1, #1
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fbaa 	bl	8005ff8 <RCCEx_PLL3_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	2100      	movs	r1, #0
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058d0:	460b      	mov	r3, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	d011      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058da:	3328      	adds	r3, #40	@ 0x28
 80058dc:	2102      	movs	r1, #2
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb8a 	bl	8005ff8 <RCCEx_PLL3_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80058fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
}
 8005908:	4618      	mov	r0, r3
 800590a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800590e:	46bd      	mov	sp, r7
 8005910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005914:	58024400 	.word	0x58024400

08005918 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800591c:	f7fe fd96 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	4904      	ldr	r1, [pc, #16]	@ (8005940 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58024400 	.word	0x58024400
 8005940:	0800e5c0 	.word	0x0800e5c0

08005944 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	@ 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800594c:	4ba1      	ldr	r3, [pc, #644]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005956:	4b9f      	ldr	r3, [pc, #636]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595a:	0b1b      	lsrs	r3, r3, #12
 800595c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005960:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005962:	4b9c      	ldr	r3, [pc, #624]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800596e:	4b99      	ldr	r3, [pc, #612]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8111 	beq.w	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b02      	cmp	r3, #2
 8005996:	f000 8083 	beq.w	8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2b02      	cmp	r3, #2
 800599e:	f200 80a1 	bhi.w	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d056      	beq.n	8005a5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059ae:	e099      	b.n	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b0:	4b88      	ldr	r3, [pc, #544]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02d      	beq.n	8005a18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059bc:	4b85      	ldr	r3, [pc, #532]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	4a84      	ldr	r2, [pc, #528]	@ (8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
 80059cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b7b      	ldr	r3, [pc, #492]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a16:	e087      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a5a:	e065      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6e:	4b59      	ldr	r3, [pc, #356]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a9e:	e043      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b48      	ldr	r3, [pc, #288]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ae2:	e021      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b37      	ldr	r3, [pc, #220]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b28:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2c:	0a5b      	lsrs	r3, r3, #9
 8005b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4e:	ee17 2a90 	vmov	r2, s15
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b56:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b7c:	ee17 2a90 	vmov	r2, s15
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b84:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	0e1b      	lsrs	r3, r3, #24
 8005b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005baa:	ee17 2a90 	vmov	r2, s15
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]
}
 8005bc6:	bf00      	nop
 8005bc8:	3724      	adds	r7, #36	@ 0x24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	03d09000 	.word	0x03d09000
 8005bdc:	46000000 	.word	0x46000000
 8005be0:	4c742400 	.word	0x4c742400
 8005be4:	4a742400 	.word	0x4a742400
 8005be8:	4bbebc20 	.word	0x4bbebc20

08005bec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	@ 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	0d1b      	lsrs	r3, r3, #20
 8005c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c16:	4b99      	ldr	r3, [pc, #612]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8111 	beq.w	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	f200 80a1 	bhi.w	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d056      	beq.n	8005d04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c56:	e099      	b.n	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c58:	4b88      	ldr	r3, [pc, #544]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02d      	beq.n	8005cc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c64:	4b85      	ldr	r3, [pc, #532]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	4a84      	ldr	r2, [pc, #528]	@ (8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cbe:	e087      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e065      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b59      	ldr	r3, [pc, #356]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e043      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b48      	ldr	r3, [pc, #288]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	e021      	b.n	8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b37      	ldr	r3, [pc, #220]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e24:	ee17 2a90 	vmov	r2, s15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e2c:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e52:	ee17 2a90 	vmov	r2, s15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e5a:	e008      	b.n	8005e6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	3724      	adds	r7, #36	@ 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	03d09000 	.word	0x03d09000
 8005e84:	46000000 	.word	0x46000000
 8005e88:	4c742400 	.word	0x4c742400
 8005e8c:	4a742400 	.word	0x4a742400
 8005e90:	4bbebc20 	.word	0x4bbebc20

08005e94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ea2:	4b53      	ldr	r3, [pc, #332]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d101      	bne.n	8005eb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e099      	b.n	8005fe6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a4e      	ldr	r2, [pc, #312]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ebe:	f7fc ff73 	bl	8002da8 <HAL_GetTick>
 8005ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ec4:	e008      	b.n	8005ed8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ec6:	f7fc ff6f 	bl	8002da8 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e086      	b.n	8005fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ed8:	4b45      	ldr	r3, [pc, #276]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f0      	bne.n	8005ec6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ee4:	4b42      	ldr	r3, [pc, #264]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	031b      	lsls	r3, r3, #12
 8005ef2:	493f      	ldr	r1, [pc, #252]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	025b      	lsls	r3, r3, #9
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	041b      	lsls	r3, r3, #16
 8005f16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	061b      	lsls	r3, r3, #24
 8005f24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f28:	4931      	ldr	r1, [pc, #196]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f2e:	4b30      	ldr	r3, [pc, #192]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	492d      	ldr	r1, [pc, #180]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f40:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f44:	f023 0220 	bic.w	r2, r3, #32
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	4928      	ldr	r1, [pc, #160]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f52:	4b27      	ldr	r3, [pc, #156]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f56:	4a26      	ldr	r2, [pc, #152]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f58:	f023 0310 	bic.w	r3, r3, #16
 8005f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f5e:	4b24      	ldr	r3, [pc, #144]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f62:	4b24      	ldr	r3, [pc, #144]	@ (8005ff4 <RCCEx_PLL2_Config+0x160>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	69d2      	ldr	r2, [r2, #28]
 8005f6a:	00d2      	lsls	r2, r2, #3
 8005f6c:	4920      	ldr	r1, [pc, #128]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f72:	4b1f      	ldr	r3, [pc, #124]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	f043 0310 	orr.w	r3, r3, #16
 8005f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f84:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	4a19      	ldr	r2, [pc, #100]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005f90:	e00f      	b.n	8005fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d106      	bne.n	8005fa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f98:	4b15      	ldr	r3, [pc, #84]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	4a14      	ldr	r2, [pc, #80]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005fa4:	e005      	b.n	8005fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fa6:	4b12      	ldr	r3, [pc, #72]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	4a11      	ldr	r2, [pc, #68]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbe:	f7fc fef3 	bl	8002da8 <HAL_GetTick>
 8005fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fc4:	e008      	b.n	8005fd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fc6:	f7fc feef 	bl	8002da8 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e006      	b.n	8005fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <RCCEx_PLL2_Config+0x15c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	58024400 	.word	0x58024400
 8005ff4:	ffff0007 	.word	0xffff0007

08005ff8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006006:	4b53      	ldr	r3, [pc, #332]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b03      	cmp	r3, #3
 8006010:	d101      	bne.n	8006016 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e099      	b.n	800614a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006016:	4b4f      	ldr	r3, [pc, #316]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a4e      	ldr	r2, [pc, #312]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 800601c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fc fec1 	bl	8002da8 <HAL_GetTick>
 8006026:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006028:	e008      	b.n	800603c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800602a:	f7fc febd 	bl	8002da8 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e086      	b.n	800614a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800603c:	4b45      	ldr	r3, [pc, #276]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f0      	bne.n	800602a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006048:	4b42      	ldr	r3, [pc, #264]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	051b      	lsls	r3, r3, #20
 8006056:	493f      	ldr	r1, [pc, #252]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006058:	4313      	orrs	r3, r2
 800605a:	628b      	str	r3, [r1, #40]	@ 0x28
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	3b01      	subs	r3, #1
 8006062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	3b01      	subs	r3, #1
 800606c:	025b      	lsls	r3, r3, #9
 800606e:	b29b      	uxth	r3, r3
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	3b01      	subs	r3, #1
 8006078:	041b      	lsls	r3, r3, #16
 800607a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	3b01      	subs	r3, #1
 8006086:	061b      	lsls	r3, r3, #24
 8006088:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800608c:	4931      	ldr	r1, [pc, #196]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 800608e:	4313      	orrs	r3, r2
 8006090:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006092:	4b30      	ldr	r3, [pc, #192]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	492d      	ldr	r1, [pc, #180]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	4928      	ldr	r1, [pc, #160]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060b6:	4b27      	ldr	r3, [pc, #156]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ba:	4a26      	ldr	r2, [pc, #152]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060c2:	4b24      	ldr	r3, [pc, #144]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060c6:	4b24      	ldr	r3, [pc, #144]	@ (8006158 <RCCEx_PLL3_Config+0x160>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	69d2      	ldr	r2, [r2, #28]
 80060ce:	00d2      	lsls	r2, r2, #3
 80060d0:	4920      	ldr	r1, [pc, #128]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060da:	4a1e      	ldr	r2, [pc, #120]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80060e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ec:	4a19      	ldr	r2, [pc, #100]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060f4:	e00f      	b.n	8006116 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d106      	bne.n	800610a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80060fc:	4b15      	ldr	r3, [pc, #84]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	4a14      	ldr	r2, [pc, #80]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006102:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006106:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006108:	e005      	b.n	8006116 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800610a:	4b12      	ldr	r3, [pc, #72]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	4a11      	ldr	r2, [pc, #68]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006114:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006116:	4b0f      	ldr	r3, [pc, #60]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a0e      	ldr	r2, [pc, #56]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 800611c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006122:	f7fc fe41 	bl	8002da8 <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006128:	e008      	b.n	800613c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800612a:	f7fc fe3d 	bl	8002da8 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e006      	b.n	800614a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800613c:	4b05      	ldr	r3, [pc, #20]	@ (8006154 <RCCEx_PLL3_Config+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0f0      	beq.n	800612a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	58024400 	.word	0x58024400
 8006158:	ffff0007 	.word	0xffff0007

0800615c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e10f      	b.n	800638e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a87      	ldr	r2, [pc, #540]	@ (8006398 <HAL_SPI_Init+0x23c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00f      	beq.n	800619e <HAL_SPI_Init+0x42>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a86      	ldr	r2, [pc, #536]	@ (800639c <HAL_SPI_Init+0x240>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00a      	beq.n	800619e <HAL_SPI_Init+0x42>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a84      	ldr	r2, [pc, #528]	@ (80063a0 <HAL_SPI_Init+0x244>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d005      	beq.n	800619e <HAL_SPI_Init+0x42>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b0f      	cmp	r3, #15
 8006198:	d901      	bls.n	800619e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e0f7      	b.n	800638e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fe2e 	bl	8006e00 <SPI_GetPacketSize>
 80061a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a7b      	ldr	r2, [pc, #492]	@ (8006398 <HAL_SPI_Init+0x23c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00c      	beq.n	80061ca <HAL_SPI_Init+0x6e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a79      	ldr	r2, [pc, #484]	@ (800639c <HAL_SPI_Init+0x240>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <HAL_SPI_Init+0x6e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a78      	ldr	r2, [pc, #480]	@ (80063a0 <HAL_SPI_Init+0x244>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Init+0x6e>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d811      	bhi.n	80061ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061ce:	4a72      	ldr	r2, [pc, #456]	@ (8006398 <HAL_SPI_Init+0x23c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a70      	ldr	r2, [pc, #448]	@ (800639c <HAL_SPI_Init+0x240>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_SPI_Init+0x8c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a6f      	ldr	r2, [pc, #444]	@ (80063a0 <HAL_SPI_Init+0x244>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d104      	bne.n	80061f2 <HAL_SPI_Init+0x96>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d901      	bls.n	80061f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0cd      	b.n	800638e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fc f9bc 	bl	8002584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800622e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006238:	d119      	bne.n	800626e <HAL_SPI_Init+0x112>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006242:	d103      	bne.n	800624c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10c      	bne.n	800626e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800625c:	d107      	bne.n	800626e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800626c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00f      	beq.n	800629a <HAL_SPI_Init+0x13e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b06      	cmp	r3, #6
 8006280:	d90b      	bls.n	800629a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e007      	b.n	80062aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69da      	ldr	r2, [r3, #28]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062bc:	ea42 0103 	orr.w	r1, r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800630a:	ea42 0103 	orr.w	r1, r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d113      	bne.n	800634a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006334:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006348:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40013000 	.word	0x40013000
 800639c:	40003800 	.word	0x40003800
 80063a0:	40003c00 	.word	0x40003c00

080063a4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af02      	add	r7, sp, #8
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3320      	adds	r3, #32
 80063ba:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063bc:	f7fc fcf4 	bl	8002da8 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d001      	beq.n	80063d2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
 80063d0:	e1d1      	b.n	8006776 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_SPI_Transmit+0x3a>
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e1c9      	b.n	8006776 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_SPI_Transmit+0x4c>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e1c2      	b.n	8006776 <HAL_SPI_Transmit+0x3d2>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2203      	movs	r2, #3
 80063fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006448:	d108      	bne.n	800645c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e009      	b.n	8006470 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800646e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	4b96      	ldr	r3, [pc, #600]	@ (80066d0 <HAL_SPI_Transmit+0x32c>)
 8006478:	4013      	ands	r3, r2
 800647a:	88f9      	ldrh	r1, [r7, #6]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	430b      	orrs	r3, r1
 8006482:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800649c:	d107      	bne.n	80064ae <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b0f      	cmp	r3, #15
 80064b4:	d947      	bls.n	8006546 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80064b6:	e03f      	b.n	8006538 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d114      	bne.n	80064f0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6812      	ldr	r2, [r2, #0]
 80064d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	1d1a      	adds	r2, r3, #4
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80064ee:	e023      	b.n	8006538 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f0:	f7fc fc5a 	bl	8002da8 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d803      	bhi.n	8006508 <HAL_SPI_Transmit+0x164>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006506:	d102      	bne.n	800650e <HAL_SPI_Transmit+0x16a>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d114      	bne.n	8006538 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fba8 	bl	8006c64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e11e      	b.n	8006776 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1b9      	bne.n	80064b8 <HAL_SPI_Transmit+0x114>
 8006544:	e0f1      	b.n	800672a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b07      	cmp	r3, #7
 800654c:	f240 80e6 	bls.w	800671c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006550:	e05d      	b.n	800660e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d132      	bne.n	80065c6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d918      	bls.n	800659e <HAL_SPI_Transmit+0x1fa>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d014      	beq.n	800659e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b02      	subs	r3, #2
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800659c:	e037      	b.n	800660e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a2:	881a      	ldrh	r2, [r3, #0]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ac:	1c9a      	adds	r2, r3, #2
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80065c4:	e023      	b.n	800660e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065c6:	f7fc fbef 	bl	8002da8 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d803      	bhi.n	80065de <HAL_SPI_Transmit+0x23a>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065dc:	d102      	bne.n	80065e4 <HAL_SPI_Transmit+0x240>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d114      	bne.n	800660e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 fb3d 	bl	8006c64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e0b3      	b.n	8006776 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d19b      	bne.n	8006552 <HAL_SPI_Transmit+0x1ae>
 800661a:	e086      	b.n	800672a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b02      	cmp	r3, #2
 8006628:	d154      	bne.n	80066d4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b03      	cmp	r3, #3
 8006634:	d918      	bls.n	8006668 <HAL_SPI_Transmit+0x2c4>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663a:	2b40      	cmp	r3, #64	@ 0x40
 800663c:	d914      	bls.n	8006668 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800664e:	1d1a      	adds	r2, r3, #4
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b04      	subs	r3, #4
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006666:	e059      	b.n	800671c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800666e:	b29b      	uxth	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d917      	bls.n	80066a4 <HAL_SPI_Transmit+0x300>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d013      	beq.n	80066a4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006680:	881a      	ldrh	r2, [r3, #0]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668a:	1c9a      	adds	r2, r3, #2
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b02      	subs	r3, #2
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066a2:	e03b      	b.n	800671c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3320      	adds	r3, #32
 80066ae:	7812      	ldrb	r2, [r2, #0]
 80066b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066ce:	e025      	b.n	800671c <HAL_SPI_Transmit+0x378>
 80066d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d4:	f7fc fb68 	bl	8002da8 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d803      	bhi.n	80066ec <HAL_SPI_Transmit+0x348>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066ea:	d102      	bne.n	80066f2 <HAL_SPI_Transmit+0x34e>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d114      	bne.n	800671c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fab6 	bl	8006c64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e02c      	b.n	8006776 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	f47f af79 	bne.w	800661c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	2108      	movs	r1, #8
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fb35 	bl	8006da4 <SPI_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006746:	f043 0220 	orr.w	r2, r3, #32
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fa87 	bl	8006c64 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006774:	2300      	movs	r3, #0
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop

08006780 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	b29b      	uxth	r3, r3
 8006798:	3301      	adds	r3, #1
 800679a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3330      	adds	r3, #48	@ 0x30
 80067a2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a4:	f7fc fb00 	bl	8002da8 <HAL_GetTick>
 80067a8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d001      	beq.n	80067ba <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
 80067b8:	e250      	b.n	8006c5c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_SPI_Receive+0x46>
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e248      	b.n	8006c5c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_SPI_Receive+0x58>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e241      	b.n	8006c5c <HAL_SPI_Receive+0x4dc>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2204      	movs	r2, #4
 80067e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	88fa      	ldrh	r2, [r7, #6]
 8006802:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006830:	d108      	bne.n	8006844 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e009      	b.n	8006858 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006856:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	4b95      	ldr	r3, [pc, #596]	@ (8006ab4 <HAL_SPI_Receive+0x334>)
 8006860:	4013      	ands	r3, r2
 8006862:	88f9      	ldrh	r1, [r7, #6]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	430b      	orrs	r3, r1
 800686a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0201 	orr.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006884:	d107      	bne.n	8006896 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006894:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	2b0f      	cmp	r3, #15
 800689c:	d96c      	bls.n	8006978 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800689e:	e064      	b.n	800696a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d114      	bne.n	80068e0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80068c0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068c6:	1d1a      	adds	r2, r3, #4
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80068de:	e044      	b.n	800696a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8bfa      	ldrh	r2, [r7, #30]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d919      	bls.n	8006922 <HAL_SPI_Receive+0x1a2>
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d014      	beq.n	8006922 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006900:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006902:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006908:	1d1a      	adds	r2, r3, #4
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006914:	b29b      	uxth	r3, r3
 8006916:	3b01      	subs	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006920:	e023      	b.n	800696a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006922:	f7fc fa41 	bl	8002da8 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d803      	bhi.n	800693a <HAL_SPI_Receive+0x1ba>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006938:	d102      	bne.n	8006940 <HAL_SPI_Receive+0x1c0>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d114      	bne.n	800696a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f98f 	bl	8006c64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800694c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e178      	b.n	8006c5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d194      	bne.n	80068a0 <HAL_SPI_Receive+0x120>
 8006976:	e15e      	b.n	8006c36 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b07      	cmp	r3, #7
 800697e:	f240 8153 	bls.w	8006c28 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006982:	e08f      	b.n	8006aa4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b01      	cmp	r3, #1
 8006998:	d114      	bne.n	80069c4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	8812      	ldrh	r2, [r2, #0]
 80069a2:	b292      	uxth	r2, r2
 80069a4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069c2:	e06f      	b.n	8006aa4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	8bfa      	ldrh	r2, [r7, #30]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d924      	bls.n	8006a1c <HAL_SPI_Receive+0x29c>
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01f      	beq.n	8006a1c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	8812      	ldrh	r2, [r2, #0]
 80069e4:	b292      	uxth	r2, r2
 80069e6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ec:	1c9a      	adds	r2, r3, #2
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	8812      	ldrh	r2, [r2, #0]
 80069fa:	b292      	uxth	r2, r2
 80069fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a02:	1c9a      	adds	r2, r3, #2
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b02      	subs	r3, #2
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a1a:	e043      	b.n	8006aa4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d119      	bne.n	8006a5c <HAL_SPI_Receive+0x2dc>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d014      	beq.n	8006a5c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	8812      	ldrh	r2, [r2, #0]
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a42:	1c9a      	adds	r2, r3, #2
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a5a:	e023      	b.n	8006aa4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a5c:	f7fc f9a4 	bl	8002da8 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d803      	bhi.n	8006a74 <HAL_SPI_Receive+0x2f4>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a72:	d102      	bne.n	8006a7a <HAL_SPI_Receive+0x2fa>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d114      	bne.n	8006aa4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f8f2 	bl	8006c64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e0db      	b.n	8006c5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f47f af69 	bne.w	8006984 <HAL_SPI_Receive+0x204>
 8006ab2:	e0c0      	b.n	8006c36 <HAL_SPI_Receive+0x4b6>
 8006ab4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d117      	bne.n	8006afe <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ada:	7812      	ldrb	r2, [r2, #0]
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006afc:	e094      	b.n	8006c28 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8bfa      	ldrh	r2, [r7, #30]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d946      	bls.n	8006b9a <HAL_SPI_Receive+0x41a>
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d041      	beq.n	8006b9a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b22:	7812      	ldrb	r2, [r2, #0]
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b3e:	7812      	ldrb	r2, [r2, #0]
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5a:	7812      	ldrb	r2, [r2, #0]
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b04      	subs	r3, #4
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b98:	e046      	b.n	8006c28 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d81c      	bhi.n	8006be0 <HAL_SPI_Receive+0x460>
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d017      	beq.n	8006be0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bbc:	7812      	ldrb	r2, [r2, #0]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006bde:	e023      	b.n	8006c28 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be0:	f7fc f8e2 	bl	8002da8 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d803      	bhi.n	8006bf8 <HAL_SPI_Receive+0x478>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bf6:	d102      	bne.n	8006bfe <HAL_SPI_Receive+0x47e>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d114      	bne.n	8006c28 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f830 	bl	8006c64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e019      	b.n	8006c5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f47f af41 	bne.w	8006ab8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f814 	bl	8006c64 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0208 	orr.w	r2, r2, #8
 8006c82:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0210 	orr.w	r2, r2, #16
 8006c92:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6919      	ldr	r1, [r3, #16]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b3c      	ldr	r3, [pc, #240]	@ (8006da0 <SPI_CloseTransfer+0x13c>)
 8006cb0:	400b      	ands	r3, r1
 8006cb2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006cc2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d014      	beq.n	8006cfa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00f      	beq.n	8006cfa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0220 	orr.w	r2, r2, #32
 8006cf8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d014      	beq.n	8006d30 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00f      	beq.n	8006d30 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d16:	f043 0204 	orr.w	r2, r3, #4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d2e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00f      	beq.n	8006d5a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d40:	f043 0201 	orr.w	r2, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d58:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00f      	beq.n	8006d84 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d6a:	f043 0208 	orr.w	r2, r3, #8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d82:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	fffffc90 	.word	0xfffffc90

08006da4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006db4:	e010      	b.n	8006dd8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006db6:	f7fb fff7 	bl	8002da8 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d803      	bhi.n	8006dce <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dcc:	d102      	bne.n	8006dd4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e00f      	b.n	8006df8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695a      	ldr	r2, [r3, #20]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4013      	ands	r3, r2
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	bf0c      	ite	eq
 8006de8:	2301      	moveq	r3, #1
 8006dea:	2300      	movne	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	79fb      	ldrb	r3, [r7, #7]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d0df      	beq.n	8006db6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	08db      	lsrs	r3, r3, #3
 8006e20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e049      	b.n	8006edc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fb fc93 	bl	8002788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f000 fd59 	bl	800792c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d001      	beq.n	8006efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e054      	b.n	8006fa6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a26      	ldr	r2, [pc, #152]	@ (8006fb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d022      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x80>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f26:	d01d      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x80>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a22      	ldr	r2, [pc, #136]	@ (8006fb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d018      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x80>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a21      	ldr	r2, [pc, #132]	@ (8006fbc <HAL_TIM_Base_Start_IT+0xd8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x80>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00e      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x80>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006fc4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d009      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x80>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d004      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x80>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fcc <HAL_TIM_Base_Start_IT+0xe8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d115      	bne.n	8006f90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	4b19      	ldr	r3, [pc, #100]	@ (8006fd0 <HAL_TIM_Base_Start_IT+0xec>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b06      	cmp	r3, #6
 8006f74:	d015      	beq.n	8006fa2 <HAL_TIM_Base_Start_IT+0xbe>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f7c:	d011      	beq.n	8006fa2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f042 0201 	orr.w	r2, r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8e:	e008      	b.n	8006fa2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e000      	b.n	8006fa4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800
 8006fc0:	40000c00 	.word	0x40000c00
 8006fc4:	40010400 	.word	0x40010400
 8006fc8:	40001800 	.word	0x40001800
 8006fcc:	40014000 	.word	0x40014000
 8006fd0:	00010007 	.word	0x00010007

08006fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e049      	b.n	800707a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f841 	bl	8007082 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3304      	adds	r3, #4
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f000 fc8a 	bl	800792c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
	...

08007098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <HAL_TIM_PWM_Start+0x24>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	e03c      	b.n	8007136 <HAL_TIM_PWM_Start+0x9e>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d109      	bne.n	80070d6 <HAL_TIM_PWM_Start+0x3e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	bf14      	ite	ne
 80070ce:	2301      	movne	r3, #1
 80070d0:	2300      	moveq	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	e02f      	b.n	8007136 <HAL_TIM_PWM_Start+0x9e>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d109      	bne.n	80070f0 <HAL_TIM_PWM_Start+0x58>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	bf14      	ite	ne
 80070e8:	2301      	movne	r3, #1
 80070ea:	2300      	moveq	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	e022      	b.n	8007136 <HAL_TIM_PWM_Start+0x9e>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b0c      	cmp	r3, #12
 80070f4:	d109      	bne.n	800710a <HAL_TIM_PWM_Start+0x72>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b01      	cmp	r3, #1
 8007100:	bf14      	ite	ne
 8007102:	2301      	movne	r3, #1
 8007104:	2300      	moveq	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	e015      	b.n	8007136 <HAL_TIM_PWM_Start+0x9e>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b10      	cmp	r3, #16
 800710e:	d109      	bne.n	8007124 <HAL_TIM_PWM_Start+0x8c>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	bf14      	ite	ne
 800711c:	2301      	movne	r3, #1
 800711e:	2300      	moveq	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	e008      	b.n	8007136 <HAL_TIM_PWM_Start+0x9e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	bf14      	ite	ne
 8007130:	2301      	movne	r3, #1
 8007132:	2300      	moveq	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e0a1      	b.n	8007282 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <HAL_TIM_PWM_Start+0xb6>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800714c:	e023      	b.n	8007196 <HAL_TIM_PWM_Start+0xfe>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d104      	bne.n	800715e <HAL_TIM_PWM_Start+0xc6>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800715c:	e01b      	b.n	8007196 <HAL_TIM_PWM_Start+0xfe>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b08      	cmp	r3, #8
 8007162:	d104      	bne.n	800716e <HAL_TIM_PWM_Start+0xd6>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800716c:	e013      	b.n	8007196 <HAL_TIM_PWM_Start+0xfe>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b0c      	cmp	r3, #12
 8007172:	d104      	bne.n	800717e <HAL_TIM_PWM_Start+0xe6>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800717c:	e00b      	b.n	8007196 <HAL_TIM_PWM_Start+0xfe>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b10      	cmp	r3, #16
 8007182:	d104      	bne.n	800718e <HAL_TIM_PWM_Start+0xf6>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800718c:	e003      	b.n	8007196 <HAL_TIM_PWM_Start+0xfe>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2201      	movs	r2, #1
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 ffd8 	bl	8008154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a38      	ldr	r2, [pc, #224]	@ (800728c <HAL_TIM_PWM_Start+0x1f4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x13e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a37      	ldr	r2, [pc, #220]	@ (8007290 <HAL_TIM_PWM_Start+0x1f8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x13e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a35      	ldr	r2, [pc, #212]	@ (8007294 <HAL_TIM_PWM_Start+0x1fc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x13e>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a34      	ldr	r2, [pc, #208]	@ (8007298 <HAL_TIM_PWM_Start+0x200>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x13e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a32      	ldr	r2, [pc, #200]	@ (800729c <HAL_TIM_PWM_Start+0x204>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d101      	bne.n	80071da <HAL_TIM_PWM_Start+0x142>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <HAL_TIM_PWM_Start+0x144>
 80071da:	2300      	movs	r3, #0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a25      	ldr	r2, [pc, #148]	@ (800728c <HAL_TIM_PWM_Start+0x1f4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d022      	beq.n	8007240 <HAL_TIM_PWM_Start+0x1a8>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007202:	d01d      	beq.n	8007240 <HAL_TIM_PWM_Start+0x1a8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a25      	ldr	r2, [pc, #148]	@ (80072a0 <HAL_TIM_PWM_Start+0x208>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d018      	beq.n	8007240 <HAL_TIM_PWM_Start+0x1a8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a24      	ldr	r2, [pc, #144]	@ (80072a4 <HAL_TIM_PWM_Start+0x20c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <HAL_TIM_PWM_Start+0x1a8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a22      	ldr	r2, [pc, #136]	@ (80072a8 <HAL_TIM_PWM_Start+0x210>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00e      	beq.n	8007240 <HAL_TIM_PWM_Start+0x1a8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1a      	ldr	r2, [pc, #104]	@ (8007290 <HAL_TIM_PWM_Start+0x1f8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d009      	beq.n	8007240 <HAL_TIM_PWM_Start+0x1a8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1e      	ldr	r2, [pc, #120]	@ (80072ac <HAL_TIM_PWM_Start+0x214>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <HAL_TIM_PWM_Start+0x1a8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a16      	ldr	r2, [pc, #88]	@ (8007294 <HAL_TIM_PWM_Start+0x1fc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d115      	bne.n	800726c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	4b1a      	ldr	r3, [pc, #104]	@ (80072b0 <HAL_TIM_PWM_Start+0x218>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b06      	cmp	r3, #6
 8007250:	d015      	beq.n	800727e <HAL_TIM_PWM_Start+0x1e6>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007258:	d011      	beq.n	800727e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726a:	e008      	b.n	800727e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e000      	b.n	8007280 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40010000 	.word	0x40010000
 8007290:	40010400 	.word	0x40010400
 8007294:	40014000 	.word	0x40014000
 8007298:	40014400 	.word	0x40014400
 800729c:	40014800 	.word	0x40014800
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40001800 	.word	0x40001800
 80072b0:	00010007 	.word	0x00010007

080072b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d020      	beq.n	8007318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01b      	beq.n	8007318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f06f 0202 	mvn.w	r2, #2
 80072e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 faf6 	bl	80078f0 <HAL_TIM_IC_CaptureCallback>
 8007304:	e005      	b.n	8007312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fae8 	bl	80078dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 faf9 	bl	8007904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	d020      	beq.n	8007364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01b      	beq.n	8007364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0204 	mvn.w	r2, #4
 8007334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fad0 	bl	80078f0 <HAL_TIM_IC_CaptureCallback>
 8007350:	e005      	b.n	800735e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fac2 	bl	80078dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fad3 	bl	8007904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d020      	beq.n	80073b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f003 0308 	and.w	r3, r3, #8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01b      	beq.n	80073b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0208 	mvn.w	r2, #8
 8007380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2204      	movs	r2, #4
 8007386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 faaa 	bl	80078f0 <HAL_TIM_IC_CaptureCallback>
 800739c:	e005      	b.n	80073aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa9c 	bl	80078dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 faad 	bl	8007904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d020      	beq.n	80073fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f003 0310 	and.w	r3, r3, #16
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01b      	beq.n	80073fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f06f 0210 	mvn.w	r2, #16
 80073cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2208      	movs	r2, #8
 80073d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa84 	bl	80078f0 <HAL_TIM_IC_CaptureCallback>
 80073e8:	e005      	b.n	80073f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa76 	bl	80078dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa87 	bl	8007904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00c      	beq.n	8007420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f06f 0201 	mvn.w	r2, #1
 8007418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fa fd50 	bl	8001ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 ffbf 	bl	80083cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00c      	beq.n	8007472 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800746a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 ffb7 	bl	80083e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800748e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fa41 	bl	8007918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f06f 0220 	mvn.w	r2, #32
 80074b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 ff7f 	bl	80083b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074de:	2302      	movs	r3, #2
 80074e0:	e0ff      	b.n	80076e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b14      	cmp	r3, #20
 80074ee:	f200 80f0 	bhi.w	80076d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	0800754d 	.word	0x0800754d
 80074fc:	080076d3 	.word	0x080076d3
 8007500:	080076d3 	.word	0x080076d3
 8007504:	080076d3 	.word	0x080076d3
 8007508:	0800758d 	.word	0x0800758d
 800750c:	080076d3 	.word	0x080076d3
 8007510:	080076d3 	.word	0x080076d3
 8007514:	080076d3 	.word	0x080076d3
 8007518:	080075cf 	.word	0x080075cf
 800751c:	080076d3 	.word	0x080076d3
 8007520:	080076d3 	.word	0x080076d3
 8007524:	080076d3 	.word	0x080076d3
 8007528:	0800760f 	.word	0x0800760f
 800752c:	080076d3 	.word	0x080076d3
 8007530:	080076d3 	.word	0x080076d3
 8007534:	080076d3 	.word	0x080076d3
 8007538:	08007651 	.word	0x08007651
 800753c:	080076d3 	.word	0x080076d3
 8007540:	080076d3 	.word	0x080076d3
 8007544:	080076d3 	.word	0x080076d3
 8007548:	08007691 	.word	0x08007691
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fa8a 	bl	8007a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0208 	orr.w	r2, r2, #8
 8007566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0204 	bic.w	r2, r2, #4
 8007576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6999      	ldr	r1, [r3, #24]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	619a      	str	r2, [r3, #24]
      break;
 800758a:	e0a5      	b.n	80076d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fafa 	bl	8007b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6999      	ldr	r1, [r3, #24]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	021a      	lsls	r2, r3, #8
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	619a      	str	r2, [r3, #24]
      break;
 80075cc:	e084      	b.n	80076d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fb63 	bl	8007ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69da      	ldr	r2, [r3, #28]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f042 0208 	orr.w	r2, r2, #8
 80075e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0204 	bic.w	r2, r2, #4
 80075f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69d9      	ldr	r1, [r3, #28]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	61da      	str	r2, [r3, #28]
      break;
 800760c:	e064      	b.n	80076d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fbcb 	bl	8007db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69d9      	ldr	r1, [r3, #28]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	021a      	lsls	r2, r3, #8
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	61da      	str	r2, [r3, #28]
      break;
 800764e:	e043      	b.n	80076d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fc14 	bl	8007e84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0208 	orr.w	r2, r2, #8
 800766a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0204 	bic.w	r2, r2, #4
 800767a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800768e:	e023      	b.n	80076d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fc58 	bl	8007f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	021a      	lsls	r2, r3, #8
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80076d0:	e002      	b.n	80076d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]
      break;
 80076d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_TIM_ConfigClockSource+0x1c>
 8007704:	2302      	movs	r3, #2
 8007706:	e0dc      	b.n	80078c2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	4b6a      	ldr	r3, [pc, #424]	@ (80078cc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007724:	4013      	ands	r3, r2
 8007726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800772e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a64      	ldr	r2, [pc, #400]	@ (80078d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	f000 80a9 	beq.w	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 8007744:	4a62      	ldr	r2, [pc, #392]	@ (80078d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	f200 80ae 	bhi.w	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800774c:	4a61      	ldr	r2, [pc, #388]	@ (80078d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	f000 80a1 	beq.w	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 8007754:	4a5f      	ldr	r2, [pc, #380]	@ (80078d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	f200 80a6 	bhi.w	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800775c:	4a5e      	ldr	r2, [pc, #376]	@ (80078d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800775e:	4293      	cmp	r3, r2
 8007760:	f000 8099 	beq.w	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 8007764:	4a5c      	ldr	r2, [pc, #368]	@ (80078d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007766:	4293      	cmp	r3, r2
 8007768:	f200 809e 	bhi.w	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800776c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007770:	f000 8091 	beq.w	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 8007774:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007778:	f200 8096 	bhi.w	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800777c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007780:	f000 8089 	beq.w	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 8007784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007788:	f200 808e 	bhi.w	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800778c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007790:	d03e      	beq.n	8007810 <HAL_TIM_ConfigClockSource+0x124>
 8007792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007796:	f200 8087 	bhi.w	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800779a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800779e:	f000 8086 	beq.w	80078ae <HAL_TIM_ConfigClockSource+0x1c2>
 80077a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077a6:	d87f      	bhi.n	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077a8:	2b70      	cmp	r3, #112	@ 0x70
 80077aa:	d01a      	beq.n	80077e2 <HAL_TIM_ConfigClockSource+0xf6>
 80077ac:	2b70      	cmp	r3, #112	@ 0x70
 80077ae:	d87b      	bhi.n	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077b0:	2b60      	cmp	r3, #96	@ 0x60
 80077b2:	d050      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x16a>
 80077b4:	2b60      	cmp	r3, #96	@ 0x60
 80077b6:	d877      	bhi.n	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077b8:	2b50      	cmp	r3, #80	@ 0x50
 80077ba:	d03c      	beq.n	8007836 <HAL_TIM_ConfigClockSource+0x14a>
 80077bc:	2b50      	cmp	r3, #80	@ 0x50
 80077be:	d873      	bhi.n	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077c0:	2b40      	cmp	r3, #64	@ 0x40
 80077c2:	d058      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x18a>
 80077c4:	2b40      	cmp	r3, #64	@ 0x40
 80077c6:	d86f      	bhi.n	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077c8:	2b30      	cmp	r3, #48	@ 0x30
 80077ca:	d064      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 80077cc:	2b30      	cmp	r3, #48	@ 0x30
 80077ce:	d86b      	bhi.n	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d060      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d867      	bhi.n	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d05c      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d05a      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0x1aa>
 80077e0:	e062      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077f2:	f000 fc8f 	bl	8008114 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007804:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	609a      	str	r2, [r3, #8]
      break;
 800780e:	e04f      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007820:	f000 fc78 	bl	8008114 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007832:	609a      	str	r2, [r3, #8]
      break;
 8007834:	e03c      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007842:	461a      	mov	r2, r3
 8007844:	f000 fbe8 	bl	8008018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2150      	movs	r1, #80	@ 0x50
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fc42 	bl	80080d8 <TIM_ITRx_SetConfig>
      break;
 8007854:	e02c      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007862:	461a      	mov	r2, r3
 8007864:	f000 fc07 	bl	8008076 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2160      	movs	r1, #96	@ 0x60
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fc32 	bl	80080d8 <TIM_ITRx_SetConfig>
      break;
 8007874:	e01c      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007882:	461a      	mov	r2, r3
 8007884:	f000 fbc8 	bl	8008018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2140      	movs	r1, #64	@ 0x40
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fc22 	bl	80080d8 <TIM_ITRx_SetConfig>
      break;
 8007894:	e00c      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f000 fc19 	bl	80080d8 <TIM_ITRx_SetConfig>
      break;
 80078a6:	e003      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73fb      	strb	r3, [r7, #15]
      break;
 80078ac:	e000      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80078ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	ffceff88 	.word	0xffceff88
 80078d0:	00100040 	.word	0x00100040
 80078d4:	00100030 	.word	0x00100030
 80078d8:	00100020 	.word	0x00100020

080078dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a43      	ldr	r2, [pc, #268]	@ (8007a4c <TIM_Base_SetConfig+0x120>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794a:	d00f      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a40      	ldr	r2, [pc, #256]	@ (8007a50 <TIM_Base_SetConfig+0x124>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00b      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a3f      	ldr	r2, [pc, #252]	@ (8007a54 <TIM_Base_SetConfig+0x128>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d007      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a3e      	ldr	r2, [pc, #248]	@ (8007a58 <TIM_Base_SetConfig+0x12c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d003      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a3d      	ldr	r2, [pc, #244]	@ (8007a5c <TIM_Base_SetConfig+0x130>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d108      	bne.n	800797e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a32      	ldr	r2, [pc, #200]	@ (8007a4c <TIM_Base_SetConfig+0x120>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d01f      	beq.n	80079c6 <TIM_Base_SetConfig+0x9a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798c:	d01b      	beq.n	80079c6 <TIM_Base_SetConfig+0x9a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a2f      	ldr	r2, [pc, #188]	@ (8007a50 <TIM_Base_SetConfig+0x124>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d017      	beq.n	80079c6 <TIM_Base_SetConfig+0x9a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a2e      	ldr	r2, [pc, #184]	@ (8007a54 <TIM_Base_SetConfig+0x128>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d013      	beq.n	80079c6 <TIM_Base_SetConfig+0x9a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a58 <TIM_Base_SetConfig+0x12c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00f      	beq.n	80079c6 <TIM_Base_SetConfig+0x9a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a2c      	ldr	r2, [pc, #176]	@ (8007a5c <TIM_Base_SetConfig+0x130>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00b      	beq.n	80079c6 <TIM_Base_SetConfig+0x9a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007a60 <TIM_Base_SetConfig+0x134>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d007      	beq.n	80079c6 <TIM_Base_SetConfig+0x9a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007a64 <TIM_Base_SetConfig+0x138>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_Base_SetConfig+0x9a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a29      	ldr	r2, [pc, #164]	@ (8007a68 <TIM_Base_SetConfig+0x13c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d108      	bne.n	80079d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a14      	ldr	r2, [pc, #80]	@ (8007a4c <TIM_Base_SetConfig+0x120>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00f      	beq.n	8007a1e <TIM_Base_SetConfig+0xf2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a16      	ldr	r2, [pc, #88]	@ (8007a5c <TIM_Base_SetConfig+0x130>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00b      	beq.n	8007a1e <TIM_Base_SetConfig+0xf2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a15      	ldr	r2, [pc, #84]	@ (8007a60 <TIM_Base_SetConfig+0x134>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d007      	beq.n	8007a1e <TIM_Base_SetConfig+0xf2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a14      	ldr	r2, [pc, #80]	@ (8007a64 <TIM_Base_SetConfig+0x138>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_Base_SetConfig+0xf2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a13      	ldr	r2, [pc, #76]	@ (8007a68 <TIM_Base_SetConfig+0x13c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d103      	bne.n	8007a26 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	691a      	ldr	r2, [r3, #16]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f043 0204 	orr.w	r2, r3, #4
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	40010000 	.word	0x40010000
 8007a50:	40000400 	.word	0x40000400
 8007a54:	40000800 	.word	0x40000800
 8007a58:	40000c00 	.word	0x40000c00
 8007a5c:	40010400 	.word	0x40010400
 8007a60:	40014000 	.word	0x40014000
 8007a64:	40014400 	.word	0x40014400
 8007a68:	40014800 	.word	0x40014800

08007a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	f023 0201 	bic.w	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4b37      	ldr	r3, [pc, #220]	@ (8007b74 <TIM_OC1_SetConfig+0x108>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f023 0302 	bic.w	r3, r3, #2
 8007ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8007b78 <TIM_OC1_SetConfig+0x10c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00f      	beq.n	8007ae8 <TIM_OC1_SetConfig+0x7c>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a2c      	ldr	r2, [pc, #176]	@ (8007b7c <TIM_OC1_SetConfig+0x110>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d00b      	beq.n	8007ae8 <TIM_OC1_SetConfig+0x7c>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b80 <TIM_OC1_SetConfig+0x114>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d007      	beq.n	8007ae8 <TIM_OC1_SetConfig+0x7c>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a2a      	ldr	r2, [pc, #168]	@ (8007b84 <TIM_OC1_SetConfig+0x118>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d003      	beq.n	8007ae8 <TIM_OC1_SetConfig+0x7c>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a29      	ldr	r2, [pc, #164]	@ (8007b88 <TIM_OC1_SetConfig+0x11c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d10c      	bne.n	8007b02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f023 0308 	bic.w	r3, r3, #8
 8007aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 0304 	bic.w	r3, r3, #4
 8007b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1c      	ldr	r2, [pc, #112]	@ (8007b78 <TIM_OC1_SetConfig+0x10c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00f      	beq.n	8007b2a <TIM_OC1_SetConfig+0xbe>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8007b7c <TIM_OC1_SetConfig+0x110>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00b      	beq.n	8007b2a <TIM_OC1_SetConfig+0xbe>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a1a      	ldr	r2, [pc, #104]	@ (8007b80 <TIM_OC1_SetConfig+0x114>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d007      	beq.n	8007b2a <TIM_OC1_SetConfig+0xbe>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a19      	ldr	r2, [pc, #100]	@ (8007b84 <TIM_OC1_SetConfig+0x118>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_OC1_SetConfig+0xbe>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a18      	ldr	r2, [pc, #96]	@ (8007b88 <TIM_OC1_SetConfig+0x11c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d111      	bne.n	8007b4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	621a      	str	r2, [r3, #32]
}
 8007b68:	bf00      	nop
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	fffeff8f 	.word	0xfffeff8f
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40010400 	.word	0x40010400
 8007b80:	40014000 	.word	0x40014000
 8007b84:	40014400 	.word	0x40014400
 8007b88:	40014800 	.word	0x40014800

08007b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f023 0210 	bic.w	r2, r3, #16
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4b34      	ldr	r3, [pc, #208]	@ (8007c88 <TIM_OC2_SetConfig+0xfc>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0320 	bic.w	r3, r3, #32
 8007bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a29      	ldr	r2, [pc, #164]	@ (8007c8c <TIM_OC2_SetConfig+0x100>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_OC2_SetConfig+0x68>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a28      	ldr	r2, [pc, #160]	@ (8007c90 <TIM_OC2_SetConfig+0x104>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d10d      	bne.n	8007c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a1e      	ldr	r2, [pc, #120]	@ (8007c8c <TIM_OC2_SetConfig+0x100>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00f      	beq.n	8007c38 <TIM_OC2_SetConfig+0xac>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8007c90 <TIM_OC2_SetConfig+0x104>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00b      	beq.n	8007c38 <TIM_OC2_SetConfig+0xac>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a1c      	ldr	r2, [pc, #112]	@ (8007c94 <TIM_OC2_SetConfig+0x108>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d007      	beq.n	8007c38 <TIM_OC2_SetConfig+0xac>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007c98 <TIM_OC2_SetConfig+0x10c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d003      	beq.n	8007c38 <TIM_OC2_SetConfig+0xac>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a1a      	ldr	r2, [pc, #104]	@ (8007c9c <TIM_OC2_SetConfig+0x110>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d113      	bne.n	8007c60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	feff8fff 	.word	0xfeff8fff
 8007c8c:	40010000 	.word	0x40010000
 8007c90:	40010400 	.word	0x40010400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800

08007ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4b33      	ldr	r3, [pc, #204]	@ (8007d98 <TIM_OC3_SetConfig+0xf8>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0303 	bic.w	r3, r3, #3
 8007cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a28      	ldr	r2, [pc, #160]	@ (8007d9c <TIM_OC3_SetConfig+0xfc>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_OC3_SetConfig+0x66>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a27      	ldr	r2, [pc, #156]	@ (8007da0 <TIM_OC3_SetConfig+0x100>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10d      	bne.n	8007d22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a1d      	ldr	r2, [pc, #116]	@ (8007d9c <TIM_OC3_SetConfig+0xfc>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00f      	beq.n	8007d4a <TIM_OC3_SetConfig+0xaa>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007da0 <TIM_OC3_SetConfig+0x100>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00b      	beq.n	8007d4a <TIM_OC3_SetConfig+0xaa>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a1b      	ldr	r2, [pc, #108]	@ (8007da4 <TIM_OC3_SetConfig+0x104>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d007      	beq.n	8007d4a <TIM_OC3_SetConfig+0xaa>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8007da8 <TIM_OC3_SetConfig+0x108>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d003      	beq.n	8007d4a <TIM_OC3_SetConfig+0xaa>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a19      	ldr	r2, [pc, #100]	@ (8007dac <TIM_OC3_SetConfig+0x10c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d113      	bne.n	8007d72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	621a      	str	r2, [r3, #32]
}
 8007d8c:	bf00      	nop
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	fffeff8f 	.word	0xfffeff8f
 8007d9c:	40010000 	.word	0x40010000
 8007da0:	40010400 	.word	0x40010400
 8007da4:	40014000 	.word	0x40014000
 8007da8:	40014400 	.word	0x40014400
 8007dac:	40014800 	.word	0x40014800

08007db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4b24      	ldr	r3, [pc, #144]	@ (8007e6c <TIM_OC4_SetConfig+0xbc>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	031b      	lsls	r3, r3, #12
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a19      	ldr	r2, [pc, #100]	@ (8007e70 <TIM_OC4_SetConfig+0xc0>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00f      	beq.n	8007e30 <TIM_OC4_SetConfig+0x80>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a18      	ldr	r2, [pc, #96]	@ (8007e74 <TIM_OC4_SetConfig+0xc4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00b      	beq.n	8007e30 <TIM_OC4_SetConfig+0x80>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a17      	ldr	r2, [pc, #92]	@ (8007e78 <TIM_OC4_SetConfig+0xc8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d007      	beq.n	8007e30 <TIM_OC4_SetConfig+0x80>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a16      	ldr	r2, [pc, #88]	@ (8007e7c <TIM_OC4_SetConfig+0xcc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC4_SetConfig+0x80>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a15      	ldr	r2, [pc, #84]	@ (8007e80 <TIM_OC4_SetConfig+0xd0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d109      	bne.n	8007e44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	019b      	lsls	r3, r3, #6
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	feff8fff 	.word	0xfeff8fff
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40010400 	.word	0x40010400
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800

08007e84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4b21      	ldr	r3, [pc, #132]	@ (8007f34 <TIM_OC5_SetConfig+0xb0>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ec4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a18      	ldr	r2, [pc, #96]	@ (8007f38 <TIM_OC5_SetConfig+0xb4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00f      	beq.n	8007efa <TIM_OC5_SetConfig+0x76>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a17      	ldr	r2, [pc, #92]	@ (8007f3c <TIM_OC5_SetConfig+0xb8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00b      	beq.n	8007efa <TIM_OC5_SetConfig+0x76>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a16      	ldr	r2, [pc, #88]	@ (8007f40 <TIM_OC5_SetConfig+0xbc>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d007      	beq.n	8007efa <TIM_OC5_SetConfig+0x76>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a15      	ldr	r2, [pc, #84]	@ (8007f44 <TIM_OC5_SetConfig+0xc0>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d003      	beq.n	8007efa <TIM_OC5_SetConfig+0x76>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a14      	ldr	r2, [pc, #80]	@ (8007f48 <TIM_OC5_SetConfig+0xc4>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d109      	bne.n	8007f0e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	621a      	str	r2, [r3, #32]
}
 8007f28:	bf00      	nop
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	fffeff8f 	.word	0xfffeff8f
 8007f38:	40010000 	.word	0x40010000
 8007f3c:	40010400 	.word	0x40010400
 8007f40:	40014000 	.word	0x40014000
 8007f44:	40014400 	.word	0x40014400
 8007f48:	40014800 	.word	0x40014800

08007f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4b22      	ldr	r3, [pc, #136]	@ (8008000 <TIM_OC6_SetConfig+0xb4>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	051b      	lsls	r3, r3, #20
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a19      	ldr	r2, [pc, #100]	@ (8008004 <TIM_OC6_SetConfig+0xb8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00f      	beq.n	8007fc4 <TIM_OC6_SetConfig+0x78>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a18      	ldr	r2, [pc, #96]	@ (8008008 <TIM_OC6_SetConfig+0xbc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00b      	beq.n	8007fc4 <TIM_OC6_SetConfig+0x78>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a17      	ldr	r2, [pc, #92]	@ (800800c <TIM_OC6_SetConfig+0xc0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d007      	beq.n	8007fc4 <TIM_OC6_SetConfig+0x78>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a16      	ldr	r2, [pc, #88]	@ (8008010 <TIM_OC6_SetConfig+0xc4>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d003      	beq.n	8007fc4 <TIM_OC6_SetConfig+0x78>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a15      	ldr	r2, [pc, #84]	@ (8008014 <TIM_OC6_SetConfig+0xc8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d109      	bne.n	8007fd8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	029b      	lsls	r3, r3, #10
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	621a      	str	r2, [r3, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	feff8fff 	.word	0xfeff8fff
 8008004:	40010000 	.word	0x40010000
 8008008:	40010400 	.word	0x40010400
 800800c:	40014000 	.word	0x40014000
 8008010:	40014400 	.word	0x40014400
 8008014:	40014800 	.word	0x40014800

08008018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f023 0201 	bic.w	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f023 030a 	bic.w	r3, r3, #10
 8008054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4313      	orrs	r3, r2
 800805c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008076:	b480      	push	{r7}
 8008078:	b087      	sub	sp, #28
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	f023 0210 	bic.w	r2, r3, #16
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	031b      	lsls	r3, r3, #12
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4b09      	ldr	r3, [pc, #36]	@ (8008110 <TIM_ITRx_SetConfig+0x38>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	f043 0307 	orr.w	r3, r3, #7
 80080fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	609a      	str	r2, [r3, #8]
}
 8008102:	bf00      	nop
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	ffcfff8f 	.word	0xffcfff8f

08008114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800812e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	021a      	lsls	r2, r3, #8
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	431a      	orrs	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4313      	orrs	r3, r2
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	2201      	movs	r2, #1
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6a1a      	ldr	r2, [r3, #32]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	43db      	mvns	r3, r3
 8008176:	401a      	ands	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6a1a      	ldr	r2, [r3, #32]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	fa01 f303 	lsl.w	r3, r1, r3
 800818c:	431a      	orrs	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e06d      	b.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a30      	ldr	r2, [pc, #192]	@ (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a2f      	ldr	r2, [pc, #188]	@ (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d108      	bne.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a20      	ldr	r2, [pc, #128]	@ (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d022      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800822a:	d01d      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a1d      	ldr	r2, [pc, #116]	@ (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d018      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a1c      	ldr	r2, [pc, #112]	@ (80082ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d013      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1a      	ldr	r2, [pc, #104]	@ (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00e      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a15      	ldr	r2, [pc, #84]	@ (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d009      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a16      	ldr	r2, [pc, #88]	@ (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a15      	ldr	r2, [pc, #84]	@ (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d10c      	bne.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800826e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	4313      	orrs	r3, r2
 8008278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40010000 	.word	0x40010000
 80082a4:	40010400 	.word	0x40010400
 80082a8:	40000400 	.word	0x40000400
 80082ac:	40000800 	.word	0x40000800
 80082b0:	40000c00 	.word	0x40000c00
 80082b4:	40001800 	.word	0x40001800
 80082b8:	40014000 	.word	0x40014000

080082bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e065      	b.n	80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	041b      	lsls	r3, r3, #16
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a16      	ldr	r2, [pc, #88]	@ (80083b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a14      	ldr	r2, [pc, #80]	@ (80083b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d115      	bne.n	8008392 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008370:	051b      	lsls	r3, r3, #20
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	4313      	orrs	r3, r2
 8008382:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	40010000 	.word	0x40010000
 80083b4:	40010400 	.word	0x40010400

080083b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e042      	b.n	800848c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800840c:	2b00      	cmp	r3, #0
 800840e:	d106      	bne.n	800841e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fa fa37 	bl	800288c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2224      	movs	r2, #36	@ 0x24
 8008422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fd90 	bl	8008f64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f825 	bl	8008494 <UART_SetConfig>
 800844a:	4603      	mov	r3, r0
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e01b      	b.n	800848c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689a      	ldr	r2, [r3, #8]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0201 	orr.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fe0f 	bl	80090a8 <UART_CheckIdleState>
 800848a:	4603      	mov	r3, r0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008498:	b092      	sub	sp, #72	@ 0x48
 800849a:	af00      	add	r7, sp, #0
 800849c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	431a      	orrs	r2, r3
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4bbe      	ldr	r3, [pc, #760]	@ (80087bc <UART_SetConfig+0x328>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	6812      	ldr	r2, [r2, #0]
 80084ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084cc:	430b      	orrs	r3, r1
 80084ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4ab3      	ldr	r2, [pc, #716]	@ (80087c0 <UART_SetConfig+0x32c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084fc:	4313      	orrs	r3, r2
 80084fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	4baf      	ldr	r3, [pc, #700]	@ (80087c4 <UART_SetConfig+0x330>)
 8008508:	4013      	ands	r3, r2
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	6812      	ldr	r2, [r2, #0]
 800850e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008510:	430b      	orrs	r3, r1
 8008512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851a:	f023 010f 	bic.w	r1, r3, #15
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4aa6      	ldr	r2, [pc, #664]	@ (80087c8 <UART_SetConfig+0x334>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d177      	bne.n	8008624 <UART_SetConfig+0x190>
 8008534:	4ba5      	ldr	r3, [pc, #660]	@ (80087cc <UART_SetConfig+0x338>)
 8008536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008538:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800853c:	2b28      	cmp	r3, #40	@ 0x28
 800853e:	d86d      	bhi.n	800861c <UART_SetConfig+0x188>
 8008540:	a201      	add	r2, pc, #4	@ (adr r2, 8008548 <UART_SetConfig+0xb4>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	080085ed 	.word	0x080085ed
 800854c:	0800861d 	.word	0x0800861d
 8008550:	0800861d 	.word	0x0800861d
 8008554:	0800861d 	.word	0x0800861d
 8008558:	0800861d 	.word	0x0800861d
 800855c:	0800861d 	.word	0x0800861d
 8008560:	0800861d 	.word	0x0800861d
 8008564:	0800861d 	.word	0x0800861d
 8008568:	080085f5 	.word	0x080085f5
 800856c:	0800861d 	.word	0x0800861d
 8008570:	0800861d 	.word	0x0800861d
 8008574:	0800861d 	.word	0x0800861d
 8008578:	0800861d 	.word	0x0800861d
 800857c:	0800861d 	.word	0x0800861d
 8008580:	0800861d 	.word	0x0800861d
 8008584:	0800861d 	.word	0x0800861d
 8008588:	080085fd 	.word	0x080085fd
 800858c:	0800861d 	.word	0x0800861d
 8008590:	0800861d 	.word	0x0800861d
 8008594:	0800861d 	.word	0x0800861d
 8008598:	0800861d 	.word	0x0800861d
 800859c:	0800861d 	.word	0x0800861d
 80085a0:	0800861d 	.word	0x0800861d
 80085a4:	0800861d 	.word	0x0800861d
 80085a8:	08008605 	.word	0x08008605
 80085ac:	0800861d 	.word	0x0800861d
 80085b0:	0800861d 	.word	0x0800861d
 80085b4:	0800861d 	.word	0x0800861d
 80085b8:	0800861d 	.word	0x0800861d
 80085bc:	0800861d 	.word	0x0800861d
 80085c0:	0800861d 	.word	0x0800861d
 80085c4:	0800861d 	.word	0x0800861d
 80085c8:	0800860d 	.word	0x0800860d
 80085cc:	0800861d 	.word	0x0800861d
 80085d0:	0800861d 	.word	0x0800861d
 80085d4:	0800861d 	.word	0x0800861d
 80085d8:	0800861d 	.word	0x0800861d
 80085dc:	0800861d 	.word	0x0800861d
 80085e0:	0800861d 	.word	0x0800861d
 80085e4:	0800861d 	.word	0x0800861d
 80085e8:	08008615 	.word	0x08008615
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f2:	e222      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80085f4:	2304      	movs	r3, #4
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e21e      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80085fc:	2308      	movs	r3, #8
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e21a      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008604:	2310      	movs	r3, #16
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e216      	b.n	8008a3a <UART_SetConfig+0x5a6>
 800860c:	2320      	movs	r3, #32
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e212      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008614:	2340      	movs	r3, #64	@ 0x40
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e20e      	b.n	8008a3a <UART_SetConfig+0x5a6>
 800861c:	2380      	movs	r3, #128	@ 0x80
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e20a      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a69      	ldr	r2, [pc, #420]	@ (80087d0 <UART_SetConfig+0x33c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d130      	bne.n	8008690 <UART_SetConfig+0x1fc>
 800862e:	4b67      	ldr	r3, [pc, #412]	@ (80087cc <UART_SetConfig+0x338>)
 8008630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	2b05      	cmp	r3, #5
 8008638:	d826      	bhi.n	8008688 <UART_SetConfig+0x1f4>
 800863a:	a201      	add	r2, pc, #4	@ (adr r2, 8008640 <UART_SetConfig+0x1ac>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	08008659 	.word	0x08008659
 8008644:	08008661 	.word	0x08008661
 8008648:	08008669 	.word	0x08008669
 800864c:	08008671 	.word	0x08008671
 8008650:	08008679 	.word	0x08008679
 8008654:	08008681 	.word	0x08008681
 8008658:	2300      	movs	r3, #0
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e1ec      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008660:	2304      	movs	r3, #4
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e1e8      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008668:	2308      	movs	r3, #8
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e1e4      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008670:	2310      	movs	r3, #16
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e1e0      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008678:	2320      	movs	r3, #32
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e1dc      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008680:	2340      	movs	r3, #64	@ 0x40
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e1d8      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008688:	2380      	movs	r3, #128	@ 0x80
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e1d4      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a4f      	ldr	r2, [pc, #316]	@ (80087d4 <UART_SetConfig+0x340>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d130      	bne.n	80086fc <UART_SetConfig+0x268>
 800869a:	4b4c      	ldr	r3, [pc, #304]	@ (80087cc <UART_SetConfig+0x338>)
 800869c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	d826      	bhi.n	80086f4 <UART_SetConfig+0x260>
 80086a6:	a201      	add	r2, pc, #4	@ (adr r2, 80086ac <UART_SetConfig+0x218>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086c5 	.word	0x080086c5
 80086b0:	080086cd 	.word	0x080086cd
 80086b4:	080086d5 	.word	0x080086d5
 80086b8:	080086dd 	.word	0x080086dd
 80086bc:	080086e5 	.word	0x080086e5
 80086c0:	080086ed 	.word	0x080086ed
 80086c4:	2300      	movs	r3, #0
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e1b6      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80086cc:	2304      	movs	r3, #4
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e1b2      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80086d4:	2308      	movs	r3, #8
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e1ae      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80086dc:	2310      	movs	r3, #16
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e1aa      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80086e4:	2320      	movs	r3, #32
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e1a6      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80086ec:	2340      	movs	r3, #64	@ 0x40
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f2:	e1a2      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80086f4:	2380      	movs	r3, #128	@ 0x80
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fa:	e19e      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a35      	ldr	r2, [pc, #212]	@ (80087d8 <UART_SetConfig+0x344>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d130      	bne.n	8008768 <UART_SetConfig+0x2d4>
 8008706:	4b31      	ldr	r3, [pc, #196]	@ (80087cc <UART_SetConfig+0x338>)
 8008708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	2b05      	cmp	r3, #5
 8008710:	d826      	bhi.n	8008760 <UART_SetConfig+0x2cc>
 8008712:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <UART_SetConfig+0x284>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008731 	.word	0x08008731
 800871c:	08008739 	.word	0x08008739
 8008720:	08008741 	.word	0x08008741
 8008724:	08008749 	.word	0x08008749
 8008728:	08008751 	.word	0x08008751
 800872c:	08008759 	.word	0x08008759
 8008730:	2300      	movs	r3, #0
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e180      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008738:	2304      	movs	r3, #4
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e17c      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008740:	2308      	movs	r3, #8
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e178      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008748:	2310      	movs	r3, #16
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e174      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008750:	2320      	movs	r3, #32
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e170      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008758:	2340      	movs	r3, #64	@ 0x40
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875e:	e16c      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008760:	2380      	movs	r3, #128	@ 0x80
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008766:	e168      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a1b      	ldr	r2, [pc, #108]	@ (80087dc <UART_SetConfig+0x348>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d142      	bne.n	80087f8 <UART_SetConfig+0x364>
 8008772:	4b16      	ldr	r3, [pc, #88]	@ (80087cc <UART_SetConfig+0x338>)
 8008774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b05      	cmp	r3, #5
 800877c:	d838      	bhi.n	80087f0 <UART_SetConfig+0x35c>
 800877e:	a201      	add	r2, pc, #4	@ (adr r2, 8008784 <UART_SetConfig+0x2f0>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	0800879d 	.word	0x0800879d
 8008788:	080087a5 	.word	0x080087a5
 800878c:	080087ad 	.word	0x080087ad
 8008790:	080087b5 	.word	0x080087b5
 8008794:	080087e1 	.word	0x080087e1
 8008798:	080087e9 	.word	0x080087e9
 800879c:	2300      	movs	r3, #0
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e14a      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80087a4:	2304      	movs	r3, #4
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e146      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e142      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ba:	e13e      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80087bc:	cfff69f3 	.word	0xcfff69f3
 80087c0:	58000c00 	.word	0x58000c00
 80087c4:	11fff4ff 	.word	0x11fff4ff
 80087c8:	40011000 	.word	0x40011000
 80087cc:	58024400 	.word	0x58024400
 80087d0:	40004400 	.word	0x40004400
 80087d4:	40004800 	.word	0x40004800
 80087d8:	40004c00 	.word	0x40004c00
 80087dc:	40005000 	.word	0x40005000
 80087e0:	2320      	movs	r3, #32
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e128      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80087e8:	2340      	movs	r3, #64	@ 0x40
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e124      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80087f0:	2380      	movs	r3, #128	@ 0x80
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e120      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4acb      	ldr	r2, [pc, #812]	@ (8008b2c <UART_SetConfig+0x698>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d176      	bne.n	80088f0 <UART_SetConfig+0x45c>
 8008802:	4bcb      	ldr	r3, [pc, #812]	@ (8008b30 <UART_SetConfig+0x69c>)
 8008804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800880a:	2b28      	cmp	r3, #40	@ 0x28
 800880c:	d86c      	bhi.n	80088e8 <UART_SetConfig+0x454>
 800880e:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <UART_SetConfig+0x380>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	080088b9 	.word	0x080088b9
 8008818:	080088e9 	.word	0x080088e9
 800881c:	080088e9 	.word	0x080088e9
 8008820:	080088e9 	.word	0x080088e9
 8008824:	080088e9 	.word	0x080088e9
 8008828:	080088e9 	.word	0x080088e9
 800882c:	080088e9 	.word	0x080088e9
 8008830:	080088e9 	.word	0x080088e9
 8008834:	080088c1 	.word	0x080088c1
 8008838:	080088e9 	.word	0x080088e9
 800883c:	080088e9 	.word	0x080088e9
 8008840:	080088e9 	.word	0x080088e9
 8008844:	080088e9 	.word	0x080088e9
 8008848:	080088e9 	.word	0x080088e9
 800884c:	080088e9 	.word	0x080088e9
 8008850:	080088e9 	.word	0x080088e9
 8008854:	080088c9 	.word	0x080088c9
 8008858:	080088e9 	.word	0x080088e9
 800885c:	080088e9 	.word	0x080088e9
 8008860:	080088e9 	.word	0x080088e9
 8008864:	080088e9 	.word	0x080088e9
 8008868:	080088e9 	.word	0x080088e9
 800886c:	080088e9 	.word	0x080088e9
 8008870:	080088e9 	.word	0x080088e9
 8008874:	080088d1 	.word	0x080088d1
 8008878:	080088e9 	.word	0x080088e9
 800887c:	080088e9 	.word	0x080088e9
 8008880:	080088e9 	.word	0x080088e9
 8008884:	080088e9 	.word	0x080088e9
 8008888:	080088e9 	.word	0x080088e9
 800888c:	080088e9 	.word	0x080088e9
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088d9 	.word	0x080088d9
 8008898:	080088e9 	.word	0x080088e9
 800889c:	080088e9 	.word	0x080088e9
 80088a0:	080088e9 	.word	0x080088e9
 80088a4:	080088e9 	.word	0x080088e9
 80088a8:	080088e9 	.word	0x080088e9
 80088ac:	080088e9 	.word	0x080088e9
 80088b0:	080088e9 	.word	0x080088e9
 80088b4:	080088e1 	.word	0x080088e1
 80088b8:	2301      	movs	r3, #1
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e0bc      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80088c0:	2304      	movs	r3, #4
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e0b8      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80088c8:	2308      	movs	r3, #8
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e0b4      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80088d0:	2310      	movs	r3, #16
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e0b0      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80088d8:	2320      	movs	r3, #32
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e0ac      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80088e0:	2340      	movs	r3, #64	@ 0x40
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e0a8      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80088e8:	2380      	movs	r3, #128	@ 0x80
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e0a4      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a8f      	ldr	r2, [pc, #572]	@ (8008b34 <UART_SetConfig+0x6a0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d130      	bne.n	800895c <UART_SetConfig+0x4c8>
 80088fa:	4b8d      	ldr	r3, [pc, #564]	@ (8008b30 <UART_SetConfig+0x69c>)
 80088fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	2b05      	cmp	r3, #5
 8008904:	d826      	bhi.n	8008954 <UART_SetConfig+0x4c0>
 8008906:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <UART_SetConfig+0x478>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008925 	.word	0x08008925
 8008910:	0800892d 	.word	0x0800892d
 8008914:	08008935 	.word	0x08008935
 8008918:	0800893d 	.word	0x0800893d
 800891c:	08008945 	.word	0x08008945
 8008920:	0800894d 	.word	0x0800894d
 8008924:	2300      	movs	r3, #0
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e086      	b.n	8008a3a <UART_SetConfig+0x5a6>
 800892c:	2304      	movs	r3, #4
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e082      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008934:	2308      	movs	r3, #8
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e07e      	b.n	8008a3a <UART_SetConfig+0x5a6>
 800893c:	2310      	movs	r3, #16
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e07a      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008944:	2320      	movs	r3, #32
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894a:	e076      	b.n	8008a3a <UART_SetConfig+0x5a6>
 800894c:	2340      	movs	r3, #64	@ 0x40
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e072      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008954:	2380      	movs	r3, #128	@ 0x80
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e06e      	b.n	8008a3a <UART_SetConfig+0x5a6>
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a75      	ldr	r2, [pc, #468]	@ (8008b38 <UART_SetConfig+0x6a4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d130      	bne.n	80089c8 <UART_SetConfig+0x534>
 8008966:	4b72      	ldr	r3, [pc, #456]	@ (8008b30 <UART_SetConfig+0x69c>)
 8008968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	2b05      	cmp	r3, #5
 8008970:	d826      	bhi.n	80089c0 <UART_SetConfig+0x52c>
 8008972:	a201      	add	r2, pc, #4	@ (adr r2, 8008978 <UART_SetConfig+0x4e4>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	08008991 	.word	0x08008991
 800897c:	08008999 	.word	0x08008999
 8008980:	080089a1 	.word	0x080089a1
 8008984:	080089a9 	.word	0x080089a9
 8008988:	080089b1 	.word	0x080089b1
 800898c:	080089b9 	.word	0x080089b9
 8008990:	2300      	movs	r3, #0
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e050      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008998:	2304      	movs	r3, #4
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e04c      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80089a0:	2308      	movs	r3, #8
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e048      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80089a8:	2310      	movs	r3, #16
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ae:	e044      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80089b0:	2320      	movs	r3, #32
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b6:	e040      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80089b8:	2340      	movs	r3, #64	@ 0x40
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e03c      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80089c0:	2380      	movs	r3, #128	@ 0x80
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e038      	b.n	8008a3a <UART_SetConfig+0x5a6>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a5b      	ldr	r2, [pc, #364]	@ (8008b3c <UART_SetConfig+0x6a8>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d130      	bne.n	8008a34 <UART_SetConfig+0x5a0>
 80089d2:	4b57      	ldr	r3, [pc, #348]	@ (8008b30 <UART_SetConfig+0x69c>)
 80089d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b05      	cmp	r3, #5
 80089dc:	d826      	bhi.n	8008a2c <UART_SetConfig+0x598>
 80089de:	a201      	add	r2, pc, #4	@ (adr r2, 80089e4 <UART_SetConfig+0x550>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	080089fd 	.word	0x080089fd
 80089e8:	08008a05 	.word	0x08008a05
 80089ec:	08008a0d 	.word	0x08008a0d
 80089f0:	08008a15 	.word	0x08008a15
 80089f4:	08008a1d 	.word	0x08008a1d
 80089f8:	08008a25 	.word	0x08008a25
 80089fc:	2302      	movs	r3, #2
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e01a      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008a04:	2304      	movs	r3, #4
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e016      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008a0c:	2308      	movs	r3, #8
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e012      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008a14:	2310      	movs	r3, #16
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1a:	e00e      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008a1c:	2320      	movs	r3, #32
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a22:	e00a      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008a24:	2340      	movs	r3, #64	@ 0x40
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e006      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008a2c:	2380      	movs	r3, #128	@ 0x80
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a32:	e002      	b.n	8008a3a <UART_SetConfig+0x5a6>
 8008a34:	2380      	movs	r3, #128	@ 0x80
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8008b3c <UART_SetConfig+0x6a8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	f040 80f8 	bne.w	8008c36 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	dc46      	bgt.n	8008adc <UART_SetConfig+0x648>
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	f2c0 8082 	blt.w	8008b58 <UART_SetConfig+0x6c4>
 8008a54:	3b02      	subs	r3, #2
 8008a56:	2b1e      	cmp	r3, #30
 8008a58:	d87e      	bhi.n	8008b58 <UART_SetConfig+0x6c4>
 8008a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <UART_SetConfig+0x5cc>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008ae3 	.word	0x08008ae3
 8008a64:	08008b59 	.word	0x08008b59
 8008a68:	08008aeb 	.word	0x08008aeb
 8008a6c:	08008b59 	.word	0x08008b59
 8008a70:	08008b59 	.word	0x08008b59
 8008a74:	08008b59 	.word	0x08008b59
 8008a78:	08008afb 	.word	0x08008afb
 8008a7c:	08008b59 	.word	0x08008b59
 8008a80:	08008b59 	.word	0x08008b59
 8008a84:	08008b59 	.word	0x08008b59
 8008a88:	08008b59 	.word	0x08008b59
 8008a8c:	08008b59 	.word	0x08008b59
 8008a90:	08008b59 	.word	0x08008b59
 8008a94:	08008b59 	.word	0x08008b59
 8008a98:	08008b0b 	.word	0x08008b0b
 8008a9c:	08008b59 	.word	0x08008b59
 8008aa0:	08008b59 	.word	0x08008b59
 8008aa4:	08008b59 	.word	0x08008b59
 8008aa8:	08008b59 	.word	0x08008b59
 8008aac:	08008b59 	.word	0x08008b59
 8008ab0:	08008b59 	.word	0x08008b59
 8008ab4:	08008b59 	.word	0x08008b59
 8008ab8:	08008b59 	.word	0x08008b59
 8008abc:	08008b59 	.word	0x08008b59
 8008ac0:	08008b59 	.word	0x08008b59
 8008ac4:	08008b59 	.word	0x08008b59
 8008ac8:	08008b59 	.word	0x08008b59
 8008acc:	08008b59 	.word	0x08008b59
 8008ad0:	08008b59 	.word	0x08008b59
 8008ad4:	08008b59 	.word	0x08008b59
 8008ad8:	08008b4b 	.word	0x08008b4b
 8008adc:	2b40      	cmp	r3, #64	@ 0x40
 8008ade:	d037      	beq.n	8008b50 <UART_SetConfig+0x6bc>
 8008ae0:	e03a      	b.n	8008b58 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ae2:	f7fc ff19 	bl	8005918 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ae6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ae8:	e03c      	b.n	8008b64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fc ff28 	bl	8005944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af8:	e034      	b.n	8008b64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008afa:	f107 0318 	add.w	r3, r7, #24
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fd f874 	bl	8005bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b08:	e02c      	b.n	8008b64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b0a:	4b09      	ldr	r3, [pc, #36]	@ (8008b30 <UART_SetConfig+0x69c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d016      	beq.n	8008b44 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b16:	4b06      	ldr	r3, [pc, #24]	@ (8008b30 <UART_SetConfig+0x69c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	08db      	lsrs	r3, r3, #3
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	4a07      	ldr	r2, [pc, #28]	@ (8008b40 <UART_SetConfig+0x6ac>)
 8008b22:	fa22 f303 	lsr.w	r3, r2, r3
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b28:	e01c      	b.n	8008b64 <UART_SetConfig+0x6d0>
 8008b2a:	bf00      	nop
 8008b2c:	40011400 	.word	0x40011400
 8008b30:	58024400 	.word	0x58024400
 8008b34:	40007800 	.word	0x40007800
 8008b38:	40007c00 	.word	0x40007c00
 8008b3c:	58000c00 	.word	0x58000c00
 8008b40:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008b44:	4b9d      	ldr	r3, [pc, #628]	@ (8008dbc <UART_SetConfig+0x928>)
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b48:	e00c      	b.n	8008b64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b4a:	4b9d      	ldr	r3, [pc, #628]	@ (8008dc0 <UART_SetConfig+0x92c>)
 8008b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b4e:	e009      	b.n	8008b64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b56:	e005      	b.n	8008b64 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 81de 	beq.w	8008f28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b70:	4a94      	ldr	r2, [pc, #592]	@ (8008dc4 <UART_SetConfig+0x930>)
 8008b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b76:	461a      	mov	r2, r3
 8008b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b7e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	4413      	add	r3, r2
 8008b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d305      	bcc.n	8008b9c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d903      	bls.n	8008ba4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ba2:	e1c1      	b.n	8008f28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	60bb      	str	r3, [r7, #8]
 8008baa:	60fa      	str	r2, [r7, #12]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	4a84      	ldr	r2, [pc, #528]	@ (8008dc4 <UART_SetConfig+0x930>)
 8008bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2200      	movs	r2, #0
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bc6:	f7f7 fd9f 	bl	8000708 <__aeabi_uldivmod>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	020b      	lsls	r3, r1, #8
 8008bdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008be0:	0202      	lsls	r2, r0, #8
 8008be2:	6979      	ldr	r1, [r7, #20]
 8008be4:	6849      	ldr	r1, [r1, #4]
 8008be6:	0849      	lsrs	r1, r1, #1
 8008be8:	2000      	movs	r0, #0
 8008bea:	460c      	mov	r4, r1
 8008bec:	4605      	mov	r5, r0
 8008bee:	eb12 0804 	adds.w	r8, r2, r4
 8008bf2:	eb43 0905 	adc.w	r9, r3, r5
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	469a      	mov	sl, r3
 8008bfe:	4693      	mov	fp, r2
 8008c00:	4652      	mov	r2, sl
 8008c02:	465b      	mov	r3, fp
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f7 fd7e 	bl	8000708 <__aeabi_uldivmod>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4613      	mov	r3, r2
 8008c12:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c1a:	d308      	bcc.n	8008c2e <UART_SetConfig+0x79a>
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c22:	d204      	bcs.n	8008c2e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c2a:	60da      	str	r2, [r3, #12]
 8008c2c:	e17c      	b.n	8008f28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c34:	e178      	b.n	8008f28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c3e:	f040 80c5 	bne.w	8008dcc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008c42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	dc48      	bgt.n	8008cdc <UART_SetConfig+0x848>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	db7b      	blt.n	8008d46 <UART_SetConfig+0x8b2>
 8008c4e:	2b20      	cmp	r3, #32
 8008c50:	d879      	bhi.n	8008d46 <UART_SetConfig+0x8b2>
 8008c52:	a201      	add	r2, pc, #4	@ (adr r2, 8008c58 <UART_SetConfig+0x7c4>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008ce3 	.word	0x08008ce3
 8008c5c:	08008ceb 	.word	0x08008ceb
 8008c60:	08008d47 	.word	0x08008d47
 8008c64:	08008d47 	.word	0x08008d47
 8008c68:	08008cf3 	.word	0x08008cf3
 8008c6c:	08008d47 	.word	0x08008d47
 8008c70:	08008d47 	.word	0x08008d47
 8008c74:	08008d47 	.word	0x08008d47
 8008c78:	08008d03 	.word	0x08008d03
 8008c7c:	08008d47 	.word	0x08008d47
 8008c80:	08008d47 	.word	0x08008d47
 8008c84:	08008d47 	.word	0x08008d47
 8008c88:	08008d47 	.word	0x08008d47
 8008c8c:	08008d47 	.word	0x08008d47
 8008c90:	08008d47 	.word	0x08008d47
 8008c94:	08008d47 	.word	0x08008d47
 8008c98:	08008d13 	.word	0x08008d13
 8008c9c:	08008d47 	.word	0x08008d47
 8008ca0:	08008d47 	.word	0x08008d47
 8008ca4:	08008d47 	.word	0x08008d47
 8008ca8:	08008d47 	.word	0x08008d47
 8008cac:	08008d47 	.word	0x08008d47
 8008cb0:	08008d47 	.word	0x08008d47
 8008cb4:	08008d47 	.word	0x08008d47
 8008cb8:	08008d47 	.word	0x08008d47
 8008cbc:	08008d47 	.word	0x08008d47
 8008cc0:	08008d47 	.word	0x08008d47
 8008cc4:	08008d47 	.word	0x08008d47
 8008cc8:	08008d47 	.word	0x08008d47
 8008ccc:	08008d47 	.word	0x08008d47
 8008cd0:	08008d47 	.word	0x08008d47
 8008cd4:	08008d47 	.word	0x08008d47
 8008cd8:	08008d39 	.word	0x08008d39
 8008cdc:	2b40      	cmp	r3, #64	@ 0x40
 8008cde:	d02e      	beq.n	8008d3e <UART_SetConfig+0x8aa>
 8008ce0:	e031      	b.n	8008d46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ce2:	f7fb fbe3 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8008ce6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ce8:	e033      	b.n	8008d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cea:	f7fb fbf5 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8008cee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cf0:	e02f      	b.n	8008d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fc fe24 	bl	8005944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d00:	e027      	b.n	8008d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d02:	f107 0318 	add.w	r3, r7, #24
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fc ff70 	bl	8005bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d10:	e01f      	b.n	8008d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d12:	4b2d      	ldr	r3, [pc, #180]	@ (8008dc8 <UART_SetConfig+0x934>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8008dc8 <UART_SetConfig+0x934>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	08db      	lsrs	r3, r3, #3
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	4a24      	ldr	r2, [pc, #144]	@ (8008dbc <UART_SetConfig+0x928>)
 8008d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d30:	e00f      	b.n	8008d52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008d32:	4b22      	ldr	r3, [pc, #136]	@ (8008dbc <UART_SetConfig+0x928>)
 8008d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d36:	e00c      	b.n	8008d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d38:	4b21      	ldr	r3, [pc, #132]	@ (8008dc0 <UART_SetConfig+0x92c>)
 8008d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d3c:	e009      	b.n	8008d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d44:	e005      	b.n	8008d52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80e7 	beq.w	8008f28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5e:	4a19      	ldr	r2, [pc, #100]	@ (8008dc4 <UART_SetConfig+0x930>)
 8008d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d6c:	005a      	lsls	r2, r3, #1
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	441a      	add	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d82:	2b0f      	cmp	r3, #15
 8008d84:	d916      	bls.n	8008db4 <UART_SetConfig+0x920>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d8c:	d212      	bcs.n	8008db4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	f023 030f 	bic.w	r3, r3, #15
 8008d96:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008da6:	4313      	orrs	r3, r2
 8008da8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008db0:	60da      	str	r2, [r3, #12]
 8008db2:	e0b9      	b.n	8008f28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008dba:	e0b5      	b.n	8008f28 <UART_SetConfig+0xa94>
 8008dbc:	03d09000 	.word	0x03d09000
 8008dc0:	003d0900 	.word	0x003d0900
 8008dc4:	0800e5d0 	.word	0x0800e5d0
 8008dc8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dcc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	dc49      	bgt.n	8008e68 <UART_SetConfig+0x9d4>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	db7c      	blt.n	8008ed2 <UART_SetConfig+0xa3e>
 8008dd8:	2b20      	cmp	r3, #32
 8008dda:	d87a      	bhi.n	8008ed2 <UART_SetConfig+0xa3e>
 8008ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <UART_SetConfig+0x950>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008e6f 	.word	0x08008e6f
 8008de8:	08008e77 	.word	0x08008e77
 8008dec:	08008ed3 	.word	0x08008ed3
 8008df0:	08008ed3 	.word	0x08008ed3
 8008df4:	08008e7f 	.word	0x08008e7f
 8008df8:	08008ed3 	.word	0x08008ed3
 8008dfc:	08008ed3 	.word	0x08008ed3
 8008e00:	08008ed3 	.word	0x08008ed3
 8008e04:	08008e8f 	.word	0x08008e8f
 8008e08:	08008ed3 	.word	0x08008ed3
 8008e0c:	08008ed3 	.word	0x08008ed3
 8008e10:	08008ed3 	.word	0x08008ed3
 8008e14:	08008ed3 	.word	0x08008ed3
 8008e18:	08008ed3 	.word	0x08008ed3
 8008e1c:	08008ed3 	.word	0x08008ed3
 8008e20:	08008ed3 	.word	0x08008ed3
 8008e24:	08008e9f 	.word	0x08008e9f
 8008e28:	08008ed3 	.word	0x08008ed3
 8008e2c:	08008ed3 	.word	0x08008ed3
 8008e30:	08008ed3 	.word	0x08008ed3
 8008e34:	08008ed3 	.word	0x08008ed3
 8008e38:	08008ed3 	.word	0x08008ed3
 8008e3c:	08008ed3 	.word	0x08008ed3
 8008e40:	08008ed3 	.word	0x08008ed3
 8008e44:	08008ed3 	.word	0x08008ed3
 8008e48:	08008ed3 	.word	0x08008ed3
 8008e4c:	08008ed3 	.word	0x08008ed3
 8008e50:	08008ed3 	.word	0x08008ed3
 8008e54:	08008ed3 	.word	0x08008ed3
 8008e58:	08008ed3 	.word	0x08008ed3
 8008e5c:	08008ed3 	.word	0x08008ed3
 8008e60:	08008ed3 	.word	0x08008ed3
 8008e64:	08008ec5 	.word	0x08008ec5
 8008e68:	2b40      	cmp	r3, #64	@ 0x40
 8008e6a:	d02e      	beq.n	8008eca <UART_SetConfig+0xa36>
 8008e6c:	e031      	b.n	8008ed2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e6e:	f7fb fb1d 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8008e72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e74:	e033      	b.n	8008ede <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e76:	f7fb fb2f 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8008e7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e7c:	e02f      	b.n	8008ede <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fc fd5e 	bl	8005944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e8c:	e027      	b.n	8008ede <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e8e:	f107 0318 	add.w	r3, r7, #24
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fc feaa 	bl	8005bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e9c:	e01f      	b.n	8008ede <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8008f54 <UART_SetConfig+0xac0>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8008f54 <UART_SetConfig+0xac0>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	08db      	lsrs	r3, r3, #3
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	4a28      	ldr	r2, [pc, #160]	@ (8008f58 <UART_SetConfig+0xac4>)
 8008eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ebc:	e00f      	b.n	8008ede <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008ebe:	4b26      	ldr	r3, [pc, #152]	@ (8008f58 <UART_SetConfig+0xac4>)
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec2:	e00c      	b.n	8008ede <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ec4:	4b25      	ldr	r3, [pc, #148]	@ (8008f5c <UART_SetConfig+0xac8>)
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec8:	e009      	b.n	8008ede <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed0:	e005      	b.n	8008ede <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008edc:	bf00      	nop
    }

    if (pclk != 0U)
 8008ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d021      	beq.n	8008f28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f60 <UART_SetConfig+0xacc>)
 8008eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ef2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	085b      	lsrs	r3, r3, #1
 8008efc:	441a      	add	r2, r3
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	2b0f      	cmp	r3, #15
 8008f0c:	d909      	bls.n	8008f22 <UART_SetConfig+0xa8e>
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f14:	d205      	bcs.n	8008f22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60da      	str	r2, [r3, #12]
 8008f20:	e002      	b.n	8008f28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2200      	movs	r2, #0
 8008f42:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f44:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3748      	adds	r7, #72	@ 0x48
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f52:	bf00      	nop
 8008f54:	58024400 	.word	0x58024400
 8008f58:	03d09000 	.word	0x03d09000
 8008f5c:	003d0900 	.word	0x003d0900
 8008f60:	0800e5d0 	.word	0x0800e5d0

08008f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f70:	f003 0308 	and.w	r3, r3, #8
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00a      	beq.n	8008f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00a      	beq.n	8008fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd6:	f003 0304 	and.w	r3, r3, #4
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00a      	beq.n	8009016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01a      	beq.n	800907a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800905e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009062:	d10a      	bne.n	800907a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	605a      	str	r2, [r3, #4]
  }
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b098      	sub	sp, #96	@ 0x60
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090b8:	f7f9 fe76 	bl	8002da8 <HAL_GetTick>
 80090bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d12f      	bne.n	800912c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090d4:	2200      	movs	r2, #0
 80090d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f88e 	bl	80091fc <UART_WaitOnFlagUntilTimeout>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d022      	beq.n	800912c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009104:	647b      	str	r3, [r7, #68]	@ 0x44
 8009106:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800910a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e6      	bne.n	80090e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2220      	movs	r2, #32
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e063      	b.n	80091f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b04      	cmp	r3, #4
 8009138:	d149      	bne.n	80091ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800913a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009142:	2200      	movs	r2, #0
 8009144:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f857 	bl	80091fc <UART_WaitOnFlagUntilTimeout>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d03c      	beq.n	80091ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	623b      	str	r3, [r7, #32]
   return(result);
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009168:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009172:	633b      	str	r3, [r7, #48]	@ 0x30
 8009174:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e6      	bne.n	8009154 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3308      	adds	r3, #8
 800918c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	60fb      	str	r3, [r7, #12]
   return(result);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f023 0301 	bic.w	r3, r3, #1
 800919c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091a6:	61fa      	str	r2, [r7, #28]
 80091a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	69b9      	ldr	r1, [r7, #24]
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	617b      	str	r3, [r7, #20]
   return(result);
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e5      	bne.n	8009186 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2220      	movs	r2, #32
 80091be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e012      	b.n	80091f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3758      	adds	r7, #88	@ 0x58
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	4613      	mov	r3, r2
 800920a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800920c:	e04f      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009214:	d04b      	beq.n	80092ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009216:	f7f9 fdc7 	bl	8002da8 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	429a      	cmp	r2, r3
 8009224:	d302      	bcc.n	800922c <UART_WaitOnFlagUntilTimeout+0x30>
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e04e      	b.n	80092ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d037      	beq.n	80092ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b80      	cmp	r3, #128	@ 0x80
 8009242:	d034      	beq.n	80092ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2b40      	cmp	r3, #64	@ 0x40
 8009248:	d031      	beq.n	80092ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	f003 0308 	and.w	r3, r3, #8
 8009254:	2b08      	cmp	r3, #8
 8009256:	d110      	bne.n	800927a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2208      	movs	r2, #8
 800925e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 f839 	bl	80092d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2208      	movs	r2, #8
 800926a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e029      	b.n	80092ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009288:	d111      	bne.n	80092ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f000 f81f 	bl	80092d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e00f      	b.n	80092ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	69da      	ldr	r2, [r3, #28]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4013      	ands	r3, r2
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	bf0c      	ite	eq
 80092be:	2301      	moveq	r3, #1
 80092c0:	2300      	movne	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	461a      	mov	r2, r3
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d0a0      	beq.n	800920e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092d8:	b480      	push	{r7}
 80092da:	b095      	sub	sp, #84	@ 0x54
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e8:	e853 3f00 	ldrex	r3, [r3]
 80092ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009300:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009302:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009304:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009306:	e841 2300 	strex	r3, r2, [r1]
 800930a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800930c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1e6      	bne.n	80092e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3308      	adds	r3, #8
 8009318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	61fb      	str	r3, [r7, #28]
   return(result);
 8009322:	69fa      	ldr	r2, [r7, #28]
 8009324:	4b1e      	ldr	r3, [pc, #120]	@ (80093a0 <UART_EndRxTransfer+0xc8>)
 8009326:	4013      	ands	r3, r2
 8009328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009334:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e5      	bne.n	8009312 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800934a:	2b01      	cmp	r3, #1
 800934c:	d118      	bne.n	8009380 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	60bb      	str	r3, [r7, #8]
   return(result);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f023 0310 	bic.w	r3, r3, #16
 8009362:	647b      	str	r3, [r7, #68]	@ 0x44
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800936c:	61bb      	str	r3, [r7, #24]
 800936e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6979      	ldr	r1, [r7, #20]
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	613b      	str	r3, [r7, #16]
   return(result);
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e6      	bne.n	800934e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2220      	movs	r2, #32
 8009384:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009394:	bf00      	nop
 8009396:	3754      	adds	r7, #84	@ 0x54
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	effffffe 	.word	0xeffffffe

080093a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d101      	bne.n	80093ba <HAL_UARTEx_DisableFifoMode+0x16>
 80093b6:	2302      	movs	r3, #2
 80093b8:	e027      	b.n	800940a <HAL_UARTEx_DisableFifoMode+0x66>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2224      	movs	r2, #36	@ 0x24
 80093c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0201 	bic.w	r2, r2, #1
 80093e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80093e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009426:	2b01      	cmp	r3, #1
 8009428:	d101      	bne.n	800942e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800942a:	2302      	movs	r3, #2
 800942c:	e02d      	b.n	800948a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2224      	movs	r2, #36	@ 0x24
 800943a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0201 	bic.w	r2, r2, #1
 8009454:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f850 	bl	8009510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2220      	movs	r2, #32
 800947c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e02d      	b.n	8009506 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2224      	movs	r2, #36	@ 0x24
 80094b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0201 	bic.w	r2, r2, #1
 80094d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f812 	bl	8009510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800951c:	2b00      	cmp	r3, #0
 800951e:	d108      	bne.n	8009532 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009530:	e031      	b.n	8009596 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009532:	2310      	movs	r3, #16
 8009534:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009536:	2310      	movs	r3, #16
 8009538:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	0e5b      	lsrs	r3, r3, #25
 8009542:	b2db      	uxtb	r3, r3
 8009544:	f003 0307 	and.w	r3, r3, #7
 8009548:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	0f5b      	lsrs	r3, r3, #29
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f003 0307 	and.w	r3, r3, #7
 8009558:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	7b3a      	ldrb	r2, [r7, #12]
 800955e:	4911      	ldr	r1, [pc, #68]	@ (80095a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009560:	5c8a      	ldrb	r2, [r1, r2]
 8009562:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009566:	7b3a      	ldrb	r2, [r7, #12]
 8009568:	490f      	ldr	r1, [pc, #60]	@ (80095a8 <UARTEx_SetNbDataToProcess+0x98>)
 800956a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800956c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	7b7a      	ldrb	r2, [r7, #13]
 800957c:	4909      	ldr	r1, [pc, #36]	@ (80095a4 <UARTEx_SetNbDataToProcess+0x94>)
 800957e:	5c8a      	ldrb	r2, [r1, r2]
 8009580:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009584:	7b7a      	ldrb	r2, [r7, #13]
 8009586:	4908      	ldr	r1, [pc, #32]	@ (80095a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009588:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800958a:	fb93 f3f2 	sdiv	r3, r3, r2
 800958e:	b29a      	uxth	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009596:	bf00      	nop
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	0800e5e8 	.word	0x0800e5e8
 80095a8:	0800e5f0 	.word	0x0800e5f0

080095ac <__cvt>:
 80095ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ae:	ed2d 8b02 	vpush	{d8}
 80095b2:	eeb0 8b40 	vmov.f64	d8, d0
 80095b6:	b085      	sub	sp, #20
 80095b8:	4617      	mov	r7, r2
 80095ba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80095bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095be:	ee18 2a90 	vmov	r2, s17
 80095c2:	f025 0520 	bic.w	r5, r5, #32
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	bfb6      	itet	lt
 80095ca:	222d      	movlt	r2, #45	@ 0x2d
 80095cc:	2200      	movge	r2, #0
 80095ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80095d2:	2d46      	cmp	r5, #70	@ 0x46
 80095d4:	460c      	mov	r4, r1
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	d004      	beq.n	80095e4 <__cvt+0x38>
 80095da:	2d45      	cmp	r5, #69	@ 0x45
 80095dc:	d100      	bne.n	80095e0 <__cvt+0x34>
 80095de:	3401      	adds	r4, #1
 80095e0:	2102      	movs	r1, #2
 80095e2:	e000      	b.n	80095e6 <__cvt+0x3a>
 80095e4:	2103      	movs	r1, #3
 80095e6:	ab03      	add	r3, sp, #12
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	ab02      	add	r3, sp, #8
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	4622      	mov	r2, r4
 80095f0:	4633      	mov	r3, r6
 80095f2:	eeb0 0b48 	vmov.f64	d0, d8
 80095f6:	f001 fe1f 	bl	800b238 <_dtoa_r>
 80095fa:	2d47      	cmp	r5, #71	@ 0x47
 80095fc:	d114      	bne.n	8009628 <__cvt+0x7c>
 80095fe:	07fb      	lsls	r3, r7, #31
 8009600:	d50a      	bpl.n	8009618 <__cvt+0x6c>
 8009602:	1902      	adds	r2, r0, r4
 8009604:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960c:	bf08      	it	eq
 800960e:	9203      	streq	r2, [sp, #12]
 8009610:	2130      	movs	r1, #48	@ 0x30
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	4293      	cmp	r3, r2
 8009616:	d319      	bcc.n	800964c <__cvt+0xa0>
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800961c:	1a1b      	subs	r3, r3, r0
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	b005      	add	sp, #20
 8009622:	ecbd 8b02 	vpop	{d8}
 8009626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009628:	2d46      	cmp	r5, #70	@ 0x46
 800962a:	eb00 0204 	add.w	r2, r0, r4
 800962e:	d1e9      	bne.n	8009604 <__cvt+0x58>
 8009630:	7803      	ldrb	r3, [r0, #0]
 8009632:	2b30      	cmp	r3, #48	@ 0x30
 8009634:	d107      	bne.n	8009646 <__cvt+0x9a>
 8009636:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	bf1c      	itt	ne
 8009640:	f1c4 0401 	rsbne	r4, r4, #1
 8009644:	6034      	strne	r4, [r6, #0]
 8009646:	6833      	ldr	r3, [r6, #0]
 8009648:	441a      	add	r2, r3
 800964a:	e7db      	b.n	8009604 <__cvt+0x58>
 800964c:	1c5c      	adds	r4, r3, #1
 800964e:	9403      	str	r4, [sp, #12]
 8009650:	7019      	strb	r1, [r3, #0]
 8009652:	e7de      	b.n	8009612 <__cvt+0x66>

08009654 <__exponent>:
 8009654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009656:	2900      	cmp	r1, #0
 8009658:	bfba      	itte	lt
 800965a:	4249      	neglt	r1, r1
 800965c:	232d      	movlt	r3, #45	@ 0x2d
 800965e:	232b      	movge	r3, #43	@ 0x2b
 8009660:	2909      	cmp	r1, #9
 8009662:	7002      	strb	r2, [r0, #0]
 8009664:	7043      	strb	r3, [r0, #1]
 8009666:	dd29      	ble.n	80096bc <__exponent+0x68>
 8009668:	f10d 0307 	add.w	r3, sp, #7
 800966c:	461d      	mov	r5, r3
 800966e:	270a      	movs	r7, #10
 8009670:	461a      	mov	r2, r3
 8009672:	fbb1 f6f7 	udiv	r6, r1, r7
 8009676:	fb07 1416 	mls	r4, r7, r6, r1
 800967a:	3430      	adds	r4, #48	@ 0x30
 800967c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009680:	460c      	mov	r4, r1
 8009682:	2c63      	cmp	r4, #99	@ 0x63
 8009684:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009688:	4631      	mov	r1, r6
 800968a:	dcf1      	bgt.n	8009670 <__exponent+0x1c>
 800968c:	3130      	adds	r1, #48	@ 0x30
 800968e:	1e94      	subs	r4, r2, #2
 8009690:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009694:	1c41      	adds	r1, r0, #1
 8009696:	4623      	mov	r3, r4
 8009698:	42ab      	cmp	r3, r5
 800969a:	d30a      	bcc.n	80096b2 <__exponent+0x5e>
 800969c:	f10d 0309 	add.w	r3, sp, #9
 80096a0:	1a9b      	subs	r3, r3, r2
 80096a2:	42ac      	cmp	r4, r5
 80096a4:	bf88      	it	hi
 80096a6:	2300      	movhi	r3, #0
 80096a8:	3302      	adds	r3, #2
 80096aa:	4403      	add	r3, r0
 80096ac:	1a18      	subs	r0, r3, r0
 80096ae:	b003      	add	sp, #12
 80096b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096ba:	e7ed      	b.n	8009698 <__exponent+0x44>
 80096bc:	2330      	movs	r3, #48	@ 0x30
 80096be:	3130      	adds	r1, #48	@ 0x30
 80096c0:	7083      	strb	r3, [r0, #2]
 80096c2:	70c1      	strb	r1, [r0, #3]
 80096c4:	1d03      	adds	r3, r0, #4
 80096c6:	e7f1      	b.n	80096ac <__exponent+0x58>

080096c8 <_printf_float>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	b08d      	sub	sp, #52	@ 0x34
 80096ce:	460c      	mov	r4, r1
 80096d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80096d4:	4616      	mov	r6, r2
 80096d6:	461f      	mov	r7, r3
 80096d8:	4605      	mov	r5, r0
 80096da:	f001 fd03 	bl	800b0e4 <_localeconv_r>
 80096de:	f8d0 b000 	ldr.w	fp, [r0]
 80096e2:	4658      	mov	r0, fp
 80096e4:	f7f6 fe4c 	bl	8000380 <strlen>
 80096e8:	2300      	movs	r3, #0
 80096ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80096ec:	f8d8 3000 	ldr.w	r3, [r8]
 80096f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80096f4:	6822      	ldr	r2, [r4, #0]
 80096f6:	9005      	str	r0, [sp, #20]
 80096f8:	3307      	adds	r3, #7
 80096fa:	f023 0307 	bic.w	r3, r3, #7
 80096fe:	f103 0108 	add.w	r1, r3, #8
 8009702:	f8c8 1000 	str.w	r1, [r8]
 8009706:	ed93 0b00 	vldr	d0, [r3]
 800970a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009968 <_printf_float+0x2a0>
 800970e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009712:	eeb4 7b46 	vcmp.f64	d7, d6
 8009716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800971e:	dd24      	ble.n	800976a <_printf_float+0xa2>
 8009720:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009728:	d502      	bpl.n	8009730 <_printf_float+0x68>
 800972a:	232d      	movs	r3, #45	@ 0x2d
 800972c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009730:	498f      	ldr	r1, [pc, #572]	@ (8009970 <_printf_float+0x2a8>)
 8009732:	4b90      	ldr	r3, [pc, #576]	@ (8009974 <_printf_float+0x2ac>)
 8009734:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009738:	bf8c      	ite	hi
 800973a:	4688      	movhi	r8, r1
 800973c:	4698      	movls	r8, r3
 800973e:	f022 0204 	bic.w	r2, r2, #4
 8009742:	2303      	movs	r3, #3
 8009744:	6123      	str	r3, [r4, #16]
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	f04f 0a00 	mov.w	sl, #0
 800974c:	9700      	str	r7, [sp, #0]
 800974e:	4633      	mov	r3, r6
 8009750:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009752:	4621      	mov	r1, r4
 8009754:	4628      	mov	r0, r5
 8009756:	f000 f9d1 	bl	8009afc <_printf_common>
 800975a:	3001      	adds	r0, #1
 800975c:	f040 8089 	bne.w	8009872 <_printf_float+0x1aa>
 8009760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009764:	b00d      	add	sp, #52	@ 0x34
 8009766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976a:	eeb4 0b40 	vcmp.f64	d0, d0
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	d709      	bvc.n	8009788 <_printf_float+0xc0>
 8009774:	ee10 3a90 	vmov	r3, s1
 8009778:	2b00      	cmp	r3, #0
 800977a:	bfbc      	itt	lt
 800977c:	232d      	movlt	r3, #45	@ 0x2d
 800977e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009782:	497d      	ldr	r1, [pc, #500]	@ (8009978 <_printf_float+0x2b0>)
 8009784:	4b7d      	ldr	r3, [pc, #500]	@ (800997c <_printf_float+0x2b4>)
 8009786:	e7d5      	b.n	8009734 <_printf_float+0x6c>
 8009788:	6863      	ldr	r3, [r4, #4]
 800978a:	1c59      	adds	r1, r3, #1
 800978c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009790:	d139      	bne.n	8009806 <_printf_float+0x13e>
 8009792:	2306      	movs	r3, #6
 8009794:	6063      	str	r3, [r4, #4]
 8009796:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800979a:	2300      	movs	r3, #0
 800979c:	6022      	str	r2, [r4, #0]
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80097a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80097a6:	ab09      	add	r3, sp, #36	@ 0x24
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	6861      	ldr	r1, [r4, #4]
 80097ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80097b0:	4628      	mov	r0, r5
 80097b2:	f7ff fefb 	bl	80095ac <__cvt>
 80097b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80097ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097bc:	4680      	mov	r8, r0
 80097be:	d129      	bne.n	8009814 <_printf_float+0x14c>
 80097c0:	1cc8      	adds	r0, r1, #3
 80097c2:	db02      	blt.n	80097ca <_printf_float+0x102>
 80097c4:	6863      	ldr	r3, [r4, #4]
 80097c6:	4299      	cmp	r1, r3
 80097c8:	dd41      	ble.n	800984e <_printf_float+0x186>
 80097ca:	f1a9 0902 	sub.w	r9, r9, #2
 80097ce:	fa5f f989 	uxtb.w	r9, r9
 80097d2:	3901      	subs	r1, #1
 80097d4:	464a      	mov	r2, r9
 80097d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097da:	9109      	str	r1, [sp, #36]	@ 0x24
 80097dc:	f7ff ff3a 	bl	8009654 <__exponent>
 80097e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097e2:	1813      	adds	r3, r2, r0
 80097e4:	2a01      	cmp	r2, #1
 80097e6:	4682      	mov	sl, r0
 80097e8:	6123      	str	r3, [r4, #16]
 80097ea:	dc02      	bgt.n	80097f2 <_printf_float+0x12a>
 80097ec:	6822      	ldr	r2, [r4, #0]
 80097ee:	07d2      	lsls	r2, r2, #31
 80097f0:	d501      	bpl.n	80097f6 <_printf_float+0x12e>
 80097f2:	3301      	adds	r3, #1
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0a6      	beq.n	800974c <_printf_float+0x84>
 80097fe:	232d      	movs	r3, #45	@ 0x2d
 8009800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009804:	e7a2      	b.n	800974c <_printf_float+0x84>
 8009806:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800980a:	d1c4      	bne.n	8009796 <_printf_float+0xce>
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1c2      	bne.n	8009796 <_printf_float+0xce>
 8009810:	2301      	movs	r3, #1
 8009812:	e7bf      	b.n	8009794 <_printf_float+0xcc>
 8009814:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009818:	d9db      	bls.n	80097d2 <_printf_float+0x10a>
 800981a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800981e:	d118      	bne.n	8009852 <_printf_float+0x18a>
 8009820:	2900      	cmp	r1, #0
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	dd0b      	ble.n	800983e <_printf_float+0x176>
 8009826:	6121      	str	r1, [r4, #16]
 8009828:	b913      	cbnz	r3, 8009830 <_printf_float+0x168>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	07d0      	lsls	r0, r2, #31
 800982e:	d502      	bpl.n	8009836 <_printf_float+0x16e>
 8009830:	3301      	adds	r3, #1
 8009832:	440b      	add	r3, r1
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009838:	f04f 0a00 	mov.w	sl, #0
 800983c:	e7db      	b.n	80097f6 <_printf_float+0x12e>
 800983e:	b913      	cbnz	r3, 8009846 <_printf_float+0x17e>
 8009840:	6822      	ldr	r2, [r4, #0]
 8009842:	07d2      	lsls	r2, r2, #31
 8009844:	d501      	bpl.n	800984a <_printf_float+0x182>
 8009846:	3302      	adds	r3, #2
 8009848:	e7f4      	b.n	8009834 <_printf_float+0x16c>
 800984a:	2301      	movs	r3, #1
 800984c:	e7f2      	b.n	8009834 <_printf_float+0x16c>
 800984e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009852:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009854:	4299      	cmp	r1, r3
 8009856:	db05      	blt.n	8009864 <_printf_float+0x19c>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	6121      	str	r1, [r4, #16]
 800985c:	07d8      	lsls	r0, r3, #31
 800985e:	d5ea      	bpl.n	8009836 <_printf_float+0x16e>
 8009860:	1c4b      	adds	r3, r1, #1
 8009862:	e7e7      	b.n	8009834 <_printf_float+0x16c>
 8009864:	2900      	cmp	r1, #0
 8009866:	bfd4      	ite	le
 8009868:	f1c1 0202 	rsble	r2, r1, #2
 800986c:	2201      	movgt	r2, #1
 800986e:	4413      	add	r3, r2
 8009870:	e7e0      	b.n	8009834 <_printf_float+0x16c>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	055a      	lsls	r2, r3, #21
 8009876:	d407      	bmi.n	8009888 <_printf_float+0x1c0>
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	4642      	mov	r2, r8
 800987c:	4631      	mov	r1, r6
 800987e:	4628      	mov	r0, r5
 8009880:	47b8      	blx	r7
 8009882:	3001      	adds	r0, #1
 8009884:	d12a      	bne.n	80098dc <_printf_float+0x214>
 8009886:	e76b      	b.n	8009760 <_printf_float+0x98>
 8009888:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800988c:	f240 80e0 	bls.w	8009a50 <_printf_float+0x388>
 8009890:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009894:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989c:	d133      	bne.n	8009906 <_printf_float+0x23e>
 800989e:	4a38      	ldr	r2, [pc, #224]	@ (8009980 <_printf_float+0x2b8>)
 80098a0:	2301      	movs	r3, #1
 80098a2:	4631      	mov	r1, r6
 80098a4:	4628      	mov	r0, r5
 80098a6:	47b8      	blx	r7
 80098a8:	3001      	adds	r0, #1
 80098aa:	f43f af59 	beq.w	8009760 <_printf_float+0x98>
 80098ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80098b2:	4543      	cmp	r3, r8
 80098b4:	db02      	blt.n	80098bc <_printf_float+0x1f4>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	07d8      	lsls	r0, r3, #31
 80098ba:	d50f      	bpl.n	80098dc <_printf_float+0x214>
 80098bc:	9b05      	ldr	r3, [sp, #20]
 80098be:	465a      	mov	r2, fp
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f af4a 	beq.w	8009760 <_printf_float+0x98>
 80098cc:	f04f 0900 	mov.w	r9, #0
 80098d0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80098d4:	f104 0a1a 	add.w	sl, r4, #26
 80098d8:	45c8      	cmp	r8, r9
 80098da:	dc09      	bgt.n	80098f0 <_printf_float+0x228>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	079b      	lsls	r3, r3, #30
 80098e0:	f100 8107 	bmi.w	8009af2 <_printf_float+0x42a>
 80098e4:	68e0      	ldr	r0, [r4, #12]
 80098e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098e8:	4298      	cmp	r0, r3
 80098ea:	bfb8      	it	lt
 80098ec:	4618      	movlt	r0, r3
 80098ee:	e739      	b.n	8009764 <_printf_float+0x9c>
 80098f0:	2301      	movs	r3, #1
 80098f2:	4652      	mov	r2, sl
 80098f4:	4631      	mov	r1, r6
 80098f6:	4628      	mov	r0, r5
 80098f8:	47b8      	blx	r7
 80098fa:	3001      	adds	r0, #1
 80098fc:	f43f af30 	beq.w	8009760 <_printf_float+0x98>
 8009900:	f109 0901 	add.w	r9, r9, #1
 8009904:	e7e8      	b.n	80098d8 <_printf_float+0x210>
 8009906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009908:	2b00      	cmp	r3, #0
 800990a:	dc3b      	bgt.n	8009984 <_printf_float+0x2bc>
 800990c:	4a1c      	ldr	r2, [pc, #112]	@ (8009980 <_printf_float+0x2b8>)
 800990e:	2301      	movs	r3, #1
 8009910:	4631      	mov	r1, r6
 8009912:	4628      	mov	r0, r5
 8009914:	47b8      	blx	r7
 8009916:	3001      	adds	r0, #1
 8009918:	f43f af22 	beq.w	8009760 <_printf_float+0x98>
 800991c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009920:	ea59 0303 	orrs.w	r3, r9, r3
 8009924:	d102      	bne.n	800992c <_printf_float+0x264>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	07d9      	lsls	r1, r3, #31
 800992a:	d5d7      	bpl.n	80098dc <_printf_float+0x214>
 800992c:	9b05      	ldr	r3, [sp, #20]
 800992e:	465a      	mov	r2, fp
 8009930:	4631      	mov	r1, r6
 8009932:	4628      	mov	r0, r5
 8009934:	47b8      	blx	r7
 8009936:	3001      	adds	r0, #1
 8009938:	f43f af12 	beq.w	8009760 <_printf_float+0x98>
 800993c:	f04f 0a00 	mov.w	sl, #0
 8009940:	f104 0b1a 	add.w	fp, r4, #26
 8009944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009946:	425b      	negs	r3, r3
 8009948:	4553      	cmp	r3, sl
 800994a:	dc01      	bgt.n	8009950 <_printf_float+0x288>
 800994c:	464b      	mov	r3, r9
 800994e:	e794      	b.n	800987a <_printf_float+0x1b2>
 8009950:	2301      	movs	r3, #1
 8009952:	465a      	mov	r2, fp
 8009954:	4631      	mov	r1, r6
 8009956:	4628      	mov	r0, r5
 8009958:	47b8      	blx	r7
 800995a:	3001      	adds	r0, #1
 800995c:	f43f af00 	beq.w	8009760 <_printf_float+0x98>
 8009960:	f10a 0a01 	add.w	sl, sl, #1
 8009964:	e7ee      	b.n	8009944 <_printf_float+0x27c>
 8009966:	bf00      	nop
 8009968:	ffffffff 	.word	0xffffffff
 800996c:	7fefffff 	.word	0x7fefffff
 8009970:	0800e5fc 	.word	0x0800e5fc
 8009974:	0800e5f8 	.word	0x0800e5f8
 8009978:	0800e604 	.word	0x0800e604
 800997c:	0800e600 	.word	0x0800e600
 8009980:	0800e608 	.word	0x0800e608
 8009984:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009986:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800998a:	4553      	cmp	r3, sl
 800998c:	bfa8      	it	ge
 800998e:	4653      	movge	r3, sl
 8009990:	2b00      	cmp	r3, #0
 8009992:	4699      	mov	r9, r3
 8009994:	dc37      	bgt.n	8009a06 <_printf_float+0x33e>
 8009996:	2300      	movs	r3, #0
 8009998:	9307      	str	r3, [sp, #28]
 800999a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800999e:	f104 021a 	add.w	r2, r4, #26
 80099a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099a4:	9907      	ldr	r1, [sp, #28]
 80099a6:	9306      	str	r3, [sp, #24]
 80099a8:	eba3 0309 	sub.w	r3, r3, r9
 80099ac:	428b      	cmp	r3, r1
 80099ae:	dc31      	bgt.n	8009a14 <_printf_float+0x34c>
 80099b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b2:	459a      	cmp	sl, r3
 80099b4:	dc3b      	bgt.n	8009a2e <_printf_float+0x366>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	07da      	lsls	r2, r3, #31
 80099ba:	d438      	bmi.n	8009a2e <_printf_float+0x366>
 80099bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099be:	ebaa 0903 	sub.w	r9, sl, r3
 80099c2:	9b06      	ldr	r3, [sp, #24]
 80099c4:	ebaa 0303 	sub.w	r3, sl, r3
 80099c8:	4599      	cmp	r9, r3
 80099ca:	bfa8      	it	ge
 80099cc:	4699      	movge	r9, r3
 80099ce:	f1b9 0f00 	cmp.w	r9, #0
 80099d2:	dc34      	bgt.n	8009a3e <_printf_float+0x376>
 80099d4:	f04f 0800 	mov.w	r8, #0
 80099d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099dc:	f104 0b1a 	add.w	fp, r4, #26
 80099e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e2:	ebaa 0303 	sub.w	r3, sl, r3
 80099e6:	eba3 0309 	sub.w	r3, r3, r9
 80099ea:	4543      	cmp	r3, r8
 80099ec:	f77f af76 	ble.w	80098dc <_printf_float+0x214>
 80099f0:	2301      	movs	r3, #1
 80099f2:	465a      	mov	r2, fp
 80099f4:	4631      	mov	r1, r6
 80099f6:	4628      	mov	r0, r5
 80099f8:	47b8      	blx	r7
 80099fa:	3001      	adds	r0, #1
 80099fc:	f43f aeb0 	beq.w	8009760 <_printf_float+0x98>
 8009a00:	f108 0801 	add.w	r8, r8, #1
 8009a04:	e7ec      	b.n	80099e0 <_printf_float+0x318>
 8009a06:	4642      	mov	r2, r8
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d1c1      	bne.n	8009996 <_printf_float+0x2ce>
 8009a12:	e6a5      	b.n	8009760 <_printf_float+0x98>
 8009a14:	2301      	movs	r3, #1
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	9206      	str	r2, [sp, #24]
 8009a1c:	47b8      	blx	r7
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f43f ae9e 	beq.w	8009760 <_printf_float+0x98>
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	9a06      	ldr	r2, [sp, #24]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	9307      	str	r3, [sp, #28]
 8009a2c:	e7b9      	b.n	80099a2 <_printf_float+0x2da>
 8009a2e:	9b05      	ldr	r3, [sp, #20]
 8009a30:	465a      	mov	r2, fp
 8009a32:	4631      	mov	r1, r6
 8009a34:	4628      	mov	r0, r5
 8009a36:	47b8      	blx	r7
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d1bf      	bne.n	80099bc <_printf_float+0x2f4>
 8009a3c:	e690      	b.n	8009760 <_printf_float+0x98>
 8009a3e:	9a06      	ldr	r2, [sp, #24]
 8009a40:	464b      	mov	r3, r9
 8009a42:	4442      	add	r2, r8
 8009a44:	4631      	mov	r1, r6
 8009a46:	4628      	mov	r0, r5
 8009a48:	47b8      	blx	r7
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	d1c2      	bne.n	80099d4 <_printf_float+0x30c>
 8009a4e:	e687      	b.n	8009760 <_printf_float+0x98>
 8009a50:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009a54:	f1b9 0f01 	cmp.w	r9, #1
 8009a58:	dc01      	bgt.n	8009a5e <_printf_float+0x396>
 8009a5a:	07db      	lsls	r3, r3, #31
 8009a5c:	d536      	bpl.n	8009acc <_printf_float+0x404>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	4642      	mov	r2, r8
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f ae79 	beq.w	8009760 <_printf_float+0x98>
 8009a6e:	9b05      	ldr	r3, [sp, #20]
 8009a70:	465a      	mov	r2, fp
 8009a72:	4631      	mov	r1, r6
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	f43f ae71 	beq.w	8009760 <_printf_float+0x98>
 8009a7e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009a82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8009a8e:	d018      	beq.n	8009ac2 <_printf_float+0x3fa>
 8009a90:	464b      	mov	r3, r9
 8009a92:	f108 0201 	add.w	r2, r8, #1
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b8      	blx	r7
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d10c      	bne.n	8009aba <_printf_float+0x3f2>
 8009aa0:	e65e      	b.n	8009760 <_printf_float+0x98>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	465a      	mov	r2, fp
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b8      	blx	r7
 8009aac:	3001      	adds	r0, #1
 8009aae:	f43f ae57 	beq.w	8009760 <_printf_float+0x98>
 8009ab2:	f108 0801 	add.w	r8, r8, #1
 8009ab6:	45c8      	cmp	r8, r9
 8009ab8:	dbf3      	blt.n	8009aa2 <_printf_float+0x3da>
 8009aba:	4653      	mov	r3, sl
 8009abc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ac0:	e6dc      	b.n	800987c <_printf_float+0x1b4>
 8009ac2:	f04f 0800 	mov.w	r8, #0
 8009ac6:	f104 0b1a 	add.w	fp, r4, #26
 8009aca:	e7f4      	b.n	8009ab6 <_printf_float+0x3ee>
 8009acc:	2301      	movs	r3, #1
 8009ace:	4642      	mov	r2, r8
 8009ad0:	e7e1      	b.n	8009a96 <_printf_float+0x3ce>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	464a      	mov	r2, r9
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	f43f ae3f 	beq.w	8009760 <_printf_float+0x98>
 8009ae2:	f108 0801 	add.w	r8, r8, #1
 8009ae6:	68e3      	ldr	r3, [r4, #12]
 8009ae8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009aea:	1a5b      	subs	r3, r3, r1
 8009aec:	4543      	cmp	r3, r8
 8009aee:	dcf0      	bgt.n	8009ad2 <_printf_float+0x40a>
 8009af0:	e6f8      	b.n	80098e4 <_printf_float+0x21c>
 8009af2:	f04f 0800 	mov.w	r8, #0
 8009af6:	f104 0919 	add.w	r9, r4, #25
 8009afa:	e7f4      	b.n	8009ae6 <_printf_float+0x41e>

08009afc <_printf_common>:
 8009afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b00:	4616      	mov	r6, r2
 8009b02:	4698      	mov	r8, r3
 8009b04:	688a      	ldr	r2, [r1, #8]
 8009b06:	690b      	ldr	r3, [r1, #16]
 8009b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	bfb8      	it	lt
 8009b10:	4613      	movlt	r3, r2
 8009b12:	6033      	str	r3, [r6, #0]
 8009b14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b18:	4607      	mov	r7, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	b10a      	cbz	r2, 8009b22 <_printf_common+0x26>
 8009b1e:	3301      	adds	r3, #1
 8009b20:	6033      	str	r3, [r6, #0]
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	0699      	lsls	r1, r3, #26
 8009b26:	bf42      	ittt	mi
 8009b28:	6833      	ldrmi	r3, [r6, #0]
 8009b2a:	3302      	addmi	r3, #2
 8009b2c:	6033      	strmi	r3, [r6, #0]
 8009b2e:	6825      	ldr	r5, [r4, #0]
 8009b30:	f015 0506 	ands.w	r5, r5, #6
 8009b34:	d106      	bne.n	8009b44 <_printf_common+0x48>
 8009b36:	f104 0a19 	add.w	sl, r4, #25
 8009b3a:	68e3      	ldr	r3, [r4, #12]
 8009b3c:	6832      	ldr	r2, [r6, #0]
 8009b3e:	1a9b      	subs	r3, r3, r2
 8009b40:	42ab      	cmp	r3, r5
 8009b42:	dc26      	bgt.n	8009b92 <_printf_common+0x96>
 8009b44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b48:	6822      	ldr	r2, [r4, #0]
 8009b4a:	3b00      	subs	r3, #0
 8009b4c:	bf18      	it	ne
 8009b4e:	2301      	movne	r3, #1
 8009b50:	0692      	lsls	r2, r2, #26
 8009b52:	d42b      	bmi.n	8009bac <_printf_common+0xb0>
 8009b54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b58:	4641      	mov	r1, r8
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	47c8      	blx	r9
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d01e      	beq.n	8009ba0 <_printf_common+0xa4>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	6922      	ldr	r2, [r4, #16]
 8009b66:	f003 0306 	and.w	r3, r3, #6
 8009b6a:	2b04      	cmp	r3, #4
 8009b6c:	bf02      	ittt	eq
 8009b6e:	68e5      	ldreq	r5, [r4, #12]
 8009b70:	6833      	ldreq	r3, [r6, #0]
 8009b72:	1aed      	subeq	r5, r5, r3
 8009b74:	68a3      	ldr	r3, [r4, #8]
 8009b76:	bf0c      	ite	eq
 8009b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b7c:	2500      	movne	r5, #0
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	bfc4      	itt	gt
 8009b82:	1a9b      	subgt	r3, r3, r2
 8009b84:	18ed      	addgt	r5, r5, r3
 8009b86:	2600      	movs	r6, #0
 8009b88:	341a      	adds	r4, #26
 8009b8a:	42b5      	cmp	r5, r6
 8009b8c:	d11a      	bne.n	8009bc4 <_printf_common+0xc8>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e008      	b.n	8009ba4 <_printf_common+0xa8>
 8009b92:	2301      	movs	r3, #1
 8009b94:	4652      	mov	r2, sl
 8009b96:	4641      	mov	r1, r8
 8009b98:	4638      	mov	r0, r7
 8009b9a:	47c8      	blx	r9
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d103      	bne.n	8009ba8 <_printf_common+0xac>
 8009ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba8:	3501      	adds	r5, #1
 8009baa:	e7c6      	b.n	8009b3a <_printf_common+0x3e>
 8009bac:	18e1      	adds	r1, r4, r3
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	2030      	movs	r0, #48	@ 0x30
 8009bb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009bb6:	4422      	add	r2, r4
 8009bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bc0:	3302      	adds	r3, #2
 8009bc2:	e7c7      	b.n	8009b54 <_printf_common+0x58>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	4641      	mov	r1, r8
 8009bca:	4638      	mov	r0, r7
 8009bcc:	47c8      	blx	r9
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d0e6      	beq.n	8009ba0 <_printf_common+0xa4>
 8009bd2:	3601      	adds	r6, #1
 8009bd4:	e7d9      	b.n	8009b8a <_printf_common+0x8e>
	...

08009bd8 <_printf_i>:
 8009bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bdc:	7e0f      	ldrb	r7, [r1, #24]
 8009bde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009be0:	2f78      	cmp	r7, #120	@ 0x78
 8009be2:	4691      	mov	r9, r2
 8009be4:	4680      	mov	r8, r0
 8009be6:	460c      	mov	r4, r1
 8009be8:	469a      	mov	sl, r3
 8009bea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bee:	d807      	bhi.n	8009c00 <_printf_i+0x28>
 8009bf0:	2f62      	cmp	r7, #98	@ 0x62
 8009bf2:	d80a      	bhi.n	8009c0a <_printf_i+0x32>
 8009bf4:	2f00      	cmp	r7, #0
 8009bf6:	f000 80d1 	beq.w	8009d9c <_printf_i+0x1c4>
 8009bfa:	2f58      	cmp	r7, #88	@ 0x58
 8009bfc:	f000 80b8 	beq.w	8009d70 <_printf_i+0x198>
 8009c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c08:	e03a      	b.n	8009c80 <_printf_i+0xa8>
 8009c0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c0e:	2b15      	cmp	r3, #21
 8009c10:	d8f6      	bhi.n	8009c00 <_printf_i+0x28>
 8009c12:	a101      	add	r1, pc, #4	@ (adr r1, 8009c18 <_printf_i+0x40>)
 8009c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c18:	08009c71 	.word	0x08009c71
 8009c1c:	08009c85 	.word	0x08009c85
 8009c20:	08009c01 	.word	0x08009c01
 8009c24:	08009c01 	.word	0x08009c01
 8009c28:	08009c01 	.word	0x08009c01
 8009c2c:	08009c01 	.word	0x08009c01
 8009c30:	08009c85 	.word	0x08009c85
 8009c34:	08009c01 	.word	0x08009c01
 8009c38:	08009c01 	.word	0x08009c01
 8009c3c:	08009c01 	.word	0x08009c01
 8009c40:	08009c01 	.word	0x08009c01
 8009c44:	08009d83 	.word	0x08009d83
 8009c48:	08009caf 	.word	0x08009caf
 8009c4c:	08009d3d 	.word	0x08009d3d
 8009c50:	08009c01 	.word	0x08009c01
 8009c54:	08009c01 	.word	0x08009c01
 8009c58:	08009da5 	.word	0x08009da5
 8009c5c:	08009c01 	.word	0x08009c01
 8009c60:	08009caf 	.word	0x08009caf
 8009c64:	08009c01 	.word	0x08009c01
 8009c68:	08009c01 	.word	0x08009c01
 8009c6c:	08009d45 	.word	0x08009d45
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	1d1a      	adds	r2, r3, #4
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6032      	str	r2, [r6, #0]
 8009c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c80:	2301      	movs	r3, #1
 8009c82:	e09c      	b.n	8009dbe <_printf_i+0x1e6>
 8009c84:	6833      	ldr	r3, [r6, #0]
 8009c86:	6820      	ldr	r0, [r4, #0]
 8009c88:	1d19      	adds	r1, r3, #4
 8009c8a:	6031      	str	r1, [r6, #0]
 8009c8c:	0606      	lsls	r6, r0, #24
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0xbc>
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	e003      	b.n	8009c9c <_printf_i+0xc4>
 8009c94:	0645      	lsls	r5, r0, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0xb8>
 8009c98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c9c:	2d00      	cmp	r5, #0
 8009c9e:	da03      	bge.n	8009ca8 <_printf_i+0xd0>
 8009ca0:	232d      	movs	r3, #45	@ 0x2d
 8009ca2:	426d      	negs	r5, r5
 8009ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ca8:	4858      	ldr	r0, [pc, #352]	@ (8009e0c <_printf_i+0x234>)
 8009caa:	230a      	movs	r3, #10
 8009cac:	e011      	b.n	8009cd2 <_printf_i+0xfa>
 8009cae:	6821      	ldr	r1, [r4, #0]
 8009cb0:	6833      	ldr	r3, [r6, #0]
 8009cb2:	0608      	lsls	r0, r1, #24
 8009cb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009cb8:	d402      	bmi.n	8009cc0 <_printf_i+0xe8>
 8009cba:	0649      	lsls	r1, r1, #25
 8009cbc:	bf48      	it	mi
 8009cbe:	b2ad      	uxthmi	r5, r5
 8009cc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cc2:	4852      	ldr	r0, [pc, #328]	@ (8009e0c <_printf_i+0x234>)
 8009cc4:	6033      	str	r3, [r6, #0]
 8009cc6:	bf14      	ite	ne
 8009cc8:	230a      	movne	r3, #10
 8009cca:	2308      	moveq	r3, #8
 8009ccc:	2100      	movs	r1, #0
 8009cce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cd2:	6866      	ldr	r6, [r4, #4]
 8009cd4:	60a6      	str	r6, [r4, #8]
 8009cd6:	2e00      	cmp	r6, #0
 8009cd8:	db05      	blt.n	8009ce6 <_printf_i+0x10e>
 8009cda:	6821      	ldr	r1, [r4, #0]
 8009cdc:	432e      	orrs	r6, r5
 8009cde:	f021 0104 	bic.w	r1, r1, #4
 8009ce2:	6021      	str	r1, [r4, #0]
 8009ce4:	d04b      	beq.n	8009d7e <_printf_i+0x1a6>
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cec:	fb03 5711 	mls	r7, r3, r1, r5
 8009cf0:	5dc7      	ldrb	r7, [r0, r7]
 8009cf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cf6:	462f      	mov	r7, r5
 8009cf8:	42bb      	cmp	r3, r7
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	d9f4      	bls.n	8009ce8 <_printf_i+0x110>
 8009cfe:	2b08      	cmp	r3, #8
 8009d00:	d10b      	bne.n	8009d1a <_printf_i+0x142>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	07df      	lsls	r7, r3, #31
 8009d06:	d508      	bpl.n	8009d1a <_printf_i+0x142>
 8009d08:	6923      	ldr	r3, [r4, #16]
 8009d0a:	6861      	ldr	r1, [r4, #4]
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	bfde      	ittt	le
 8009d10:	2330      	movle	r3, #48	@ 0x30
 8009d12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d16:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009d1a:	1b92      	subs	r2, r2, r6
 8009d1c:	6122      	str	r2, [r4, #16]
 8009d1e:	f8cd a000 	str.w	sl, [sp]
 8009d22:	464b      	mov	r3, r9
 8009d24:	aa03      	add	r2, sp, #12
 8009d26:	4621      	mov	r1, r4
 8009d28:	4640      	mov	r0, r8
 8009d2a:	f7ff fee7 	bl	8009afc <_printf_common>
 8009d2e:	3001      	adds	r0, #1
 8009d30:	d14a      	bne.n	8009dc8 <_printf_i+0x1f0>
 8009d32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d36:	b004      	add	sp, #16
 8009d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	f043 0320 	orr.w	r3, r3, #32
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	4832      	ldr	r0, [pc, #200]	@ (8009e10 <_printf_i+0x238>)
 8009d46:	2778      	movs	r7, #120	@ 0x78
 8009d48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	6831      	ldr	r1, [r6, #0]
 8009d50:	061f      	lsls	r7, r3, #24
 8009d52:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d56:	d402      	bmi.n	8009d5e <_printf_i+0x186>
 8009d58:	065f      	lsls	r7, r3, #25
 8009d5a:	bf48      	it	mi
 8009d5c:	b2ad      	uxthmi	r5, r5
 8009d5e:	6031      	str	r1, [r6, #0]
 8009d60:	07d9      	lsls	r1, r3, #31
 8009d62:	bf44      	itt	mi
 8009d64:	f043 0320 	orrmi.w	r3, r3, #32
 8009d68:	6023      	strmi	r3, [r4, #0]
 8009d6a:	b11d      	cbz	r5, 8009d74 <_printf_i+0x19c>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	e7ad      	b.n	8009ccc <_printf_i+0xf4>
 8009d70:	4826      	ldr	r0, [pc, #152]	@ (8009e0c <_printf_i+0x234>)
 8009d72:	e7e9      	b.n	8009d48 <_printf_i+0x170>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	f023 0320 	bic.w	r3, r3, #32
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	e7f6      	b.n	8009d6c <_printf_i+0x194>
 8009d7e:	4616      	mov	r6, r2
 8009d80:	e7bd      	b.n	8009cfe <_printf_i+0x126>
 8009d82:	6833      	ldr	r3, [r6, #0]
 8009d84:	6825      	ldr	r5, [r4, #0]
 8009d86:	6961      	ldr	r1, [r4, #20]
 8009d88:	1d18      	adds	r0, r3, #4
 8009d8a:	6030      	str	r0, [r6, #0]
 8009d8c:	062e      	lsls	r6, r5, #24
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	d501      	bpl.n	8009d96 <_printf_i+0x1be>
 8009d92:	6019      	str	r1, [r3, #0]
 8009d94:	e002      	b.n	8009d9c <_printf_i+0x1c4>
 8009d96:	0668      	lsls	r0, r5, #25
 8009d98:	d5fb      	bpl.n	8009d92 <_printf_i+0x1ba>
 8009d9a:	8019      	strh	r1, [r3, #0]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	6123      	str	r3, [r4, #16]
 8009da0:	4616      	mov	r6, r2
 8009da2:	e7bc      	b.n	8009d1e <_printf_i+0x146>
 8009da4:	6833      	ldr	r3, [r6, #0]
 8009da6:	1d1a      	adds	r2, r3, #4
 8009da8:	6032      	str	r2, [r6, #0]
 8009daa:	681e      	ldr	r6, [r3, #0]
 8009dac:	6862      	ldr	r2, [r4, #4]
 8009dae:	2100      	movs	r1, #0
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7f6 fa95 	bl	80002e0 <memchr>
 8009db6:	b108      	cbz	r0, 8009dbc <_printf_i+0x1e4>
 8009db8:	1b80      	subs	r0, r0, r6
 8009dba:	6060      	str	r0, [r4, #4]
 8009dbc:	6863      	ldr	r3, [r4, #4]
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dc6:	e7aa      	b.n	8009d1e <_printf_i+0x146>
 8009dc8:	6923      	ldr	r3, [r4, #16]
 8009dca:	4632      	mov	r2, r6
 8009dcc:	4649      	mov	r1, r9
 8009dce:	4640      	mov	r0, r8
 8009dd0:	47d0      	blx	sl
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d0ad      	beq.n	8009d32 <_printf_i+0x15a>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	079b      	lsls	r3, r3, #30
 8009dda:	d413      	bmi.n	8009e04 <_printf_i+0x22c>
 8009ddc:	68e0      	ldr	r0, [r4, #12]
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	4298      	cmp	r0, r3
 8009de2:	bfb8      	it	lt
 8009de4:	4618      	movlt	r0, r3
 8009de6:	e7a6      	b.n	8009d36 <_printf_i+0x15e>
 8009de8:	2301      	movs	r3, #1
 8009dea:	4632      	mov	r2, r6
 8009dec:	4649      	mov	r1, r9
 8009dee:	4640      	mov	r0, r8
 8009df0:	47d0      	blx	sl
 8009df2:	3001      	adds	r0, #1
 8009df4:	d09d      	beq.n	8009d32 <_printf_i+0x15a>
 8009df6:	3501      	adds	r5, #1
 8009df8:	68e3      	ldr	r3, [r4, #12]
 8009dfa:	9903      	ldr	r1, [sp, #12]
 8009dfc:	1a5b      	subs	r3, r3, r1
 8009dfe:	42ab      	cmp	r3, r5
 8009e00:	dcf2      	bgt.n	8009de8 <_printf_i+0x210>
 8009e02:	e7eb      	b.n	8009ddc <_printf_i+0x204>
 8009e04:	2500      	movs	r5, #0
 8009e06:	f104 0619 	add.w	r6, r4, #25
 8009e0a:	e7f5      	b.n	8009df8 <_printf_i+0x220>
 8009e0c:	0800e60a 	.word	0x0800e60a
 8009e10:	0800e61b 	.word	0x0800e61b

08009e14 <_scanf_float>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	b087      	sub	sp, #28
 8009e1a:	4691      	mov	r9, r2
 8009e1c:	9303      	str	r3, [sp, #12]
 8009e1e:	688b      	ldr	r3, [r1, #8]
 8009e20:	1e5a      	subs	r2, r3, #1
 8009e22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e26:	bf81      	itttt	hi
 8009e28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e2c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e34:	608b      	strhi	r3, [r1, #8]
 8009e36:	680b      	ldr	r3, [r1, #0]
 8009e38:	460a      	mov	r2, r1
 8009e3a:	f04f 0500 	mov.w	r5, #0
 8009e3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009e42:	f842 3b1c 	str.w	r3, [r2], #28
 8009e46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e4a:	4680      	mov	r8, r0
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	bf98      	it	ls
 8009e50:	f04f 0b00 	movls.w	fp, #0
 8009e54:	9201      	str	r2, [sp, #4]
 8009e56:	4616      	mov	r6, r2
 8009e58:	46aa      	mov	sl, r5
 8009e5a:	462f      	mov	r7, r5
 8009e5c:	9502      	str	r5, [sp, #8]
 8009e5e:	68a2      	ldr	r2, [r4, #8]
 8009e60:	b15a      	cbz	r2, 8009e7a <_scanf_float+0x66>
 8009e62:	f8d9 3000 	ldr.w	r3, [r9]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b4e      	cmp	r3, #78	@ 0x4e
 8009e6a:	d863      	bhi.n	8009f34 <_scanf_float+0x120>
 8009e6c:	2b40      	cmp	r3, #64	@ 0x40
 8009e6e:	d83b      	bhi.n	8009ee8 <_scanf_float+0xd4>
 8009e70:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009e74:	b2c8      	uxtb	r0, r1
 8009e76:	280e      	cmp	r0, #14
 8009e78:	d939      	bls.n	8009eee <_scanf_float+0xda>
 8009e7a:	b11f      	cbz	r7, 8009e84 <_scanf_float+0x70>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e82:	6023      	str	r3, [r4, #0]
 8009e84:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009e88:	f1ba 0f01 	cmp.w	sl, #1
 8009e8c:	f200 8114 	bhi.w	800a0b8 <_scanf_float+0x2a4>
 8009e90:	9b01      	ldr	r3, [sp, #4]
 8009e92:	429e      	cmp	r6, r3
 8009e94:	f200 8105 	bhi.w	800a0a2 <_scanf_float+0x28e>
 8009e98:	2001      	movs	r0, #1
 8009e9a:	b007      	add	sp, #28
 8009e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009ea4:	2a0d      	cmp	r2, #13
 8009ea6:	d8e8      	bhi.n	8009e7a <_scanf_float+0x66>
 8009ea8:	a101      	add	r1, pc, #4	@ (adr r1, 8009eb0 <_scanf_float+0x9c>)
 8009eaa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009eae:	bf00      	nop
 8009eb0:	08009ff9 	.word	0x08009ff9
 8009eb4:	08009e7b 	.word	0x08009e7b
 8009eb8:	08009e7b 	.word	0x08009e7b
 8009ebc:	08009e7b 	.word	0x08009e7b
 8009ec0:	0800a055 	.word	0x0800a055
 8009ec4:	0800a02f 	.word	0x0800a02f
 8009ec8:	08009e7b 	.word	0x08009e7b
 8009ecc:	08009e7b 	.word	0x08009e7b
 8009ed0:	0800a007 	.word	0x0800a007
 8009ed4:	08009e7b 	.word	0x08009e7b
 8009ed8:	08009e7b 	.word	0x08009e7b
 8009edc:	08009e7b 	.word	0x08009e7b
 8009ee0:	08009e7b 	.word	0x08009e7b
 8009ee4:	08009fc3 	.word	0x08009fc3
 8009ee8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009eec:	e7da      	b.n	8009ea4 <_scanf_float+0x90>
 8009eee:	290e      	cmp	r1, #14
 8009ef0:	d8c3      	bhi.n	8009e7a <_scanf_float+0x66>
 8009ef2:	a001      	add	r0, pc, #4	@ (adr r0, 8009ef8 <_scanf_float+0xe4>)
 8009ef4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009ef8:	08009fb3 	.word	0x08009fb3
 8009efc:	08009e7b 	.word	0x08009e7b
 8009f00:	08009fb3 	.word	0x08009fb3
 8009f04:	0800a043 	.word	0x0800a043
 8009f08:	08009e7b 	.word	0x08009e7b
 8009f0c:	08009f55 	.word	0x08009f55
 8009f10:	08009f99 	.word	0x08009f99
 8009f14:	08009f99 	.word	0x08009f99
 8009f18:	08009f99 	.word	0x08009f99
 8009f1c:	08009f99 	.word	0x08009f99
 8009f20:	08009f99 	.word	0x08009f99
 8009f24:	08009f99 	.word	0x08009f99
 8009f28:	08009f99 	.word	0x08009f99
 8009f2c:	08009f99 	.word	0x08009f99
 8009f30:	08009f99 	.word	0x08009f99
 8009f34:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f36:	d809      	bhi.n	8009f4c <_scanf_float+0x138>
 8009f38:	2b60      	cmp	r3, #96	@ 0x60
 8009f3a:	d8b1      	bhi.n	8009ea0 <_scanf_float+0x8c>
 8009f3c:	2b54      	cmp	r3, #84	@ 0x54
 8009f3e:	d07b      	beq.n	800a038 <_scanf_float+0x224>
 8009f40:	2b59      	cmp	r3, #89	@ 0x59
 8009f42:	d19a      	bne.n	8009e7a <_scanf_float+0x66>
 8009f44:	2d07      	cmp	r5, #7
 8009f46:	d198      	bne.n	8009e7a <_scanf_float+0x66>
 8009f48:	2508      	movs	r5, #8
 8009f4a:	e02f      	b.n	8009fac <_scanf_float+0x198>
 8009f4c:	2b74      	cmp	r3, #116	@ 0x74
 8009f4e:	d073      	beq.n	800a038 <_scanf_float+0x224>
 8009f50:	2b79      	cmp	r3, #121	@ 0x79
 8009f52:	e7f6      	b.n	8009f42 <_scanf_float+0x12e>
 8009f54:	6821      	ldr	r1, [r4, #0]
 8009f56:	05c8      	lsls	r0, r1, #23
 8009f58:	d51e      	bpl.n	8009f98 <_scanf_float+0x184>
 8009f5a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009f5e:	6021      	str	r1, [r4, #0]
 8009f60:	3701      	adds	r7, #1
 8009f62:	f1bb 0f00 	cmp.w	fp, #0
 8009f66:	d003      	beq.n	8009f70 <_scanf_float+0x15c>
 8009f68:	3201      	adds	r2, #1
 8009f6a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009f6e:	60a2      	str	r2, [r4, #8]
 8009f70:	68a3      	ldr	r3, [r4, #8]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	60a3      	str	r3, [r4, #8]
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	6123      	str	r3, [r4, #16]
 8009f7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009f80:	3b01      	subs	r3, #1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f8c9 3004 	str.w	r3, [r9, #4]
 8009f88:	f340 8082 	ble.w	800a090 <_scanf_float+0x27c>
 8009f8c:	f8d9 3000 	ldr.w	r3, [r9]
 8009f90:	3301      	adds	r3, #1
 8009f92:	f8c9 3000 	str.w	r3, [r9]
 8009f96:	e762      	b.n	8009e5e <_scanf_float+0x4a>
 8009f98:	eb1a 0105 	adds.w	r1, sl, r5
 8009f9c:	f47f af6d 	bne.w	8009e7a <_scanf_float+0x66>
 8009fa0:	6822      	ldr	r2, [r4, #0]
 8009fa2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009fa6:	6022      	str	r2, [r4, #0]
 8009fa8:	460d      	mov	r5, r1
 8009faa:	468a      	mov	sl, r1
 8009fac:	f806 3b01 	strb.w	r3, [r6], #1
 8009fb0:	e7de      	b.n	8009f70 <_scanf_float+0x15c>
 8009fb2:	6822      	ldr	r2, [r4, #0]
 8009fb4:	0610      	lsls	r0, r2, #24
 8009fb6:	f57f af60 	bpl.w	8009e7a <_scanf_float+0x66>
 8009fba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	e7f4      	b.n	8009fac <_scanf_float+0x198>
 8009fc2:	f1ba 0f00 	cmp.w	sl, #0
 8009fc6:	d10c      	bne.n	8009fe2 <_scanf_float+0x1ce>
 8009fc8:	b977      	cbnz	r7, 8009fe8 <_scanf_float+0x1d4>
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009fd0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009fd4:	d108      	bne.n	8009fe8 <_scanf_float+0x1d4>
 8009fd6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fda:	6022      	str	r2, [r4, #0]
 8009fdc:	f04f 0a01 	mov.w	sl, #1
 8009fe0:	e7e4      	b.n	8009fac <_scanf_float+0x198>
 8009fe2:	f1ba 0f02 	cmp.w	sl, #2
 8009fe6:	d050      	beq.n	800a08a <_scanf_float+0x276>
 8009fe8:	2d01      	cmp	r5, #1
 8009fea:	d002      	beq.n	8009ff2 <_scanf_float+0x1de>
 8009fec:	2d04      	cmp	r5, #4
 8009fee:	f47f af44 	bne.w	8009e7a <_scanf_float+0x66>
 8009ff2:	3501      	adds	r5, #1
 8009ff4:	b2ed      	uxtb	r5, r5
 8009ff6:	e7d9      	b.n	8009fac <_scanf_float+0x198>
 8009ff8:	f1ba 0f01 	cmp.w	sl, #1
 8009ffc:	f47f af3d 	bne.w	8009e7a <_scanf_float+0x66>
 800a000:	f04f 0a02 	mov.w	sl, #2
 800a004:	e7d2      	b.n	8009fac <_scanf_float+0x198>
 800a006:	b975      	cbnz	r5, 800a026 <_scanf_float+0x212>
 800a008:	2f00      	cmp	r7, #0
 800a00a:	f47f af37 	bne.w	8009e7c <_scanf_float+0x68>
 800a00e:	6822      	ldr	r2, [r4, #0]
 800a010:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a014:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a018:	f040 80fc 	bne.w	800a214 <_scanf_float+0x400>
 800a01c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a020:	6022      	str	r2, [r4, #0]
 800a022:	2501      	movs	r5, #1
 800a024:	e7c2      	b.n	8009fac <_scanf_float+0x198>
 800a026:	2d03      	cmp	r5, #3
 800a028:	d0e3      	beq.n	8009ff2 <_scanf_float+0x1de>
 800a02a:	2d05      	cmp	r5, #5
 800a02c:	e7df      	b.n	8009fee <_scanf_float+0x1da>
 800a02e:	2d02      	cmp	r5, #2
 800a030:	f47f af23 	bne.w	8009e7a <_scanf_float+0x66>
 800a034:	2503      	movs	r5, #3
 800a036:	e7b9      	b.n	8009fac <_scanf_float+0x198>
 800a038:	2d06      	cmp	r5, #6
 800a03a:	f47f af1e 	bne.w	8009e7a <_scanf_float+0x66>
 800a03e:	2507      	movs	r5, #7
 800a040:	e7b4      	b.n	8009fac <_scanf_float+0x198>
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	0591      	lsls	r1, r2, #22
 800a046:	f57f af18 	bpl.w	8009e7a <_scanf_float+0x66>
 800a04a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a04e:	6022      	str	r2, [r4, #0]
 800a050:	9702      	str	r7, [sp, #8]
 800a052:	e7ab      	b.n	8009fac <_scanf_float+0x198>
 800a054:	6822      	ldr	r2, [r4, #0]
 800a056:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a05a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a05e:	d005      	beq.n	800a06c <_scanf_float+0x258>
 800a060:	0550      	lsls	r0, r2, #21
 800a062:	f57f af0a 	bpl.w	8009e7a <_scanf_float+0x66>
 800a066:	2f00      	cmp	r7, #0
 800a068:	f000 80d4 	beq.w	800a214 <_scanf_float+0x400>
 800a06c:	0591      	lsls	r1, r2, #22
 800a06e:	bf58      	it	pl
 800a070:	9902      	ldrpl	r1, [sp, #8]
 800a072:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a076:	bf58      	it	pl
 800a078:	1a79      	subpl	r1, r7, r1
 800a07a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a07e:	bf58      	it	pl
 800a080:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a084:	6022      	str	r2, [r4, #0]
 800a086:	2700      	movs	r7, #0
 800a088:	e790      	b.n	8009fac <_scanf_float+0x198>
 800a08a:	f04f 0a03 	mov.w	sl, #3
 800a08e:	e78d      	b.n	8009fac <_scanf_float+0x198>
 800a090:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a094:	4649      	mov	r1, r9
 800a096:	4640      	mov	r0, r8
 800a098:	4798      	blx	r3
 800a09a:	2800      	cmp	r0, #0
 800a09c:	f43f aedf 	beq.w	8009e5e <_scanf_float+0x4a>
 800a0a0:	e6eb      	b.n	8009e7a <_scanf_float+0x66>
 800a0a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0aa:	464a      	mov	r2, r9
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	4798      	blx	r3
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	6123      	str	r3, [r4, #16]
 800a0b6:	e6eb      	b.n	8009e90 <_scanf_float+0x7c>
 800a0b8:	1e6b      	subs	r3, r5, #1
 800a0ba:	2b06      	cmp	r3, #6
 800a0bc:	d824      	bhi.n	800a108 <_scanf_float+0x2f4>
 800a0be:	2d02      	cmp	r5, #2
 800a0c0:	d836      	bhi.n	800a130 <_scanf_float+0x31c>
 800a0c2:	9b01      	ldr	r3, [sp, #4]
 800a0c4:	429e      	cmp	r6, r3
 800a0c6:	f67f aee7 	bls.w	8009e98 <_scanf_float+0x84>
 800a0ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0d2:	464a      	mov	r2, r9
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	4798      	blx	r3
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	6123      	str	r3, [r4, #16]
 800a0de:	e7f0      	b.n	800a0c2 <_scanf_float+0x2ae>
 800a0e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a0e8:	464a      	mov	r2, r9
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	4798      	blx	r3
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a0f8:	fa5f fa8a 	uxtb.w	sl, sl
 800a0fc:	f1ba 0f02 	cmp.w	sl, #2
 800a100:	d1ee      	bne.n	800a0e0 <_scanf_float+0x2cc>
 800a102:	3d03      	subs	r5, #3
 800a104:	b2ed      	uxtb	r5, r5
 800a106:	1b76      	subs	r6, r6, r5
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	05da      	lsls	r2, r3, #23
 800a10c:	d530      	bpl.n	800a170 <_scanf_float+0x35c>
 800a10e:	055b      	lsls	r3, r3, #21
 800a110:	d511      	bpl.n	800a136 <_scanf_float+0x322>
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	429e      	cmp	r6, r3
 800a116:	f67f aebf 	bls.w	8009e98 <_scanf_float+0x84>
 800a11a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a11e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a122:	464a      	mov	r2, r9
 800a124:	4640      	mov	r0, r8
 800a126:	4798      	blx	r3
 800a128:	6923      	ldr	r3, [r4, #16]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	6123      	str	r3, [r4, #16]
 800a12e:	e7f0      	b.n	800a112 <_scanf_float+0x2fe>
 800a130:	46aa      	mov	sl, r5
 800a132:	46b3      	mov	fp, r6
 800a134:	e7de      	b.n	800a0f4 <_scanf_float+0x2e0>
 800a136:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a13a:	6923      	ldr	r3, [r4, #16]
 800a13c:	2965      	cmp	r1, #101	@ 0x65
 800a13e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a142:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	d00c      	beq.n	800a164 <_scanf_float+0x350>
 800a14a:	2945      	cmp	r1, #69	@ 0x45
 800a14c:	d00a      	beq.n	800a164 <_scanf_float+0x350>
 800a14e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a152:	464a      	mov	r2, r9
 800a154:	4640      	mov	r0, r8
 800a156:	4798      	blx	r3
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a15e:	3b01      	subs	r3, #1
 800a160:	1eb5      	subs	r5, r6, #2
 800a162:	6123      	str	r3, [r4, #16]
 800a164:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a168:	464a      	mov	r2, r9
 800a16a:	4640      	mov	r0, r8
 800a16c:	4798      	blx	r3
 800a16e:	462e      	mov	r6, r5
 800a170:	6822      	ldr	r2, [r4, #0]
 800a172:	f012 0210 	ands.w	r2, r2, #16
 800a176:	d001      	beq.n	800a17c <_scanf_float+0x368>
 800a178:	2000      	movs	r0, #0
 800a17a:	e68e      	b.n	8009e9a <_scanf_float+0x86>
 800a17c:	7032      	strb	r2, [r6, #0]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a188:	d123      	bne.n	800a1d2 <_scanf_float+0x3be>
 800a18a:	9b02      	ldr	r3, [sp, #8]
 800a18c:	429f      	cmp	r7, r3
 800a18e:	d00a      	beq.n	800a1a6 <_scanf_float+0x392>
 800a190:	1bda      	subs	r2, r3, r7
 800a192:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a196:	429e      	cmp	r6, r3
 800a198:	bf28      	it	cs
 800a19a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a19e:	491e      	ldr	r1, [pc, #120]	@ (800a218 <_scanf_float+0x404>)
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f000 f83d 	bl	800a220 <siprintf>
 800a1a6:	9901      	ldr	r1, [sp, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	f000 feb2 	bl	800af14 <_strtod_r>
 800a1b0:	9b03      	ldr	r3, [sp, #12]
 800a1b2:	6821      	ldr	r1, [r4, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f011 0f02 	tst.w	r1, #2
 800a1ba:	f103 0204 	add.w	r2, r3, #4
 800a1be:	d015      	beq.n	800a1ec <_scanf_float+0x3d8>
 800a1c0:	9903      	ldr	r1, [sp, #12]
 800a1c2:	600a      	str	r2, [r1, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	ed83 0b00 	vstr	d0, [r3]
 800a1ca:	68e3      	ldr	r3, [r4, #12]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	60e3      	str	r3, [r4, #12]
 800a1d0:	e7d2      	b.n	800a178 <_scanf_float+0x364>
 800a1d2:	9b04      	ldr	r3, [sp, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0e6      	beq.n	800a1a6 <_scanf_float+0x392>
 800a1d8:	9905      	ldr	r1, [sp, #20]
 800a1da:	230a      	movs	r3, #10
 800a1dc:	3101      	adds	r1, #1
 800a1de:	4640      	mov	r0, r8
 800a1e0:	f000 ff18 	bl	800b014 <_strtol_r>
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	9e05      	ldr	r6, [sp, #20]
 800a1e8:	1ac2      	subs	r2, r0, r3
 800a1ea:	e7d2      	b.n	800a192 <_scanf_float+0x37e>
 800a1ec:	f011 0f04 	tst.w	r1, #4
 800a1f0:	9903      	ldr	r1, [sp, #12]
 800a1f2:	600a      	str	r2, [r1, #0]
 800a1f4:	d1e6      	bne.n	800a1c4 <_scanf_float+0x3b0>
 800a1f6:	eeb4 0b40 	vcmp.f64	d0, d0
 800a1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fe:	681d      	ldr	r5, [r3, #0]
 800a200:	d705      	bvc.n	800a20e <_scanf_float+0x3fa>
 800a202:	4806      	ldr	r0, [pc, #24]	@ (800a21c <_scanf_float+0x408>)
 800a204:	f000 ff88 	bl	800b118 <nanf>
 800a208:	ed85 0a00 	vstr	s0, [r5]
 800a20c:	e7dd      	b.n	800a1ca <_scanf_float+0x3b6>
 800a20e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a212:	e7f9      	b.n	800a208 <_scanf_float+0x3f4>
 800a214:	2700      	movs	r7, #0
 800a216:	e635      	b.n	8009e84 <_scanf_float+0x70>
 800a218:	0800e62c 	.word	0x0800e62c
 800a21c:	0800e7cd 	.word	0x0800e7cd

0800a220 <siprintf>:
 800a220:	b40e      	push	{r1, r2, r3}
 800a222:	b510      	push	{r4, lr}
 800a224:	b09d      	sub	sp, #116	@ 0x74
 800a226:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a228:	9002      	str	r0, [sp, #8]
 800a22a:	9006      	str	r0, [sp, #24]
 800a22c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a230:	480a      	ldr	r0, [pc, #40]	@ (800a25c <siprintf+0x3c>)
 800a232:	9107      	str	r1, [sp, #28]
 800a234:	9104      	str	r1, [sp, #16]
 800a236:	490a      	ldr	r1, [pc, #40]	@ (800a260 <siprintf+0x40>)
 800a238:	f853 2b04 	ldr.w	r2, [r3], #4
 800a23c:	9105      	str	r1, [sp, #20]
 800a23e:	2400      	movs	r4, #0
 800a240:	a902      	add	r1, sp, #8
 800a242:	6800      	ldr	r0, [r0, #0]
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a248:	f002 f8e8 	bl	800c41c <_svfiprintf_r>
 800a24c:	9b02      	ldr	r3, [sp, #8]
 800a24e:	701c      	strb	r4, [r3, #0]
 800a250:	b01d      	add	sp, #116	@ 0x74
 800a252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a256:	b003      	add	sp, #12
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	2400018c 	.word	0x2400018c
 800a260:	ffff0208 	.word	0xffff0208

0800a264 <std>:
 800a264:	2300      	movs	r3, #0
 800a266:	b510      	push	{r4, lr}
 800a268:	4604      	mov	r4, r0
 800a26a:	e9c0 3300 	strd	r3, r3, [r0]
 800a26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a272:	6083      	str	r3, [r0, #8]
 800a274:	8181      	strh	r1, [r0, #12]
 800a276:	6643      	str	r3, [r0, #100]	@ 0x64
 800a278:	81c2      	strh	r2, [r0, #14]
 800a27a:	6183      	str	r3, [r0, #24]
 800a27c:	4619      	mov	r1, r3
 800a27e:	2208      	movs	r2, #8
 800a280:	305c      	adds	r0, #92	@ 0x5c
 800a282:	f000 fee7 	bl	800b054 <memset>
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <std+0x58>)
 800a288:	6263      	str	r3, [r4, #36]	@ 0x24
 800a28a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c0 <std+0x5c>)
 800a28c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a28e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c4 <std+0x60>)
 800a290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a292:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c8 <std+0x64>)
 800a294:	6323      	str	r3, [r4, #48]	@ 0x30
 800a296:	4b0d      	ldr	r3, [pc, #52]	@ (800a2cc <std+0x68>)
 800a298:	6224      	str	r4, [r4, #32]
 800a29a:	429c      	cmp	r4, r3
 800a29c:	d006      	beq.n	800a2ac <std+0x48>
 800a29e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2a2:	4294      	cmp	r4, r2
 800a2a4:	d002      	beq.n	800a2ac <std+0x48>
 800a2a6:	33d0      	adds	r3, #208	@ 0xd0
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	d105      	bne.n	800a2b8 <std+0x54>
 800a2ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b4:	f000 bf12 	b.w	800b0dc <__retarget_lock_init_recursive>
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop
 800a2bc:	0800d24b 	.word	0x0800d24b
 800a2c0:	0800d26d 	.word	0x0800d26d
 800a2c4:	0800d2a5 	.word	0x0800d2a5
 800a2c8:	0800d2c9 	.word	0x0800d2c9
 800a2cc:	24000568 	.word	0x24000568

0800a2d0 <stdio_exit_handler>:
 800a2d0:	4a02      	ldr	r2, [pc, #8]	@ (800a2dc <stdio_exit_handler+0xc>)
 800a2d2:	4903      	ldr	r1, [pc, #12]	@ (800a2e0 <stdio_exit_handler+0x10>)
 800a2d4:	4803      	ldr	r0, [pc, #12]	@ (800a2e4 <stdio_exit_handler+0x14>)
 800a2d6:	f000 be9f 	b.w	800b018 <_fwalk_sglue>
 800a2da:	bf00      	nop
 800a2dc:	24000014 	.word	0x24000014
 800a2e0:	0800c895 	.word	0x0800c895
 800a2e4:	24000190 	.word	0x24000190

0800a2e8 <cleanup_stdio>:
 800a2e8:	6841      	ldr	r1, [r0, #4]
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a31c <cleanup_stdio+0x34>)
 800a2ec:	4299      	cmp	r1, r3
 800a2ee:	b510      	push	{r4, lr}
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	d001      	beq.n	800a2f8 <cleanup_stdio+0x10>
 800a2f4:	f002 face 	bl	800c894 <_fflush_r>
 800a2f8:	68a1      	ldr	r1, [r4, #8]
 800a2fa:	4b09      	ldr	r3, [pc, #36]	@ (800a320 <cleanup_stdio+0x38>)
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	d002      	beq.n	800a306 <cleanup_stdio+0x1e>
 800a300:	4620      	mov	r0, r4
 800a302:	f002 fac7 	bl	800c894 <_fflush_r>
 800a306:	68e1      	ldr	r1, [r4, #12]
 800a308:	4b06      	ldr	r3, [pc, #24]	@ (800a324 <cleanup_stdio+0x3c>)
 800a30a:	4299      	cmp	r1, r3
 800a30c:	d004      	beq.n	800a318 <cleanup_stdio+0x30>
 800a30e:	4620      	mov	r0, r4
 800a310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a314:	f002 babe 	b.w	800c894 <_fflush_r>
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	bf00      	nop
 800a31c:	24000568 	.word	0x24000568
 800a320:	240005d0 	.word	0x240005d0
 800a324:	24000638 	.word	0x24000638

0800a328 <global_stdio_init.part.0>:
 800a328:	b510      	push	{r4, lr}
 800a32a:	4b0b      	ldr	r3, [pc, #44]	@ (800a358 <global_stdio_init.part.0+0x30>)
 800a32c:	4c0b      	ldr	r4, [pc, #44]	@ (800a35c <global_stdio_init.part.0+0x34>)
 800a32e:	4a0c      	ldr	r2, [pc, #48]	@ (800a360 <global_stdio_init.part.0+0x38>)
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	4620      	mov	r0, r4
 800a334:	2200      	movs	r2, #0
 800a336:	2104      	movs	r1, #4
 800a338:	f7ff ff94 	bl	800a264 <std>
 800a33c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a340:	2201      	movs	r2, #1
 800a342:	2109      	movs	r1, #9
 800a344:	f7ff ff8e 	bl	800a264 <std>
 800a348:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a34c:	2202      	movs	r2, #2
 800a34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a352:	2112      	movs	r1, #18
 800a354:	f7ff bf86 	b.w	800a264 <std>
 800a358:	240006a0 	.word	0x240006a0
 800a35c:	24000568 	.word	0x24000568
 800a360:	0800a2d1 	.word	0x0800a2d1

0800a364 <__sfp_lock_acquire>:
 800a364:	4801      	ldr	r0, [pc, #4]	@ (800a36c <__sfp_lock_acquire+0x8>)
 800a366:	f000 beba 	b.w	800b0de <__retarget_lock_acquire_recursive>
 800a36a:	bf00      	nop
 800a36c:	240006a5 	.word	0x240006a5

0800a370 <__sfp_lock_release>:
 800a370:	4801      	ldr	r0, [pc, #4]	@ (800a378 <__sfp_lock_release+0x8>)
 800a372:	f000 beb5 	b.w	800b0e0 <__retarget_lock_release_recursive>
 800a376:	bf00      	nop
 800a378:	240006a5 	.word	0x240006a5

0800a37c <__sinit>:
 800a37c:	b510      	push	{r4, lr}
 800a37e:	4604      	mov	r4, r0
 800a380:	f7ff fff0 	bl	800a364 <__sfp_lock_acquire>
 800a384:	6a23      	ldr	r3, [r4, #32]
 800a386:	b11b      	cbz	r3, 800a390 <__sinit+0x14>
 800a388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a38c:	f7ff bff0 	b.w	800a370 <__sfp_lock_release>
 800a390:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <__sinit+0x28>)
 800a392:	6223      	str	r3, [r4, #32]
 800a394:	4b04      	ldr	r3, [pc, #16]	@ (800a3a8 <__sinit+0x2c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1f5      	bne.n	800a388 <__sinit+0xc>
 800a39c:	f7ff ffc4 	bl	800a328 <global_stdio_init.part.0>
 800a3a0:	e7f2      	b.n	800a388 <__sinit+0xc>
 800a3a2:	bf00      	nop
 800a3a4:	0800a2e9 	.word	0x0800a2e9
 800a3a8:	240006a0 	.word	0x240006a0

0800a3ac <sulp>:
 800a3ac:	b570      	push	{r4, r5, r6, lr}
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	460d      	mov	r5, r1
 800a3b2:	4616      	mov	r6, r2
 800a3b4:	ec45 4b10 	vmov	d0, r4, r5
 800a3b8:	f002 fe0c 	bl	800cfd4 <__ulp>
 800a3bc:	b17e      	cbz	r6, 800a3de <sulp+0x32>
 800a3be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a3c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	dd09      	ble.n	800a3de <sulp+0x32>
 800a3ca:	051b      	lsls	r3, r3, #20
 800a3cc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a3d6:	ec41 0b17 	vmov	d7, r0, r1
 800a3da:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a3de:	bd70      	pop	{r4, r5, r6, pc}

0800a3e0 <_strtod_l>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	ed2d 8b0a 	vpush	{d8-d12}
 800a3e8:	b097      	sub	sp, #92	@ 0x5c
 800a3ea:	4688      	mov	r8, r1
 800a3ec:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	9212      	str	r2, [sp, #72]	@ 0x48
 800a3f2:	9005      	str	r0, [sp, #20]
 800a3f4:	f04f 0a00 	mov.w	sl, #0
 800a3f8:	f04f 0b00 	mov.w	fp, #0
 800a3fc:	460a      	mov	r2, r1
 800a3fe:	9211      	str	r2, [sp, #68]	@ 0x44
 800a400:	7811      	ldrb	r1, [r2, #0]
 800a402:	292b      	cmp	r1, #43	@ 0x2b
 800a404:	d04c      	beq.n	800a4a0 <_strtod_l+0xc0>
 800a406:	d839      	bhi.n	800a47c <_strtod_l+0x9c>
 800a408:	290d      	cmp	r1, #13
 800a40a:	d833      	bhi.n	800a474 <_strtod_l+0x94>
 800a40c:	2908      	cmp	r1, #8
 800a40e:	d833      	bhi.n	800a478 <_strtod_l+0x98>
 800a410:	2900      	cmp	r1, #0
 800a412:	d03c      	beq.n	800a48e <_strtod_l+0xae>
 800a414:	2200      	movs	r2, #0
 800a416:	9208      	str	r2, [sp, #32]
 800a418:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a41a:	782a      	ldrb	r2, [r5, #0]
 800a41c:	2a30      	cmp	r2, #48	@ 0x30
 800a41e:	f040 80b7 	bne.w	800a590 <_strtod_l+0x1b0>
 800a422:	786a      	ldrb	r2, [r5, #1]
 800a424:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a428:	2a58      	cmp	r2, #88	@ 0x58
 800a42a:	d170      	bne.n	800a50e <_strtod_l+0x12e>
 800a42c:	9302      	str	r3, [sp, #8]
 800a42e:	9b08      	ldr	r3, [sp, #32]
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	ab12      	add	r3, sp, #72	@ 0x48
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	4a90      	ldr	r2, [pc, #576]	@ (800a678 <_strtod_l+0x298>)
 800a438:	9805      	ldr	r0, [sp, #20]
 800a43a:	ab13      	add	r3, sp, #76	@ 0x4c
 800a43c:	a911      	add	r1, sp, #68	@ 0x44
 800a43e:	f001 fcc1 	bl	800bdc4 <__gethex>
 800a442:	f010 060f 	ands.w	r6, r0, #15
 800a446:	4604      	mov	r4, r0
 800a448:	d005      	beq.n	800a456 <_strtod_l+0x76>
 800a44a:	2e06      	cmp	r6, #6
 800a44c:	d12a      	bne.n	800a4a4 <_strtod_l+0xc4>
 800a44e:	3501      	adds	r5, #1
 800a450:	2300      	movs	r3, #0
 800a452:	9511      	str	r5, [sp, #68]	@ 0x44
 800a454:	9308      	str	r3, [sp, #32]
 800a456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f040 8537 	bne.w	800aecc <_strtod_l+0xaec>
 800a45e:	9b08      	ldr	r3, [sp, #32]
 800a460:	ec4b ab10 	vmov	d0, sl, fp
 800a464:	b1cb      	cbz	r3, 800a49a <_strtod_l+0xba>
 800a466:	eeb1 0b40 	vneg.f64	d0, d0
 800a46a:	b017      	add	sp, #92	@ 0x5c
 800a46c:	ecbd 8b0a 	vpop	{d8-d12}
 800a470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a474:	2920      	cmp	r1, #32
 800a476:	d1cd      	bne.n	800a414 <_strtod_l+0x34>
 800a478:	3201      	adds	r2, #1
 800a47a:	e7c0      	b.n	800a3fe <_strtod_l+0x1e>
 800a47c:	292d      	cmp	r1, #45	@ 0x2d
 800a47e:	d1c9      	bne.n	800a414 <_strtod_l+0x34>
 800a480:	2101      	movs	r1, #1
 800a482:	9108      	str	r1, [sp, #32]
 800a484:	1c51      	adds	r1, r2, #1
 800a486:	9111      	str	r1, [sp, #68]	@ 0x44
 800a488:	7852      	ldrb	r2, [r2, #1]
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	d1c4      	bne.n	800a418 <_strtod_l+0x38>
 800a48e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a490:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a494:	2b00      	cmp	r3, #0
 800a496:	f040 8517 	bne.w	800aec8 <_strtod_l+0xae8>
 800a49a:	ec4b ab10 	vmov	d0, sl, fp
 800a49e:	e7e4      	b.n	800a46a <_strtod_l+0x8a>
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	e7ee      	b.n	800a482 <_strtod_l+0xa2>
 800a4a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a4a6:	b13a      	cbz	r2, 800a4b8 <_strtod_l+0xd8>
 800a4a8:	2135      	movs	r1, #53	@ 0x35
 800a4aa:	a814      	add	r0, sp, #80	@ 0x50
 800a4ac:	f002 fe89 	bl	800d1c2 <__copybits>
 800a4b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a4b2:	9805      	ldr	r0, [sp, #20]
 800a4b4:	f002 fa62 	bl	800c97c <_Bfree>
 800a4b8:	1e73      	subs	r3, r6, #1
 800a4ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d806      	bhi.n	800a4ce <_strtod_l+0xee>
 800a4c0:	e8df f003 	tbb	[pc, r3]
 800a4c4:	201d0314 	.word	0x201d0314
 800a4c8:	14          	.byte	0x14
 800a4c9:	00          	.byte	0x00
 800a4ca:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a4ce:	05e3      	lsls	r3, r4, #23
 800a4d0:	bf48      	it	mi
 800a4d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a4d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4da:	0d1b      	lsrs	r3, r3, #20
 800a4dc:	051b      	lsls	r3, r3, #20
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1b9      	bne.n	800a456 <_strtod_l+0x76>
 800a4e2:	f000 fdd1 	bl	800b088 <__errno>
 800a4e6:	2322      	movs	r3, #34	@ 0x22
 800a4e8:	6003      	str	r3, [r0, #0]
 800a4ea:	e7b4      	b.n	800a456 <_strtod_l+0x76>
 800a4ec:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a4f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a4f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a4f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a4fc:	e7e7      	b.n	800a4ce <_strtod_l+0xee>
 800a4fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a680 <_strtod_l+0x2a0>
 800a502:	e7e4      	b.n	800a4ce <_strtod_l+0xee>
 800a504:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a508:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a50c:	e7df      	b.n	800a4ce <_strtod_l+0xee>
 800a50e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	9211      	str	r2, [sp, #68]	@ 0x44
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	2b30      	cmp	r3, #48	@ 0x30
 800a518:	d0f9      	beq.n	800a50e <_strtod_l+0x12e>
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d09b      	beq.n	800a456 <_strtod_l+0x76>
 800a51e:	2301      	movs	r3, #1
 800a520:	9307      	str	r3, [sp, #28]
 800a522:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a524:	930a      	str	r3, [sp, #40]	@ 0x28
 800a526:	2300      	movs	r3, #0
 800a528:	9306      	str	r3, [sp, #24]
 800a52a:	4699      	mov	r9, r3
 800a52c:	461d      	mov	r5, r3
 800a52e:	220a      	movs	r2, #10
 800a530:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a532:	7804      	ldrb	r4, [r0, #0]
 800a534:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a538:	b2d9      	uxtb	r1, r3
 800a53a:	2909      	cmp	r1, #9
 800a53c:	d92a      	bls.n	800a594 <_strtod_l+0x1b4>
 800a53e:	494f      	ldr	r1, [pc, #316]	@ (800a67c <_strtod_l+0x29c>)
 800a540:	2201      	movs	r2, #1
 800a542:	f000 fd8f 	bl	800b064 <strncmp>
 800a546:	b398      	cbz	r0, 800a5b0 <_strtod_l+0x1d0>
 800a548:	2000      	movs	r0, #0
 800a54a:	4622      	mov	r2, r4
 800a54c:	462b      	mov	r3, r5
 800a54e:	4607      	mov	r7, r0
 800a550:	4601      	mov	r1, r0
 800a552:	2a65      	cmp	r2, #101	@ 0x65
 800a554:	d001      	beq.n	800a55a <_strtod_l+0x17a>
 800a556:	2a45      	cmp	r2, #69	@ 0x45
 800a558:	d118      	bne.n	800a58c <_strtod_l+0x1ac>
 800a55a:	b91b      	cbnz	r3, 800a564 <_strtod_l+0x184>
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	4303      	orrs	r3, r0
 800a560:	d095      	beq.n	800a48e <_strtod_l+0xae>
 800a562:	2300      	movs	r3, #0
 800a564:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a568:	f108 0201 	add.w	r2, r8, #1
 800a56c:	9211      	str	r2, [sp, #68]	@ 0x44
 800a56e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a572:	2a2b      	cmp	r2, #43	@ 0x2b
 800a574:	d074      	beq.n	800a660 <_strtod_l+0x280>
 800a576:	2a2d      	cmp	r2, #45	@ 0x2d
 800a578:	d07a      	beq.n	800a670 <_strtod_l+0x290>
 800a57a:	f04f 0e00 	mov.w	lr, #0
 800a57e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a582:	2c09      	cmp	r4, #9
 800a584:	f240 8082 	bls.w	800a68c <_strtod_l+0x2ac>
 800a588:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a58c:	2400      	movs	r4, #0
 800a58e:	e09d      	b.n	800a6cc <_strtod_l+0x2ec>
 800a590:	2300      	movs	r3, #0
 800a592:	e7c5      	b.n	800a520 <_strtod_l+0x140>
 800a594:	2d08      	cmp	r5, #8
 800a596:	bfc8      	it	gt
 800a598:	9906      	ldrgt	r1, [sp, #24]
 800a59a:	f100 0001 	add.w	r0, r0, #1
 800a59e:	bfca      	itet	gt
 800a5a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a5a4:	fb02 3909 	mlale	r9, r2, r9, r3
 800a5a8:	9306      	strgt	r3, [sp, #24]
 800a5aa:	3501      	adds	r5, #1
 800a5ac:	9011      	str	r0, [sp, #68]	@ 0x44
 800a5ae:	e7bf      	b.n	800a530 <_strtod_l+0x150>
 800a5b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5b2:	1c5a      	adds	r2, r3, #1
 800a5b4:	9211      	str	r2, [sp, #68]	@ 0x44
 800a5b6:	785a      	ldrb	r2, [r3, #1]
 800a5b8:	b3bd      	cbz	r5, 800a62a <_strtod_l+0x24a>
 800a5ba:	4607      	mov	r7, r0
 800a5bc:	462b      	mov	r3, r5
 800a5be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a5c2:	2909      	cmp	r1, #9
 800a5c4:	d912      	bls.n	800a5ec <_strtod_l+0x20c>
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	e7c3      	b.n	800a552 <_strtod_l+0x172>
 800a5ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800a5d0:	785a      	ldrb	r2, [r3, #1]
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	2a30      	cmp	r2, #48	@ 0x30
 800a5d6:	d0f8      	beq.n	800a5ca <_strtod_l+0x1ea>
 800a5d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	f200 847a 	bhi.w	800aed6 <_strtod_l+0xaf6>
 800a5e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	3a30      	subs	r2, #48	@ 0x30
 800a5ee:	f100 0101 	add.w	r1, r0, #1
 800a5f2:	d014      	beq.n	800a61e <_strtod_l+0x23e>
 800a5f4:	440f      	add	r7, r1
 800a5f6:	469c      	mov	ip, r3
 800a5f8:	f04f 0e0a 	mov.w	lr, #10
 800a5fc:	f10c 0401 	add.w	r4, ip, #1
 800a600:	1ae6      	subs	r6, r4, r3
 800a602:	42b1      	cmp	r1, r6
 800a604:	dc13      	bgt.n	800a62e <_strtod_l+0x24e>
 800a606:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a60a:	1819      	adds	r1, r3, r0
 800a60c:	2908      	cmp	r1, #8
 800a60e:	f103 0301 	add.w	r3, r3, #1
 800a612:	4403      	add	r3, r0
 800a614:	dc19      	bgt.n	800a64a <_strtod_l+0x26a>
 800a616:	210a      	movs	r1, #10
 800a618:	fb01 2909 	mla	r9, r1, r9, r2
 800a61c:	2100      	movs	r1, #0
 800a61e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a620:	1c50      	adds	r0, r2, #1
 800a622:	9011      	str	r0, [sp, #68]	@ 0x44
 800a624:	7852      	ldrb	r2, [r2, #1]
 800a626:	4608      	mov	r0, r1
 800a628:	e7c9      	b.n	800a5be <_strtod_l+0x1de>
 800a62a:	4628      	mov	r0, r5
 800a62c:	e7d2      	b.n	800a5d4 <_strtod_l+0x1f4>
 800a62e:	f1bc 0f08 	cmp.w	ip, #8
 800a632:	dc03      	bgt.n	800a63c <_strtod_l+0x25c>
 800a634:	fb0e f909 	mul.w	r9, lr, r9
 800a638:	46a4      	mov	ip, r4
 800a63a:	e7df      	b.n	800a5fc <_strtod_l+0x21c>
 800a63c:	2c10      	cmp	r4, #16
 800a63e:	bfde      	ittt	le
 800a640:	9e06      	ldrle	r6, [sp, #24]
 800a642:	fb0e f606 	mulle.w	r6, lr, r6
 800a646:	9606      	strle	r6, [sp, #24]
 800a648:	e7f6      	b.n	800a638 <_strtod_l+0x258>
 800a64a:	290f      	cmp	r1, #15
 800a64c:	bfdf      	itttt	le
 800a64e:	9806      	ldrle	r0, [sp, #24]
 800a650:	210a      	movle	r1, #10
 800a652:	fb01 2200 	mlale	r2, r1, r0, r2
 800a656:	9206      	strle	r2, [sp, #24]
 800a658:	e7e0      	b.n	800a61c <_strtod_l+0x23c>
 800a65a:	2700      	movs	r7, #0
 800a65c:	2101      	movs	r1, #1
 800a65e:	e77d      	b.n	800a55c <_strtod_l+0x17c>
 800a660:	f04f 0e00 	mov.w	lr, #0
 800a664:	f108 0202 	add.w	r2, r8, #2
 800a668:	9211      	str	r2, [sp, #68]	@ 0x44
 800a66a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a66e:	e786      	b.n	800a57e <_strtod_l+0x19e>
 800a670:	f04f 0e01 	mov.w	lr, #1
 800a674:	e7f6      	b.n	800a664 <_strtod_l+0x284>
 800a676:	bf00      	nop
 800a678:	0800e7e4 	.word	0x0800e7e4
 800a67c:	0800e631 	.word	0x0800e631
 800a680:	7ff00000 	.word	0x7ff00000
 800a684:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a686:	1c54      	adds	r4, r2, #1
 800a688:	9411      	str	r4, [sp, #68]	@ 0x44
 800a68a:	7852      	ldrb	r2, [r2, #1]
 800a68c:	2a30      	cmp	r2, #48	@ 0x30
 800a68e:	d0f9      	beq.n	800a684 <_strtod_l+0x2a4>
 800a690:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a694:	2c08      	cmp	r4, #8
 800a696:	f63f af79 	bhi.w	800a58c <_strtod_l+0x1ac>
 800a69a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a69e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a6a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a6a4:	1c54      	adds	r4, r2, #1
 800a6a6:	9411      	str	r4, [sp, #68]	@ 0x44
 800a6a8:	7852      	ldrb	r2, [r2, #1]
 800a6aa:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800a6ae:	2e09      	cmp	r6, #9
 800a6b0:	d937      	bls.n	800a722 <_strtod_l+0x342>
 800a6b2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a6b4:	1ba4      	subs	r4, r4, r6
 800a6b6:	2c08      	cmp	r4, #8
 800a6b8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a6bc:	dc02      	bgt.n	800a6c4 <_strtod_l+0x2e4>
 800a6be:	4564      	cmp	r4, ip
 800a6c0:	bfa8      	it	ge
 800a6c2:	4664      	movge	r4, ip
 800a6c4:	f1be 0f00 	cmp.w	lr, #0
 800a6c8:	d000      	beq.n	800a6cc <_strtod_l+0x2ec>
 800a6ca:	4264      	negs	r4, r4
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d14d      	bne.n	800a76c <_strtod_l+0x38c>
 800a6d0:	9b07      	ldr	r3, [sp, #28]
 800a6d2:	4318      	orrs	r0, r3
 800a6d4:	f47f aebf 	bne.w	800a456 <_strtod_l+0x76>
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	f47f aed8 	bne.w	800a48e <_strtod_l+0xae>
 800a6de:	2a69      	cmp	r2, #105	@ 0x69
 800a6e0:	d027      	beq.n	800a732 <_strtod_l+0x352>
 800a6e2:	dc24      	bgt.n	800a72e <_strtod_l+0x34e>
 800a6e4:	2a49      	cmp	r2, #73	@ 0x49
 800a6e6:	d024      	beq.n	800a732 <_strtod_l+0x352>
 800a6e8:	2a4e      	cmp	r2, #78	@ 0x4e
 800a6ea:	f47f aed0 	bne.w	800a48e <_strtod_l+0xae>
 800a6ee:	4997      	ldr	r1, [pc, #604]	@ (800a94c <_strtod_l+0x56c>)
 800a6f0:	a811      	add	r0, sp, #68	@ 0x44
 800a6f2:	f001 fd89 	bl	800c208 <__match>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f43f aec9 	beq.w	800a48e <_strtod_l+0xae>
 800a6fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2b28      	cmp	r3, #40	@ 0x28
 800a702:	d12d      	bne.n	800a760 <_strtod_l+0x380>
 800a704:	4992      	ldr	r1, [pc, #584]	@ (800a950 <_strtod_l+0x570>)
 800a706:	aa14      	add	r2, sp, #80	@ 0x50
 800a708:	a811      	add	r0, sp, #68	@ 0x44
 800a70a:	f001 fd91 	bl	800c230 <__hexnan>
 800a70e:	2805      	cmp	r0, #5
 800a710:	d126      	bne.n	800a760 <_strtod_l+0x380>
 800a712:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a714:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a718:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a71c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a720:	e699      	b.n	800a456 <_strtod_l+0x76>
 800a722:	240a      	movs	r4, #10
 800a724:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a728:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a72c:	e7b9      	b.n	800a6a2 <_strtod_l+0x2c2>
 800a72e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a730:	e7db      	b.n	800a6ea <_strtod_l+0x30a>
 800a732:	4988      	ldr	r1, [pc, #544]	@ (800a954 <_strtod_l+0x574>)
 800a734:	a811      	add	r0, sp, #68	@ 0x44
 800a736:	f001 fd67 	bl	800c208 <__match>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	f43f aea7 	beq.w	800a48e <_strtod_l+0xae>
 800a740:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a742:	4985      	ldr	r1, [pc, #532]	@ (800a958 <_strtod_l+0x578>)
 800a744:	3b01      	subs	r3, #1
 800a746:	a811      	add	r0, sp, #68	@ 0x44
 800a748:	9311      	str	r3, [sp, #68]	@ 0x44
 800a74a:	f001 fd5d 	bl	800c208 <__match>
 800a74e:	b910      	cbnz	r0, 800a756 <_strtod_l+0x376>
 800a750:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a752:	3301      	adds	r3, #1
 800a754:	9311      	str	r3, [sp, #68]	@ 0x44
 800a756:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800a96c <_strtod_l+0x58c>
 800a75a:	f04f 0a00 	mov.w	sl, #0
 800a75e:	e67a      	b.n	800a456 <_strtod_l+0x76>
 800a760:	487e      	ldr	r0, [pc, #504]	@ (800a95c <_strtod_l+0x57c>)
 800a762:	f000 fcd1 	bl	800b108 <nan>
 800a766:	ec5b ab10 	vmov	sl, fp, d0
 800a76a:	e674      	b.n	800a456 <_strtod_l+0x76>
 800a76c:	ee07 9a90 	vmov	s15, r9
 800a770:	1be2      	subs	r2, r4, r7
 800a772:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a776:	2d00      	cmp	r5, #0
 800a778:	bf08      	it	eq
 800a77a:	461d      	moveq	r5, r3
 800a77c:	2b10      	cmp	r3, #16
 800a77e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a780:	461a      	mov	r2, r3
 800a782:	bfa8      	it	ge
 800a784:	2210      	movge	r2, #16
 800a786:	2b09      	cmp	r3, #9
 800a788:	ec5b ab17 	vmov	sl, fp, d7
 800a78c:	dc15      	bgt.n	800a7ba <_strtod_l+0x3da>
 800a78e:	1be1      	subs	r1, r4, r7
 800a790:	2900      	cmp	r1, #0
 800a792:	f43f ae60 	beq.w	800a456 <_strtod_l+0x76>
 800a796:	eba4 0107 	sub.w	r1, r4, r7
 800a79a:	dd72      	ble.n	800a882 <_strtod_l+0x4a2>
 800a79c:	2916      	cmp	r1, #22
 800a79e:	dc59      	bgt.n	800a854 <_strtod_l+0x474>
 800a7a0:	4b6f      	ldr	r3, [pc, #444]	@ (800a960 <_strtod_l+0x580>)
 800a7a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7a8:	ed93 7b00 	vldr	d7, [r3]
 800a7ac:	ec4b ab16 	vmov	d6, sl, fp
 800a7b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7b4:	ec5b ab17 	vmov	sl, fp, d7
 800a7b8:	e64d      	b.n	800a456 <_strtod_l+0x76>
 800a7ba:	4969      	ldr	r1, [pc, #420]	@ (800a960 <_strtod_l+0x580>)
 800a7bc:	eddd 6a06 	vldr	s13, [sp, #24]
 800a7c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a7c4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a7c8:	2b0f      	cmp	r3, #15
 800a7ca:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a7ce:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a7d2:	ec5b ab16 	vmov	sl, fp, d6
 800a7d6:	ddda      	ble.n	800a78e <_strtod_l+0x3ae>
 800a7d8:	1a9a      	subs	r2, r3, r2
 800a7da:	1be1      	subs	r1, r4, r7
 800a7dc:	440a      	add	r2, r1
 800a7de:	2a00      	cmp	r2, #0
 800a7e0:	f340 8094 	ble.w	800a90c <_strtod_l+0x52c>
 800a7e4:	f012 000f 	ands.w	r0, r2, #15
 800a7e8:	d00a      	beq.n	800a800 <_strtod_l+0x420>
 800a7ea:	495d      	ldr	r1, [pc, #372]	@ (800a960 <_strtod_l+0x580>)
 800a7ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a7f0:	ed91 7b00 	vldr	d7, [r1]
 800a7f4:	ec4b ab16 	vmov	d6, sl, fp
 800a7f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7fc:	ec5b ab17 	vmov	sl, fp, d7
 800a800:	f032 020f 	bics.w	r2, r2, #15
 800a804:	d073      	beq.n	800a8ee <_strtod_l+0x50e>
 800a806:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a80a:	dd47      	ble.n	800a89c <_strtod_l+0x4bc>
 800a80c:	2400      	movs	r4, #0
 800a80e:	4625      	mov	r5, r4
 800a810:	9407      	str	r4, [sp, #28]
 800a812:	4626      	mov	r6, r4
 800a814:	9a05      	ldr	r2, [sp, #20]
 800a816:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a96c <_strtod_l+0x58c>
 800a81a:	2322      	movs	r3, #34	@ 0x22
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	f04f 0a00 	mov.w	sl, #0
 800a822:	9b07      	ldr	r3, [sp, #28]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f43f ae16 	beq.w	800a456 <_strtod_l+0x76>
 800a82a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a82c:	9805      	ldr	r0, [sp, #20]
 800a82e:	f002 f8a5 	bl	800c97c <_Bfree>
 800a832:	9805      	ldr	r0, [sp, #20]
 800a834:	4631      	mov	r1, r6
 800a836:	f002 f8a1 	bl	800c97c <_Bfree>
 800a83a:	9805      	ldr	r0, [sp, #20]
 800a83c:	4629      	mov	r1, r5
 800a83e:	f002 f89d 	bl	800c97c <_Bfree>
 800a842:	9907      	ldr	r1, [sp, #28]
 800a844:	9805      	ldr	r0, [sp, #20]
 800a846:	f002 f899 	bl	800c97c <_Bfree>
 800a84a:	9805      	ldr	r0, [sp, #20]
 800a84c:	4621      	mov	r1, r4
 800a84e:	f002 f895 	bl	800c97c <_Bfree>
 800a852:	e600      	b.n	800a456 <_strtod_l+0x76>
 800a854:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a858:	1be0      	subs	r0, r4, r7
 800a85a:	4281      	cmp	r1, r0
 800a85c:	dbbc      	blt.n	800a7d8 <_strtod_l+0x3f8>
 800a85e:	4a40      	ldr	r2, [pc, #256]	@ (800a960 <_strtod_l+0x580>)
 800a860:	f1c3 030f 	rsb	r3, r3, #15
 800a864:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a868:	ed91 7b00 	vldr	d7, [r1]
 800a86c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a86e:	ec4b ab16 	vmov	d6, sl, fp
 800a872:	1acb      	subs	r3, r1, r3
 800a874:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a878:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a87c:	ed92 6b00 	vldr	d6, [r2]
 800a880:	e796      	b.n	800a7b0 <_strtod_l+0x3d0>
 800a882:	3116      	adds	r1, #22
 800a884:	dba8      	blt.n	800a7d8 <_strtod_l+0x3f8>
 800a886:	4b36      	ldr	r3, [pc, #216]	@ (800a960 <_strtod_l+0x580>)
 800a888:	1b3c      	subs	r4, r7, r4
 800a88a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a88e:	ed94 7b00 	vldr	d7, [r4]
 800a892:	ec4b ab16 	vmov	d6, sl, fp
 800a896:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a89a:	e78b      	b.n	800a7b4 <_strtod_l+0x3d4>
 800a89c:	2000      	movs	r0, #0
 800a89e:	ec4b ab17 	vmov	d7, sl, fp
 800a8a2:	4e30      	ldr	r6, [pc, #192]	@ (800a964 <_strtod_l+0x584>)
 800a8a4:	1112      	asrs	r2, r2, #4
 800a8a6:	4601      	mov	r1, r0
 800a8a8:	2a01      	cmp	r2, #1
 800a8aa:	dc23      	bgt.n	800a8f4 <_strtod_l+0x514>
 800a8ac:	b108      	cbz	r0, 800a8b2 <_strtod_l+0x4d2>
 800a8ae:	ec5b ab17 	vmov	sl, fp, d7
 800a8b2:	4a2c      	ldr	r2, [pc, #176]	@ (800a964 <_strtod_l+0x584>)
 800a8b4:	482c      	ldr	r0, [pc, #176]	@ (800a968 <_strtod_l+0x588>)
 800a8b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a8ba:	ed92 7b00 	vldr	d7, [r2]
 800a8be:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a8c2:	ec4b ab16 	vmov	d6, sl, fp
 800a8c6:	4a29      	ldr	r2, [pc, #164]	@ (800a96c <_strtod_l+0x58c>)
 800a8c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8cc:	ee17 1a90 	vmov	r1, s15
 800a8d0:	400a      	ands	r2, r1
 800a8d2:	4282      	cmp	r2, r0
 800a8d4:	ec5b ab17 	vmov	sl, fp, d7
 800a8d8:	d898      	bhi.n	800a80c <_strtod_l+0x42c>
 800a8da:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a8de:	4282      	cmp	r2, r0
 800a8e0:	bf86      	itte	hi
 800a8e2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a970 <_strtod_l+0x590>
 800a8e6:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a8ea:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	9206      	str	r2, [sp, #24]
 800a8f2:	e076      	b.n	800a9e2 <_strtod_l+0x602>
 800a8f4:	f012 0f01 	tst.w	r2, #1
 800a8f8:	d004      	beq.n	800a904 <_strtod_l+0x524>
 800a8fa:	ed96 6b00 	vldr	d6, [r6]
 800a8fe:	2001      	movs	r0, #1
 800a900:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a904:	3101      	adds	r1, #1
 800a906:	1052      	asrs	r2, r2, #1
 800a908:	3608      	adds	r6, #8
 800a90a:	e7cd      	b.n	800a8a8 <_strtod_l+0x4c8>
 800a90c:	d0ef      	beq.n	800a8ee <_strtod_l+0x50e>
 800a90e:	4252      	negs	r2, r2
 800a910:	f012 000f 	ands.w	r0, r2, #15
 800a914:	d00a      	beq.n	800a92c <_strtod_l+0x54c>
 800a916:	4912      	ldr	r1, [pc, #72]	@ (800a960 <_strtod_l+0x580>)
 800a918:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a91c:	ed91 7b00 	vldr	d7, [r1]
 800a920:	ec4b ab16 	vmov	d6, sl, fp
 800a924:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a928:	ec5b ab17 	vmov	sl, fp, d7
 800a92c:	1112      	asrs	r2, r2, #4
 800a92e:	d0de      	beq.n	800a8ee <_strtod_l+0x50e>
 800a930:	2a1f      	cmp	r2, #31
 800a932:	dd1f      	ble.n	800a974 <_strtod_l+0x594>
 800a934:	2400      	movs	r4, #0
 800a936:	4625      	mov	r5, r4
 800a938:	9407      	str	r4, [sp, #28]
 800a93a:	4626      	mov	r6, r4
 800a93c:	9a05      	ldr	r2, [sp, #20]
 800a93e:	2322      	movs	r3, #34	@ 0x22
 800a940:	f04f 0a00 	mov.w	sl, #0
 800a944:	f04f 0b00 	mov.w	fp, #0
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	e76a      	b.n	800a822 <_strtod_l+0x442>
 800a94c:	0800e605 	.word	0x0800e605
 800a950:	0800e7d0 	.word	0x0800e7d0
 800a954:	0800e5fd 	.word	0x0800e5fd
 800a958:	0800e63e 	.word	0x0800e63e
 800a95c:	0800e7cd 	.word	0x0800e7cd
 800a960:	0800e958 	.word	0x0800e958
 800a964:	0800e930 	.word	0x0800e930
 800a968:	7ca00000 	.word	0x7ca00000
 800a96c:	7ff00000 	.word	0x7ff00000
 800a970:	7fefffff 	.word	0x7fefffff
 800a974:	f012 0110 	ands.w	r1, r2, #16
 800a978:	bf18      	it	ne
 800a97a:	216a      	movne	r1, #106	@ 0x6a
 800a97c:	9106      	str	r1, [sp, #24]
 800a97e:	ec4b ab17 	vmov	d7, sl, fp
 800a982:	49af      	ldr	r1, [pc, #700]	@ (800ac40 <_strtod_l+0x860>)
 800a984:	2000      	movs	r0, #0
 800a986:	07d6      	lsls	r6, r2, #31
 800a988:	d504      	bpl.n	800a994 <_strtod_l+0x5b4>
 800a98a:	ed91 6b00 	vldr	d6, [r1]
 800a98e:	2001      	movs	r0, #1
 800a990:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a994:	1052      	asrs	r2, r2, #1
 800a996:	f101 0108 	add.w	r1, r1, #8
 800a99a:	d1f4      	bne.n	800a986 <_strtod_l+0x5a6>
 800a99c:	b108      	cbz	r0, 800a9a2 <_strtod_l+0x5c2>
 800a99e:	ec5b ab17 	vmov	sl, fp, d7
 800a9a2:	9a06      	ldr	r2, [sp, #24]
 800a9a4:	b1b2      	cbz	r2, 800a9d4 <_strtod_l+0x5f4>
 800a9a6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800a9aa:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	4658      	mov	r0, fp
 800a9b2:	dd0f      	ble.n	800a9d4 <_strtod_l+0x5f4>
 800a9b4:	2a1f      	cmp	r2, #31
 800a9b6:	dd55      	ble.n	800aa64 <_strtod_l+0x684>
 800a9b8:	2a34      	cmp	r2, #52	@ 0x34
 800a9ba:	bfde      	ittt	le
 800a9bc:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800a9c0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800a9c4:	408a      	lslle	r2, r1
 800a9c6:	f04f 0a00 	mov.w	sl, #0
 800a9ca:	bfcc      	ite	gt
 800a9cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a9d0:	ea02 0b00 	andle.w	fp, r2, r0
 800a9d4:	ec4b ab17 	vmov	d7, sl, fp
 800a9d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e0:	d0a8      	beq.n	800a934 <_strtod_l+0x554>
 800a9e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a9e4:	9805      	ldr	r0, [sp, #20]
 800a9e6:	f8cd 9000 	str.w	r9, [sp]
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	f002 f82e 	bl	800ca4c <__s2b>
 800a9f0:	9007      	str	r0, [sp, #28]
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f43f af0a 	beq.w	800a80c <_strtod_l+0x42c>
 800a9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9fa:	1b3f      	subs	r7, r7, r4
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	bfb4      	ite	lt
 800aa00:	463b      	movlt	r3, r7
 800aa02:	2300      	movge	r3, #0
 800aa04:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa08:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800ac30 <_strtod_l+0x850>
 800aa0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa10:	2400      	movs	r4, #0
 800aa12:	930d      	str	r3, [sp, #52]	@ 0x34
 800aa14:	4625      	mov	r5, r4
 800aa16:	9b07      	ldr	r3, [sp, #28]
 800aa18:	9805      	ldr	r0, [sp, #20]
 800aa1a:	6859      	ldr	r1, [r3, #4]
 800aa1c:	f001 ff6e 	bl	800c8fc <_Balloc>
 800aa20:	4606      	mov	r6, r0
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f43f aef6 	beq.w	800a814 <_strtod_l+0x434>
 800aa28:	9b07      	ldr	r3, [sp, #28]
 800aa2a:	691a      	ldr	r2, [r3, #16]
 800aa2c:	ec4b ab19 	vmov	d9, sl, fp
 800aa30:	3202      	adds	r2, #2
 800aa32:	f103 010c 	add.w	r1, r3, #12
 800aa36:	0092      	lsls	r2, r2, #2
 800aa38:	300c      	adds	r0, #12
 800aa3a:	f000 fb57 	bl	800b0ec <memcpy>
 800aa3e:	eeb0 0b49 	vmov.f64	d0, d9
 800aa42:	9805      	ldr	r0, [sp, #20]
 800aa44:	aa14      	add	r2, sp, #80	@ 0x50
 800aa46:	a913      	add	r1, sp, #76	@ 0x4c
 800aa48:	f002 fb34 	bl	800d0b4 <__d2b>
 800aa4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f43f aee0 	beq.w	800a814 <_strtod_l+0x434>
 800aa54:	9805      	ldr	r0, [sp, #20]
 800aa56:	2101      	movs	r1, #1
 800aa58:	f002 f88e 	bl	800cb78 <__i2b>
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	b940      	cbnz	r0, 800aa72 <_strtod_l+0x692>
 800aa60:	2500      	movs	r5, #0
 800aa62:	e6d7      	b.n	800a814 <_strtod_l+0x434>
 800aa64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800aa68:	fa01 f202 	lsl.w	r2, r1, r2
 800aa6c:	ea02 0a0a 	and.w	sl, r2, sl
 800aa70:	e7b0      	b.n	800a9d4 <_strtod_l+0x5f4>
 800aa72:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800aa74:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aa76:	2f00      	cmp	r7, #0
 800aa78:	bfab      	itete	ge
 800aa7a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800aa7c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800aa7e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800aa82:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800aa86:	bfac      	ite	ge
 800aa88:	eb07 0903 	addge.w	r9, r7, r3
 800aa8c:	eba3 0807 	sublt.w	r8, r3, r7
 800aa90:	9b06      	ldr	r3, [sp, #24]
 800aa92:	1aff      	subs	r7, r7, r3
 800aa94:	4417      	add	r7, r2
 800aa96:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800aa9a:	4a6a      	ldr	r2, [pc, #424]	@ (800ac44 <_strtod_l+0x864>)
 800aa9c:	3f01      	subs	r7, #1
 800aa9e:	4297      	cmp	r7, r2
 800aaa0:	da51      	bge.n	800ab46 <_strtod_l+0x766>
 800aaa2:	1bd1      	subs	r1, r2, r7
 800aaa4:	291f      	cmp	r1, #31
 800aaa6:	eba3 0301 	sub.w	r3, r3, r1
 800aaaa:	f04f 0201 	mov.w	r2, #1
 800aaae:	dc3e      	bgt.n	800ab2e <_strtod_l+0x74e>
 800aab0:	408a      	lsls	r2, r1
 800aab2:	920c      	str	r2, [sp, #48]	@ 0x30
 800aab4:	2200      	movs	r2, #0
 800aab6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aab8:	eb09 0703 	add.w	r7, r9, r3
 800aabc:	4498      	add	r8, r3
 800aabe:	9b06      	ldr	r3, [sp, #24]
 800aac0:	45b9      	cmp	r9, r7
 800aac2:	4498      	add	r8, r3
 800aac4:	464b      	mov	r3, r9
 800aac6:	bfa8      	it	ge
 800aac8:	463b      	movge	r3, r7
 800aaca:	4543      	cmp	r3, r8
 800aacc:	bfa8      	it	ge
 800aace:	4643      	movge	r3, r8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	bfc2      	ittt	gt
 800aad4:	1aff      	subgt	r7, r7, r3
 800aad6:	eba8 0803 	subgt.w	r8, r8, r3
 800aada:	eba9 0903 	subgt.w	r9, r9, r3
 800aade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	dd16      	ble.n	800ab12 <_strtod_l+0x732>
 800aae4:	4629      	mov	r1, r5
 800aae6:	9805      	ldr	r0, [sp, #20]
 800aae8:	461a      	mov	r2, r3
 800aaea:	f002 f8fd 	bl	800cce8 <__pow5mult>
 800aaee:	4605      	mov	r5, r0
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d0b5      	beq.n	800aa60 <_strtod_l+0x680>
 800aaf4:	4601      	mov	r1, r0
 800aaf6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aaf8:	9805      	ldr	r0, [sp, #20]
 800aafa:	f002 f853 	bl	800cba4 <__multiply>
 800aafe:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f43f ae87 	beq.w	800a814 <_strtod_l+0x434>
 800ab06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ab08:	9805      	ldr	r0, [sp, #20]
 800ab0a:	f001 ff37 	bl	800c97c <_Bfree>
 800ab0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab10:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab12:	2f00      	cmp	r7, #0
 800ab14:	dc1b      	bgt.n	800ab4e <_strtod_l+0x76e>
 800ab16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	dd21      	ble.n	800ab60 <_strtod_l+0x780>
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab20:	9805      	ldr	r0, [sp, #20]
 800ab22:	f002 f8e1 	bl	800cce8 <__pow5mult>
 800ab26:	4606      	mov	r6, r0
 800ab28:	b9d0      	cbnz	r0, 800ab60 <_strtod_l+0x780>
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	e672      	b.n	800a814 <_strtod_l+0x434>
 800ab2e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ab32:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ab36:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ab3a:	37e2      	adds	r7, #226	@ 0xe2
 800ab3c:	fa02 f107 	lsl.w	r1, r2, r7
 800ab40:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab42:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab44:	e7b8      	b.n	800aab8 <_strtod_l+0x6d8>
 800ab46:	2200      	movs	r2, #0
 800ab48:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	e7f9      	b.n	800ab42 <_strtod_l+0x762>
 800ab4e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ab50:	9805      	ldr	r0, [sp, #20]
 800ab52:	463a      	mov	r2, r7
 800ab54:	f002 f922 	bl	800cd9c <__lshift>
 800ab58:	9012      	str	r0, [sp, #72]	@ 0x48
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d1db      	bne.n	800ab16 <_strtod_l+0x736>
 800ab5e:	e659      	b.n	800a814 <_strtod_l+0x434>
 800ab60:	f1b8 0f00 	cmp.w	r8, #0
 800ab64:	dd07      	ble.n	800ab76 <_strtod_l+0x796>
 800ab66:	4631      	mov	r1, r6
 800ab68:	9805      	ldr	r0, [sp, #20]
 800ab6a:	4642      	mov	r2, r8
 800ab6c:	f002 f916 	bl	800cd9c <__lshift>
 800ab70:	4606      	mov	r6, r0
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d0d9      	beq.n	800ab2a <_strtod_l+0x74a>
 800ab76:	f1b9 0f00 	cmp.w	r9, #0
 800ab7a:	dd08      	ble.n	800ab8e <_strtod_l+0x7ae>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	9805      	ldr	r0, [sp, #20]
 800ab80:	464a      	mov	r2, r9
 800ab82:	f002 f90b 	bl	800cd9c <__lshift>
 800ab86:	4605      	mov	r5, r0
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	f43f ae43 	beq.w	800a814 <_strtod_l+0x434>
 800ab8e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ab90:	9805      	ldr	r0, [sp, #20]
 800ab92:	4632      	mov	r2, r6
 800ab94:	f002 f98a 	bl	800ceac <__mdiff>
 800ab98:	4604      	mov	r4, r0
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	f43f ae3a 	beq.w	800a814 <_strtod_l+0x434>
 800aba0:	2300      	movs	r3, #0
 800aba2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800aba6:	60c3      	str	r3, [r0, #12]
 800aba8:	4629      	mov	r1, r5
 800abaa:	f002 f963 	bl	800ce74 <__mcmp>
 800abae:	2800      	cmp	r0, #0
 800abb0:	da4c      	bge.n	800ac4c <_strtod_l+0x86c>
 800abb2:	ea58 080a 	orrs.w	r8, r8, sl
 800abb6:	d172      	bne.n	800ac9e <_strtod_l+0x8be>
 800abb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d16e      	bne.n	800ac9e <_strtod_l+0x8be>
 800abc0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abc4:	0d1b      	lsrs	r3, r3, #20
 800abc6:	051b      	lsls	r3, r3, #20
 800abc8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800abcc:	d967      	bls.n	800ac9e <_strtod_l+0x8be>
 800abce:	6963      	ldr	r3, [r4, #20]
 800abd0:	b913      	cbnz	r3, 800abd8 <_strtod_l+0x7f8>
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	dd62      	ble.n	800ac9e <_strtod_l+0x8be>
 800abd8:	4621      	mov	r1, r4
 800abda:	2201      	movs	r2, #1
 800abdc:	9805      	ldr	r0, [sp, #20]
 800abde:	f002 f8dd 	bl	800cd9c <__lshift>
 800abe2:	4629      	mov	r1, r5
 800abe4:	4604      	mov	r4, r0
 800abe6:	f002 f945 	bl	800ce74 <__mcmp>
 800abea:	2800      	cmp	r0, #0
 800abec:	dd57      	ble.n	800ac9e <_strtod_l+0x8be>
 800abee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abf2:	9a06      	ldr	r2, [sp, #24]
 800abf4:	0d1b      	lsrs	r3, r3, #20
 800abf6:	051b      	lsls	r3, r3, #20
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	d06e      	beq.n	800acda <_strtod_l+0x8fa>
 800abfc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac00:	d86b      	bhi.n	800acda <_strtod_l+0x8fa>
 800ac02:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ac06:	f67f ae99 	bls.w	800a93c <_strtod_l+0x55c>
 800ac0a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800ac38 <_strtod_l+0x858>
 800ac0e:	ec4b ab16 	vmov	d6, sl, fp
 800ac12:	4b0d      	ldr	r3, [pc, #52]	@ (800ac48 <_strtod_l+0x868>)
 800ac14:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ac18:	ee17 2a90 	vmov	r2, s15
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	ec5b ab17 	vmov	sl, fp, d7
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f47f ae01 	bne.w	800a82a <_strtod_l+0x44a>
 800ac28:	9a05      	ldr	r2, [sp, #20]
 800ac2a:	2322      	movs	r3, #34	@ 0x22
 800ac2c:	6013      	str	r3, [r2, #0]
 800ac2e:	e5fc      	b.n	800a82a <_strtod_l+0x44a>
 800ac30:	ffc00000 	.word	0xffc00000
 800ac34:	41dfffff 	.word	0x41dfffff
 800ac38:	00000000 	.word	0x00000000
 800ac3c:	39500000 	.word	0x39500000
 800ac40:	0800e7f8 	.word	0x0800e7f8
 800ac44:	fffffc02 	.word	0xfffffc02
 800ac48:	7ff00000 	.word	0x7ff00000
 800ac4c:	46d9      	mov	r9, fp
 800ac4e:	d15d      	bne.n	800ad0c <_strtod_l+0x92c>
 800ac50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac54:	f1b8 0f00 	cmp.w	r8, #0
 800ac58:	d02a      	beq.n	800acb0 <_strtod_l+0x8d0>
 800ac5a:	4aa9      	ldr	r2, [pc, #676]	@ (800af00 <_strtod_l+0xb20>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d12a      	bne.n	800acb6 <_strtod_l+0x8d6>
 800ac60:	9b06      	ldr	r3, [sp, #24]
 800ac62:	4652      	mov	r2, sl
 800ac64:	b1fb      	cbz	r3, 800aca6 <_strtod_l+0x8c6>
 800ac66:	4ba7      	ldr	r3, [pc, #668]	@ (800af04 <_strtod_l+0xb24>)
 800ac68:	ea0b 0303 	and.w	r3, fp, r3
 800ac6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ac70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ac74:	d81a      	bhi.n	800acac <_strtod_l+0x8cc>
 800ac76:	0d1b      	lsrs	r3, r3, #20
 800ac78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d118      	bne.n	800acb6 <_strtod_l+0x8d6>
 800ac84:	4ba0      	ldr	r3, [pc, #640]	@ (800af08 <_strtod_l+0xb28>)
 800ac86:	4599      	cmp	r9, r3
 800ac88:	d102      	bne.n	800ac90 <_strtod_l+0x8b0>
 800ac8a:	3201      	adds	r2, #1
 800ac8c:	f43f adc2 	beq.w	800a814 <_strtod_l+0x434>
 800ac90:	4b9c      	ldr	r3, [pc, #624]	@ (800af04 <_strtod_l+0xb24>)
 800ac92:	ea09 0303 	and.w	r3, r9, r3
 800ac96:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ac9a:	f04f 0a00 	mov.w	sl, #0
 800ac9e:	9b06      	ldr	r3, [sp, #24]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1b2      	bne.n	800ac0a <_strtod_l+0x82a>
 800aca4:	e5c1      	b.n	800a82a <_strtod_l+0x44a>
 800aca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800acaa:	e7e9      	b.n	800ac80 <_strtod_l+0x8a0>
 800acac:	460b      	mov	r3, r1
 800acae:	e7e7      	b.n	800ac80 <_strtod_l+0x8a0>
 800acb0:	ea53 030a 	orrs.w	r3, r3, sl
 800acb4:	d09b      	beq.n	800abee <_strtod_l+0x80e>
 800acb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acb8:	b1c3      	cbz	r3, 800acec <_strtod_l+0x90c>
 800acba:	ea13 0f09 	tst.w	r3, r9
 800acbe:	d0ee      	beq.n	800ac9e <_strtod_l+0x8be>
 800acc0:	9a06      	ldr	r2, [sp, #24]
 800acc2:	4650      	mov	r0, sl
 800acc4:	4659      	mov	r1, fp
 800acc6:	f1b8 0f00 	cmp.w	r8, #0
 800acca:	d013      	beq.n	800acf4 <_strtod_l+0x914>
 800accc:	f7ff fb6e 	bl	800a3ac <sulp>
 800acd0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800acd4:	ec5b ab17 	vmov	sl, fp, d7
 800acd8:	e7e1      	b.n	800ac9e <_strtod_l+0x8be>
 800acda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800acde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ace2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ace6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800acea:	e7d8      	b.n	800ac9e <_strtod_l+0x8be>
 800acec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acee:	ea13 0f0a 	tst.w	r3, sl
 800acf2:	e7e4      	b.n	800acbe <_strtod_l+0x8de>
 800acf4:	f7ff fb5a 	bl	800a3ac <sulp>
 800acf8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800acfc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ad00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad04:	ec5b ab10 	vmov	sl, fp, d0
 800ad08:	d1c9      	bne.n	800ac9e <_strtod_l+0x8be>
 800ad0a:	e617      	b.n	800a93c <_strtod_l+0x55c>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f002 fa28 	bl	800d164 <__ratio>
 800ad14:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ad18:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ad1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad20:	d85d      	bhi.n	800adde <_strtod_l+0x9fe>
 800ad22:	f1b8 0f00 	cmp.w	r8, #0
 800ad26:	d164      	bne.n	800adf2 <_strtod_l+0xa12>
 800ad28:	f1ba 0f00 	cmp.w	sl, #0
 800ad2c:	d14b      	bne.n	800adc6 <_strtod_l+0x9e6>
 800ad2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad32:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d160      	bne.n	800adfc <_strtod_l+0xa1c>
 800ad3a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ad3e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ad42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad46:	d401      	bmi.n	800ad4c <_strtod_l+0x96c>
 800ad48:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ad4c:	eeb1 ab48 	vneg.f64	d10, d8
 800ad50:	486c      	ldr	r0, [pc, #432]	@ (800af04 <_strtod_l+0xb24>)
 800ad52:	496e      	ldr	r1, [pc, #440]	@ (800af0c <_strtod_l+0xb2c>)
 800ad54:	ea09 0700 	and.w	r7, r9, r0
 800ad58:	428f      	cmp	r7, r1
 800ad5a:	ec53 2b1a 	vmov	r2, r3, d10
 800ad5e:	d17d      	bne.n	800ae5c <_strtod_l+0xa7c>
 800ad60:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ad64:	ec4b ab1c 	vmov	d12, sl, fp
 800ad68:	eeb0 0b4c 	vmov.f64	d0, d12
 800ad6c:	f002 f932 	bl	800cfd4 <__ulp>
 800ad70:	4864      	ldr	r0, [pc, #400]	@ (800af04 <_strtod_l+0xb24>)
 800ad72:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ad76:	ee1c 3a90 	vmov	r3, s25
 800ad7a:	4a65      	ldr	r2, [pc, #404]	@ (800af10 <_strtod_l+0xb30>)
 800ad7c:	ea03 0100 	and.w	r1, r3, r0
 800ad80:	4291      	cmp	r1, r2
 800ad82:	ec5b ab1c 	vmov	sl, fp, d12
 800ad86:	d93c      	bls.n	800ae02 <_strtod_l+0xa22>
 800ad88:	ee19 2a90 	vmov	r2, s19
 800ad8c:	4b5e      	ldr	r3, [pc, #376]	@ (800af08 <_strtod_l+0xb28>)
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d104      	bne.n	800ad9c <_strtod_l+0x9bc>
 800ad92:	ee19 3a10 	vmov	r3, s18
 800ad96:	3301      	adds	r3, #1
 800ad98:	f43f ad3c 	beq.w	800a814 <_strtod_l+0x434>
 800ad9c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800af08 <_strtod_l+0xb28>
 800ada0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ada4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ada6:	9805      	ldr	r0, [sp, #20]
 800ada8:	f001 fde8 	bl	800c97c <_Bfree>
 800adac:	9805      	ldr	r0, [sp, #20]
 800adae:	4631      	mov	r1, r6
 800adb0:	f001 fde4 	bl	800c97c <_Bfree>
 800adb4:	9805      	ldr	r0, [sp, #20]
 800adb6:	4629      	mov	r1, r5
 800adb8:	f001 fde0 	bl	800c97c <_Bfree>
 800adbc:	9805      	ldr	r0, [sp, #20]
 800adbe:	4621      	mov	r1, r4
 800adc0:	f001 fddc 	bl	800c97c <_Bfree>
 800adc4:	e627      	b.n	800aa16 <_strtod_l+0x636>
 800adc6:	f1ba 0f01 	cmp.w	sl, #1
 800adca:	d103      	bne.n	800add4 <_strtod_l+0x9f4>
 800adcc:	f1bb 0f00 	cmp.w	fp, #0
 800add0:	f43f adb4 	beq.w	800a93c <_strtod_l+0x55c>
 800add4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800add8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800addc:	e7b8      	b.n	800ad50 <_strtod_l+0x970>
 800adde:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ade2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ade6:	f1b8 0f00 	cmp.w	r8, #0
 800adea:	d0af      	beq.n	800ad4c <_strtod_l+0x96c>
 800adec:	eeb0 ab48 	vmov.f64	d10, d8
 800adf0:	e7ae      	b.n	800ad50 <_strtod_l+0x970>
 800adf2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800adf6:	eeb0 8b4a 	vmov.f64	d8, d10
 800adfa:	e7a9      	b.n	800ad50 <_strtod_l+0x970>
 800adfc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ae00:	e7a6      	b.n	800ad50 <_strtod_l+0x970>
 800ae02:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	46d9      	mov	r9, fp
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1ca      	bne.n	800ada4 <_strtod_l+0x9c4>
 800ae0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae12:	0d1b      	lsrs	r3, r3, #20
 800ae14:	051b      	lsls	r3, r3, #20
 800ae16:	429f      	cmp	r7, r3
 800ae18:	d1c4      	bne.n	800ada4 <_strtod_l+0x9c4>
 800ae1a:	ec51 0b18 	vmov	r0, r1, d8
 800ae1e:	f7f5 fc8b 	bl	8000738 <__aeabi_d2lz>
 800ae22:	f7f5 fc43 	bl	80006ac <__aeabi_l2d>
 800ae26:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ae2a:	ec41 0b17 	vmov	d7, r0, r1
 800ae2e:	ea49 090a 	orr.w	r9, r9, sl
 800ae32:	ea59 0908 	orrs.w	r9, r9, r8
 800ae36:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ae3a:	d03c      	beq.n	800aeb6 <_strtod_l+0xad6>
 800ae3c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800aee8 <_strtod_l+0xb08>
 800ae40:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae48:	f53f acef 	bmi.w	800a82a <_strtod_l+0x44a>
 800ae4c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800aef0 <_strtod_l+0xb10>
 800ae50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae58:	dda4      	ble.n	800ada4 <_strtod_l+0x9c4>
 800ae5a:	e4e6      	b.n	800a82a <_strtod_l+0x44a>
 800ae5c:	9906      	ldr	r1, [sp, #24]
 800ae5e:	b1e1      	cbz	r1, 800ae9a <_strtod_l+0xaba>
 800ae60:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ae64:	d819      	bhi.n	800ae9a <_strtod_l+0xaba>
 800ae66:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ae6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6e:	d811      	bhi.n	800ae94 <_strtod_l+0xab4>
 800ae70:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ae74:	ee18 3a10 	vmov	r3, s16
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	bf38      	it	cc
 800ae7c:	2301      	movcc	r3, #1
 800ae7e:	ee08 3a10 	vmov	s16, r3
 800ae82:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ae86:	f1b8 0f00 	cmp.w	r8, #0
 800ae8a:	d111      	bne.n	800aeb0 <_strtod_l+0xad0>
 800ae8c:	eeb1 7b48 	vneg.f64	d7, d8
 800ae90:	ec53 2b17 	vmov	r2, r3, d7
 800ae94:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ae98:	1bcb      	subs	r3, r1, r7
 800ae9a:	eeb0 0b49 	vmov.f64	d0, d9
 800ae9e:	ec43 2b1a 	vmov	d10, r2, r3
 800aea2:	f002 f897 	bl	800cfd4 <__ulp>
 800aea6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800aeaa:	ec5b ab19 	vmov	sl, fp, d9
 800aeae:	e7aa      	b.n	800ae06 <_strtod_l+0xa26>
 800aeb0:	eeb0 7b48 	vmov.f64	d7, d8
 800aeb4:	e7ec      	b.n	800ae90 <_strtod_l+0xab0>
 800aeb6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800aef8 <_strtod_l+0xb18>
 800aeba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec2:	f57f af6f 	bpl.w	800ada4 <_strtod_l+0x9c4>
 800aec6:	e4b0      	b.n	800a82a <_strtod_l+0x44a>
 800aec8:	2300      	movs	r3, #0
 800aeca:	9308      	str	r3, [sp, #32]
 800aecc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aece:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	f7ff bac4 	b.w	800a45e <_strtod_l+0x7e>
 800aed6:	2a65      	cmp	r2, #101	@ 0x65
 800aed8:	f43f abbf 	beq.w	800a65a <_strtod_l+0x27a>
 800aedc:	2a45      	cmp	r2, #69	@ 0x45
 800aede:	f43f abbc 	beq.w	800a65a <_strtod_l+0x27a>
 800aee2:	2101      	movs	r1, #1
 800aee4:	f7ff bbf4 	b.w	800a6d0 <_strtod_l+0x2f0>
 800aee8:	94a03595 	.word	0x94a03595
 800aeec:	3fdfffff 	.word	0x3fdfffff
 800aef0:	35afe535 	.word	0x35afe535
 800aef4:	3fe00000 	.word	0x3fe00000
 800aef8:	94a03595 	.word	0x94a03595
 800aefc:	3fcfffff 	.word	0x3fcfffff
 800af00:	000fffff 	.word	0x000fffff
 800af04:	7ff00000 	.word	0x7ff00000
 800af08:	7fefffff 	.word	0x7fefffff
 800af0c:	7fe00000 	.word	0x7fe00000
 800af10:	7c9fffff 	.word	0x7c9fffff

0800af14 <_strtod_r>:
 800af14:	4b01      	ldr	r3, [pc, #4]	@ (800af1c <_strtod_r+0x8>)
 800af16:	f7ff ba63 	b.w	800a3e0 <_strtod_l>
 800af1a:	bf00      	nop
 800af1c:	24000020 	.word	0x24000020

0800af20 <_strtol_l.isra.0>:
 800af20:	2b24      	cmp	r3, #36	@ 0x24
 800af22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af26:	4686      	mov	lr, r0
 800af28:	4690      	mov	r8, r2
 800af2a:	d801      	bhi.n	800af30 <_strtol_l.isra.0+0x10>
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d106      	bne.n	800af3e <_strtol_l.isra.0+0x1e>
 800af30:	f000 f8aa 	bl	800b088 <__errno>
 800af34:	2316      	movs	r3, #22
 800af36:	6003      	str	r3, [r0, #0]
 800af38:	2000      	movs	r0, #0
 800af3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af3e:	4834      	ldr	r0, [pc, #208]	@ (800b010 <_strtol_l.isra.0+0xf0>)
 800af40:	460d      	mov	r5, r1
 800af42:	462a      	mov	r2, r5
 800af44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af48:	5d06      	ldrb	r6, [r0, r4]
 800af4a:	f016 0608 	ands.w	r6, r6, #8
 800af4e:	d1f8      	bne.n	800af42 <_strtol_l.isra.0+0x22>
 800af50:	2c2d      	cmp	r4, #45	@ 0x2d
 800af52:	d110      	bne.n	800af76 <_strtol_l.isra.0+0x56>
 800af54:	782c      	ldrb	r4, [r5, #0]
 800af56:	2601      	movs	r6, #1
 800af58:	1c95      	adds	r5, r2, #2
 800af5a:	f033 0210 	bics.w	r2, r3, #16
 800af5e:	d115      	bne.n	800af8c <_strtol_l.isra.0+0x6c>
 800af60:	2c30      	cmp	r4, #48	@ 0x30
 800af62:	d10d      	bne.n	800af80 <_strtol_l.isra.0+0x60>
 800af64:	782a      	ldrb	r2, [r5, #0]
 800af66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af6a:	2a58      	cmp	r2, #88	@ 0x58
 800af6c:	d108      	bne.n	800af80 <_strtol_l.isra.0+0x60>
 800af6e:	786c      	ldrb	r4, [r5, #1]
 800af70:	3502      	adds	r5, #2
 800af72:	2310      	movs	r3, #16
 800af74:	e00a      	b.n	800af8c <_strtol_l.isra.0+0x6c>
 800af76:	2c2b      	cmp	r4, #43	@ 0x2b
 800af78:	bf04      	itt	eq
 800af7a:	782c      	ldrbeq	r4, [r5, #0]
 800af7c:	1c95      	addeq	r5, r2, #2
 800af7e:	e7ec      	b.n	800af5a <_strtol_l.isra.0+0x3a>
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1f6      	bne.n	800af72 <_strtol_l.isra.0+0x52>
 800af84:	2c30      	cmp	r4, #48	@ 0x30
 800af86:	bf14      	ite	ne
 800af88:	230a      	movne	r3, #10
 800af8a:	2308      	moveq	r3, #8
 800af8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af90:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800af94:	2200      	movs	r2, #0
 800af96:	fbbc f9f3 	udiv	r9, ip, r3
 800af9a:	4610      	mov	r0, r2
 800af9c:	fb03 ca19 	mls	sl, r3, r9, ip
 800afa0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800afa4:	2f09      	cmp	r7, #9
 800afa6:	d80f      	bhi.n	800afc8 <_strtol_l.isra.0+0xa8>
 800afa8:	463c      	mov	r4, r7
 800afaa:	42a3      	cmp	r3, r4
 800afac:	dd1b      	ble.n	800afe6 <_strtol_l.isra.0+0xc6>
 800afae:	1c57      	adds	r7, r2, #1
 800afb0:	d007      	beq.n	800afc2 <_strtol_l.isra.0+0xa2>
 800afb2:	4581      	cmp	r9, r0
 800afb4:	d314      	bcc.n	800afe0 <_strtol_l.isra.0+0xc0>
 800afb6:	d101      	bne.n	800afbc <_strtol_l.isra.0+0x9c>
 800afb8:	45a2      	cmp	sl, r4
 800afba:	db11      	blt.n	800afe0 <_strtol_l.isra.0+0xc0>
 800afbc:	fb00 4003 	mla	r0, r0, r3, r4
 800afc0:	2201      	movs	r2, #1
 800afc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afc6:	e7eb      	b.n	800afa0 <_strtol_l.isra.0+0x80>
 800afc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800afcc:	2f19      	cmp	r7, #25
 800afce:	d801      	bhi.n	800afd4 <_strtol_l.isra.0+0xb4>
 800afd0:	3c37      	subs	r4, #55	@ 0x37
 800afd2:	e7ea      	b.n	800afaa <_strtol_l.isra.0+0x8a>
 800afd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800afd8:	2f19      	cmp	r7, #25
 800afda:	d804      	bhi.n	800afe6 <_strtol_l.isra.0+0xc6>
 800afdc:	3c57      	subs	r4, #87	@ 0x57
 800afde:	e7e4      	b.n	800afaa <_strtol_l.isra.0+0x8a>
 800afe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afe4:	e7ed      	b.n	800afc2 <_strtol_l.isra.0+0xa2>
 800afe6:	1c53      	adds	r3, r2, #1
 800afe8:	d108      	bne.n	800affc <_strtol_l.isra.0+0xdc>
 800afea:	2322      	movs	r3, #34	@ 0x22
 800afec:	f8ce 3000 	str.w	r3, [lr]
 800aff0:	4660      	mov	r0, ip
 800aff2:	f1b8 0f00 	cmp.w	r8, #0
 800aff6:	d0a0      	beq.n	800af3a <_strtol_l.isra.0+0x1a>
 800aff8:	1e69      	subs	r1, r5, #1
 800affa:	e006      	b.n	800b00a <_strtol_l.isra.0+0xea>
 800affc:	b106      	cbz	r6, 800b000 <_strtol_l.isra.0+0xe0>
 800affe:	4240      	negs	r0, r0
 800b000:	f1b8 0f00 	cmp.w	r8, #0
 800b004:	d099      	beq.n	800af3a <_strtol_l.isra.0+0x1a>
 800b006:	2a00      	cmp	r2, #0
 800b008:	d1f6      	bne.n	800aff8 <_strtol_l.isra.0+0xd8>
 800b00a:	f8c8 1000 	str.w	r1, [r8]
 800b00e:	e794      	b.n	800af3a <_strtol_l.isra.0+0x1a>
 800b010:	0800e821 	.word	0x0800e821

0800b014 <_strtol_r>:
 800b014:	f7ff bf84 	b.w	800af20 <_strtol_l.isra.0>

0800b018 <_fwalk_sglue>:
 800b018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b01c:	4607      	mov	r7, r0
 800b01e:	4688      	mov	r8, r1
 800b020:	4614      	mov	r4, r2
 800b022:	2600      	movs	r6, #0
 800b024:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b028:	f1b9 0901 	subs.w	r9, r9, #1
 800b02c:	d505      	bpl.n	800b03a <_fwalk_sglue+0x22>
 800b02e:	6824      	ldr	r4, [r4, #0]
 800b030:	2c00      	cmp	r4, #0
 800b032:	d1f7      	bne.n	800b024 <_fwalk_sglue+0xc>
 800b034:	4630      	mov	r0, r6
 800b036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b03a:	89ab      	ldrh	r3, [r5, #12]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d907      	bls.n	800b050 <_fwalk_sglue+0x38>
 800b040:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b044:	3301      	adds	r3, #1
 800b046:	d003      	beq.n	800b050 <_fwalk_sglue+0x38>
 800b048:	4629      	mov	r1, r5
 800b04a:	4638      	mov	r0, r7
 800b04c:	47c0      	blx	r8
 800b04e:	4306      	orrs	r6, r0
 800b050:	3568      	adds	r5, #104	@ 0x68
 800b052:	e7e9      	b.n	800b028 <_fwalk_sglue+0x10>

0800b054 <memset>:
 800b054:	4402      	add	r2, r0
 800b056:	4603      	mov	r3, r0
 800b058:	4293      	cmp	r3, r2
 800b05a:	d100      	bne.n	800b05e <memset+0xa>
 800b05c:	4770      	bx	lr
 800b05e:	f803 1b01 	strb.w	r1, [r3], #1
 800b062:	e7f9      	b.n	800b058 <memset+0x4>

0800b064 <strncmp>:
 800b064:	b510      	push	{r4, lr}
 800b066:	b16a      	cbz	r2, 800b084 <strncmp+0x20>
 800b068:	3901      	subs	r1, #1
 800b06a:	1884      	adds	r4, r0, r2
 800b06c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b070:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b074:	429a      	cmp	r2, r3
 800b076:	d103      	bne.n	800b080 <strncmp+0x1c>
 800b078:	42a0      	cmp	r0, r4
 800b07a:	d001      	beq.n	800b080 <strncmp+0x1c>
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	d1f5      	bne.n	800b06c <strncmp+0x8>
 800b080:	1ad0      	subs	r0, r2, r3
 800b082:	bd10      	pop	{r4, pc}
 800b084:	4610      	mov	r0, r2
 800b086:	e7fc      	b.n	800b082 <strncmp+0x1e>

0800b088 <__errno>:
 800b088:	4b01      	ldr	r3, [pc, #4]	@ (800b090 <__errno+0x8>)
 800b08a:	6818      	ldr	r0, [r3, #0]
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	2400018c 	.word	0x2400018c

0800b094 <__libc_init_array>:
 800b094:	b570      	push	{r4, r5, r6, lr}
 800b096:	4d0d      	ldr	r5, [pc, #52]	@ (800b0cc <__libc_init_array+0x38>)
 800b098:	4c0d      	ldr	r4, [pc, #52]	@ (800b0d0 <__libc_init_array+0x3c>)
 800b09a:	1b64      	subs	r4, r4, r5
 800b09c:	10a4      	asrs	r4, r4, #2
 800b09e:	2600      	movs	r6, #0
 800b0a0:	42a6      	cmp	r6, r4
 800b0a2:	d109      	bne.n	800b0b8 <__libc_init_array+0x24>
 800b0a4:	4d0b      	ldr	r5, [pc, #44]	@ (800b0d4 <__libc_init_array+0x40>)
 800b0a6:	4c0c      	ldr	r4, [pc, #48]	@ (800b0d8 <__libc_init_array+0x44>)
 800b0a8:	f003 fa7e 	bl	800e5a8 <_init>
 800b0ac:	1b64      	subs	r4, r4, r5
 800b0ae:	10a4      	asrs	r4, r4, #2
 800b0b0:	2600      	movs	r6, #0
 800b0b2:	42a6      	cmp	r6, r4
 800b0b4:	d105      	bne.n	800b0c2 <__libc_init_array+0x2e>
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}
 800b0b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0bc:	4798      	blx	r3
 800b0be:	3601      	adds	r6, #1
 800b0c0:	e7ee      	b.n	800b0a0 <__libc_init_array+0xc>
 800b0c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0c6:	4798      	blx	r3
 800b0c8:	3601      	adds	r6, #1
 800b0ca:	e7f2      	b.n	800b0b2 <__libc_init_array+0x1e>
 800b0cc:	08010318 	.word	0x08010318
 800b0d0:	08010318 	.word	0x08010318
 800b0d4:	08010318 	.word	0x08010318
 800b0d8:	0801031c 	.word	0x0801031c

0800b0dc <__retarget_lock_init_recursive>:
 800b0dc:	4770      	bx	lr

0800b0de <__retarget_lock_acquire_recursive>:
 800b0de:	4770      	bx	lr

0800b0e0 <__retarget_lock_release_recursive>:
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <_localeconv_r>:
 800b0e4:	4800      	ldr	r0, [pc, #0]	@ (800b0e8 <_localeconv_r+0x4>)
 800b0e6:	4770      	bx	lr
 800b0e8:	24000110 	.word	0x24000110

0800b0ec <memcpy>:
 800b0ec:	440a      	add	r2, r1
 800b0ee:	4291      	cmp	r1, r2
 800b0f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b0f4:	d100      	bne.n	800b0f8 <memcpy+0xc>
 800b0f6:	4770      	bx	lr
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b102:	4291      	cmp	r1, r2
 800b104:	d1f9      	bne.n	800b0fa <memcpy+0xe>
 800b106:	bd10      	pop	{r4, pc}

0800b108 <nan>:
 800b108:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b110 <nan+0x8>
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	00000000 	.word	0x00000000
 800b114:	7ff80000 	.word	0x7ff80000

0800b118 <nanf>:
 800b118:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b120 <nanf+0x8>
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	7fc00000 	.word	0x7fc00000

0800b124 <quorem>:
 800b124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	6903      	ldr	r3, [r0, #16]
 800b12a:	690c      	ldr	r4, [r1, #16]
 800b12c:	42a3      	cmp	r3, r4
 800b12e:	4607      	mov	r7, r0
 800b130:	db7e      	blt.n	800b230 <quorem+0x10c>
 800b132:	3c01      	subs	r4, #1
 800b134:	f101 0814 	add.w	r8, r1, #20
 800b138:	00a3      	lsls	r3, r4, #2
 800b13a:	f100 0514 	add.w	r5, r0, #20
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b14a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b14e:	3301      	adds	r3, #1
 800b150:	429a      	cmp	r2, r3
 800b152:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b156:	fbb2 f6f3 	udiv	r6, r2, r3
 800b15a:	d32e      	bcc.n	800b1ba <quorem+0x96>
 800b15c:	f04f 0a00 	mov.w	sl, #0
 800b160:	46c4      	mov	ip, r8
 800b162:	46ae      	mov	lr, r5
 800b164:	46d3      	mov	fp, sl
 800b166:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b16a:	b298      	uxth	r0, r3
 800b16c:	fb06 a000 	mla	r0, r6, r0, sl
 800b170:	0c02      	lsrs	r2, r0, #16
 800b172:	0c1b      	lsrs	r3, r3, #16
 800b174:	fb06 2303 	mla	r3, r6, r3, r2
 800b178:	f8de 2000 	ldr.w	r2, [lr]
 800b17c:	b280      	uxth	r0, r0
 800b17e:	b292      	uxth	r2, r2
 800b180:	1a12      	subs	r2, r2, r0
 800b182:	445a      	add	r2, fp
 800b184:	f8de 0000 	ldr.w	r0, [lr]
 800b188:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b192:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b196:	b292      	uxth	r2, r2
 800b198:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b19c:	45e1      	cmp	r9, ip
 800b19e:	f84e 2b04 	str.w	r2, [lr], #4
 800b1a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b1a6:	d2de      	bcs.n	800b166 <quorem+0x42>
 800b1a8:	9b00      	ldr	r3, [sp, #0]
 800b1aa:	58eb      	ldr	r3, [r5, r3]
 800b1ac:	b92b      	cbnz	r3, 800b1ba <quorem+0x96>
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	3b04      	subs	r3, #4
 800b1b2:	429d      	cmp	r5, r3
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	d32f      	bcc.n	800b218 <quorem+0xf4>
 800b1b8:	613c      	str	r4, [r7, #16]
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f001 fe5a 	bl	800ce74 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	db25      	blt.n	800b210 <quorem+0xec>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1cc:	f8d1 c000 	ldr.w	ip, [r1]
 800b1d0:	fa1f fe82 	uxth.w	lr, r2
 800b1d4:	fa1f f38c 	uxth.w	r3, ip
 800b1d8:	eba3 030e 	sub.w	r3, r3, lr
 800b1dc:	4403      	add	r3, r0
 800b1de:	0c12      	lsrs	r2, r2, #16
 800b1e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ee:	45c1      	cmp	r9, r8
 800b1f0:	f841 3b04 	str.w	r3, [r1], #4
 800b1f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1f8:	d2e6      	bcs.n	800b1c8 <quorem+0xa4>
 800b1fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b202:	b922      	cbnz	r2, 800b20e <quorem+0xea>
 800b204:	3b04      	subs	r3, #4
 800b206:	429d      	cmp	r5, r3
 800b208:	461a      	mov	r2, r3
 800b20a:	d30b      	bcc.n	800b224 <quorem+0x100>
 800b20c:	613c      	str	r4, [r7, #16]
 800b20e:	3601      	adds	r6, #1
 800b210:	4630      	mov	r0, r6
 800b212:	b003      	add	sp, #12
 800b214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b218:	6812      	ldr	r2, [r2, #0]
 800b21a:	3b04      	subs	r3, #4
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	d1cb      	bne.n	800b1b8 <quorem+0x94>
 800b220:	3c01      	subs	r4, #1
 800b222:	e7c6      	b.n	800b1b2 <quorem+0x8e>
 800b224:	6812      	ldr	r2, [r2, #0]
 800b226:	3b04      	subs	r3, #4
 800b228:	2a00      	cmp	r2, #0
 800b22a:	d1ef      	bne.n	800b20c <quorem+0xe8>
 800b22c:	3c01      	subs	r4, #1
 800b22e:	e7ea      	b.n	800b206 <quorem+0xe2>
 800b230:	2000      	movs	r0, #0
 800b232:	e7ee      	b.n	800b212 <quorem+0xee>
 800b234:	0000      	movs	r0, r0
	...

0800b238 <_dtoa_r>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	ed2d 8b02 	vpush	{d8}
 800b240:	69c7      	ldr	r7, [r0, #28]
 800b242:	b091      	sub	sp, #68	@ 0x44
 800b244:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b248:	ec55 4b10 	vmov	r4, r5, d0
 800b24c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b24e:	9107      	str	r1, [sp, #28]
 800b250:	4681      	mov	r9, r0
 800b252:	9209      	str	r2, [sp, #36]	@ 0x24
 800b254:	930d      	str	r3, [sp, #52]	@ 0x34
 800b256:	b97f      	cbnz	r7, 800b278 <_dtoa_r+0x40>
 800b258:	2010      	movs	r0, #16
 800b25a:	f001 f9db 	bl	800c614 <malloc>
 800b25e:	4602      	mov	r2, r0
 800b260:	f8c9 001c 	str.w	r0, [r9, #28]
 800b264:	b920      	cbnz	r0, 800b270 <_dtoa_r+0x38>
 800b266:	4ba0      	ldr	r3, [pc, #640]	@ (800b4e8 <_dtoa_r+0x2b0>)
 800b268:	21ef      	movs	r1, #239	@ 0xef
 800b26a:	48a0      	ldr	r0, [pc, #640]	@ (800b4ec <_dtoa_r+0x2b4>)
 800b26c:	f002 f8dc 	bl	800d428 <__assert_func>
 800b270:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b274:	6007      	str	r7, [r0, #0]
 800b276:	60c7      	str	r7, [r0, #12]
 800b278:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b27c:	6819      	ldr	r1, [r3, #0]
 800b27e:	b159      	cbz	r1, 800b298 <_dtoa_r+0x60>
 800b280:	685a      	ldr	r2, [r3, #4]
 800b282:	604a      	str	r2, [r1, #4]
 800b284:	2301      	movs	r3, #1
 800b286:	4093      	lsls	r3, r2
 800b288:	608b      	str	r3, [r1, #8]
 800b28a:	4648      	mov	r0, r9
 800b28c:	f001 fb76 	bl	800c97c <_Bfree>
 800b290:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	1e2b      	subs	r3, r5, #0
 800b29a:	bfbb      	ittet	lt
 800b29c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b2a0:	9303      	strlt	r3, [sp, #12]
 800b2a2:	2300      	movge	r3, #0
 800b2a4:	2201      	movlt	r2, #1
 800b2a6:	bfac      	ite	ge
 800b2a8:	6033      	strge	r3, [r6, #0]
 800b2aa:	6032      	strlt	r2, [r6, #0]
 800b2ac:	4b90      	ldr	r3, [pc, #576]	@ (800b4f0 <_dtoa_r+0x2b8>)
 800b2ae:	9e03      	ldr	r6, [sp, #12]
 800b2b0:	43b3      	bics	r3, r6
 800b2b2:	d110      	bne.n	800b2d6 <_dtoa_r+0x9e>
 800b2b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b2c0:	4323      	orrs	r3, r4
 800b2c2:	f000 84e6 	beq.w	800bc92 <_dtoa_r+0xa5a>
 800b2c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b2c8:	4f8a      	ldr	r7, [pc, #552]	@ (800b4f4 <_dtoa_r+0x2bc>)
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 84e8 	beq.w	800bca0 <_dtoa_r+0xa68>
 800b2d0:	1cfb      	adds	r3, r7, #3
 800b2d2:	f000 bce3 	b.w	800bc9c <_dtoa_r+0xa64>
 800b2d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b2da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e2:	d10a      	bne.n	800b2fa <_dtoa_r+0xc2>
 800b2e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b2ec:	b113      	cbz	r3, 800b2f4 <_dtoa_r+0xbc>
 800b2ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b2f0:	4b81      	ldr	r3, [pc, #516]	@ (800b4f8 <_dtoa_r+0x2c0>)
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	4f81      	ldr	r7, [pc, #516]	@ (800b4fc <_dtoa_r+0x2c4>)
 800b2f6:	f000 bcd3 	b.w	800bca0 <_dtoa_r+0xa68>
 800b2fa:	aa0e      	add	r2, sp, #56	@ 0x38
 800b2fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800b2fe:	4648      	mov	r0, r9
 800b300:	eeb0 0b48 	vmov.f64	d0, d8
 800b304:	f001 fed6 	bl	800d0b4 <__d2b>
 800b308:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b30c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b30e:	9001      	str	r0, [sp, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d045      	beq.n	800b3a0 <_dtoa_r+0x168>
 800b314:	eeb0 7b48 	vmov.f64	d7, d8
 800b318:	ee18 1a90 	vmov	r1, s17
 800b31c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b320:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b324:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b328:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b32c:	2500      	movs	r5, #0
 800b32e:	ee07 1a90 	vmov	s15, r1
 800b332:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b336:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b4d0 <_dtoa_r+0x298>
 800b33a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b33e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b4d8 <_dtoa_r+0x2a0>
 800b342:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b346:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b4e0 <_dtoa_r+0x2a8>
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b352:	eeb0 7b46 	vmov.f64	d7, d6
 800b356:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b35a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b35e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b366:	ee16 8a90 	vmov	r8, s13
 800b36a:	d508      	bpl.n	800b37e <_dtoa_r+0x146>
 800b36c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b370:	eeb4 6b47 	vcmp.f64	d6, d7
 800b374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b378:	bf18      	it	ne
 800b37a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800b37e:	f1b8 0f16 	cmp.w	r8, #22
 800b382:	d82b      	bhi.n	800b3dc <_dtoa_r+0x1a4>
 800b384:	495e      	ldr	r1, [pc, #376]	@ (800b500 <_dtoa_r+0x2c8>)
 800b386:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b38a:	ed91 7b00 	vldr	d7, [r1]
 800b38e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b396:	d501      	bpl.n	800b39c <_dtoa_r+0x164>
 800b398:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b39c:	2100      	movs	r1, #0
 800b39e:	e01e      	b.n	800b3de <_dtoa_r+0x1a6>
 800b3a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b3a8:	2920      	cmp	r1, #32
 800b3aa:	bfc1      	itttt	gt
 800b3ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b3b0:	408e      	lslgt	r6, r1
 800b3b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b3b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b3ba:	bfd6      	itet	le
 800b3bc:	f1c1 0120 	rsble	r1, r1, #32
 800b3c0:	4331      	orrgt	r1, r6
 800b3c2:	fa04 f101 	lslle.w	r1, r4, r1
 800b3c6:	ee07 1a90 	vmov	s15, r1
 800b3ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	ee17 1a90 	vmov	r1, s15
 800b3d4:	2501      	movs	r5, #1
 800b3d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b3da:	e7a8      	b.n	800b32e <_dtoa_r+0xf6>
 800b3dc:	2101      	movs	r1, #1
 800b3de:	1ad2      	subs	r2, r2, r3
 800b3e0:	1e53      	subs	r3, r2, #1
 800b3e2:	9306      	str	r3, [sp, #24]
 800b3e4:	bf45      	ittet	mi
 800b3e6:	f1c2 0301 	rsbmi	r3, r2, #1
 800b3ea:	9304      	strmi	r3, [sp, #16]
 800b3ec:	2300      	movpl	r3, #0
 800b3ee:	2300      	movmi	r3, #0
 800b3f0:	bf4c      	ite	mi
 800b3f2:	9306      	strmi	r3, [sp, #24]
 800b3f4:	9304      	strpl	r3, [sp, #16]
 800b3f6:	f1b8 0f00 	cmp.w	r8, #0
 800b3fa:	910c      	str	r1, [sp, #48]	@ 0x30
 800b3fc:	db18      	blt.n	800b430 <_dtoa_r+0x1f8>
 800b3fe:	9b06      	ldr	r3, [sp, #24]
 800b400:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b404:	4443      	add	r3, r8
 800b406:	9306      	str	r3, [sp, #24]
 800b408:	2300      	movs	r3, #0
 800b40a:	9a07      	ldr	r2, [sp, #28]
 800b40c:	2a09      	cmp	r2, #9
 800b40e:	d845      	bhi.n	800b49c <_dtoa_r+0x264>
 800b410:	2a05      	cmp	r2, #5
 800b412:	bfc4      	itt	gt
 800b414:	3a04      	subgt	r2, #4
 800b416:	9207      	strgt	r2, [sp, #28]
 800b418:	9a07      	ldr	r2, [sp, #28]
 800b41a:	f1a2 0202 	sub.w	r2, r2, #2
 800b41e:	bfcc      	ite	gt
 800b420:	2400      	movgt	r4, #0
 800b422:	2401      	movle	r4, #1
 800b424:	2a03      	cmp	r2, #3
 800b426:	d844      	bhi.n	800b4b2 <_dtoa_r+0x27a>
 800b428:	e8df f002 	tbb	[pc, r2]
 800b42c:	0b173634 	.word	0x0b173634
 800b430:	9b04      	ldr	r3, [sp, #16]
 800b432:	2200      	movs	r2, #0
 800b434:	eba3 0308 	sub.w	r3, r3, r8
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b43c:	f1c8 0300 	rsb	r3, r8, #0
 800b440:	e7e3      	b.n	800b40a <_dtoa_r+0x1d2>
 800b442:	2201      	movs	r2, #1
 800b444:	9208      	str	r2, [sp, #32]
 800b446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b448:	eb08 0b02 	add.w	fp, r8, r2
 800b44c:	f10b 0a01 	add.w	sl, fp, #1
 800b450:	4652      	mov	r2, sl
 800b452:	2a01      	cmp	r2, #1
 800b454:	bfb8      	it	lt
 800b456:	2201      	movlt	r2, #1
 800b458:	e006      	b.n	800b468 <_dtoa_r+0x230>
 800b45a:	2201      	movs	r2, #1
 800b45c:	9208      	str	r2, [sp, #32]
 800b45e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b460:	2a00      	cmp	r2, #0
 800b462:	dd29      	ble.n	800b4b8 <_dtoa_r+0x280>
 800b464:	4693      	mov	fp, r2
 800b466:	4692      	mov	sl, r2
 800b468:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b46c:	2100      	movs	r1, #0
 800b46e:	2004      	movs	r0, #4
 800b470:	f100 0614 	add.w	r6, r0, #20
 800b474:	4296      	cmp	r6, r2
 800b476:	d926      	bls.n	800b4c6 <_dtoa_r+0x28e>
 800b478:	6079      	str	r1, [r7, #4]
 800b47a:	4648      	mov	r0, r9
 800b47c:	9305      	str	r3, [sp, #20]
 800b47e:	f001 fa3d 	bl	800c8fc <_Balloc>
 800b482:	9b05      	ldr	r3, [sp, #20]
 800b484:	4607      	mov	r7, r0
 800b486:	2800      	cmp	r0, #0
 800b488:	d13e      	bne.n	800b508 <_dtoa_r+0x2d0>
 800b48a:	4b1e      	ldr	r3, [pc, #120]	@ (800b504 <_dtoa_r+0x2cc>)
 800b48c:	4602      	mov	r2, r0
 800b48e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b492:	e6ea      	b.n	800b26a <_dtoa_r+0x32>
 800b494:	2200      	movs	r2, #0
 800b496:	e7e1      	b.n	800b45c <_dtoa_r+0x224>
 800b498:	2200      	movs	r2, #0
 800b49a:	e7d3      	b.n	800b444 <_dtoa_r+0x20c>
 800b49c:	2401      	movs	r4, #1
 800b49e:	2200      	movs	r2, #0
 800b4a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b4a4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	46da      	mov	sl, fp
 800b4ac:	2212      	movs	r2, #18
 800b4ae:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4b0:	e7da      	b.n	800b468 <_dtoa_r+0x230>
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	9208      	str	r2, [sp, #32]
 800b4b6:	e7f5      	b.n	800b4a4 <_dtoa_r+0x26c>
 800b4b8:	f04f 0b01 	mov.w	fp, #1
 800b4bc:	46da      	mov	sl, fp
 800b4be:	465a      	mov	r2, fp
 800b4c0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b4c4:	e7d0      	b.n	800b468 <_dtoa_r+0x230>
 800b4c6:	3101      	adds	r1, #1
 800b4c8:	0040      	lsls	r0, r0, #1
 800b4ca:	e7d1      	b.n	800b470 <_dtoa_r+0x238>
 800b4cc:	f3af 8000 	nop.w
 800b4d0:	636f4361 	.word	0x636f4361
 800b4d4:	3fd287a7 	.word	0x3fd287a7
 800b4d8:	8b60c8b3 	.word	0x8b60c8b3
 800b4dc:	3fc68a28 	.word	0x3fc68a28
 800b4e0:	509f79fb 	.word	0x509f79fb
 800b4e4:	3fd34413 	.word	0x3fd34413
 800b4e8:	0800e648 	.word	0x0800e648
 800b4ec:	0800e65f 	.word	0x0800e65f
 800b4f0:	7ff00000 	.word	0x7ff00000
 800b4f4:	0800e644 	.word	0x0800e644
 800b4f8:	0800e609 	.word	0x0800e609
 800b4fc:	0800e608 	.word	0x0800e608
 800b500:	0800e958 	.word	0x0800e958
 800b504:	0800e6b7 	.word	0x0800e6b7
 800b508:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b50c:	f1ba 0f0e 	cmp.w	sl, #14
 800b510:	6010      	str	r0, [r2, #0]
 800b512:	d86e      	bhi.n	800b5f2 <_dtoa_r+0x3ba>
 800b514:	2c00      	cmp	r4, #0
 800b516:	d06c      	beq.n	800b5f2 <_dtoa_r+0x3ba>
 800b518:	f1b8 0f00 	cmp.w	r8, #0
 800b51c:	f340 80b4 	ble.w	800b688 <_dtoa_r+0x450>
 800b520:	4ac8      	ldr	r2, [pc, #800]	@ (800b844 <_dtoa_r+0x60c>)
 800b522:	f008 010f 	and.w	r1, r8, #15
 800b526:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b52a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b52e:	ed92 7b00 	vldr	d7, [r2]
 800b532:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b536:	f000 809b 	beq.w	800b670 <_dtoa_r+0x438>
 800b53a:	4ac3      	ldr	r2, [pc, #780]	@ (800b848 <_dtoa_r+0x610>)
 800b53c:	ed92 6b08 	vldr	d6, [r2, #32]
 800b540:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b544:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b548:	f001 010f 	and.w	r1, r1, #15
 800b54c:	2203      	movs	r2, #3
 800b54e:	48be      	ldr	r0, [pc, #760]	@ (800b848 <_dtoa_r+0x610>)
 800b550:	2900      	cmp	r1, #0
 800b552:	f040 808f 	bne.w	800b674 <_dtoa_r+0x43c>
 800b556:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b55a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b55e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b562:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b564:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b568:	2900      	cmp	r1, #0
 800b56a:	f000 80b3 	beq.w	800b6d4 <_dtoa_r+0x49c>
 800b56e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b572:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57a:	f140 80ab 	bpl.w	800b6d4 <_dtoa_r+0x49c>
 800b57e:	f1ba 0f00 	cmp.w	sl, #0
 800b582:	f000 80a7 	beq.w	800b6d4 <_dtoa_r+0x49c>
 800b586:	f1bb 0f00 	cmp.w	fp, #0
 800b58a:	dd30      	ble.n	800b5ee <_dtoa_r+0x3b6>
 800b58c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b590:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b594:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b598:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b59c:	9105      	str	r1, [sp, #20]
 800b59e:	3201      	adds	r2, #1
 800b5a0:	465c      	mov	r4, fp
 800b5a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b5a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b5aa:	ee07 2a90 	vmov	s15, r2
 800b5ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b5b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b5b6:	ee15 2a90 	vmov	r2, s11
 800b5ba:	ec51 0b15 	vmov	r0, r1, d5
 800b5be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b5c2:	2c00      	cmp	r4, #0
 800b5c4:	f040 808a 	bne.w	800b6dc <_dtoa_r+0x4a4>
 800b5c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b5cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b5d0:	ec41 0b17 	vmov	d7, r0, r1
 800b5d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5dc:	f300 826a 	bgt.w	800bab4 <_dtoa_r+0x87c>
 800b5e0:	eeb1 7b47 	vneg.f64	d7, d7
 800b5e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ec:	d423      	bmi.n	800b636 <_dtoa_r+0x3fe>
 800b5ee:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b5f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5f4:	2a00      	cmp	r2, #0
 800b5f6:	f2c0 8129 	blt.w	800b84c <_dtoa_r+0x614>
 800b5fa:	f1b8 0f0e 	cmp.w	r8, #14
 800b5fe:	f300 8125 	bgt.w	800b84c <_dtoa_r+0x614>
 800b602:	4b90      	ldr	r3, [pc, #576]	@ (800b844 <_dtoa_r+0x60c>)
 800b604:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b608:	ed93 6b00 	vldr	d6, [r3]
 800b60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f280 80c8 	bge.w	800b7a4 <_dtoa_r+0x56c>
 800b614:	f1ba 0f00 	cmp.w	sl, #0
 800b618:	f300 80c4 	bgt.w	800b7a4 <_dtoa_r+0x56c>
 800b61c:	d10b      	bne.n	800b636 <_dtoa_r+0x3fe>
 800b61e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b622:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b626:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b62a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b632:	f2c0 823c 	blt.w	800baae <_dtoa_r+0x876>
 800b636:	2400      	movs	r4, #0
 800b638:	4625      	mov	r5, r4
 800b63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b63c:	43db      	mvns	r3, r3
 800b63e:	9305      	str	r3, [sp, #20]
 800b640:	463e      	mov	r6, r7
 800b642:	f04f 0800 	mov.w	r8, #0
 800b646:	4621      	mov	r1, r4
 800b648:	4648      	mov	r0, r9
 800b64a:	f001 f997 	bl	800c97c <_Bfree>
 800b64e:	2d00      	cmp	r5, #0
 800b650:	f000 80a2 	beq.w	800b798 <_dtoa_r+0x560>
 800b654:	f1b8 0f00 	cmp.w	r8, #0
 800b658:	d005      	beq.n	800b666 <_dtoa_r+0x42e>
 800b65a:	45a8      	cmp	r8, r5
 800b65c:	d003      	beq.n	800b666 <_dtoa_r+0x42e>
 800b65e:	4641      	mov	r1, r8
 800b660:	4648      	mov	r0, r9
 800b662:	f001 f98b 	bl	800c97c <_Bfree>
 800b666:	4629      	mov	r1, r5
 800b668:	4648      	mov	r0, r9
 800b66a:	f001 f987 	bl	800c97c <_Bfree>
 800b66e:	e093      	b.n	800b798 <_dtoa_r+0x560>
 800b670:	2202      	movs	r2, #2
 800b672:	e76c      	b.n	800b54e <_dtoa_r+0x316>
 800b674:	07cc      	lsls	r4, r1, #31
 800b676:	d504      	bpl.n	800b682 <_dtoa_r+0x44a>
 800b678:	ed90 6b00 	vldr	d6, [r0]
 800b67c:	3201      	adds	r2, #1
 800b67e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b682:	1049      	asrs	r1, r1, #1
 800b684:	3008      	adds	r0, #8
 800b686:	e763      	b.n	800b550 <_dtoa_r+0x318>
 800b688:	d022      	beq.n	800b6d0 <_dtoa_r+0x498>
 800b68a:	f1c8 0100 	rsb	r1, r8, #0
 800b68e:	4a6d      	ldr	r2, [pc, #436]	@ (800b844 <_dtoa_r+0x60c>)
 800b690:	f001 000f 	and.w	r0, r1, #15
 800b694:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b698:	ed92 7b00 	vldr	d7, [r2]
 800b69c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b6a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b6a4:	4868      	ldr	r0, [pc, #416]	@ (800b848 <_dtoa_r+0x610>)
 800b6a6:	1109      	asrs	r1, r1, #4
 800b6a8:	2400      	movs	r4, #0
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	b929      	cbnz	r1, 800b6ba <_dtoa_r+0x482>
 800b6ae:	2c00      	cmp	r4, #0
 800b6b0:	f43f af57 	beq.w	800b562 <_dtoa_r+0x32a>
 800b6b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b6b8:	e753      	b.n	800b562 <_dtoa_r+0x32a>
 800b6ba:	07ce      	lsls	r6, r1, #31
 800b6bc:	d505      	bpl.n	800b6ca <_dtoa_r+0x492>
 800b6be:	ed90 6b00 	vldr	d6, [r0]
 800b6c2:	3201      	adds	r2, #1
 800b6c4:	2401      	movs	r4, #1
 800b6c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6ca:	1049      	asrs	r1, r1, #1
 800b6cc:	3008      	adds	r0, #8
 800b6ce:	e7ed      	b.n	800b6ac <_dtoa_r+0x474>
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	e746      	b.n	800b562 <_dtoa_r+0x32a>
 800b6d4:	f8cd 8014 	str.w	r8, [sp, #20]
 800b6d8:	4654      	mov	r4, sl
 800b6da:	e762      	b.n	800b5a2 <_dtoa_r+0x36a>
 800b6dc:	4a59      	ldr	r2, [pc, #356]	@ (800b844 <_dtoa_r+0x60c>)
 800b6de:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b6e2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b6e6:	9a08      	ldr	r2, [sp, #32]
 800b6e8:	ec41 0b17 	vmov	d7, r0, r1
 800b6ec:	443c      	add	r4, r7
 800b6ee:	b34a      	cbz	r2, 800b744 <_dtoa_r+0x50c>
 800b6f0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b6f4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b6f8:	463e      	mov	r6, r7
 800b6fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b6fe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b702:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b706:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b70a:	ee14 2a90 	vmov	r2, s9
 800b70e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b712:	3230      	adds	r2, #48	@ 0x30
 800b714:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b718:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b720:	f806 2b01 	strb.w	r2, [r6], #1
 800b724:	d438      	bmi.n	800b798 <_dtoa_r+0x560>
 800b726:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b72a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b732:	d46e      	bmi.n	800b812 <_dtoa_r+0x5da>
 800b734:	42a6      	cmp	r6, r4
 800b736:	f43f af5a 	beq.w	800b5ee <_dtoa_r+0x3b6>
 800b73a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b73e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b742:	e7e0      	b.n	800b706 <_dtoa_r+0x4ce>
 800b744:	4621      	mov	r1, r4
 800b746:	463e      	mov	r6, r7
 800b748:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b74c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b750:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b754:	ee14 2a90 	vmov	r2, s9
 800b758:	3230      	adds	r2, #48	@ 0x30
 800b75a:	f806 2b01 	strb.w	r2, [r6], #1
 800b75e:	42a6      	cmp	r6, r4
 800b760:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b764:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b768:	d119      	bne.n	800b79e <_dtoa_r+0x566>
 800b76a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b76e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b772:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77a:	dc4a      	bgt.n	800b812 <_dtoa_r+0x5da>
 800b77c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b780:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b788:	f57f af31 	bpl.w	800b5ee <_dtoa_r+0x3b6>
 800b78c:	460e      	mov	r6, r1
 800b78e:	3901      	subs	r1, #1
 800b790:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b794:	2b30      	cmp	r3, #48	@ 0x30
 800b796:	d0f9      	beq.n	800b78c <_dtoa_r+0x554>
 800b798:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b79c:	e027      	b.n	800b7ee <_dtoa_r+0x5b6>
 800b79e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b7a2:	e7d5      	b.n	800b750 <_dtoa_r+0x518>
 800b7a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7a8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b7ac:	463e      	mov	r6, r7
 800b7ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b7b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b7b6:	ee15 3a10 	vmov	r3, s10
 800b7ba:	3330      	adds	r3, #48	@ 0x30
 800b7bc:	f806 3b01 	strb.w	r3, [r6], #1
 800b7c0:	1bf3      	subs	r3, r6, r7
 800b7c2:	459a      	cmp	sl, r3
 800b7c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b7c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b7cc:	d132      	bne.n	800b834 <_dtoa_r+0x5fc>
 800b7ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b7d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7da:	dc18      	bgt.n	800b80e <_dtoa_r+0x5d6>
 800b7dc:	eeb4 7b46 	vcmp.f64	d7, d6
 800b7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e4:	d103      	bne.n	800b7ee <_dtoa_r+0x5b6>
 800b7e6:	ee15 3a10 	vmov	r3, s10
 800b7ea:	07db      	lsls	r3, r3, #31
 800b7ec:	d40f      	bmi.n	800b80e <_dtoa_r+0x5d6>
 800b7ee:	9901      	ldr	r1, [sp, #4]
 800b7f0:	4648      	mov	r0, r9
 800b7f2:	f001 f8c3 	bl	800c97c <_Bfree>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7fa:	7033      	strb	r3, [r6, #0]
 800b7fc:	f108 0301 	add.w	r3, r8, #1
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 824b 	beq.w	800bca0 <_dtoa_r+0xa68>
 800b80a:	601e      	str	r6, [r3, #0]
 800b80c:	e248      	b.n	800bca0 <_dtoa_r+0xa68>
 800b80e:	f8cd 8014 	str.w	r8, [sp, #20]
 800b812:	4633      	mov	r3, r6
 800b814:	461e      	mov	r6, r3
 800b816:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b81a:	2a39      	cmp	r2, #57	@ 0x39
 800b81c:	d106      	bne.n	800b82c <_dtoa_r+0x5f4>
 800b81e:	429f      	cmp	r7, r3
 800b820:	d1f8      	bne.n	800b814 <_dtoa_r+0x5dc>
 800b822:	9a05      	ldr	r2, [sp, #20]
 800b824:	3201      	adds	r2, #1
 800b826:	9205      	str	r2, [sp, #20]
 800b828:	2230      	movs	r2, #48	@ 0x30
 800b82a:	703a      	strb	r2, [r7, #0]
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	3201      	adds	r2, #1
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	e7b1      	b.n	800b798 <_dtoa_r+0x560>
 800b834:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b838:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b840:	d1b5      	bne.n	800b7ae <_dtoa_r+0x576>
 800b842:	e7d4      	b.n	800b7ee <_dtoa_r+0x5b6>
 800b844:	0800e958 	.word	0x0800e958
 800b848:	0800e930 	.word	0x0800e930
 800b84c:	9908      	ldr	r1, [sp, #32]
 800b84e:	2900      	cmp	r1, #0
 800b850:	f000 80e9 	beq.w	800ba26 <_dtoa_r+0x7ee>
 800b854:	9907      	ldr	r1, [sp, #28]
 800b856:	2901      	cmp	r1, #1
 800b858:	f300 80cb 	bgt.w	800b9f2 <_dtoa_r+0x7ba>
 800b85c:	2d00      	cmp	r5, #0
 800b85e:	f000 80c4 	beq.w	800b9ea <_dtoa_r+0x7b2>
 800b862:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b866:	9e04      	ldr	r6, [sp, #16]
 800b868:	461c      	mov	r4, r3
 800b86a:	9305      	str	r3, [sp, #20]
 800b86c:	9b04      	ldr	r3, [sp, #16]
 800b86e:	4413      	add	r3, r2
 800b870:	9304      	str	r3, [sp, #16]
 800b872:	9b06      	ldr	r3, [sp, #24]
 800b874:	2101      	movs	r1, #1
 800b876:	4413      	add	r3, r2
 800b878:	4648      	mov	r0, r9
 800b87a:	9306      	str	r3, [sp, #24]
 800b87c:	f001 f97c 	bl	800cb78 <__i2b>
 800b880:	9b05      	ldr	r3, [sp, #20]
 800b882:	4605      	mov	r5, r0
 800b884:	b166      	cbz	r6, 800b8a0 <_dtoa_r+0x668>
 800b886:	9a06      	ldr	r2, [sp, #24]
 800b888:	2a00      	cmp	r2, #0
 800b88a:	dd09      	ble.n	800b8a0 <_dtoa_r+0x668>
 800b88c:	42b2      	cmp	r2, r6
 800b88e:	9904      	ldr	r1, [sp, #16]
 800b890:	bfa8      	it	ge
 800b892:	4632      	movge	r2, r6
 800b894:	1a89      	subs	r1, r1, r2
 800b896:	9104      	str	r1, [sp, #16]
 800b898:	9906      	ldr	r1, [sp, #24]
 800b89a:	1ab6      	subs	r6, r6, r2
 800b89c:	1a8a      	subs	r2, r1, r2
 800b89e:	9206      	str	r2, [sp, #24]
 800b8a0:	b30b      	cbz	r3, 800b8e6 <_dtoa_r+0x6ae>
 800b8a2:	9a08      	ldr	r2, [sp, #32]
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	f000 80c5 	beq.w	800ba34 <_dtoa_r+0x7fc>
 800b8aa:	2c00      	cmp	r4, #0
 800b8ac:	f000 80bf 	beq.w	800ba2e <_dtoa_r+0x7f6>
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	4648      	mov	r0, r9
 800b8b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8b8:	f001 fa16 	bl	800cce8 <__pow5mult>
 800b8bc:	9a01      	ldr	r2, [sp, #4]
 800b8be:	4601      	mov	r1, r0
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	4648      	mov	r0, r9
 800b8c4:	f001 f96e 	bl	800cba4 <__multiply>
 800b8c8:	9901      	ldr	r1, [sp, #4]
 800b8ca:	9005      	str	r0, [sp, #20]
 800b8cc:	4648      	mov	r0, r9
 800b8ce:	f001 f855 	bl	800c97c <_Bfree>
 800b8d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8d4:	1b1b      	subs	r3, r3, r4
 800b8d6:	f000 80b0 	beq.w	800ba3a <_dtoa_r+0x802>
 800b8da:	9905      	ldr	r1, [sp, #20]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	4648      	mov	r0, r9
 800b8e0:	f001 fa02 	bl	800cce8 <__pow5mult>
 800b8e4:	9001      	str	r0, [sp, #4]
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4648      	mov	r0, r9
 800b8ea:	f001 f945 	bl	800cb78 <__i2b>
 800b8ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 81da 	beq.w	800bcac <_dtoa_r+0xa74>
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4601      	mov	r1, r0
 800b8fc:	4648      	mov	r0, r9
 800b8fe:	f001 f9f3 	bl	800cce8 <__pow5mult>
 800b902:	9b07      	ldr	r3, [sp, #28]
 800b904:	2b01      	cmp	r3, #1
 800b906:	4604      	mov	r4, r0
 800b908:	f300 80a0 	bgt.w	800ba4c <_dtoa_r+0x814>
 800b90c:	9b02      	ldr	r3, [sp, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f040 8096 	bne.w	800ba40 <_dtoa_r+0x808>
 800b914:	9b03      	ldr	r3, [sp, #12]
 800b916:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	f040 8092 	bne.w	800ba44 <_dtoa_r+0x80c>
 800b920:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b924:	0d12      	lsrs	r2, r2, #20
 800b926:	0512      	lsls	r2, r2, #20
 800b928:	2a00      	cmp	r2, #0
 800b92a:	f000 808d 	beq.w	800ba48 <_dtoa_r+0x810>
 800b92e:	9b04      	ldr	r3, [sp, #16]
 800b930:	3301      	adds	r3, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	9b06      	ldr	r3, [sp, #24]
 800b936:	3301      	adds	r3, #1
 800b938:	9306      	str	r3, [sp, #24]
 800b93a:	2301      	movs	r3, #1
 800b93c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b93e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 81b9 	beq.w	800bcb8 <_dtoa_r+0xa80>
 800b946:	6922      	ldr	r2, [r4, #16]
 800b948:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b94c:	6910      	ldr	r0, [r2, #16]
 800b94e:	f001 f8c7 	bl	800cae0 <__hi0bits>
 800b952:	f1c0 0020 	rsb	r0, r0, #32
 800b956:	9b06      	ldr	r3, [sp, #24]
 800b958:	4418      	add	r0, r3
 800b95a:	f010 001f 	ands.w	r0, r0, #31
 800b95e:	f000 8081 	beq.w	800ba64 <_dtoa_r+0x82c>
 800b962:	f1c0 0220 	rsb	r2, r0, #32
 800b966:	2a04      	cmp	r2, #4
 800b968:	dd73      	ble.n	800ba52 <_dtoa_r+0x81a>
 800b96a:	9b04      	ldr	r3, [sp, #16]
 800b96c:	f1c0 001c 	rsb	r0, r0, #28
 800b970:	4403      	add	r3, r0
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	9b06      	ldr	r3, [sp, #24]
 800b976:	4406      	add	r6, r0
 800b978:	4403      	add	r3, r0
 800b97a:	9306      	str	r3, [sp, #24]
 800b97c:	9b04      	ldr	r3, [sp, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	dd05      	ble.n	800b98e <_dtoa_r+0x756>
 800b982:	9901      	ldr	r1, [sp, #4]
 800b984:	461a      	mov	r2, r3
 800b986:	4648      	mov	r0, r9
 800b988:	f001 fa08 	bl	800cd9c <__lshift>
 800b98c:	9001      	str	r0, [sp, #4]
 800b98e:	9b06      	ldr	r3, [sp, #24]
 800b990:	2b00      	cmp	r3, #0
 800b992:	dd05      	ble.n	800b9a0 <_dtoa_r+0x768>
 800b994:	4621      	mov	r1, r4
 800b996:	461a      	mov	r2, r3
 800b998:	4648      	mov	r0, r9
 800b99a:	f001 f9ff 	bl	800cd9c <__lshift>
 800b99e:	4604      	mov	r4, r0
 800b9a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d060      	beq.n	800ba68 <_dtoa_r+0x830>
 800b9a6:	9801      	ldr	r0, [sp, #4]
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	f001 fa63 	bl	800ce74 <__mcmp>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	da5a      	bge.n	800ba68 <_dtoa_r+0x830>
 800b9b2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b9b6:	9305      	str	r3, [sp, #20]
 800b9b8:	9901      	ldr	r1, [sp, #4]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	220a      	movs	r2, #10
 800b9be:	4648      	mov	r0, r9
 800b9c0:	f000 fffe 	bl	800c9c0 <__multadd>
 800b9c4:	9b08      	ldr	r3, [sp, #32]
 800b9c6:	9001      	str	r0, [sp, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 8177 	beq.w	800bcbc <_dtoa_r+0xa84>
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	220a      	movs	r2, #10
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	f000 fff3 	bl	800c9c0 <__multadd>
 800b9da:	f1bb 0f00 	cmp.w	fp, #0
 800b9de:	4605      	mov	r5, r0
 800b9e0:	dc6e      	bgt.n	800bac0 <_dtoa_r+0x888>
 800b9e2:	9b07      	ldr	r3, [sp, #28]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	dc48      	bgt.n	800ba7a <_dtoa_r+0x842>
 800b9e8:	e06a      	b.n	800bac0 <_dtoa_r+0x888>
 800b9ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b9f0:	e739      	b.n	800b866 <_dtoa_r+0x62e>
 800b9f2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800b9f6:	42a3      	cmp	r3, r4
 800b9f8:	db07      	blt.n	800ba0a <_dtoa_r+0x7d2>
 800b9fa:	f1ba 0f00 	cmp.w	sl, #0
 800b9fe:	eba3 0404 	sub.w	r4, r3, r4
 800ba02:	db0b      	blt.n	800ba1c <_dtoa_r+0x7e4>
 800ba04:	9e04      	ldr	r6, [sp, #16]
 800ba06:	4652      	mov	r2, sl
 800ba08:	e72f      	b.n	800b86a <_dtoa_r+0x632>
 800ba0a:	1ae2      	subs	r2, r4, r3
 800ba0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba0e:	9e04      	ldr	r6, [sp, #16]
 800ba10:	4413      	add	r3, r2
 800ba12:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba14:	4652      	mov	r2, sl
 800ba16:	4623      	mov	r3, r4
 800ba18:	2400      	movs	r4, #0
 800ba1a:	e726      	b.n	800b86a <_dtoa_r+0x632>
 800ba1c:	9a04      	ldr	r2, [sp, #16]
 800ba1e:	eba2 060a 	sub.w	r6, r2, sl
 800ba22:	2200      	movs	r2, #0
 800ba24:	e721      	b.n	800b86a <_dtoa_r+0x632>
 800ba26:	9e04      	ldr	r6, [sp, #16]
 800ba28:	9d08      	ldr	r5, [sp, #32]
 800ba2a:	461c      	mov	r4, r3
 800ba2c:	e72a      	b.n	800b884 <_dtoa_r+0x64c>
 800ba2e:	9a01      	ldr	r2, [sp, #4]
 800ba30:	9205      	str	r2, [sp, #20]
 800ba32:	e752      	b.n	800b8da <_dtoa_r+0x6a2>
 800ba34:	9901      	ldr	r1, [sp, #4]
 800ba36:	461a      	mov	r2, r3
 800ba38:	e751      	b.n	800b8de <_dtoa_r+0x6a6>
 800ba3a:	9b05      	ldr	r3, [sp, #20]
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	e752      	b.n	800b8e6 <_dtoa_r+0x6ae>
 800ba40:	2300      	movs	r3, #0
 800ba42:	e77b      	b.n	800b93c <_dtoa_r+0x704>
 800ba44:	9b02      	ldr	r3, [sp, #8]
 800ba46:	e779      	b.n	800b93c <_dtoa_r+0x704>
 800ba48:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ba4a:	e778      	b.n	800b93e <_dtoa_r+0x706>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba50:	e779      	b.n	800b946 <_dtoa_r+0x70e>
 800ba52:	d093      	beq.n	800b97c <_dtoa_r+0x744>
 800ba54:	9b04      	ldr	r3, [sp, #16]
 800ba56:	321c      	adds	r2, #28
 800ba58:	4413      	add	r3, r2
 800ba5a:	9304      	str	r3, [sp, #16]
 800ba5c:	9b06      	ldr	r3, [sp, #24]
 800ba5e:	4416      	add	r6, r2
 800ba60:	4413      	add	r3, r2
 800ba62:	e78a      	b.n	800b97a <_dtoa_r+0x742>
 800ba64:	4602      	mov	r2, r0
 800ba66:	e7f5      	b.n	800ba54 <_dtoa_r+0x81c>
 800ba68:	f1ba 0f00 	cmp.w	sl, #0
 800ba6c:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba70:	46d3      	mov	fp, sl
 800ba72:	dc21      	bgt.n	800bab8 <_dtoa_r+0x880>
 800ba74:	9b07      	ldr	r3, [sp, #28]
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	dd1e      	ble.n	800bab8 <_dtoa_r+0x880>
 800ba7a:	f1bb 0f00 	cmp.w	fp, #0
 800ba7e:	f47f addc 	bne.w	800b63a <_dtoa_r+0x402>
 800ba82:	4621      	mov	r1, r4
 800ba84:	465b      	mov	r3, fp
 800ba86:	2205      	movs	r2, #5
 800ba88:	4648      	mov	r0, r9
 800ba8a:	f000 ff99 	bl	800c9c0 <__multadd>
 800ba8e:	4601      	mov	r1, r0
 800ba90:	4604      	mov	r4, r0
 800ba92:	9801      	ldr	r0, [sp, #4]
 800ba94:	f001 f9ee 	bl	800ce74 <__mcmp>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	f77f adce 	ble.w	800b63a <_dtoa_r+0x402>
 800ba9e:	463e      	mov	r6, r7
 800baa0:	2331      	movs	r3, #49	@ 0x31
 800baa2:	f806 3b01 	strb.w	r3, [r6], #1
 800baa6:	9b05      	ldr	r3, [sp, #20]
 800baa8:	3301      	adds	r3, #1
 800baaa:	9305      	str	r3, [sp, #20]
 800baac:	e5c9      	b.n	800b642 <_dtoa_r+0x40a>
 800baae:	f8cd 8014 	str.w	r8, [sp, #20]
 800bab2:	4654      	mov	r4, sl
 800bab4:	4625      	mov	r5, r4
 800bab6:	e7f2      	b.n	800ba9e <_dtoa_r+0x866>
 800bab8:	9b08      	ldr	r3, [sp, #32]
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 8102 	beq.w	800bcc4 <_dtoa_r+0xa8c>
 800bac0:	2e00      	cmp	r6, #0
 800bac2:	dd05      	ble.n	800bad0 <_dtoa_r+0x898>
 800bac4:	4629      	mov	r1, r5
 800bac6:	4632      	mov	r2, r6
 800bac8:	4648      	mov	r0, r9
 800baca:	f001 f967 	bl	800cd9c <__lshift>
 800bace:	4605      	mov	r5, r0
 800bad0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d058      	beq.n	800bb88 <_dtoa_r+0x950>
 800bad6:	6869      	ldr	r1, [r5, #4]
 800bad8:	4648      	mov	r0, r9
 800bada:	f000 ff0f 	bl	800c8fc <_Balloc>
 800bade:	4606      	mov	r6, r0
 800bae0:	b928      	cbnz	r0, 800baee <_dtoa_r+0x8b6>
 800bae2:	4b82      	ldr	r3, [pc, #520]	@ (800bcec <_dtoa_r+0xab4>)
 800bae4:	4602      	mov	r2, r0
 800bae6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800baea:	f7ff bbbe 	b.w	800b26a <_dtoa_r+0x32>
 800baee:	692a      	ldr	r2, [r5, #16]
 800baf0:	3202      	adds	r2, #2
 800baf2:	0092      	lsls	r2, r2, #2
 800baf4:	f105 010c 	add.w	r1, r5, #12
 800baf8:	300c      	adds	r0, #12
 800bafa:	f7ff faf7 	bl	800b0ec <memcpy>
 800bafe:	2201      	movs	r2, #1
 800bb00:	4631      	mov	r1, r6
 800bb02:	4648      	mov	r0, r9
 800bb04:	f001 f94a 	bl	800cd9c <__lshift>
 800bb08:	1c7b      	adds	r3, r7, #1
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	eb07 030b 	add.w	r3, r7, fp
 800bb10:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb12:	9b02      	ldr	r3, [sp, #8]
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	46a8      	mov	r8, r5
 800bb1a:	9308      	str	r3, [sp, #32]
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	9b04      	ldr	r3, [sp, #16]
 800bb20:	9801      	ldr	r0, [sp, #4]
 800bb22:	4621      	mov	r1, r4
 800bb24:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bb28:	f7ff fafc 	bl	800b124 <quorem>
 800bb2c:	4641      	mov	r1, r8
 800bb2e:	9002      	str	r0, [sp, #8]
 800bb30:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bb34:	9801      	ldr	r0, [sp, #4]
 800bb36:	f001 f99d 	bl	800ce74 <__mcmp>
 800bb3a:	462a      	mov	r2, r5
 800bb3c:	9006      	str	r0, [sp, #24]
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4648      	mov	r0, r9
 800bb42:	f001 f9b3 	bl	800ceac <__mdiff>
 800bb46:	68c2      	ldr	r2, [r0, #12]
 800bb48:	4606      	mov	r6, r0
 800bb4a:	b9fa      	cbnz	r2, 800bb8c <_dtoa_r+0x954>
 800bb4c:	4601      	mov	r1, r0
 800bb4e:	9801      	ldr	r0, [sp, #4]
 800bb50:	f001 f990 	bl	800ce74 <__mcmp>
 800bb54:	4602      	mov	r2, r0
 800bb56:	4631      	mov	r1, r6
 800bb58:	4648      	mov	r0, r9
 800bb5a:	920a      	str	r2, [sp, #40]	@ 0x28
 800bb5c:	f000 ff0e 	bl	800c97c <_Bfree>
 800bb60:	9b07      	ldr	r3, [sp, #28]
 800bb62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb64:	9e04      	ldr	r6, [sp, #16]
 800bb66:	ea42 0103 	orr.w	r1, r2, r3
 800bb6a:	9b08      	ldr	r3, [sp, #32]
 800bb6c:	4319      	orrs	r1, r3
 800bb6e:	d10f      	bne.n	800bb90 <_dtoa_r+0x958>
 800bb70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bb74:	d028      	beq.n	800bbc8 <_dtoa_r+0x990>
 800bb76:	9b06      	ldr	r3, [sp, #24]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	dd02      	ble.n	800bb82 <_dtoa_r+0x94a>
 800bb7c:	9b02      	ldr	r3, [sp, #8]
 800bb7e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bb82:	f88b a000 	strb.w	sl, [fp]
 800bb86:	e55e      	b.n	800b646 <_dtoa_r+0x40e>
 800bb88:	4628      	mov	r0, r5
 800bb8a:	e7bd      	b.n	800bb08 <_dtoa_r+0x8d0>
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	e7e2      	b.n	800bb56 <_dtoa_r+0x91e>
 800bb90:	9b06      	ldr	r3, [sp, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	db04      	blt.n	800bba0 <_dtoa_r+0x968>
 800bb96:	9907      	ldr	r1, [sp, #28]
 800bb98:	430b      	orrs	r3, r1
 800bb9a:	9908      	ldr	r1, [sp, #32]
 800bb9c:	430b      	orrs	r3, r1
 800bb9e:	d120      	bne.n	800bbe2 <_dtoa_r+0x9aa>
 800bba0:	2a00      	cmp	r2, #0
 800bba2:	ddee      	ble.n	800bb82 <_dtoa_r+0x94a>
 800bba4:	9901      	ldr	r1, [sp, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	4648      	mov	r0, r9
 800bbaa:	f001 f8f7 	bl	800cd9c <__lshift>
 800bbae:	4621      	mov	r1, r4
 800bbb0:	9001      	str	r0, [sp, #4]
 800bbb2:	f001 f95f 	bl	800ce74 <__mcmp>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	dc03      	bgt.n	800bbc2 <_dtoa_r+0x98a>
 800bbba:	d1e2      	bne.n	800bb82 <_dtoa_r+0x94a>
 800bbbc:	f01a 0f01 	tst.w	sl, #1
 800bbc0:	d0df      	beq.n	800bb82 <_dtoa_r+0x94a>
 800bbc2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bbc6:	d1d9      	bne.n	800bb7c <_dtoa_r+0x944>
 800bbc8:	2339      	movs	r3, #57	@ 0x39
 800bbca:	f88b 3000 	strb.w	r3, [fp]
 800bbce:	4633      	mov	r3, r6
 800bbd0:	461e      	mov	r6, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bbd8:	2a39      	cmp	r2, #57	@ 0x39
 800bbda:	d052      	beq.n	800bc82 <_dtoa_r+0xa4a>
 800bbdc:	3201      	adds	r2, #1
 800bbde:	701a      	strb	r2, [r3, #0]
 800bbe0:	e531      	b.n	800b646 <_dtoa_r+0x40e>
 800bbe2:	2a00      	cmp	r2, #0
 800bbe4:	dd07      	ble.n	800bbf6 <_dtoa_r+0x9be>
 800bbe6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bbea:	d0ed      	beq.n	800bbc8 <_dtoa_r+0x990>
 800bbec:	f10a 0301 	add.w	r3, sl, #1
 800bbf0:	f88b 3000 	strb.w	r3, [fp]
 800bbf4:	e527      	b.n	800b646 <_dtoa_r+0x40e>
 800bbf6:	9b04      	ldr	r3, [sp, #16]
 800bbf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbfa:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d029      	beq.n	800bc56 <_dtoa_r+0xa1e>
 800bc02:	9901      	ldr	r1, [sp, #4]
 800bc04:	2300      	movs	r3, #0
 800bc06:	220a      	movs	r2, #10
 800bc08:	4648      	mov	r0, r9
 800bc0a:	f000 fed9 	bl	800c9c0 <__multadd>
 800bc0e:	45a8      	cmp	r8, r5
 800bc10:	9001      	str	r0, [sp, #4]
 800bc12:	f04f 0300 	mov.w	r3, #0
 800bc16:	f04f 020a 	mov.w	r2, #10
 800bc1a:	4641      	mov	r1, r8
 800bc1c:	4648      	mov	r0, r9
 800bc1e:	d107      	bne.n	800bc30 <_dtoa_r+0x9f8>
 800bc20:	f000 fece 	bl	800c9c0 <__multadd>
 800bc24:	4680      	mov	r8, r0
 800bc26:	4605      	mov	r5, r0
 800bc28:	9b04      	ldr	r3, [sp, #16]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	e776      	b.n	800bb1e <_dtoa_r+0x8e6>
 800bc30:	f000 fec6 	bl	800c9c0 <__multadd>
 800bc34:	4629      	mov	r1, r5
 800bc36:	4680      	mov	r8, r0
 800bc38:	2300      	movs	r3, #0
 800bc3a:	220a      	movs	r2, #10
 800bc3c:	4648      	mov	r0, r9
 800bc3e:	f000 febf 	bl	800c9c0 <__multadd>
 800bc42:	4605      	mov	r5, r0
 800bc44:	e7f0      	b.n	800bc28 <_dtoa_r+0x9f0>
 800bc46:	f1bb 0f00 	cmp.w	fp, #0
 800bc4a:	bfcc      	ite	gt
 800bc4c:	465e      	movgt	r6, fp
 800bc4e:	2601      	movle	r6, #1
 800bc50:	443e      	add	r6, r7
 800bc52:	f04f 0800 	mov.w	r8, #0
 800bc56:	9901      	ldr	r1, [sp, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	4648      	mov	r0, r9
 800bc5c:	f001 f89e 	bl	800cd9c <__lshift>
 800bc60:	4621      	mov	r1, r4
 800bc62:	9001      	str	r0, [sp, #4]
 800bc64:	f001 f906 	bl	800ce74 <__mcmp>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	dcb0      	bgt.n	800bbce <_dtoa_r+0x996>
 800bc6c:	d102      	bne.n	800bc74 <_dtoa_r+0xa3c>
 800bc6e:	f01a 0f01 	tst.w	sl, #1
 800bc72:	d1ac      	bne.n	800bbce <_dtoa_r+0x996>
 800bc74:	4633      	mov	r3, r6
 800bc76:	461e      	mov	r6, r3
 800bc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc7c:	2a30      	cmp	r2, #48	@ 0x30
 800bc7e:	d0fa      	beq.n	800bc76 <_dtoa_r+0xa3e>
 800bc80:	e4e1      	b.n	800b646 <_dtoa_r+0x40e>
 800bc82:	429f      	cmp	r7, r3
 800bc84:	d1a4      	bne.n	800bbd0 <_dtoa_r+0x998>
 800bc86:	9b05      	ldr	r3, [sp, #20]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	9305      	str	r3, [sp, #20]
 800bc8c:	2331      	movs	r3, #49	@ 0x31
 800bc8e:	703b      	strb	r3, [r7, #0]
 800bc90:	e4d9      	b.n	800b646 <_dtoa_r+0x40e>
 800bc92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc94:	4f16      	ldr	r7, [pc, #88]	@ (800bcf0 <_dtoa_r+0xab8>)
 800bc96:	b11b      	cbz	r3, 800bca0 <_dtoa_r+0xa68>
 800bc98:	f107 0308 	add.w	r3, r7, #8
 800bc9c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bc9e:	6013      	str	r3, [r2, #0]
 800bca0:	4638      	mov	r0, r7
 800bca2:	b011      	add	sp, #68	@ 0x44
 800bca4:	ecbd 8b02 	vpop	{d8}
 800bca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcac:	9b07      	ldr	r3, [sp, #28]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	f77f ae2c 	ble.w	800b90c <_dtoa_r+0x6d4>
 800bcb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcb8:	2001      	movs	r0, #1
 800bcba:	e64c      	b.n	800b956 <_dtoa_r+0x71e>
 800bcbc:	f1bb 0f00 	cmp.w	fp, #0
 800bcc0:	f77f aed8 	ble.w	800ba74 <_dtoa_r+0x83c>
 800bcc4:	463e      	mov	r6, r7
 800bcc6:	9801      	ldr	r0, [sp, #4]
 800bcc8:	4621      	mov	r1, r4
 800bcca:	f7ff fa2b 	bl	800b124 <quorem>
 800bcce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bcd2:	f806 ab01 	strb.w	sl, [r6], #1
 800bcd6:	1bf2      	subs	r2, r6, r7
 800bcd8:	4593      	cmp	fp, r2
 800bcda:	ddb4      	ble.n	800bc46 <_dtoa_r+0xa0e>
 800bcdc:	9901      	ldr	r1, [sp, #4]
 800bcde:	2300      	movs	r3, #0
 800bce0:	220a      	movs	r2, #10
 800bce2:	4648      	mov	r0, r9
 800bce4:	f000 fe6c 	bl	800c9c0 <__multadd>
 800bce8:	9001      	str	r0, [sp, #4]
 800bcea:	e7ec      	b.n	800bcc6 <_dtoa_r+0xa8e>
 800bcec:	0800e6b7 	.word	0x0800e6b7
 800bcf0:	0800e63b 	.word	0x0800e63b

0800bcf4 <rshift>:
 800bcf4:	6903      	ldr	r3, [r0, #16]
 800bcf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bcfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd02:	f100 0414 	add.w	r4, r0, #20
 800bd06:	dd45      	ble.n	800bd94 <rshift+0xa0>
 800bd08:	f011 011f 	ands.w	r1, r1, #31
 800bd0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd14:	d10c      	bne.n	800bd30 <rshift+0x3c>
 800bd16:	f100 0710 	add.w	r7, r0, #16
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	42b1      	cmp	r1, r6
 800bd1e:	d334      	bcc.n	800bd8a <rshift+0x96>
 800bd20:	1a9b      	subs	r3, r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	1eea      	subs	r2, r5, #3
 800bd26:	4296      	cmp	r6, r2
 800bd28:	bf38      	it	cc
 800bd2a:	2300      	movcc	r3, #0
 800bd2c:	4423      	add	r3, r4
 800bd2e:	e015      	b.n	800bd5c <rshift+0x68>
 800bd30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd34:	f1c1 0820 	rsb	r8, r1, #32
 800bd38:	40cf      	lsrs	r7, r1
 800bd3a:	f105 0e04 	add.w	lr, r5, #4
 800bd3e:	46a1      	mov	r9, r4
 800bd40:	4576      	cmp	r6, lr
 800bd42:	46f4      	mov	ip, lr
 800bd44:	d815      	bhi.n	800bd72 <rshift+0x7e>
 800bd46:	1a9a      	subs	r2, r3, r2
 800bd48:	0092      	lsls	r2, r2, #2
 800bd4a:	3a04      	subs	r2, #4
 800bd4c:	3501      	adds	r5, #1
 800bd4e:	42ae      	cmp	r6, r5
 800bd50:	bf38      	it	cc
 800bd52:	2200      	movcc	r2, #0
 800bd54:	18a3      	adds	r3, r4, r2
 800bd56:	50a7      	str	r7, [r4, r2]
 800bd58:	b107      	cbz	r7, 800bd5c <rshift+0x68>
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	1b1a      	subs	r2, r3, r4
 800bd5e:	42a3      	cmp	r3, r4
 800bd60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd64:	bf08      	it	eq
 800bd66:	2300      	moveq	r3, #0
 800bd68:	6102      	str	r2, [r0, #16]
 800bd6a:	bf08      	it	eq
 800bd6c:	6143      	streq	r3, [r0, #20]
 800bd6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd72:	f8dc c000 	ldr.w	ip, [ip]
 800bd76:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd7a:	ea4c 0707 	orr.w	r7, ip, r7
 800bd7e:	f849 7b04 	str.w	r7, [r9], #4
 800bd82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd86:	40cf      	lsrs	r7, r1
 800bd88:	e7da      	b.n	800bd40 <rshift+0x4c>
 800bd8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd92:	e7c3      	b.n	800bd1c <rshift+0x28>
 800bd94:	4623      	mov	r3, r4
 800bd96:	e7e1      	b.n	800bd5c <rshift+0x68>

0800bd98 <__hexdig_fun>:
 800bd98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d802      	bhi.n	800bda6 <__hexdig_fun+0xe>
 800bda0:	3820      	subs	r0, #32
 800bda2:	b2c0      	uxtb	r0, r0
 800bda4:	4770      	bx	lr
 800bda6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bdaa:	2b05      	cmp	r3, #5
 800bdac:	d801      	bhi.n	800bdb2 <__hexdig_fun+0x1a>
 800bdae:	3847      	subs	r0, #71	@ 0x47
 800bdb0:	e7f7      	b.n	800bda2 <__hexdig_fun+0xa>
 800bdb2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bdb6:	2b05      	cmp	r3, #5
 800bdb8:	d801      	bhi.n	800bdbe <__hexdig_fun+0x26>
 800bdba:	3827      	subs	r0, #39	@ 0x27
 800bdbc:	e7f1      	b.n	800bda2 <__hexdig_fun+0xa>
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	4770      	bx	lr
	...

0800bdc4 <__gethex>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	b085      	sub	sp, #20
 800bdca:	468a      	mov	sl, r1
 800bdcc:	9302      	str	r3, [sp, #8]
 800bdce:	680b      	ldr	r3, [r1, #0]
 800bdd0:	9001      	str	r0, [sp, #4]
 800bdd2:	4690      	mov	r8, r2
 800bdd4:	1c9c      	adds	r4, r3, #2
 800bdd6:	46a1      	mov	r9, r4
 800bdd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bddc:	2830      	cmp	r0, #48	@ 0x30
 800bdde:	d0fa      	beq.n	800bdd6 <__gethex+0x12>
 800bde0:	eba9 0303 	sub.w	r3, r9, r3
 800bde4:	f1a3 0b02 	sub.w	fp, r3, #2
 800bde8:	f7ff ffd6 	bl	800bd98 <__hexdig_fun>
 800bdec:	4605      	mov	r5, r0
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d168      	bne.n	800bec4 <__gethex+0x100>
 800bdf2:	49a0      	ldr	r1, [pc, #640]	@ (800c074 <__gethex+0x2b0>)
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	4648      	mov	r0, r9
 800bdf8:	f7ff f934 	bl	800b064 <strncmp>
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d167      	bne.n	800bed2 <__gethex+0x10e>
 800be02:	f899 0001 	ldrb.w	r0, [r9, #1]
 800be06:	4626      	mov	r6, r4
 800be08:	f7ff ffc6 	bl	800bd98 <__hexdig_fun>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d062      	beq.n	800bed6 <__gethex+0x112>
 800be10:	4623      	mov	r3, r4
 800be12:	7818      	ldrb	r0, [r3, #0]
 800be14:	2830      	cmp	r0, #48	@ 0x30
 800be16:	4699      	mov	r9, r3
 800be18:	f103 0301 	add.w	r3, r3, #1
 800be1c:	d0f9      	beq.n	800be12 <__gethex+0x4e>
 800be1e:	f7ff ffbb 	bl	800bd98 <__hexdig_fun>
 800be22:	fab0 f580 	clz	r5, r0
 800be26:	096d      	lsrs	r5, r5, #5
 800be28:	f04f 0b01 	mov.w	fp, #1
 800be2c:	464a      	mov	r2, r9
 800be2e:	4616      	mov	r6, r2
 800be30:	3201      	adds	r2, #1
 800be32:	7830      	ldrb	r0, [r6, #0]
 800be34:	f7ff ffb0 	bl	800bd98 <__hexdig_fun>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d1f8      	bne.n	800be2e <__gethex+0x6a>
 800be3c:	498d      	ldr	r1, [pc, #564]	@ (800c074 <__gethex+0x2b0>)
 800be3e:	2201      	movs	r2, #1
 800be40:	4630      	mov	r0, r6
 800be42:	f7ff f90f 	bl	800b064 <strncmp>
 800be46:	2800      	cmp	r0, #0
 800be48:	d13f      	bne.n	800beca <__gethex+0x106>
 800be4a:	b944      	cbnz	r4, 800be5e <__gethex+0x9a>
 800be4c:	1c74      	adds	r4, r6, #1
 800be4e:	4622      	mov	r2, r4
 800be50:	4616      	mov	r6, r2
 800be52:	3201      	adds	r2, #1
 800be54:	7830      	ldrb	r0, [r6, #0]
 800be56:	f7ff ff9f 	bl	800bd98 <__hexdig_fun>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d1f8      	bne.n	800be50 <__gethex+0x8c>
 800be5e:	1ba4      	subs	r4, r4, r6
 800be60:	00a7      	lsls	r7, r4, #2
 800be62:	7833      	ldrb	r3, [r6, #0]
 800be64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800be68:	2b50      	cmp	r3, #80	@ 0x50
 800be6a:	d13e      	bne.n	800beea <__gethex+0x126>
 800be6c:	7873      	ldrb	r3, [r6, #1]
 800be6e:	2b2b      	cmp	r3, #43	@ 0x2b
 800be70:	d033      	beq.n	800beda <__gethex+0x116>
 800be72:	2b2d      	cmp	r3, #45	@ 0x2d
 800be74:	d034      	beq.n	800bee0 <__gethex+0x11c>
 800be76:	1c71      	adds	r1, r6, #1
 800be78:	2400      	movs	r4, #0
 800be7a:	7808      	ldrb	r0, [r1, #0]
 800be7c:	f7ff ff8c 	bl	800bd98 <__hexdig_fun>
 800be80:	1e43      	subs	r3, r0, #1
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b18      	cmp	r3, #24
 800be86:	d830      	bhi.n	800beea <__gethex+0x126>
 800be88:	f1a0 0210 	sub.w	r2, r0, #16
 800be8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be90:	f7ff ff82 	bl	800bd98 <__hexdig_fun>
 800be94:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800be98:	fa5f fc8c 	uxtb.w	ip, ip
 800be9c:	f1bc 0f18 	cmp.w	ip, #24
 800bea0:	f04f 030a 	mov.w	r3, #10
 800bea4:	d91e      	bls.n	800bee4 <__gethex+0x120>
 800bea6:	b104      	cbz	r4, 800beaa <__gethex+0xe6>
 800bea8:	4252      	negs	r2, r2
 800beaa:	4417      	add	r7, r2
 800beac:	f8ca 1000 	str.w	r1, [sl]
 800beb0:	b1ed      	cbz	r5, 800beee <__gethex+0x12a>
 800beb2:	f1bb 0f00 	cmp.w	fp, #0
 800beb6:	bf0c      	ite	eq
 800beb8:	2506      	moveq	r5, #6
 800beba:	2500      	movne	r5, #0
 800bebc:	4628      	mov	r0, r5
 800bebe:	b005      	add	sp, #20
 800bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec4:	2500      	movs	r5, #0
 800bec6:	462c      	mov	r4, r5
 800bec8:	e7b0      	b.n	800be2c <__gethex+0x68>
 800beca:	2c00      	cmp	r4, #0
 800becc:	d1c7      	bne.n	800be5e <__gethex+0x9a>
 800bece:	4627      	mov	r7, r4
 800bed0:	e7c7      	b.n	800be62 <__gethex+0x9e>
 800bed2:	464e      	mov	r6, r9
 800bed4:	462f      	mov	r7, r5
 800bed6:	2501      	movs	r5, #1
 800bed8:	e7c3      	b.n	800be62 <__gethex+0x9e>
 800beda:	2400      	movs	r4, #0
 800bedc:	1cb1      	adds	r1, r6, #2
 800bede:	e7cc      	b.n	800be7a <__gethex+0xb6>
 800bee0:	2401      	movs	r4, #1
 800bee2:	e7fb      	b.n	800bedc <__gethex+0x118>
 800bee4:	fb03 0002 	mla	r0, r3, r2, r0
 800bee8:	e7ce      	b.n	800be88 <__gethex+0xc4>
 800beea:	4631      	mov	r1, r6
 800beec:	e7de      	b.n	800beac <__gethex+0xe8>
 800beee:	eba6 0309 	sub.w	r3, r6, r9
 800bef2:	3b01      	subs	r3, #1
 800bef4:	4629      	mov	r1, r5
 800bef6:	2b07      	cmp	r3, #7
 800bef8:	dc0a      	bgt.n	800bf10 <__gethex+0x14c>
 800befa:	9801      	ldr	r0, [sp, #4]
 800befc:	f000 fcfe 	bl	800c8fc <_Balloc>
 800bf00:	4604      	mov	r4, r0
 800bf02:	b940      	cbnz	r0, 800bf16 <__gethex+0x152>
 800bf04:	4b5c      	ldr	r3, [pc, #368]	@ (800c078 <__gethex+0x2b4>)
 800bf06:	4602      	mov	r2, r0
 800bf08:	21e4      	movs	r1, #228	@ 0xe4
 800bf0a:	485c      	ldr	r0, [pc, #368]	@ (800c07c <__gethex+0x2b8>)
 800bf0c:	f001 fa8c 	bl	800d428 <__assert_func>
 800bf10:	3101      	adds	r1, #1
 800bf12:	105b      	asrs	r3, r3, #1
 800bf14:	e7ef      	b.n	800bef6 <__gethex+0x132>
 800bf16:	f100 0a14 	add.w	sl, r0, #20
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	4655      	mov	r5, sl
 800bf1e:	469b      	mov	fp, r3
 800bf20:	45b1      	cmp	r9, r6
 800bf22:	d337      	bcc.n	800bf94 <__gethex+0x1d0>
 800bf24:	f845 bb04 	str.w	fp, [r5], #4
 800bf28:	eba5 050a 	sub.w	r5, r5, sl
 800bf2c:	10ad      	asrs	r5, r5, #2
 800bf2e:	6125      	str	r5, [r4, #16]
 800bf30:	4658      	mov	r0, fp
 800bf32:	f000 fdd5 	bl	800cae0 <__hi0bits>
 800bf36:	016d      	lsls	r5, r5, #5
 800bf38:	f8d8 6000 	ldr.w	r6, [r8]
 800bf3c:	1a2d      	subs	r5, r5, r0
 800bf3e:	42b5      	cmp	r5, r6
 800bf40:	dd54      	ble.n	800bfec <__gethex+0x228>
 800bf42:	1bad      	subs	r5, r5, r6
 800bf44:	4629      	mov	r1, r5
 800bf46:	4620      	mov	r0, r4
 800bf48:	f001 f95e 	bl	800d208 <__any_on>
 800bf4c:	4681      	mov	r9, r0
 800bf4e:	b178      	cbz	r0, 800bf70 <__gethex+0x1ac>
 800bf50:	1e6b      	subs	r3, r5, #1
 800bf52:	1159      	asrs	r1, r3, #5
 800bf54:	f003 021f 	and.w	r2, r3, #31
 800bf58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bf5c:	f04f 0901 	mov.w	r9, #1
 800bf60:	fa09 f202 	lsl.w	r2, r9, r2
 800bf64:	420a      	tst	r2, r1
 800bf66:	d003      	beq.n	800bf70 <__gethex+0x1ac>
 800bf68:	454b      	cmp	r3, r9
 800bf6a:	dc36      	bgt.n	800bfda <__gethex+0x216>
 800bf6c:	f04f 0902 	mov.w	r9, #2
 800bf70:	4629      	mov	r1, r5
 800bf72:	4620      	mov	r0, r4
 800bf74:	f7ff febe 	bl	800bcf4 <rshift>
 800bf78:	442f      	add	r7, r5
 800bf7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf7e:	42bb      	cmp	r3, r7
 800bf80:	da42      	bge.n	800c008 <__gethex+0x244>
 800bf82:	9801      	ldr	r0, [sp, #4]
 800bf84:	4621      	mov	r1, r4
 800bf86:	f000 fcf9 	bl	800c97c <_Bfree>
 800bf8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	6013      	str	r3, [r2, #0]
 800bf90:	25a3      	movs	r5, #163	@ 0xa3
 800bf92:	e793      	b.n	800bebc <__gethex+0xf8>
 800bf94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bf98:	2a2e      	cmp	r2, #46	@ 0x2e
 800bf9a:	d012      	beq.n	800bfc2 <__gethex+0x1fe>
 800bf9c:	2b20      	cmp	r3, #32
 800bf9e:	d104      	bne.n	800bfaa <__gethex+0x1e6>
 800bfa0:	f845 bb04 	str.w	fp, [r5], #4
 800bfa4:	f04f 0b00 	mov.w	fp, #0
 800bfa8:	465b      	mov	r3, fp
 800bfaa:	7830      	ldrb	r0, [r6, #0]
 800bfac:	9303      	str	r3, [sp, #12]
 800bfae:	f7ff fef3 	bl	800bd98 <__hexdig_fun>
 800bfb2:	9b03      	ldr	r3, [sp, #12]
 800bfb4:	f000 000f 	and.w	r0, r0, #15
 800bfb8:	4098      	lsls	r0, r3
 800bfba:	ea4b 0b00 	orr.w	fp, fp, r0
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	e7ae      	b.n	800bf20 <__gethex+0x15c>
 800bfc2:	45b1      	cmp	r9, r6
 800bfc4:	d8ea      	bhi.n	800bf9c <__gethex+0x1d8>
 800bfc6:	492b      	ldr	r1, [pc, #172]	@ (800c074 <__gethex+0x2b0>)
 800bfc8:	9303      	str	r3, [sp, #12]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	4630      	mov	r0, r6
 800bfce:	f7ff f849 	bl	800b064 <strncmp>
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d1e1      	bne.n	800bf9c <__gethex+0x1d8>
 800bfd8:	e7a2      	b.n	800bf20 <__gethex+0x15c>
 800bfda:	1ea9      	subs	r1, r5, #2
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f001 f913 	bl	800d208 <__any_on>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d0c2      	beq.n	800bf6c <__gethex+0x1a8>
 800bfe6:	f04f 0903 	mov.w	r9, #3
 800bfea:	e7c1      	b.n	800bf70 <__gethex+0x1ac>
 800bfec:	da09      	bge.n	800c002 <__gethex+0x23e>
 800bfee:	1b75      	subs	r5, r6, r5
 800bff0:	4621      	mov	r1, r4
 800bff2:	9801      	ldr	r0, [sp, #4]
 800bff4:	462a      	mov	r2, r5
 800bff6:	f000 fed1 	bl	800cd9c <__lshift>
 800bffa:	1b7f      	subs	r7, r7, r5
 800bffc:	4604      	mov	r4, r0
 800bffe:	f100 0a14 	add.w	sl, r0, #20
 800c002:	f04f 0900 	mov.w	r9, #0
 800c006:	e7b8      	b.n	800bf7a <__gethex+0x1b6>
 800c008:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c00c:	42bd      	cmp	r5, r7
 800c00e:	dd6f      	ble.n	800c0f0 <__gethex+0x32c>
 800c010:	1bed      	subs	r5, r5, r7
 800c012:	42ae      	cmp	r6, r5
 800c014:	dc34      	bgt.n	800c080 <__gethex+0x2bc>
 800c016:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d022      	beq.n	800c064 <__gethex+0x2a0>
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d024      	beq.n	800c06c <__gethex+0x2a8>
 800c022:	2b01      	cmp	r3, #1
 800c024:	d115      	bne.n	800c052 <__gethex+0x28e>
 800c026:	42ae      	cmp	r6, r5
 800c028:	d113      	bne.n	800c052 <__gethex+0x28e>
 800c02a:	2e01      	cmp	r6, #1
 800c02c:	d10b      	bne.n	800c046 <__gethex+0x282>
 800c02e:	9a02      	ldr	r2, [sp, #8]
 800c030:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	2301      	movs	r3, #1
 800c038:	6123      	str	r3, [r4, #16]
 800c03a:	f8ca 3000 	str.w	r3, [sl]
 800c03e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c040:	2562      	movs	r5, #98	@ 0x62
 800c042:	601c      	str	r4, [r3, #0]
 800c044:	e73a      	b.n	800bebc <__gethex+0xf8>
 800c046:	1e71      	subs	r1, r6, #1
 800c048:	4620      	mov	r0, r4
 800c04a:	f001 f8dd 	bl	800d208 <__any_on>
 800c04e:	2800      	cmp	r0, #0
 800c050:	d1ed      	bne.n	800c02e <__gethex+0x26a>
 800c052:	9801      	ldr	r0, [sp, #4]
 800c054:	4621      	mov	r1, r4
 800c056:	f000 fc91 	bl	800c97c <_Bfree>
 800c05a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c05c:	2300      	movs	r3, #0
 800c05e:	6013      	str	r3, [r2, #0]
 800c060:	2550      	movs	r5, #80	@ 0x50
 800c062:	e72b      	b.n	800bebc <__gethex+0xf8>
 800c064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1f3      	bne.n	800c052 <__gethex+0x28e>
 800c06a:	e7e0      	b.n	800c02e <__gethex+0x26a>
 800c06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1dd      	bne.n	800c02e <__gethex+0x26a>
 800c072:	e7ee      	b.n	800c052 <__gethex+0x28e>
 800c074:	0800e631 	.word	0x0800e631
 800c078:	0800e6b7 	.word	0x0800e6b7
 800c07c:	0800e6c8 	.word	0x0800e6c8
 800c080:	1e6f      	subs	r7, r5, #1
 800c082:	f1b9 0f00 	cmp.w	r9, #0
 800c086:	d130      	bne.n	800c0ea <__gethex+0x326>
 800c088:	b127      	cbz	r7, 800c094 <__gethex+0x2d0>
 800c08a:	4639      	mov	r1, r7
 800c08c:	4620      	mov	r0, r4
 800c08e:	f001 f8bb 	bl	800d208 <__any_on>
 800c092:	4681      	mov	r9, r0
 800c094:	117a      	asrs	r2, r7, #5
 800c096:	2301      	movs	r3, #1
 800c098:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c09c:	f007 071f 	and.w	r7, r7, #31
 800c0a0:	40bb      	lsls	r3, r7
 800c0a2:	4213      	tst	r3, r2
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	bf18      	it	ne
 800c0aa:	f049 0902 	orrne.w	r9, r9, #2
 800c0ae:	f7ff fe21 	bl	800bcf4 <rshift>
 800c0b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c0b6:	1b76      	subs	r6, r6, r5
 800c0b8:	2502      	movs	r5, #2
 800c0ba:	f1b9 0f00 	cmp.w	r9, #0
 800c0be:	d047      	beq.n	800c150 <__gethex+0x38c>
 800c0c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d015      	beq.n	800c0f4 <__gethex+0x330>
 800c0c8:	2b03      	cmp	r3, #3
 800c0ca:	d017      	beq.n	800c0fc <__gethex+0x338>
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d109      	bne.n	800c0e4 <__gethex+0x320>
 800c0d0:	f019 0f02 	tst.w	r9, #2
 800c0d4:	d006      	beq.n	800c0e4 <__gethex+0x320>
 800c0d6:	f8da 3000 	ldr.w	r3, [sl]
 800c0da:	ea49 0903 	orr.w	r9, r9, r3
 800c0de:	f019 0f01 	tst.w	r9, #1
 800c0e2:	d10e      	bne.n	800c102 <__gethex+0x33e>
 800c0e4:	f045 0510 	orr.w	r5, r5, #16
 800c0e8:	e032      	b.n	800c150 <__gethex+0x38c>
 800c0ea:	f04f 0901 	mov.w	r9, #1
 800c0ee:	e7d1      	b.n	800c094 <__gethex+0x2d0>
 800c0f0:	2501      	movs	r5, #1
 800c0f2:	e7e2      	b.n	800c0ba <__gethex+0x2f6>
 800c0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0f6:	f1c3 0301 	rsb	r3, r3, #1
 800c0fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0f0      	beq.n	800c0e4 <__gethex+0x320>
 800c102:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c106:	f104 0314 	add.w	r3, r4, #20
 800c10a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c10e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c112:	f04f 0c00 	mov.w	ip, #0
 800c116:	4618      	mov	r0, r3
 800c118:	f853 2b04 	ldr.w	r2, [r3], #4
 800c11c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c120:	d01b      	beq.n	800c15a <__gethex+0x396>
 800c122:	3201      	adds	r2, #1
 800c124:	6002      	str	r2, [r0, #0]
 800c126:	2d02      	cmp	r5, #2
 800c128:	f104 0314 	add.w	r3, r4, #20
 800c12c:	d13c      	bne.n	800c1a8 <__gethex+0x3e4>
 800c12e:	f8d8 2000 	ldr.w	r2, [r8]
 800c132:	3a01      	subs	r2, #1
 800c134:	42b2      	cmp	r2, r6
 800c136:	d109      	bne.n	800c14c <__gethex+0x388>
 800c138:	1171      	asrs	r1, r6, #5
 800c13a:	2201      	movs	r2, #1
 800c13c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c140:	f006 061f 	and.w	r6, r6, #31
 800c144:	fa02 f606 	lsl.w	r6, r2, r6
 800c148:	421e      	tst	r6, r3
 800c14a:	d13a      	bne.n	800c1c2 <__gethex+0x3fe>
 800c14c:	f045 0520 	orr.w	r5, r5, #32
 800c150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c152:	601c      	str	r4, [r3, #0]
 800c154:	9b02      	ldr	r3, [sp, #8]
 800c156:	601f      	str	r7, [r3, #0]
 800c158:	e6b0      	b.n	800bebc <__gethex+0xf8>
 800c15a:	4299      	cmp	r1, r3
 800c15c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c160:	d8d9      	bhi.n	800c116 <__gethex+0x352>
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	459b      	cmp	fp, r3
 800c166:	db17      	blt.n	800c198 <__gethex+0x3d4>
 800c168:	6861      	ldr	r1, [r4, #4]
 800c16a:	9801      	ldr	r0, [sp, #4]
 800c16c:	3101      	adds	r1, #1
 800c16e:	f000 fbc5 	bl	800c8fc <_Balloc>
 800c172:	4681      	mov	r9, r0
 800c174:	b918      	cbnz	r0, 800c17e <__gethex+0x3ba>
 800c176:	4b1a      	ldr	r3, [pc, #104]	@ (800c1e0 <__gethex+0x41c>)
 800c178:	4602      	mov	r2, r0
 800c17a:	2184      	movs	r1, #132	@ 0x84
 800c17c:	e6c5      	b.n	800bf0a <__gethex+0x146>
 800c17e:	6922      	ldr	r2, [r4, #16]
 800c180:	3202      	adds	r2, #2
 800c182:	f104 010c 	add.w	r1, r4, #12
 800c186:	0092      	lsls	r2, r2, #2
 800c188:	300c      	adds	r0, #12
 800c18a:	f7fe ffaf 	bl	800b0ec <memcpy>
 800c18e:	4621      	mov	r1, r4
 800c190:	9801      	ldr	r0, [sp, #4]
 800c192:	f000 fbf3 	bl	800c97c <_Bfree>
 800c196:	464c      	mov	r4, r9
 800c198:	6923      	ldr	r3, [r4, #16]
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1a0:	6122      	str	r2, [r4, #16]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	615a      	str	r2, [r3, #20]
 800c1a6:	e7be      	b.n	800c126 <__gethex+0x362>
 800c1a8:	6922      	ldr	r2, [r4, #16]
 800c1aa:	455a      	cmp	r2, fp
 800c1ac:	dd0b      	ble.n	800c1c6 <__gethex+0x402>
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7ff fd9f 	bl	800bcf4 <rshift>
 800c1b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1ba:	3701      	adds	r7, #1
 800c1bc:	42bb      	cmp	r3, r7
 800c1be:	f6ff aee0 	blt.w	800bf82 <__gethex+0x1be>
 800c1c2:	2501      	movs	r5, #1
 800c1c4:	e7c2      	b.n	800c14c <__gethex+0x388>
 800c1c6:	f016 061f 	ands.w	r6, r6, #31
 800c1ca:	d0fa      	beq.n	800c1c2 <__gethex+0x3fe>
 800c1cc:	4453      	add	r3, sl
 800c1ce:	f1c6 0620 	rsb	r6, r6, #32
 800c1d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c1d6:	f000 fc83 	bl	800cae0 <__hi0bits>
 800c1da:	42b0      	cmp	r0, r6
 800c1dc:	dbe7      	blt.n	800c1ae <__gethex+0x3ea>
 800c1de:	e7f0      	b.n	800c1c2 <__gethex+0x3fe>
 800c1e0:	0800e6b7 	.word	0x0800e6b7

0800c1e4 <L_shift>:
 800c1e4:	f1c2 0208 	rsb	r2, r2, #8
 800c1e8:	0092      	lsls	r2, r2, #2
 800c1ea:	b570      	push	{r4, r5, r6, lr}
 800c1ec:	f1c2 0620 	rsb	r6, r2, #32
 800c1f0:	6843      	ldr	r3, [r0, #4]
 800c1f2:	6804      	ldr	r4, [r0, #0]
 800c1f4:	fa03 f506 	lsl.w	r5, r3, r6
 800c1f8:	432c      	orrs	r4, r5
 800c1fa:	40d3      	lsrs	r3, r2
 800c1fc:	6004      	str	r4, [r0, #0]
 800c1fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800c202:	4288      	cmp	r0, r1
 800c204:	d3f4      	bcc.n	800c1f0 <L_shift+0xc>
 800c206:	bd70      	pop	{r4, r5, r6, pc}

0800c208 <__match>:
 800c208:	b530      	push	{r4, r5, lr}
 800c20a:	6803      	ldr	r3, [r0, #0]
 800c20c:	3301      	adds	r3, #1
 800c20e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c212:	b914      	cbnz	r4, 800c21a <__match+0x12>
 800c214:	6003      	str	r3, [r0, #0]
 800c216:	2001      	movs	r0, #1
 800c218:	bd30      	pop	{r4, r5, pc}
 800c21a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c21e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c222:	2d19      	cmp	r5, #25
 800c224:	bf98      	it	ls
 800c226:	3220      	addls	r2, #32
 800c228:	42a2      	cmp	r2, r4
 800c22a:	d0f0      	beq.n	800c20e <__match+0x6>
 800c22c:	2000      	movs	r0, #0
 800c22e:	e7f3      	b.n	800c218 <__match+0x10>

0800c230 <__hexnan>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	680b      	ldr	r3, [r1, #0]
 800c236:	6801      	ldr	r1, [r0, #0]
 800c238:	115e      	asrs	r6, r3, #5
 800c23a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c23e:	f013 031f 	ands.w	r3, r3, #31
 800c242:	b087      	sub	sp, #28
 800c244:	bf18      	it	ne
 800c246:	3604      	addne	r6, #4
 800c248:	2500      	movs	r5, #0
 800c24a:	1f37      	subs	r7, r6, #4
 800c24c:	4682      	mov	sl, r0
 800c24e:	4690      	mov	r8, r2
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	f846 5c04 	str.w	r5, [r6, #-4]
 800c256:	46b9      	mov	r9, r7
 800c258:	463c      	mov	r4, r7
 800c25a:	9502      	str	r5, [sp, #8]
 800c25c:	46ab      	mov	fp, r5
 800c25e:	784a      	ldrb	r2, [r1, #1]
 800c260:	1c4b      	adds	r3, r1, #1
 800c262:	9303      	str	r3, [sp, #12]
 800c264:	b342      	cbz	r2, 800c2b8 <__hexnan+0x88>
 800c266:	4610      	mov	r0, r2
 800c268:	9105      	str	r1, [sp, #20]
 800c26a:	9204      	str	r2, [sp, #16]
 800c26c:	f7ff fd94 	bl	800bd98 <__hexdig_fun>
 800c270:	2800      	cmp	r0, #0
 800c272:	d151      	bne.n	800c318 <__hexnan+0xe8>
 800c274:	9a04      	ldr	r2, [sp, #16]
 800c276:	9905      	ldr	r1, [sp, #20]
 800c278:	2a20      	cmp	r2, #32
 800c27a:	d818      	bhi.n	800c2ae <__hexnan+0x7e>
 800c27c:	9b02      	ldr	r3, [sp, #8]
 800c27e:	459b      	cmp	fp, r3
 800c280:	dd13      	ble.n	800c2aa <__hexnan+0x7a>
 800c282:	454c      	cmp	r4, r9
 800c284:	d206      	bcs.n	800c294 <__hexnan+0x64>
 800c286:	2d07      	cmp	r5, #7
 800c288:	dc04      	bgt.n	800c294 <__hexnan+0x64>
 800c28a:	462a      	mov	r2, r5
 800c28c:	4649      	mov	r1, r9
 800c28e:	4620      	mov	r0, r4
 800c290:	f7ff ffa8 	bl	800c1e4 <L_shift>
 800c294:	4544      	cmp	r4, r8
 800c296:	d952      	bls.n	800c33e <__hexnan+0x10e>
 800c298:	2300      	movs	r3, #0
 800c29a:	f1a4 0904 	sub.w	r9, r4, #4
 800c29e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2a2:	f8cd b008 	str.w	fp, [sp, #8]
 800c2a6:	464c      	mov	r4, r9
 800c2a8:	461d      	mov	r5, r3
 800c2aa:	9903      	ldr	r1, [sp, #12]
 800c2ac:	e7d7      	b.n	800c25e <__hexnan+0x2e>
 800c2ae:	2a29      	cmp	r2, #41	@ 0x29
 800c2b0:	d157      	bne.n	800c362 <__hexnan+0x132>
 800c2b2:	3102      	adds	r1, #2
 800c2b4:	f8ca 1000 	str.w	r1, [sl]
 800c2b8:	f1bb 0f00 	cmp.w	fp, #0
 800c2bc:	d051      	beq.n	800c362 <__hexnan+0x132>
 800c2be:	454c      	cmp	r4, r9
 800c2c0:	d206      	bcs.n	800c2d0 <__hexnan+0xa0>
 800c2c2:	2d07      	cmp	r5, #7
 800c2c4:	dc04      	bgt.n	800c2d0 <__hexnan+0xa0>
 800c2c6:	462a      	mov	r2, r5
 800c2c8:	4649      	mov	r1, r9
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f7ff ff8a 	bl	800c1e4 <L_shift>
 800c2d0:	4544      	cmp	r4, r8
 800c2d2:	d936      	bls.n	800c342 <__hexnan+0x112>
 800c2d4:	f1a8 0204 	sub.w	r2, r8, #4
 800c2d8:	4623      	mov	r3, r4
 800c2da:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2de:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2e2:	429f      	cmp	r7, r3
 800c2e4:	d2f9      	bcs.n	800c2da <__hexnan+0xaa>
 800c2e6:	1b3b      	subs	r3, r7, r4
 800c2e8:	f023 0303 	bic.w	r3, r3, #3
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	3401      	adds	r4, #1
 800c2f0:	3e03      	subs	r6, #3
 800c2f2:	42b4      	cmp	r4, r6
 800c2f4:	bf88      	it	hi
 800c2f6:	2304      	movhi	r3, #4
 800c2f8:	4443      	add	r3, r8
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f843 2b04 	str.w	r2, [r3], #4
 800c300:	429f      	cmp	r7, r3
 800c302:	d2fb      	bcs.n	800c2fc <__hexnan+0xcc>
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	b91b      	cbnz	r3, 800c310 <__hexnan+0xe0>
 800c308:	4547      	cmp	r7, r8
 800c30a:	d128      	bne.n	800c35e <__hexnan+0x12e>
 800c30c:	2301      	movs	r3, #1
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	2005      	movs	r0, #5
 800c312:	b007      	add	sp, #28
 800c314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c318:	3501      	adds	r5, #1
 800c31a:	2d08      	cmp	r5, #8
 800c31c:	f10b 0b01 	add.w	fp, fp, #1
 800c320:	dd06      	ble.n	800c330 <__hexnan+0x100>
 800c322:	4544      	cmp	r4, r8
 800c324:	d9c1      	bls.n	800c2aa <__hexnan+0x7a>
 800c326:	2300      	movs	r3, #0
 800c328:	f844 3c04 	str.w	r3, [r4, #-4]
 800c32c:	2501      	movs	r5, #1
 800c32e:	3c04      	subs	r4, #4
 800c330:	6822      	ldr	r2, [r4, #0]
 800c332:	f000 000f 	and.w	r0, r0, #15
 800c336:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c33a:	6020      	str	r0, [r4, #0]
 800c33c:	e7b5      	b.n	800c2aa <__hexnan+0x7a>
 800c33e:	2508      	movs	r5, #8
 800c340:	e7b3      	b.n	800c2aa <__hexnan+0x7a>
 800c342:	9b01      	ldr	r3, [sp, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d0dd      	beq.n	800c304 <__hexnan+0xd4>
 800c348:	f1c3 0320 	rsb	r3, r3, #32
 800c34c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c350:	40da      	lsrs	r2, r3
 800c352:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c356:	4013      	ands	r3, r2
 800c358:	f846 3c04 	str.w	r3, [r6, #-4]
 800c35c:	e7d2      	b.n	800c304 <__hexnan+0xd4>
 800c35e:	3f04      	subs	r7, #4
 800c360:	e7d0      	b.n	800c304 <__hexnan+0xd4>
 800c362:	2004      	movs	r0, #4
 800c364:	e7d5      	b.n	800c312 <__hexnan+0xe2>

0800c366 <__ssputs_r>:
 800c366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c36a:	688e      	ldr	r6, [r1, #8]
 800c36c:	461f      	mov	r7, r3
 800c36e:	42be      	cmp	r6, r7
 800c370:	680b      	ldr	r3, [r1, #0]
 800c372:	4682      	mov	sl, r0
 800c374:	460c      	mov	r4, r1
 800c376:	4690      	mov	r8, r2
 800c378:	d82d      	bhi.n	800c3d6 <__ssputs_r+0x70>
 800c37a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c37e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c382:	d026      	beq.n	800c3d2 <__ssputs_r+0x6c>
 800c384:	6965      	ldr	r5, [r4, #20]
 800c386:	6909      	ldr	r1, [r1, #16]
 800c388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c38c:	eba3 0901 	sub.w	r9, r3, r1
 800c390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c394:	1c7b      	adds	r3, r7, #1
 800c396:	444b      	add	r3, r9
 800c398:	106d      	asrs	r5, r5, #1
 800c39a:	429d      	cmp	r5, r3
 800c39c:	bf38      	it	cc
 800c39e:	461d      	movcc	r5, r3
 800c3a0:	0553      	lsls	r3, r2, #21
 800c3a2:	d527      	bpl.n	800c3f4 <__ssputs_r+0x8e>
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	f000 f95f 	bl	800c668 <_malloc_r>
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	b360      	cbz	r0, 800c408 <__ssputs_r+0xa2>
 800c3ae:	6921      	ldr	r1, [r4, #16]
 800c3b0:	464a      	mov	r2, r9
 800c3b2:	f7fe fe9b 	bl	800b0ec <memcpy>
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c3bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	6126      	str	r6, [r4, #16]
 800c3c4:	6165      	str	r5, [r4, #20]
 800c3c6:	444e      	add	r6, r9
 800c3c8:	eba5 0509 	sub.w	r5, r5, r9
 800c3cc:	6026      	str	r6, [r4, #0]
 800c3ce:	60a5      	str	r5, [r4, #8]
 800c3d0:	463e      	mov	r6, r7
 800c3d2:	42be      	cmp	r6, r7
 800c3d4:	d900      	bls.n	800c3d8 <__ssputs_r+0x72>
 800c3d6:	463e      	mov	r6, r7
 800c3d8:	6820      	ldr	r0, [r4, #0]
 800c3da:	4632      	mov	r2, r6
 800c3dc:	4641      	mov	r1, r8
 800c3de:	f000 ffb2 	bl	800d346 <memmove>
 800c3e2:	68a3      	ldr	r3, [r4, #8]
 800c3e4:	1b9b      	subs	r3, r3, r6
 800c3e6:	60a3      	str	r3, [r4, #8]
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	4433      	add	r3, r6
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f4:	462a      	mov	r2, r5
 800c3f6:	f000 ff6b 	bl	800d2d0 <_realloc_r>
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d1e0      	bne.n	800c3c2 <__ssputs_r+0x5c>
 800c400:	6921      	ldr	r1, [r4, #16]
 800c402:	4650      	mov	r0, sl
 800c404:	f001 f842 	bl	800d48c <_free_r>
 800c408:	230c      	movs	r3, #12
 800c40a:	f8ca 3000 	str.w	r3, [sl]
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c414:	81a3      	strh	r3, [r4, #12]
 800c416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c41a:	e7e9      	b.n	800c3f0 <__ssputs_r+0x8a>

0800c41c <_svfiprintf_r>:
 800c41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c420:	4698      	mov	r8, r3
 800c422:	898b      	ldrh	r3, [r1, #12]
 800c424:	061b      	lsls	r3, r3, #24
 800c426:	b09d      	sub	sp, #116	@ 0x74
 800c428:	4607      	mov	r7, r0
 800c42a:	460d      	mov	r5, r1
 800c42c:	4614      	mov	r4, r2
 800c42e:	d510      	bpl.n	800c452 <_svfiprintf_r+0x36>
 800c430:	690b      	ldr	r3, [r1, #16]
 800c432:	b973      	cbnz	r3, 800c452 <_svfiprintf_r+0x36>
 800c434:	2140      	movs	r1, #64	@ 0x40
 800c436:	f000 f917 	bl	800c668 <_malloc_r>
 800c43a:	6028      	str	r0, [r5, #0]
 800c43c:	6128      	str	r0, [r5, #16]
 800c43e:	b930      	cbnz	r0, 800c44e <_svfiprintf_r+0x32>
 800c440:	230c      	movs	r3, #12
 800c442:	603b      	str	r3, [r7, #0]
 800c444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c448:	b01d      	add	sp, #116	@ 0x74
 800c44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44e:	2340      	movs	r3, #64	@ 0x40
 800c450:	616b      	str	r3, [r5, #20]
 800c452:	2300      	movs	r3, #0
 800c454:	9309      	str	r3, [sp, #36]	@ 0x24
 800c456:	2320      	movs	r3, #32
 800c458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c45c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c460:	2330      	movs	r3, #48	@ 0x30
 800c462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c600 <_svfiprintf_r+0x1e4>
 800c466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c46a:	f04f 0901 	mov.w	r9, #1
 800c46e:	4623      	mov	r3, r4
 800c470:	469a      	mov	sl, r3
 800c472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c476:	b10a      	cbz	r2, 800c47c <_svfiprintf_r+0x60>
 800c478:	2a25      	cmp	r2, #37	@ 0x25
 800c47a:	d1f9      	bne.n	800c470 <_svfiprintf_r+0x54>
 800c47c:	ebba 0b04 	subs.w	fp, sl, r4
 800c480:	d00b      	beq.n	800c49a <_svfiprintf_r+0x7e>
 800c482:	465b      	mov	r3, fp
 800c484:	4622      	mov	r2, r4
 800c486:	4629      	mov	r1, r5
 800c488:	4638      	mov	r0, r7
 800c48a:	f7ff ff6c 	bl	800c366 <__ssputs_r>
 800c48e:	3001      	adds	r0, #1
 800c490:	f000 80a7 	beq.w	800c5e2 <_svfiprintf_r+0x1c6>
 800c494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c496:	445a      	add	r2, fp
 800c498:	9209      	str	r2, [sp, #36]	@ 0x24
 800c49a:	f89a 3000 	ldrb.w	r3, [sl]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 809f 	beq.w	800c5e2 <_svfiprintf_r+0x1c6>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4ae:	f10a 0a01 	add.w	sl, sl, #1
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	9307      	str	r3, [sp, #28]
 800c4b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4bc:	4654      	mov	r4, sl
 800c4be:	2205      	movs	r2, #5
 800c4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c4:	484e      	ldr	r0, [pc, #312]	@ (800c600 <_svfiprintf_r+0x1e4>)
 800c4c6:	f7f3 ff0b 	bl	80002e0 <memchr>
 800c4ca:	9a04      	ldr	r2, [sp, #16]
 800c4cc:	b9d8      	cbnz	r0, 800c506 <_svfiprintf_r+0xea>
 800c4ce:	06d0      	lsls	r0, r2, #27
 800c4d0:	bf44      	itt	mi
 800c4d2:	2320      	movmi	r3, #32
 800c4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4d8:	0711      	lsls	r1, r2, #28
 800c4da:	bf44      	itt	mi
 800c4dc:	232b      	movmi	r3, #43	@ 0x2b
 800c4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4e8:	d015      	beq.n	800c516 <_svfiprintf_r+0xfa>
 800c4ea:	9a07      	ldr	r2, [sp, #28]
 800c4ec:	4654      	mov	r4, sl
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	f04f 0c0a 	mov.w	ip, #10
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4fa:	3b30      	subs	r3, #48	@ 0x30
 800c4fc:	2b09      	cmp	r3, #9
 800c4fe:	d94b      	bls.n	800c598 <_svfiprintf_r+0x17c>
 800c500:	b1b0      	cbz	r0, 800c530 <_svfiprintf_r+0x114>
 800c502:	9207      	str	r2, [sp, #28]
 800c504:	e014      	b.n	800c530 <_svfiprintf_r+0x114>
 800c506:	eba0 0308 	sub.w	r3, r0, r8
 800c50a:	fa09 f303 	lsl.w	r3, r9, r3
 800c50e:	4313      	orrs	r3, r2
 800c510:	9304      	str	r3, [sp, #16]
 800c512:	46a2      	mov	sl, r4
 800c514:	e7d2      	b.n	800c4bc <_svfiprintf_r+0xa0>
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	1d19      	adds	r1, r3, #4
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	9103      	str	r1, [sp, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	bfbb      	ittet	lt
 800c522:	425b      	neglt	r3, r3
 800c524:	f042 0202 	orrlt.w	r2, r2, #2
 800c528:	9307      	strge	r3, [sp, #28]
 800c52a:	9307      	strlt	r3, [sp, #28]
 800c52c:	bfb8      	it	lt
 800c52e:	9204      	strlt	r2, [sp, #16]
 800c530:	7823      	ldrb	r3, [r4, #0]
 800c532:	2b2e      	cmp	r3, #46	@ 0x2e
 800c534:	d10a      	bne.n	800c54c <_svfiprintf_r+0x130>
 800c536:	7863      	ldrb	r3, [r4, #1]
 800c538:	2b2a      	cmp	r3, #42	@ 0x2a
 800c53a:	d132      	bne.n	800c5a2 <_svfiprintf_r+0x186>
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	1d1a      	adds	r2, r3, #4
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	9203      	str	r2, [sp, #12]
 800c544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c548:	3402      	adds	r4, #2
 800c54a:	9305      	str	r3, [sp, #20]
 800c54c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c610 <_svfiprintf_r+0x1f4>
 800c550:	7821      	ldrb	r1, [r4, #0]
 800c552:	2203      	movs	r2, #3
 800c554:	4650      	mov	r0, sl
 800c556:	f7f3 fec3 	bl	80002e0 <memchr>
 800c55a:	b138      	cbz	r0, 800c56c <_svfiprintf_r+0x150>
 800c55c:	9b04      	ldr	r3, [sp, #16]
 800c55e:	eba0 000a 	sub.w	r0, r0, sl
 800c562:	2240      	movs	r2, #64	@ 0x40
 800c564:	4082      	lsls	r2, r0
 800c566:	4313      	orrs	r3, r2
 800c568:	3401      	adds	r4, #1
 800c56a:	9304      	str	r3, [sp, #16]
 800c56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c570:	4824      	ldr	r0, [pc, #144]	@ (800c604 <_svfiprintf_r+0x1e8>)
 800c572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c576:	2206      	movs	r2, #6
 800c578:	f7f3 feb2 	bl	80002e0 <memchr>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d036      	beq.n	800c5ee <_svfiprintf_r+0x1d2>
 800c580:	4b21      	ldr	r3, [pc, #132]	@ (800c608 <_svfiprintf_r+0x1ec>)
 800c582:	bb1b      	cbnz	r3, 800c5cc <_svfiprintf_r+0x1b0>
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	3307      	adds	r3, #7
 800c588:	f023 0307 	bic.w	r3, r3, #7
 800c58c:	3308      	adds	r3, #8
 800c58e:	9303      	str	r3, [sp, #12]
 800c590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c592:	4433      	add	r3, r6
 800c594:	9309      	str	r3, [sp, #36]	@ 0x24
 800c596:	e76a      	b.n	800c46e <_svfiprintf_r+0x52>
 800c598:	fb0c 3202 	mla	r2, ip, r2, r3
 800c59c:	460c      	mov	r4, r1
 800c59e:	2001      	movs	r0, #1
 800c5a0:	e7a8      	b.n	800c4f4 <_svfiprintf_r+0xd8>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	3401      	adds	r4, #1
 800c5a6:	9305      	str	r3, [sp, #20]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	f04f 0c0a 	mov.w	ip, #10
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5b4:	3a30      	subs	r2, #48	@ 0x30
 800c5b6:	2a09      	cmp	r2, #9
 800c5b8:	d903      	bls.n	800c5c2 <_svfiprintf_r+0x1a6>
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d0c6      	beq.n	800c54c <_svfiprintf_r+0x130>
 800c5be:	9105      	str	r1, [sp, #20]
 800c5c0:	e7c4      	b.n	800c54c <_svfiprintf_r+0x130>
 800c5c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e7f0      	b.n	800c5ae <_svfiprintf_r+0x192>
 800c5cc:	ab03      	add	r3, sp, #12
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	462a      	mov	r2, r5
 800c5d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c60c <_svfiprintf_r+0x1f0>)
 800c5d4:	a904      	add	r1, sp, #16
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	f7fd f876 	bl	80096c8 <_printf_float>
 800c5dc:	1c42      	adds	r2, r0, #1
 800c5de:	4606      	mov	r6, r0
 800c5e0:	d1d6      	bne.n	800c590 <_svfiprintf_r+0x174>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	065b      	lsls	r3, r3, #25
 800c5e6:	f53f af2d 	bmi.w	800c444 <_svfiprintf_r+0x28>
 800c5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5ec:	e72c      	b.n	800c448 <_svfiprintf_r+0x2c>
 800c5ee:	ab03      	add	r3, sp, #12
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	462a      	mov	r2, r5
 800c5f4:	4b05      	ldr	r3, [pc, #20]	@ (800c60c <_svfiprintf_r+0x1f0>)
 800c5f6:	a904      	add	r1, sp, #16
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	f7fd faed 	bl	8009bd8 <_printf_i>
 800c5fe:	e7ed      	b.n	800c5dc <_svfiprintf_r+0x1c0>
 800c600:	0800e728 	.word	0x0800e728
 800c604:	0800e732 	.word	0x0800e732
 800c608:	080096c9 	.word	0x080096c9
 800c60c:	0800c367 	.word	0x0800c367
 800c610:	0800e72e 	.word	0x0800e72e

0800c614 <malloc>:
 800c614:	4b02      	ldr	r3, [pc, #8]	@ (800c620 <malloc+0xc>)
 800c616:	4601      	mov	r1, r0
 800c618:	6818      	ldr	r0, [r3, #0]
 800c61a:	f000 b825 	b.w	800c668 <_malloc_r>
 800c61e:	bf00      	nop
 800c620:	2400018c 	.word	0x2400018c

0800c624 <sbrk_aligned>:
 800c624:	b570      	push	{r4, r5, r6, lr}
 800c626:	4e0f      	ldr	r6, [pc, #60]	@ (800c664 <sbrk_aligned+0x40>)
 800c628:	460c      	mov	r4, r1
 800c62a:	6831      	ldr	r1, [r6, #0]
 800c62c:	4605      	mov	r5, r0
 800c62e:	b911      	cbnz	r1, 800c636 <sbrk_aligned+0x12>
 800c630:	f000 fec8 	bl	800d3c4 <_sbrk_r>
 800c634:	6030      	str	r0, [r6, #0]
 800c636:	4621      	mov	r1, r4
 800c638:	4628      	mov	r0, r5
 800c63a:	f000 fec3 	bl	800d3c4 <_sbrk_r>
 800c63e:	1c43      	adds	r3, r0, #1
 800c640:	d103      	bne.n	800c64a <sbrk_aligned+0x26>
 800c642:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c646:	4620      	mov	r0, r4
 800c648:	bd70      	pop	{r4, r5, r6, pc}
 800c64a:	1cc4      	adds	r4, r0, #3
 800c64c:	f024 0403 	bic.w	r4, r4, #3
 800c650:	42a0      	cmp	r0, r4
 800c652:	d0f8      	beq.n	800c646 <sbrk_aligned+0x22>
 800c654:	1a21      	subs	r1, r4, r0
 800c656:	4628      	mov	r0, r5
 800c658:	f000 feb4 	bl	800d3c4 <_sbrk_r>
 800c65c:	3001      	adds	r0, #1
 800c65e:	d1f2      	bne.n	800c646 <sbrk_aligned+0x22>
 800c660:	e7ef      	b.n	800c642 <sbrk_aligned+0x1e>
 800c662:	bf00      	nop
 800c664:	240006a8 	.word	0x240006a8

0800c668 <_malloc_r>:
 800c668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c66c:	1ccd      	adds	r5, r1, #3
 800c66e:	f025 0503 	bic.w	r5, r5, #3
 800c672:	3508      	adds	r5, #8
 800c674:	2d0c      	cmp	r5, #12
 800c676:	bf38      	it	cc
 800c678:	250c      	movcc	r5, #12
 800c67a:	2d00      	cmp	r5, #0
 800c67c:	4606      	mov	r6, r0
 800c67e:	db01      	blt.n	800c684 <_malloc_r+0x1c>
 800c680:	42a9      	cmp	r1, r5
 800c682:	d904      	bls.n	800c68e <_malloc_r+0x26>
 800c684:	230c      	movs	r3, #12
 800c686:	6033      	str	r3, [r6, #0]
 800c688:	2000      	movs	r0, #0
 800c68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c68e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c764 <_malloc_r+0xfc>
 800c692:	f000 f927 	bl	800c8e4 <__malloc_lock>
 800c696:	f8d8 3000 	ldr.w	r3, [r8]
 800c69a:	461c      	mov	r4, r3
 800c69c:	bb44      	cbnz	r4, 800c6f0 <_malloc_r+0x88>
 800c69e:	4629      	mov	r1, r5
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f7ff ffbf 	bl	800c624 <sbrk_aligned>
 800c6a6:	1c43      	adds	r3, r0, #1
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	d158      	bne.n	800c75e <_malloc_r+0xf6>
 800c6ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c6b0:	4627      	mov	r7, r4
 800c6b2:	2f00      	cmp	r7, #0
 800c6b4:	d143      	bne.n	800c73e <_malloc_r+0xd6>
 800c6b6:	2c00      	cmp	r4, #0
 800c6b8:	d04b      	beq.n	800c752 <_malloc_r+0xea>
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	4639      	mov	r1, r7
 800c6be:	4630      	mov	r0, r6
 800c6c0:	eb04 0903 	add.w	r9, r4, r3
 800c6c4:	f000 fe7e 	bl	800d3c4 <_sbrk_r>
 800c6c8:	4581      	cmp	r9, r0
 800c6ca:	d142      	bne.n	800c752 <_malloc_r+0xea>
 800c6cc:	6821      	ldr	r1, [r4, #0]
 800c6ce:	1a6d      	subs	r5, r5, r1
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f7ff ffa6 	bl	800c624 <sbrk_aligned>
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d03a      	beq.n	800c752 <_malloc_r+0xea>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	442b      	add	r3, r5
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	bb62      	cbnz	r2, 800c744 <_malloc_r+0xdc>
 800c6ea:	f8c8 7000 	str.w	r7, [r8]
 800c6ee:	e00f      	b.n	800c710 <_malloc_r+0xa8>
 800c6f0:	6822      	ldr	r2, [r4, #0]
 800c6f2:	1b52      	subs	r2, r2, r5
 800c6f4:	d420      	bmi.n	800c738 <_malloc_r+0xd0>
 800c6f6:	2a0b      	cmp	r2, #11
 800c6f8:	d917      	bls.n	800c72a <_malloc_r+0xc2>
 800c6fa:	1961      	adds	r1, r4, r5
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	6025      	str	r5, [r4, #0]
 800c700:	bf18      	it	ne
 800c702:	6059      	strne	r1, [r3, #4]
 800c704:	6863      	ldr	r3, [r4, #4]
 800c706:	bf08      	it	eq
 800c708:	f8c8 1000 	streq.w	r1, [r8]
 800c70c:	5162      	str	r2, [r4, r5]
 800c70e:	604b      	str	r3, [r1, #4]
 800c710:	4630      	mov	r0, r6
 800c712:	f000 f8ed 	bl	800c8f0 <__malloc_unlock>
 800c716:	f104 000b 	add.w	r0, r4, #11
 800c71a:	1d23      	adds	r3, r4, #4
 800c71c:	f020 0007 	bic.w	r0, r0, #7
 800c720:	1ac2      	subs	r2, r0, r3
 800c722:	bf1c      	itt	ne
 800c724:	1a1b      	subne	r3, r3, r0
 800c726:	50a3      	strne	r3, [r4, r2]
 800c728:	e7af      	b.n	800c68a <_malloc_r+0x22>
 800c72a:	6862      	ldr	r2, [r4, #4]
 800c72c:	42a3      	cmp	r3, r4
 800c72e:	bf0c      	ite	eq
 800c730:	f8c8 2000 	streq.w	r2, [r8]
 800c734:	605a      	strne	r2, [r3, #4]
 800c736:	e7eb      	b.n	800c710 <_malloc_r+0xa8>
 800c738:	4623      	mov	r3, r4
 800c73a:	6864      	ldr	r4, [r4, #4]
 800c73c:	e7ae      	b.n	800c69c <_malloc_r+0x34>
 800c73e:	463c      	mov	r4, r7
 800c740:	687f      	ldr	r7, [r7, #4]
 800c742:	e7b6      	b.n	800c6b2 <_malloc_r+0x4a>
 800c744:	461a      	mov	r2, r3
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	42a3      	cmp	r3, r4
 800c74a:	d1fb      	bne.n	800c744 <_malloc_r+0xdc>
 800c74c:	2300      	movs	r3, #0
 800c74e:	6053      	str	r3, [r2, #4]
 800c750:	e7de      	b.n	800c710 <_malloc_r+0xa8>
 800c752:	230c      	movs	r3, #12
 800c754:	6033      	str	r3, [r6, #0]
 800c756:	4630      	mov	r0, r6
 800c758:	f000 f8ca 	bl	800c8f0 <__malloc_unlock>
 800c75c:	e794      	b.n	800c688 <_malloc_r+0x20>
 800c75e:	6005      	str	r5, [r0, #0]
 800c760:	e7d6      	b.n	800c710 <_malloc_r+0xa8>
 800c762:	bf00      	nop
 800c764:	240006ac 	.word	0x240006ac

0800c768 <__ascii_mbtowc>:
 800c768:	b082      	sub	sp, #8
 800c76a:	b901      	cbnz	r1, 800c76e <__ascii_mbtowc+0x6>
 800c76c:	a901      	add	r1, sp, #4
 800c76e:	b142      	cbz	r2, 800c782 <__ascii_mbtowc+0x1a>
 800c770:	b14b      	cbz	r3, 800c786 <__ascii_mbtowc+0x1e>
 800c772:	7813      	ldrb	r3, [r2, #0]
 800c774:	600b      	str	r3, [r1, #0]
 800c776:	7812      	ldrb	r2, [r2, #0]
 800c778:	1e10      	subs	r0, r2, #0
 800c77a:	bf18      	it	ne
 800c77c:	2001      	movne	r0, #1
 800c77e:	b002      	add	sp, #8
 800c780:	4770      	bx	lr
 800c782:	4610      	mov	r0, r2
 800c784:	e7fb      	b.n	800c77e <__ascii_mbtowc+0x16>
 800c786:	f06f 0001 	mvn.w	r0, #1
 800c78a:	e7f8      	b.n	800c77e <__ascii_mbtowc+0x16>

0800c78c <__sflush_r>:
 800c78c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c794:	0716      	lsls	r6, r2, #28
 800c796:	4605      	mov	r5, r0
 800c798:	460c      	mov	r4, r1
 800c79a:	d454      	bmi.n	800c846 <__sflush_r+0xba>
 800c79c:	684b      	ldr	r3, [r1, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	dc02      	bgt.n	800c7a8 <__sflush_r+0x1c>
 800c7a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dd48      	ble.n	800c83a <__sflush_r+0xae>
 800c7a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7aa:	2e00      	cmp	r6, #0
 800c7ac:	d045      	beq.n	800c83a <__sflush_r+0xae>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7b4:	682f      	ldr	r7, [r5, #0]
 800c7b6:	6a21      	ldr	r1, [r4, #32]
 800c7b8:	602b      	str	r3, [r5, #0]
 800c7ba:	d030      	beq.n	800c81e <__sflush_r+0x92>
 800c7bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	0759      	lsls	r1, r3, #29
 800c7c2:	d505      	bpl.n	800c7d0 <__sflush_r+0x44>
 800c7c4:	6863      	ldr	r3, [r4, #4]
 800c7c6:	1ad2      	subs	r2, r2, r3
 800c7c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7ca:	b10b      	cbz	r3, 800c7d0 <__sflush_r+0x44>
 800c7cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7ce:	1ad2      	subs	r2, r2, r3
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7d4:	6a21      	ldr	r1, [r4, #32]
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	47b0      	blx	r6
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	89a3      	ldrh	r3, [r4, #12]
 800c7de:	d106      	bne.n	800c7ee <__sflush_r+0x62>
 800c7e0:	6829      	ldr	r1, [r5, #0]
 800c7e2:	291d      	cmp	r1, #29
 800c7e4:	d82b      	bhi.n	800c83e <__sflush_r+0xb2>
 800c7e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c890 <__sflush_r+0x104>)
 800c7e8:	40ca      	lsrs	r2, r1
 800c7ea:	07d6      	lsls	r6, r2, #31
 800c7ec:	d527      	bpl.n	800c83e <__sflush_r+0xb2>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	6062      	str	r2, [r4, #4]
 800c7f2:	04d9      	lsls	r1, r3, #19
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	6022      	str	r2, [r4, #0]
 800c7f8:	d504      	bpl.n	800c804 <__sflush_r+0x78>
 800c7fa:	1c42      	adds	r2, r0, #1
 800c7fc:	d101      	bne.n	800c802 <__sflush_r+0x76>
 800c7fe:	682b      	ldr	r3, [r5, #0]
 800c800:	b903      	cbnz	r3, 800c804 <__sflush_r+0x78>
 800c802:	6560      	str	r0, [r4, #84]	@ 0x54
 800c804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c806:	602f      	str	r7, [r5, #0]
 800c808:	b1b9      	cbz	r1, 800c83a <__sflush_r+0xae>
 800c80a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c80e:	4299      	cmp	r1, r3
 800c810:	d002      	beq.n	800c818 <__sflush_r+0x8c>
 800c812:	4628      	mov	r0, r5
 800c814:	f000 fe3a 	bl	800d48c <_free_r>
 800c818:	2300      	movs	r3, #0
 800c81a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c81c:	e00d      	b.n	800c83a <__sflush_r+0xae>
 800c81e:	2301      	movs	r3, #1
 800c820:	4628      	mov	r0, r5
 800c822:	47b0      	blx	r6
 800c824:	4602      	mov	r2, r0
 800c826:	1c50      	adds	r0, r2, #1
 800c828:	d1c9      	bne.n	800c7be <__sflush_r+0x32>
 800c82a:	682b      	ldr	r3, [r5, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0c6      	beq.n	800c7be <__sflush_r+0x32>
 800c830:	2b1d      	cmp	r3, #29
 800c832:	d001      	beq.n	800c838 <__sflush_r+0xac>
 800c834:	2b16      	cmp	r3, #22
 800c836:	d11e      	bne.n	800c876 <__sflush_r+0xea>
 800c838:	602f      	str	r7, [r5, #0]
 800c83a:	2000      	movs	r0, #0
 800c83c:	e022      	b.n	800c884 <__sflush_r+0xf8>
 800c83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c842:	b21b      	sxth	r3, r3
 800c844:	e01b      	b.n	800c87e <__sflush_r+0xf2>
 800c846:	690f      	ldr	r7, [r1, #16]
 800c848:	2f00      	cmp	r7, #0
 800c84a:	d0f6      	beq.n	800c83a <__sflush_r+0xae>
 800c84c:	0793      	lsls	r3, r2, #30
 800c84e:	680e      	ldr	r6, [r1, #0]
 800c850:	bf08      	it	eq
 800c852:	694b      	ldreq	r3, [r1, #20]
 800c854:	600f      	str	r7, [r1, #0]
 800c856:	bf18      	it	ne
 800c858:	2300      	movne	r3, #0
 800c85a:	eba6 0807 	sub.w	r8, r6, r7
 800c85e:	608b      	str	r3, [r1, #8]
 800c860:	f1b8 0f00 	cmp.w	r8, #0
 800c864:	dde9      	ble.n	800c83a <__sflush_r+0xae>
 800c866:	6a21      	ldr	r1, [r4, #32]
 800c868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c86a:	4643      	mov	r3, r8
 800c86c:	463a      	mov	r2, r7
 800c86e:	4628      	mov	r0, r5
 800c870:	47b0      	blx	r6
 800c872:	2800      	cmp	r0, #0
 800c874:	dc08      	bgt.n	800c888 <__sflush_r+0xfc>
 800c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c888:	4407      	add	r7, r0
 800c88a:	eba8 0800 	sub.w	r8, r8, r0
 800c88e:	e7e7      	b.n	800c860 <__sflush_r+0xd4>
 800c890:	20400001 	.word	0x20400001

0800c894 <_fflush_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	690b      	ldr	r3, [r1, #16]
 800c898:	4605      	mov	r5, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	b913      	cbnz	r3, 800c8a4 <_fflush_r+0x10>
 800c89e:	2500      	movs	r5, #0
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	b118      	cbz	r0, 800c8ae <_fflush_r+0x1a>
 800c8a6:	6a03      	ldr	r3, [r0, #32]
 800c8a8:	b90b      	cbnz	r3, 800c8ae <_fflush_r+0x1a>
 800c8aa:	f7fd fd67 	bl	800a37c <__sinit>
 800c8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0f3      	beq.n	800c89e <_fflush_r+0xa>
 800c8b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8b8:	07d0      	lsls	r0, r2, #31
 800c8ba:	d404      	bmi.n	800c8c6 <_fflush_r+0x32>
 800c8bc:	0599      	lsls	r1, r3, #22
 800c8be:	d402      	bmi.n	800c8c6 <_fflush_r+0x32>
 800c8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8c2:	f7fe fc0c 	bl	800b0de <__retarget_lock_acquire_recursive>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	f7ff ff5f 	bl	800c78c <__sflush_r>
 800c8ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8d0:	07da      	lsls	r2, r3, #31
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	d4e4      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	059b      	lsls	r3, r3, #22
 800c8da:	d4e1      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8de:	f7fe fbff 	bl	800b0e0 <__retarget_lock_release_recursive>
 800c8e2:	e7dd      	b.n	800c8a0 <_fflush_r+0xc>

0800c8e4 <__malloc_lock>:
 800c8e4:	4801      	ldr	r0, [pc, #4]	@ (800c8ec <__malloc_lock+0x8>)
 800c8e6:	f7fe bbfa 	b.w	800b0de <__retarget_lock_acquire_recursive>
 800c8ea:	bf00      	nop
 800c8ec:	240006a4 	.word	0x240006a4

0800c8f0 <__malloc_unlock>:
 800c8f0:	4801      	ldr	r0, [pc, #4]	@ (800c8f8 <__malloc_unlock+0x8>)
 800c8f2:	f7fe bbf5 	b.w	800b0e0 <__retarget_lock_release_recursive>
 800c8f6:	bf00      	nop
 800c8f8:	240006a4 	.word	0x240006a4

0800c8fc <_Balloc>:
 800c8fc:	b570      	push	{r4, r5, r6, lr}
 800c8fe:	69c6      	ldr	r6, [r0, #28]
 800c900:	4604      	mov	r4, r0
 800c902:	460d      	mov	r5, r1
 800c904:	b976      	cbnz	r6, 800c924 <_Balloc+0x28>
 800c906:	2010      	movs	r0, #16
 800c908:	f7ff fe84 	bl	800c614 <malloc>
 800c90c:	4602      	mov	r2, r0
 800c90e:	61e0      	str	r0, [r4, #28]
 800c910:	b920      	cbnz	r0, 800c91c <_Balloc+0x20>
 800c912:	4b18      	ldr	r3, [pc, #96]	@ (800c974 <_Balloc+0x78>)
 800c914:	4818      	ldr	r0, [pc, #96]	@ (800c978 <_Balloc+0x7c>)
 800c916:	216b      	movs	r1, #107	@ 0x6b
 800c918:	f000 fd86 	bl	800d428 <__assert_func>
 800c91c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c920:	6006      	str	r6, [r0, #0]
 800c922:	60c6      	str	r6, [r0, #12]
 800c924:	69e6      	ldr	r6, [r4, #28]
 800c926:	68f3      	ldr	r3, [r6, #12]
 800c928:	b183      	cbz	r3, 800c94c <_Balloc+0x50>
 800c92a:	69e3      	ldr	r3, [r4, #28]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c932:	b9b8      	cbnz	r0, 800c964 <_Balloc+0x68>
 800c934:	2101      	movs	r1, #1
 800c936:	fa01 f605 	lsl.w	r6, r1, r5
 800c93a:	1d72      	adds	r2, r6, #5
 800c93c:	0092      	lsls	r2, r2, #2
 800c93e:	4620      	mov	r0, r4
 800c940:	f000 fd90 	bl	800d464 <_calloc_r>
 800c944:	b160      	cbz	r0, 800c960 <_Balloc+0x64>
 800c946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c94a:	e00e      	b.n	800c96a <_Balloc+0x6e>
 800c94c:	2221      	movs	r2, #33	@ 0x21
 800c94e:	2104      	movs	r1, #4
 800c950:	4620      	mov	r0, r4
 800c952:	f000 fd87 	bl	800d464 <_calloc_r>
 800c956:	69e3      	ldr	r3, [r4, #28]
 800c958:	60f0      	str	r0, [r6, #12]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1e4      	bne.n	800c92a <_Balloc+0x2e>
 800c960:	2000      	movs	r0, #0
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	6802      	ldr	r2, [r0, #0]
 800c966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c96a:	2300      	movs	r3, #0
 800c96c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c970:	e7f7      	b.n	800c962 <_Balloc+0x66>
 800c972:	bf00      	nop
 800c974:	0800e648 	.word	0x0800e648
 800c978:	0800e739 	.word	0x0800e739

0800c97c <_Bfree>:
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	69c6      	ldr	r6, [r0, #28]
 800c980:	4605      	mov	r5, r0
 800c982:	460c      	mov	r4, r1
 800c984:	b976      	cbnz	r6, 800c9a4 <_Bfree+0x28>
 800c986:	2010      	movs	r0, #16
 800c988:	f7ff fe44 	bl	800c614 <malloc>
 800c98c:	4602      	mov	r2, r0
 800c98e:	61e8      	str	r0, [r5, #28]
 800c990:	b920      	cbnz	r0, 800c99c <_Bfree+0x20>
 800c992:	4b09      	ldr	r3, [pc, #36]	@ (800c9b8 <_Bfree+0x3c>)
 800c994:	4809      	ldr	r0, [pc, #36]	@ (800c9bc <_Bfree+0x40>)
 800c996:	218f      	movs	r1, #143	@ 0x8f
 800c998:	f000 fd46 	bl	800d428 <__assert_func>
 800c99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9a0:	6006      	str	r6, [r0, #0]
 800c9a2:	60c6      	str	r6, [r0, #12]
 800c9a4:	b13c      	cbz	r4, 800c9b6 <_Bfree+0x3a>
 800c9a6:	69eb      	ldr	r3, [r5, #28]
 800c9a8:	6862      	ldr	r2, [r4, #4]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9b0:	6021      	str	r1, [r4, #0]
 800c9b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9b6:	bd70      	pop	{r4, r5, r6, pc}
 800c9b8:	0800e648 	.word	0x0800e648
 800c9bc:	0800e739 	.word	0x0800e739

0800c9c0 <__multadd>:
 800c9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c4:	690d      	ldr	r5, [r1, #16]
 800c9c6:	4607      	mov	r7, r0
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	461e      	mov	r6, r3
 800c9cc:	f101 0c14 	add.w	ip, r1, #20
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	f8dc 3000 	ldr.w	r3, [ip]
 800c9d6:	b299      	uxth	r1, r3
 800c9d8:	fb02 6101 	mla	r1, r2, r1, r6
 800c9dc:	0c1e      	lsrs	r6, r3, #16
 800c9de:	0c0b      	lsrs	r3, r1, #16
 800c9e0:	fb02 3306 	mla	r3, r2, r6, r3
 800c9e4:	b289      	uxth	r1, r1
 800c9e6:	3001      	adds	r0, #1
 800c9e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9ec:	4285      	cmp	r5, r0
 800c9ee:	f84c 1b04 	str.w	r1, [ip], #4
 800c9f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9f6:	dcec      	bgt.n	800c9d2 <__multadd+0x12>
 800c9f8:	b30e      	cbz	r6, 800ca3e <__multadd+0x7e>
 800c9fa:	68a3      	ldr	r3, [r4, #8]
 800c9fc:	42ab      	cmp	r3, r5
 800c9fe:	dc19      	bgt.n	800ca34 <__multadd+0x74>
 800ca00:	6861      	ldr	r1, [r4, #4]
 800ca02:	4638      	mov	r0, r7
 800ca04:	3101      	adds	r1, #1
 800ca06:	f7ff ff79 	bl	800c8fc <_Balloc>
 800ca0a:	4680      	mov	r8, r0
 800ca0c:	b928      	cbnz	r0, 800ca1a <__multadd+0x5a>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	4b0c      	ldr	r3, [pc, #48]	@ (800ca44 <__multadd+0x84>)
 800ca12:	480d      	ldr	r0, [pc, #52]	@ (800ca48 <__multadd+0x88>)
 800ca14:	21ba      	movs	r1, #186	@ 0xba
 800ca16:	f000 fd07 	bl	800d428 <__assert_func>
 800ca1a:	6922      	ldr	r2, [r4, #16]
 800ca1c:	3202      	adds	r2, #2
 800ca1e:	f104 010c 	add.w	r1, r4, #12
 800ca22:	0092      	lsls	r2, r2, #2
 800ca24:	300c      	adds	r0, #12
 800ca26:	f7fe fb61 	bl	800b0ec <memcpy>
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f7ff ffa5 	bl	800c97c <_Bfree>
 800ca32:	4644      	mov	r4, r8
 800ca34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca38:	3501      	adds	r5, #1
 800ca3a:	615e      	str	r6, [r3, #20]
 800ca3c:	6125      	str	r5, [r4, #16]
 800ca3e:	4620      	mov	r0, r4
 800ca40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca44:	0800e6b7 	.word	0x0800e6b7
 800ca48:	0800e739 	.word	0x0800e739

0800ca4c <__s2b>:
 800ca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca50:	460c      	mov	r4, r1
 800ca52:	4615      	mov	r5, r2
 800ca54:	461f      	mov	r7, r3
 800ca56:	2209      	movs	r2, #9
 800ca58:	3308      	adds	r3, #8
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca60:	2100      	movs	r1, #0
 800ca62:	2201      	movs	r2, #1
 800ca64:	429a      	cmp	r2, r3
 800ca66:	db09      	blt.n	800ca7c <__s2b+0x30>
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7ff ff47 	bl	800c8fc <_Balloc>
 800ca6e:	b940      	cbnz	r0, 800ca82 <__s2b+0x36>
 800ca70:	4602      	mov	r2, r0
 800ca72:	4b19      	ldr	r3, [pc, #100]	@ (800cad8 <__s2b+0x8c>)
 800ca74:	4819      	ldr	r0, [pc, #100]	@ (800cadc <__s2b+0x90>)
 800ca76:	21d3      	movs	r1, #211	@ 0xd3
 800ca78:	f000 fcd6 	bl	800d428 <__assert_func>
 800ca7c:	0052      	lsls	r2, r2, #1
 800ca7e:	3101      	adds	r1, #1
 800ca80:	e7f0      	b.n	800ca64 <__s2b+0x18>
 800ca82:	9b08      	ldr	r3, [sp, #32]
 800ca84:	6143      	str	r3, [r0, #20]
 800ca86:	2d09      	cmp	r5, #9
 800ca88:	f04f 0301 	mov.w	r3, #1
 800ca8c:	6103      	str	r3, [r0, #16]
 800ca8e:	dd16      	ble.n	800cabe <__s2b+0x72>
 800ca90:	f104 0909 	add.w	r9, r4, #9
 800ca94:	46c8      	mov	r8, r9
 800ca96:	442c      	add	r4, r5
 800ca98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca9c:	4601      	mov	r1, r0
 800ca9e:	3b30      	subs	r3, #48	@ 0x30
 800caa0:	220a      	movs	r2, #10
 800caa2:	4630      	mov	r0, r6
 800caa4:	f7ff ff8c 	bl	800c9c0 <__multadd>
 800caa8:	45a0      	cmp	r8, r4
 800caaa:	d1f5      	bne.n	800ca98 <__s2b+0x4c>
 800caac:	f1a5 0408 	sub.w	r4, r5, #8
 800cab0:	444c      	add	r4, r9
 800cab2:	1b2d      	subs	r5, r5, r4
 800cab4:	1963      	adds	r3, r4, r5
 800cab6:	42bb      	cmp	r3, r7
 800cab8:	db04      	blt.n	800cac4 <__s2b+0x78>
 800caba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cabe:	340a      	adds	r4, #10
 800cac0:	2509      	movs	r5, #9
 800cac2:	e7f6      	b.n	800cab2 <__s2b+0x66>
 800cac4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cac8:	4601      	mov	r1, r0
 800caca:	3b30      	subs	r3, #48	@ 0x30
 800cacc:	220a      	movs	r2, #10
 800cace:	4630      	mov	r0, r6
 800cad0:	f7ff ff76 	bl	800c9c0 <__multadd>
 800cad4:	e7ee      	b.n	800cab4 <__s2b+0x68>
 800cad6:	bf00      	nop
 800cad8:	0800e6b7 	.word	0x0800e6b7
 800cadc:	0800e739 	.word	0x0800e739

0800cae0 <__hi0bits>:
 800cae0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cae4:	4603      	mov	r3, r0
 800cae6:	bf36      	itet	cc
 800cae8:	0403      	lslcc	r3, r0, #16
 800caea:	2000      	movcs	r0, #0
 800caec:	2010      	movcc	r0, #16
 800caee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800caf2:	bf3c      	itt	cc
 800caf4:	021b      	lslcc	r3, r3, #8
 800caf6:	3008      	addcc	r0, #8
 800caf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cafc:	bf3c      	itt	cc
 800cafe:	011b      	lslcc	r3, r3, #4
 800cb00:	3004      	addcc	r0, #4
 800cb02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb06:	bf3c      	itt	cc
 800cb08:	009b      	lslcc	r3, r3, #2
 800cb0a:	3002      	addcc	r0, #2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	db05      	blt.n	800cb1c <__hi0bits+0x3c>
 800cb10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cb14:	f100 0001 	add.w	r0, r0, #1
 800cb18:	bf08      	it	eq
 800cb1a:	2020      	moveq	r0, #32
 800cb1c:	4770      	bx	lr

0800cb1e <__lo0bits>:
 800cb1e:	6803      	ldr	r3, [r0, #0]
 800cb20:	4602      	mov	r2, r0
 800cb22:	f013 0007 	ands.w	r0, r3, #7
 800cb26:	d00b      	beq.n	800cb40 <__lo0bits+0x22>
 800cb28:	07d9      	lsls	r1, r3, #31
 800cb2a:	d421      	bmi.n	800cb70 <__lo0bits+0x52>
 800cb2c:	0798      	lsls	r0, r3, #30
 800cb2e:	bf49      	itett	mi
 800cb30:	085b      	lsrmi	r3, r3, #1
 800cb32:	089b      	lsrpl	r3, r3, #2
 800cb34:	2001      	movmi	r0, #1
 800cb36:	6013      	strmi	r3, [r2, #0]
 800cb38:	bf5c      	itt	pl
 800cb3a:	6013      	strpl	r3, [r2, #0]
 800cb3c:	2002      	movpl	r0, #2
 800cb3e:	4770      	bx	lr
 800cb40:	b299      	uxth	r1, r3
 800cb42:	b909      	cbnz	r1, 800cb48 <__lo0bits+0x2a>
 800cb44:	0c1b      	lsrs	r3, r3, #16
 800cb46:	2010      	movs	r0, #16
 800cb48:	b2d9      	uxtb	r1, r3
 800cb4a:	b909      	cbnz	r1, 800cb50 <__lo0bits+0x32>
 800cb4c:	3008      	adds	r0, #8
 800cb4e:	0a1b      	lsrs	r3, r3, #8
 800cb50:	0719      	lsls	r1, r3, #28
 800cb52:	bf04      	itt	eq
 800cb54:	091b      	lsreq	r3, r3, #4
 800cb56:	3004      	addeq	r0, #4
 800cb58:	0799      	lsls	r1, r3, #30
 800cb5a:	bf04      	itt	eq
 800cb5c:	089b      	lsreq	r3, r3, #2
 800cb5e:	3002      	addeq	r0, #2
 800cb60:	07d9      	lsls	r1, r3, #31
 800cb62:	d403      	bmi.n	800cb6c <__lo0bits+0x4e>
 800cb64:	085b      	lsrs	r3, r3, #1
 800cb66:	f100 0001 	add.w	r0, r0, #1
 800cb6a:	d003      	beq.n	800cb74 <__lo0bits+0x56>
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	4770      	bx	lr
 800cb70:	2000      	movs	r0, #0
 800cb72:	4770      	bx	lr
 800cb74:	2020      	movs	r0, #32
 800cb76:	4770      	bx	lr

0800cb78 <__i2b>:
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	f7ff febd 	bl	800c8fc <_Balloc>
 800cb82:	4602      	mov	r2, r0
 800cb84:	b928      	cbnz	r0, 800cb92 <__i2b+0x1a>
 800cb86:	4b05      	ldr	r3, [pc, #20]	@ (800cb9c <__i2b+0x24>)
 800cb88:	4805      	ldr	r0, [pc, #20]	@ (800cba0 <__i2b+0x28>)
 800cb8a:	f240 1145 	movw	r1, #325	@ 0x145
 800cb8e:	f000 fc4b 	bl	800d428 <__assert_func>
 800cb92:	2301      	movs	r3, #1
 800cb94:	6144      	str	r4, [r0, #20]
 800cb96:	6103      	str	r3, [r0, #16]
 800cb98:	bd10      	pop	{r4, pc}
 800cb9a:	bf00      	nop
 800cb9c:	0800e6b7 	.word	0x0800e6b7
 800cba0:	0800e739 	.word	0x0800e739

0800cba4 <__multiply>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	4617      	mov	r7, r2
 800cbaa:	690a      	ldr	r2, [r1, #16]
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	bfa8      	it	ge
 800cbb2:	463b      	movge	r3, r7
 800cbb4:	4689      	mov	r9, r1
 800cbb6:	bfa4      	itt	ge
 800cbb8:	460f      	movge	r7, r1
 800cbba:	4699      	movge	r9, r3
 800cbbc:	693d      	ldr	r5, [r7, #16]
 800cbbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	6879      	ldr	r1, [r7, #4]
 800cbc6:	eb05 060a 	add.w	r6, r5, sl
 800cbca:	42b3      	cmp	r3, r6
 800cbcc:	b085      	sub	sp, #20
 800cbce:	bfb8      	it	lt
 800cbd0:	3101      	addlt	r1, #1
 800cbd2:	f7ff fe93 	bl	800c8fc <_Balloc>
 800cbd6:	b930      	cbnz	r0, 800cbe6 <__multiply+0x42>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	4b41      	ldr	r3, [pc, #260]	@ (800cce0 <__multiply+0x13c>)
 800cbdc:	4841      	ldr	r0, [pc, #260]	@ (800cce4 <__multiply+0x140>)
 800cbde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cbe2:	f000 fc21 	bl	800d428 <__assert_func>
 800cbe6:	f100 0414 	add.w	r4, r0, #20
 800cbea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cbee:	4623      	mov	r3, r4
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	4573      	cmp	r3, lr
 800cbf4:	d320      	bcc.n	800cc38 <__multiply+0x94>
 800cbf6:	f107 0814 	add.w	r8, r7, #20
 800cbfa:	f109 0114 	add.w	r1, r9, #20
 800cbfe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cc02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cc06:	9302      	str	r3, [sp, #8]
 800cc08:	1beb      	subs	r3, r5, r7
 800cc0a:	3b15      	subs	r3, #21
 800cc0c:	f023 0303 	bic.w	r3, r3, #3
 800cc10:	3304      	adds	r3, #4
 800cc12:	3715      	adds	r7, #21
 800cc14:	42bd      	cmp	r5, r7
 800cc16:	bf38      	it	cc
 800cc18:	2304      	movcc	r3, #4
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	9b02      	ldr	r3, [sp, #8]
 800cc1e:	9103      	str	r1, [sp, #12]
 800cc20:	428b      	cmp	r3, r1
 800cc22:	d80c      	bhi.n	800cc3e <__multiply+0x9a>
 800cc24:	2e00      	cmp	r6, #0
 800cc26:	dd03      	ble.n	800cc30 <__multiply+0x8c>
 800cc28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d055      	beq.n	800ccdc <__multiply+0x138>
 800cc30:	6106      	str	r6, [r0, #16]
 800cc32:	b005      	add	sp, #20
 800cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc38:	f843 2b04 	str.w	r2, [r3], #4
 800cc3c:	e7d9      	b.n	800cbf2 <__multiply+0x4e>
 800cc3e:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc42:	f1ba 0f00 	cmp.w	sl, #0
 800cc46:	d01f      	beq.n	800cc88 <__multiply+0xe4>
 800cc48:	46c4      	mov	ip, r8
 800cc4a:	46a1      	mov	r9, r4
 800cc4c:	2700      	movs	r7, #0
 800cc4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc52:	f8d9 3000 	ldr.w	r3, [r9]
 800cc56:	fa1f fb82 	uxth.w	fp, r2
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc60:	443b      	add	r3, r7
 800cc62:	f8d9 7000 	ldr.w	r7, [r9]
 800cc66:	0c12      	lsrs	r2, r2, #16
 800cc68:	0c3f      	lsrs	r7, r7, #16
 800cc6a:	fb0a 7202 	mla	r2, sl, r2, r7
 800cc6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc78:	4565      	cmp	r5, ip
 800cc7a:	f849 3b04 	str.w	r3, [r9], #4
 800cc7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cc82:	d8e4      	bhi.n	800cc4e <__multiply+0xaa>
 800cc84:	9b01      	ldr	r3, [sp, #4]
 800cc86:	50e7      	str	r7, [r4, r3]
 800cc88:	9b03      	ldr	r3, [sp, #12]
 800cc8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc8e:	3104      	adds	r1, #4
 800cc90:	f1b9 0f00 	cmp.w	r9, #0
 800cc94:	d020      	beq.n	800ccd8 <__multiply+0x134>
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	4647      	mov	r7, r8
 800cc9a:	46a4      	mov	ip, r4
 800cc9c:	f04f 0a00 	mov.w	sl, #0
 800cca0:	f8b7 b000 	ldrh.w	fp, [r7]
 800cca4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cca8:	fb09 220b 	mla	r2, r9, fp, r2
 800ccac:	4452      	add	r2, sl
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccb4:	f84c 3b04 	str.w	r3, [ip], #4
 800ccb8:	f857 3b04 	ldr.w	r3, [r7], #4
 800ccbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccc0:	f8bc 3000 	ldrh.w	r3, [ip]
 800ccc4:	fb09 330a 	mla	r3, r9, sl, r3
 800ccc8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cccc:	42bd      	cmp	r5, r7
 800ccce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccd2:	d8e5      	bhi.n	800cca0 <__multiply+0xfc>
 800ccd4:	9a01      	ldr	r2, [sp, #4]
 800ccd6:	50a3      	str	r3, [r4, r2]
 800ccd8:	3404      	adds	r4, #4
 800ccda:	e79f      	b.n	800cc1c <__multiply+0x78>
 800ccdc:	3e01      	subs	r6, #1
 800ccde:	e7a1      	b.n	800cc24 <__multiply+0x80>
 800cce0:	0800e6b7 	.word	0x0800e6b7
 800cce4:	0800e739 	.word	0x0800e739

0800cce8 <__pow5mult>:
 800cce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccec:	4615      	mov	r5, r2
 800ccee:	f012 0203 	ands.w	r2, r2, #3
 800ccf2:	4607      	mov	r7, r0
 800ccf4:	460e      	mov	r6, r1
 800ccf6:	d007      	beq.n	800cd08 <__pow5mult+0x20>
 800ccf8:	4c25      	ldr	r4, [pc, #148]	@ (800cd90 <__pow5mult+0xa8>)
 800ccfa:	3a01      	subs	r2, #1
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd02:	f7ff fe5d 	bl	800c9c0 <__multadd>
 800cd06:	4606      	mov	r6, r0
 800cd08:	10ad      	asrs	r5, r5, #2
 800cd0a:	d03d      	beq.n	800cd88 <__pow5mult+0xa0>
 800cd0c:	69fc      	ldr	r4, [r7, #28]
 800cd0e:	b97c      	cbnz	r4, 800cd30 <__pow5mult+0x48>
 800cd10:	2010      	movs	r0, #16
 800cd12:	f7ff fc7f 	bl	800c614 <malloc>
 800cd16:	4602      	mov	r2, r0
 800cd18:	61f8      	str	r0, [r7, #28]
 800cd1a:	b928      	cbnz	r0, 800cd28 <__pow5mult+0x40>
 800cd1c:	4b1d      	ldr	r3, [pc, #116]	@ (800cd94 <__pow5mult+0xac>)
 800cd1e:	481e      	ldr	r0, [pc, #120]	@ (800cd98 <__pow5mult+0xb0>)
 800cd20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cd24:	f000 fb80 	bl	800d428 <__assert_func>
 800cd28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd2c:	6004      	str	r4, [r0, #0]
 800cd2e:	60c4      	str	r4, [r0, #12]
 800cd30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd38:	b94c      	cbnz	r4, 800cd4e <__pow5mult+0x66>
 800cd3a:	f240 2171 	movw	r1, #625	@ 0x271
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7ff ff1a 	bl	800cb78 <__i2b>
 800cd44:	2300      	movs	r3, #0
 800cd46:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	6003      	str	r3, [r0, #0]
 800cd4e:	f04f 0900 	mov.w	r9, #0
 800cd52:	07eb      	lsls	r3, r5, #31
 800cd54:	d50a      	bpl.n	800cd6c <__pow5mult+0x84>
 800cd56:	4631      	mov	r1, r6
 800cd58:	4622      	mov	r2, r4
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	f7ff ff22 	bl	800cba4 <__multiply>
 800cd60:	4631      	mov	r1, r6
 800cd62:	4680      	mov	r8, r0
 800cd64:	4638      	mov	r0, r7
 800cd66:	f7ff fe09 	bl	800c97c <_Bfree>
 800cd6a:	4646      	mov	r6, r8
 800cd6c:	106d      	asrs	r5, r5, #1
 800cd6e:	d00b      	beq.n	800cd88 <__pow5mult+0xa0>
 800cd70:	6820      	ldr	r0, [r4, #0]
 800cd72:	b938      	cbnz	r0, 800cd84 <__pow5mult+0x9c>
 800cd74:	4622      	mov	r2, r4
 800cd76:	4621      	mov	r1, r4
 800cd78:	4638      	mov	r0, r7
 800cd7a:	f7ff ff13 	bl	800cba4 <__multiply>
 800cd7e:	6020      	str	r0, [r4, #0]
 800cd80:	f8c0 9000 	str.w	r9, [r0]
 800cd84:	4604      	mov	r4, r0
 800cd86:	e7e4      	b.n	800cd52 <__pow5mult+0x6a>
 800cd88:	4630      	mov	r0, r6
 800cd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd8e:	bf00      	nop
 800cd90:	0800e924 	.word	0x0800e924
 800cd94:	0800e648 	.word	0x0800e648
 800cd98:	0800e739 	.word	0x0800e739

0800cd9c <__lshift>:
 800cd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda0:	460c      	mov	r4, r1
 800cda2:	6849      	ldr	r1, [r1, #4]
 800cda4:	6923      	ldr	r3, [r4, #16]
 800cda6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdaa:	68a3      	ldr	r3, [r4, #8]
 800cdac:	4607      	mov	r7, r0
 800cdae:	4691      	mov	r9, r2
 800cdb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdb4:	f108 0601 	add.w	r6, r8, #1
 800cdb8:	42b3      	cmp	r3, r6
 800cdba:	db0b      	blt.n	800cdd4 <__lshift+0x38>
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	f7ff fd9d 	bl	800c8fc <_Balloc>
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	b948      	cbnz	r0, 800cdda <__lshift+0x3e>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	4b28      	ldr	r3, [pc, #160]	@ (800ce6c <__lshift+0xd0>)
 800cdca:	4829      	ldr	r0, [pc, #164]	@ (800ce70 <__lshift+0xd4>)
 800cdcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cdd0:	f000 fb2a 	bl	800d428 <__assert_func>
 800cdd4:	3101      	adds	r1, #1
 800cdd6:	005b      	lsls	r3, r3, #1
 800cdd8:	e7ee      	b.n	800cdb8 <__lshift+0x1c>
 800cdda:	2300      	movs	r3, #0
 800cddc:	f100 0114 	add.w	r1, r0, #20
 800cde0:	f100 0210 	add.w	r2, r0, #16
 800cde4:	4618      	mov	r0, r3
 800cde6:	4553      	cmp	r3, sl
 800cde8:	db33      	blt.n	800ce52 <__lshift+0xb6>
 800cdea:	6920      	ldr	r0, [r4, #16]
 800cdec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdf0:	f104 0314 	add.w	r3, r4, #20
 800cdf4:	f019 091f 	ands.w	r9, r9, #31
 800cdf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce00:	d02b      	beq.n	800ce5a <__lshift+0xbe>
 800ce02:	f1c9 0e20 	rsb	lr, r9, #32
 800ce06:	468a      	mov	sl, r1
 800ce08:	2200      	movs	r2, #0
 800ce0a:	6818      	ldr	r0, [r3, #0]
 800ce0c:	fa00 f009 	lsl.w	r0, r0, r9
 800ce10:	4310      	orrs	r0, r2
 800ce12:	f84a 0b04 	str.w	r0, [sl], #4
 800ce16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce1a:	459c      	cmp	ip, r3
 800ce1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce20:	d8f3      	bhi.n	800ce0a <__lshift+0x6e>
 800ce22:	ebac 0304 	sub.w	r3, ip, r4
 800ce26:	3b15      	subs	r3, #21
 800ce28:	f023 0303 	bic.w	r3, r3, #3
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	f104 0015 	add.w	r0, r4, #21
 800ce32:	4560      	cmp	r0, ip
 800ce34:	bf88      	it	hi
 800ce36:	2304      	movhi	r3, #4
 800ce38:	50ca      	str	r2, [r1, r3]
 800ce3a:	b10a      	cbz	r2, 800ce40 <__lshift+0xa4>
 800ce3c:	f108 0602 	add.w	r6, r8, #2
 800ce40:	3e01      	subs	r6, #1
 800ce42:	4638      	mov	r0, r7
 800ce44:	612e      	str	r6, [r5, #16]
 800ce46:	4621      	mov	r1, r4
 800ce48:	f7ff fd98 	bl	800c97c <_Bfree>
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce56:	3301      	adds	r3, #1
 800ce58:	e7c5      	b.n	800cde6 <__lshift+0x4a>
 800ce5a:	3904      	subs	r1, #4
 800ce5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce64:	459c      	cmp	ip, r3
 800ce66:	d8f9      	bhi.n	800ce5c <__lshift+0xc0>
 800ce68:	e7ea      	b.n	800ce40 <__lshift+0xa4>
 800ce6a:	bf00      	nop
 800ce6c:	0800e6b7 	.word	0x0800e6b7
 800ce70:	0800e739 	.word	0x0800e739

0800ce74 <__mcmp>:
 800ce74:	690a      	ldr	r2, [r1, #16]
 800ce76:	4603      	mov	r3, r0
 800ce78:	6900      	ldr	r0, [r0, #16]
 800ce7a:	1a80      	subs	r0, r0, r2
 800ce7c:	b530      	push	{r4, r5, lr}
 800ce7e:	d10e      	bne.n	800ce9e <__mcmp+0x2a>
 800ce80:	3314      	adds	r3, #20
 800ce82:	3114      	adds	r1, #20
 800ce84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce94:	4295      	cmp	r5, r2
 800ce96:	d003      	beq.n	800cea0 <__mcmp+0x2c>
 800ce98:	d205      	bcs.n	800cea6 <__mcmp+0x32>
 800ce9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce9e:	bd30      	pop	{r4, r5, pc}
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	d3f3      	bcc.n	800ce8c <__mcmp+0x18>
 800cea4:	e7fb      	b.n	800ce9e <__mcmp+0x2a>
 800cea6:	2001      	movs	r0, #1
 800cea8:	e7f9      	b.n	800ce9e <__mcmp+0x2a>
	...

0800ceac <__mdiff>:
 800ceac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	4689      	mov	r9, r1
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4648      	mov	r0, r9
 800ceb8:	4614      	mov	r4, r2
 800ceba:	f7ff ffdb 	bl	800ce74 <__mcmp>
 800cebe:	1e05      	subs	r5, r0, #0
 800cec0:	d112      	bne.n	800cee8 <__mdiff+0x3c>
 800cec2:	4629      	mov	r1, r5
 800cec4:	4630      	mov	r0, r6
 800cec6:	f7ff fd19 	bl	800c8fc <_Balloc>
 800ceca:	4602      	mov	r2, r0
 800cecc:	b928      	cbnz	r0, 800ceda <__mdiff+0x2e>
 800cece:	4b3f      	ldr	r3, [pc, #252]	@ (800cfcc <__mdiff+0x120>)
 800ced0:	f240 2137 	movw	r1, #567	@ 0x237
 800ced4:	483e      	ldr	r0, [pc, #248]	@ (800cfd0 <__mdiff+0x124>)
 800ced6:	f000 faa7 	bl	800d428 <__assert_func>
 800ceda:	2301      	movs	r3, #1
 800cedc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cee0:	4610      	mov	r0, r2
 800cee2:	b003      	add	sp, #12
 800cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee8:	bfbc      	itt	lt
 800ceea:	464b      	movlt	r3, r9
 800ceec:	46a1      	movlt	r9, r4
 800ceee:	4630      	mov	r0, r6
 800cef0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cef4:	bfba      	itte	lt
 800cef6:	461c      	movlt	r4, r3
 800cef8:	2501      	movlt	r5, #1
 800cefa:	2500      	movge	r5, #0
 800cefc:	f7ff fcfe 	bl	800c8fc <_Balloc>
 800cf00:	4602      	mov	r2, r0
 800cf02:	b918      	cbnz	r0, 800cf0c <__mdiff+0x60>
 800cf04:	4b31      	ldr	r3, [pc, #196]	@ (800cfcc <__mdiff+0x120>)
 800cf06:	f240 2145 	movw	r1, #581	@ 0x245
 800cf0a:	e7e3      	b.n	800ced4 <__mdiff+0x28>
 800cf0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf10:	6926      	ldr	r6, [r4, #16]
 800cf12:	60c5      	str	r5, [r0, #12]
 800cf14:	f109 0310 	add.w	r3, r9, #16
 800cf18:	f109 0514 	add.w	r5, r9, #20
 800cf1c:	f104 0e14 	add.w	lr, r4, #20
 800cf20:	f100 0b14 	add.w	fp, r0, #20
 800cf24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	46d9      	mov	r9, fp
 800cf30:	f04f 0c00 	mov.w	ip, #0
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	fa1f f38a 	uxth.w	r3, sl
 800cf44:	4619      	mov	r1, r3
 800cf46:	b283      	uxth	r3, r0
 800cf48:	1acb      	subs	r3, r1, r3
 800cf4a:	0c00      	lsrs	r0, r0, #16
 800cf4c:	4463      	add	r3, ip
 800cf4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf5c:	4576      	cmp	r6, lr
 800cf5e:	f849 3b04 	str.w	r3, [r9], #4
 800cf62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf66:	d8e5      	bhi.n	800cf34 <__mdiff+0x88>
 800cf68:	1b33      	subs	r3, r6, r4
 800cf6a:	3b15      	subs	r3, #21
 800cf6c:	f023 0303 	bic.w	r3, r3, #3
 800cf70:	3415      	adds	r4, #21
 800cf72:	3304      	adds	r3, #4
 800cf74:	42a6      	cmp	r6, r4
 800cf76:	bf38      	it	cc
 800cf78:	2304      	movcc	r3, #4
 800cf7a:	441d      	add	r5, r3
 800cf7c:	445b      	add	r3, fp
 800cf7e:	461e      	mov	r6, r3
 800cf80:	462c      	mov	r4, r5
 800cf82:	4544      	cmp	r4, r8
 800cf84:	d30e      	bcc.n	800cfa4 <__mdiff+0xf8>
 800cf86:	f108 0103 	add.w	r1, r8, #3
 800cf8a:	1b49      	subs	r1, r1, r5
 800cf8c:	f021 0103 	bic.w	r1, r1, #3
 800cf90:	3d03      	subs	r5, #3
 800cf92:	45a8      	cmp	r8, r5
 800cf94:	bf38      	it	cc
 800cf96:	2100      	movcc	r1, #0
 800cf98:	440b      	add	r3, r1
 800cf9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf9e:	b191      	cbz	r1, 800cfc6 <__mdiff+0x11a>
 800cfa0:	6117      	str	r7, [r2, #16]
 800cfa2:	e79d      	b.n	800cee0 <__mdiff+0x34>
 800cfa4:	f854 1b04 	ldr.w	r1, [r4], #4
 800cfa8:	46e6      	mov	lr, ip
 800cfaa:	0c08      	lsrs	r0, r1, #16
 800cfac:	fa1c fc81 	uxtah	ip, ip, r1
 800cfb0:	4471      	add	r1, lr
 800cfb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cfb6:	b289      	uxth	r1, r1
 800cfb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cfbc:	f846 1b04 	str.w	r1, [r6], #4
 800cfc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cfc4:	e7dd      	b.n	800cf82 <__mdiff+0xd6>
 800cfc6:	3f01      	subs	r7, #1
 800cfc8:	e7e7      	b.n	800cf9a <__mdiff+0xee>
 800cfca:	bf00      	nop
 800cfcc:	0800e6b7 	.word	0x0800e6b7
 800cfd0:	0800e739 	.word	0x0800e739

0800cfd4 <__ulp>:
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	ed8d 0b00 	vstr	d0, [sp]
 800cfda:	9a01      	ldr	r2, [sp, #4]
 800cfdc:	4b0f      	ldr	r3, [pc, #60]	@ (800d01c <__ulp+0x48>)
 800cfde:	4013      	ands	r3, r2
 800cfe0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dc08      	bgt.n	800cffa <__ulp+0x26>
 800cfe8:	425b      	negs	r3, r3
 800cfea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cfee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cff2:	da04      	bge.n	800cffe <__ulp+0x2a>
 800cff4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cff8:	4113      	asrs	r3, r2
 800cffa:	2200      	movs	r2, #0
 800cffc:	e008      	b.n	800d010 <__ulp+0x3c>
 800cffe:	f1a2 0314 	sub.w	r3, r2, #20
 800d002:	2b1e      	cmp	r3, #30
 800d004:	bfda      	itte	le
 800d006:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d00a:	40da      	lsrle	r2, r3
 800d00c:	2201      	movgt	r2, #1
 800d00e:	2300      	movs	r3, #0
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	ec41 0b10 	vmov	d0, r0, r1
 800d018:	b002      	add	sp, #8
 800d01a:	4770      	bx	lr
 800d01c:	7ff00000 	.word	0x7ff00000

0800d020 <__b2d>:
 800d020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d024:	6906      	ldr	r6, [r0, #16]
 800d026:	f100 0814 	add.w	r8, r0, #20
 800d02a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d02e:	1f37      	subs	r7, r6, #4
 800d030:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d034:	4610      	mov	r0, r2
 800d036:	f7ff fd53 	bl	800cae0 <__hi0bits>
 800d03a:	f1c0 0320 	rsb	r3, r0, #32
 800d03e:	280a      	cmp	r0, #10
 800d040:	600b      	str	r3, [r1, #0]
 800d042:	491b      	ldr	r1, [pc, #108]	@ (800d0b0 <__b2d+0x90>)
 800d044:	dc15      	bgt.n	800d072 <__b2d+0x52>
 800d046:	f1c0 0c0b 	rsb	ip, r0, #11
 800d04a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d04e:	45b8      	cmp	r8, r7
 800d050:	ea43 0501 	orr.w	r5, r3, r1
 800d054:	bf34      	ite	cc
 800d056:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d05a:	2300      	movcs	r3, #0
 800d05c:	3015      	adds	r0, #21
 800d05e:	fa02 f000 	lsl.w	r0, r2, r0
 800d062:	fa23 f30c 	lsr.w	r3, r3, ip
 800d066:	4303      	orrs	r3, r0
 800d068:	461c      	mov	r4, r3
 800d06a:	ec45 4b10 	vmov	d0, r4, r5
 800d06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d072:	45b8      	cmp	r8, r7
 800d074:	bf3a      	itte	cc
 800d076:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d07a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d07e:	2300      	movcs	r3, #0
 800d080:	380b      	subs	r0, #11
 800d082:	d012      	beq.n	800d0aa <__b2d+0x8a>
 800d084:	f1c0 0120 	rsb	r1, r0, #32
 800d088:	fa23 f401 	lsr.w	r4, r3, r1
 800d08c:	4082      	lsls	r2, r0
 800d08e:	4322      	orrs	r2, r4
 800d090:	4547      	cmp	r7, r8
 800d092:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d096:	bf8c      	ite	hi
 800d098:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d09c:	2200      	movls	r2, #0
 800d09e:	4083      	lsls	r3, r0
 800d0a0:	40ca      	lsrs	r2, r1
 800d0a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	e7de      	b.n	800d068 <__b2d+0x48>
 800d0aa:	ea42 0501 	orr.w	r5, r2, r1
 800d0ae:	e7db      	b.n	800d068 <__b2d+0x48>
 800d0b0:	3ff00000 	.word	0x3ff00000

0800d0b4 <__d2b>:
 800d0b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0b8:	460f      	mov	r7, r1
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	ec59 8b10 	vmov	r8, r9, d0
 800d0c0:	4616      	mov	r6, r2
 800d0c2:	f7ff fc1b 	bl	800c8fc <_Balloc>
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	b930      	cbnz	r0, 800d0d8 <__d2b+0x24>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	4b23      	ldr	r3, [pc, #140]	@ (800d15c <__d2b+0xa8>)
 800d0ce:	4824      	ldr	r0, [pc, #144]	@ (800d160 <__d2b+0xac>)
 800d0d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0d4:	f000 f9a8 	bl	800d428 <__assert_func>
 800d0d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0e0:	b10d      	cbz	r5, 800d0e6 <__d2b+0x32>
 800d0e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d0ec:	d023      	beq.n	800d136 <__d2b+0x82>
 800d0ee:	4668      	mov	r0, sp
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	f7ff fd14 	bl	800cb1e <__lo0bits>
 800d0f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0fa:	b1d0      	cbz	r0, 800d132 <__d2b+0x7e>
 800d0fc:	f1c0 0320 	rsb	r3, r0, #32
 800d100:	fa02 f303 	lsl.w	r3, r2, r3
 800d104:	430b      	orrs	r3, r1
 800d106:	40c2      	lsrs	r2, r0
 800d108:	6163      	str	r3, [r4, #20]
 800d10a:	9201      	str	r2, [sp, #4]
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	61a3      	str	r3, [r4, #24]
 800d110:	2b00      	cmp	r3, #0
 800d112:	bf0c      	ite	eq
 800d114:	2201      	moveq	r2, #1
 800d116:	2202      	movne	r2, #2
 800d118:	6122      	str	r2, [r4, #16]
 800d11a:	b1a5      	cbz	r5, 800d146 <__d2b+0x92>
 800d11c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d120:	4405      	add	r5, r0
 800d122:	603d      	str	r5, [r7, #0]
 800d124:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d128:	6030      	str	r0, [r6, #0]
 800d12a:	4620      	mov	r0, r4
 800d12c:	b003      	add	sp, #12
 800d12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d132:	6161      	str	r1, [r4, #20]
 800d134:	e7ea      	b.n	800d10c <__d2b+0x58>
 800d136:	a801      	add	r0, sp, #4
 800d138:	f7ff fcf1 	bl	800cb1e <__lo0bits>
 800d13c:	9b01      	ldr	r3, [sp, #4]
 800d13e:	6163      	str	r3, [r4, #20]
 800d140:	3020      	adds	r0, #32
 800d142:	2201      	movs	r2, #1
 800d144:	e7e8      	b.n	800d118 <__d2b+0x64>
 800d146:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d14a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d14e:	6038      	str	r0, [r7, #0]
 800d150:	6918      	ldr	r0, [r3, #16]
 800d152:	f7ff fcc5 	bl	800cae0 <__hi0bits>
 800d156:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d15a:	e7e5      	b.n	800d128 <__d2b+0x74>
 800d15c:	0800e6b7 	.word	0x0800e6b7
 800d160:	0800e739 	.word	0x0800e739

0800d164 <__ratio>:
 800d164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d168:	4688      	mov	r8, r1
 800d16a:	4669      	mov	r1, sp
 800d16c:	4681      	mov	r9, r0
 800d16e:	f7ff ff57 	bl	800d020 <__b2d>
 800d172:	a901      	add	r1, sp, #4
 800d174:	4640      	mov	r0, r8
 800d176:	ec55 4b10 	vmov	r4, r5, d0
 800d17a:	f7ff ff51 	bl	800d020 <__b2d>
 800d17e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d182:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d186:	1ad2      	subs	r2, r2, r3
 800d188:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d18c:	1a5b      	subs	r3, r3, r1
 800d18e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d192:	ec57 6b10 	vmov	r6, r7, d0
 800d196:	2b00      	cmp	r3, #0
 800d198:	bfd6      	itet	le
 800d19a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d19e:	462a      	movgt	r2, r5
 800d1a0:	463a      	movle	r2, r7
 800d1a2:	46ab      	mov	fp, r5
 800d1a4:	46a2      	mov	sl, r4
 800d1a6:	bfce      	itee	gt
 800d1a8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d1ac:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d1b0:	ee00 3a90 	vmovle	s1, r3
 800d1b4:	ec4b ab17 	vmov	d7, sl, fp
 800d1b8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d1bc:	b003      	add	sp, #12
 800d1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1c2 <__copybits>:
 800d1c2:	3901      	subs	r1, #1
 800d1c4:	b570      	push	{r4, r5, r6, lr}
 800d1c6:	1149      	asrs	r1, r1, #5
 800d1c8:	6914      	ldr	r4, [r2, #16]
 800d1ca:	3101      	adds	r1, #1
 800d1cc:	f102 0314 	add.w	r3, r2, #20
 800d1d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1d8:	1f05      	subs	r5, r0, #4
 800d1da:	42a3      	cmp	r3, r4
 800d1dc:	d30c      	bcc.n	800d1f8 <__copybits+0x36>
 800d1de:	1aa3      	subs	r3, r4, r2
 800d1e0:	3b11      	subs	r3, #17
 800d1e2:	f023 0303 	bic.w	r3, r3, #3
 800d1e6:	3211      	adds	r2, #17
 800d1e8:	42a2      	cmp	r2, r4
 800d1ea:	bf88      	it	hi
 800d1ec:	2300      	movhi	r3, #0
 800d1ee:	4418      	add	r0, r3
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4288      	cmp	r0, r1
 800d1f4:	d305      	bcc.n	800d202 <__copybits+0x40>
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800d200:	e7eb      	b.n	800d1da <__copybits+0x18>
 800d202:	f840 3b04 	str.w	r3, [r0], #4
 800d206:	e7f4      	b.n	800d1f2 <__copybits+0x30>

0800d208 <__any_on>:
 800d208:	f100 0214 	add.w	r2, r0, #20
 800d20c:	6900      	ldr	r0, [r0, #16]
 800d20e:	114b      	asrs	r3, r1, #5
 800d210:	4298      	cmp	r0, r3
 800d212:	b510      	push	{r4, lr}
 800d214:	db11      	blt.n	800d23a <__any_on+0x32>
 800d216:	dd0a      	ble.n	800d22e <__any_on+0x26>
 800d218:	f011 011f 	ands.w	r1, r1, #31
 800d21c:	d007      	beq.n	800d22e <__any_on+0x26>
 800d21e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d222:	fa24 f001 	lsr.w	r0, r4, r1
 800d226:	fa00 f101 	lsl.w	r1, r0, r1
 800d22a:	428c      	cmp	r4, r1
 800d22c:	d10b      	bne.n	800d246 <__any_on+0x3e>
 800d22e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d232:	4293      	cmp	r3, r2
 800d234:	d803      	bhi.n	800d23e <__any_on+0x36>
 800d236:	2000      	movs	r0, #0
 800d238:	bd10      	pop	{r4, pc}
 800d23a:	4603      	mov	r3, r0
 800d23c:	e7f7      	b.n	800d22e <__any_on+0x26>
 800d23e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d242:	2900      	cmp	r1, #0
 800d244:	d0f5      	beq.n	800d232 <__any_on+0x2a>
 800d246:	2001      	movs	r0, #1
 800d248:	e7f6      	b.n	800d238 <__any_on+0x30>

0800d24a <__sread>:
 800d24a:	b510      	push	{r4, lr}
 800d24c:	460c      	mov	r4, r1
 800d24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d252:	f000 f8a5 	bl	800d3a0 <_read_r>
 800d256:	2800      	cmp	r0, #0
 800d258:	bfab      	itete	ge
 800d25a:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d25c:	89a3      	ldrhlt	r3, [r4, #12]
 800d25e:	181b      	addge	r3, r3, r0
 800d260:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d264:	bfac      	ite	ge
 800d266:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d268:	81a3      	strhlt	r3, [r4, #12]
 800d26a:	bd10      	pop	{r4, pc}

0800d26c <__swrite>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	461f      	mov	r7, r3
 800d272:	898b      	ldrh	r3, [r1, #12]
 800d274:	05db      	lsls	r3, r3, #23
 800d276:	4605      	mov	r5, r0
 800d278:	460c      	mov	r4, r1
 800d27a:	4616      	mov	r6, r2
 800d27c:	d505      	bpl.n	800d28a <__swrite+0x1e>
 800d27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d282:	2302      	movs	r3, #2
 800d284:	2200      	movs	r2, #0
 800d286:	f000 f879 	bl	800d37c <_lseek_r>
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d294:	81a3      	strh	r3, [r4, #12]
 800d296:	4632      	mov	r2, r6
 800d298:	463b      	mov	r3, r7
 800d29a:	4628      	mov	r0, r5
 800d29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a0:	f000 b8a0 	b.w	800d3e4 <_write_r>

0800d2a4 <__sseek>:
 800d2a4:	b510      	push	{r4, lr}
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ac:	f000 f866 	bl	800d37c <_lseek_r>
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	bf15      	itete	ne
 800d2b6:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d2b8:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d2bc:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d2c0:	81a3      	strheq	r3, [r4, #12]
 800d2c2:	bf18      	it	ne
 800d2c4:	81a3      	strhne	r3, [r4, #12]
 800d2c6:	bd10      	pop	{r4, pc}

0800d2c8 <__sclose>:
 800d2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2cc:	f000 b89c 	b.w	800d408 <_close_r>

0800d2d0 <_realloc_r>:
 800d2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d4:	4607      	mov	r7, r0
 800d2d6:	4614      	mov	r4, r2
 800d2d8:	460d      	mov	r5, r1
 800d2da:	b921      	cbnz	r1, 800d2e6 <_realloc_r+0x16>
 800d2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e0:	4611      	mov	r1, r2
 800d2e2:	f7ff b9c1 	b.w	800c668 <_malloc_r>
 800d2e6:	b92a      	cbnz	r2, 800d2f4 <_realloc_r+0x24>
 800d2e8:	f000 f8d0 	bl	800d48c <_free_r>
 800d2ec:	4625      	mov	r5, r4
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2f4:	f000 f914 	bl	800d520 <_malloc_usable_size_r>
 800d2f8:	4284      	cmp	r4, r0
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	d802      	bhi.n	800d304 <_realloc_r+0x34>
 800d2fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d302:	d8f4      	bhi.n	800d2ee <_realloc_r+0x1e>
 800d304:	4621      	mov	r1, r4
 800d306:	4638      	mov	r0, r7
 800d308:	f7ff f9ae 	bl	800c668 <_malloc_r>
 800d30c:	4680      	mov	r8, r0
 800d30e:	b908      	cbnz	r0, 800d314 <_realloc_r+0x44>
 800d310:	4645      	mov	r5, r8
 800d312:	e7ec      	b.n	800d2ee <_realloc_r+0x1e>
 800d314:	42b4      	cmp	r4, r6
 800d316:	4622      	mov	r2, r4
 800d318:	4629      	mov	r1, r5
 800d31a:	bf28      	it	cs
 800d31c:	4632      	movcs	r2, r6
 800d31e:	f7fd fee5 	bl	800b0ec <memcpy>
 800d322:	4629      	mov	r1, r5
 800d324:	4638      	mov	r0, r7
 800d326:	f000 f8b1 	bl	800d48c <_free_r>
 800d32a:	e7f1      	b.n	800d310 <_realloc_r+0x40>

0800d32c <__ascii_wctomb>:
 800d32c:	4603      	mov	r3, r0
 800d32e:	4608      	mov	r0, r1
 800d330:	b141      	cbz	r1, 800d344 <__ascii_wctomb+0x18>
 800d332:	2aff      	cmp	r2, #255	@ 0xff
 800d334:	d904      	bls.n	800d340 <__ascii_wctomb+0x14>
 800d336:	228a      	movs	r2, #138	@ 0x8a
 800d338:	601a      	str	r2, [r3, #0]
 800d33a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d33e:	4770      	bx	lr
 800d340:	700a      	strb	r2, [r1, #0]
 800d342:	2001      	movs	r0, #1
 800d344:	4770      	bx	lr

0800d346 <memmove>:
 800d346:	4288      	cmp	r0, r1
 800d348:	b510      	push	{r4, lr}
 800d34a:	eb01 0402 	add.w	r4, r1, r2
 800d34e:	d902      	bls.n	800d356 <memmove+0x10>
 800d350:	4284      	cmp	r4, r0
 800d352:	4623      	mov	r3, r4
 800d354:	d807      	bhi.n	800d366 <memmove+0x20>
 800d356:	1e43      	subs	r3, r0, #1
 800d358:	42a1      	cmp	r1, r4
 800d35a:	d008      	beq.n	800d36e <memmove+0x28>
 800d35c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d360:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d364:	e7f8      	b.n	800d358 <memmove+0x12>
 800d366:	4402      	add	r2, r0
 800d368:	4601      	mov	r1, r0
 800d36a:	428a      	cmp	r2, r1
 800d36c:	d100      	bne.n	800d370 <memmove+0x2a>
 800d36e:	bd10      	pop	{r4, pc}
 800d370:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d374:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d378:	e7f7      	b.n	800d36a <memmove+0x24>
	...

0800d37c <_lseek_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d07      	ldr	r5, [pc, #28]	@ (800d39c <_lseek_r+0x20>)
 800d380:	4604      	mov	r4, r0
 800d382:	4608      	mov	r0, r1
 800d384:	4611      	mov	r1, r2
 800d386:	2200      	movs	r2, #0
 800d388:	602a      	str	r2, [r5, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	f7f5 fb91 	bl	8002ab2 <_lseek>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d102      	bne.n	800d39a <_lseek_r+0x1e>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	b103      	cbz	r3, 800d39a <_lseek_r+0x1e>
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	bd38      	pop	{r3, r4, r5, pc}
 800d39c:	240006b0 	.word	0x240006b0

0800d3a0 <_read_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d07      	ldr	r5, [pc, #28]	@ (800d3c0 <_read_r+0x20>)
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	602a      	str	r2, [r5, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	f7f5 fb3b 	bl	8002a2a <_read>
 800d3b4:	1c43      	adds	r3, r0, #1
 800d3b6:	d102      	bne.n	800d3be <_read_r+0x1e>
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	b103      	cbz	r3, 800d3be <_read_r+0x1e>
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	240006b0 	.word	0x240006b0

0800d3c4 <_sbrk_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4d06      	ldr	r5, [pc, #24]	@ (800d3e0 <_sbrk_r+0x1c>)
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	602b      	str	r3, [r5, #0]
 800d3d0:	f7f5 fb7c 	bl	8002acc <_sbrk>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_sbrk_r+0x1a>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_sbrk_r+0x1a>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	240006b0 	.word	0x240006b0

0800d3e4 <_write_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4d07      	ldr	r5, [pc, #28]	@ (800d404 <_write_r+0x20>)
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	4608      	mov	r0, r1
 800d3ec:	4611      	mov	r1, r2
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	602a      	str	r2, [r5, #0]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f7f4 fd84 	bl	8001f00 <_write>
 800d3f8:	1c43      	adds	r3, r0, #1
 800d3fa:	d102      	bne.n	800d402 <_write_r+0x1e>
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	b103      	cbz	r3, 800d402 <_write_r+0x1e>
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	bd38      	pop	{r3, r4, r5, pc}
 800d404:	240006b0 	.word	0x240006b0

0800d408 <_close_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4d06      	ldr	r5, [pc, #24]	@ (800d424 <_close_r+0x1c>)
 800d40c:	2300      	movs	r3, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	4608      	mov	r0, r1
 800d412:	602b      	str	r3, [r5, #0]
 800d414:	f7f5 fb26 	bl	8002a64 <_close>
 800d418:	1c43      	adds	r3, r0, #1
 800d41a:	d102      	bne.n	800d422 <_close_r+0x1a>
 800d41c:	682b      	ldr	r3, [r5, #0]
 800d41e:	b103      	cbz	r3, 800d422 <_close_r+0x1a>
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	240006b0 	.word	0x240006b0

0800d428 <__assert_func>:
 800d428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d42a:	4614      	mov	r4, r2
 800d42c:	461a      	mov	r2, r3
 800d42e:	4b09      	ldr	r3, [pc, #36]	@ (800d454 <__assert_func+0x2c>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4605      	mov	r5, r0
 800d434:	68d8      	ldr	r0, [r3, #12]
 800d436:	b14c      	cbz	r4, 800d44c <__assert_func+0x24>
 800d438:	4b07      	ldr	r3, [pc, #28]	@ (800d458 <__assert_func+0x30>)
 800d43a:	9100      	str	r1, [sp, #0]
 800d43c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d440:	4906      	ldr	r1, [pc, #24]	@ (800d45c <__assert_func+0x34>)
 800d442:	462b      	mov	r3, r5
 800d444:	f000 f874 	bl	800d530 <fiprintf>
 800d448:	f000 f884 	bl	800d554 <abort>
 800d44c:	4b04      	ldr	r3, [pc, #16]	@ (800d460 <__assert_func+0x38>)
 800d44e:	461c      	mov	r4, r3
 800d450:	e7f3      	b.n	800d43a <__assert_func+0x12>
 800d452:	bf00      	nop
 800d454:	2400018c 	.word	0x2400018c
 800d458:	0800e792 	.word	0x0800e792
 800d45c:	0800e79f 	.word	0x0800e79f
 800d460:	0800e7cd 	.word	0x0800e7cd

0800d464 <_calloc_r>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	fba1 5402 	umull	r5, r4, r1, r2
 800d46a:	b934      	cbnz	r4, 800d47a <_calloc_r+0x16>
 800d46c:	4629      	mov	r1, r5
 800d46e:	f7ff f8fb 	bl	800c668 <_malloc_r>
 800d472:	4606      	mov	r6, r0
 800d474:	b928      	cbnz	r0, 800d482 <_calloc_r+0x1e>
 800d476:	4630      	mov	r0, r6
 800d478:	bd70      	pop	{r4, r5, r6, pc}
 800d47a:	220c      	movs	r2, #12
 800d47c:	6002      	str	r2, [r0, #0]
 800d47e:	2600      	movs	r6, #0
 800d480:	e7f9      	b.n	800d476 <_calloc_r+0x12>
 800d482:	462a      	mov	r2, r5
 800d484:	4621      	mov	r1, r4
 800d486:	f7fd fde5 	bl	800b054 <memset>
 800d48a:	e7f4      	b.n	800d476 <_calloc_r+0x12>

0800d48c <_free_r>:
 800d48c:	b538      	push	{r3, r4, r5, lr}
 800d48e:	4605      	mov	r5, r0
 800d490:	2900      	cmp	r1, #0
 800d492:	d041      	beq.n	800d518 <_free_r+0x8c>
 800d494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d498:	1f0c      	subs	r4, r1, #4
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	bfb8      	it	lt
 800d49e:	18e4      	addlt	r4, r4, r3
 800d4a0:	f7ff fa20 	bl	800c8e4 <__malloc_lock>
 800d4a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d51c <_free_r+0x90>)
 800d4a6:	6813      	ldr	r3, [r2, #0]
 800d4a8:	b933      	cbnz	r3, 800d4b8 <_free_r+0x2c>
 800d4aa:	6063      	str	r3, [r4, #4]
 800d4ac:	6014      	str	r4, [r2, #0]
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4b4:	f7ff ba1c 	b.w	800c8f0 <__malloc_unlock>
 800d4b8:	42a3      	cmp	r3, r4
 800d4ba:	d908      	bls.n	800d4ce <_free_r+0x42>
 800d4bc:	6820      	ldr	r0, [r4, #0]
 800d4be:	1821      	adds	r1, r4, r0
 800d4c0:	428b      	cmp	r3, r1
 800d4c2:	bf01      	itttt	eq
 800d4c4:	6819      	ldreq	r1, [r3, #0]
 800d4c6:	685b      	ldreq	r3, [r3, #4]
 800d4c8:	1809      	addeq	r1, r1, r0
 800d4ca:	6021      	streq	r1, [r4, #0]
 800d4cc:	e7ed      	b.n	800d4aa <_free_r+0x1e>
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	b10b      	cbz	r3, 800d4d8 <_free_r+0x4c>
 800d4d4:	42a3      	cmp	r3, r4
 800d4d6:	d9fa      	bls.n	800d4ce <_free_r+0x42>
 800d4d8:	6811      	ldr	r1, [r2, #0]
 800d4da:	1850      	adds	r0, r2, r1
 800d4dc:	42a0      	cmp	r0, r4
 800d4de:	d10b      	bne.n	800d4f8 <_free_r+0x6c>
 800d4e0:	6820      	ldr	r0, [r4, #0]
 800d4e2:	4401      	add	r1, r0
 800d4e4:	1850      	adds	r0, r2, r1
 800d4e6:	4283      	cmp	r3, r0
 800d4e8:	6011      	str	r1, [r2, #0]
 800d4ea:	d1e0      	bne.n	800d4ae <_free_r+0x22>
 800d4ec:	6818      	ldr	r0, [r3, #0]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	6053      	str	r3, [r2, #4]
 800d4f2:	4408      	add	r0, r1
 800d4f4:	6010      	str	r0, [r2, #0]
 800d4f6:	e7da      	b.n	800d4ae <_free_r+0x22>
 800d4f8:	d902      	bls.n	800d500 <_free_r+0x74>
 800d4fa:	230c      	movs	r3, #12
 800d4fc:	602b      	str	r3, [r5, #0]
 800d4fe:	e7d6      	b.n	800d4ae <_free_r+0x22>
 800d500:	6820      	ldr	r0, [r4, #0]
 800d502:	1821      	adds	r1, r4, r0
 800d504:	428b      	cmp	r3, r1
 800d506:	bf04      	itt	eq
 800d508:	6819      	ldreq	r1, [r3, #0]
 800d50a:	685b      	ldreq	r3, [r3, #4]
 800d50c:	6063      	str	r3, [r4, #4]
 800d50e:	bf04      	itt	eq
 800d510:	1809      	addeq	r1, r1, r0
 800d512:	6021      	streq	r1, [r4, #0]
 800d514:	6054      	str	r4, [r2, #4]
 800d516:	e7ca      	b.n	800d4ae <_free_r+0x22>
 800d518:	bd38      	pop	{r3, r4, r5, pc}
 800d51a:	bf00      	nop
 800d51c:	240006ac 	.word	0x240006ac

0800d520 <_malloc_usable_size_r>:
 800d520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d524:	1f18      	subs	r0, r3, #4
 800d526:	2b00      	cmp	r3, #0
 800d528:	bfbc      	itt	lt
 800d52a:	580b      	ldrlt	r3, [r1, r0]
 800d52c:	18c0      	addlt	r0, r0, r3
 800d52e:	4770      	bx	lr

0800d530 <fiprintf>:
 800d530:	b40e      	push	{r1, r2, r3}
 800d532:	b503      	push	{r0, r1, lr}
 800d534:	4601      	mov	r1, r0
 800d536:	ab03      	add	r3, sp, #12
 800d538:	4805      	ldr	r0, [pc, #20]	@ (800d550 <fiprintf+0x20>)
 800d53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d53e:	6800      	ldr	r0, [r0, #0]
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	f000 f837 	bl	800d5b4 <_vfiprintf_r>
 800d546:	b002      	add	sp, #8
 800d548:	f85d eb04 	ldr.w	lr, [sp], #4
 800d54c:	b003      	add	sp, #12
 800d54e:	4770      	bx	lr
 800d550:	2400018c 	.word	0x2400018c

0800d554 <abort>:
 800d554:	b508      	push	{r3, lr}
 800d556:	2006      	movs	r0, #6
 800d558:	f000 fa62 	bl	800da20 <raise>
 800d55c:	2001      	movs	r0, #1
 800d55e:	f7f5 fa59 	bl	8002a14 <_exit>

0800d562 <__sfputc_r>:
 800d562:	6893      	ldr	r3, [r2, #8]
 800d564:	3b01      	subs	r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	b410      	push	{r4}
 800d56a:	6093      	str	r3, [r2, #8]
 800d56c:	da08      	bge.n	800d580 <__sfputc_r+0x1e>
 800d56e:	6994      	ldr	r4, [r2, #24]
 800d570:	42a3      	cmp	r3, r4
 800d572:	db01      	blt.n	800d578 <__sfputc_r+0x16>
 800d574:	290a      	cmp	r1, #10
 800d576:	d103      	bne.n	800d580 <__sfputc_r+0x1e>
 800d578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d57c:	f000 b932 	b.w	800d7e4 <__swbuf_r>
 800d580:	6813      	ldr	r3, [r2, #0]
 800d582:	1c58      	adds	r0, r3, #1
 800d584:	6010      	str	r0, [r2, #0]
 800d586:	7019      	strb	r1, [r3, #0]
 800d588:	4608      	mov	r0, r1
 800d58a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <__sfputs_r>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	4606      	mov	r6, r0
 800d594:	460f      	mov	r7, r1
 800d596:	4614      	mov	r4, r2
 800d598:	18d5      	adds	r5, r2, r3
 800d59a:	42ac      	cmp	r4, r5
 800d59c:	d101      	bne.n	800d5a2 <__sfputs_r+0x12>
 800d59e:	2000      	movs	r0, #0
 800d5a0:	e007      	b.n	800d5b2 <__sfputs_r+0x22>
 800d5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a6:	463a      	mov	r2, r7
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	f7ff ffda 	bl	800d562 <__sfputc_r>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	d1f3      	bne.n	800d59a <__sfputs_r+0xa>
 800d5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5b4 <_vfiprintf_r>:
 800d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b8:	460d      	mov	r5, r1
 800d5ba:	b09d      	sub	sp, #116	@ 0x74
 800d5bc:	4614      	mov	r4, r2
 800d5be:	4698      	mov	r8, r3
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	b118      	cbz	r0, 800d5cc <_vfiprintf_r+0x18>
 800d5c4:	6a03      	ldr	r3, [r0, #32]
 800d5c6:	b90b      	cbnz	r3, 800d5cc <_vfiprintf_r+0x18>
 800d5c8:	f7fc fed8 	bl	800a37c <__sinit>
 800d5cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ce:	07d9      	lsls	r1, r3, #31
 800d5d0:	d405      	bmi.n	800d5de <_vfiprintf_r+0x2a>
 800d5d2:	89ab      	ldrh	r3, [r5, #12]
 800d5d4:	059a      	lsls	r2, r3, #22
 800d5d6:	d402      	bmi.n	800d5de <_vfiprintf_r+0x2a>
 800d5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5da:	f7fd fd80 	bl	800b0de <__retarget_lock_acquire_recursive>
 800d5de:	89ab      	ldrh	r3, [r5, #12]
 800d5e0:	071b      	lsls	r3, r3, #28
 800d5e2:	d501      	bpl.n	800d5e8 <_vfiprintf_r+0x34>
 800d5e4:	692b      	ldr	r3, [r5, #16]
 800d5e6:	b99b      	cbnz	r3, 800d610 <_vfiprintf_r+0x5c>
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	f000 f938 	bl	800d860 <__swsetup_r>
 800d5f0:	b170      	cbz	r0, 800d610 <_vfiprintf_r+0x5c>
 800d5f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5f4:	07dc      	lsls	r4, r3, #31
 800d5f6:	d504      	bpl.n	800d602 <_vfiprintf_r+0x4e>
 800d5f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d5fc:	b01d      	add	sp, #116	@ 0x74
 800d5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d602:	89ab      	ldrh	r3, [r5, #12]
 800d604:	0598      	lsls	r0, r3, #22
 800d606:	d4f7      	bmi.n	800d5f8 <_vfiprintf_r+0x44>
 800d608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d60a:	f7fd fd69 	bl	800b0e0 <__retarget_lock_release_recursive>
 800d60e:	e7f3      	b.n	800d5f8 <_vfiprintf_r+0x44>
 800d610:	2300      	movs	r3, #0
 800d612:	9309      	str	r3, [sp, #36]	@ 0x24
 800d614:	2320      	movs	r3, #32
 800d616:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d61e:	2330      	movs	r3, #48	@ 0x30
 800d620:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d7d0 <_vfiprintf_r+0x21c>
 800d624:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d628:	f04f 0901 	mov.w	r9, #1
 800d62c:	4623      	mov	r3, r4
 800d62e:	469a      	mov	sl, r3
 800d630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d634:	b10a      	cbz	r2, 800d63a <_vfiprintf_r+0x86>
 800d636:	2a25      	cmp	r2, #37	@ 0x25
 800d638:	d1f9      	bne.n	800d62e <_vfiprintf_r+0x7a>
 800d63a:	ebba 0b04 	subs.w	fp, sl, r4
 800d63e:	d00b      	beq.n	800d658 <_vfiprintf_r+0xa4>
 800d640:	465b      	mov	r3, fp
 800d642:	4622      	mov	r2, r4
 800d644:	4629      	mov	r1, r5
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff ffa2 	bl	800d590 <__sfputs_r>
 800d64c:	3001      	adds	r0, #1
 800d64e:	f000 80a7 	beq.w	800d7a0 <_vfiprintf_r+0x1ec>
 800d652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d654:	445a      	add	r2, fp
 800d656:	9209      	str	r2, [sp, #36]	@ 0x24
 800d658:	f89a 3000 	ldrb.w	r3, [sl]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f000 809f 	beq.w	800d7a0 <_vfiprintf_r+0x1ec>
 800d662:	2300      	movs	r3, #0
 800d664:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d66c:	f10a 0a01 	add.w	sl, sl, #1
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	9307      	str	r3, [sp, #28]
 800d674:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d678:	931a      	str	r3, [sp, #104]	@ 0x68
 800d67a:	4654      	mov	r4, sl
 800d67c:	2205      	movs	r2, #5
 800d67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d682:	4853      	ldr	r0, [pc, #332]	@ (800d7d0 <_vfiprintf_r+0x21c>)
 800d684:	f7f2 fe2c 	bl	80002e0 <memchr>
 800d688:	9a04      	ldr	r2, [sp, #16]
 800d68a:	b9d8      	cbnz	r0, 800d6c4 <_vfiprintf_r+0x110>
 800d68c:	06d1      	lsls	r1, r2, #27
 800d68e:	bf44      	itt	mi
 800d690:	2320      	movmi	r3, #32
 800d692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d696:	0713      	lsls	r3, r2, #28
 800d698:	bf44      	itt	mi
 800d69a:	232b      	movmi	r3, #43	@ 0x2b
 800d69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6a6:	d015      	beq.n	800d6d4 <_vfiprintf_r+0x120>
 800d6a8:	9a07      	ldr	r2, [sp, #28]
 800d6aa:	4654      	mov	r4, sl
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	f04f 0c0a 	mov.w	ip, #10
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b8:	3b30      	subs	r3, #48	@ 0x30
 800d6ba:	2b09      	cmp	r3, #9
 800d6bc:	d94b      	bls.n	800d756 <_vfiprintf_r+0x1a2>
 800d6be:	b1b0      	cbz	r0, 800d6ee <_vfiprintf_r+0x13a>
 800d6c0:	9207      	str	r2, [sp, #28]
 800d6c2:	e014      	b.n	800d6ee <_vfiprintf_r+0x13a>
 800d6c4:	eba0 0308 	sub.w	r3, r0, r8
 800d6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	9304      	str	r3, [sp, #16]
 800d6d0:	46a2      	mov	sl, r4
 800d6d2:	e7d2      	b.n	800d67a <_vfiprintf_r+0xc6>
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	1d19      	adds	r1, r3, #4
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	9103      	str	r1, [sp, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	bfbb      	ittet	lt
 800d6e0:	425b      	neglt	r3, r3
 800d6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e6:	9307      	strge	r3, [sp, #28]
 800d6e8:	9307      	strlt	r3, [sp, #28]
 800d6ea:	bfb8      	it	lt
 800d6ec:	9204      	strlt	r2, [sp, #16]
 800d6ee:	7823      	ldrb	r3, [r4, #0]
 800d6f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6f2:	d10a      	bne.n	800d70a <_vfiprintf_r+0x156>
 800d6f4:	7863      	ldrb	r3, [r4, #1]
 800d6f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6f8:	d132      	bne.n	800d760 <_vfiprintf_r+0x1ac>
 800d6fa:	9b03      	ldr	r3, [sp, #12]
 800d6fc:	1d1a      	adds	r2, r3, #4
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	9203      	str	r2, [sp, #12]
 800d702:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d706:	3402      	adds	r4, #2
 800d708:	9305      	str	r3, [sp, #20]
 800d70a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d7e0 <_vfiprintf_r+0x22c>
 800d70e:	7821      	ldrb	r1, [r4, #0]
 800d710:	2203      	movs	r2, #3
 800d712:	4650      	mov	r0, sl
 800d714:	f7f2 fde4 	bl	80002e0 <memchr>
 800d718:	b138      	cbz	r0, 800d72a <_vfiprintf_r+0x176>
 800d71a:	9b04      	ldr	r3, [sp, #16]
 800d71c:	eba0 000a 	sub.w	r0, r0, sl
 800d720:	2240      	movs	r2, #64	@ 0x40
 800d722:	4082      	lsls	r2, r0
 800d724:	4313      	orrs	r3, r2
 800d726:	3401      	adds	r4, #1
 800d728:	9304      	str	r3, [sp, #16]
 800d72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72e:	4829      	ldr	r0, [pc, #164]	@ (800d7d4 <_vfiprintf_r+0x220>)
 800d730:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d734:	2206      	movs	r2, #6
 800d736:	f7f2 fdd3 	bl	80002e0 <memchr>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d03f      	beq.n	800d7be <_vfiprintf_r+0x20a>
 800d73e:	4b26      	ldr	r3, [pc, #152]	@ (800d7d8 <_vfiprintf_r+0x224>)
 800d740:	bb1b      	cbnz	r3, 800d78a <_vfiprintf_r+0x1d6>
 800d742:	9b03      	ldr	r3, [sp, #12]
 800d744:	3307      	adds	r3, #7
 800d746:	f023 0307 	bic.w	r3, r3, #7
 800d74a:	3308      	adds	r3, #8
 800d74c:	9303      	str	r3, [sp, #12]
 800d74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d750:	443b      	add	r3, r7
 800d752:	9309      	str	r3, [sp, #36]	@ 0x24
 800d754:	e76a      	b.n	800d62c <_vfiprintf_r+0x78>
 800d756:	fb0c 3202 	mla	r2, ip, r2, r3
 800d75a:	460c      	mov	r4, r1
 800d75c:	2001      	movs	r0, #1
 800d75e:	e7a8      	b.n	800d6b2 <_vfiprintf_r+0xfe>
 800d760:	2300      	movs	r3, #0
 800d762:	3401      	adds	r4, #1
 800d764:	9305      	str	r3, [sp, #20]
 800d766:	4619      	mov	r1, r3
 800d768:	f04f 0c0a 	mov.w	ip, #10
 800d76c:	4620      	mov	r0, r4
 800d76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d772:	3a30      	subs	r2, #48	@ 0x30
 800d774:	2a09      	cmp	r2, #9
 800d776:	d903      	bls.n	800d780 <_vfiprintf_r+0x1cc>
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0c6      	beq.n	800d70a <_vfiprintf_r+0x156>
 800d77c:	9105      	str	r1, [sp, #20]
 800d77e:	e7c4      	b.n	800d70a <_vfiprintf_r+0x156>
 800d780:	fb0c 2101 	mla	r1, ip, r1, r2
 800d784:	4604      	mov	r4, r0
 800d786:	2301      	movs	r3, #1
 800d788:	e7f0      	b.n	800d76c <_vfiprintf_r+0x1b8>
 800d78a:	ab03      	add	r3, sp, #12
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	462a      	mov	r2, r5
 800d790:	4b12      	ldr	r3, [pc, #72]	@ (800d7dc <_vfiprintf_r+0x228>)
 800d792:	a904      	add	r1, sp, #16
 800d794:	4630      	mov	r0, r6
 800d796:	f7fb ff97 	bl	80096c8 <_printf_float>
 800d79a:	4607      	mov	r7, r0
 800d79c:	1c78      	adds	r0, r7, #1
 800d79e:	d1d6      	bne.n	800d74e <_vfiprintf_r+0x19a>
 800d7a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7a2:	07d9      	lsls	r1, r3, #31
 800d7a4:	d405      	bmi.n	800d7b2 <_vfiprintf_r+0x1fe>
 800d7a6:	89ab      	ldrh	r3, [r5, #12]
 800d7a8:	059a      	lsls	r2, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_vfiprintf_r+0x1fe>
 800d7ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7ae:	f7fd fc97 	bl	800b0e0 <__retarget_lock_release_recursive>
 800d7b2:	89ab      	ldrh	r3, [r5, #12]
 800d7b4:	065b      	lsls	r3, r3, #25
 800d7b6:	f53f af1f 	bmi.w	800d5f8 <_vfiprintf_r+0x44>
 800d7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7bc:	e71e      	b.n	800d5fc <_vfiprintf_r+0x48>
 800d7be:	ab03      	add	r3, sp, #12
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	4b05      	ldr	r3, [pc, #20]	@ (800d7dc <_vfiprintf_r+0x228>)
 800d7c6:	a904      	add	r1, sp, #16
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f7fc fa05 	bl	8009bd8 <_printf_i>
 800d7ce:	e7e4      	b.n	800d79a <_vfiprintf_r+0x1e6>
 800d7d0:	0800e728 	.word	0x0800e728
 800d7d4:	0800e732 	.word	0x0800e732
 800d7d8:	080096c9 	.word	0x080096c9
 800d7dc:	0800d591 	.word	0x0800d591
 800d7e0:	0800e72e 	.word	0x0800e72e

0800d7e4 <__swbuf_r>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	460e      	mov	r6, r1
 800d7e8:	4614      	mov	r4, r2
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	b118      	cbz	r0, 800d7f6 <__swbuf_r+0x12>
 800d7ee:	6a03      	ldr	r3, [r0, #32]
 800d7f0:	b90b      	cbnz	r3, 800d7f6 <__swbuf_r+0x12>
 800d7f2:	f7fc fdc3 	bl	800a37c <__sinit>
 800d7f6:	69a3      	ldr	r3, [r4, #24]
 800d7f8:	60a3      	str	r3, [r4, #8]
 800d7fa:	89a3      	ldrh	r3, [r4, #12]
 800d7fc:	071a      	lsls	r2, r3, #28
 800d7fe:	d501      	bpl.n	800d804 <__swbuf_r+0x20>
 800d800:	6923      	ldr	r3, [r4, #16]
 800d802:	b943      	cbnz	r3, 800d816 <__swbuf_r+0x32>
 800d804:	4621      	mov	r1, r4
 800d806:	4628      	mov	r0, r5
 800d808:	f000 f82a 	bl	800d860 <__swsetup_r>
 800d80c:	b118      	cbz	r0, 800d816 <__swbuf_r+0x32>
 800d80e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d812:	4638      	mov	r0, r7
 800d814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	6922      	ldr	r2, [r4, #16]
 800d81a:	1a98      	subs	r0, r3, r2
 800d81c:	6963      	ldr	r3, [r4, #20]
 800d81e:	b2f6      	uxtb	r6, r6
 800d820:	4283      	cmp	r3, r0
 800d822:	4637      	mov	r7, r6
 800d824:	dc05      	bgt.n	800d832 <__swbuf_r+0x4e>
 800d826:	4621      	mov	r1, r4
 800d828:	4628      	mov	r0, r5
 800d82a:	f7ff f833 	bl	800c894 <_fflush_r>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d1ed      	bne.n	800d80e <__swbuf_r+0x2a>
 800d832:	68a3      	ldr	r3, [r4, #8]
 800d834:	3b01      	subs	r3, #1
 800d836:	60a3      	str	r3, [r4, #8]
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	6022      	str	r2, [r4, #0]
 800d83e:	701e      	strb	r6, [r3, #0]
 800d840:	6962      	ldr	r2, [r4, #20]
 800d842:	1c43      	adds	r3, r0, #1
 800d844:	429a      	cmp	r2, r3
 800d846:	d004      	beq.n	800d852 <__swbuf_r+0x6e>
 800d848:	89a3      	ldrh	r3, [r4, #12]
 800d84a:	07db      	lsls	r3, r3, #31
 800d84c:	d5e1      	bpl.n	800d812 <__swbuf_r+0x2e>
 800d84e:	2e0a      	cmp	r6, #10
 800d850:	d1df      	bne.n	800d812 <__swbuf_r+0x2e>
 800d852:	4621      	mov	r1, r4
 800d854:	4628      	mov	r0, r5
 800d856:	f7ff f81d 	bl	800c894 <_fflush_r>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d0d9      	beq.n	800d812 <__swbuf_r+0x2e>
 800d85e:	e7d6      	b.n	800d80e <__swbuf_r+0x2a>

0800d860 <__swsetup_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4b29      	ldr	r3, [pc, #164]	@ (800d908 <__swsetup_r+0xa8>)
 800d864:	4605      	mov	r5, r0
 800d866:	6818      	ldr	r0, [r3, #0]
 800d868:	460c      	mov	r4, r1
 800d86a:	b118      	cbz	r0, 800d874 <__swsetup_r+0x14>
 800d86c:	6a03      	ldr	r3, [r0, #32]
 800d86e:	b90b      	cbnz	r3, 800d874 <__swsetup_r+0x14>
 800d870:	f7fc fd84 	bl	800a37c <__sinit>
 800d874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d878:	0719      	lsls	r1, r3, #28
 800d87a:	d422      	bmi.n	800d8c2 <__swsetup_r+0x62>
 800d87c:	06da      	lsls	r2, r3, #27
 800d87e:	d407      	bmi.n	800d890 <__swsetup_r+0x30>
 800d880:	2209      	movs	r2, #9
 800d882:	602a      	str	r2, [r5, #0]
 800d884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d888:	81a3      	strh	r3, [r4, #12]
 800d88a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d88e:	e033      	b.n	800d8f8 <__swsetup_r+0x98>
 800d890:	0758      	lsls	r0, r3, #29
 800d892:	d512      	bpl.n	800d8ba <__swsetup_r+0x5a>
 800d894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d896:	b141      	cbz	r1, 800d8aa <__swsetup_r+0x4a>
 800d898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d89c:	4299      	cmp	r1, r3
 800d89e:	d002      	beq.n	800d8a6 <__swsetup_r+0x46>
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	f7ff fdf3 	bl	800d48c <_free_r>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d8b0:	81a3      	strh	r3, [r4, #12]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	6063      	str	r3, [r4, #4]
 800d8b6:	6923      	ldr	r3, [r4, #16]
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	f043 0308 	orr.w	r3, r3, #8
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	6923      	ldr	r3, [r4, #16]
 800d8c4:	b94b      	cbnz	r3, 800d8da <__swsetup_r+0x7a>
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8d0:	d003      	beq.n	800d8da <__swsetup_r+0x7a>
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f000 f83f 	bl	800d958 <__smakebuf_r>
 800d8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8de:	f013 0201 	ands.w	r2, r3, #1
 800d8e2:	d00a      	beq.n	800d8fa <__swsetup_r+0x9a>
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	60a2      	str	r2, [r4, #8]
 800d8e8:	6962      	ldr	r2, [r4, #20]
 800d8ea:	4252      	negs	r2, r2
 800d8ec:	61a2      	str	r2, [r4, #24]
 800d8ee:	6922      	ldr	r2, [r4, #16]
 800d8f0:	b942      	cbnz	r2, 800d904 <__swsetup_r+0xa4>
 800d8f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8f6:	d1c5      	bne.n	800d884 <__swsetup_r+0x24>
 800d8f8:	bd38      	pop	{r3, r4, r5, pc}
 800d8fa:	0799      	lsls	r1, r3, #30
 800d8fc:	bf58      	it	pl
 800d8fe:	6962      	ldrpl	r2, [r4, #20]
 800d900:	60a2      	str	r2, [r4, #8]
 800d902:	e7f4      	b.n	800d8ee <__swsetup_r+0x8e>
 800d904:	2000      	movs	r0, #0
 800d906:	e7f7      	b.n	800d8f8 <__swsetup_r+0x98>
 800d908:	2400018c 	.word	0x2400018c

0800d90c <__swhatbuf_r>:
 800d90c:	b570      	push	{r4, r5, r6, lr}
 800d90e:	460c      	mov	r4, r1
 800d910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d914:	2900      	cmp	r1, #0
 800d916:	b096      	sub	sp, #88	@ 0x58
 800d918:	4615      	mov	r5, r2
 800d91a:	461e      	mov	r6, r3
 800d91c:	da0d      	bge.n	800d93a <__swhatbuf_r+0x2e>
 800d91e:	89a3      	ldrh	r3, [r4, #12]
 800d920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d924:	f04f 0100 	mov.w	r1, #0
 800d928:	bf14      	ite	ne
 800d92a:	2340      	movne	r3, #64	@ 0x40
 800d92c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d930:	2000      	movs	r0, #0
 800d932:	6031      	str	r1, [r6, #0]
 800d934:	602b      	str	r3, [r5, #0]
 800d936:	b016      	add	sp, #88	@ 0x58
 800d938:	bd70      	pop	{r4, r5, r6, pc}
 800d93a:	466a      	mov	r2, sp
 800d93c:	f000 f89c 	bl	800da78 <_fstat_r>
 800d940:	2800      	cmp	r0, #0
 800d942:	dbec      	blt.n	800d91e <__swhatbuf_r+0x12>
 800d944:	9901      	ldr	r1, [sp, #4]
 800d946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d94a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d94e:	4259      	negs	r1, r3
 800d950:	4159      	adcs	r1, r3
 800d952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d956:	e7eb      	b.n	800d930 <__swhatbuf_r+0x24>

0800d958 <__smakebuf_r>:
 800d958:	898b      	ldrh	r3, [r1, #12]
 800d95a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d95c:	079d      	lsls	r5, r3, #30
 800d95e:	4606      	mov	r6, r0
 800d960:	460c      	mov	r4, r1
 800d962:	d507      	bpl.n	800d974 <__smakebuf_r+0x1c>
 800d964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	6123      	str	r3, [r4, #16]
 800d96c:	2301      	movs	r3, #1
 800d96e:	6163      	str	r3, [r4, #20]
 800d970:	b003      	add	sp, #12
 800d972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d974:	ab01      	add	r3, sp, #4
 800d976:	466a      	mov	r2, sp
 800d978:	f7ff ffc8 	bl	800d90c <__swhatbuf_r>
 800d97c:	9f00      	ldr	r7, [sp, #0]
 800d97e:	4605      	mov	r5, r0
 800d980:	4639      	mov	r1, r7
 800d982:	4630      	mov	r0, r6
 800d984:	f7fe fe70 	bl	800c668 <_malloc_r>
 800d988:	b948      	cbnz	r0, 800d99e <__smakebuf_r+0x46>
 800d98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98e:	059a      	lsls	r2, r3, #22
 800d990:	d4ee      	bmi.n	800d970 <__smakebuf_r+0x18>
 800d992:	f023 0303 	bic.w	r3, r3, #3
 800d996:	f043 0302 	orr.w	r3, r3, #2
 800d99a:	81a3      	strh	r3, [r4, #12]
 800d99c:	e7e2      	b.n	800d964 <__smakebuf_r+0xc>
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	6020      	str	r0, [r4, #0]
 800d9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9a6:	81a3      	strh	r3, [r4, #12]
 800d9a8:	9b01      	ldr	r3, [sp, #4]
 800d9aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d9ae:	b15b      	cbz	r3, 800d9c8 <__smakebuf_r+0x70>
 800d9b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f000 f83b 	bl	800da30 <_isatty_r>
 800d9ba:	b128      	cbz	r0, 800d9c8 <__smakebuf_r+0x70>
 800d9bc:	89a3      	ldrh	r3, [r4, #12]
 800d9be:	f023 0303 	bic.w	r3, r3, #3
 800d9c2:	f043 0301 	orr.w	r3, r3, #1
 800d9c6:	81a3      	strh	r3, [r4, #12]
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	431d      	orrs	r5, r3
 800d9cc:	81a5      	strh	r5, [r4, #12]
 800d9ce:	e7cf      	b.n	800d970 <__smakebuf_r+0x18>

0800d9d0 <_raise_r>:
 800d9d0:	291f      	cmp	r1, #31
 800d9d2:	b538      	push	{r3, r4, r5, lr}
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	d904      	bls.n	800d9e4 <_raise_r+0x14>
 800d9da:	2316      	movs	r3, #22
 800d9dc:	6003      	str	r3, [r0, #0]
 800d9de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9e6:	b112      	cbz	r2, 800d9ee <_raise_r+0x1e>
 800d9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9ec:	b94b      	cbnz	r3, 800da02 <_raise_r+0x32>
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f000 f840 	bl	800da74 <_getpid_r>
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	4601      	mov	r1, r0
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9fe:	f000 b827 	b.w	800da50 <_kill_r>
 800da02:	2b01      	cmp	r3, #1
 800da04:	d00a      	beq.n	800da1c <_raise_r+0x4c>
 800da06:	1c59      	adds	r1, r3, #1
 800da08:	d103      	bne.n	800da12 <_raise_r+0x42>
 800da0a:	2316      	movs	r3, #22
 800da0c:	6003      	str	r3, [r0, #0]
 800da0e:	2001      	movs	r0, #1
 800da10:	e7e7      	b.n	800d9e2 <_raise_r+0x12>
 800da12:	2100      	movs	r1, #0
 800da14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da18:	4620      	mov	r0, r4
 800da1a:	4798      	blx	r3
 800da1c:	2000      	movs	r0, #0
 800da1e:	e7e0      	b.n	800d9e2 <_raise_r+0x12>

0800da20 <raise>:
 800da20:	4b02      	ldr	r3, [pc, #8]	@ (800da2c <raise+0xc>)
 800da22:	4601      	mov	r1, r0
 800da24:	6818      	ldr	r0, [r3, #0]
 800da26:	f7ff bfd3 	b.w	800d9d0 <_raise_r>
 800da2a:	bf00      	nop
 800da2c:	2400018c 	.word	0x2400018c

0800da30 <_isatty_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	4d06      	ldr	r5, [pc, #24]	@ (800da4c <_isatty_r+0x1c>)
 800da34:	2300      	movs	r3, #0
 800da36:	4604      	mov	r4, r0
 800da38:	4608      	mov	r0, r1
 800da3a:	602b      	str	r3, [r5, #0]
 800da3c:	f7f5 f82e 	bl	8002a9c <_isatty>
 800da40:	1c43      	adds	r3, r0, #1
 800da42:	d102      	bne.n	800da4a <_isatty_r+0x1a>
 800da44:	682b      	ldr	r3, [r5, #0]
 800da46:	b103      	cbz	r3, 800da4a <_isatty_r+0x1a>
 800da48:	6023      	str	r3, [r4, #0]
 800da4a:	bd38      	pop	{r3, r4, r5, pc}
 800da4c:	240006b0 	.word	0x240006b0

0800da50 <_kill_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4d07      	ldr	r5, [pc, #28]	@ (800da70 <_kill_r+0x20>)
 800da54:	2300      	movs	r3, #0
 800da56:	4604      	mov	r4, r0
 800da58:	4608      	mov	r0, r1
 800da5a:	4611      	mov	r1, r2
 800da5c:	602b      	str	r3, [r5, #0]
 800da5e:	f7f4 ffc9 	bl	80029f4 <_kill>
 800da62:	1c43      	adds	r3, r0, #1
 800da64:	d102      	bne.n	800da6c <_kill_r+0x1c>
 800da66:	682b      	ldr	r3, [r5, #0]
 800da68:	b103      	cbz	r3, 800da6c <_kill_r+0x1c>
 800da6a:	6023      	str	r3, [r4, #0]
 800da6c:	bd38      	pop	{r3, r4, r5, pc}
 800da6e:	bf00      	nop
 800da70:	240006b0 	.word	0x240006b0

0800da74 <_getpid_r>:
 800da74:	f7f4 bfb6 	b.w	80029e4 <_getpid>

0800da78 <_fstat_r>:
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	4d07      	ldr	r5, [pc, #28]	@ (800da98 <_fstat_r+0x20>)
 800da7c:	2300      	movs	r3, #0
 800da7e:	4604      	mov	r4, r0
 800da80:	4608      	mov	r0, r1
 800da82:	4611      	mov	r1, r2
 800da84:	602b      	str	r3, [r5, #0]
 800da86:	f7f4 fff9 	bl	8002a7c <_fstat>
 800da8a:	1c43      	adds	r3, r0, #1
 800da8c:	d102      	bne.n	800da94 <_fstat_r+0x1c>
 800da8e:	682b      	ldr	r3, [r5, #0]
 800da90:	b103      	cbz	r3, 800da94 <_fstat_r+0x1c>
 800da92:	6023      	str	r3, [r4, #0]
 800da94:	bd38      	pop	{r3, r4, r5, pc}
 800da96:	bf00      	nop
 800da98:	240006b0 	.word	0x240006b0

0800da9c <asinf>:
 800da9c:	b508      	push	{r3, lr}
 800da9e:	ed2d 8b02 	vpush	{d8}
 800daa2:	eeb0 8a40 	vmov.f32	s16, s0
 800daa6:	f000 fab3 	bl	800e010 <__ieee754_asinf>
 800daaa:	eeb4 8a48 	vcmp.f32	s16, s16
 800daae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab2:	eef0 8a40 	vmov.f32	s17, s0
 800dab6:	d615      	bvs.n	800dae4 <asinf+0x48>
 800dab8:	eeb0 0a48 	vmov.f32	s0, s16
 800dabc:	f000 faa0 	bl	800e000 <fabsf>
 800dac0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800dac4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dacc:	dd0a      	ble.n	800dae4 <asinf+0x48>
 800dace:	f7fd fadb 	bl	800b088 <__errno>
 800dad2:	ecbd 8b02 	vpop	{d8}
 800dad6:	2321      	movs	r3, #33	@ 0x21
 800dad8:	6003      	str	r3, [r0, #0]
 800dada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dade:	4804      	ldr	r0, [pc, #16]	@ (800daf0 <asinf+0x54>)
 800dae0:	f7fd bb1a 	b.w	800b118 <nanf>
 800dae4:	eeb0 0a68 	vmov.f32	s0, s17
 800dae8:	ecbd 8b02 	vpop	{d8}
 800daec:	bd08      	pop	{r3, pc}
 800daee:	bf00      	nop
 800daf0:	0800e7cd 	.word	0x0800e7cd

0800daf4 <atan2f>:
 800daf4:	f000 bb70 	b.w	800e1d8 <__ieee754_atan2f>

0800daf8 <checkint>:
 800daf8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dafc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800db00:	429a      	cmp	r2, r3
 800db02:	b570      	push	{r4, r5, r6, lr}
 800db04:	dd2a      	ble.n	800db5c <checkint+0x64>
 800db06:	f240 4333 	movw	r3, #1075	@ 0x433
 800db0a:	429a      	cmp	r2, r3
 800db0c:	dc24      	bgt.n	800db58 <checkint+0x60>
 800db0e:	1a9b      	subs	r3, r3, r2
 800db10:	f1a3 0620 	sub.w	r6, r3, #32
 800db14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db18:	fa02 f403 	lsl.w	r4, r2, r3
 800db1c:	fa02 f606 	lsl.w	r6, r2, r6
 800db20:	f1c3 0520 	rsb	r5, r3, #32
 800db24:	fa22 f505 	lsr.w	r5, r2, r5
 800db28:	4334      	orrs	r4, r6
 800db2a:	432c      	orrs	r4, r5
 800db2c:	409a      	lsls	r2, r3
 800db2e:	ea20 0202 	bic.w	r2, r0, r2
 800db32:	ea21 0404 	bic.w	r4, r1, r4
 800db36:	4322      	orrs	r2, r4
 800db38:	f1a3 0420 	sub.w	r4, r3, #32
 800db3c:	f1c3 0220 	rsb	r2, r3, #32
 800db40:	d10c      	bne.n	800db5c <checkint+0x64>
 800db42:	40d8      	lsrs	r0, r3
 800db44:	fa01 f302 	lsl.w	r3, r1, r2
 800db48:	4318      	orrs	r0, r3
 800db4a:	40e1      	lsrs	r1, r4
 800db4c:	4308      	orrs	r0, r1
 800db4e:	f000 0001 	and.w	r0, r0, #1
 800db52:	f1d0 0002 	rsbs	r0, r0, #2
 800db56:	bd70      	pop	{r4, r5, r6, pc}
 800db58:	2002      	movs	r0, #2
 800db5a:	e7fc      	b.n	800db56 <checkint+0x5e>
 800db5c:	2000      	movs	r0, #0
 800db5e:	e7fa      	b.n	800db56 <checkint+0x5e>

0800db60 <pow>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	ee10 4a90 	vmov	r4, s1
 800db68:	ed2d 8b0a 	vpush	{d8-d12}
 800db6c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800db70:	ee11 aa90 	vmov	sl, s3
 800db74:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800db78:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800db7c:	429a      	cmp	r2, r3
 800db7e:	ee10 5a10 	vmov	r5, s0
 800db82:	ee11 0a10 	vmov	r0, s2
 800db86:	b087      	sub	sp, #28
 800db88:	46c4      	mov	ip, r8
 800db8a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800db8e:	d806      	bhi.n	800db9e <pow+0x3e>
 800db90:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800db94:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800db98:	2b7f      	cmp	r3, #127	@ 0x7f
 800db9a:	f240 8157 	bls.w	800de4c <pow+0x2ec>
 800db9e:	1802      	adds	r2, r0, r0
 800dba0:	eb4a 010a 	adc.w	r1, sl, sl
 800dba4:	f06f 0b01 	mvn.w	fp, #1
 800dba8:	1e57      	subs	r7, r2, #1
 800dbaa:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 800dbae:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800dbb2:	45bb      	cmp	fp, r7
 800dbb4:	eb7e 0303 	sbcs.w	r3, lr, r3
 800dbb8:	d242      	bcs.n	800dc40 <pow+0xe0>
 800dbba:	ea52 0301 	orrs.w	r3, r2, r1
 800dbbe:	f04f 0300 	mov.w	r3, #0
 800dbc2:	d10c      	bne.n	800dbde <pow+0x7e>
 800dbc4:	196d      	adds	r5, r5, r5
 800dbc6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800dbca:	4164      	adcs	r4, r4
 800dbcc:	42ab      	cmp	r3, r5
 800dbce:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dbd2:	41a3      	sbcs	r3, r4
 800dbd4:	f0c0 808f 	bcc.w	800dcf6 <pow+0x196>
 800dbd8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dbdc:	e02b      	b.n	800dc36 <pow+0xd6>
 800dbde:	4ed4      	ldr	r6, [pc, #848]	@ (800df30 <pow+0x3d0>)
 800dbe0:	42b4      	cmp	r4, r6
 800dbe2:	bf08      	it	eq
 800dbe4:	429d      	cmpeq	r5, r3
 800dbe6:	d109      	bne.n	800dbfc <pow+0x9c>
 800dbe8:	1800      	adds	r0, r0, r0
 800dbea:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800dbee:	eb4a 0a0a 	adc.w	sl, sl, sl
 800dbf2:	4283      	cmp	r3, r0
 800dbf4:	4bcf      	ldr	r3, [pc, #828]	@ (800df34 <pow+0x3d4>)
 800dbf6:	eb73 030a 	sbcs.w	r3, r3, sl
 800dbfa:	e7eb      	b.n	800dbd4 <pow+0x74>
 800dbfc:	196d      	adds	r5, r5, r5
 800dbfe:	48ce      	ldr	r0, [pc, #824]	@ (800df38 <pow+0x3d8>)
 800dc00:	4164      	adcs	r4, r4
 800dc02:	42ab      	cmp	r3, r5
 800dc04:	eb70 0604 	sbcs.w	r6, r0, r4
 800dc08:	d375      	bcc.n	800dcf6 <pow+0x196>
 800dc0a:	4281      	cmp	r1, r0
 800dc0c:	bf08      	it	eq
 800dc0e:	429a      	cmpeq	r2, r3
 800dc10:	d171      	bne.n	800dcf6 <pow+0x196>
 800dc12:	4aca      	ldr	r2, [pc, #808]	@ (800df3c <pow+0x3dc>)
 800dc14:	4294      	cmp	r4, r2
 800dc16:	bf08      	it	eq
 800dc18:	429d      	cmpeq	r5, r3
 800dc1a:	d0dd      	beq.n	800dbd8 <pow+0x78>
 800dc1c:	4294      	cmp	r4, r2
 800dc1e:	ea6f 0a0a 	mvn.w	sl, sl
 800dc22:	bf34      	ite	cc
 800dc24:	2400      	movcc	r4, #0
 800dc26:	2401      	movcs	r4, #1
 800dc28:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800dc2c:	4554      	cmp	r4, sl
 800dc2e:	f040 81dc 	bne.w	800dfea <pow+0x48a>
 800dc32:	ee21 0b01 	vmul.f64	d0, d1, d1
 800dc36:	b007      	add	sp, #28
 800dc38:	ecbd 8b0a 	vpop	{d8-d12}
 800dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc40:	196f      	adds	r7, r5, r5
 800dc42:	eb44 0904 	adc.w	r9, r4, r4
 800dc46:	1e7a      	subs	r2, r7, #1
 800dc48:	f169 0300 	sbc.w	r3, r9, #0
 800dc4c:	4593      	cmp	fp, r2
 800dc4e:	eb7e 0303 	sbcs.w	r3, lr, r3
 800dc52:	d225      	bcs.n	800dca0 <pow+0x140>
 800dc54:	ee20 0b00 	vmul.f64	d0, d0, d0
 800dc58:	2c00      	cmp	r4, #0
 800dc5a:	da13      	bge.n	800dc84 <pow+0x124>
 800dc5c:	4651      	mov	r1, sl
 800dc5e:	f7ff ff4b 	bl	800daf8 <checkint>
 800dc62:	2801      	cmp	r0, #1
 800dc64:	d10e      	bne.n	800dc84 <pow+0x124>
 800dc66:	eeb1 0b40 	vneg.f64	d0, d0
 800dc6a:	ea57 0909 	orrs.w	r9, r7, r9
 800dc6e:	d10b      	bne.n	800dc88 <pow+0x128>
 800dc70:	f1ba 0f00 	cmp.w	sl, #0
 800dc74:	dadf      	bge.n	800dc36 <pow+0xd6>
 800dc76:	b007      	add	sp, #28
 800dc78:	ecbd 8b0a 	vpop	{d8-d12}
 800dc7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc80:	f000 bb7a 	b.w	800e378 <__math_divzero>
 800dc84:	2000      	movs	r0, #0
 800dc86:	e7f0      	b.n	800dc6a <pow+0x10a>
 800dc88:	f1ba 0f00 	cmp.w	sl, #0
 800dc8c:	dad3      	bge.n	800dc36 <pow+0xd6>
 800dc8e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800dc92:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dc96:	ed8d 7b00 	vstr	d7, [sp]
 800dc9a:	ed9d 0b00 	vldr	d0, [sp]
 800dc9e:	e7ca      	b.n	800dc36 <pow+0xd6>
 800dca0:	2c00      	cmp	r4, #0
 800dca2:	da2b      	bge.n	800dcfc <pow+0x19c>
 800dca4:	4651      	mov	r1, sl
 800dca6:	f7ff ff27 	bl	800daf8 <checkint>
 800dcaa:	b930      	cbnz	r0, 800dcba <pow+0x15a>
 800dcac:	b007      	add	sp, #28
 800dcae:	ecbd 8b0a 	vpop	{d8-d12}
 800dcb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb6:	f000 bb77 	b.w	800e3a8 <__math_invalid>
 800dcba:	1e41      	subs	r1, r0, #1
 800dcbc:	4248      	negs	r0, r1
 800dcbe:	4148      	adcs	r0, r1
 800dcc0:	0480      	lsls	r0, r0, #18
 800dcc2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dcc6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800dcca:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800dcce:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800dcd2:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcd4:	d92d      	bls.n	800dd32 <pow+0x1d2>
 800dcd6:	4b96      	ldr	r3, [pc, #600]	@ (800df30 <pow+0x3d0>)
 800dcd8:	2000      	movs	r0, #0
 800dcda:	429c      	cmp	r4, r3
 800dcdc:	bf08      	it	eq
 800dcde:	4285      	cmpeq	r5, r0
 800dce0:	f43f af7a 	beq.w	800dbd8 <pow+0x78>
 800dce4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800dce8:	428a      	cmp	r2, r1
 800dcea:	d80c      	bhi.n	800dd06 <pow+0x1a6>
 800dcec:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dcf0:	42a8      	cmp	r0, r5
 800dcf2:	41a3      	sbcs	r3, r4
 800dcf4:	d204      	bcs.n	800dd00 <pow+0x1a0>
 800dcf6:	ee31 0b00 	vadd.f64	d0, d1, d0
 800dcfa:	e79c      	b.n	800dc36 <pow+0xd6>
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	e7e4      	b.n	800dcca <pow+0x16a>
 800dd00:	ee30 0b41 	vsub.f64	d0, d0, d1
 800dd04:	e797      	b.n	800dc36 <pow+0xd6>
 800dd06:	2d01      	cmp	r5, #1
 800dd08:	eb74 0303 	sbcs.w	r3, r4, r3
 800dd0c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800dd10:	bf34      	ite	cc
 800dd12:	2301      	movcc	r3, #1
 800dd14:	2300      	movcs	r3, #0
 800dd16:	4296      	cmp	r6, r2
 800dd18:	bf8c      	ite	hi
 800dd1a:	2600      	movhi	r6, #0
 800dd1c:	2601      	movls	r6, #1
 800dd1e:	42b3      	cmp	r3, r6
 800dd20:	f000 809c 	beq.w	800de5c <pow+0x2fc>
 800dd24:	b007      	add	sp, #28
 800dd26:	ecbd 8b0a 	vpop	{d8-d12}
 800dd2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd2e:	f000 bb1b 	b.w	800e368 <__math_oflow>
 800dd32:	f1bc 0f00 	cmp.w	ip, #0
 800dd36:	d10a      	bne.n	800dd4e <pow+0x1ee>
 800dd38:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800df20 <pow+0x3c0>
 800dd3c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dd40:	ec53 2b17 	vmov	r2, r3, d7
 800dd44:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800dd48:	4615      	mov	r5, r2
 800dd4a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800dd4e:	4a7c      	ldr	r2, [pc, #496]	@ (800df40 <pow+0x3e0>)
 800dd50:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800dd54:	4422      	add	r2, r4
 800dd56:	1513      	asrs	r3, r2, #20
 800dd58:	ee03 3a10 	vmov	s6, r3
 800dd5c:	4b79      	ldr	r3, [pc, #484]	@ (800df44 <pow+0x3e4>)
 800dd5e:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800dd62:	f36f 0213 	bfc	r2, #0, #20
 800dd66:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800dd6a:	1aa7      	subs	r7, r4, r2
 800dd6c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800dd70:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800dd74:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800dd78:	1e2e      	subs	r6, r5, #0
 800dd7a:	ec47 6b14 	vmov	d4, r6, r7
 800dd7e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800dd82:	eea4 6b05 	vfma.f64	d6, d4, d5
 800dd86:	ed93 5b00 	vldr	d5, [r3]
 800dd8a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800dd8e:	eea3 2b05 	vfma.f64	d2, d3, d5
 800dd92:	ed93 5b02 	vldr	d5, [r3, #8]
 800dd96:	ee36 4b02 	vadd.f64	d4, d6, d2
 800dd9a:	ee32 2b44 	vsub.f64	d2, d2, d4
 800dd9e:	eea3 7b05 	vfma.f64	d7, d3, d5
 800dda2:	ed93 5b04 	vldr	d5, [r3, #16]
 800dda6:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ddaa:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ddae:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ddb2:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ddb6:	ee34 8b00 	vadd.f64	d8, d4, d0
 800ddba:	eeb0 9b40 	vmov.f64	d9, d0
 800ddbe:	ee34 4b48 	vsub.f64	d4, d4, d8
 800ddc2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800ddc6:	ee34 ab00 	vadd.f64	d10, d4, d0
 800ddca:	ed93 5b06 	vldr	d5, [r3, #24]
 800ddce:	ee26 bb00 	vmul.f64	d11, d6, d0
 800ddd2:	ee37 7b09 	vadd.f64	d7, d7, d9
 800ddd6:	ed93 4b08 	vldr	d4, [r3, #32]
 800ddda:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800ddde:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800dde2:	eea6 5b04 	vfma.f64	d5, d6, d4
 800dde6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800ddea:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800ddee:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ddf2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800ddf6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800ddfa:	eea0 4b03 	vfma.f64	d4, d0, d3
 800ddfe:	eea0 5b04 	vfma.f64	d5, d0, d4
 800de02:	eeab 7b05 	vfma.f64	d7, d11, d5
 800de06:	ee38 4b07 	vadd.f64	d4, d8, d7
 800de0a:	ee21 6b04 	vmul.f64	d6, d1, d4
 800de0e:	ee16 3a90 	vmov	r3, s13
 800de12:	eeb0 5b46 	vmov.f64	d5, d6
 800de16:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800de1a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800de1e:	18b2      	adds	r2, r6, r2
 800de20:	2a3e      	cmp	r2, #62	@ 0x3e
 800de22:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800de26:	ee38 8b44 	vsub.f64	d8, d8, d4
 800de2a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800de2e:	eea1 5b08 	vfma.f64	d5, d1, d8
 800de32:	d91b      	bls.n	800de6c <pow+0x30c>
 800de34:	2a00      	cmp	r2, #0
 800de36:	da0b      	bge.n	800de50 <pow+0x2f0>
 800de38:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800de3c:	ee36 0b00 	vadd.f64	d0, d6, d0
 800de40:	2800      	cmp	r0, #0
 800de42:	f43f aef8 	beq.w	800dc36 <pow+0xd6>
 800de46:	eeb1 0b40 	vneg.f64	d0, d0
 800de4a:	e6f4      	b.n	800dc36 <pow+0xd6>
 800de4c:	2000      	movs	r0, #0
 800de4e:	e77e      	b.n	800dd4e <pow+0x1ee>
 800de50:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800de54:	d909      	bls.n	800de6a <pow+0x30a>
 800de56:	2b00      	cmp	r3, #0
 800de58:	f6bf af64 	bge.w	800dd24 <pow+0x1c4>
 800de5c:	b007      	add	sp, #28
 800de5e:	ecbd 8b0a 	vpop	{d8-d12}
 800de62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de66:	f000 ba77 	b.w	800e358 <__math_uflow>
 800de6a:	2600      	movs	r6, #0
 800de6c:	4936      	ldr	r1, [pc, #216]	@ (800df48 <pow+0x3e8>)
 800de6e:	ed91 4b02 	vldr	d4, [r1, #8]
 800de72:	ed91 3b00 	vldr	d3, [r1]
 800de76:	eeb0 7b44 	vmov.f64	d7, d4
 800de7a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800de7e:	ee17 5a10 	vmov	r5, s14
 800de82:	ee37 7b44 	vsub.f64	d7, d7, d4
 800de86:	ed91 4b04 	vldr	d4, [r1, #16]
 800de8a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800de8e:	eea7 6b04 	vfma.f64	d6, d7, d4
 800de92:	ed91 4b06 	vldr	d4, [r1, #24]
 800de96:	18dc      	adds	r4, r3, r3
 800de98:	f104 030f 	add.w	r3, r4, #15
 800de9c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800dea0:	eea7 6b04 	vfma.f64	d6, d7, d4
 800dea4:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800dea8:	ee35 5b06 	vadd.f64	d5, d5, d6
 800deac:	ee25 6b05 	vmul.f64	d6, d5, d5
 800deb0:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800deb4:	ed91 4b08 	vldr	d4, [r1, #32]
 800deb8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800debc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800dec0:	eea5 4b03 	vfma.f64	d4, d5, d3
 800dec4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800dec8:	eea6 7b04 	vfma.f64	d7, d6, d4
 800decc:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ded0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800ded4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800ded8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800dedc:	eea5 4b03 	vfma.f64	d4, d5, d3
 800dee0:	1940      	adds	r0, r0, r5
 800dee2:	2700      	movs	r7, #0
 800dee4:	eb17 020c 	adds.w	r2, r7, ip
 800dee8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800deec:	eea6 7b04 	vfma.f64	d7, d6, d4
 800def0:	2e00      	cmp	r6, #0
 800def2:	d175      	bne.n	800dfe0 <pow+0x480>
 800def4:	42bd      	cmp	r5, r7
 800def6:	db29      	blt.n	800df4c <pow+0x3ec>
 800def8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800defc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800df00:	4610      	mov	r0, r2
 800df02:	ec41 0b10 	vmov	d0, r0, r1
 800df06:	eea7 0b00 	vfma.f64	d0, d7, d0
 800df0a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800df28 <pow+0x3c8>
 800df0e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800df12:	b007      	add	sp, #28
 800df14:	ecbd 8b0a 	vpop	{d8-d12}
 800df18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	f000 ba5c 	b.w	800e3d8 <__math_check_oflow>
 800df20:	00000000 	.word	0x00000000
 800df24:	43300000 	.word	0x43300000
 800df28:	00000000 	.word	0x00000000
 800df2c:	7f000000 	.word	0x7f000000
 800df30:	3ff00000 	.word	0x3ff00000
 800df34:	fff00000 	.word	0xfff00000
 800df38:	ffe00000 	.word	0xffe00000
 800df3c:	7fe00000 	.word	0x7fe00000
 800df40:	c0196aab 	.word	0xc0196aab
 800df44:	0800ea20 	.word	0x0800ea20
 800df48:	0800fa80 	.word	0x0800fa80
 800df4c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800df50:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800df54:	4610      	mov	r0, r2
 800df56:	ec41 0b15 	vmov	d5, r0, r1
 800df5a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800df5e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800df62:	ee35 7b06 	vadd.f64	d7, d5, d6
 800df66:	eeb0 4bc7 	vabs.f64	d4, d7
 800df6a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800df6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df72:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800dff0 <pow+0x490>
 800df76:	d52a      	bpl.n	800dfce <pow+0x46e>
 800df78:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800df7c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800df80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df84:	ee35 5b06 	vadd.f64	d5, d5, d6
 800df88:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800df8c:	bf58      	it	pl
 800df8e:	eeb0 4b43 	vmovpl.f64	d4, d3
 800df92:	ee37 3b04 	vadd.f64	d3, d7, d4
 800df96:	ee34 6b43 	vsub.f64	d6, d4, d3
 800df9a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800df9e:	ee36 6b05 	vadd.f64	d6, d6, d5
 800dfa2:	ee36 6b03 	vadd.f64	d6, d6, d3
 800dfa6:	ee36 7b44 	vsub.f64	d7, d6, d4
 800dfaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb2:	d104      	bne.n	800dfbe <pow+0x45e>
 800dfb4:	4632      	mov	r2, r6
 800dfb6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800dfba:	ec43 2b17 	vmov	d7, r2, r3
 800dfbe:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dfc2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dfc6:	ee26 6b00 	vmul.f64	d6, d6, d0
 800dfca:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dfce:	ee27 0b00 	vmul.f64	d0, d7, d0
 800dfd2:	b007      	add	sp, #28
 800dfd4:	ecbd 8b0a 	vpop	{d8-d12}
 800dfd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfdc:	f000 b9f3 	b.w	800e3c6 <__math_check_uflow>
 800dfe0:	ec43 2b10 	vmov	d0, r2, r3
 800dfe4:	eea7 0b00 	vfma.f64	d0, d7, d0
 800dfe8:	e625      	b.n	800dc36 <pow+0xd6>
 800dfea:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800dff8 <pow+0x498>
 800dfee:	e622      	b.n	800dc36 <pow+0xd6>
 800dff0:	00000000 	.word	0x00000000
 800dff4:	00100000 	.word	0x00100000
	...

0800e000 <fabsf>:
 800e000:	ee10 3a10 	vmov	r3, s0
 800e004:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e008:	ee00 3a10 	vmov	s0, r3
 800e00c:	4770      	bx	lr
	...

0800e010 <__ieee754_asinf>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	ee10 5a10 	vmov	r5, s0
 800e016:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e01a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800e01e:	ed2d 8b04 	vpush	{d8-d9}
 800e022:	d10c      	bne.n	800e03e <__ieee754_asinf+0x2e>
 800e024:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e198 <__ieee754_asinf+0x188>
 800e028:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800e19c <__ieee754_asinf+0x18c>
 800e02c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e030:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e034:	eeb0 0a67 	vmov.f32	s0, s15
 800e038:	ecbd 8b04 	vpop	{d8-d9}
 800e03c:	bd38      	pop	{r3, r4, r5, pc}
 800e03e:	d904      	bls.n	800e04a <__ieee754_asinf+0x3a>
 800e040:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e044:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e048:	e7f6      	b.n	800e038 <__ieee754_asinf+0x28>
 800e04a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e04e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e052:	d20b      	bcs.n	800e06c <__ieee754_asinf+0x5c>
 800e054:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800e058:	d252      	bcs.n	800e100 <__ieee754_asinf+0xf0>
 800e05a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800e1a0 <__ieee754_asinf+0x190>
 800e05e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e062:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e06a:	dce5      	bgt.n	800e038 <__ieee754_asinf+0x28>
 800e06c:	f7ff ffc8 	bl	800e000 <fabsf>
 800e070:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800e074:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e078:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e07c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e1a4 <__ieee754_asinf+0x194>
 800e080:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800e1a8 <__ieee754_asinf+0x198>
 800e084:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 800e1ac <__ieee754_asinf+0x19c>
 800e088:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e08c:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800e1b0 <__ieee754_asinf+0x1a0>
 800e090:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e094:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800e1b4 <__ieee754_asinf+0x1a4>
 800e098:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e09c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800e1b8 <__ieee754_asinf+0x1a8>
 800e0a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e0a4:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800e1bc <__ieee754_asinf+0x1ac>
 800e0a8:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e0ac:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800e1c0 <__ieee754_asinf+0x1b0>
 800e0b0:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e0b4:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800e1c4 <__ieee754_asinf+0x1b4>
 800e0b8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e0bc:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800e1c8 <__ieee754_asinf+0x1b8>
 800e0c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e0c4:	eeb0 0a48 	vmov.f32	s0, s16
 800e0c8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e0cc:	f000 f922 	bl	800e314 <__ieee754_sqrtf>
 800e0d0:	4b3e      	ldr	r3, [pc, #248]	@ (800e1cc <__ieee754_asinf+0x1bc>)
 800e0d2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e0d6:	429c      	cmp	r4, r3
 800e0d8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e0dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e0e0:	d93d      	bls.n	800e15e <__ieee754_asinf+0x14e>
 800e0e2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e0e6:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800e1d0 <__ieee754_asinf+0x1c0>
 800e0ea:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e0ee:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800e19c <__ieee754_asinf+0x18c>
 800e0f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e0f6:	2d00      	cmp	r5, #0
 800e0f8:	bfd8      	it	le
 800e0fa:	eeb1 0a40 	vnegle.f32	s0, s0
 800e0fe:	e79b      	b.n	800e038 <__ieee754_asinf+0x28>
 800e100:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e104:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800e1a8 <__ieee754_asinf+0x198>
 800e108:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e1a4 <__ieee754_asinf+0x194>
 800e10c:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 800e1bc <__ieee754_asinf+0x1ac>
 800e110:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e114:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e1b0 <__ieee754_asinf+0x1a0>
 800e118:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e11c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800e1b4 <__ieee754_asinf+0x1a4>
 800e120:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e124:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800e1b8 <__ieee754_asinf+0x1a8>
 800e128:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e12c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800e1ac <__ieee754_asinf+0x19c>
 800e130:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e134:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800e1c0 <__ieee754_asinf+0x1b0>
 800e138:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e13c:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800e1c4 <__ieee754_asinf+0x1b4>
 800e140:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e144:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800e1c8 <__ieee754_asinf+0x1b8>
 800e148:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e14c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e150:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e154:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e158:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e15c:	e76c      	b.n	800e038 <__ieee754_asinf+0x28>
 800e15e:	ee10 3a10 	vmov	r3, s0
 800e162:	f36f 030b 	bfc	r3, #0, #12
 800e166:	ee07 3a10 	vmov	s14, r3
 800e16a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e16e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e172:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e176:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e198 <__ieee754_asinf+0x188>
 800e17a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e17e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800e1d4 <__ieee754_asinf+0x1c4>
 800e182:	eee5 7a66 	vfms.f32	s15, s10, s13
 800e186:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e18a:	eeb0 6a40 	vmov.f32	s12, s0
 800e18e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e192:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e196:	e7ac      	b.n	800e0f2 <__ieee754_asinf+0xe2>
 800e198:	b33bbd2e 	.word	0xb33bbd2e
 800e19c:	3fc90fdb 	.word	0x3fc90fdb
 800e1a0:	7149f2ca 	.word	0x7149f2ca
 800e1a4:	3a4f7f04 	.word	0x3a4f7f04
 800e1a8:	3811ef08 	.word	0x3811ef08
 800e1ac:	3e2aaaab 	.word	0x3e2aaaab
 800e1b0:	bd241146 	.word	0xbd241146
 800e1b4:	3e4e0aa8 	.word	0x3e4e0aa8
 800e1b8:	bea6b090 	.word	0xbea6b090
 800e1bc:	3d9dc62e 	.word	0x3d9dc62e
 800e1c0:	bf303361 	.word	0xbf303361
 800e1c4:	4001572d 	.word	0x4001572d
 800e1c8:	c019d139 	.word	0xc019d139
 800e1cc:	3f799999 	.word	0x3f799999
 800e1d0:	333bbd2e 	.word	0x333bbd2e
 800e1d4:	3f490fdb 	.word	0x3f490fdb

0800e1d8 <__ieee754_atan2f>:
 800e1d8:	ee10 2a90 	vmov	r2, s1
 800e1dc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e1e0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e1e4:	b510      	push	{r4, lr}
 800e1e6:	eef0 7a40 	vmov.f32	s15, s0
 800e1ea:	d806      	bhi.n	800e1fa <__ieee754_atan2f+0x22>
 800e1ec:	ee10 0a10 	vmov	r0, s0
 800e1f0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e1f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e1f8:	d904      	bls.n	800e204 <__ieee754_atan2f+0x2c>
 800e1fa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e1fe:	eeb0 0a67 	vmov.f32	s0, s15
 800e202:	bd10      	pop	{r4, pc}
 800e204:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e208:	d103      	bne.n	800e212 <__ieee754_atan2f+0x3a>
 800e20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e20e:	f000 b8f7 	b.w	800e400 <atanf>
 800e212:	1794      	asrs	r4, r2, #30
 800e214:	f004 0402 	and.w	r4, r4, #2
 800e218:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e21c:	b93b      	cbnz	r3, 800e22e <__ieee754_atan2f+0x56>
 800e21e:	2c02      	cmp	r4, #2
 800e220:	d05c      	beq.n	800e2dc <__ieee754_atan2f+0x104>
 800e222:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800e2f0 <__ieee754_atan2f+0x118>
 800e226:	2c03      	cmp	r4, #3
 800e228:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800e22c:	e7e7      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e22e:	b939      	cbnz	r1, 800e240 <__ieee754_atan2f+0x68>
 800e230:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800e2f4 <__ieee754_atan2f+0x11c>
 800e234:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800e2f8 <__ieee754_atan2f+0x120>
 800e238:	2800      	cmp	r0, #0
 800e23a:	fe67 7a27 	vselge.f32	s15, s14, s15
 800e23e:	e7de      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e240:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e244:	d110      	bne.n	800e268 <__ieee754_atan2f+0x90>
 800e246:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e24a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800e24e:	d107      	bne.n	800e260 <__ieee754_atan2f+0x88>
 800e250:	2c02      	cmp	r4, #2
 800e252:	d846      	bhi.n	800e2e2 <__ieee754_atan2f+0x10a>
 800e254:	4b29      	ldr	r3, [pc, #164]	@ (800e2fc <__ieee754_atan2f+0x124>)
 800e256:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e25a:	edd3 7a00 	vldr	s15, [r3]
 800e25e:	e7ce      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e260:	2c02      	cmp	r4, #2
 800e262:	d841      	bhi.n	800e2e8 <__ieee754_atan2f+0x110>
 800e264:	4b26      	ldr	r3, [pc, #152]	@ (800e300 <__ieee754_atan2f+0x128>)
 800e266:	e7f6      	b.n	800e256 <__ieee754_atan2f+0x7e>
 800e268:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e26c:	d0e0      	beq.n	800e230 <__ieee754_atan2f+0x58>
 800e26e:	1a5b      	subs	r3, r3, r1
 800e270:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e274:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e278:	da1a      	bge.n	800e2b0 <__ieee754_atan2f+0xd8>
 800e27a:	2a00      	cmp	r2, #0
 800e27c:	da01      	bge.n	800e282 <__ieee754_atan2f+0xaa>
 800e27e:	313c      	adds	r1, #60	@ 0x3c
 800e280:	db19      	blt.n	800e2b6 <__ieee754_atan2f+0xde>
 800e282:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e286:	f7ff febb 	bl	800e000 <fabsf>
 800e28a:	f000 f8b9 	bl	800e400 <atanf>
 800e28e:	eef0 7a40 	vmov.f32	s15, s0
 800e292:	2c01      	cmp	r4, #1
 800e294:	d012      	beq.n	800e2bc <__ieee754_atan2f+0xe4>
 800e296:	2c02      	cmp	r4, #2
 800e298:	d017      	beq.n	800e2ca <__ieee754_atan2f+0xf2>
 800e29a:	2c00      	cmp	r4, #0
 800e29c:	d0af      	beq.n	800e1fe <__ieee754_atan2f+0x26>
 800e29e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e304 <__ieee754_atan2f+0x12c>
 800e2a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2a6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e308 <__ieee754_atan2f+0x130>
 800e2aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2ae:	e7a6      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e2b0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800e2f8 <__ieee754_atan2f+0x120>
 800e2b4:	e7ed      	b.n	800e292 <__ieee754_atan2f+0xba>
 800e2b6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e30c <__ieee754_atan2f+0x134>
 800e2ba:	e7ea      	b.n	800e292 <__ieee754_atan2f+0xba>
 800e2bc:	ee17 3a90 	vmov	r3, s15
 800e2c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e2c4:	ee07 3a90 	vmov	s15, r3
 800e2c8:	e799      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e2ca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e304 <__ieee754_atan2f+0x12c>
 800e2ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e308 <__ieee754_atan2f+0x130>
 800e2d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2da:	e790      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e2dc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e308 <__ieee754_atan2f+0x130>
 800e2e0:	e78d      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e2e2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e310 <__ieee754_atan2f+0x138>
 800e2e6:	e78a      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e2e8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e30c <__ieee754_atan2f+0x134>
 800e2ec:	e787      	b.n	800e1fe <__ieee754_atan2f+0x26>
 800e2ee:	bf00      	nop
 800e2f0:	c0490fdb 	.word	0xc0490fdb
 800e2f4:	bfc90fdb 	.word	0xbfc90fdb
 800e2f8:	3fc90fdb 	.word	0x3fc90fdb
 800e2fc:	0800fa74 	.word	0x0800fa74
 800e300:	0800fa68 	.word	0x0800fa68
 800e304:	33bbbd2e 	.word	0x33bbbd2e
 800e308:	40490fdb 	.word	0x40490fdb
 800e30c:	00000000 	.word	0x00000000
 800e310:	3f490fdb 	.word	0x3f490fdb

0800e314 <__ieee754_sqrtf>:
 800e314:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e318:	4770      	bx	lr

0800e31a <with_errno>:
 800e31a:	b510      	push	{r4, lr}
 800e31c:	ed2d 8b02 	vpush	{d8}
 800e320:	eeb0 8b40 	vmov.f64	d8, d0
 800e324:	4604      	mov	r4, r0
 800e326:	f7fc feaf 	bl	800b088 <__errno>
 800e32a:	eeb0 0b48 	vmov.f64	d0, d8
 800e32e:	ecbd 8b02 	vpop	{d8}
 800e332:	6004      	str	r4, [r0, #0]
 800e334:	bd10      	pop	{r4, pc}

0800e336 <xflow>:
 800e336:	b082      	sub	sp, #8
 800e338:	b158      	cbz	r0, 800e352 <xflow+0x1c>
 800e33a:	eeb1 7b40 	vneg.f64	d7, d0
 800e33e:	ed8d 7b00 	vstr	d7, [sp]
 800e342:	ed9d 7b00 	vldr	d7, [sp]
 800e346:	2022      	movs	r0, #34	@ 0x22
 800e348:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e34c:	b002      	add	sp, #8
 800e34e:	f7ff bfe4 	b.w	800e31a <with_errno>
 800e352:	eeb0 7b40 	vmov.f64	d7, d0
 800e356:	e7f2      	b.n	800e33e <xflow+0x8>

0800e358 <__math_uflow>:
 800e358:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e360 <__math_uflow+0x8>
 800e35c:	f7ff bfeb 	b.w	800e336 <xflow>
 800e360:	00000000 	.word	0x00000000
 800e364:	10000000 	.word	0x10000000

0800e368 <__math_oflow>:
 800e368:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e370 <__math_oflow+0x8>
 800e36c:	f7ff bfe3 	b.w	800e336 <xflow>
 800e370:	00000000 	.word	0x00000000
 800e374:	70000000 	.word	0x70000000

0800e378 <__math_divzero>:
 800e378:	b082      	sub	sp, #8
 800e37a:	2800      	cmp	r0, #0
 800e37c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800e380:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e384:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800e388:	ed8d 7b00 	vstr	d7, [sp]
 800e38c:	ed9d 0b00 	vldr	d0, [sp]
 800e390:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800e3a0 <__math_divzero+0x28>
 800e394:	2022      	movs	r0, #34	@ 0x22
 800e396:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e39a:	b002      	add	sp, #8
 800e39c:	f7ff bfbd 	b.w	800e31a <with_errno>
	...

0800e3a8 <__math_invalid>:
 800e3a8:	eeb0 7b40 	vmov.f64	d7, d0
 800e3ac:	eeb4 7b47 	vcmp.f64	d7, d7
 800e3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e3b8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e3bc:	d602      	bvs.n	800e3c4 <__math_invalid+0x1c>
 800e3be:	2021      	movs	r0, #33	@ 0x21
 800e3c0:	f7ff bfab 	b.w	800e31a <with_errno>
 800e3c4:	4770      	bx	lr

0800e3c6 <__math_check_uflow>:
 800e3c6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ce:	d102      	bne.n	800e3d6 <__math_check_uflow+0x10>
 800e3d0:	2022      	movs	r0, #34	@ 0x22
 800e3d2:	f7ff bfa2 	b.w	800e31a <with_errno>
 800e3d6:	4770      	bx	lr

0800e3d8 <__math_check_oflow>:
 800e3d8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800e3f8 <__math_check_oflow+0x20>
 800e3dc:	eeb0 7bc0 	vabs.f64	d7, d0
 800e3e0:	eeb4 7b46 	vcmp.f64	d7, d6
 800e3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e8:	dd02      	ble.n	800e3f0 <__math_check_oflow+0x18>
 800e3ea:	2022      	movs	r0, #34	@ 0x22
 800e3ec:	f7ff bf95 	b.w	800e31a <with_errno>
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	f3af 8000 	nop.w
 800e3f8:	ffffffff 	.word	0xffffffff
 800e3fc:	7fefffff 	.word	0x7fefffff

0800e400 <atanf>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	ee10 5a10 	vmov	r5, s0
 800e406:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e40a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e40e:	eef0 7a40 	vmov.f32	s15, s0
 800e412:	d30f      	bcc.n	800e434 <atanf+0x34>
 800e414:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e418:	d904      	bls.n	800e424 <atanf+0x24>
 800e41a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e41e:	eeb0 0a67 	vmov.f32	s0, s15
 800e422:	bd38      	pop	{r3, r4, r5, pc}
 800e424:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e55c <atanf+0x15c>
 800e428:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e560 <atanf+0x160>
 800e42c:	2d00      	cmp	r5, #0
 800e42e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800e432:	e7f4      	b.n	800e41e <atanf+0x1e>
 800e434:	4b4b      	ldr	r3, [pc, #300]	@ (800e564 <atanf+0x164>)
 800e436:	429c      	cmp	r4, r3
 800e438:	d810      	bhi.n	800e45c <atanf+0x5c>
 800e43a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e43e:	d20a      	bcs.n	800e456 <atanf+0x56>
 800e440:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e568 <atanf+0x168>
 800e444:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e44c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	dce3      	bgt.n	800e41e <atanf+0x1e>
 800e456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e45a:	e013      	b.n	800e484 <atanf+0x84>
 800e45c:	f7ff fdd0 	bl	800e000 <fabsf>
 800e460:	4b42      	ldr	r3, [pc, #264]	@ (800e56c <atanf+0x16c>)
 800e462:	429c      	cmp	r4, r3
 800e464:	d84f      	bhi.n	800e506 <atanf+0x106>
 800e466:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e46a:	429c      	cmp	r4, r3
 800e46c:	d841      	bhi.n	800e4f2 <atanf+0xf2>
 800e46e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e472:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e476:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e47a:	2300      	movs	r3, #0
 800e47c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e480:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e48a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800e570 <atanf+0x170>
 800e48e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800e574 <atanf+0x174>
 800e492:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800e578 <atanf+0x178>
 800e496:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e49a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e49e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800e57c <atanf+0x17c>
 800e4a2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e4a6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800e580 <atanf+0x180>
 800e4aa:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e4ae:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800e584 <atanf+0x184>
 800e4b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e4b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e588 <atanf+0x188>
 800e4ba:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e4be:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800e58c <atanf+0x18c>
 800e4c2:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e4c6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e590 <atanf+0x190>
 800e4ca:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e4ce:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800e594 <atanf+0x194>
 800e4d2:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e4d6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800e598 <atanf+0x198>
 800e4da:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e4de:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e4e2:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e4e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e4ea:	d121      	bne.n	800e530 <atanf+0x130>
 800e4ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4f0:	e795      	b.n	800e41e <atanf+0x1e>
 800e4f2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e4f6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e4fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e4fe:	2301      	movs	r3, #1
 800e500:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e504:	e7be      	b.n	800e484 <atanf+0x84>
 800e506:	4b25      	ldr	r3, [pc, #148]	@ (800e59c <atanf+0x19c>)
 800e508:	429c      	cmp	r4, r3
 800e50a:	d80b      	bhi.n	800e524 <atanf+0x124>
 800e50c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e514:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e518:	2302      	movs	r3, #2
 800e51a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e522:	e7af      	b.n	800e484 <atanf+0x84>
 800e524:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e528:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e52c:	2303      	movs	r3, #3
 800e52e:	e7a9      	b.n	800e484 <atanf+0x84>
 800e530:	4a1b      	ldr	r2, [pc, #108]	@ (800e5a0 <atanf+0x1a0>)
 800e532:	491c      	ldr	r1, [pc, #112]	@ (800e5a4 <atanf+0x1a4>)
 800e534:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e538:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e53c:	edd3 6a00 	vldr	s13, [r3]
 800e540:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e544:	2d00      	cmp	r5, #0
 800e546:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e54a:	edd2 7a00 	vldr	s15, [r2]
 800e54e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e552:	bfb8      	it	lt
 800e554:	eef1 7a67 	vneglt.f32	s15, s15
 800e558:	e761      	b.n	800e41e <atanf+0x1e>
 800e55a:	bf00      	nop
 800e55c:	bfc90fdb 	.word	0xbfc90fdb
 800e560:	3fc90fdb 	.word	0x3fc90fdb
 800e564:	3edfffff 	.word	0x3edfffff
 800e568:	7149f2ca 	.word	0x7149f2ca
 800e56c:	3f97ffff 	.word	0x3f97ffff
 800e570:	3c8569d7 	.word	0x3c8569d7
 800e574:	3d4bda59 	.word	0x3d4bda59
 800e578:	bd6ef16b 	.word	0xbd6ef16b
 800e57c:	3d886b35 	.word	0x3d886b35
 800e580:	3dba2e6e 	.word	0x3dba2e6e
 800e584:	3e124925 	.word	0x3e124925
 800e588:	3eaaaaab 	.word	0x3eaaaaab
 800e58c:	bd15a221 	.word	0xbd15a221
 800e590:	bd9d8795 	.word	0xbd9d8795
 800e594:	bde38e38 	.word	0xbde38e38
 800e598:	be4ccccd 	.word	0xbe4ccccd
 800e59c:	401bffff 	.word	0x401bffff
 800e5a0:	08010300 	.word	0x08010300
 800e5a4:	080102f0 	.word	0x080102f0

0800e5a8 <_init>:
 800e5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5aa:	bf00      	nop
 800e5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ae:	bc08      	pop	{r3}
 800e5b0:	469e      	mov	lr, r3
 800e5b2:	4770      	bx	lr

0800e5b4 <_fini>:
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	bf00      	nop
 800e5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ba:	bc08      	pop	{r3}
 800e5bc:	469e      	mov	lr, r3
 800e5be:	4770      	bx	lr
