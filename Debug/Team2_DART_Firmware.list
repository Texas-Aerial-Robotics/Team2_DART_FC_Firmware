
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e360  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d58  0800e600  0800e600  0000f600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010358  08010358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010360  08010360  00011360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010364  08010364  00011364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08010368  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d8  240001e0  08010544  000121e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240006b8  08010544  000126b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000193e8  00000000  00000000  0001220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f31  00000000  00000000  0002b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001350  00000000  00000000  0002e528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0d  00000000  00000000  0002f878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038eb8  00000000  00000000  00030785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019dbb  00000000  00000000  0006963d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169749  00000000  00000000  000833f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ecb41  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068d8  00000000  00000000  001ecb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001f345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e5e8 	.word	0x0800e5e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800e5e8 	.word	0x0800e5e8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float q[4], float gx, float gy, float gz, float ax, float ay, float az) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b092      	sub	sp, #72	@ 0x48
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	61f8      	str	r0, [r7, #28]
 8000a70:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a74:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a78:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000a80:	ed87 2a02 	vstr	s4, [r7, #8]
 8000a84:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a94:	d10e      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa2:	d107      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab0:	f000 8136 	beq.w	8000d20 <MahonyAHRSupdateIMU+0x2b8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	f000 fa3c 	bl	8000f54 <invSqrt>
 8000adc:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8000ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ae4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aec:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8000af0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000af4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afc:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8000b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b04:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b0c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3304      	adds	r3, #4
 8000b14:	ed93 7a00 	vldr	s14, [r3]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	330c      	adds	r3, #12
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	edd3 6a00 	vldr	s13, [r3]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	ed93 7a00 	vldr	s14, [r3]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	3308      	adds	r3, #8
 8000b54:	edd3 6a00 	vldr	s13, [r3]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	330c      	adds	r3, #12
 8000b5c:	edd3 7a00 	vldr	s15, [r3]
 8000b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	ed93 7a00 	vldr	s14, [r3]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	330c      	adds	r3, #12
 8000b88:	edd3 6a00 	vldr	s13, [r3]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	330c      	adds	r3, #12
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8000ba0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ba4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bac:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bb0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 8000bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bcc:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bdc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8000be0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bec:	edd7 6a02 	vldr	s13, [r7, #8]
 8000bf0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bfc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8000c00:	4bcd      	ldr	r3, [pc, #820]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	dd54      	ble.n	8000cba <MahonyAHRSupdateIMU+0x252>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8000c10:	4bc9      	ldr	r3, [pc, #804]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c26:	4bc6      	ldr	r3, [pc, #792]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c30:	4bc3      	ldr	r3, [pc, #780]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c32:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8000c36:	4bc0      	ldr	r3, [pc, #768]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c38:	ed93 7a00 	vldr	s14, [r3]
 8000c3c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c44:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c4c:	4bbd      	ldr	r3, [pc, #756]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	4bbb      	ldr	r3, [pc, #748]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8000c5c:	4bb6      	ldr	r3, [pc, #728]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c72:	4bb5      	ldr	r3, [pc, #724]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	4bb2      	ldr	r3, [pc, #712]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8000c82:	4baf      	ldr	r3, [pc, #700]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c90:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8000c94:	4bab      	ldr	r3, [pc, #684]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca2:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8000ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a04 	vstr	s15, [r7, #16]
 8000cb8:	e00b      	b.n	8000cd2 <MahonyAHRSupdateIMU+0x26a>
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8000cba:	4ba1      	ldr	r3, [pc, #644]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8000cca:	4b9f      	ldr	r3, [pc, #636]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8000cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cd4:	ed93 7a00 	vldr	s14, [r3]
 8000cd8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8000cec:	4b97      	ldr	r3, [pc, #604]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cee:	ed93 7a00 	vldr	s14, [r3]
 8000cf2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d02:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8000d06:	4b91      	ldr	r3, [pc, #580]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000d08:	ed93 7a00 	vldr	s14, [r3]
 8000d0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d14:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1c:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8000d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d24:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2c:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * (1.0f / sampleFreq));
 8000d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d34:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * (1.0f / sampleFreq));
 8000d40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d44:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q[0];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	ed93 7a00 	vldr	s14, [r3]
 8000d68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d6c:	eef1 6a67 	vneg.f32	s13, s15
 8000d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d78:	ed97 6a08 	vldr	s12, [r7, #32]
 8000d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	330c      	adds	r3, #12
 8000d8c:	ed93 6a00 	vldr	s12, [r3]
 8000d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	ed93 7a00 	vldr	s14, [r3]
 8000dae:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dba:	ed97 6a08 	vldr	s12, [r7, #32]
 8000dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	ed93 6a00 	vldr	s12, [r3]
 8000dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3308      	adds	r3, #8
 8000dee:	ed93 7a00 	vldr	s14, [r3]
 8000df2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dfe:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	330c      	adds	r3, #12
 8000e12:	ed93 6a00 	vldr	s12, [r3]
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3308      	adds	r3, #8
 8000e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2a:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	330c      	adds	r3, #12
 8000e32:	ed93 7a00 	vldr	s14, [r3]
 8000e36:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e42:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e52:	ed97 6a08 	vldr	s12, [r7, #32]
 8000e56:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	330c      	adds	r3, #12
 8000e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6a:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	ed93 7a00 	vldr	s14, [r3]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	edd3 6a00 	vldr	s13, [r3]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3308      	adds	r3, #8
 8000e9a:	edd3 6a00 	vldr	s13, [r3]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	edd3 6a00 	vldr	s13, [r3]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f000 f843 	bl	8000f54 <invSqrt>
 8000ece:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efa:	edc3 7a00 	vstr	s15, [r3]
	q[2] *= recipNorm;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3308      	adds	r3, #8
 8000f02:	ed93 7a00 	vldr	s14, [r3]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f12:	edc3 7a00 	vstr	s15, [r3]
	q[3] *= recipNorm;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	ed93 7a00 	vldr	s14, [r3]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	330c      	adds	r3, #12
 8000f22:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f2e:	bf00      	nop
 8000f30:	3748      	adds	r7, #72	@ 0x48
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	240001fc 	.word	0x240001fc
 8000f3c:	3b5a740e 	.word	0x3b5a740e
 8000f40:	24000200 	.word	0x24000200
 8000f44:	24000204 	.word	0x24000204
 8000f48:	24000208 	.word	0x24000208
 8000f4c:	24000000 	.word	0x24000000
 8000f50:	3ada740e 	.word	0x3ada740e

08000f54 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	105a      	asrs	r2, r3, #1
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <invSqrt+0x74>)
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000f8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	ee07 3a90 	vmov	s15, r3
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	5f3759df 	.word	0x5f3759df
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <bmp388_quantize_calibration>:
volatile double altitude;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (double)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe0:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 8000fe4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fe8:	4b78      	ldr	r3, [pc, #480]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
  quantized_bmp388_calib.par_t2 = (double)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8000fee:	4b76      	ldr	r3, [pc, #472]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000ff0:	885b      	ldrh	r3, [r3, #2]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ffa:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 8001178 <bmp388_quantize_calibration+0x1a8>
 8000ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001002:	4b72      	ldr	r3, [pc, #456]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001004:	ed83 7b02 	vstr	d7, [r3, #8]
  quantized_bmp388_calib.par_t3 = (double)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8001008:	4b6f      	ldr	r3, [pc, #444]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800100a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001016:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800101a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800101e:	4b6b      	ldr	r3, [pc, #428]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001020:	ed83 7b04 	vstr	d7, [r3, #16]

  quantized_bmp388_calib.par_p1 = ((double)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 8001024:	4b68      	ldr	r3, [pc, #416]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001026:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001032:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 8001036:	ee37 6b46 	vsub.f64	d6, d7, d6
 800103a:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8001190 <bmp388_quantize_calibration+0x1c0>
 800103e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001044:	ed83 7b06 	vstr	d7, [r3, #24]
  quantized_bmp388_calib.par_p2 = ((double)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8001048:	4b5f      	ldr	r3, [pc, #380]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800104a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001056:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 800105a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800105e:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8001198 <bmp388_quantize_calibration+0x1c8>
 8001062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001066:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001068:	ed83 7b08 	vstr	d7, [r3, #32]
  quantized_bmp388_calib.par_p3 = (double)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 800106c:	4b56      	ldr	r3, [pc, #344]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800106e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800107a:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80011a0 <bmp388_quantize_calibration+0x1d0>
 800107e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001082:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001084:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p4 = (double)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 8001088:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800108a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001096:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80011a8 <bmp388_quantize_calibration+0x1d8>
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010a0:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p5 = (double)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 80010a4:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010a6:	899b      	ldrh	r3, [r3, #12]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010b0:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80010b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b8:	4b44      	ldr	r3, [pc, #272]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010ba:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  quantized_bmp388_calib.par_p6 = (double)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 80010be:	4b42      	ldr	r3, [pc, #264]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010c0:	89db      	ldrh	r3, [r3, #14]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010ca:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 80011b0 <bmp388_quantize_calibration+0x1e0>
 80010ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010d4:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
  quantized_bmp388_calib.par_p7 = (double)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 80010d8:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010da:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010e6:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 80010ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010f0:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  quantized_bmp388_calib.par_p8 = (double)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010f6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001102:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80011b8 <bmp388_quantize_calibration+0x1e8>
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 800110c:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
  quantized_bmp388_calib.par_p9 = (double)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001112:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800111e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 8001122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001128:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
  quantized_bmp388_calib.par_p10 = (double)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800112e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113a:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800113e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001142:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001144:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
  quantized_bmp388_calib.par_p11 = (double)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800114a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001156:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80011c0 <bmp388_quantize_calibration+0x1f0>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001160:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	00000000 	.word	0x00000000
 8001174:	40700000 	.word	0x40700000
 8001178:	00000000 	.word	0x00000000
 800117c:	41d00000 	.word	0x41d00000
 8001180:	00000000 	.word	0x00000000
 8001184:	42f00000 	.word	0x42f00000
 8001188:	00000000 	.word	0x00000000
 800118c:	40d00000 	.word	0x40d00000
 8001190:	00000000 	.word	0x00000000
 8001194:	41300000 	.word	0x41300000
 8001198:	00000000 	.word	0x00000000
 800119c:	41c00000 	.word	0x41c00000
 80011a0:	00000000 	.word	0x00000000
 80011a4:	41f00000 	.word	0x41f00000
 80011a8:	00000000 	.word	0x00000000
 80011ac:	42400000 	.word	0x42400000
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40500000 	.word	0x40500000
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40e00000 	.word	0x40e00000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	44000000 	.word	0x44000000
 80011c8:	2400020c 	.word	0x2400020c
 80011cc:	24000228 	.word	0x24000228

080011d0 <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	@ 0x40
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <bmp388_write_reg+0x44>)
 80011e6:	f002 f96b 	bl	80034c0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	2201      	movs	r2, #1
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <bmp388_write_reg+0x48>)
 80011f2:	f005 f8ef 	bl	80063d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80011f6:	1db9      	adds	r1, r7, #6
 80011f8:	2364      	movs	r3, #100	@ 0x64
 80011fa:	2201      	movs	r2, #1
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <bmp388_write_reg+0x48>)
 80011fe:	f005 f8e9 	bl	80063d4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	@ 0x40
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <bmp388_write_reg+0x44>)
 8001208:	f002 f95a 	bl	80034c0 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58020000 	.word	0x58020000
 8001218:	24000348 	.word	0x24000348

0800121c <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint8_t dummy;
  uint8_t temp_data = 0x80 | reg;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001232:	b2db      	uxtb	r3, r3
 8001234:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	4817      	ldr	r0, [pc, #92]	@ (8001298 <bmp388_read_reg+0x7c>)
 800123c:	f002 f940 	bl	80034c0 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8001240:	f107 010d 	add.w	r1, r7, #13
 8001244:	2364      	movs	r3, #100	@ 0x64
 8001246:	2201      	movs	r2, #1
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <bmp388_read_reg+0x80>)
 800124a:	f005 f8c3 	bl	80063d4 <HAL_SPI_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <bmp388_read_reg+0x40>
    Error_Handler();
 8001258:	f000 feba 	bl	8001fd0 <Error_Handler>
  HAL_SPI_Receive(&hspi2, &dummy, 1, 100);
 800125c:	f107 010e 	add.w	r1, r7, #14
 8001260:	2364      	movs	r3, #100	@ 0x64
 8001262:	2201      	movs	r2, #1
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <bmp388_read_reg+0x80>)
 8001266:	f005 faa3 	bl	80067b0 <HAL_SPI_Receive>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	b29a      	uxth	r2, r3
 800126e:	2364      	movs	r3, #100	@ 0x64
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	480a      	ldr	r0, [pc, #40]	@ (800129c <bmp388_read_reg+0x80>)
 8001274:	f005 fa9c 	bl	80067b0 <HAL_SPI_Receive>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <bmp388_read_reg+0x6a>
    Error_Handler();
 8001282:	f000 fea5 	bl	8001fd0 <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <bmp388_read_reg+0x7c>)
 800128c:	f002 f918 	bl	80034c0 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58020000 	.word	0x58020000
 800129c:	24000348 	.word	0x24000348

080012a0 <bmp388_setup>:
void bmp388_setup()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  bmp388_write_reg(0x7E, 0xB6); // Soft reset
 80012a6:	21b6      	movs	r1, #182	@ 0xb6
 80012a8:	207e      	movs	r0, #126	@ 0x7e
 80012aa:	f7ff ff91 	bl	80011d0 <bmp388_write_reg>
  HAL_Delay(10); // Wait for reset to complete
 80012ae:	200a      	movs	r0, #10
 80012b0:	f001 fd9e 	bl	8002df0 <HAL_Delay>
  uint8_t calib_data[21];
  uint8_t chip[2];
  bmp388_read_reg(0x31, calib_data, 21);
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	2215      	movs	r2, #21
 80012ba:	4619      	mov	r1, r3
 80012bc:	2031      	movs	r0, #49	@ 0x31
 80012be:	f7ff ffad 	bl	800121c <bmp388_read_reg>
  bmp388_read_reg(0x00, chip, 2);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2202      	movs	r2, #2
 80012c6:	4619      	mov	r1, r3
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff ffa7 	bl	800121c <bmp388_read_reg>
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <bmp388_setup+0x120>)
 80012e0:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <bmp388_setup+0x120>)
 80012f4:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <bmp388_setup+0x120>)
 80012fc:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 80012fe:	7b7b      	ldrb	r3, [r7, #13]
 8001300:	b21a      	sxth	r2, r3
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <bmp388_setup+0x120>)
 800130e:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	b21a      	sxth	r2, r3
 8001314:	7c3b      	ldrb	r3, [r7, #16]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <bmp388_setup+0x120>)
 8001320:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8001322:	7c7b      	ldrb	r3, [r7, #17]
 8001324:	b25a      	sxtb	r2, r3
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <bmp388_setup+0x120>)
 8001328:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 800132a:	7cbb      	ldrb	r3, [r7, #18]
 800132c:	b25a      	sxtb	r2, r3
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <bmp388_setup+0x120>)
 8001330:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	b21a      	sxth	r2, r3
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <bmp388_setup+0x120>)
 8001344:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	b21a      	sxth	r2, r3
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <bmp388_setup+0x120>)
 8001358:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	b25a      	sxtb	r2, r3
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <bmp388_setup+0x120>)
 8001360:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 8001362:	7e3b      	ldrb	r3, [r7, #24]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <bmp388_setup+0x120>)
 8001368:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 800136a:	7e7b      	ldrb	r3, [r7, #25]
 800136c:	b21a      	sxth	r2, r3
 800136e:	7ebb      	ldrb	r3, [r7, #26]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <bmp388_setup+0x120>)
 800137a:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	b25a      	sxtb	r2, r3
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <bmp388_setup+0x120>)
 8001382:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 8001384:	7f3b      	ldrb	r3, [r7, #28]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <bmp388_setup+0x120>)
 800138a:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 800138c:	f7ff fe20 	bl	8000fd0 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1A, 0x00);
 8001390:	2100      	movs	r1, #0
 8001392:	201a      	movs	r0, #26
 8001394:	f7ff ff1c 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1B, 0x33);  // normal mode, temp pressure on by default with it
 8001398:	2133      	movs	r1, #51	@ 0x33
 800139a:	201b      	movs	r0, #27
 800139c:	f7ff ff18 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 80013a0:	2103      	movs	r1, #3
 80013a2:	201c      	movs	r0, #28
 80013a4:	f7ff ff14 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 80013a8:	2102      	movs	r1, #2
 80013aa:	201d      	movs	r0, #29
 80013ac:	f7ff ff10 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x04);  // coefficient for IIR filter, ideally low value for the dart
 80013b0:	2104      	movs	r1, #4
 80013b2:	201f      	movs	r0, #31
 80013b4:	f7ff ff0c 	bl	80011d0 <bmp388_write_reg>
}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2400020c 	.word	0x2400020c

080013c4 <bmp388_read_raw_data>:

void bmp388_read_raw_data()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  uint8_t data[6];
  bmp388_read_reg(0x04, data, 6); // 0x04-0x06 pressure, 0x07-0x09 temperature
 80013ca:	463b      	mov	r3, r7
 80013cc:	2206      	movs	r2, #6
 80013ce:	4619      	mov	r1, r3
 80013d0:	2004      	movs	r0, #4
 80013d2:	f7ff ff23 	bl	800121c <bmp388_read_reg>
  bmp388_rawData.pressure = (((int32_t)data[2] << 16) | ((int32_t)data[1] << 8) | ((int32_t)data[0]));
 80013d6:	78bb      	ldrb	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4313      	orrs	r3, r2
 80013e0:	783a      	ldrb	r2, [r7, #0]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <bmp388_read_raw_data+0x44>)
 80013e8:	605a      	str	r2, [r3, #4]
  bmp388_rawData.temperature = (((int32_t)data[5] << 16) | ((int32_t)data[4] << 8) | ((int32_t)data[3]));
 80013ea:	797b      	ldrb	r3, [r7, #5]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	793b      	ldrb	r3, [r7, #4]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	4313      	orrs	r3, r2
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <bmp388_read_raw_data+0x44>)
 80013fc:	601a      	str	r2, [r3, #0]

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	240002a0 	.word	0x240002a0

0800140c <bmp388_compensated_temperature>:

// the math performed in both functions are directly from the datasheet
static double bmp388_compensated_temperature(uint32_t raw_temp)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  double partial_data1 = (double)(raw_temp)-quantized_bmp388_calib.par_t1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001420:	ed93 7b00 	vldr	d7, [r3]
 8001424:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001428:	ed87 7b04 	vstr	d7, [r7, #16]
  double partial_data2 = partial_data1 * quantized_bmp388_calib.par_t2;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 800142e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001432:	ed97 6b04 	vldr	d6, [r7, #16]
 8001436:	ee26 7b07 	vmul.f64	d7, d6, d7
 800143a:	ed87 7b02 	vstr	d7, [r7, #8]
  quantized_bmp388_calib.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantized_bmp388_calib.par_t3;
 800143e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001442:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001448:	ed93 7b04 	vldr	d7, [r3, #16]
 800144c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001450:	ed97 7b02 	vldr	d7, [r7, #8]
 8001454:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 800145a:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
  return quantized_bmp388_calib.t_lin;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001460:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001464:	ec43 2b17 	vmov	d7, r2, r3
}
 8001468:	eeb0 0b47 	vmov.f64	d0, d7
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	24000228 	.word	0x24000228

0800147c <bmp388_compensated_pressure>:

static double bmp388_compensated_pressure(uint32_t raw_pressure)
{
 800147c:	b480      	push	{r7}
 800147e:	b091      	sub	sp, #68	@ 0x44
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  double pressure;
  double partial_data1, partial_data2, partial_data3, partial_data4;
  double partial_out1, partial_out2;

  partial_data1 = quantized_bmp388_calib.par_p6 * quantized_bmp388_calib.t_lin;
 8001484:	4b6e      	ldr	r3, [pc, #440]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001486:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800148c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001490:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001494:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p7 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001498:	4b69      	ldr	r3, [pc, #420]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800149a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800149e:	4b68      	ldr	r3, [pc, #416]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014a0:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014a8:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014aa:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014b2:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p8 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 80014b6:	4b62      	ldr	r3, [pc, #392]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014b8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80014bc:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014be:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014c8:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014d2:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014da:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out1 = quantized_bmp388_calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80014de:	4b58      	ldr	r3, [pc, #352]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014e0:	ed93 6b0e 	vldr	d6, [r3, #56]	@ 0x38
 80014e4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80014e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ec:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80014f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014f4:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80014f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014fc:	ed87 7b08 	vstr	d7, [r7, #32]

  partial_data1 = quantized_bmp388_calib.par_p2 * quantized_bmp388_calib.t_lin;
 8001500:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001502:	ed93 6b08 	vldr	d6, [r3, #32]
 8001506:	4b4e      	ldr	r3, [pc, #312]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001508:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800150c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001510:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p3 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001514:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001516:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800151a:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800151c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001520:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001524:	4b46      	ldr	r3, [pc, #280]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001526:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800152a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800152e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p4 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001532:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001534:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001538:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800153a:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800153e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001542:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001544:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001548:	ee26 6b07 	vmul.f64	d6, d6, d7
 800154c:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800154e:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001552:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001556:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out2 = (double)raw_pressure * (quantized_bmp388_calib.par_p1 + partial_data1 + partial_data2 + partial_data3);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001564:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001566:	ed93 5b06 	vldr	d5, [r3, #24]
 800156a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800156e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001572:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001576:	ee35 5b07 	vadd.f64	d5, d5, d7
 800157a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800157e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001582:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001586:	ed87 7b06 	vstr	d7, [r7, #24]

  partial_data1 = (double)raw_pressure * (double)raw_pressure;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800159e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015a2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p9 + quantized_bmp388_calib.par_p10 * quantized_bmp388_calib.t_lin;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015a8:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015ae:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80015b2:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015b4:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80015b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015c0:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = partial_data1 * partial_data2;
 80015c4:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80015c8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80015cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015d0:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_data4 = partial_data3 + ((double)raw_pressure * (double)raw_pressure * (double)raw_pressure) * quantized_bmp388_calib.par_p11;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015fc:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8001600:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001604:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001608:	ee36 7b07 	vadd.f64	d7, d6, d7
 800160c:	ed87 7b04 	vstr	d7, [r7, #16]

  pressure = partial_out1 + partial_out2 + partial_data4;
 8001610:	ed97 6b08 	vldr	d6, [r7, #32]
 8001614:	ed97 7b06 	vldr	d7, [r7, #24]
 8001618:	ee36 7b07 	vadd.f64	d7, d6, d7
 800161c:	ed97 6b04 	vldr	d6, [r7, #16]
 8001620:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001624:	ed87 7b02 	vstr	d7, [r7, #8]

  return pressure;
 8001628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800162c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001630:	eeb0 0b47 	vmov.f64	d0, d7
 8001634:	3744      	adds	r7, #68	@ 0x44
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	24000228 	.word	0x24000228
 8001644:	00000000 	.word	0x00000000

08001648 <bmp388_getAltitude>:
double bmp388_getAltitude(double pressure)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	ed87 0b00 	vstr	d0, [r7]
	double altitude = 44330 * (1-pow(pressure/1019.0e2, 0.190294)); // pressure divided by pressure of sea level at austin
 8001652:	ed97 7b00 	vldr	d7, [r7]
 8001656:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8001698 <bmp388_getAltitude+0x50>
 800165a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800165e:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 80016a0 <bmp388_getAltitude+0x58>
 8001662:	eeb0 0b46 	vmov.f64	d0, d6
 8001666:	f00c fa9f 	bl	800dba8 <pow>
 800166a:	eeb0 7b40 	vmov.f64	d7, d0
 800166e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001672:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001676:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80016a8 <bmp388_getAltitude+0x60>
 800167a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167e:	ed87 7b02 	vstr	d7, [r7, #8]
	return altitude;
 8001682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001686:	ec43 2b17 	vmov	d7, r2, r3
}
 800168a:	eeb0 0b47 	vmov.f64	d0, d7
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	00000000 	.word	0x00000000
 800169c:	40f8e0c0 	.word	0x40f8e0c0
 80016a0:	c55000c9 	.word	0xc55000c9
 80016a4:	3fc85b8d 	.word	0x3fc85b8d
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40e5a540 	.word	0x40e5a540

080016b0 <bmp388_getData>:

void bmp388_getData()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  bmp388_read_raw_data();
 80016b4:	f7ff fe86 	bl	80013c4 <bmp388_read_raw_data>
  bmp388_processedData.temperature = bmp388_compensated_temperature(bmp388_rawData.temperature);
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <bmp388_getData+0x4c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fea5 	bl	800140c <bmp388_compensated_temperature>
 80016c2:	eeb0 7b40 	vmov.f64	d7, d0
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <bmp388_getData+0x50>)
 80016c8:	ed83 7b00 	vstr	d7, [r3]
  bmp388_processedData.pressure = bmp388_compensated_pressure(bmp388_rawData.pressure);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <bmp388_getData+0x4c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fed3 	bl	800147c <bmp388_compensated_pressure>
 80016d6:	eeb0 7b40 	vmov.f64	d7, d0
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <bmp388_getData+0x50>)
 80016dc:	ed83 7b02 	vstr	d7, [r3, #8]
  altitude = bmp388_getAltitude(bmp388_processedData.pressure);
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <bmp388_getData+0x50>)
 80016e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80016e6:	eeb0 0b47 	vmov.f64	d0, d7
 80016ea:	f7ff ffad 	bl	8001648 <bmp388_getAltitude>
 80016ee:	eeb0 7b40 	vmov.f64	d7, d0
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <bmp388_getData+0x54>)
 80016f4:	ed83 7b00 	vstr	d7, [r3]
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	240002a0 	.word	0x240002a0
 8001700:	240002a8 	.word	0x240002a8
 8001704:	240002b8 	.word	0x240002b8

08001708 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001710:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001714:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001720:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001724:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001728:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001730:	e000      	b.n	8001734 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001732:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001734:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f9      	beq.n	8001732 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800173e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800175e:	f000 fc0b 	bl	8001f78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f001 fab3 	bl	8002ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f861 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 fae1 	bl	8001d30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800176e:	f000 fa93 	bl	8001c98 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001772:	f000 f8d7 	bl	8001924 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001776:	f000 fa41 	bl	8001bfc <MX_TIM2_Init>
  MX_SPI2_Init();
 800177a:	f000 f92b 	bl	80019d4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800177e:	f000 f981 	bl	8001a84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 8001782:	4823      	ldr	r0, [pc, #140]	@ (8001810 <main+0xb8>)
 8001784:	f005 fbc6 	bl	8006f14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001788:	4822      	ldr	r0, [pc, #136]	@ (8001814 <main+0xbc>)
 800178a:	f005 fbc3 	bl	8006f14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Enable TIM1 Channel 1 interrupt
 800178e:	2100      	movs	r1, #0
 8001790:	4820      	ldr	r0, [pc, #128]	@ (8001814 <main+0xbc>)
 8001792:	f005 fc99 	bl	80070c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Enable TIM1 Channel 1 interrupt
 8001796:	2104      	movs	r1, #4
 8001798:	481e      	ldr	r0, [pc, #120]	@ (8001814 <main+0xbc>)
 800179a:	f005 fc95 	bl	80070c8 <HAL_TIM_PWM_Start>
  char buffer[40] = {'\0'};
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2224      	movs	r2, #36	@ 0x24
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f008 fe7e 	bl	800a4aa <memset>
  mpu9250_setup();
 80017ae:	f000 fc77 	bl	80020a0 <mpu9250_setup>
  bmp388_setup();
 80017b2:	f7ff fd75 	bl	80012a0 <bmp388_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <main+0xc0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <main+0x76>
	  {
		  timer_flag = 0;	//reset timer flag
 80017c0:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <main+0xc0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]

		  mpu9250_getProcessedAngle();
 80017c6:	f000 fd47 	bl	8002258 <mpu9250_getProcessedAngle>
		  bmp388_getData();
 80017ca:	f7ff ff71 	bl	80016b0 <bmp388_getData>
	  }

	  if(update_ccr){
 80017ce:	4b13      	ldr	r3, [pc, #76]	@ (800181c <main+0xc4>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ee      	beq.n	80017b6 <main+0x5e>
		  update_ccr = 0; //reset update ccr flag
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <main+0xc4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]

		  duty1=setDutyCH1(&htim1, imu_angles.pitch);
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <main+0xc8>)
 80017e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017e4:	eeb0 0a67 	vmov.f32	s0, s15
 80017e8:	480a      	ldr	r0, [pc, #40]	@ (8001814 <main+0xbc>)
 80017ea:	f000 faf5 	bl	8001dd8 <setDutyCH1>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <main+0xcc>)
 80017f4:	801a      	strh	r2, [r3, #0]
		  duty2=setDutyCH2(&htim1, imu_angles.roll);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <main+0xc8>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	4804      	ldr	r0, [pc, #16]	@ (8001814 <main+0xbc>)
 8001802:	f000 fb33 	bl	8001e6c <setDutyCH2>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <main+0xd0>)
 800180c:	801a      	strh	r2, [r3, #0]
	  if(timer_flag)
 800180e:	e7d2      	b.n	80017b6 <main+0x5e>
 8001810:	2400041c 	.word	0x2400041c
 8001814:	240003d0 	.word	0x240003d0
 8001818:	240004fc 	.word	0x240004fc
 800181c:	240004fd 	.word	0x240004fd
 8001820:	24000548 	.word	0x24000548
 8001824:	240004fe 	.word	0x240004fe
 8001828:	24000500 	.word	0x24000500

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b09c      	sub	sp, #112	@ 0x70
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001836:	224c      	movs	r2, #76	@ 0x4c
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f008 fe35 	bl	800a4aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2220      	movs	r2, #32
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f008 fe2f 	bl	800a4aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800184c:	2002      	movs	r0, #2
 800184e:	f001 fe51 	bl	80034f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b31      	ldr	r3, [pc, #196]	@ (800191c <SystemClock_Config+0xf0>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a30      	ldr	r2, [pc, #192]	@ (800191c <SystemClock_Config+0xf0>)
 800185c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001860:	6193      	str	r3, [r2, #24]
 8001862:	4b2e      	ldr	r3, [pc, #184]	@ (800191c <SystemClock_Config+0xf0>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <SystemClock_Config+0xf4>)
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	4a2b      	ldr	r2, [pc, #172]	@ (8001920 <SystemClock_Config+0xf4>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <SystemClock_Config+0xf4>)
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001884:	bf00      	nop
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <SystemClock_Config+0xf0>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800188e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001892:	d1f8      	bne.n	8001886 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001894:	2302      	movs	r3, #2
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001898:	2301      	movs	r3, #1
 800189a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189c:	2340      	movs	r3, #64	@ 0x40
 800189e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a0:	2302      	movs	r3, #2
 80018a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a4:	2300      	movs	r3, #0
 80018a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a8:	2304      	movs	r3, #4
 80018aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018ac:	233c      	movs	r3, #60	@ 0x3c
 80018ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80018b4:	2305      	movs	r3, #5
 80018b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80018bc:	230c      	movs	r3, #12
 80018be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018cc:	4618      	mov	r0, r3
 80018ce:	f001 fe4b 	bl	8003568 <HAL_RCC_OscConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80018d8:	f000 fb7a 	bl	8001fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018dc:	233f      	movs	r3, #63	@ 0x3f
 80018de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e0:	2303      	movs	r3, #3
 80018e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80018e8:	2308      	movs	r3, #8
 80018ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018ec:	2340      	movs	r3, #64	@ 0x40
 80018ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018f0:	2340      	movs	r3, #64	@ 0x40
 80018f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018fa:	2340      	movs	r3, #64	@ 0x40
 80018fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2104      	movs	r1, #4
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fa8a 	bl	8003e1c <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800190e:	f000 fb5f 	bl	8001fd0 <Error_Handler>
  }
}
 8001912:	bf00      	nop
 8001914:	3770      	adds	r7, #112	@ 0x70
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	58024800 	.word	0x58024800
 8001920:	58000400 	.word	0x58000400

08001924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001928:	4b28      	ldr	r3, [pc, #160]	@ (80019cc <MX_SPI1_Init+0xa8>)
 800192a:	4a29      	ldr	r2, [pc, #164]	@ (80019d0 <MX_SPI1_Init+0xac>)
 800192c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001930:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <MX_SPI1_Init+0xa8>)
 800193e:	2207      	movs	r2, #7
 8001940:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001944:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001948:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <MX_SPI1_Init+0xa8>)
 800194c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001950:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001954:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001958:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800195a:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <MX_SPI1_Init+0xa8>)
 800195c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001960:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001968:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <MX_SPI1_Init+0xa8>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800196e:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001976:	2200      	movs	r2, #0
 8001978:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <MX_SPI1_Init+0xa8>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001980:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001982:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001984:	2200      	movs	r2, #0
 8001986:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <MX_SPI1_Init+0xa8>)
 800198a:	2200      	movs	r2, #0
 800198c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001990:	2200      	movs	r2, #0
 8001992:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001994:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <MX_SPI1_Init+0xa8>)
 8001996:	2200      	movs	r2, #0
 8001998:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <MX_SPI1_Init+0xa8>)
 800199c:	2200      	movs	r2, #0
 800199e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <MX_SPI1_Init+0xa8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <MX_SPI1_Init+0xa8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <MX_SPI1_Init+0xa8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <MX_SPI1_Init+0xa8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	@ (80019cc <MX_SPI1_Init+0xa8>)
 80019ba:	f004 fbe7 	bl	800618c <HAL_SPI_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80019c4:	f000 fb04 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	240002c0 	.word	0x240002c0
 80019d0:	40013000 	.word	0x40013000

080019d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019d8:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 80019da:	4a29      	ldr	r2, [pc, #164]	@ (8001a80 <MX_SPI2_Init+0xac>)
 80019dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019de:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 80019e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80019e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019e6:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ec:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 80019ee:	2207      	movs	r2, #7
 80019f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019f2:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 80019f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 80019fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a0c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001a10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a18:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001a24:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a38:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a44:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <MX_SPI2_Init+0xa8>)
 8001a6a:	f004 fb8f 	bl	800618c <HAL_SPI_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001a74:	f000 faac 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	24000348 	.word	0x24000348
 8001a80:	40003800 	.word	0x40003800

08001a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09a      	sub	sp, #104	@ 0x68
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	222c      	movs	r2, #44	@ 0x2c
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 fcf3 	bl	800a4aa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001ac6:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf8 <MX_TIM1_Init+0x174>)
 8001ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 8001aca:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001acc:	2277      	movs	r2, #119	@ 0x77
 8001ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad0:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001ad6:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001ad8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ade:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aea:	4b42      	ldr	r3, [pc, #264]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001af0:	4840      	ldr	r0, [pc, #256]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001af2:	f005 f9b8 	bl	8006e66 <HAL_TIM_Base_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001afc:	f000 fa68 	bl	8001fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b04:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4839      	ldr	r0, [pc, #228]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001b0e:	f005 fe05 	bl	800771c <HAL_TIM_ConfigClockSource>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b18:	f000 fa5a 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b1c:	4835      	ldr	r0, [pc, #212]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001b1e:	f005 fa71 	bl	8007004 <HAL_TIM_PWM_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b28:	f000 fa52 	bl	8001fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	482d      	ldr	r0, [pc, #180]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001b40:	f006 fb46 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b4a:	f000 fa41 	bl	8001fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4e:	2360      	movs	r3, #96	@ 0x60
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1500;
 8001b52:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b56:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	481f      	ldr	r0, [pc, #124]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001b76:	f005 fcbd 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001b80:	f000 fa26 	bl	8001fd0 <Error_Handler>
  }
  sConfigOC.Pulse = 1500-1;
 8001b84:	f240 53db 	movw	r3, #1499	@ 0x5db
 8001b88:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4818      	ldr	r0, [pc, #96]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001b94:	f005 fcae 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001b9e:	f000 fa17 	bl	8001fd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001bd8:	f006 fb88 	bl	80082ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001be2:	f000 f9f5 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001be6:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <MX_TIM1_Init+0x170>)
 8001be8:	f000 fe2c 	bl	8002844 <HAL_TIM_MspPostInit>

}
 8001bec:	bf00      	nop
 8001bee:	3768      	adds	r7, #104	@ 0x68
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	240003d0 	.word	0x240003d0
 8001bf8:	40010000 	.word	0x40010000

08001bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c24:	f240 321f 	movw	r2, #799	@ 0x31f
 8001c28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c44:	4813      	ldr	r0, [pc, #76]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c46:	f005 f90e 	bl	8006e66 <HAL_TIM_Base_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c50:	f000 f9be 	bl	8001fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c62:	f005 fd5b 	bl	800771c <HAL_TIM_ConfigClockSource>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001c6c:	f000 f9b0 	bl	8001fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <MX_TIM2_Init+0x98>)
 8001c7e:	f006 faa7 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001c88:	f000 f9a2 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2400041c 	.word	0x2400041c

08001c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001c9e:	4a23      	ldr	r2, [pc, #140]	@ (8001d2c <MX_USART2_UART_Init+0x94>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce0:	4811      	ldr	r0, [pc, #68]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001ce2:	f006 fb9f 	bl	8008424 <HAL_UART_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001cec:	f000 f970 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001cf4:	f007 fba7 	bl	8009446 <HAL_UARTEx_SetTxFifoThreshold>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001cfe:	f000 f967 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d02:	2100      	movs	r1, #0
 8001d04:	4808      	ldr	r0, [pc, #32]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001d06:	f007 fbdc 	bl	80094c2 <HAL_UARTEx_SetRxFifoThreshold>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d10:	f000 f95e 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	@ (8001d28 <MX_USART2_UART_Init+0x90>)
 8001d16:	f007 fb5d 	bl	80093d4 <HAL_UARTEx_DisableFifoMode>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d20:	f000 f956 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	24000468 	.word	0x24000468
 8001d2c:	40004400 	.word	0x40004400

08001d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4c:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d56:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d6a:	4a19      	ldr	r2, [pc, #100]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d6c:	f043 0310 	orr.w	r3, r3, #16
 8001d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d88:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_GPIO_Init+0xa0>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2160      	movs	r1, #96	@ 0x60
 8001da4:	480b      	ldr	r0, [pc, #44]	@ (8001dd4 <MX_GPIO_Init+0xa4>)
 8001da6:	f001 fb8b 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 8001daa:	2360      	movs	r3, #96	@ 0x60
 8001dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4804      	ldr	r0, [pc, #16]	@ (8001dd4 <MX_GPIO_Init+0xa4>)
 8001dc2:	f001 f9cd 	bl	8003160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dc6:	bf00      	nop
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58020000 	.word	0x58020000

08001dd8 <setDutyCH1>:
    double dt = current_time - previous_time;
    previous_time = current_time;  // Update for the next call
    return dt;
}

uint16_t setDutyCH1(TIM_HandleTypeDef *htim, float angle) {
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	ed87 0a00 	vstr	s0, [r7]
    //limit range from -90 to 90 degrees
    if (angle < -90.0f) angle = -90.0f;
 8001de4:	edd7 7a00 	vldr	s15, [r7]
 8001de8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001e54 <setDutyCH1+0x7c>
 8001dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	d501      	bpl.n	8001dfa <setDutyCH1+0x22>
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <setDutyCH1+0x80>)
 8001df8:	603b      	str	r3, [r7, #0]
    if (angle > 90.0f) angle = 90.0f;
 8001dfa:	edd7 7a00 	vldr	s15, [r7]
 8001dfe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001e5c <setDutyCH1+0x84>
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	dd01      	ble.n	8001e10 <setDutyCH1+0x38>
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <setDutyCH1+0x88>)
 8001e0e:	603b      	str	r3, [r7, #0]

    // Scale angle to pulse time in microseconds (1000 µs to 2000 µs)(total period is 20000 µs)
    //confirm math w jason
    float pulseTime = 1500.0f + (angle * 500.0f) / 90.0f;
 8001e10:	edd7 7a00 	vldr	s15, [r7]
 8001e14:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001e64 <setDutyCH1+0x8c>
 8001e18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e1c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001e5c <setDutyCH1+0x84>
 8001e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e24:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001e68 <setDutyCH1+0x90>
 8001e28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e2c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Convert pulse width in µs to CCR value
    uint16_t ccrValue = (uint16_t)(pulseTime);
 8001e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e38:	ee17 3a90 	vmov	r3, s15
 8001e3c:	817b      	strh	r3, [r7, #10]

    htim->Instance->CCR1 = ccrValue;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	897a      	ldrh	r2, [r7, #10]
 8001e44:	635a      	str	r2, [r3, #52]	@ 0x34
    return ccrValue;
 8001e46:	897b      	ldrh	r3, [r7, #10]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	c2b40000 	.word	0xc2b40000
 8001e58:	c2b40000 	.word	0xc2b40000
 8001e5c:	42b40000 	.word	0x42b40000
 8001e60:	42b40000 	.word	0x42b40000
 8001e64:	43fa0000 	.word	0x43fa0000
 8001e68:	44bb8000 	.word	0x44bb8000

08001e6c <setDutyCH2>:

uint16_t setDutyCH2(TIM_HandleTypeDef *htim, float angle) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	ed87 0a00 	vstr	s0, [r7]
    //limit range from -90 to 90 degrees
    if (angle < -90.0f) angle = -90.0f;
 8001e78:	edd7 7a00 	vldr	s15, [r7]
 8001e7c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001ee8 <setDutyCH2+0x7c>
 8001e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d501      	bpl.n	8001e8e <setDutyCH2+0x22>
 8001e8a:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <setDutyCH2+0x80>)
 8001e8c:	603b      	str	r3, [r7, #0]
    if (angle > 90.0f) angle = 90.0f;
 8001e8e:	edd7 7a00 	vldr	s15, [r7]
 8001e92:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001ef0 <setDutyCH2+0x84>
 8001e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	dd01      	ble.n	8001ea4 <setDutyCH2+0x38>
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <setDutyCH2+0x88>)
 8001ea2:	603b      	str	r3, [r7, #0]

    // Scale angle to pulse time in microseconds (1000 µs to 2000 µs)(total period is 20000 µs)
    //confirm math w jason
    float pulseTime = 1500.0f + (angle * 500.0f) / 90.0f;
 8001ea4:	edd7 7a00 	vldr	s15, [r7]
 8001ea8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001ef8 <setDutyCH2+0x8c>
 8001eac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eb0:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001ef0 <setDutyCH2+0x84>
 8001eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001efc <setDutyCH2+0x90>
 8001ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ec0:	edc7 7a03 	vstr	s15, [r7, #12]

    // Convert pulse width in µs to CCR value
    uint16_t ccrValue = (uint16_t)(pulseTime);
 8001ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ecc:	ee17 3a90 	vmov	r3, s15
 8001ed0:	817b      	strh	r3, [r7, #10]

    htim->Instance->CCR2 = ccrValue;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	897a      	ldrh	r2, [r7, #10]
 8001ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    return ccrValue;
 8001eda:	897b      	ldrh	r3, [r7, #10]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	c2b40000 	.word	0xc2b40000
 8001eec:	c2b40000 	.word	0xc2b40000
 8001ef0:	42b40000 	.word	0x42b40000
 8001ef4:	42b40000 	.word	0x42b40000
 8001ef8:	43fa0000 	.word	0x43fa0000
 8001efc:	44bb8000 	.word	0x44bb8000

08001f00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d102      	bne.n	8001f16 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8001f10:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
	}
	if (htim == &htim1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a07      	ldr	r2, [pc, #28]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d102      	bne.n	8001f24 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		update_ccr = 1;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
	}
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	2400041c 	.word	0x2400041c
 8001f34:	240004fc 	.word	0x240004fc
 8001f38:	240003d0 	.word	0x240003d0
 8001f3c:	240004fd 	.word	0x240004fd

08001f40 <_write>:
int _write(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e009      	b.n	8001f66 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	60ba      	str	r2, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fbd4 	bl	8001708 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbf1      	blt.n	8001f52 <_write+0x12>
	}
	return len;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f7e:	463b      	mov	r3, r7
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001f8a:	f001 f871 	bl	8003070 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f9a:	231f      	movs	r3, #31
 8001f9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001f9e:	2387      	movs	r3, #135	@ 0x87
 8001fa0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fba:	463b      	mov	r3, r7
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 f88f 	bl	80030e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001fc2:	2004      	movs	r0, #4
 8001fc4:	f001 f86c 	bl	80030a0 <HAL_MPU_Enable>

}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd4:	b672      	cpsid	i
}
 8001fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <Error_Handler+0x8>

08001fdc <mpu9250_write_reg>:
Mag_CalibData_t mag_calibration_data;

float quat[4];

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2120      	movs	r1, #32
 8001ff0:	480b      	ldr	r0, [pc, #44]	@ (8002020 <mpu9250_write_reg+0x44>)
 8001ff2:	f001 fa65 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001ff6:	1df9      	adds	r1, r7, #7
 8001ff8:	2364      	movs	r3, #100	@ 0x64
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4809      	ldr	r0, [pc, #36]	@ (8002024 <mpu9250_write_reg+0x48>)
 8001ffe:	f004 f9e9 	bl	80063d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8002002:	1db9      	adds	r1, r7, #6
 8002004:	2364      	movs	r3, #100	@ 0x64
 8002006:	2201      	movs	r2, #1
 8002008:	4806      	ldr	r0, [pc, #24]	@ (8002024 <mpu9250_write_reg+0x48>)
 800200a:	f004 f9e3 	bl	80063d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	2120      	movs	r1, #32
 8002012:	4803      	ldr	r0, [pc, #12]	@ (8002020 <mpu9250_write_reg+0x44>)
 8002014:	f001 fa54 	bl	80034c0 <HAL_GPIO_WritePin>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	58020000 	.word	0x58020000
 8002024:	240002c0 	.word	0x240002c0

08002028 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800203e:	b2db      	uxtb	r3, r3
 8002040:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	2120      	movs	r1, #32
 8002046:	4814      	ldr	r0, [pc, #80]	@ (8002098 <mpu9250_read_reg+0x70>)
 8002048:	f001 fa3a 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 800204c:	f107 010e 	add.w	r1, r7, #14
 8002050:	2364      	movs	r3, #100	@ 0x64
 8002052:	2201      	movs	r2, #1
 8002054:	4811      	ldr	r0, [pc, #68]	@ (800209c <mpu9250_read_reg+0x74>)
 8002056:	f004 f9bd 	bl	80063d4 <HAL_SPI_Transmit>
 800205a:	4603      	mov	r3, r0
 800205c:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <mpu9250_read_reg+0x40>
		Error_Handler();
 8002064:	f7ff ffb4 	bl	8001fd0 <Error_Handler>
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 8002068:	79bb      	ldrb	r3, [r7, #6]
 800206a:	b29a      	uxth	r2, r3
 800206c:	2364      	movs	r3, #100	@ 0x64
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	480a      	ldr	r0, [pc, #40]	@ (800209c <mpu9250_read_reg+0x74>)
 8002072:	f004 fb9d 	bl	80067b0 <HAL_SPI_Receive>
 8002076:	4603      	mov	r3, r0
 8002078:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <mpu9250_read_reg+0x5c>
		Error_Handler();
 8002080:	f7ff ffa6 	bl	8001fd0 <Error_Handler>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2120      	movs	r1, #32
 8002088:	4803      	ldr	r0, [pc, #12]	@ (8002098 <mpu9250_read_reg+0x70>)
 800208a:	f001 fa19 	bl	80034c0 <HAL_GPIO_WritePin>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	58020000 	.word	0x58020000
 800209c:	240002c0 	.word	0x240002c0

080020a0 <mpu9250_setup>:

void mpu9250_setup()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 80020a4:	2105      	movs	r1, #5
 80020a6:	201a      	movs	r0, #26
 80020a8:	f7ff ff98 	bl	8001fdc <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 80020ac:	2110      	movs	r1, #16
 80020ae:	201c      	movs	r0, #28
 80020b0:	f7ff ff94 	bl	8001fdc <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 80020b4:	2108      	movs	r1, #8
 80020b6:	201b      	movs	r0, #27
 80020b8:	f7ff ff90 	bl	8001fdc <mpu9250_write_reg>
	mpu9250_calibrateGyro(1500);
 80020bc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80020c0:	f000 f814 	bl	80020ec <mpu9250_calibrateGyro>
	quat[0] = 1.0f;
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <mpu9250_setup+0x48>)
 80020c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020ca:	601a      	str	r2, [r3, #0]
	quat[1] = 0.0f;
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <mpu9250_setup+0x48>)
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]
	quat[2] = 0.0f;
 80020d4:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <mpu9250_setup+0x48>)
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
	quat[3] = 0.0f;
 80020dc:	4b02      	ldr	r3, [pc, #8]	@ (80020e8 <mpu9250_setup+0x48>)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
//	// magnetometer setup
//	mpu9250_write_reg(0x6A, 0x20);
//	mpu9250_write_reg(0x24, 0x0D);
//	mpu9250_write_reg(0x25, 0x8C);
//	mpu9250_write_reg(0x26, 0x03);
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	24000554 	.word	0x24000554

080020ec <mpu9250_calibrateGyro>:
    mpu9250_write_reg(0x26, 0x03);                   // Start at HXL register
    mpu9250_write_reg(0x27, 0x87);                   // Enable reading 7 bytes (0x80 | 7)
}

void mpu9250_calibrateGyro(uint16_t numCalPoints)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <mpu9250_calibrateGyro+0x20>
    {
        numCalPoints = 1;
 8002108:	2301      	movs	r3, #1
 800210a:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800210c:	2300      	movs	r3, #0
 800210e:	817b      	strh	r3, [r7, #10]
 8002110:	e01c      	b.n	800214c <mpu9250_calibrateGyro+0x60>
    {
        mpu9250_getRawData();
 8002112:	f000 f855 	bl	80021c0 <mpu9250_getRawData>
        x += imu_raw_data.gyro_x;
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <mpu9250_calibrateGyro+0xcc>)
 8002118:	88db      	ldrh	r3, [r3, #6]
 800211a:	b21b      	sxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
        y += imu_raw_data.gyro_y;
 8002124:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <mpu9250_calibrateGyro+0xcc>)
 8002126:	891b      	ldrh	r3, [r3, #8]
 8002128:	b21b      	sxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        z += imu_raw_data.gyro_z;
 8002132:	4b21      	ldr	r3, [pc, #132]	@ (80021b8 <mpu9250_calibrateGyro+0xcc>)
 8002134:	895b      	ldrh	r3, [r3, #10]
 8002136:	b21b      	sxth	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4413      	add	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 fe55 	bl	8002df0 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8002146:	897b      	ldrh	r3, [r7, #10]
 8002148:	3301      	adds	r3, #1
 800214a:	817b      	strh	r3, [r7, #10]
 800214c:	897a      	ldrh	r2, [r7, #10]
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3de      	bcc.n	8002112 <mpu9250_calibrateGyro+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    imu_processed_data.gyro_offX = (float)x / (float)numCalPoints;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <mpu9250_calibrateGyro+0xd0>)
 800216e:	edc3 7a00 	vstr	s15, [r3]
    imu_processed_data.gyro_offY = (float)y / (float)numCalPoints;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218a:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <mpu9250_calibrateGyro+0xd0>)
 800218c:	edc3 7a01 	vstr	s15, [r3, #4]
    imu_processed_data.gyro_offZ = (float)z / (float)numCalPoints;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a8:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <mpu9250_calibrateGyro+0xd0>)
 80021aa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	24000504 	.word	0x24000504
 80021bc:	24000518 	.word	0x24000518

080021c0 <mpu9250_getRawData>:



void mpu9250_getRawData()
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 80021c6:	463b      	mov	r3, r7
 80021c8:	2206      	movs	r2, #6
 80021ca:	4619      	mov	r1, r3
 80021cc:	203b      	movs	r0, #59	@ 0x3b
 80021ce:	f7ff ff2b 	bl	8002028 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 80021d2:	783b      	ldrb	r3, [r7, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21a      	sxth	r2, r3
 80021e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <mpu9250_getRawData+0x94>)
 80021e2:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 80021e4:	78bb      	ldrb	r3, [r7, #2]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <mpu9250_getRawData+0x94>)
 80021f4:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 80021f6:	793b      	ldrb	r3, [r7, #4]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	797b      	ldrb	r3, [r7, #5]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b21a      	sxth	r2, r3
 8002204:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <mpu9250_getRawData+0x94>)
 8002206:	809a      	strh	r2, [r3, #4]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 8002208:	463b      	mov	r3, r7
 800220a:	2206      	movs	r2, #6
 800220c:	4619      	mov	r1, r3
 800220e:	2043      	movs	r0, #67	@ 0x43
 8002210:	f7ff ff0a 	bl	8002028 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8002214:	783b      	ldrb	r3, [r7, #0]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	b21a      	sxth	r2, r3
 800221a:	787b      	ldrb	r3, [r7, #1]
 800221c:	b21b      	sxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b21a      	sxth	r2, r3
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <mpu9250_getRawData+0x94>)
 8002224:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8002226:	78bb      	ldrb	r3, [r7, #2]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	b21a      	sxth	r2, r3
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	b21b      	sxth	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b21a      	sxth	r2, r3
 8002234:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <mpu9250_getRawData+0x94>)
 8002236:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8002238:	793b      	ldrb	r3, [r7, #4]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21a      	sxth	r2, r3
 800223e:	797b      	ldrb	r3, [r7, #5]
 8002240:	b21b      	sxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b21a      	sxth	r2, r3
 8002246:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <mpu9250_getRawData+0x94>)
 8002248:	815a      	strh	r2, [r3, #10]
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	24000504 	.word	0x24000504

08002258 <mpu9250_getProcessedAngle>:

void mpu9250_getProcessedAngle()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
	  mpu9250_getRawData();
 800225e:	f7ff ffaf 	bl	80021c0 <mpu9250_getRawData>

	  imu_processed_data.accel_x = ((float)imu_raw_data.accel_x/4096.0) * 9.81;
 8002262:	4bc3      	ldr	r3, [pc, #780]	@ (8002570 <mpu9250_getProcessedAngle+0x318>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b21b      	sxth	r3, r3
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002270:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002274:	ed9f 5bb2 	vldr	d5, [pc, #712]	@ 8002540 <mpu9250_getProcessedAngle+0x2e8>
 8002278:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800227c:	ed9f 6bb2 	vldr	d6, [pc, #712]	@ 8002548 <mpu9250_getProcessedAngle+0x2f0>
 8002280:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002284:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002288:	4bba      	ldr	r3, [pc, #744]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 800228a:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.accel_y = ((float)imu_raw_data.accel_y/4096.0) * 9.81;
 800228e:	4bb8      	ldr	r3, [pc, #736]	@ (8002570 <mpu9250_getProcessedAngle+0x318>)
 8002290:	885b      	ldrh	r3, [r3, #2]
 8002292:	b21b      	sxth	r3, r3
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022a0:	ed9f 5ba7 	vldr	d5, [pc, #668]	@ 8002540 <mpu9250_getProcessedAngle+0x2e8>
 80022a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022a8:	ed9f 6ba7 	vldr	d6, [pc, #668]	@ 8002548 <mpu9250_getProcessedAngle+0x2f0>
 80022ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022b4:	4baf      	ldr	r3, [pc, #700]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80022b6:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.accel_z = ((float)imu_raw_data.accel_z/4096.0) * 9.81;
 80022ba:	4bad      	ldr	r3, [pc, #692]	@ (8002570 <mpu9250_getProcessedAngle+0x318>)
 80022bc:	889b      	ldrh	r3, [r3, #4]
 80022be:	b21b      	sxth	r3, r3
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022cc:	ed9f 5b9c 	vldr	d5, [pc, #624]	@ 8002540 <mpu9250_getProcessedAngle+0x2e8>
 80022d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022d4:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8002548 <mpu9250_getProcessedAngle+0x2f0>
 80022d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022e0:	4ba4      	ldr	r3, [pc, #656]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80022e2:	edc3 7a05 	vstr	s15, [r3, #20]
//	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0

	  imu_processed_data.gyro_x = ((float)imu_raw_data.gyro_x - imu_processed_data.gyro_offX)/65.5 * M_PI/180.0f;
 80022e6:	4ba2      	ldr	r3, [pc, #648]	@ (8002570 <mpu9250_getProcessedAngle+0x318>)
 80022e8:	88db      	ldrh	r3, [r3, #6]
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f4:	4b9f      	ldr	r3, [pc, #636]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002302:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 8002550 <mpu9250_getProcessedAngle+0x2f8>
 8002306:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800230a:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8002558 <mpu9250_getProcessedAngle+0x300>
 800230e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002312:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 8002560 <mpu9250_getProcessedAngle+0x308>
 8002316:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800231a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800231e:	4b95      	ldr	r3, [pc, #596]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 8002320:	edc3 7a06 	vstr	s15, [r3, #24]
	  imu_processed_data.gyro_y = ((float)imu_raw_data.gyro_y - imu_processed_data.gyro_offY)/65.5 * M_PI/180.0f;;
 8002324:	4b92      	ldr	r3, [pc, #584]	@ (8002570 <mpu9250_getProcessedAngle+0x318>)
 8002326:	891b      	ldrh	r3, [r3, #8]
 8002328:	b21b      	sxth	r3, r3
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002332:	4b90      	ldr	r3, [pc, #576]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 8002334:	edd3 7a01 	vldr	s15, [r3, #4]
 8002338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800233c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002340:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 8002550 <mpu9250_getProcessedAngle+0x2f8>
 8002344:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002348:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8002558 <mpu9250_getProcessedAngle+0x300>
 800234c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002350:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 8002560 <mpu9250_getProcessedAngle+0x308>
 8002354:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002358:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800235c:	4b85      	ldr	r3, [pc, #532]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 800235e:	edc3 7a07 	vstr	s15, [r3, #28]
	  imu_processed_data.gyro_z = ((float)imu_raw_data.gyro_z - imu_processed_data.gyro_offZ)/65.5 * M_PI/180.0f;;
 8002362:	4b83      	ldr	r3, [pc, #524]	@ (8002570 <mpu9250_getProcessedAngle+0x318>)
 8002364:	895b      	ldrh	r3, [r3, #10]
 8002366:	b21b      	sxth	r3, r3
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002370:	4b80      	ldr	r3, [pc, #512]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 8002372:	edd3 7a02 	vldr	s15, [r3, #8]
 8002376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800237e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8002550 <mpu9250_getProcessedAngle+0x2f8>
 8002382:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002386:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8002558 <mpu9250_getProcessedAngle+0x300>
 800238a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800238e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8002560 <mpu9250_getProcessedAngle+0x308>
 8002392:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002396:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800239a:	4b76      	ldr	r3, [pc, #472]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 800239c:	edc3 7a08 	vstr	s15, [r3, #32]
//	  mpu9250_read_reg(0x49, imu_data, sizeof(imu_data));
//	  imu_raw_data.mag_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
//	  imu_raw_data.mag_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
//	  imu_raw_data.mag_z = ((int16_t)imu_data[4]<<8) | imu_data[5];

	  MahonyAHRSupdateIMU(quat, imu_processed_data.gyro_x, imu_processed_data.gyro_y, imu_processed_data.gyro_z, imu_processed_data.accel_x, imu_processed_data.accel_y ,imu_processed_data.accel_z);
 80023a0:	4b74      	ldr	r3, [pc, #464]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80023a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80023a6:	4b73      	ldr	r3, [pc, #460]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80023a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80023ac:	4b71      	ldr	r3, [pc, #452]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80023ae:	edd3 6a08 	vldr	s13, [r3, #32]
 80023b2:	4b70      	ldr	r3, [pc, #448]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80023b4:	ed93 6a03 	vldr	s12, [r3, #12]
 80023b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80023ba:	edd3 5a04 	vldr	s11, [r3, #16]
 80023be:	4b6d      	ldr	r3, [pc, #436]	@ (8002574 <mpu9250_getProcessedAngle+0x31c>)
 80023c0:	ed93 5a05 	vldr	s10, [r3, #20]
 80023c4:	eef0 2a45 	vmov.f32	s5, s10
 80023c8:	eeb0 2a65 	vmov.f32	s4, s11
 80023cc:	eef0 1a46 	vmov.f32	s3, s12
 80023d0:	eeb0 1a66 	vmov.f32	s2, s13
 80023d4:	eef0 0a47 	vmov.f32	s1, s14
 80023d8:	eeb0 0a67 	vmov.f32	s0, s15
 80023dc:	4866      	ldr	r0, [pc, #408]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80023de:	f7fe fb43 	bl	8000a68 <MahonyAHRSupdateIMU>

	    /* Quternion to Euler */
	  float radPitch = asinf(-2.0f * (quat[1] * quat[3] - quat[0] * quat[2]));
 80023e2:	4b65      	ldr	r3, [pc, #404]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80023e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80023e8:	4b63      	ldr	r3, [pc, #396]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80023ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80023ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f2:	4b61      	ldr	r3, [pc, #388]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80023f4:	edd3 6a00 	vldr	s13, [r3]
 80023f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80023fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80023fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002406:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	eeb0 0a67 	vmov.f32	s0, s15
 8002412:	f00b fb5f 	bl	800dad4 <asinf>
 8002416:	ed87 0a03 	vstr	s0, [r7, #12]
	  float radRoll = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]), 2.0f * (quat[0] * quat[0] + quat[3] * quat[3]) - 1.0f);
 800241a:	4b57      	ldr	r3, [pc, #348]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 800241c:	ed93 7a00 	vldr	s14, [r3]
 8002420:	4b55      	ldr	r3, [pc, #340]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 8002422:	edd3 7a01 	vldr	s15, [r3, #4]
 8002426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242a:	4b53      	ldr	r3, [pc, #332]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 800242c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002430:	4b51      	ldr	r3, [pc, #324]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 8002432:	edd3 7a03 	vldr	s15, [r3, #12]
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002442:	4b4d      	ldr	r3, [pc, #308]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 8002444:	ed93 7a00 	vldr	s14, [r3]
 8002448:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002452:	4b49      	ldr	r3, [pc, #292]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 8002454:	edd3 6a03 	vldr	s13, [r3, #12]
 8002458:	4b47      	ldr	r3, [pc, #284]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 800245a:	edd3 7a03 	vldr	s15, [r3, #12]
 800245e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002466:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800246a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800246e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002472:	eef0 0a67 	vmov.f32	s1, s15
 8002476:	eeb0 0a46 	vmov.f32	s0, s12
 800247a:	f00b fb57 	bl	800db2c <atan2f>
 800247e:	ed87 0a02 	vstr	s0, [r7, #8]
	  float radYaw =  atan2f(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]), 2.0f * (quat[0] * quat[0] + quat[1] * quat[1]) - 1.0f);
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 8002484:	ed93 7a00 	vldr	s14, [r3]
 8002488:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 800248a:	edd3 7a03 	vldr	s15, [r3, #12]
 800248e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 8002494:	edd3 6a01 	vldr	s13, [r3, #4]
 8002498:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 800249a:	edd3 7a02 	vldr	s15, [r3, #8]
 800249e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80024aa:	4b33      	ldr	r3, [pc, #204]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80024ac:	ed93 7a00 	vldr	s14, [r3]
 80024b0:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80024bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80024c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002578 <mpu9250_getProcessedAngle+0x320>)
 80024c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80024c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024da:	eef0 0a67 	vmov.f32	s1, s15
 80024de:	eeb0 0a46 	vmov.f32	s0, s12
 80024e2:	f00b fb23 	bl	800db2c <atan2f>
 80024e6:	ed87 0a01 	vstr	s0, [r7, #4]
	    /* Radian to Degree*/
	  imu_angles.pitch = radPitch * RAD_TO_DEG;
 80024ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002568 <mpu9250_getProcessedAngle+0x310>
 80024f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024fe:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <mpu9250_getProcessedAngle+0x324>)
 8002500:	edc3 7a01 	vstr	s15, [r3, #4]
	  imu_angles.roll = radRoll * RAD_TO_DEG;
 8002504:	edd7 7a02 	vldr	s15, [r7, #8]
 8002508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800250c:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002568 <mpu9250_getProcessedAngle+0x310>
 8002510:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002514:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002518:	4b18      	ldr	r3, [pc, #96]	@ (800257c <mpu9250_getProcessedAngle+0x324>)
 800251a:	edc3 7a00 	vstr	s15, [r3]
	  imu_angles.yaw = radYaw * RAD_TO_DEG;
 800251e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002526:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8002568 <mpu9250_getProcessedAngle+0x310>
 800252a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800252e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <mpu9250_getProcessedAngle+0x324>)
 8002534:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	00000000 	.word	0x00000000
 8002544:	40b00000 	.word	0x40b00000
 8002548:	51eb851f 	.word	0x51eb851f
 800254c:	40239eb8 	.word	0x40239eb8
 8002550:	00000000 	.word	0x00000000
 8002554:	40506000 	.word	0x40506000
 8002558:	54442d18 	.word	0x54442d18
 800255c:	400921fb 	.word	0x400921fb
 8002560:	00000000 	.word	0x00000000
 8002564:	40668000 	.word	0x40668000
 8002568:	1a63c1f8 	.word	0x1a63c1f8
 800256c:	404ca5dc 	.word	0x404ca5dc
 8002570:	24000504 	.word	0x24000504
 8002574:	24000518 	.word	0x24000518
 8002578:	24000554 	.word	0x24000554
 800257c:	24000548 	.word	0x24000548

08002580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_MspInit+0x30>)
 8002588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800258c:	4a08      	ldr	r2, [pc, #32]	@ (80025b0 <HAL_MspInit+0x30>)
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_MspInit+0x30>)
 8002598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	58024400 	.word	0x58024400

080025b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0be      	sub	sp, #248	@ 0xf8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025cc:	f107 0320 	add.w	r3, r7, #32
 80025d0:	22c0      	movs	r2, #192	@ 0xc0
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f007 ff68 	bl	800a4aa <memset>
  if(hspi->Instance==SPI1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a71      	ldr	r2, [pc, #452]	@ (80027a4 <HAL_SPI_MspInit+0x1f0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d16a      	bne.n	80026ba <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80025e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f6:	f107 0320 	add.w	r3, r7, #32
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 ff9a 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002606:	f7ff fce3 	bl	8001fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800260a:	4b67      	ldr	r3, [pc, #412]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 800260c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002610:	4a65      	ldr	r2, [pc, #404]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 8002612:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800261a:	4b63      	ldr	r3, [pc, #396]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 800261c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 800262a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800262e:	4a5e      	ldr	r2, [pc, #376]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002638:	4b5b      	ldr	r3, [pc, #364]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 800263a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	4b58      	ldr	r3, [pc, #352]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 8002648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800264c:	4a56      	ldr	r2, [pc, #344]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002656:	4b54      	ldr	r3, [pc, #336]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 8002658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800267c:	2305      	movs	r3, #5
 800267e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002686:	4619      	mov	r1, r3
 8002688:	4848      	ldr	r0, [pc, #288]	@ (80027ac <HAL_SPI_MspInit+0x1f8>)
 800268a:	f000 fd69 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800268e:	2318      	movs	r3, #24
 8002690:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a6:	2305      	movs	r3, #5
 80026a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80026b0:	4619      	mov	r1, r3
 80026b2:	483f      	ldr	r0, [pc, #252]	@ (80027b0 <HAL_SPI_MspInit+0x1fc>)
 80026b4:	f000 fd54 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026b8:	e070      	b.n	800279c <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a3d      	ldr	r2, [pc, #244]	@ (80027b4 <HAL_SPI_MspInit+0x200>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d16b      	bne.n	800279c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d6:	f107 0320 	add.w	r3, r7, #32
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 ff2a 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_SPI_MspInit+0x136>
      Error_Handler();
 80026e6:	f7ff fc73 	bl	8001fd0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ea:	4b2f      	ldr	r3, [pc, #188]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 80026ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f0:	4a2d      	ldr	r2, [pc, #180]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026fa:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 80026fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002708:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 800270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270e:	4a26      	ldr	r2, [pc, #152]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002718:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 800271a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272c:	4a1e      	ldr	r2, [pc, #120]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002736:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <HAL_SPI_MspInit+0x1f4>)
 8002738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002744:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002748:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800275e:	2305      	movs	r3, #5
 8002760:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002764:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002768:	4619      	mov	r1, r3
 800276a:	4811      	ldr	r0, [pc, #68]	@ (80027b0 <HAL_SPI_MspInit+0x1fc>)
 800276c:	f000 fcf8 	bl	8003160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002770:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002774:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800278a:	2305      	movs	r3, #5
 800278c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002794:	4619      	mov	r1, r3
 8002796:	4805      	ldr	r0, [pc, #20]	@ (80027ac <HAL_SPI_MspInit+0x1f8>)
 8002798:	f000 fce2 	bl	8003160 <HAL_GPIO_Init>
}
 800279c:	bf00      	nop
 800279e:	37f8      	adds	r7, #248	@ 0xf8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40013000 	.word	0x40013000
 80027a8:	58024400 	.word	0x58024400
 80027ac:	58020000 	.word	0x58020000
 80027b0:	58020400 	.word	0x58020400
 80027b4:	40003800 	.word	0x40003800

080027b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1d      	ldr	r2, [pc, #116]	@ (800283c <HAL_TIM_Base_MspInit+0x84>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d117      	bne.n	80027fa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_TIM_Base_MspInit+0x88>)
 80027cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002840 <HAL_TIM_Base_MspInit+0x88>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027da:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_TIM_Base_MspInit+0x88>)
 80027dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	2019      	movs	r0, #25
 80027ee:	f000 fc0a 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027f2:	2019      	movs	r0, #25
 80027f4:	f000 fc21 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027f8:	e01b      	b.n	8002832 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002802:	d116      	bne.n	8002832 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002804:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_TIM_Base_MspInit+0x88>)
 8002806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800280a:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_TIM_Base_MspInit+0x88>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002814:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_TIM_Base_MspInit+0x88>)
 8002816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	201c      	movs	r0, #28
 8002828:	f000 fbed 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800282c:	201c      	movs	r0, #28
 800282e:	f000 fc04 	bl	800303a <HAL_NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40010000 	.word	0x40010000
 8002840:	58024400 	.word	0x58024400

08002844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a13      	ldr	r2, [pc, #76]	@ (80028b0 <HAL_TIM_MspPostInit+0x6c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d11f      	bne.n	80028a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002866:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <HAL_TIM_MspPostInit+0x70>)
 8002868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800286c:	4a11      	ldr	r2, [pc, #68]	@ (80028b4 <HAL_TIM_MspPostInit+0x70>)
 800286e:	f043 0310 	orr.w	r3, r3, #16
 8002872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002876:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_TIM_MspPostInit+0x70>)
 8002878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002884:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002888:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	@ (80028b8 <HAL_TIM_MspPostInit+0x74>)
 80028a2:	f000 fc5d 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028a6:	bf00      	nop
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40010000 	.word	0x40010000
 80028b4:	58024400 	.word	0x58024400
 80028b8:	58021000 	.word	0x58021000

080028bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b0ba      	sub	sp, #232	@ 0xe8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	22c0      	movs	r2, #192	@ 0xc0
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f007 fde4 	bl	800a4aa <memset>
  if(huart->Instance==USART2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a26      	ldr	r2, [pc, #152]	@ (8002980 <HAL_UART_MspInit+0xc4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d145      	bne.n	8002978 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028ec:	f04f 0202 	mov.w	r2, #2
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fe16 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800290e:	f7ff fb5f 	bl	8001fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002912:	4b1c      	ldr	r3, [pc, #112]	@ (8002984 <HAL_UART_MspInit+0xc8>)
 8002914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002918:	4a1a      	ldr	r2, [pc, #104]	@ (8002984 <HAL_UART_MspInit+0xc8>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002922:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <HAL_UART_MspInit+0xc8>)
 8002924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <HAL_UART_MspInit+0xc8>)
 8002932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002936:	4a13      	ldr	r2, [pc, #76]	@ (8002984 <HAL_UART_MspInit+0xc8>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002940:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_UART_MspInit+0xc8>)
 8002942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800294e:	230c      	movs	r3, #12
 8002950:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002966:	2307      	movs	r3, #7
 8002968:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002970:	4619      	mov	r1, r3
 8002972:	4805      	ldr	r0, [pc, #20]	@ (8002988 <HAL_UART_MspInit+0xcc>)
 8002974:	f000 fbf4 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002978:	bf00      	nop
 800297a:	37e8      	adds	r7, #232	@ 0xe8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40004400 	.word	0x40004400
 8002984:	58024400 	.word	0x58024400
 8002988:	58020000 	.word	0x58020000

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <NMI_Handler+0x4>

08002994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <HardFault_Handler+0x4>

0800299c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <MemManage_Handler+0x4>

080029a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <BusFault_Handler+0x4>

080029ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <UsageFault_Handler+0x4>

080029b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e2:	f000 f9e5 	bl	8002db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029f0:	4802      	ldr	r0, [pc, #8]	@ (80029fc <TIM1_UP_IRQHandler+0x10>)
 80029f2:	f004 fc77 	bl	80072e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	240003d0 	.word	0x240003d0

08002a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a04:	4802      	ldr	r0, [pc, #8]	@ (8002a10 <TIM2_IRQHandler+0x10>)
 8002a06:	f004 fc6d 	bl	80072e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2400041c 	.word	0x2400041c

08002a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return 1;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_kill>:

int _kill(int pid, int sig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a2e:	f007 fd8f 	bl	800a550 <__errno>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2216      	movs	r2, #22
 8002a36:	601a      	str	r2, [r3, #0]
  return -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_exit>:

void _exit (int status)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ffe7 	bl	8002a24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a56:	bf00      	nop
 8002a58:	e7fd      	b.n	8002a56 <_exit+0x12>

08002a5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e00a      	b.n	8002a82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a6c:	f3af 8000 	nop.w
 8002a70:	4601      	mov	r1, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	60ba      	str	r2, [r7, #8]
 8002a78:	b2ca      	uxtb	r2, r1
 8002a7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	dbf0      	blt.n	8002a6c <_read+0x12>
  }

  return len;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002abc:	605a      	str	r2, [r3, #4]
  return 0;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_isatty>:

int _isatty(int file)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ad4:	2301      	movs	r3, #1
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <_sbrk+0x5c>)
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <_sbrk+0x60>)
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b10:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <_sbrk+0x64>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <_sbrk+0x64>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <_sbrk+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1e:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d207      	bcs.n	8002b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b2c:	f007 fd10 	bl	800a550 <__errno>
 8002b30:	4603      	mov	r3, r0
 8002b32:	220c      	movs	r2, #12
 8002b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	e009      	b.n	8002b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b3c:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b42:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <_sbrk+0x64>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4a05      	ldr	r2, [pc, #20]	@ (8002b60 <_sbrk+0x64>)
 8002b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	24080000 	.word	0x24080000
 8002b5c:	00000400 	.word	0x00000400
 8002b60:	24000564 	.word	0x24000564
 8002b64:	240006b8 	.word	0x240006b8

08002b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b6c:	4b37      	ldr	r3, [pc, #220]	@ (8002c4c <SystemInit+0xe4>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b72:	4a36      	ldr	r2, [pc, #216]	@ (8002c4c <SystemInit+0xe4>)
 8002b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b7c:	4b34      	ldr	r3, [pc, #208]	@ (8002c50 <SystemInit+0xe8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d807      	bhi.n	8002b98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b88:	4b31      	ldr	r3, [pc, #196]	@ (8002c50 <SystemInit+0xe8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 030f 	bic.w	r3, r3, #15
 8002b90:	4a2f      	ldr	r2, [pc, #188]	@ (8002c50 <SystemInit+0xe8>)
 8002b92:	f043 0307 	orr.w	r3, r3, #7
 8002b96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b98:	4b2e      	ldr	r3, [pc, #184]	@ (8002c54 <SystemInit+0xec>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c54 <SystemInit+0xec>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c54 <SystemInit+0xec>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002baa:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <SystemInit+0xec>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4929      	ldr	r1, [pc, #164]	@ (8002c54 <SystemInit+0xec>)
 8002bb0:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <SystemInit+0xf0>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bb6:	4b26      	ldr	r3, [pc, #152]	@ (8002c50 <SystemInit+0xe8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bc2:	4b23      	ldr	r3, [pc, #140]	@ (8002c50 <SystemInit+0xe8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 030f 	bic.w	r3, r3, #15
 8002bca:	4a21      	ldr	r2, [pc, #132]	@ (8002c50 <SystemInit+0xe8>)
 8002bcc:	f043 0307 	orr.w	r3, r3, #7
 8002bd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002bd2:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <SystemInit+0xec>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <SystemInit+0xec>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002bde:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <SystemInit+0xec>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <SystemInit+0xec>)
 8002be6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c5c <SystemInit+0xf4>)
 8002be8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002bea:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <SystemInit+0xec>)
 8002bec:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <SystemInit+0xf8>)
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002bf0:	4b18      	ldr	r3, [pc, #96]	@ (8002c54 <SystemInit+0xec>)
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c64 <SystemInit+0xfc>)
 8002bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002bf6:	4b17      	ldr	r3, [pc, #92]	@ (8002c54 <SystemInit+0xec>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <SystemInit+0xec>)
 8002bfe:	4a19      	ldr	r2, [pc, #100]	@ (8002c64 <SystemInit+0xfc>)
 8002c00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c02:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <SystemInit+0xec>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c08:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <SystemInit+0xec>)
 8002c0a:	4a16      	ldr	r2, [pc, #88]	@ (8002c64 <SystemInit+0xfc>)
 8002c0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <SystemInit+0xec>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <SystemInit+0xec>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0e      	ldr	r2, [pc, #56]	@ (8002c54 <SystemInit+0xec>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <SystemInit+0xec>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <SystemInit+0x100>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <SystemInit+0x104>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c32:	d202      	bcs.n	8002c3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c34:	4b0e      	ldr	r3, [pc, #56]	@ (8002c70 <SystemInit+0x108>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <SystemInit+0x10c>)
 8002c3c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002c40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00
 8002c50:	52002000 	.word	0x52002000
 8002c54:	58024400 	.word	0x58024400
 8002c58:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c5c:	02020200 	.word	0x02020200
 8002c60:	01ff0000 	.word	0x01ff0000
 8002c64:	01010280 	.word	0x01010280
 8002c68:	5c001000 	.word	0x5c001000
 8002c6c:	ffff0000 	.word	0xffff0000
 8002c70:	51008108 	.word	0x51008108
 8002c74:	52004000 	.word	0x52004000

08002c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c7c:	f7ff ff74 	bl	8002b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c80:	480c      	ldr	r0, [pc, #48]	@ (8002cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c82:	490d      	ldr	r1, [pc, #52]	@ (8002cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c84:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c88:	e002      	b.n	8002c90 <LoopCopyDataInit>

08002c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8e:	3304      	adds	r3, #4

08002c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c94:	d3f9      	bcc.n	8002c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c96:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c98:	4c0a      	ldr	r4, [pc, #40]	@ (8002cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c9c:	e001      	b.n	8002ca2 <LoopFillZerobss>

08002c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca0:	3204      	adds	r2, #4

08002ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca4:	d3fb      	bcc.n	8002c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ca6:	f007 fc59 	bl	800a55c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002caa:	f7fe fd55 	bl	8001758 <main>
  bx  lr
 8002cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002cb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cb8:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002cbc:	08010368 	.word	0x08010368
  ldr r2, =_sbss
 8002cc0:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002cc4:	240006b8 	.word	0x240006b8

08002cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc8:	e7fe      	b.n	8002cc8 <ADC3_IRQHandler>
	...

08002ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	f000 f98c 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd8:	f001 fa56 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <HAL_Init+0x68>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	4913      	ldr	r1, [pc, #76]	@ (8002d38 <HAL_Init+0x6c>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <HAL_Init+0x68>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8002d38 <HAL_Init+0x6c>)
 8002d00:	5cd3      	ldrb	r3, [r2, r3]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_Init+0x70>)
 8002d0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d10:	4a0b      	ldr	r2, [pc, #44]	@ (8002d40 <HAL_Init+0x74>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d16:	200f      	movs	r0, #15
 8002d18:	f000 f814 	bl	8002d44 <HAL_InitTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e002      	b.n	8002d2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d26:	f7ff fc2b 	bl	8002580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	58024400 	.word	0x58024400
 8002d38:	0800e600 	.word	0x0800e600
 8002d3c:	24000008 	.word	0x24000008
 8002d40:	24000004 	.word	0x24000004

08002d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d4c:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <HAL_InitTick+0x60>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e021      	b.n	8002d9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <HAL_InitTick+0x64>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_InitTick+0x60>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f971 	bl	8003056 <HAL_SYSTICK_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00e      	b.n	8002d9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b0f      	cmp	r3, #15
 8002d82:	d80a      	bhi.n	8002d9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d84:	2200      	movs	r2, #0
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f000 f93b 	bl	8003006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d90:	4a06      	ldr	r2, [pc, #24]	@ (8002dac <HAL_InitTick+0x68>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	24000010 	.word	0x24000010
 8002da8:	24000004 	.word	0x24000004
 8002dac:	2400000c 	.word	0x2400000c

08002db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002db4:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_IncTick+0x20>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_IncTick+0x24>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <HAL_IncTick+0x24>)
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	24000010 	.word	0x24000010
 8002dd4:	24000568 	.word	0x24000568

08002dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return uwTick;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <HAL_GetTick+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	24000568 	.word	0x24000568

08002df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7ff ffee 	bl	8002dd8 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d005      	beq.n	8002e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <HAL_Delay+0x44>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e16:	bf00      	nop
 8002e18:	f7ff ffde 	bl	8002dd8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d8f7      	bhi.n	8002e18 <HAL_Delay+0x28>
  {
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	24000010 	.word	0x24000010

08002e38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_GetREVID+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0c1b      	lsrs	r3, r3, #16
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	5c001000 	.word	0x5c001000

08002e50 <__NVIC_SetPriorityGrouping>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <__NVIC_SetPriorityGrouping+0x40>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7e:	4a04      	ldr	r2, [pc, #16]	@ (8002e90 <__NVIC_SetPriorityGrouping+0x40>)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	60d3      	str	r3, [r2, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	05fa0000 	.word	0x05fa0000

08002e98 <__NVIC_GetPriorityGrouping>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	@ (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	@ (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	@ (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	@ 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	@ 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <SysTick_Config>:
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f7ff ff8e 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff29 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff40 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff90 	bl	8002f44 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5f 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff33 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ffa4 	bl	8002fac <SysTick_Config>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003074:	f3bf 8f5f 	dmb	sy
}
 8003078:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800307a:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <HAL_MPU_Disable+0x28>)
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	4a06      	ldr	r2, [pc, #24]	@ (8003098 <HAL_MPU_Disable+0x28>)
 8003080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003084:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003086:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_MPU_Disable+0x2c>)
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000ed00 	.word	0xe000ed00
 800309c:	e000ed90 	.word	0xe000ed90

080030a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80030a8:	4a0b      	ldr	r2, [pc, #44]	@ (80030d8 <HAL_MPU_Enable+0x38>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80030b2:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <HAL_MPU_Enable+0x3c>)
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <HAL_MPU_Enable+0x3c>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030bc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80030be:	f3bf 8f4f 	dsb	sy
}
 80030c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030c4:	f3bf 8f6f 	isb	sy
}
 80030c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000ed90 	.word	0xe000ed90
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	785a      	ldrb	r2, [r3, #1]
 80030ec:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_MPU_ConfigRegion+0x7c>)
 80030ee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <HAL_MPU_ConfigRegion+0x7c>)
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	4a19      	ldr	r2, [pc, #100]	@ (800315c <HAL_MPU_ConfigRegion+0x7c>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80030fc:	4a17      	ldr	r2, [pc, #92]	@ (800315c <HAL_MPU_ConfigRegion+0x7c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7b1b      	ldrb	r3, [r3, #12]
 8003108:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7adb      	ldrb	r3, [r3, #11]
 800310e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003110:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7a9b      	ldrb	r3, [r3, #10]
 8003116:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003118:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7b5b      	ldrb	r3, [r3, #13]
 800311e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003120:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7b9b      	ldrb	r3, [r3, #14]
 8003126:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003128:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7bdb      	ldrb	r3, [r3, #15]
 800312e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003130:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7a5b      	ldrb	r3, [r3, #9]
 8003136:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003138:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7a1b      	ldrb	r3, [r3, #8]
 800313e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003140:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003148:	4a04      	ldr	r2, [pc, #16]	@ (800315c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800314a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800314c:	6113      	str	r3, [r2, #16]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed90 	.word	0xe000ed90

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800316e:	4b89      	ldr	r3, [pc, #548]	@ (8003394 <HAL_GPIO_Init+0x234>)
 8003170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003172:	e194      	b.n	800349e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8186 	beq.w	8003498 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d005      	beq.n	80031a4 <HAL_GPIO_Init+0x44>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d130      	bne.n	8003206 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031da:	2201      	movs	r2, #1
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0201 	and.w	r2, r3, #1
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b03      	cmp	r3, #3
 8003210:	d017      	beq.n	8003242 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d123      	bne.n	8003296 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	69b9      	ldr	r1, [r7, #24]
 8003292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0203 	and.w	r2, r3, #3
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80e0 	beq.w	8003498 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003398 <HAL_GPIO_Init+0x238>)
 80032da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032de:	4a2e      	ldr	r2, [pc, #184]	@ (8003398 <HAL_GPIO_Init+0x238>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80032e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <HAL_GPIO_Init+0x238>)
 80032ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f6:	4a29      	ldr	r2, [pc, #164]	@ (800339c <HAL_GPIO_Init+0x23c>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a20      	ldr	r2, [pc, #128]	@ (80033a0 <HAL_GPIO_Init+0x240>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d052      	beq.n	80033c8 <HAL_GPIO_Init+0x268>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <HAL_GPIO_Init+0x244>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_GPIO_Init+0x22e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <HAL_GPIO_Init+0x248>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02b      	beq.n	800338a <HAL_GPIO_Init+0x22a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <HAL_GPIO_Init+0x24c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <HAL_GPIO_Init+0x250>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1b      	ldr	r2, [pc, #108]	@ (80033b4 <HAL_GPIO_Init+0x254>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1a      	ldr	r2, [pc, #104]	@ (80033b8 <HAL_GPIO_Init+0x258>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a19      	ldr	r2, [pc, #100]	@ (80033bc <HAL_GPIO_Init+0x25c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a18      	ldr	r2, [pc, #96]	@ (80033c0 <HAL_GPIO_Init+0x260>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <HAL_GPIO_Init+0x264>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x20e>
 800336a:	2309      	movs	r3, #9
 800336c:	e02d      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800336e:	230a      	movs	r3, #10
 8003370:	e02b      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003372:	2308      	movs	r3, #8
 8003374:	e029      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003376:	2307      	movs	r3, #7
 8003378:	e027      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800337a:	2306      	movs	r3, #6
 800337c:	e025      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800337e:	2305      	movs	r3, #5
 8003380:	e023      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003382:	2304      	movs	r3, #4
 8003384:	e021      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003386:	2303      	movs	r3, #3
 8003388:	e01f      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800338a:	2302      	movs	r3, #2
 800338c:	e01d      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800338e:	2301      	movs	r3, #1
 8003390:	e01b      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003392:	bf00      	nop
 8003394:	58000080 	.word	0x58000080
 8003398:	58024400 	.word	0x58024400
 800339c:	58000400 	.word	0x58000400
 80033a0:	58020000 	.word	0x58020000
 80033a4:	58020400 	.word	0x58020400
 80033a8:	58020800 	.word	0x58020800
 80033ac:	58020c00 	.word	0x58020c00
 80033b0:	58021000 	.word	0x58021000
 80033b4:	58021400 	.word	0x58021400
 80033b8:	58021800 	.word	0x58021800
 80033bc:	58021c00 	.word	0x58021c00
 80033c0:	58022000 	.word	0x58022000
 80033c4:	58022400 	.word	0x58022400
 80033c8:	2300      	movs	r3, #0
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	f002 0203 	and.w	r2, r2, #3
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	4093      	lsls	r3, r2
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033da:	4938      	ldr	r1, [pc, #224]	@ (80034bc <HAL_GPIO_Init+0x35c>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800340e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800343c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3301      	adds	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f47f ae63 	bne.w	8003174 <HAL_GPIO_Init+0x14>
  }
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	3724      	adds	r7, #36	@ 0x24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	58000400 	.word	0x58000400

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034dc:	e003      	b.n	80034e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	619a      	str	r2, [r3, #24]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <HAL_PWREx_ConfigSupply+0x70>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b04      	cmp	r3, #4
 8003506:	d00a      	beq.n	800351e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003508:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <HAL_PWREx_ConfigSupply+0x70>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d001      	beq.n	800351a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e01f      	b.n	800355a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e01d      	b.n	800355a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800351e:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <HAL_PWREx_ConfigSupply+0x70>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	490f      	ldr	r1, [pc, #60]	@ (8003564 <HAL_PWREx_ConfigSupply+0x70>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4313      	orrs	r3, r2
 800352c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800352e:	f7ff fc53 	bl	8002dd8 <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003534:	e009      	b.n	800354a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003536:	f7ff fc4f 	bl	8002dd8 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003544:	d901      	bls.n	800354a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e007      	b.n	800355a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800354a:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_PWREx_ConfigSupply+0x70>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003556:	d1ee      	bne.n	8003536 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	58024800 	.word	0x58024800

08003568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	@ 0x30
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f000 bc48 	b.w	8003e0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8088 	beq.w	800369a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800358a:	4b99      	ldr	r3, [pc, #612]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003594:	4b96      	ldr	r3, [pc, #600]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	2b10      	cmp	r3, #16
 800359e:	d007      	beq.n	80035b0 <HAL_RCC_OscConfig+0x48>
 80035a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a2:	2b18      	cmp	r3, #24
 80035a4:	d111      	bne.n	80035ca <HAL_RCC_OscConfig+0x62>
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d10c      	bne.n	80035ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	4b8f      	ldr	r3, [pc, #572]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d06d      	beq.n	8003698 <HAL_RCC_OscConfig+0x130>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d169      	bne.n	8003698 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f000 bc21 	b.w	8003e0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x7a>
 80035d4:	4b86      	ldr	r3, [pc, #536]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a85      	ldr	r2, [pc, #532]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80035da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	e02e      	b.n	8003640 <HAL_RCC_OscConfig+0xd8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x9c>
 80035ea:	4b81      	ldr	r3, [pc, #516]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a80      	ldr	r2, [pc, #512]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80035f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	4b7e      	ldr	r3, [pc, #504]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7d      	ldr	r2, [pc, #500]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80035fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e01d      	b.n	8003640 <HAL_RCC_OscConfig+0xd8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0xc0>
 800360e:	4b78      	ldr	r3, [pc, #480]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a77      	ldr	r2, [pc, #476]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b75      	ldr	r3, [pc, #468]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a74      	ldr	r2, [pc, #464]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0xd8>
 8003628:	4b71      	ldr	r3, [pc, #452]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a70      	ldr	r2, [pc, #448]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b6e      	ldr	r3, [pc, #440]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6d      	ldr	r2, [pc, #436]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800363a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800363e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7ff fbc6 	bl	8002dd8 <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7ff fbc2 	bl	8002dd8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	@ 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e3d4      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003662:	4b63      	ldr	r3, [pc, #396]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0xe8>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7ff fbb2 	bl	8002dd8 <HAL_GetTick>
 8003674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7ff fbae 	bl	8002dd8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	@ 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e3c0      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800368a:	4b59      	ldr	r3, [pc, #356]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x110>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80ca 	beq.w	800383c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a8:	4b51      	ldr	r3, [pc, #324]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036b2:	4b4f      	ldr	r3, [pc, #316]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80036b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_RCC_OscConfig+0x166>
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	2b18      	cmp	r3, #24
 80036c2:	d156      	bne.n	8003772 <HAL_RCC_OscConfig+0x20a>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d151      	bne.n	8003772 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ce:	4b48      	ldr	r3, [pc, #288]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_RCC_OscConfig+0x17e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e392      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036e6:	4b42      	ldr	r3, [pc, #264]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0219 	bic.w	r2, r3, #25
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	493f      	ldr	r1, [pc, #252]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7ff fb6e 	bl	8002dd8 <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003700:	f7ff fb6a 	bl	8002dd8 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e37c      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003712:	4b37      	ldr	r3, [pc, #220]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	f7ff fb8b 	bl	8002e38 <HAL_GetREVID>
 8003722:	4603      	mov	r3, r0
 8003724:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003728:	4293      	cmp	r3, r2
 800372a:	d817      	bhi.n	800375c <HAL_RCC_OscConfig+0x1f4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b40      	cmp	r3, #64	@ 0x40
 8003732:	d108      	bne.n	8003746 <HAL_RCC_OscConfig+0x1de>
 8003734:	4b2e      	ldr	r3, [pc, #184]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800373c:	4a2c      	ldr	r2, [pc, #176]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003742:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003744:	e07a      	b.n	800383c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003746:	4b2a      	ldr	r3, [pc, #168]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	031b      	lsls	r3, r3, #12
 8003754:	4926      	ldr	r1, [pc, #152]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375a:	e06f      	b.n	800383c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375c:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	4921      	ldr	r1, [pc, #132]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003770:	e064      	b.n	800383c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d047      	beq.n	800380a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800377a:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 0219 	bic.w	r2, r3, #25
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	491a      	ldr	r1, [pc, #104]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7ff fb24 	bl	8002dd8 <HAL_GetTick>
 8003790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7ff fb20 	bl	8002dd8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e332      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a6:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	f7ff fb41 	bl	8002e38 <HAL_GetREVID>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037bc:	4293      	cmp	r3, r2
 80037be:	d819      	bhi.n	80037f4 <HAL_RCC_OscConfig+0x28c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b40      	cmp	r3, #64	@ 0x40
 80037c6:	d108      	bne.n	80037da <HAL_RCC_OscConfig+0x272>
 80037c8:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037d0:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80037d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d6:	6053      	str	r3, [r2, #4]
 80037d8:	e030      	b.n	800383c <HAL_RCC_OscConfig+0x2d4>
 80037da:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	031b      	lsls	r3, r3, #12
 80037e8:	4901      	ldr	r1, [pc, #4]	@ (80037f0 <HAL_RCC_OscConfig+0x288>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
 80037ee:	e025      	b.n	800383c <HAL_RCC_OscConfig+0x2d4>
 80037f0:	58024400 	.word	0x58024400
 80037f4:	4b9a      	ldr	r3, [pc, #616]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	4997      	ldr	r1, [pc, #604]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
 8003808:	e018      	b.n	800383c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380a:	4b95      	ldr	r3, [pc, #596]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a94      	ldr	r2, [pc, #592]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7ff fadf 	bl	8002dd8 <HAL_GetTick>
 800381a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381e:	f7ff fadb 	bl	8002dd8 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e2ed      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003830:	4b8b      	ldr	r3, [pc, #556]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f0      	bne.n	800381e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a9 	beq.w	800399c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384a:	4b85      	ldr	r3, [pc, #532]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003852:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003854:	4b82      	ldr	r3, [pc, #520]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d007      	beq.n	8003870 <HAL_RCC_OscConfig+0x308>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b18      	cmp	r3, #24
 8003864:	d13a      	bne.n	80038dc <HAL_RCC_OscConfig+0x374>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d135      	bne.n	80038dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003870:	4b7b      	ldr	r3, [pc, #492]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_OscConfig+0x320>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	2b80      	cmp	r3, #128	@ 0x80
 8003882:	d001      	beq.n	8003888 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e2c1      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003888:	f7ff fad6 	bl	8002e38 <HAL_GetREVID>
 800388c:	4603      	mov	r3, r0
 800388e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003892:	4293      	cmp	r3, r2
 8003894:	d817      	bhi.n	80038c6 <HAL_RCC_OscConfig+0x35e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	2b20      	cmp	r3, #32
 800389c:	d108      	bne.n	80038b0 <HAL_RCC_OscConfig+0x348>
 800389e:	4b70      	ldr	r3, [pc, #448]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80038a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80038a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ae:	e075      	b.n	800399c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	069b      	lsls	r3, r3, #26
 80038be:	4968      	ldr	r1, [pc, #416]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038c4:	e06a      	b.n	800399c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038c6:	4b66      	ldr	r3, [pc, #408]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	061b      	lsls	r3, r3, #24
 80038d4:	4962      	ldr	r1, [pc, #392]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038da:	e05f      	b.n	800399c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d042      	beq.n	800396a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80038ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7ff fa72 	bl	8002dd8 <HAL_GetTick>
 80038f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038f8:	f7ff fa6e 	bl	8002dd8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e280      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800390a:	4b55      	ldr	r3, [pc, #340]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003916:	f7ff fa8f 	bl	8002e38 <HAL_GetREVID>
 800391a:	4603      	mov	r3, r0
 800391c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003920:	4293      	cmp	r3, r2
 8003922:	d817      	bhi.n	8003954 <HAL_RCC_OscConfig+0x3ec>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	2b20      	cmp	r3, #32
 800392a:	d108      	bne.n	800393e <HAL_RCC_OscConfig+0x3d6>
 800392c:	4b4c      	ldr	r3, [pc, #304]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003934:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800393a:	6053      	str	r3, [r2, #4]
 800393c:	e02e      	b.n	800399c <HAL_RCC_OscConfig+0x434>
 800393e:	4b48      	ldr	r3, [pc, #288]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	069b      	lsls	r3, r3, #26
 800394c:	4944      	ldr	r1, [pc, #272]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
 8003952:	e023      	b.n	800399c <HAL_RCC_OscConfig+0x434>
 8003954:	4b42      	ldr	r3, [pc, #264]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	493f      	ldr	r1, [pc, #252]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003964:	4313      	orrs	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
 8003968:	e018      	b.n	800399c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800396a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7ff fa2f 	bl	8002dd8 <HAL_GetTick>
 800397a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800397e:	f7ff fa2b 	bl	8002dd8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e23d      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003990:	4b33      	ldr	r3, [pc, #204]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f0      	bne.n	800397e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d036      	beq.n	8003a16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d019      	beq.n	80039e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80039b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7ff fa0c 	bl	8002dd8 <HAL_GetTick>
 80039c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c4:	f7ff fa08 	bl	8002dd8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e21a      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039d6:	4b22      	ldr	r3, [pc, #136]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x45c>
 80039e2:	e018      	b.n	8003a16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7ff f9f2 	bl	8002dd8 <HAL_GetTick>
 80039f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f8:	f7ff f9ee 	bl	8002dd8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e200      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d039      	beq.n	8003a96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01c      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003a30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a36:	f7ff f9cf 	bl	8002dd8 <HAL_GetTick>
 8003a3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3e:	f7ff f9cb 	bl	8002dd8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e1dd      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a50:	4b03      	ldr	r3, [pc, #12]	@ (8003a60 <HAL_RCC_OscConfig+0x4f8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
 8003a5c:	e01b      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
 8003a5e:	bf00      	nop
 8003a60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a64:	4b9b      	ldr	r3, [pc, #620]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a9a      	ldr	r2, [pc, #616]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003a6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a70:	f7ff f9b2 	bl	8002dd8 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a78:	f7ff f9ae 	bl	8002dd8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e1c0      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a8a:	4b92      	ldr	r3, [pc, #584]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8081 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd8 <HAL_RCC_OscConfig+0x770>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a8b      	ldr	r2, [pc, #556]	@ (8003cd8 <HAL_RCC_OscConfig+0x770>)
 8003aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ab0:	f7ff f992 	bl	8002dd8 <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab8:	f7ff f98e 	bl	8002dd8 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	@ 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1a0      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aca:	4b83      	ldr	r3, [pc, #524]	@ (8003cd8 <HAL_RCC_OscConfig+0x770>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d106      	bne.n	8003aec <HAL_RCC_OscConfig+0x584>
 8003ade:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	4a7c      	ldr	r2, [pc, #496]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aea:	e02d      	b.n	8003b48 <HAL_RCC_OscConfig+0x5e0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x5a6>
 8003af4:	4b77      	ldr	r3, [pc, #476]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	4a76      	ldr	r2, [pc, #472]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b00:	4b74      	ldr	r3, [pc, #464]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	4a73      	ldr	r2, [pc, #460]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b06:	f023 0304 	bic.w	r3, r3, #4
 8003b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0c:	e01c      	b.n	8003b48 <HAL_RCC_OscConfig+0x5e0>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c8>
 8003b16:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b22:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	4a6b      	ldr	r2, [pc, #428]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0x5e0>
 8003b30:	4b68      	ldr	r3, [pc, #416]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b34:	4a67      	ldr	r2, [pc, #412]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3c:	4b65      	ldr	r3, [pc, #404]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	4a64      	ldr	r2, [pc, #400]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7ff f942 	bl	8002dd8 <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7ff f93e 	bl	8002dd8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e14e      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b6e:	4b59      	ldr	r3, [pc, #356]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ee      	beq.n	8003b58 <HAL_RCC_OscConfig+0x5f0>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7ff f92c 	bl	8002dd8 <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b84:	f7ff f928 	bl	8002dd8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e138      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ee      	bne.n	8003b84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 812d 	beq.w	8003e0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003bb0:	4b48      	ldr	r3, [pc, #288]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bb8:	2b18      	cmp	r3, #24
 8003bba:	f000 80bd 	beq.w	8003d38 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	f040 809e 	bne.w	8003d04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b42      	ldr	r3, [pc, #264]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a41      	ldr	r2, [pc, #260]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7ff f900 	bl	8002dd8 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7ff f8fc 	bl	8002dd8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e10e      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bee:	4b39      	ldr	r3, [pc, #228]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bfa:	4b36      	ldr	r3, [pc, #216]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bfe:	4b37      	ldr	r3, [pc, #220]	@ (8003cdc <HAL_RCC_OscConfig+0x774>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c0a:	0112      	lsls	r2, r2, #4
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	4931      	ldr	r1, [pc, #196]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c22:	3b01      	subs	r3, #1
 8003c24:	025b      	lsls	r3, r3, #9
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c44:	4923      	ldr	r1, [pc, #140]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c4a:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c56:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c62:	00d2      	lsls	r2, r2, #3
 8003c64:	491b      	ldr	r1, [pc, #108]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	f023 020c 	bic.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	4917      	ldr	r1, [pc, #92]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c7c:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c80:	f023 0202 	bic.w	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c88:	4912      	ldr	r1, [pc, #72]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c8e:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	4a10      	ldr	r2, [pc, #64]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003cb2:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	4a07      	ldr	r2, [pc, #28]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbe:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a04      	ldr	r2, [pc, #16]	@ (8003cd4 <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7ff f885 	bl	8002dd8 <HAL_GetTick>
 8003cce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cd0:	e011      	b.n	8003cf6 <HAL_RCC_OscConfig+0x78e>
 8003cd2:	bf00      	nop
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	58024800 	.word	0x58024800
 8003cdc:	fffffc0c 	.word	0xfffffc0c
 8003ce0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7ff f878 	bl	8002dd8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e08a      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x77c>
 8003d02:	e082      	b.n	8003e0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b43      	ldr	r3, [pc, #268]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a42      	ldr	r2, [pc, #264]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7ff f862 	bl	8002dd8 <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d18:	f7ff f85e 	bl	8002dd8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e070      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x7b0>
 8003d36:	e068      	b.n	8003e0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d38:	4b36      	ldr	r3, [pc, #216]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d3e:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d031      	beq.n	8003db0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d12a      	bne.n	8003db0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d122      	bne.n	8003db0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d11a      	bne.n	8003db0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	0a5b      	lsrs	r3, r3, #9
 8003d7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d111      	bne.n	8003db0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d108      	bne.n	8003db0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	0e1b      	lsrs	r3, r3, #24
 8003da2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e02b      	b.n	8003e0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003db4:	4b17      	ldr	r3, [pc, #92]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d01f      	beq.n	8003e0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	4a11      	ldr	r2, [pc, #68]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dd6:	f7fe ffff 	bl	8002dd8 <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ddc:	bf00      	nop
 8003dde:	f7fe fffb 	bl	8002dd8 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d0f9      	beq.n	8003dde <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dea:	4b0a      	ldr	r3, [pc, #40]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dee:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <HAL_RCC_OscConfig+0x8b0>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003df6:	00d2      	lsls	r2, r2, #3
 8003df8:	4906      	ldr	r1, [pc, #24]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dfe:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	4a04      	ldr	r2, [pc, #16]	@ (8003e14 <HAL_RCC_OscConfig+0x8ac>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3730      	adds	r7, #48	@ 0x30
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	58024400 	.word	0x58024400
 8003e18:	ffff0007 	.word	0xffff0007

08003e1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e19c      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b8a      	ldr	r3, [pc, #552]	@ (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d910      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b87      	ldr	r3, [pc, #540]	@ (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 020f 	bic.w	r2, r3, #15
 8003e46:	4985      	ldr	r1, [pc, #532]	@ (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b83      	ldr	r3, [pc, #524]	@ (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e184      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	4b7b      	ldr	r3, [pc, #492]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d908      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e7c:	4b78      	ldr	r3, [pc, #480]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	4975      	ldr	r1, [pc, #468]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d010      	beq.n	8003ebc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	4b70      	ldr	r3, [pc, #448]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d908      	bls.n	8003ebc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eaa:	4b6d      	ldr	r3, [pc, #436]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	496a      	ldr	r1, [pc, #424]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d010      	beq.n	8003eea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699a      	ldr	r2, [r3, #24]
 8003ecc:	4b64      	ldr	r3, [pc, #400]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d908      	bls.n	8003eea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ed8:	4b61      	ldr	r3, [pc, #388]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	495e      	ldr	r1, [pc, #376]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	4b59      	ldr	r3, [pc, #356]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d908      	bls.n	8003f18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f06:	4b56      	ldr	r3, [pc, #344]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4953      	ldr	r1, [pc, #332]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	4b4d      	ldr	r3, [pc, #308]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d908      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b4a      	ldr	r3, [pc, #296]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f023 020f 	bic.w	r2, r3, #15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4947      	ldr	r1, [pc, #284]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d055      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f52:	4b43      	ldr	r3, [pc, #268]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4940      	ldr	r1, [pc, #256]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d121      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0f6      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f84:	4b36      	ldr	r3, [pc, #216]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d115      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0ea      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f9c:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0de      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fac:	4b2c      	ldr	r3, [pc, #176]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0d6      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fbc:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f023 0207 	bic.w	r2, r3, #7
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4925      	ldr	r1, [pc, #148]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fce:	f7fe ff03 	bl	8002dd8 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd6:	f7fe feff 	bl	8002dd8 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0be      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	4b1c      	ldr	r3, [pc, #112]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d1eb      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	429a      	cmp	r2, r3
 8004018:	d208      	bcs.n	800402c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401a:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f023 020f 	bic.w	r2, r3, #15
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	490e      	ldr	r1, [pc, #56]	@ (8004060 <HAL_RCC_ClockConfig+0x244>)
 8004028:	4313      	orrs	r3, r2
 800402a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <HAL_RCC_ClockConfig+0x240>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d214      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b08      	ldr	r3, [pc, #32]	@ (800405c <HAL_RCC_ClockConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 020f 	bic.w	r2, r3, #15
 8004042:	4906      	ldr	r1, [pc, #24]	@ (800405c <HAL_RCC_ClockConfig+0x240>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b04      	ldr	r3, [pc, #16]	@ (800405c <HAL_RCC_ClockConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e086      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
 800405c:	52002000 	.word	0x52002000
 8004060:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	4b3f      	ldr	r3, [pc, #252]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800407c:	429a      	cmp	r2, r3
 800407e:	d208      	bcs.n	8004092 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004080:	4b3c      	ldr	r3, [pc, #240]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	4939      	ldr	r1, [pc, #228]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 800408e:	4313      	orrs	r3, r2
 8004090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	4b34      	ldr	r3, [pc, #208]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d208      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ae:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	492e      	ldr	r1, [pc, #184]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	4b28      	ldr	r3, [pc, #160]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040d8:	429a      	cmp	r2, r3
 80040da:	d208      	bcs.n	80040ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040dc:	4b25      	ldr	r3, [pc, #148]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4922      	ldr	r1, [pc, #136]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004106:	429a      	cmp	r2, r3
 8004108:	d208      	bcs.n	800411c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800410a:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4917      	ldr	r1, [pc, #92]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004118:	4313      	orrs	r3, r2
 800411a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800411c:	f000 f834 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b14      	ldr	r3, [pc, #80]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	4912      	ldr	r1, [pc, #72]	@ (8004178 <HAL_RCC_ClockConfig+0x35c>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800413a:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <HAL_RCC_ClockConfig+0x358>)
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a0d      	ldr	r2, [pc, #52]	@ (8004178 <HAL_RCC_ClockConfig+0x35c>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
 8004150:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <HAL_RCC_ClockConfig+0x360>)
 8004152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004154:	4a0a      	ldr	r2, [pc, #40]	@ (8004180 <HAL_RCC_ClockConfig+0x364>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800415a:	4b0a      	ldr	r3, [pc, #40]	@ (8004184 <HAL_RCC_ClockConfig+0x368>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe fdf0 	bl	8002d44 <HAL_InitTick>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	58024400 	.word	0x58024400
 8004178:	0800e600 	.word	0x0800e600
 800417c:	24000008 	.word	0x24000008
 8004180:	24000004 	.word	0x24000004
 8004184:	2400000c 	.word	0x2400000c

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	@ 0x24
 800418c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418e:	4bb3      	ldr	r3, [pc, #716]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004196:	2b18      	cmp	r3, #24
 8004198:	f200 8155 	bhi.w	8004446 <HAL_RCC_GetSysClockFreq+0x2be>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	08004209 	.word	0x08004209
 80041a8:	08004447 	.word	0x08004447
 80041ac:	08004447 	.word	0x08004447
 80041b0:	08004447 	.word	0x08004447
 80041b4:	08004447 	.word	0x08004447
 80041b8:	08004447 	.word	0x08004447
 80041bc:	08004447 	.word	0x08004447
 80041c0:	08004447 	.word	0x08004447
 80041c4:	0800422f 	.word	0x0800422f
 80041c8:	08004447 	.word	0x08004447
 80041cc:	08004447 	.word	0x08004447
 80041d0:	08004447 	.word	0x08004447
 80041d4:	08004447 	.word	0x08004447
 80041d8:	08004447 	.word	0x08004447
 80041dc:	08004447 	.word	0x08004447
 80041e0:	08004447 	.word	0x08004447
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004447 	.word	0x08004447
 80041ec:	08004447 	.word	0x08004447
 80041f0:	08004447 	.word	0x08004447
 80041f4:	08004447 	.word	0x08004447
 80041f8:	08004447 	.word	0x08004447
 80041fc:	08004447 	.word	0x08004447
 8004200:	08004447 	.word	0x08004447
 8004204:	0800423b 	.word	0x0800423b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004208:	4b94      	ldr	r3, [pc, #592]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d009      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004214:	4b91      	ldr	r3, [pc, #580]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	08db      	lsrs	r3, r3, #3
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	4a90      	ldr	r2, [pc, #576]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
 8004224:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004226:	e111      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004228:	4b8d      	ldr	r3, [pc, #564]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800422a:	61bb      	str	r3, [r7, #24]
      break;
 800422c:	e10e      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800422e:	4b8d      	ldr	r3, [pc, #564]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004230:	61bb      	str	r3, [r7, #24]
      break;
 8004232:	e10b      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004234:	4b8c      	ldr	r3, [pc, #560]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004236:	61bb      	str	r3, [r7, #24]
      break;
 8004238:	e108      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800423a:	4b88      	ldr	r3, [pc, #544]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004244:	4b85      	ldr	r3, [pc, #532]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800424e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004250:	4b82      	ldr	r3, [pc, #520]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800425a:	4b80      	ldr	r3, [pc, #512]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425e:	08db      	lsrs	r3, r3, #3
 8004260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80e1 	beq.w	8004440 <HAL_RCC_GetSysClockFreq+0x2b8>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f000 8083 	beq.w	800438c <HAL_RCC_GetSysClockFreq+0x204>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b02      	cmp	r3, #2
 800428a:	f200 80a1 	bhi.w	80043d0 <HAL_RCC_GetSysClockFreq+0x248>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0x114>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d056      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x1c0>
 800429a:	e099      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800429c:	4b6f      	ldr	r3, [pc, #444]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02d      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042a8:	4b6c      	ldr	r3, [pc, #432]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	4a6b      	ldr	r2, [pc, #428]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d2:	4b62      	ldr	r3, [pc, #392]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004302:	e087      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004470 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b51      	ldr	r3, [pc, #324]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a02 	vldr	s12, [r7, #8]
 800432a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004346:	e065      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004474 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	4b40      	ldr	r3, [pc, #256]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	ed97 6a02 	vldr	s12, [r7, #8]
 800436e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800437e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800438a:	e043      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004478 <HAL_RCC_GetSysClockFreq+0x2f0>
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b2f      	ldr	r3, [pc, #188]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ce:	e021      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004474 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004412:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	0a5b      	lsrs	r3, r3, #9
 800441a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800441e:	3301      	adds	r3, #1
 8004420:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800442c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004438:	ee17 3a90 	vmov	r3, s15
 800443c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800443e:	e005      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
      break;
 8004444:	e002      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004446:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004448:	61bb      	str	r3, [r7, #24]
      break;
 800444a:	bf00      	nop
  }

  return sysclockfreq;
 800444c:	69bb      	ldr	r3, [r7, #24]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	@ 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	58024400 	.word	0x58024400
 8004460:	03d09000 	.word	0x03d09000
 8004464:	003d0900 	.word	0x003d0900
 8004468:	017d7840 	.word	0x017d7840
 800446c:	46000000 	.word	0x46000000
 8004470:	4c742400 	.word	0x4c742400
 8004474:	4a742400 	.word	0x4a742400
 8004478:	4bbebc20 	.word	0x4bbebc20

0800447c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004482:	f7ff fe81 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <HAL_RCC_GetHCLKFreq+0x50>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490f      	ldr	r1, [pc, #60]	@ (80044d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044a0:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <HAL_RCC_GetHCLKFreq+0x50>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80044b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044ba:	4a07      	ldr	r2, [pc, #28]	@ (80044d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044c0:	4b04      	ldr	r3, [pc, #16]	@ (80044d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	58024400 	.word	0x58024400
 80044d0:	0800e600 	.word	0x0800e600
 80044d4:	24000008 	.word	0x24000008
 80044d8:	24000004 	.word	0x24000004

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044e0:	f7ff ffcc 	bl	800447c <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4904      	ldr	r1, [pc, #16]	@ (8004504 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	58024400 	.word	0x58024400
 8004504:	0800e600 	.word	0x0800e600

08004508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800450c:	f7ff ffb6 	bl	800447c <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b06      	ldr	r3, [pc, #24]	@ (800452c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4904      	ldr	r1, [pc, #16]	@ (8004530 <HAL_RCC_GetPCLK2Freq+0x28>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	58024400 	.word	0x58024400
 8004530:	0800e600 	.word	0x0800e600

08004534 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004538:	b0ca      	sub	sp, #296	@ 0x128
 800453a:	af00      	add	r7, sp, #0
 800453c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004540:	2300      	movs	r3, #0
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004546:	2300      	movs	r3, #0
 8004548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004558:	2500      	movs	r5, #0
 800455a:	ea54 0305 	orrs.w	r3, r4, r5
 800455e:	d049      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004566:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800456a:	d02f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800456c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004570:	d828      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004572:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004576:	d01a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800457c:	d822      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004586:	d007      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004588:	e01c      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458a:	4bb8      	ldr	r3, [pc, #736]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	4ab7      	ldr	r2, [pc, #732]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004596:	e01a      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	3308      	adds	r3, #8
 800459e:	2102      	movs	r1, #2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 fc8f 	bl	8005ec4 <RCCEx_PLL2_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045ac:	e00f      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	3328      	adds	r3, #40	@ 0x28
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fd36 	bl	8006028 <RCCEx_PLL3_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045c2:	e004      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045d6:	4ba5      	ldr	r3, [pc, #660]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045e4:	4aa1      	ldr	r2, [pc, #644]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045e6:	430b      	orrs	r3, r1
 80045e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80045ea:	e003      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004600:	f04f 0900 	mov.w	r9, #0
 8004604:	ea58 0309 	orrs.w	r3, r8, r9
 8004608:	d047      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	2b04      	cmp	r3, #4
 8004612:	d82a      	bhi.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004614:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004631 	.word	0x08004631
 8004620:	0800463f 	.word	0x0800463f
 8004624:	08004655 	.word	0x08004655
 8004628:	08004673 	.word	0x08004673
 800462c:	08004673 	.word	0x08004673
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004630:	4b8e      	ldr	r3, [pc, #568]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	4a8d      	ldr	r2, [pc, #564]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800463c:	e01a      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	3308      	adds	r3, #8
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f001 fc3c 	bl	8005ec4 <RCCEx_PLL2_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004652:	e00f      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	3328      	adds	r3, #40	@ 0x28
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f001 fce3 	bl	8006028 <RCCEx_PLL3_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004668:	e004      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467c:	4b7b      	ldr	r3, [pc, #492]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004680:	f023 0107 	bic.w	r1, r3, #7
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468a:	4a78      	ldr	r2, [pc, #480]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004690:	e003      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80046a6:	f04f 0b00 	mov.w	fp, #0
 80046aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80046ae:	d04c      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ba:	d030      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80046bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c0:	d829      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80046c4:	d02d      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80046c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80046c8:	d825      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046ca:	2b80      	cmp	r3, #128	@ 0x80
 80046cc:	d018      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80046ce:	2b80      	cmp	r3, #128	@ 0x80
 80046d0:	d821      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80046d6:	2b40      	cmp	r3, #64	@ 0x40
 80046d8:	d007      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80046da:	e01c      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046dc:	4b63      	ldr	r3, [pc, #396]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	4a62      	ldr	r2, [pc, #392]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046e8:	e01c      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	3308      	adds	r3, #8
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 fbe6 	bl	8005ec4 <RCCEx_PLL2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046fe:	e011      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	3328      	adds	r3, #40	@ 0x28
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f001 fc8d 	bl	8006028 <RCCEx_PLL3_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004714:	e006      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800471c:	e002      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800472c:	4b4f      	ldr	r3, [pc, #316]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800472e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004730:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473a:	4a4c      	ldr	r2, [pc, #304]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800473c:	430b      	orrs	r3, r1
 800473e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004740:	e003      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004756:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800475a:	2300      	movs	r3, #0
 800475c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004760:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004764:	460b      	mov	r3, r1
 8004766:	4313      	orrs	r3, r2
 8004768:	d053      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004776:	d035      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004778:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800477c:	d82e      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800477e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004782:	d031      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004784:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004788:	d828      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800478e:	d01a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004790:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004794:	d822      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800479a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800479e:	d007      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80047a0:	e01c      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a2:	4b32      	ldr	r3, [pc, #200]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	4a31      	ldr	r2, [pc, #196]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047ae:	e01c      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	3308      	adds	r3, #8
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fb83 	bl	8005ec4 <RCCEx_PLL2_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047c4:	e011      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	3328      	adds	r3, #40	@ 0x28
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fc2a 	bl	8006028 <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047da:	e006      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047e2:	e002      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047f2:	4b1e      	ldr	r3, [pc, #120]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004802:	4a1a      	ldr	r2, [pc, #104]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004804:	430b      	orrs	r3, r1
 8004806:	6593      	str	r3, [r2, #88]	@ 0x58
 8004808:	e003      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800481e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004822:	2300      	movs	r3, #0
 8004824:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004828:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d056      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800483a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800483e:	d038      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004840:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004844:	d831      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004846:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800484a:	d034      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800484c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004850:	d82b      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004852:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004856:	d01d      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004858:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800485c:	d825      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004862:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004868:	e01f      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004870:	4ba2      	ldr	r3, [pc, #648]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	4aa1      	ldr	r2, [pc, #644]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800487c:	e01c      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004882:	3308      	adds	r3, #8
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fb1c 	bl	8005ec4 <RCCEx_PLL2_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004892:	e011      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004898:	3328      	adds	r3, #40	@ 0x28
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f001 fbc3 	bl	8006028 <RCCEx_PLL3_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048c0:	4b8e      	ldr	r3, [pc, #568]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048d0:	4a8a      	ldr	r2, [pc, #552]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80048ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d03a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	2b30      	cmp	r3, #48	@ 0x30
 8004908:	d01f      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800490a:	2b30      	cmp	r3, #48	@ 0x30
 800490c:	d819      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800490e:	2b20      	cmp	r3, #32
 8004910:	d00c      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004912:	2b20      	cmp	r3, #32
 8004914:	d815      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d019      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800491a:	2b10      	cmp	r3, #16
 800491c:	d111      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491e:	4b77      	ldr	r3, [pc, #476]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	4a76      	ldr	r2, [pc, #472]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800492a:	e011      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	3308      	adds	r3, #8
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f001 fac5 	bl	8005ec4 <RCCEx_PLL2_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004940:	e006      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004948:	e002      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800494e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004958:	4b68      	ldr	r3, [pc, #416]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800495a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004966:	4a65      	ldr	r2, [pc, #404]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004968:	430b      	orrs	r3, r1
 800496a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800496c:	e003      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004982:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800498c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d051      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049a0:	d035      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80049a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049a6:	d82e      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049ac:	d031      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80049ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049b2:	d828      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b8:	d01a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80049ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049be:	d822      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80049c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c8:	d007      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80049ca:	e01c      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049cc:	4b4b      	ldr	r3, [pc, #300]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	4a4a      	ldr	r2, [pc, #296]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049d8:	e01c      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	3308      	adds	r3, #8
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 fa6e 	bl	8005ec4 <RCCEx_PLL2_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049ee:	e011      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	3328      	adds	r3, #40	@ 0x28
 80049f6:	2100      	movs	r1, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 fb15 	bl	8006028 <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a04:	e006      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a0c:	e002      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a1c:	4b37      	ldr	r3, [pc, #220]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2a:	4a34      	ldr	r2, [pc, #208]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d056      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a64:	d033      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a6a:	d82c      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a70:	d02f      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a76:	d826      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a7c:	d02b      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a82:	d820      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a88:	d012      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a8e:	d81a      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d022      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a98:	d115      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 fa0e 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004aae:	e015      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab4:	3328      	adds	r3, #40	@ 0x28
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 fab5 	bl	8006028 <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ac4:	e00a      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004acc:	e006      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e004      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e002      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af2:	4a02      	ldr	r2, [pc, #8]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af4:	430b      	orrs	r3, r1
 8004af6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004af8:	e006      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004afa:	bf00      	nop
 8004afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	d055      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b34:	d033      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b3a:	d82c      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b40:	d02f      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b46:	d826      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b4c:	d02b      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b52:	d820      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b58:	d012      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b5e:	d81a      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d022      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b68:	d115      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 f9a6 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b7e:	e015      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	3328      	adds	r3, #40	@ 0x28
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 fa4d 	bl	8006028 <RCCEx_PLL3_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b94:	e00a      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004bb4:	4ba3      	ldr	r3, [pc, #652]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bc4:	4a9f      	ldr	r2, [pc, #636]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bca:	e003      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004be0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	d037      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bfe:	d00e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c04:	d816      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004c0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c0e:	d111      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c10:	4b8c      	ldr	r3, [pc, #560]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	4a8b      	ldr	r2, [pc, #556]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c1c:	e00f      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c22:	3308      	adds	r3, #8
 8004c24:	2101      	movs	r1, #1
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f94c 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c32:	e004      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c3a:	e000      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c46:	4b7f      	ldr	r3, [pc, #508]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	4a7b      	ldr	r2, [pc, #492]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c5a:	e003      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d039      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d81c      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c94 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004cd1 	.word	0x08004cd1
 8004c98:	08004ca5 	.word	0x08004ca5
 8004c9c:	08004cb3 	.word	0x08004cb3
 8004ca0:	08004cd1 	.word	0x08004cd1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca4:	4b67      	ldr	r3, [pc, #412]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	4a66      	ldr	r2, [pc, #408]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cb0:	e00f      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 f902 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cc6:	e004      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cce:	e000      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cda:	4b5a      	ldr	r3, [pc, #360]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	f023 0103 	bic.w	r1, r3, #3
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce8:	4a56      	ldr	r2, [pc, #344]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cea:	430b      	orrs	r3, r1
 8004cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cee:	e003      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004d12:	460b      	mov	r3, r1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f000 809f 	beq.w	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d26:	f7fe f857 	bl	8002dd8 <HAL_GetTick>
 8004d2a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d30:	f7fe f852 	bl	8002dd8 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b64      	cmp	r3, #100	@ 0x64
 8004d3e:	d903      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d46:	e005      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d48:	4b3f      	ldr	r3, [pc, #252]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ed      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d179      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d5c:	4b39      	ldr	r3, [pc, #228]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d68:	4053      	eors	r3, r2
 8004d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d72:	4b34      	ldr	r3, [pc, #208]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d7e:	4b31      	ldr	r3, [pc, #196]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d82:	4a30      	ldr	r2, [pc, #192]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d96:	4a2b      	ldr	r2, [pc, #172]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004daa:	d118      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fe f814 	bl	8002dd8 <HAL_GetTick>
 8004db0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004db4:	e00d      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fe f80f 	bl	8002dd8 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004dc0:	1ad2      	subs	r2, r2, r3
 8004dc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d903      	bls.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004dd0:	e005      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0eb      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d129      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004df6:	d10e      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004df8:	4b12      	ldr	r3, [pc, #72]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e08:	091a      	lsrs	r2, r3, #4
 8004e0a:	4b10      	ldr	r3, [pc, #64]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6113      	str	r3, [r2, #16]
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e20:	6113      	str	r3, [r2, #16]
 8004e22:	4b08      	ldr	r3, [pc, #32]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	4a04      	ldr	r2, [pc, #16]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e38:	e00e      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004e42:	e009      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004e44:	58024400 	.word	0x58024400
 8004e48:	58024800 	.word	0x58024800
 8004e4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f002 0301 	and.w	r3, r2, #1
 8004e64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f000 8089 	beq.w	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e80:	2b28      	cmp	r3, #40	@ 0x28
 8004e82:	d86b      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004e84:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004f65 	.word	0x08004f65
 8004e90:	08004f5d 	.word	0x08004f5d
 8004e94:	08004f5d 	.word	0x08004f5d
 8004e98:	08004f5d 	.word	0x08004f5d
 8004e9c:	08004f5d 	.word	0x08004f5d
 8004ea0:	08004f5d 	.word	0x08004f5d
 8004ea4:	08004f5d 	.word	0x08004f5d
 8004ea8:	08004f5d 	.word	0x08004f5d
 8004eac:	08004f31 	.word	0x08004f31
 8004eb0:	08004f5d 	.word	0x08004f5d
 8004eb4:	08004f5d 	.word	0x08004f5d
 8004eb8:	08004f5d 	.word	0x08004f5d
 8004ebc:	08004f5d 	.word	0x08004f5d
 8004ec0:	08004f5d 	.word	0x08004f5d
 8004ec4:	08004f5d 	.word	0x08004f5d
 8004ec8:	08004f5d 	.word	0x08004f5d
 8004ecc:	08004f47 	.word	0x08004f47
 8004ed0:	08004f5d 	.word	0x08004f5d
 8004ed4:	08004f5d 	.word	0x08004f5d
 8004ed8:	08004f5d 	.word	0x08004f5d
 8004edc:	08004f5d 	.word	0x08004f5d
 8004ee0:	08004f5d 	.word	0x08004f5d
 8004ee4:	08004f5d 	.word	0x08004f5d
 8004ee8:	08004f5d 	.word	0x08004f5d
 8004eec:	08004f65 	.word	0x08004f65
 8004ef0:	08004f5d 	.word	0x08004f5d
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	08004f5d 	.word	0x08004f5d
 8004f00:	08004f5d 	.word	0x08004f5d
 8004f04:	08004f5d 	.word	0x08004f5d
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f5d 	.word	0x08004f5d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08004f65 	.word	0x08004f65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f34:	3308      	adds	r3, #8
 8004f36:	2101      	movs	r1, #1
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 ffc3 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f44:	e00f      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4a:	3328      	adds	r3, #40	@ 0x28
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 f86a 	bl	8006028 <RCCEx_PLL3_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f5a:	e004      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f6e:	4bbf      	ldr	r3, [pc, #764]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f7c:	4abb      	ldr	r2, [pc, #748]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f82:	e003      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f002 0302 	and.w	r3, r2, #2
 8004f98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004fa2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d041      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d824      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08005009 	.word	0x08005009
 8004fc0:	08004fd5 	.word	0x08004fd5
 8004fc4:	08004feb 	.word	0x08004feb
 8004fc8:	08005009 	.word	0x08005009
 8004fcc:	08005009 	.word	0x08005009
 8004fd0:	08005009 	.word	0x08005009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd8:	3308      	adds	r3, #8
 8004fda:	2101      	movs	r1, #1
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 ff71 	bl	8005ec4 <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fe8:	e00f      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fee:	3328      	adds	r3, #40	@ 0x28
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 f818 	bl	8006028 <RCCEx_PLL3_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ffe:	e004      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005006:	e000      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005012:	4b96      	ldr	r3, [pc, #600]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005016:	f023 0107 	bic.w	r1, r3, #7
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005020:	4a92      	ldr	r2, [pc, #584]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005022:	430b      	orrs	r3, r1
 8005024:	6553      	str	r3, [r2, #84]	@ 0x54
 8005026:	e003      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800502c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f002 0304 	and.w	r3, r2, #4
 800503c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005046:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d044      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005058:	2b05      	cmp	r3, #5
 800505a:	d825      	bhi.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800505c:	a201      	add	r2, pc, #4	@ (adr r2, 8005064 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	080050b1 	.word	0x080050b1
 8005068:	0800507d 	.word	0x0800507d
 800506c:	08005093 	.word	0x08005093
 8005070:	080050b1 	.word	0x080050b1
 8005074:	080050b1 	.word	0x080050b1
 8005078:	080050b1 	.word	0x080050b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800507c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005080:	3308      	adds	r3, #8
 8005082:	2101      	movs	r1, #1
 8005084:	4618      	mov	r0, r3
 8005086:	f000 ff1d 	bl	8005ec4 <RCCEx_PLL2_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005090:	e00f      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005096:	3328      	adds	r3, #40	@ 0x28
 8005098:	2101      	movs	r1, #1
 800509a:	4618      	mov	r0, r3
 800509c:	f000 ffc4 	bl	8006028 <RCCEx_PLL3_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80050a6:	e004      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050ae:	e000      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80050b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ba:	4b6c      	ldr	r3, [pc, #432]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050be:	f023 0107 	bic.w	r1, r3, #7
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ca:	4a68      	ldr	r2, [pc, #416]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80050d0:	e003      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f002 0320 	and.w	r3, r2, #32
 80050e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050ea:	2300      	movs	r3, #0
 80050ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050f4:	460b      	mov	r3, r1
 80050f6:	4313      	orrs	r3, r2
 80050f8:	d055      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005106:	d033      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800510c:	d82c      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005112:	d02f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005118:	d826      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800511a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800511e:	d02b      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005120:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005124:	d820      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800512a:	d012      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800512c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005130:	d81a      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d022      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800513a:	d115      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005140:	3308      	adds	r3, #8
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 febd 	bl	8005ec4 <RCCEx_PLL2_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005150:	e015      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005156:	3328      	adds	r3, #40	@ 0x28
 8005158:	2102      	movs	r1, #2
 800515a:	4618      	mov	r0, r3
 800515c:	f000 ff64 	bl	8006028 <RCCEx_PLL3_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005166:	e00a      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800516e:	e006      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005170:	bf00      	nop
 8005172:	e004      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005174:	bf00      	nop
 8005176:	e002      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005178:	bf00      	nop
 800517a:	e000      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800517c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005186:	4b39      	ldr	r3, [pc, #228]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005196:	4a35      	ldr	r2, [pc, #212]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005198:	430b      	orrs	r3, r1
 800519a:	6553      	str	r3, [r2, #84]	@ 0x54
 800519c:	e003      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80051a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80051b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051b6:	2300      	movs	r3, #0
 80051b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80051bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4313      	orrs	r3, r2
 80051c4:	d058      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80051d2:	d033      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80051d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80051d8:	d82c      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051de:	d02f      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e4:	d826      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051ea:	d02b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80051ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051f0:	d820      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f6:	d012      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051fc:	d81a      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d022      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005206:	d115      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520c:	3308      	adds	r3, #8
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fe57 	bl	8005ec4 <RCCEx_PLL2_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800521c:	e015      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005222:	3328      	adds	r3, #40	@ 0x28
 8005224:	2102      	movs	r1, #2
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fefe 	bl	8006028 <RCCEx_PLL3_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005232:	e00a      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800523a:	e006      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800523c:	bf00      	nop
 800523e:	e004      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005240:	bf00      	nop
 8005242:	e002      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10e      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005252:	4b06      	ldr	r3, [pc, #24]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005256:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005262:	4a02      	ldr	r2, [pc, #8]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005264:	430b      	orrs	r3, r1
 8005266:	6593      	str	r3, [r2, #88]	@ 0x58
 8005268:	e006      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800526a:	bf00      	nop
 800526c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800528e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d055      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80052a4:	d033      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80052a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80052aa:	d82c      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b0:	d02f      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80052b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b6:	d826      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80052bc:	d02b      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80052be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80052c2:	d820      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c8:	d012      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80052ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052ce:	d81a      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d022      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80052d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052d8:	d115      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052de:	3308      	adds	r3, #8
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fdee 	bl	8005ec4 <RCCEx_PLL2_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052ee:	e015      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f4:	3328      	adds	r3, #40	@ 0x28
 80052f6:	2102      	movs	r1, #2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fe95 	bl	8006028 <RCCEx_PLL3_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005304:	e00a      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800530c:	e006      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800530e:	bf00      	nop
 8005310:	e004      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800531a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005324:	4ba1      	ldr	r3, [pc, #644]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005328:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005334:	4a9d      	ldr	r2, [pc, #628]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005336:	430b      	orrs	r3, r1
 8005338:	6593      	str	r3, [r2, #88]	@ 0x58
 800533a:	e003      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f002 0308 	and.w	r3, r2, #8
 8005350:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800535a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d01e      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005370:	d10c      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	3328      	adds	r3, #40	@ 0x28
 8005378:	2102      	movs	r1, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fe54 	bl	8006028 <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800538c:	4b87      	ldr	r3, [pc, #540]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800538e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005390:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800539c:	4a83      	ldr	r2, [pc, #524]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800539e:	430b      	orrs	r3, r1
 80053a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f002 0310 	and.w	r3, r2, #16
 80053ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053b2:	2300      	movs	r3, #0
 80053b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80053bc:	460b      	mov	r3, r1
 80053be:	4313      	orrs	r3, r2
 80053c0:	d01e      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ce:	d10c      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d4:	3328      	adds	r3, #40	@ 0x28
 80053d6:	2102      	movs	r1, #2
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fe25 	bl	8006028 <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ea:	4b70      	ldr	r3, [pc, #448]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053fa:	4a6c      	ldr	r2, [pc, #432]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800540c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005410:	2300      	movs	r3, #0
 8005412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005416:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d03e      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005428:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800542c:	d022      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800542e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005432:	d81b      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543c:	d00b      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800543e:	e015      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005444:	3308      	adds	r3, #8
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fd3b 	bl	8005ec4 <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005454:	e00f      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545a:	3328      	adds	r3, #40	@ 0x28
 800545c:	2102      	movs	r1, #2
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fde2 	bl	8006028 <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800546a:	e004      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800547e:	4b4b      	ldr	r3, [pc, #300]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800548e:	4a47      	ldr	r2, [pc, #284]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005490:	430b      	orrs	r3, r1
 8005492:	6593      	str	r3, [r2, #88]	@ 0x58
 8005494:	e003      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80054aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054ac:	2300      	movs	r3, #0
 80054ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80054b4:	460b      	mov	r3, r1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	d03b      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054c6:	d01f      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80054c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054cc:	d818      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054d2:	d003      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80054d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054d8:	d007      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80054da:	e011      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054dc:	4b33      	ldr	r3, [pc, #204]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	4a32      	ldr	r2, [pc, #200]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054e8:	e00f      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ee:	3328      	adds	r3, #40	@ 0x28
 80054f0:	2101      	movs	r1, #1
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fd98 	bl	8006028 <RCCEx_PLL3_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80054fe:	e004      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005506:	e000      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005512:	4b26      	ldr	r3, [pc, #152]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005516:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005522:	4a22      	ldr	r2, [pc, #136]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005524:	430b      	orrs	r3, r1
 8005526:	6553      	str	r3, [r2, #84]	@ 0x54
 8005528:	e003      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800553e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005540:	2300      	movs	r3, #0
 8005542:	677b      	str	r3, [r7, #116]	@ 0x74
 8005544:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d034      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555c:	d007      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800555e:	e011      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b12      	ldr	r3, [pc, #72]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	4a11      	ldr	r2, [pc, #68]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800556c:	e00e      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005572:	3308      	adds	r3, #8
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fca4 	bl	8005ec4 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005582:	e003      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800558a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10d      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005594:	4b05      	ldr	r3, [pc, #20]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005598:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a2:	4a02      	ldr	r2, [pc, #8]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80055aa:	bf00      	nop
 80055ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80055c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055c6:	2300      	movs	r3, #0
 80055c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d00c      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d8:	3328      	adds	r3, #40	@ 0x28
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fd23 	bl	8006028 <RCCEx_PLL3_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80055fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80055fc:	2300      	movs	r3, #0
 80055fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005600:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d038      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005616:	d018      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800561c:	d811      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800561e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005622:	d014      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005628:	d80b      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d011      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800562e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005632:	d106      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005634:	4bc3      	ldr	r3, [pc, #780]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	4ac2      	ldr	r2, [pc, #776]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800563e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005640:	e008      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800565c:	4bb9      	ldr	r3, [pc, #740]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005660:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800566c:	4ab5      	ldr	r2, [pc, #724]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800566e:	430b      	orrs	r3, r1
 8005670:	6553      	str	r3, [r2, #84]	@ 0x54
 8005672:	e003      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005678:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005688:	65bb      	str	r3, [r7, #88]	@ 0x58
 800568a:	2300      	movs	r3, #0
 800568c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800568e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005698:	4baa      	ldr	r3, [pc, #680]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800569a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a6:	4aa7      	ldr	r2, [pc, #668]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80056b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80056ba:	2300      	movs	r3, #0
 80056bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80056be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80056c2:	460b      	mov	r3, r1
 80056c4:	4313      	orrs	r3, r2
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056c8:	4b9e      	ldr	r3, [pc, #632]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80056d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80056d8:	4a9a      	ldr	r2, [pc, #616]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056da:	430b      	orrs	r3, r1
 80056dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ec:	2300      	movs	r3, #0
 80056ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056fa:	4b92      	ldr	r3, [pc, #584]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005708:	4a8e      	ldr	r2, [pc, #568]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800570a:	430b      	orrs	r3, r1
 800570c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800571a:	643b      	str	r3, [r7, #64]	@ 0x40
 800571c:	2300      	movs	r3, #0
 800571e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005720:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005724:	460b      	mov	r3, r1
 8005726:	4313      	orrs	r3, r2
 8005728:	d00e      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800572a:	4b86      	ldr	r3, [pc, #536]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	4a85      	ldr	r2, [pc, #532]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005730:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005734:	6113      	str	r3, [r2, #16]
 8005736:	4b83      	ldr	r3, [pc, #524]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005738:	6919      	ldr	r1, [r3, #16]
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005742:	4a80      	ldr	r2, [pc, #512]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005744:	430b      	orrs	r3, r1
 8005746:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005754:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005756:	2300      	movs	r3, #0
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800575a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005764:	4b77      	ldr	r3, [pc, #476]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005768:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005772:	4a74      	ldr	r2, [pc, #464]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005774:	430b      	orrs	r3, r1
 8005776:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005784:	633b      	str	r3, [r7, #48]	@ 0x30
 8005786:	2300      	movs	r3, #0
 8005788:	637b      	str	r3, [r7, #52]	@ 0x34
 800578a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800578e:	460b      	mov	r3, r1
 8005790:	4313      	orrs	r3, r2
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005794:	4b6b      	ldr	r3, [pc, #428]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005798:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057a4:	4a67      	ldr	r2, [pc, #412]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057a6:	430b      	orrs	r3, r1
 80057a8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	2100      	movs	r1, #0
 80057b4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d011      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	3308      	adds	r3, #8
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fb78 	bl	8005ec4 <RCCEx_PLL2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80057da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	2100      	movs	r1, #0
 80057f4:	6239      	str	r1, [r7, #32]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005800:	460b      	mov	r3, r1
 8005802:	4313      	orrs	r3, r2
 8005804:	d011      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	3308      	adds	r3, #8
 800580c:	2101      	movs	r1, #1
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fb58 	bl	8005ec4 <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800581a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	2100      	movs	r1, #0
 8005834:	61b9      	str	r1, [r7, #24]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005840:	460b      	mov	r3, r1
 8005842:	4313      	orrs	r3, r2
 8005844:	d011      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584a:	3308      	adds	r3, #8
 800584c:	2102      	movs	r1, #2
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fb38 	bl	8005ec4 <RCCEx_PLL2_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	2100      	movs	r1, #0
 8005874:	6139      	str	r1, [r7, #16]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d011      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3328      	adds	r3, #40	@ 0x28
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fbca 	bl	8006028 <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800589a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	2100      	movs	r1, #0
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d011      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	3328      	adds	r3, #40	@ 0x28
 80058cc:	2101      	movs	r1, #1
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fbaa 	bl	8006028 <RCCEx_PLL3_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	2100      	movs	r1, #0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	d011      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	3328      	adds	r3, #40	@ 0x28
 800590c:	2102      	movs	r1, #2
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fb8a 	bl	8006028 <RCCEx_PLL3_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800591a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800592a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
}
 8005938:	4618      	mov	r0, r3
 800593a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005944:	58024400 	.word	0x58024400

08005948 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800594c:	f7fe fd96 	bl	800447c <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b06      	ldr	r3, [pc, #24]	@ (800596c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4904      	ldr	r1, [pc, #16]	@ (8005970 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	58024400 	.word	0x58024400
 8005970:	0800e600 	.word	0x0800e600

08005974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	@ 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800597c:	4ba1      	ldr	r3, [pc, #644]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005986:	4b9f      	ldr	r3, [pc, #636]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	0b1b      	lsrs	r3, r3, #12
 800598c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005990:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005992:	4b9c      	ldr	r3, [pc, #624]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800599e:	4b99      	ldr	r3, [pc, #612]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8111 	beq.w	8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f000 8083 	beq.w	8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	f200 80a1 	bhi.w	8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d056      	beq.n	8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059de:	e099      	b.n	8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e0:	4b88      	ldr	r3, [pc, #544]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02d      	beq.n	8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059ec:	4b85      	ldr	r3, [pc, #532]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	08db      	lsrs	r3, r3, #3
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	4a84      	ldr	r2, [pc, #528]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a16:	4b7b      	ldr	r3, [pc, #492]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a46:	e087      	b.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a8a:	e065      	b.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a9e:	4b59      	ldr	r3, [pc, #356]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ab2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ace:	e043      	b.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae2:	4b48      	ldr	r3, [pc, #288]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005af6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b12:	e021      	b.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b26:	4b37      	ldr	r3, [pc, #220]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b58:	4b2a      	ldr	r3, [pc, #168]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	0a5b      	lsrs	r3, r3, #9
 8005b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b7e:	ee17 2a90 	vmov	r2, s15
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b86:	4b1f      	ldr	r3, [pc, #124]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	0c1b      	lsrs	r3, r3, #16
 8005b8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bac:	ee17 2a90 	vmov	r2, s15
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005bb4:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb8:	0e1b      	lsrs	r3, r3, #24
 8005bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bda:	ee17 2a90 	vmov	r2, s15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005be2:	e008      	b.n	8005bf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	609a      	str	r2, [r3, #8]
}
 8005bf6:	bf00      	nop
 8005bf8:	3724      	adds	r7, #36	@ 0x24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	58024400 	.word	0x58024400
 8005c08:	03d09000 	.word	0x03d09000
 8005c0c:	46000000 	.word	0x46000000
 8005c10:	4c742400 	.word	0x4c742400
 8005c14:	4a742400 	.word	0x4a742400
 8005c18:	4bbebc20 	.word	0x4bbebc20

08005c1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b089      	sub	sp, #36	@ 0x24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c24:	4ba1      	ldr	r3, [pc, #644]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c2e:	4b9f      	ldr	r3, [pc, #636]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	0d1b      	lsrs	r3, r3, #20
 8005c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c3a:	4b9c      	ldr	r3, [pc, #624]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c46:	4b99      	ldr	r3, [pc, #612]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4a:	08db      	lsrs	r3, r3, #3
 8005c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8111 	beq.w	8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	f000 8083 	beq.w	8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f200 80a1 	bhi.w	8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d056      	beq.n	8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c86:	e099      	b.n	8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c88:	4b88      	ldr	r3, [pc, #544]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02d      	beq.n	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c94:	4b85      	ldr	r3, [pc, #532]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	08db      	lsrs	r3, r3, #3
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	4a84      	ldr	r2, [pc, #528]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b7b      	ldr	r3, [pc, #492]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cee:	e087      	b.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d02:	4b6a      	ldr	r3, [pc, #424]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d32:	e065      	b.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b59      	ldr	r3, [pc, #356]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d76:	e043      	b.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8a:	4b48      	ldr	r3, [pc, #288]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dba:	e021      	b.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dce:	4b37      	ldr	r3, [pc, #220]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e00:	4b2a      	ldr	r3, [pc, #168]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e04:	0a5b      	lsrs	r3, r3, #9
 8005e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e26:	ee17 2a90 	vmov	r2, s15
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e54:	ee17 2a90 	vmov	r2, s15
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e5c:	4b13      	ldr	r3, [pc, #76]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e60:	0e1b      	lsrs	r3, r3, #24
 8005e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e82:	ee17 2a90 	vmov	r2, s15
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e8a:	e008      	b.n	8005e9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	3724      	adds	r7, #36	@ 0x24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	03d09000 	.word	0x03d09000
 8005eb4:	46000000 	.word	0x46000000
 8005eb8:	4c742400 	.word	0x4c742400
 8005ebc:	4a742400 	.word	0x4a742400
 8005ec0:	4bbebc20 	.word	0x4bbebc20

08005ec4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ed2:	4b53      	ldr	r3, [pc, #332]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d101      	bne.n	8005ee2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e099      	b.n	8006016 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005ee8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eee:	f7fc ff73 	bl	8002dd8 <HAL_GetTick>
 8005ef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ef4:	e008      	b.n	8005f08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ef6:	f7fc ff6f 	bl	8002dd8 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e086      	b.n	8006016 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f08:	4b45      	ldr	r3, [pc, #276]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f14:	4b42      	ldr	r3, [pc, #264]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	031b      	lsls	r3, r3, #12
 8005f22:	493f      	ldr	r1, [pc, #252]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	025b      	lsls	r3, r3, #9
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	041b      	lsls	r3, r3, #16
 8005f46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f58:	4931      	ldr	r1, [pc, #196]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f5e:	4b30      	ldr	r3, [pc, #192]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	492d      	ldr	r1, [pc, #180]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f70:	4b2b      	ldr	r3, [pc, #172]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	f023 0220 	bic.w	r2, r3, #32
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	4928      	ldr	r1, [pc, #160]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f82:	4b27      	ldr	r3, [pc, #156]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	4a26      	ldr	r2, [pc, #152]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f88:	f023 0310 	bic.w	r3, r3, #16
 8005f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f8e:	4b24      	ldr	r3, [pc, #144]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f92:	4b24      	ldr	r3, [pc, #144]	@ (8006024 <RCCEx_PLL2_Config+0x160>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	69d2      	ldr	r2, [r2, #28]
 8005f9a:	00d2      	lsls	r2, r2, #3
 8005f9c:	4920      	ldr	r1, [pc, #128]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fa8:	f043 0310 	orr.w	r3, r3, #16
 8005fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb8:	4a19      	ldr	r2, [pc, #100]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005fc0:	e00f      	b.n	8005fe2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d106      	bne.n	8005fd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fc8:	4b15      	ldr	r3, [pc, #84]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fcc:	4a14      	ldr	r2, [pc, #80]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005fd4:	e005      	b.n	8005fe2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fd6:	4b12      	ldr	r3, [pc, #72]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	4a11      	ldr	r2, [pc, #68]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 8005fe8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fee:	f7fc fef3 	bl	8002dd8 <HAL_GetTick>
 8005ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ff4:	e008      	b.n	8006008 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ff6:	f7fc feef 	bl	8002dd8 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e006      	b.n	8006016 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <RCCEx_PLL2_Config+0x15c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	58024400 	.word	0x58024400
 8006024:	ffff0007 	.word	0xffff0007

08006028 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006036:	4b53      	ldr	r3, [pc, #332]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b03      	cmp	r3, #3
 8006040:	d101      	bne.n	8006046 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e099      	b.n	800617a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006046:	4b4f      	ldr	r3, [pc, #316]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a4e      	ldr	r2, [pc, #312]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006052:	f7fc fec1 	bl	8002dd8 <HAL_GetTick>
 8006056:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006058:	e008      	b.n	800606c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800605a:	f7fc febd 	bl	8002dd8 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e086      	b.n	800617a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800606c:	4b45      	ldr	r3, [pc, #276]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f0      	bne.n	800605a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006078:	4b42      	ldr	r3, [pc, #264]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	051b      	lsls	r3, r3, #20
 8006086:	493f      	ldr	r1, [pc, #252]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006088:	4313      	orrs	r3, r2
 800608a:	628b      	str	r3, [r1, #40]	@ 0x28
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	3b01      	subs	r3, #1
 8006092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	3b01      	subs	r3, #1
 800609c:	025b      	lsls	r3, r3, #9
 800609e:	b29b      	uxth	r3, r3
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	061b      	lsls	r3, r3, #24
 80060b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060bc:	4931      	ldr	r1, [pc, #196]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060c2:	4b30      	ldr	r3, [pc, #192]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	492d      	ldr	r1, [pc, #180]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	4928      	ldr	r1, [pc, #160]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060e6:	4b27      	ldr	r3, [pc, #156]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	4a26      	ldr	r2, [pc, #152]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060f2:	4b24      	ldr	r3, [pc, #144]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 80060f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060f6:	4b24      	ldr	r3, [pc, #144]	@ (8006188 <RCCEx_PLL3_Config+0x160>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	69d2      	ldr	r2, [r2, #28]
 80060fe:	00d2      	lsls	r2, r2, #3
 8006100:	4920      	ldr	r1, [pc, #128]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006106:	4b1f      	ldr	r3, [pc, #124]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610a:	4a1e      	ldr	r2, [pc, #120]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006110:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006118:	4b1a      	ldr	r3, [pc, #104]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	4a19      	ldr	r2, [pc, #100]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800611e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006122:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006124:	e00f      	b.n	8006146 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d106      	bne.n	800613a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800612c:	4b15      	ldr	r3, [pc, #84]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	4a14      	ldr	r2, [pc, #80]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006132:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006138:	e005      	b.n	8006146 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800613a:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	4a11      	ldr	r2, [pc, #68]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006140:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006144:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006146:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a0e      	ldr	r2, [pc, #56]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006152:	f7fc fe41 	bl	8002dd8 <HAL_GetTick>
 8006156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006158:	e008      	b.n	800616c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800615a:	f7fc fe3d 	bl	8002dd8 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e006      	b.n	800617a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <RCCEx_PLL3_Config+0x15c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
 8006188:	ffff0007 	.word	0xffff0007

0800618c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e10f      	b.n	80063be <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a87      	ldr	r2, [pc, #540]	@ (80063c8 <HAL_SPI_Init+0x23c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00f      	beq.n	80061ce <HAL_SPI_Init+0x42>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a86      	ldr	r2, [pc, #536]	@ (80063cc <HAL_SPI_Init+0x240>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00a      	beq.n	80061ce <HAL_SPI_Init+0x42>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a84      	ldr	r2, [pc, #528]	@ (80063d0 <HAL_SPI_Init+0x244>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d005      	beq.n	80061ce <HAL_SPI_Init+0x42>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	2b0f      	cmp	r3, #15
 80061c8:	d901      	bls.n	80061ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e0f7      	b.n	80063be <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fe2e 	bl	8006e30 <SPI_GetPacketSize>
 80061d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a7b      	ldr	r2, [pc, #492]	@ (80063c8 <HAL_SPI_Init+0x23c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00c      	beq.n	80061fa <HAL_SPI_Init+0x6e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a79      	ldr	r2, [pc, #484]	@ (80063cc <HAL_SPI_Init+0x240>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <HAL_SPI_Init+0x6e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a78      	ldr	r2, [pc, #480]	@ (80063d0 <HAL_SPI_Init+0x244>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d002      	beq.n	80061fa <HAL_SPI_Init+0x6e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d811      	bhi.n	800621e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061fe:	4a72      	ldr	r2, [pc, #456]	@ (80063c8 <HAL_SPI_Init+0x23c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a70      	ldr	r2, [pc, #448]	@ (80063cc <HAL_SPI_Init+0x240>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_SPI_Init+0x8c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a6f      	ldr	r2, [pc, #444]	@ (80063d0 <HAL_SPI_Init+0x244>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d104      	bne.n	8006222 <HAL_SPI_Init+0x96>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b10      	cmp	r3, #16
 800621c:	d901      	bls.n	8006222 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e0cd      	b.n	80063be <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fc f9bc 	bl	80025b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800625e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006268:	d119      	bne.n	800629e <HAL_SPI_Init+0x112>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006272:	d103      	bne.n	800627c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10c      	bne.n	800629e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800628c:	d107      	bne.n	800629e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800629c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00f      	beq.n	80062ca <HAL_SPI_Init+0x13e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b06      	cmp	r3, #6
 80062b0:	d90b      	bls.n	80062ca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e007      	b.n	80062da <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ec:	ea42 0103 	orr.w	r1, r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633a:	ea42 0103 	orr.w	r1, r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d113      	bne.n	800637a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006364:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006378:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0201 	bic.w	r2, r2, #1
 8006388:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40013000 	.word	0x40013000
 80063cc:	40003800 	.word	0x40003800
 80063d0:	40003c00 	.word	0x40003c00

080063d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	4613      	mov	r3, r2
 80063e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3320      	adds	r3, #32
 80063ea:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ec:	f7fc fcf4 	bl	8002dd8 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d001      	beq.n	8006402 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
 8006400:	e1d1      	b.n	80067a6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_SPI_Transmit+0x3a>
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e1c9      	b.n	80067a6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_SPI_Transmit+0x4c>
 800641c:	2302      	movs	r3, #2
 800641e:	e1c2      	b.n	80067a6 <HAL_SPI_Transmit+0x3d2>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2203      	movs	r2, #3
 800642c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	88fa      	ldrh	r2, [r7, #6]
 8006442:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	88fa      	ldrh	r2, [r7, #6]
 800644a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006478:	d108      	bne.n	800648c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e009      	b.n	80064a0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800649e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4b96      	ldr	r3, [pc, #600]	@ (8006700 <HAL_SPI_Transmit+0x32c>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	88f9      	ldrh	r1, [r7, #6]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	6812      	ldr	r2, [r2, #0]
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064cc:	d107      	bne.n	80064de <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	2b0f      	cmp	r3, #15
 80064e4:	d947      	bls.n	8006576 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80064e6:	e03f      	b.n	8006568 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d114      	bne.n	8006520 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800651e:	e023      	b.n	8006568 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006520:	f7fc fc5a 	bl	8002dd8 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d803      	bhi.n	8006538 <HAL_SPI_Transmit+0x164>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d102      	bne.n	800653e <HAL_SPI_Transmit+0x16a>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d114      	bne.n	8006568 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fba8 	bl	8006c94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e11e      	b.n	80067a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1b9      	bne.n	80064e8 <HAL_SPI_Transmit+0x114>
 8006574:	e0f1      	b.n	800675a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b07      	cmp	r3, #7
 800657c:	f240 80e6 	bls.w	800674c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006580:	e05d      	b.n	800663e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b02      	cmp	r3, #2
 800658e:	d132      	bne.n	80065f6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d918      	bls.n	80065ce <HAL_SPI_Transmit+0x1fa>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d014      	beq.n	80065ce <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b4:	1d1a      	adds	r2, r3, #4
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b02      	subs	r3, #2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80065cc:	e037      	b.n	800663e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065d2:	881a      	ldrh	r2, [r3, #0]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065dc:	1c9a      	adds	r2, r3, #2
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80065f4:	e023      	b.n	800663e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065f6:	f7fc fbef 	bl	8002dd8 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d803      	bhi.n	800660e <HAL_SPI_Transmit+0x23a>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660c:	d102      	bne.n	8006614 <HAL_SPI_Transmit+0x240>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d114      	bne.n	800663e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fb3d 	bl	8006c94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006620:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e0b3      	b.n	80067a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d19b      	bne.n	8006582 <HAL_SPI_Transmit+0x1ae>
 800664a:	e086      	b.n	800675a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b02      	cmp	r3, #2
 8006658:	d154      	bne.n	8006704 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b03      	cmp	r3, #3
 8006664:	d918      	bls.n	8006698 <HAL_SPI_Transmit+0x2c4>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666a:	2b40      	cmp	r3, #64	@ 0x40
 800666c:	d914      	bls.n	8006698 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800667e:	1d1a      	adds	r2, r3, #4
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b04      	subs	r3, #4
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006696:	e059      	b.n	800674c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d917      	bls.n	80066d4 <HAL_SPI_Transmit+0x300>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d013      	beq.n	80066d4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b0:	881a      	ldrh	r2, [r3, #0]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ba:	1c9a      	adds	r2, r3, #2
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b02      	subs	r3, #2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066d2:	e03b      	b.n	800674c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3320      	adds	r3, #32
 80066de:	7812      	ldrb	r2, [r2, #0]
 80066e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066fe:	e025      	b.n	800674c <HAL_SPI_Transmit+0x378>
 8006700:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006704:	f7fc fb68 	bl	8002dd8 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d803      	bhi.n	800671c <HAL_SPI_Transmit+0x348>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671a:	d102      	bne.n	8006722 <HAL_SPI_Transmit+0x34e>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d114      	bne.n	800674c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 fab6 	bl	8006c94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800672e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e02c      	b.n	80067a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	f47f af79 	bne.w	800664c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2200      	movs	r2, #0
 8006762:	2108      	movs	r1, #8
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fb35 	bl	8006dd4 <SPI_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006776:	f043 0220 	orr.w	r2, r3, #32
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fa87 	bl	8006c94 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80067a4:	2300      	movs	r3, #0
  }
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3301      	adds	r3, #1
 80067ca:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3330      	adds	r3, #48	@ 0x30
 80067d2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d4:	f7fc fb00 	bl	8002dd8 <HAL_GetTick>
 80067d8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d001      	beq.n	80067ea <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80067e6:	2302      	movs	r3, #2
 80067e8:	e250      	b.n	8006c8c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_Receive+0x46>
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e248      	b.n	8006c8c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_SPI_Receive+0x58>
 8006804:	2302      	movs	r3, #2
 8006806:	e241      	b.n	8006c8c <HAL_SPI_Receive+0x4dc>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2204      	movs	r2, #4
 8006814:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	88fa      	ldrh	r2, [r7, #6]
 800682a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	88fa      	ldrh	r2, [r7, #6]
 8006832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006860:	d108      	bne.n	8006874 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e009      	b.n	8006888 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006886:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	4b95      	ldr	r3, [pc, #596]	@ (8006ae4 <HAL_SPI_Receive+0x334>)
 8006890:	4013      	ands	r3, r2
 8006892:	88f9      	ldrh	r1, [r7, #6]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	430b      	orrs	r3, r1
 800689a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068b4:	d107      	bne.n	80068c6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b0f      	cmp	r3, #15
 80068cc:	d96c      	bls.n	80069a8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80068ce:	e064      	b.n	800699a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d114      	bne.n	8006910 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80068f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800690e:	e044      	b.n	800699a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006916:	b29b      	uxth	r3, r3
 8006918:	8bfa      	ldrh	r2, [r7, #30]
 800691a:	429a      	cmp	r2, r3
 800691c:	d919      	bls.n	8006952 <HAL_SPI_Receive+0x1a2>
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d014      	beq.n	8006952 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006930:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006932:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006950:	e023      	b.n	800699a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006952:	f7fc fa41 	bl	8002dd8 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d803      	bhi.n	800696a <HAL_SPI_Receive+0x1ba>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d102      	bne.n	8006970 <HAL_SPI_Receive+0x1c0>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d114      	bne.n	800699a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f98f 	bl	8006c94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800697c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e178      	b.n	8006c8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d194      	bne.n	80068d0 <HAL_SPI_Receive+0x120>
 80069a6:	e15e      	b.n	8006c66 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b07      	cmp	r3, #7
 80069ae:	f240 8153 	bls.w	8006c58 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80069b2:	e08f      	b.n	8006ad4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d114      	bne.n	80069f4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	8812      	ldrh	r2, [r2, #0]
 80069d2:	b292      	uxth	r2, r2
 80069d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069f2:	e06f      	b.n	8006ad4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8bfa      	ldrh	r2, [r7, #30]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d924      	bls.n	8006a4c <HAL_SPI_Receive+0x29c>
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01f      	beq.n	8006a4c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	8812      	ldrh	r2, [r2, #0]
 8006a14:	b292      	uxth	r2, r2
 8006a16:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	8812      	ldrh	r2, [r2, #0]
 8006a2a:	b292      	uxth	r2, r2
 8006a2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a32:	1c9a      	adds	r2, r3, #2
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b02      	subs	r3, #2
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a4a:	e043      	b.n	8006ad4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d119      	bne.n	8006a8c <HAL_SPI_Receive+0x2dc>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d014      	beq.n	8006a8c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	8812      	ldrh	r2, [r2, #0]
 8006a6a:	b292      	uxth	r2, r2
 8006a6c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a72:	1c9a      	adds	r2, r3, #2
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a8a:	e023      	b.n	8006ad4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a8c:	f7fc f9a4 	bl	8002dd8 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d803      	bhi.n	8006aa4 <HAL_SPI_Receive+0x2f4>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d102      	bne.n	8006aaa <HAL_SPI_Receive+0x2fa>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d114      	bne.n	8006ad4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f8f2 	bl	8006c94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e0db      	b.n	8006c8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f47f af69 	bne.w	80069b4 <HAL_SPI_Receive+0x204>
 8006ae2:	e0c0      	b.n	8006c66 <HAL_SPI_Receive+0x4b6>
 8006ae4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d117      	bne.n	8006b2e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b0a:	7812      	ldrb	r2, [r2, #0]
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b2c:	e094      	b.n	8006c58 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	8bfa      	ldrh	r2, [r7, #30]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d946      	bls.n	8006bca <HAL_SPI_Receive+0x41a>
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d041      	beq.n	8006bca <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b8a:	7812      	ldrb	r2, [r2, #0]
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ba6:	7812      	ldrb	r2, [r2, #0]
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b04      	subs	r3, #4
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006bc8:	e046      	b.n	8006c58 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d81c      	bhi.n	8006c10 <HAL_SPI_Receive+0x460>
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d017      	beq.n	8006c10 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bec:	7812      	ldrb	r2, [r2, #0]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c0e:	e023      	b.n	8006c58 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c10:	f7fc f8e2 	bl	8002dd8 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d803      	bhi.n	8006c28 <HAL_SPI_Receive+0x478>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c26:	d102      	bne.n	8006c2e <HAL_SPI_Receive+0x47e>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d114      	bne.n	8006c58 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f830 	bl	8006c94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e019      	b.n	8006c8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f47f af41 	bne.w	8006ae8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f814 	bl	8006c94 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
  }
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3720      	adds	r7, #32
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0208 	orr.w	r2, r2, #8
 8006cb2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0210 	orr.w	r2, r2, #16
 8006cc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6919      	ldr	r1, [r3, #16]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b3c      	ldr	r3, [pc, #240]	@ (8006dd0 <SPI_CloseTransfer+0x13c>)
 8006ce0:	400b      	ands	r3, r1
 8006ce2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006cf2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d014      	beq.n	8006d2a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00f      	beq.n	8006d2a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0220 	orr.w	r2, r2, #32
 8006d28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d014      	beq.n	8006d60 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d46:	f043 0204 	orr.w	r2, r3, #4
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00f      	beq.n	8006d8a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d70:	f043 0201 	orr.w	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00f      	beq.n	8006db4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d9a:	f043 0208 	orr.w	r2, r3, #8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006db2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	fffffc90 	.word	0xfffffc90

08006dd4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006de4:	e010      	b.n	8006e08 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006de6:	f7fb fff7 	bl	8002dd8 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d803      	bhi.n	8006dfe <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d102      	bne.n	8006e04 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e00f      	b.n	8006e28 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4013      	ands	r3, r2
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	bf0c      	ite	eq
 8006e18:	2301      	moveq	r3, #1
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d0df      	beq.n	8006de6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	3307      	adds	r3, #7
 8006e4e:	08db      	lsrs	r3, r3, #3
 8006e50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e049      	b.n	8006f0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d106      	bne.n	8006e92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fb fc93 	bl	80027b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f000 fd59 	bl	800795c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d001      	beq.n	8006f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e054      	b.n	8006fd6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a26      	ldr	r2, [pc, #152]	@ (8006fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d022      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f56:	d01d      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a22      	ldr	r2, [pc, #136]	@ (8006fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d018      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a21      	ldr	r2, [pc, #132]	@ (8006fec <HAL_TIM_Base_Start_IT+0xd8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00e      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006ffc <HAL_TIM_Base_Start_IT+0xe8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d115      	bne.n	8006fc0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	4b19      	ldr	r3, [pc, #100]	@ (8007000 <HAL_TIM_Base_Start_IT+0xec>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b06      	cmp	r3, #6
 8006fa4:	d015      	beq.n	8006fd2 <HAL_TIM_Base_Start_IT+0xbe>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fac:	d011      	beq.n	8006fd2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0201 	orr.w	r2, r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fbe:	e008      	b.n	8006fd2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e000      	b.n	8006fd4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	40000800 	.word	0x40000800
 8006ff0:	40000c00 	.word	0x40000c00
 8006ff4:	40010400 	.word	0x40010400
 8006ff8:	40001800 	.word	0x40001800
 8006ffc:	40014000 	.word	0x40014000
 8007000:	00010007 	.word	0x00010007

08007004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e049      	b.n	80070aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f841 	bl	80070b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f000 fc8a 	bl	800795c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <HAL_TIM_PWM_Start+0x24>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	bf14      	ite	ne
 80070e4:	2301      	movne	r3, #1
 80070e6:	2300      	moveq	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	e03c      	b.n	8007166 <HAL_TIM_PWM_Start+0x9e>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d109      	bne.n	8007106 <HAL_TIM_PWM_Start+0x3e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	e02f      	b.n	8007166 <HAL_TIM_PWM_Start+0x9e>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d109      	bne.n	8007120 <HAL_TIM_PWM_Start+0x58>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	bf14      	ite	ne
 8007118:	2301      	movne	r3, #1
 800711a:	2300      	moveq	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	e022      	b.n	8007166 <HAL_TIM_PWM_Start+0x9e>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b0c      	cmp	r3, #12
 8007124:	d109      	bne.n	800713a <HAL_TIM_PWM_Start+0x72>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b01      	cmp	r3, #1
 8007130:	bf14      	ite	ne
 8007132:	2301      	movne	r3, #1
 8007134:	2300      	moveq	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	e015      	b.n	8007166 <HAL_TIM_PWM_Start+0x9e>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b10      	cmp	r3, #16
 800713e:	d109      	bne.n	8007154 <HAL_TIM_PWM_Start+0x8c>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	e008      	b.n	8007166 <HAL_TIM_PWM_Start+0x9e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e0a1      	b.n	80072b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d104      	bne.n	800717e <HAL_TIM_PWM_Start+0xb6>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800717c:	e023      	b.n	80071c6 <HAL_TIM_PWM_Start+0xfe>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b04      	cmp	r3, #4
 8007182:	d104      	bne.n	800718e <HAL_TIM_PWM_Start+0xc6>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800718c:	e01b      	b.n	80071c6 <HAL_TIM_PWM_Start+0xfe>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d104      	bne.n	800719e <HAL_TIM_PWM_Start+0xd6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800719c:	e013      	b.n	80071c6 <HAL_TIM_PWM_Start+0xfe>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	d104      	bne.n	80071ae <HAL_TIM_PWM_Start+0xe6>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071ac:	e00b      	b.n	80071c6 <HAL_TIM_PWM_Start+0xfe>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	d104      	bne.n	80071be <HAL_TIM_PWM_Start+0xf6>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071bc:	e003      	b.n	80071c6 <HAL_TIM_PWM_Start+0xfe>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2202      	movs	r2, #2
 80071c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2201      	movs	r2, #1
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 ffd8 	bl	8008184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a38      	ldr	r2, [pc, #224]	@ (80072bc <HAL_TIM_PWM_Start+0x1f4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <HAL_TIM_PWM_Start+0x13e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a37      	ldr	r2, [pc, #220]	@ (80072c0 <HAL_TIM_PWM_Start+0x1f8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <HAL_TIM_PWM_Start+0x13e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a35      	ldr	r2, [pc, #212]	@ (80072c4 <HAL_TIM_PWM_Start+0x1fc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d009      	beq.n	8007206 <HAL_TIM_PWM_Start+0x13e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a34      	ldr	r2, [pc, #208]	@ (80072c8 <HAL_TIM_PWM_Start+0x200>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_TIM_PWM_Start+0x13e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a32      	ldr	r2, [pc, #200]	@ (80072cc <HAL_TIM_PWM_Start+0x204>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d101      	bne.n	800720a <HAL_TIM_PWM_Start+0x142>
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <HAL_TIM_PWM_Start+0x144>
 800720a:	2300      	movs	r3, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800721e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a25      	ldr	r2, [pc, #148]	@ (80072bc <HAL_TIM_PWM_Start+0x1f4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d022      	beq.n	8007270 <HAL_TIM_PWM_Start+0x1a8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007232:	d01d      	beq.n	8007270 <HAL_TIM_PWM_Start+0x1a8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a25      	ldr	r2, [pc, #148]	@ (80072d0 <HAL_TIM_PWM_Start+0x208>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d018      	beq.n	8007270 <HAL_TIM_PWM_Start+0x1a8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a24      	ldr	r2, [pc, #144]	@ (80072d4 <HAL_TIM_PWM_Start+0x20c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d013      	beq.n	8007270 <HAL_TIM_PWM_Start+0x1a8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a22      	ldr	r2, [pc, #136]	@ (80072d8 <HAL_TIM_PWM_Start+0x210>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00e      	beq.n	8007270 <HAL_TIM_PWM_Start+0x1a8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1a      	ldr	r2, [pc, #104]	@ (80072c0 <HAL_TIM_PWM_Start+0x1f8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d009      	beq.n	8007270 <HAL_TIM_PWM_Start+0x1a8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1e      	ldr	r2, [pc, #120]	@ (80072dc <HAL_TIM_PWM_Start+0x214>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <HAL_TIM_PWM_Start+0x1a8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a16      	ldr	r2, [pc, #88]	@ (80072c4 <HAL_TIM_PWM_Start+0x1fc>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d115      	bne.n	800729c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	4b1a      	ldr	r3, [pc, #104]	@ (80072e0 <HAL_TIM_PWM_Start+0x218>)
 8007278:	4013      	ands	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b06      	cmp	r3, #6
 8007280:	d015      	beq.n	80072ae <HAL_TIM_PWM_Start+0x1e6>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007288:	d011      	beq.n	80072ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0201 	orr.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729a:	e008      	b.n	80072ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	e000      	b.n	80072b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40010400 	.word	0x40010400
 80072c4:	40014000 	.word	0x40014000
 80072c8:	40014400 	.word	0x40014400
 80072cc:	40014800 	.word	0x40014800
 80072d0:	40000400 	.word	0x40000400
 80072d4:	40000800 	.word	0x40000800
 80072d8:	40000c00 	.word	0x40000c00
 80072dc:	40001800 	.word	0x40001800
 80072e0:	00010007 	.word	0x00010007

080072e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d020      	beq.n	8007348 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01b      	beq.n	8007348 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0202 	mvn.w	r2, #2
 8007318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 faf6 	bl	8007920 <HAL_TIM_IC_CaptureCallback>
 8007334:	e005      	b.n	8007342 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fae8 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 faf9 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	d020      	beq.n	8007394 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01b      	beq.n	8007394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0204 	mvn.w	r2, #4
 8007364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fad0 	bl	8007920 <HAL_TIM_IC_CaptureCallback>
 8007380:	e005      	b.n	800738e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fac2 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fad3 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	d020      	beq.n	80073e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01b      	beq.n	80073e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0208 	mvn.w	r2, #8
 80073b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2204      	movs	r2, #4
 80073b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 faaa 	bl	8007920 <HAL_TIM_IC_CaptureCallback>
 80073cc:	e005      	b.n	80073da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa9c 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 faad 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d020      	beq.n	800742c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f06f 0210 	mvn.w	r2, #16
 80073fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2208      	movs	r2, #8
 8007402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa84 	bl	8007920 <HAL_TIM_IC_CaptureCallback>
 8007418:	e005      	b.n	8007426 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa76 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fa87 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00c      	beq.n	8007450 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0201 	mvn.w	r2, #1
 8007448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fa fd58 	bl	8001f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 ffbf 	bl	80083fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00c      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 ffb7 	bl	8008410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00c      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fa41 	bl	8007948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00c      	beq.n	80074ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f06f 0220 	mvn.w	r2, #32
 80074e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 ff7f 	bl	80083e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800750e:	2302      	movs	r3, #2
 8007510:	e0ff      	b.n	8007712 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b14      	cmp	r3, #20
 800751e:	f200 80f0 	bhi.w	8007702 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007522:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	0800757d 	.word	0x0800757d
 800752c:	08007703 	.word	0x08007703
 8007530:	08007703 	.word	0x08007703
 8007534:	08007703 	.word	0x08007703
 8007538:	080075bd 	.word	0x080075bd
 800753c:	08007703 	.word	0x08007703
 8007540:	08007703 	.word	0x08007703
 8007544:	08007703 	.word	0x08007703
 8007548:	080075ff 	.word	0x080075ff
 800754c:	08007703 	.word	0x08007703
 8007550:	08007703 	.word	0x08007703
 8007554:	08007703 	.word	0x08007703
 8007558:	0800763f 	.word	0x0800763f
 800755c:	08007703 	.word	0x08007703
 8007560:	08007703 	.word	0x08007703
 8007564:	08007703 	.word	0x08007703
 8007568:	08007681 	.word	0x08007681
 800756c:	08007703 	.word	0x08007703
 8007570:	08007703 	.word	0x08007703
 8007574:	08007703 	.word	0x08007703
 8007578:	080076c1 	.word	0x080076c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fa8a 	bl	8007a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0208 	orr.w	r2, r2, #8
 8007596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0204 	bic.w	r2, r2, #4
 80075a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6999      	ldr	r1, [r3, #24]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	619a      	str	r2, [r3, #24]
      break;
 80075ba:	e0a5      	b.n	8007708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fafa 	bl	8007bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6999      	ldr	r1, [r3, #24]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	021a      	lsls	r2, r3, #8
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	619a      	str	r2, [r3, #24]
      break;
 80075fc:	e084      	b.n	8007708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fb63 	bl	8007cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69da      	ldr	r2, [r3, #28]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f042 0208 	orr.w	r2, r2, #8
 8007618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0204 	bic.w	r2, r2, #4
 8007628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69d9      	ldr	r1, [r3, #28]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	61da      	str	r2, [r3, #28]
      break;
 800763c:	e064      	b.n	8007708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68b9      	ldr	r1, [r7, #8]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fbcb 	bl	8007de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69d9      	ldr	r1, [r3, #28]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	021a      	lsls	r2, r3, #8
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	61da      	str	r2, [r3, #28]
      break;
 800767e:	e043      	b.n	8007708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fc14 	bl	8007eb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0208 	orr.w	r2, r2, #8
 800769a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0204 	bic.w	r2, r2, #4
 80076aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80076be:	e023      	b.n	8007708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fc58 	bl	8007f7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	021a      	lsls	r2, r3, #8
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007700:	e002      	b.n	8007708 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	75fb      	strb	r3, [r7, #23]
      break;
 8007706:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop

0800771c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_TIM_ConfigClockSource+0x1c>
 8007734:	2302      	movs	r3, #2
 8007736:	e0dc      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	4b6a      	ldr	r3, [pc, #424]	@ (80078fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007754:	4013      	ands	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800775e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a64      	ldr	r2, [pc, #400]	@ (8007900 <HAL_TIM_ConfigClockSource+0x1e4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	f000 80a9 	beq.w	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007774:	4a62      	ldr	r2, [pc, #392]	@ (8007900 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	f200 80ae 	bhi.w	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800777c:	4a61      	ldr	r2, [pc, #388]	@ (8007904 <HAL_TIM_ConfigClockSource+0x1e8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	f000 80a1 	beq.w	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007784:	4a5f      	ldr	r2, [pc, #380]	@ (8007904 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	f200 80a6 	bhi.w	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800778c:	4a5e      	ldr	r2, [pc, #376]	@ (8007908 <HAL_TIM_ConfigClockSource+0x1ec>)
 800778e:	4293      	cmp	r3, r2
 8007790:	f000 8099 	beq.w	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007794:	4a5c      	ldr	r2, [pc, #368]	@ (8007908 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007796:	4293      	cmp	r3, r2
 8007798:	f200 809e 	bhi.w	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800779c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80077a0:	f000 8091 	beq.w	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80077a8:	f200 8096 	bhi.w	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077b0:	f000 8089 	beq.w	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077b8:	f200 808e 	bhi.w	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c0:	d03e      	beq.n	8007840 <HAL_TIM_ConfigClockSource+0x124>
 80077c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c6:	f200 8087 	bhi.w	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ce:	f000 8086 	beq.w	80078de <HAL_TIM_ConfigClockSource+0x1c2>
 80077d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d6:	d87f      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077d8:	2b70      	cmp	r3, #112	@ 0x70
 80077da:	d01a      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0xf6>
 80077dc:	2b70      	cmp	r3, #112	@ 0x70
 80077de:	d87b      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077e0:	2b60      	cmp	r3, #96	@ 0x60
 80077e2:	d050      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0x16a>
 80077e4:	2b60      	cmp	r3, #96	@ 0x60
 80077e6:	d877      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077e8:	2b50      	cmp	r3, #80	@ 0x50
 80077ea:	d03c      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0x14a>
 80077ec:	2b50      	cmp	r3, #80	@ 0x50
 80077ee:	d873      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077f0:	2b40      	cmp	r3, #64	@ 0x40
 80077f2:	d058      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x18a>
 80077f4:	2b40      	cmp	r3, #64	@ 0x40
 80077f6:	d86f      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077f8:	2b30      	cmp	r3, #48	@ 0x30
 80077fa:	d064      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077fc:	2b30      	cmp	r3, #48	@ 0x30
 80077fe:	d86b      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007800:	2b20      	cmp	r3, #32
 8007802:	d060      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007804:	2b20      	cmp	r3, #32
 8007806:	d867      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007808:	2b00      	cmp	r3, #0
 800780a:	d05c      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800780c:	2b10      	cmp	r3, #16
 800780e:	d05a      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007810:	e062      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007822:	f000 fc8f 	bl	8008144 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	609a      	str	r2, [r3, #8]
      break;
 800783e:	e04f      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007850:	f000 fc78 	bl	8008144 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007862:	609a      	str	r2, [r3, #8]
      break;
 8007864:	e03c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007872:	461a      	mov	r2, r3
 8007874:	f000 fbe8 	bl	8008048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2150      	movs	r1, #80	@ 0x50
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fc42 	bl	8008108 <TIM_ITRx_SetConfig>
      break;
 8007884:	e02c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007892:	461a      	mov	r2, r3
 8007894:	f000 fc07 	bl	80080a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2160      	movs	r1, #96	@ 0x60
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fc32 	bl	8008108 <TIM_ITRx_SetConfig>
      break;
 80078a4:	e01c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b2:	461a      	mov	r2, r3
 80078b4:	f000 fbc8 	bl	8008048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2140      	movs	r1, #64	@ 0x40
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fc22 	bl	8008108 <TIM_ITRx_SetConfig>
      break;
 80078c4:	e00c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f000 fc19 	bl	8008108 <TIM_ITRx_SetConfig>
      break;
 80078d6:	e003      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e000      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80078de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	ffceff88 	.word	0xffceff88
 8007900:	00100040 	.word	0x00100040
 8007904:	00100030 	.word	0x00100030
 8007908:	00100020 	.word	0x00100020

0800790c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a43      	ldr	r2, [pc, #268]	@ (8007a7c <TIM_Base_SetConfig+0x120>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d013      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800797a:	d00f      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a40      	ldr	r2, [pc, #256]	@ (8007a80 <TIM_Base_SetConfig+0x124>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00b      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a3f      	ldr	r2, [pc, #252]	@ (8007a84 <TIM_Base_SetConfig+0x128>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d007      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a3e      	ldr	r2, [pc, #248]	@ (8007a88 <TIM_Base_SetConfig+0x12c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a3d      	ldr	r2, [pc, #244]	@ (8007a8c <TIM_Base_SetConfig+0x130>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d108      	bne.n	80079ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a32      	ldr	r2, [pc, #200]	@ (8007a7c <TIM_Base_SetConfig+0x120>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d01f      	beq.n	80079f6 <TIM_Base_SetConfig+0x9a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079bc:	d01b      	beq.n	80079f6 <TIM_Base_SetConfig+0x9a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a2f      	ldr	r2, [pc, #188]	@ (8007a80 <TIM_Base_SetConfig+0x124>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d017      	beq.n	80079f6 <TIM_Base_SetConfig+0x9a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007a84 <TIM_Base_SetConfig+0x128>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d013      	beq.n	80079f6 <TIM_Base_SetConfig+0x9a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a88 <TIM_Base_SetConfig+0x12c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00f      	beq.n	80079f6 <TIM_Base_SetConfig+0x9a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a2c      	ldr	r2, [pc, #176]	@ (8007a8c <TIM_Base_SetConfig+0x130>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00b      	beq.n	80079f6 <TIM_Base_SetConfig+0x9a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007a90 <TIM_Base_SetConfig+0x134>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d007      	beq.n	80079f6 <TIM_Base_SetConfig+0x9a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007a94 <TIM_Base_SetConfig+0x138>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d003      	beq.n	80079f6 <TIM_Base_SetConfig+0x9a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a29      	ldr	r2, [pc, #164]	@ (8007a98 <TIM_Base_SetConfig+0x13c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d108      	bne.n	8007a08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a14      	ldr	r2, [pc, #80]	@ (8007a7c <TIM_Base_SetConfig+0x120>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00f      	beq.n	8007a4e <TIM_Base_SetConfig+0xf2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a16      	ldr	r2, [pc, #88]	@ (8007a8c <TIM_Base_SetConfig+0x130>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00b      	beq.n	8007a4e <TIM_Base_SetConfig+0xf2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a15      	ldr	r2, [pc, #84]	@ (8007a90 <TIM_Base_SetConfig+0x134>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d007      	beq.n	8007a4e <TIM_Base_SetConfig+0xf2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a14      	ldr	r2, [pc, #80]	@ (8007a94 <TIM_Base_SetConfig+0x138>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d003      	beq.n	8007a4e <TIM_Base_SetConfig+0xf2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a13      	ldr	r2, [pc, #76]	@ (8007a98 <TIM_Base_SetConfig+0x13c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d103      	bne.n	8007a56 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f043 0204 	orr.w	r2, r3, #4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	601a      	str	r2, [r3, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40010000 	.word	0x40010000
 8007a80:	40000400 	.word	0x40000400
 8007a84:	40000800 	.word	0x40000800
 8007a88:	40000c00 	.word	0x40000c00
 8007a8c:	40010400 	.word	0x40010400
 8007a90:	40014000 	.word	0x40014000
 8007a94:	40014400 	.word	0x40014400
 8007a98:	40014800 	.word	0x40014800

08007a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	f023 0201 	bic.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4b37      	ldr	r3, [pc, #220]	@ (8007ba4 <TIM_OC1_SetConfig+0x108>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0303 	bic.w	r3, r3, #3
 8007ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f023 0302 	bic.w	r3, r3, #2
 8007ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a2d      	ldr	r2, [pc, #180]	@ (8007ba8 <TIM_OC1_SetConfig+0x10c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00f      	beq.n	8007b18 <TIM_OC1_SetConfig+0x7c>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a2c      	ldr	r2, [pc, #176]	@ (8007bac <TIM_OC1_SetConfig+0x110>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00b      	beq.n	8007b18 <TIM_OC1_SetConfig+0x7c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a2b      	ldr	r2, [pc, #172]	@ (8007bb0 <TIM_OC1_SetConfig+0x114>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d007      	beq.n	8007b18 <TIM_OC1_SetConfig+0x7c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb4 <TIM_OC1_SetConfig+0x118>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_OC1_SetConfig+0x7c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a29      	ldr	r2, [pc, #164]	@ (8007bb8 <TIM_OC1_SetConfig+0x11c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d10c      	bne.n	8007b32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0308 	bic.w	r3, r3, #8
 8007b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f023 0304 	bic.w	r3, r3, #4
 8007b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba8 <TIM_OC1_SetConfig+0x10c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00f      	beq.n	8007b5a <TIM_OC1_SetConfig+0xbe>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bac <TIM_OC1_SetConfig+0x110>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00b      	beq.n	8007b5a <TIM_OC1_SetConfig+0xbe>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a1a      	ldr	r2, [pc, #104]	@ (8007bb0 <TIM_OC1_SetConfig+0x114>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d007      	beq.n	8007b5a <TIM_OC1_SetConfig+0xbe>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a19      	ldr	r2, [pc, #100]	@ (8007bb4 <TIM_OC1_SetConfig+0x118>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d003      	beq.n	8007b5a <TIM_OC1_SetConfig+0xbe>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a18      	ldr	r2, [pc, #96]	@ (8007bb8 <TIM_OC1_SetConfig+0x11c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d111      	bne.n	8007b7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	621a      	str	r2, [r3, #32]
}
 8007b98:	bf00      	nop
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	fffeff8f 	.word	0xfffeff8f
 8007ba8:	40010000 	.word	0x40010000
 8007bac:	40010400 	.word	0x40010400
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800

08007bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	f023 0210 	bic.w	r2, r3, #16
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	4b34      	ldr	r3, [pc, #208]	@ (8007cb8 <TIM_OC2_SetConfig+0xfc>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f023 0320 	bic.w	r3, r3, #32
 8007c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a29      	ldr	r2, [pc, #164]	@ (8007cbc <TIM_OC2_SetConfig+0x100>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d003      	beq.n	8007c24 <TIM_OC2_SetConfig+0x68>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a28      	ldr	r2, [pc, #160]	@ (8007cc0 <TIM_OC2_SetConfig+0x104>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d10d      	bne.n	8007c40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a1e      	ldr	r2, [pc, #120]	@ (8007cbc <TIM_OC2_SetConfig+0x100>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00f      	beq.n	8007c68 <TIM_OC2_SetConfig+0xac>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc0 <TIM_OC2_SetConfig+0x104>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00b      	beq.n	8007c68 <TIM_OC2_SetConfig+0xac>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a1c      	ldr	r2, [pc, #112]	@ (8007cc4 <TIM_OC2_SetConfig+0x108>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d007      	beq.n	8007c68 <TIM_OC2_SetConfig+0xac>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cc8 <TIM_OC2_SetConfig+0x10c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_OC2_SetConfig+0xac>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a1a      	ldr	r2, [pc, #104]	@ (8007ccc <TIM_OC2_SetConfig+0x110>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d113      	bne.n	8007c90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	621a      	str	r2, [r3, #32]
}
 8007caa:	bf00      	nop
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	feff8fff 	.word	0xfeff8fff
 8007cbc:	40010000 	.word	0x40010000
 8007cc0:	40010400 	.word	0x40010400
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	40014400 	.word	0x40014400
 8007ccc:	40014800 	.word	0x40014800

08007cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4b33      	ldr	r3, [pc, #204]	@ (8007dc8 <TIM_OC3_SetConfig+0xf8>)
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0303 	bic.w	r3, r3, #3
 8007d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a28      	ldr	r2, [pc, #160]	@ (8007dcc <TIM_OC3_SetConfig+0xfc>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d003      	beq.n	8007d36 <TIM_OC3_SetConfig+0x66>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a27      	ldr	r2, [pc, #156]	@ (8007dd0 <TIM_OC3_SetConfig+0x100>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10d      	bne.n	8007d52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a1d      	ldr	r2, [pc, #116]	@ (8007dcc <TIM_OC3_SetConfig+0xfc>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00f      	beq.n	8007d7a <TIM_OC3_SetConfig+0xaa>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd0 <TIM_OC3_SetConfig+0x100>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00b      	beq.n	8007d7a <TIM_OC3_SetConfig+0xaa>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a1b      	ldr	r2, [pc, #108]	@ (8007dd4 <TIM_OC3_SetConfig+0x104>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d007      	beq.n	8007d7a <TIM_OC3_SetConfig+0xaa>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8007dd8 <TIM_OC3_SetConfig+0x108>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_OC3_SetConfig+0xaa>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a19      	ldr	r2, [pc, #100]	@ (8007ddc <TIM_OC3_SetConfig+0x10c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d113      	bne.n	8007da2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	fffeff8f 	.word	0xfffeff8f
 8007dcc:	40010000 	.word	0x40010000
 8007dd0:	40010400 	.word	0x40010400
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40014400 	.word	0x40014400
 8007ddc:	40014800 	.word	0x40014800

08007de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4b24      	ldr	r3, [pc, #144]	@ (8007e9c <TIM_OC4_SetConfig+0xbc>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	031b      	lsls	r3, r3, #12
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a19      	ldr	r2, [pc, #100]	@ (8007ea0 <TIM_OC4_SetConfig+0xc0>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00f      	beq.n	8007e60 <TIM_OC4_SetConfig+0x80>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a18      	ldr	r2, [pc, #96]	@ (8007ea4 <TIM_OC4_SetConfig+0xc4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00b      	beq.n	8007e60 <TIM_OC4_SetConfig+0x80>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a17      	ldr	r2, [pc, #92]	@ (8007ea8 <TIM_OC4_SetConfig+0xc8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d007      	beq.n	8007e60 <TIM_OC4_SetConfig+0x80>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a16      	ldr	r2, [pc, #88]	@ (8007eac <TIM_OC4_SetConfig+0xcc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d003      	beq.n	8007e60 <TIM_OC4_SetConfig+0x80>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a15      	ldr	r2, [pc, #84]	@ (8007eb0 <TIM_OC4_SetConfig+0xd0>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d109      	bne.n	8007e74 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	019b      	lsls	r3, r3, #6
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	621a      	str	r2, [r3, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	feff8fff 	.word	0xfeff8fff
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40014400 	.word	0x40014400
 8007eb0:	40014800 	.word	0x40014800

08007eb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b21      	ldr	r3, [pc, #132]	@ (8007f64 <TIM_OC5_SetConfig+0xb0>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ef4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	041b      	lsls	r3, r3, #16
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a18      	ldr	r2, [pc, #96]	@ (8007f68 <TIM_OC5_SetConfig+0xb4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00f      	beq.n	8007f2a <TIM_OC5_SetConfig+0x76>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a17      	ldr	r2, [pc, #92]	@ (8007f6c <TIM_OC5_SetConfig+0xb8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00b      	beq.n	8007f2a <TIM_OC5_SetConfig+0x76>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a16      	ldr	r2, [pc, #88]	@ (8007f70 <TIM_OC5_SetConfig+0xbc>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d007      	beq.n	8007f2a <TIM_OC5_SetConfig+0x76>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a15      	ldr	r2, [pc, #84]	@ (8007f74 <TIM_OC5_SetConfig+0xc0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d003      	beq.n	8007f2a <TIM_OC5_SetConfig+0x76>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a14      	ldr	r2, [pc, #80]	@ (8007f78 <TIM_OC5_SetConfig+0xc4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d109      	bne.n	8007f3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	021b      	lsls	r3, r3, #8
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	621a      	str	r2, [r3, #32]
}
 8007f58:	bf00      	nop
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	fffeff8f 	.word	0xfffeff8f
 8007f68:	40010000 	.word	0x40010000
 8007f6c:	40010400 	.word	0x40010400
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4b22      	ldr	r3, [pc, #136]	@ (8008030 <TIM_OC6_SetConfig+0xb4>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	051b      	lsls	r3, r3, #20
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a19      	ldr	r2, [pc, #100]	@ (8008034 <TIM_OC6_SetConfig+0xb8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00f      	beq.n	8007ff4 <TIM_OC6_SetConfig+0x78>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a18      	ldr	r2, [pc, #96]	@ (8008038 <TIM_OC6_SetConfig+0xbc>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00b      	beq.n	8007ff4 <TIM_OC6_SetConfig+0x78>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a17      	ldr	r2, [pc, #92]	@ (800803c <TIM_OC6_SetConfig+0xc0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d007      	beq.n	8007ff4 <TIM_OC6_SetConfig+0x78>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a16      	ldr	r2, [pc, #88]	@ (8008040 <TIM_OC6_SetConfig+0xc4>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_OC6_SetConfig+0x78>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a15      	ldr	r2, [pc, #84]	@ (8008044 <TIM_OC6_SetConfig+0xc8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d109      	bne.n	8008008 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	029b      	lsls	r3, r3, #10
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	feff8fff 	.word	0xfeff8fff
 8008034:	40010000 	.word	0x40010000
 8008038:	40010400 	.word	0x40010400
 800803c:	40014000 	.word	0x40014000
 8008040:	40014400 	.word	0x40014400
 8008044:	40014800 	.word	0x40014800

08008048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	f023 0201 	bic.w	r2, r3, #1
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f023 030a 	bic.w	r3, r3, #10
 8008084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b087      	sub	sp, #28
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	f023 0210 	bic.w	r2, r3, #16
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	031b      	lsls	r3, r3, #12
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	621a      	str	r2, [r3, #32]
}
 80080fa:	bf00      	nop
 80080fc:	371c      	adds	r7, #28
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
	...

08008108 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <TIM_ITRx_SetConfig+0x38>)
 800811c:	4013      	ands	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4313      	orrs	r3, r2
 8008126:	f043 0307 	orr.w	r3, r3, #7
 800812a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	609a      	str	r2, [r3, #8]
}
 8008132:	bf00      	nop
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	ffcfff8f 	.word	0xffcfff8f

08008144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800815e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	021a      	lsls	r2, r3, #8
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	431a      	orrs	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4313      	orrs	r3, r2
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	609a      	str	r2, [r3, #8]
}
 8008178:	bf00      	nop
 800817a:	371c      	adds	r7, #28
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 031f 	and.w	r3, r3, #31
 8008196:	2201      	movs	r2, #1
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1a      	ldr	r2, [r3, #32]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	43db      	mvns	r3, r3
 80081a6:	401a      	ands	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a1a      	ldr	r2, [r3, #32]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	fa01 f303 	lsl.w	r3, r1, r3
 80081bc:	431a      	orrs	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	621a      	str	r2, [r3, #32]
}
 80081c2:	bf00      	nop
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
	...

080081d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e06d      	b.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a30      	ldr	r2, [pc, #192]	@ (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d004      	beq.n	800821c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a2f      	ldr	r2, [pc, #188]	@ (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d108      	bne.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008222:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008234:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a20      	ldr	r2, [pc, #128]	@ (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d022      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825a:	d01d      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a1d      	ldr	r2, [pc, #116]	@ (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d018      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a1c      	ldr	r2, [pc, #112]	@ (80082dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d013      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1a      	ldr	r2, [pc, #104]	@ (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00e      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a15      	ldr	r2, [pc, #84]	@ (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d009      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a16      	ldr	r2, [pc, #88]	@ (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d004      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a15      	ldr	r2, [pc, #84]	@ (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d10c      	bne.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800829e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40000400 	.word	0x40000400
 80082dc:	40000800 	.word	0x40000800
 80082e0:	40000c00 	.word	0x40000c00
 80082e4:	40001800 	.word	0x40001800
 80082e8:	40014000 	.word	0x40014000

080082ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008304:	2302      	movs	r3, #2
 8008306:	e065      	b.n	80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	041b      	lsls	r3, r3, #16
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a16      	ldr	r2, [pc, #88]	@ (80083e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d004      	beq.n	8008396 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a14      	ldr	r2, [pc, #80]	@ (80083e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d115      	bne.n	80083c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	051b      	lsls	r3, r3, #20
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	40010000 	.word	0x40010000
 80083e4:	40010400 	.word	0x40010400

080083e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e042      	b.n	80084bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800843c:	2b00      	cmp	r3, #0
 800843e:	d106      	bne.n	800844e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7fa fa37 	bl	80028bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2224      	movs	r2, #36	@ 0x24
 8008452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0201 	bic.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fd90 	bl	8008f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f825 	bl	80084c4 <UART_SetConfig>
 800847a:	4603      	mov	r3, r0
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e01b      	b.n	80084bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fe0f 	bl	80090d8 <UART_CheckIdleState>
 80084ba:	4603      	mov	r3, r0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084c8:	b092      	sub	sp, #72	@ 0x48
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	431a      	orrs	r2, r3
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4bbe      	ldr	r3, [pc, #760]	@ (80087ec <UART_SetConfig+0x328>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084fc:	430b      	orrs	r3, r1
 80084fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4ab3      	ldr	r2, [pc, #716]	@ (80087f0 <UART_SetConfig+0x32c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d004      	beq.n	8008530 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800852c:	4313      	orrs	r3, r2
 800852e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	4baf      	ldr	r3, [pc, #700]	@ (80087f4 <UART_SetConfig+0x330>)
 8008538:	4013      	ands	r3, r2
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	6812      	ldr	r2, [r2, #0]
 800853e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008540:	430b      	orrs	r3, r1
 8008542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854a:	f023 010f 	bic.w	r1, r3, #15
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4aa6      	ldr	r2, [pc, #664]	@ (80087f8 <UART_SetConfig+0x334>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d177      	bne.n	8008654 <UART_SetConfig+0x190>
 8008564:	4ba5      	ldr	r3, [pc, #660]	@ (80087fc <UART_SetConfig+0x338>)
 8008566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008568:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800856c:	2b28      	cmp	r3, #40	@ 0x28
 800856e:	d86d      	bhi.n	800864c <UART_SetConfig+0x188>
 8008570:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <UART_SetConfig+0xb4>)
 8008572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008576:	bf00      	nop
 8008578:	0800861d 	.word	0x0800861d
 800857c:	0800864d 	.word	0x0800864d
 8008580:	0800864d 	.word	0x0800864d
 8008584:	0800864d 	.word	0x0800864d
 8008588:	0800864d 	.word	0x0800864d
 800858c:	0800864d 	.word	0x0800864d
 8008590:	0800864d 	.word	0x0800864d
 8008594:	0800864d 	.word	0x0800864d
 8008598:	08008625 	.word	0x08008625
 800859c:	0800864d 	.word	0x0800864d
 80085a0:	0800864d 	.word	0x0800864d
 80085a4:	0800864d 	.word	0x0800864d
 80085a8:	0800864d 	.word	0x0800864d
 80085ac:	0800864d 	.word	0x0800864d
 80085b0:	0800864d 	.word	0x0800864d
 80085b4:	0800864d 	.word	0x0800864d
 80085b8:	0800862d 	.word	0x0800862d
 80085bc:	0800864d 	.word	0x0800864d
 80085c0:	0800864d 	.word	0x0800864d
 80085c4:	0800864d 	.word	0x0800864d
 80085c8:	0800864d 	.word	0x0800864d
 80085cc:	0800864d 	.word	0x0800864d
 80085d0:	0800864d 	.word	0x0800864d
 80085d4:	0800864d 	.word	0x0800864d
 80085d8:	08008635 	.word	0x08008635
 80085dc:	0800864d 	.word	0x0800864d
 80085e0:	0800864d 	.word	0x0800864d
 80085e4:	0800864d 	.word	0x0800864d
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	0800864d 	.word	0x0800864d
 80085f0:	0800864d 	.word	0x0800864d
 80085f4:	0800864d 	.word	0x0800864d
 80085f8:	0800863d 	.word	0x0800863d
 80085fc:	0800864d 	.word	0x0800864d
 8008600:	0800864d 	.word	0x0800864d
 8008604:	0800864d 	.word	0x0800864d
 8008608:	0800864d 	.word	0x0800864d
 800860c:	0800864d 	.word	0x0800864d
 8008610:	0800864d 	.word	0x0800864d
 8008614:	0800864d 	.word	0x0800864d
 8008618:	08008645 	.word	0x08008645
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e222      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008624:	2304      	movs	r3, #4
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e21e      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800862c:	2308      	movs	r3, #8
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e21a      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008634:	2310      	movs	r3, #16
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863a:	e216      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800863c:	2320      	movs	r3, #32
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008642:	e212      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008644:	2340      	movs	r3, #64	@ 0x40
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864a:	e20e      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800864c:	2380      	movs	r3, #128	@ 0x80
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008652:	e20a      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a69      	ldr	r2, [pc, #420]	@ (8008800 <UART_SetConfig+0x33c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d130      	bne.n	80086c0 <UART_SetConfig+0x1fc>
 800865e:	4b67      	ldr	r3, [pc, #412]	@ (80087fc <UART_SetConfig+0x338>)
 8008660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b05      	cmp	r3, #5
 8008668:	d826      	bhi.n	80086b8 <UART_SetConfig+0x1f4>
 800866a:	a201      	add	r2, pc, #4	@ (adr r2, 8008670 <UART_SetConfig+0x1ac>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	08008689 	.word	0x08008689
 8008674:	08008691 	.word	0x08008691
 8008678:	08008699 	.word	0x08008699
 800867c:	080086a1 	.word	0x080086a1
 8008680:	080086a9 	.word	0x080086a9
 8008684:	080086b1 	.word	0x080086b1
 8008688:	2300      	movs	r3, #0
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e1ec      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008690:	2304      	movs	r3, #4
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e1e8      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008698:	2308      	movs	r3, #8
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869e:	e1e4      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80086a0:	2310      	movs	r3, #16
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a6:	e1e0      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80086a8:	2320      	movs	r3, #32
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ae:	e1dc      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80086b0:	2340      	movs	r3, #64	@ 0x40
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b6:	e1d8      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80086b8:	2380      	movs	r3, #128	@ 0x80
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086be:	e1d4      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a4f      	ldr	r2, [pc, #316]	@ (8008804 <UART_SetConfig+0x340>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d130      	bne.n	800872c <UART_SetConfig+0x268>
 80086ca:	4b4c      	ldr	r3, [pc, #304]	@ (80087fc <UART_SetConfig+0x338>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d826      	bhi.n	8008724 <UART_SetConfig+0x260>
 80086d6:	a201      	add	r2, pc, #4	@ (adr r2, 80086dc <UART_SetConfig+0x218>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	080086f5 	.word	0x080086f5
 80086e0:	080086fd 	.word	0x080086fd
 80086e4:	08008705 	.word	0x08008705
 80086e8:	0800870d 	.word	0x0800870d
 80086ec:	08008715 	.word	0x08008715
 80086f0:	0800871d 	.word	0x0800871d
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fa:	e1b6      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80086fc:	2304      	movs	r3, #4
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008702:	e1b2      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008704:	2308      	movs	r3, #8
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870a:	e1ae      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800870c:	2310      	movs	r3, #16
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008712:	e1aa      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008714:	2320      	movs	r3, #32
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871a:	e1a6      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800871c:	2340      	movs	r3, #64	@ 0x40
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008722:	e1a2      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008724:	2380      	movs	r3, #128	@ 0x80
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872a:	e19e      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a35      	ldr	r2, [pc, #212]	@ (8008808 <UART_SetConfig+0x344>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d130      	bne.n	8008798 <UART_SetConfig+0x2d4>
 8008736:	4b31      	ldr	r3, [pc, #196]	@ (80087fc <UART_SetConfig+0x338>)
 8008738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873a:	f003 0307 	and.w	r3, r3, #7
 800873e:	2b05      	cmp	r3, #5
 8008740:	d826      	bhi.n	8008790 <UART_SetConfig+0x2cc>
 8008742:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <UART_SetConfig+0x284>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	08008761 	.word	0x08008761
 800874c:	08008769 	.word	0x08008769
 8008750:	08008771 	.word	0x08008771
 8008754:	08008779 	.word	0x08008779
 8008758:	08008781 	.word	0x08008781
 800875c:	08008789 	.word	0x08008789
 8008760:	2300      	movs	r3, #0
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008766:	e180      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008768:	2304      	movs	r3, #4
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876e:	e17c      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008770:	2308      	movs	r3, #8
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008776:	e178      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008778:	2310      	movs	r3, #16
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877e:	e174      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008780:	2320      	movs	r3, #32
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008786:	e170      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008788:	2340      	movs	r3, #64	@ 0x40
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878e:	e16c      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008790:	2380      	movs	r3, #128	@ 0x80
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008796:	e168      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a1b      	ldr	r2, [pc, #108]	@ (800880c <UART_SetConfig+0x348>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d142      	bne.n	8008828 <UART_SetConfig+0x364>
 80087a2:	4b16      	ldr	r3, [pc, #88]	@ (80087fc <UART_SetConfig+0x338>)
 80087a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d838      	bhi.n	8008820 <UART_SetConfig+0x35c>
 80087ae:	a201      	add	r2, pc, #4	@ (adr r2, 80087b4 <UART_SetConfig+0x2f0>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	080087cd 	.word	0x080087cd
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	080087dd 	.word	0x080087dd
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	08008811 	.word	0x08008811
 80087c8:	08008819 	.word	0x08008819
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d2:	e14a      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80087d4:	2304      	movs	r3, #4
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087da:	e146      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80087dc:	2308      	movs	r3, #8
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e2:	e142      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80087e4:	2310      	movs	r3, #16
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ea:	e13e      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80087ec:	cfff69f3 	.word	0xcfff69f3
 80087f0:	58000c00 	.word	0x58000c00
 80087f4:	11fff4ff 	.word	0x11fff4ff
 80087f8:	40011000 	.word	0x40011000
 80087fc:	58024400 	.word	0x58024400
 8008800:	40004400 	.word	0x40004400
 8008804:	40004800 	.word	0x40004800
 8008808:	40004c00 	.word	0x40004c00
 800880c:	40005000 	.word	0x40005000
 8008810:	2320      	movs	r3, #32
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008816:	e128      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008818:	2340      	movs	r3, #64	@ 0x40
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e124      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008820:	2380      	movs	r3, #128	@ 0x80
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008826:	e120      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4acb      	ldr	r2, [pc, #812]	@ (8008b5c <UART_SetConfig+0x698>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d176      	bne.n	8008920 <UART_SetConfig+0x45c>
 8008832:	4bcb      	ldr	r3, [pc, #812]	@ (8008b60 <UART_SetConfig+0x69c>)
 8008834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800883a:	2b28      	cmp	r3, #40	@ 0x28
 800883c:	d86c      	bhi.n	8008918 <UART_SetConfig+0x454>
 800883e:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <UART_SetConfig+0x380>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	080088e9 	.word	0x080088e9
 8008848:	08008919 	.word	0x08008919
 800884c:	08008919 	.word	0x08008919
 8008850:	08008919 	.word	0x08008919
 8008854:	08008919 	.word	0x08008919
 8008858:	08008919 	.word	0x08008919
 800885c:	08008919 	.word	0x08008919
 8008860:	08008919 	.word	0x08008919
 8008864:	080088f1 	.word	0x080088f1
 8008868:	08008919 	.word	0x08008919
 800886c:	08008919 	.word	0x08008919
 8008870:	08008919 	.word	0x08008919
 8008874:	08008919 	.word	0x08008919
 8008878:	08008919 	.word	0x08008919
 800887c:	08008919 	.word	0x08008919
 8008880:	08008919 	.word	0x08008919
 8008884:	080088f9 	.word	0x080088f9
 8008888:	08008919 	.word	0x08008919
 800888c:	08008919 	.word	0x08008919
 8008890:	08008919 	.word	0x08008919
 8008894:	08008919 	.word	0x08008919
 8008898:	08008919 	.word	0x08008919
 800889c:	08008919 	.word	0x08008919
 80088a0:	08008919 	.word	0x08008919
 80088a4:	08008901 	.word	0x08008901
 80088a8:	08008919 	.word	0x08008919
 80088ac:	08008919 	.word	0x08008919
 80088b0:	08008919 	.word	0x08008919
 80088b4:	08008919 	.word	0x08008919
 80088b8:	08008919 	.word	0x08008919
 80088bc:	08008919 	.word	0x08008919
 80088c0:	08008919 	.word	0x08008919
 80088c4:	08008909 	.word	0x08008909
 80088c8:	08008919 	.word	0x08008919
 80088cc:	08008919 	.word	0x08008919
 80088d0:	08008919 	.word	0x08008919
 80088d4:	08008919 	.word	0x08008919
 80088d8:	08008919 	.word	0x08008919
 80088dc:	08008919 	.word	0x08008919
 80088e0:	08008919 	.word	0x08008919
 80088e4:	08008911 	.word	0x08008911
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e0bc      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e0b8      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e0b4      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008906:	e0b0      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008908:	2320      	movs	r3, #32
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890e:	e0ac      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008910:	2340      	movs	r3, #64	@ 0x40
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008916:	e0a8      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008918:	2380      	movs	r3, #128	@ 0x80
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891e:	e0a4      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a8f      	ldr	r2, [pc, #572]	@ (8008b64 <UART_SetConfig+0x6a0>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d130      	bne.n	800898c <UART_SetConfig+0x4c8>
 800892a:	4b8d      	ldr	r3, [pc, #564]	@ (8008b60 <UART_SetConfig+0x69c>)
 800892c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b05      	cmp	r3, #5
 8008934:	d826      	bhi.n	8008984 <UART_SetConfig+0x4c0>
 8008936:	a201      	add	r2, pc, #4	@ (adr r2, 800893c <UART_SetConfig+0x478>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008955 	.word	0x08008955
 8008940:	0800895d 	.word	0x0800895d
 8008944:	08008965 	.word	0x08008965
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008975 	.word	0x08008975
 8008950:	0800897d 	.word	0x0800897d
 8008954:	2300      	movs	r3, #0
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e086      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800895c:	2304      	movs	r3, #4
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e082      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008964:	2308      	movs	r3, #8
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896a:	e07e      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800896c:	2310      	movs	r3, #16
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008972:	e07a      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008974:	2320      	movs	r3, #32
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897a:	e076      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800897c:	2340      	movs	r3, #64	@ 0x40
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008982:	e072      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008984:	2380      	movs	r3, #128	@ 0x80
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898a:	e06e      	b.n	8008a6a <UART_SetConfig+0x5a6>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a75      	ldr	r2, [pc, #468]	@ (8008b68 <UART_SetConfig+0x6a4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d130      	bne.n	80089f8 <UART_SetConfig+0x534>
 8008996:	4b72      	ldr	r3, [pc, #456]	@ (8008b60 <UART_SetConfig+0x69c>)
 8008998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	2b05      	cmp	r3, #5
 80089a0:	d826      	bhi.n	80089f0 <UART_SetConfig+0x52c>
 80089a2:	a201      	add	r2, pc, #4	@ (adr r2, 80089a8 <UART_SetConfig+0x4e4>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089d1 	.word	0x080089d1
 80089b4:	080089d9 	.word	0x080089d9
 80089b8:	080089e1 	.word	0x080089e1
 80089bc:	080089e9 	.word	0x080089e9
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e050      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80089c8:	2304      	movs	r3, #4
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ce:	e04c      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d6:	e048      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089de:	e044      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80089e0:	2320      	movs	r3, #32
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e6:	e040      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80089e8:	2340      	movs	r3, #64	@ 0x40
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ee:	e03c      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80089f0:	2380      	movs	r3, #128	@ 0x80
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f6:	e038      	b.n	8008a6a <UART_SetConfig+0x5a6>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a5b      	ldr	r2, [pc, #364]	@ (8008b6c <UART_SetConfig+0x6a8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d130      	bne.n	8008a64 <UART_SetConfig+0x5a0>
 8008a02:	4b57      	ldr	r3, [pc, #348]	@ (8008b60 <UART_SetConfig+0x69c>)
 8008a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d826      	bhi.n	8008a5c <UART_SetConfig+0x598>
 8008a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a14 <UART_SetConfig+0x550>)
 8008a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a14:	08008a2d 	.word	0x08008a2d
 8008a18:	08008a35 	.word	0x08008a35
 8008a1c:	08008a3d 	.word	0x08008a3d
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a4d 	.word	0x08008a4d
 8008a28:	08008a55 	.word	0x08008a55
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a32:	e01a      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008a34:	2304      	movs	r3, #4
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3a:	e016      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a42:	e012      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008a44:	2310      	movs	r3, #16
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4a:	e00e      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a52:	e00a      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008a54:	2340      	movs	r3, #64	@ 0x40
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5a:	e006      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008a5c:	2380      	movs	r3, #128	@ 0x80
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a62:	e002      	b.n	8008a6a <UART_SetConfig+0x5a6>
 8008a64:	2380      	movs	r3, #128	@ 0x80
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8008b6c <UART_SetConfig+0x6a8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	f040 80f8 	bne.w	8008c66 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	dc46      	bgt.n	8008b0c <UART_SetConfig+0x648>
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	f2c0 8082 	blt.w	8008b88 <UART_SetConfig+0x6c4>
 8008a84:	3b02      	subs	r3, #2
 8008a86:	2b1e      	cmp	r3, #30
 8008a88:	d87e      	bhi.n	8008b88 <UART_SetConfig+0x6c4>
 8008a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <UART_SetConfig+0x5cc>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008b13 	.word	0x08008b13
 8008a94:	08008b89 	.word	0x08008b89
 8008a98:	08008b1b 	.word	0x08008b1b
 8008a9c:	08008b89 	.word	0x08008b89
 8008aa0:	08008b89 	.word	0x08008b89
 8008aa4:	08008b89 	.word	0x08008b89
 8008aa8:	08008b2b 	.word	0x08008b2b
 8008aac:	08008b89 	.word	0x08008b89
 8008ab0:	08008b89 	.word	0x08008b89
 8008ab4:	08008b89 	.word	0x08008b89
 8008ab8:	08008b89 	.word	0x08008b89
 8008abc:	08008b89 	.word	0x08008b89
 8008ac0:	08008b89 	.word	0x08008b89
 8008ac4:	08008b89 	.word	0x08008b89
 8008ac8:	08008b3b 	.word	0x08008b3b
 8008acc:	08008b89 	.word	0x08008b89
 8008ad0:	08008b89 	.word	0x08008b89
 8008ad4:	08008b89 	.word	0x08008b89
 8008ad8:	08008b89 	.word	0x08008b89
 8008adc:	08008b89 	.word	0x08008b89
 8008ae0:	08008b89 	.word	0x08008b89
 8008ae4:	08008b89 	.word	0x08008b89
 8008ae8:	08008b89 	.word	0x08008b89
 8008aec:	08008b89 	.word	0x08008b89
 8008af0:	08008b89 	.word	0x08008b89
 8008af4:	08008b89 	.word	0x08008b89
 8008af8:	08008b89 	.word	0x08008b89
 8008afc:	08008b89 	.word	0x08008b89
 8008b00:	08008b89 	.word	0x08008b89
 8008b04:	08008b89 	.word	0x08008b89
 8008b08:	08008b7b 	.word	0x08008b7b
 8008b0c:	2b40      	cmp	r3, #64	@ 0x40
 8008b0e:	d037      	beq.n	8008b80 <UART_SetConfig+0x6bc>
 8008b10:	e03a      	b.n	8008b88 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b12:	f7fc ff19 	bl	8005948 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b18:	e03c      	b.n	8008b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fc ff28 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b28:	e034      	b.n	8008b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b2a:	f107 0318 	add.w	r3, r7, #24
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fd f874 	bl	8005c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b38:	e02c      	b.n	8008b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b3a:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <UART_SetConfig+0x69c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d016      	beq.n	8008b74 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b46:	4b06      	ldr	r3, [pc, #24]	@ (8008b60 <UART_SetConfig+0x69c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	08db      	lsrs	r3, r3, #3
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	4a07      	ldr	r2, [pc, #28]	@ (8008b70 <UART_SetConfig+0x6ac>)
 8008b52:	fa22 f303 	lsr.w	r3, r2, r3
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b58:	e01c      	b.n	8008b94 <UART_SetConfig+0x6d0>
 8008b5a:	bf00      	nop
 8008b5c:	40011400 	.word	0x40011400
 8008b60:	58024400 	.word	0x58024400
 8008b64:	40007800 	.word	0x40007800
 8008b68:	40007c00 	.word	0x40007c00
 8008b6c:	58000c00 	.word	0x58000c00
 8008b70:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008b74:	4b9d      	ldr	r3, [pc, #628]	@ (8008dec <UART_SetConfig+0x928>)
 8008b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b78:	e00c      	b.n	8008b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b7a:	4b9d      	ldr	r3, [pc, #628]	@ (8008df0 <UART_SetConfig+0x92c>)
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b7e:	e009      	b.n	8008b94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b86:	e005      	b.n	8008b94 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 81de 	beq.w	8008f58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba0:	4a94      	ldr	r2, [pc, #592]	@ (8008df4 <UART_SetConfig+0x930>)
 8008ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	4413      	add	r3, r2
 8008bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d305      	bcc.n	8008bcc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d903      	bls.n	8008bd4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bd2:	e1c1      	b.n	8008f58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	60bb      	str	r3, [r7, #8]
 8008bda:	60fa      	str	r2, [r7, #12]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	4a84      	ldr	r2, [pc, #528]	@ (8008df4 <UART_SetConfig+0x930>)
 8008be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	2200      	movs	r2, #0
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	607a      	str	r2, [r7, #4]
 8008bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bf6:	f7f7 fd87 	bl	8000708 <__aeabi_uldivmod>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4610      	mov	r0, r2
 8008c00:	4619      	mov	r1, r3
 8008c02:	f04f 0200 	mov.w	r2, #0
 8008c06:	f04f 0300 	mov.w	r3, #0
 8008c0a:	020b      	lsls	r3, r1, #8
 8008c0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c10:	0202      	lsls	r2, r0, #8
 8008c12:	6979      	ldr	r1, [r7, #20]
 8008c14:	6849      	ldr	r1, [r1, #4]
 8008c16:	0849      	lsrs	r1, r1, #1
 8008c18:	2000      	movs	r0, #0
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	eb12 0804 	adds.w	r8, r2, r4
 8008c22:	eb43 0905 	adc.w	r9, r3, r5
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	469a      	mov	sl, r3
 8008c2e:	4693      	mov	fp, r2
 8008c30:	4652      	mov	r2, sl
 8008c32:	465b      	mov	r3, fp
 8008c34:	4640      	mov	r0, r8
 8008c36:	4649      	mov	r1, r9
 8008c38:	f7f7 fd66 	bl	8000708 <__aeabi_uldivmod>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4613      	mov	r3, r2
 8008c42:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c4a:	d308      	bcc.n	8008c5e <UART_SetConfig+0x79a>
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c52:	d204      	bcs.n	8008c5e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c5a:	60da      	str	r2, [r3, #12]
 8008c5c:	e17c      	b.n	8008f58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c64:	e178      	b.n	8008f58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c6e:	f040 80c5 	bne.w	8008dfc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008c72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	dc48      	bgt.n	8008d0c <UART_SetConfig+0x848>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	db7b      	blt.n	8008d76 <UART_SetConfig+0x8b2>
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	d879      	bhi.n	8008d76 <UART_SetConfig+0x8b2>
 8008c82:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <UART_SetConfig+0x7c4>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008d13 	.word	0x08008d13
 8008c8c:	08008d1b 	.word	0x08008d1b
 8008c90:	08008d77 	.word	0x08008d77
 8008c94:	08008d77 	.word	0x08008d77
 8008c98:	08008d23 	.word	0x08008d23
 8008c9c:	08008d77 	.word	0x08008d77
 8008ca0:	08008d77 	.word	0x08008d77
 8008ca4:	08008d77 	.word	0x08008d77
 8008ca8:	08008d33 	.word	0x08008d33
 8008cac:	08008d77 	.word	0x08008d77
 8008cb0:	08008d77 	.word	0x08008d77
 8008cb4:	08008d77 	.word	0x08008d77
 8008cb8:	08008d77 	.word	0x08008d77
 8008cbc:	08008d77 	.word	0x08008d77
 8008cc0:	08008d77 	.word	0x08008d77
 8008cc4:	08008d77 	.word	0x08008d77
 8008cc8:	08008d43 	.word	0x08008d43
 8008ccc:	08008d77 	.word	0x08008d77
 8008cd0:	08008d77 	.word	0x08008d77
 8008cd4:	08008d77 	.word	0x08008d77
 8008cd8:	08008d77 	.word	0x08008d77
 8008cdc:	08008d77 	.word	0x08008d77
 8008ce0:	08008d77 	.word	0x08008d77
 8008ce4:	08008d77 	.word	0x08008d77
 8008ce8:	08008d77 	.word	0x08008d77
 8008cec:	08008d77 	.word	0x08008d77
 8008cf0:	08008d77 	.word	0x08008d77
 8008cf4:	08008d77 	.word	0x08008d77
 8008cf8:	08008d77 	.word	0x08008d77
 8008cfc:	08008d77 	.word	0x08008d77
 8008d00:	08008d77 	.word	0x08008d77
 8008d04:	08008d77 	.word	0x08008d77
 8008d08:	08008d69 	.word	0x08008d69
 8008d0c:	2b40      	cmp	r3, #64	@ 0x40
 8008d0e:	d02e      	beq.n	8008d6e <UART_SetConfig+0x8aa>
 8008d10:	e031      	b.n	8008d76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d12:	f7fb fbe3 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8008d16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d18:	e033      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d1a:	f7fb fbf5 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 8008d1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d20:	e02f      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fc fe24 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d30:	e027      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d32:	f107 0318 	add.w	r3, r7, #24
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fc ff70 	bl	8005c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d40:	e01f      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d42:	4b2d      	ldr	r3, [pc, #180]	@ (8008df8 <UART_SetConfig+0x934>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d009      	beq.n	8008d62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8008df8 <UART_SetConfig+0x934>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	08db      	lsrs	r3, r3, #3
 8008d54:	f003 0303 	and.w	r3, r3, #3
 8008d58:	4a24      	ldr	r2, [pc, #144]	@ (8008dec <UART_SetConfig+0x928>)
 8008d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d60:	e00f      	b.n	8008d82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008d62:	4b22      	ldr	r3, [pc, #136]	@ (8008dec <UART_SetConfig+0x928>)
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d66:	e00c      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d68:	4b21      	ldr	r3, [pc, #132]	@ (8008df0 <UART_SetConfig+0x92c>)
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6c:	e009      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d74:	e005      	b.n	8008d82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 80e7 	beq.w	8008f58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8e:	4a19      	ldr	r2, [pc, #100]	@ (8008df4 <UART_SetConfig+0x930>)
 8008d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d9c:	005a      	lsls	r2, r3, #1
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	085b      	lsrs	r3, r3, #1
 8008da4:	441a      	add	r2, r3
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db2:	2b0f      	cmp	r3, #15
 8008db4:	d916      	bls.n	8008de4 <UART_SetConfig+0x920>
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dbc:	d212      	bcs.n	8008de4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f023 030f 	bic.w	r3, r3, #15
 8008dc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008de0:	60da      	str	r2, [r3, #12]
 8008de2:	e0b9      	b.n	8008f58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008dea:	e0b5      	b.n	8008f58 <UART_SetConfig+0xa94>
 8008dec:	03d09000 	.word	0x03d09000
 8008df0:	003d0900 	.word	0x003d0900
 8008df4:	0800e610 	.word	0x0800e610
 8008df8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dfc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e00:	2b20      	cmp	r3, #32
 8008e02:	dc49      	bgt.n	8008e98 <UART_SetConfig+0x9d4>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	db7c      	blt.n	8008f02 <UART_SetConfig+0xa3e>
 8008e08:	2b20      	cmp	r3, #32
 8008e0a:	d87a      	bhi.n	8008f02 <UART_SetConfig+0xa3e>
 8008e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e14 <UART_SetConfig+0x950>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e9f 	.word	0x08008e9f
 8008e18:	08008ea7 	.word	0x08008ea7
 8008e1c:	08008f03 	.word	0x08008f03
 8008e20:	08008f03 	.word	0x08008f03
 8008e24:	08008eaf 	.word	0x08008eaf
 8008e28:	08008f03 	.word	0x08008f03
 8008e2c:	08008f03 	.word	0x08008f03
 8008e30:	08008f03 	.word	0x08008f03
 8008e34:	08008ebf 	.word	0x08008ebf
 8008e38:	08008f03 	.word	0x08008f03
 8008e3c:	08008f03 	.word	0x08008f03
 8008e40:	08008f03 	.word	0x08008f03
 8008e44:	08008f03 	.word	0x08008f03
 8008e48:	08008f03 	.word	0x08008f03
 8008e4c:	08008f03 	.word	0x08008f03
 8008e50:	08008f03 	.word	0x08008f03
 8008e54:	08008ecf 	.word	0x08008ecf
 8008e58:	08008f03 	.word	0x08008f03
 8008e5c:	08008f03 	.word	0x08008f03
 8008e60:	08008f03 	.word	0x08008f03
 8008e64:	08008f03 	.word	0x08008f03
 8008e68:	08008f03 	.word	0x08008f03
 8008e6c:	08008f03 	.word	0x08008f03
 8008e70:	08008f03 	.word	0x08008f03
 8008e74:	08008f03 	.word	0x08008f03
 8008e78:	08008f03 	.word	0x08008f03
 8008e7c:	08008f03 	.word	0x08008f03
 8008e80:	08008f03 	.word	0x08008f03
 8008e84:	08008f03 	.word	0x08008f03
 8008e88:	08008f03 	.word	0x08008f03
 8008e8c:	08008f03 	.word	0x08008f03
 8008e90:	08008f03 	.word	0x08008f03
 8008e94:	08008ef5 	.word	0x08008ef5
 8008e98:	2b40      	cmp	r3, #64	@ 0x40
 8008e9a:	d02e      	beq.n	8008efa <UART_SetConfig+0xa36>
 8008e9c:	e031      	b.n	8008f02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e9e:	f7fb fb1d 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8008ea2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ea4:	e033      	b.n	8008f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ea6:	f7fb fb2f 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 8008eaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008eac:	e02f      	b.n	8008f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fc fd5e 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ebc:	e027      	b.n	8008f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ebe:	f107 0318 	add.w	r3, r7, #24
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fc feaa 	bl	8005c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ecc:	e01f      	b.n	8008f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ece:	4b2d      	ldr	r3, [pc, #180]	@ (8008f84 <UART_SetConfig+0xac0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008eda:	4b2a      	ldr	r3, [pc, #168]	@ (8008f84 <UART_SetConfig+0xac0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	08db      	lsrs	r3, r3, #3
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	4a28      	ldr	r2, [pc, #160]	@ (8008f88 <UART_SetConfig+0xac4>)
 8008ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008eec:	e00f      	b.n	8008f0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008eee:	4b26      	ldr	r3, [pc, #152]	@ (8008f88 <UART_SetConfig+0xac4>)
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef2:	e00c      	b.n	8008f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ef4:	4b25      	ldr	r3, [pc, #148]	@ (8008f8c <UART_SetConfig+0xac8>)
 8008ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef8:	e009      	b.n	8008f0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f00:	e005      	b.n	8008f0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f0c:	bf00      	nop
    }

    if (pclk != 0U)
 8008f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d021      	beq.n	8008f58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f18:	4a1d      	ldr	r2, [pc, #116]	@ (8008f90 <UART_SetConfig+0xacc>)
 8008f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f22:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	441a      	add	r2, r3
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3a:	2b0f      	cmp	r3, #15
 8008f3c:	d909      	bls.n	8008f52 <UART_SetConfig+0xa8e>
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f44:	d205      	bcs.n	8008f52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60da      	str	r2, [r3, #12]
 8008f50:	e002      	b.n	8008f58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2200      	movs	r2, #0
 8008f72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f74:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3748      	adds	r7, #72	@ 0x48
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f82:	bf00      	nop
 8008f84:	58024400 	.word	0x58024400
 8008f88:	03d09000 	.word	0x03d09000
 8008f8c:	003d0900 	.word	0x003d0900
 8008f90:	0800e610 	.word	0x0800e610

08008f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01a      	beq.n	80090aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800908e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009092:	d10a      	bne.n	80090aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	605a      	str	r2, [r3, #4]
  }
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b098      	sub	sp, #96	@ 0x60
 80090dc:	af02      	add	r7, sp, #8
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090e8:	f7f9 fe76 	bl	8002dd8 <HAL_GetTick>
 80090ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d12f      	bne.n	800915c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009104:	2200      	movs	r2, #0
 8009106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f88e 	bl	800922c <UART_WaitOnFlagUntilTimeout>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d022      	beq.n	800915c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800912a:	653b      	str	r3, [r7, #80]	@ 0x50
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	461a      	mov	r2, r3
 8009132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009134:	647b      	str	r3, [r7, #68]	@ 0x44
 8009136:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800913a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e6      	bne.n	8009116 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2220      	movs	r2, #32
 800914c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e063      	b.n	8009224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b04      	cmp	r3, #4
 8009168:	d149      	bne.n	80091fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800916a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009172:	2200      	movs	r2, #0
 8009174:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f857 	bl	800922c <UART_WaitOnFlagUntilTimeout>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d03c      	beq.n	80091fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	623b      	str	r3, [r7, #32]
   return(result);
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80091a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e6      	bne.n	8009184 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f023 0301 	bic.w	r3, r3, #1
 80091cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091d6:	61fa      	str	r2, [r7, #28]
 80091d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	69b9      	ldr	r1, [r7, #24]
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	617b      	str	r3, [r7, #20]
   return(result);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e5      	bne.n	80091b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e012      	b.n	8009224 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3758      	adds	r7, #88	@ 0x58
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	4613      	mov	r3, r2
 800923a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800923c:	e04f      	b.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d04b      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009246:	f7f9 fdc7 	bl	8002dd8 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	429a      	cmp	r2, r3
 8009254:	d302      	bcc.n	800925c <UART_WaitOnFlagUntilTimeout+0x30>
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e04e      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0304 	and.w	r3, r3, #4
 800926a:	2b00      	cmp	r3, #0
 800926c:	d037      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b80      	cmp	r3, #128	@ 0x80
 8009272:	d034      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b40      	cmp	r3, #64	@ 0x40
 8009278:	d031      	beq.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f003 0308 	and.w	r3, r3, #8
 8009284:	2b08      	cmp	r3, #8
 8009286:	d110      	bne.n	80092aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2208      	movs	r2, #8
 800928e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f839 	bl	8009308 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2208      	movs	r2, #8
 800929a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e029      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092b8:	d111      	bne.n	80092de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f81f 	bl	8009308 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e00f      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69da      	ldr	r2, [r3, #28]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4013      	ands	r3, r2
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2300      	movne	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d0a0      	beq.n	800923e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b095      	sub	sp, #84	@ 0x54
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800932e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009330:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800933c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e6      	bne.n	8009310 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	61fb      	str	r3, [r7, #28]
   return(result);
 8009352:	69fa      	ldr	r2, [r7, #28]
 8009354:	4b1e      	ldr	r3, [pc, #120]	@ (80093d0 <UART_EndRxTransfer+0xc8>)
 8009356:	4013      	ands	r3, r2
 8009358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009362:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009364:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e5      	bne.n	8009342 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800937a:	2b01      	cmp	r3, #1
 800937c:	d118      	bne.n	80093b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	60bb      	str	r3, [r7, #8]
   return(result);
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f023 0310 	bic.w	r3, r3, #16
 8009392:	647b      	str	r3, [r7, #68]	@ 0x44
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	461a      	mov	r2, r3
 800939a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800939c:	61bb      	str	r3, [r7, #24]
 800939e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	6979      	ldr	r1, [r7, #20]
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	e841 2300 	strex	r3, r2, [r1]
 80093a8:	613b      	str	r3, [r7, #16]
   return(result);
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e6      	bne.n	800937e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093c4:	bf00      	nop
 80093c6:	3754      	adds	r7, #84	@ 0x54
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	effffffe 	.word	0xeffffffe

080093d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <HAL_UARTEx_DisableFifoMode+0x16>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e027      	b.n	800943a <HAL_UARTEx_DisableFifoMode+0x66>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2224      	movs	r2, #36	@ 0x24
 80093f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0201 	bic.w	r2, r2, #1
 8009410:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009418:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800945a:	2302      	movs	r3, #2
 800945c:	e02d      	b.n	80094ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2224      	movs	r2, #36	@ 0x24
 800946a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f850 	bl	8009540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2220      	movs	r2, #32
 80094ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e02d      	b.n	8009536 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2224      	movs	r2, #36	@ 0x24
 80094e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0201 	bic.w	r2, r2, #1
 8009500:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f812 	bl	8009540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800954c:	2b00      	cmp	r3, #0
 800954e:	d108      	bne.n	8009562 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009560:	e031      	b.n	80095c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009562:	2310      	movs	r3, #16
 8009564:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009566:	2310      	movs	r3, #16
 8009568:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	0e5b      	lsrs	r3, r3, #25
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 0307 	and.w	r3, r3, #7
 8009578:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	0f5b      	lsrs	r3, r3, #29
 8009582:	b2db      	uxtb	r3, r3
 8009584:	f003 0307 	and.w	r3, r3, #7
 8009588:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	7b3a      	ldrb	r2, [r7, #12]
 800958e:	4911      	ldr	r1, [pc, #68]	@ (80095d4 <UARTEx_SetNbDataToProcess+0x94>)
 8009590:	5c8a      	ldrb	r2, [r1, r2]
 8009592:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009596:	7b3a      	ldrb	r2, [r7, #12]
 8009598:	490f      	ldr	r1, [pc, #60]	@ (80095d8 <UARTEx_SetNbDataToProcess+0x98>)
 800959a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800959c:	fb93 f3f2 	sdiv	r3, r3, r2
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	7b7a      	ldrb	r2, [r7, #13]
 80095ac:	4909      	ldr	r1, [pc, #36]	@ (80095d4 <UARTEx_SetNbDataToProcess+0x94>)
 80095ae:	5c8a      	ldrb	r2, [r1, r2]
 80095b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095b4:	7b7a      	ldrb	r2, [r7, #13]
 80095b6:	4908      	ldr	r1, [pc, #32]	@ (80095d8 <UARTEx_SetNbDataToProcess+0x98>)
 80095b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80095c6:	bf00      	nop
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	0800e628 	.word	0x0800e628
 80095d8:	0800e630 	.word	0x0800e630

080095dc <__cvt>:
 80095dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095de:	ed2d 8b02 	vpush	{d8}
 80095e2:	eeb0 8b40 	vmov.f64	d8, d0
 80095e6:	b085      	sub	sp, #20
 80095e8:	4617      	mov	r7, r2
 80095ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80095ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095ee:	ee18 2a90 	vmov	r2, s17
 80095f2:	f025 0520 	bic.w	r5, r5, #32
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	bfb6      	itet	lt
 80095fa:	222d      	movlt	r2, #45	@ 0x2d
 80095fc:	2200      	movge	r2, #0
 80095fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8009602:	2d46      	cmp	r5, #70	@ 0x46
 8009604:	460c      	mov	r4, r1
 8009606:	701a      	strb	r2, [r3, #0]
 8009608:	d004      	beq.n	8009614 <__cvt+0x38>
 800960a:	2d45      	cmp	r5, #69	@ 0x45
 800960c:	d100      	bne.n	8009610 <__cvt+0x34>
 800960e:	3401      	adds	r4, #1
 8009610:	2102      	movs	r1, #2
 8009612:	e000      	b.n	8009616 <__cvt+0x3a>
 8009614:	2103      	movs	r1, #3
 8009616:	ab03      	add	r3, sp, #12
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	ab02      	add	r3, sp, #8
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	4622      	mov	r2, r4
 8009620:	4633      	mov	r3, r6
 8009622:	eeb0 0b48 	vmov.f64	d0, d8
 8009626:	f001 f84f 	bl	800a6c8 <_dtoa_r>
 800962a:	2d47      	cmp	r5, #71	@ 0x47
 800962c:	d114      	bne.n	8009658 <__cvt+0x7c>
 800962e:	07fb      	lsls	r3, r7, #31
 8009630:	d50a      	bpl.n	8009648 <__cvt+0x6c>
 8009632:	1902      	adds	r2, r0, r4
 8009634:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963c:	bf08      	it	eq
 800963e:	9203      	streq	r2, [sp, #12]
 8009640:	2130      	movs	r1, #48	@ 0x30
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	4293      	cmp	r3, r2
 8009646:	d319      	bcc.n	800967c <__cvt+0xa0>
 8009648:	9b03      	ldr	r3, [sp, #12]
 800964a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800964c:	1a1b      	subs	r3, r3, r0
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	b005      	add	sp, #20
 8009652:	ecbd 8b02 	vpop	{d8}
 8009656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009658:	2d46      	cmp	r5, #70	@ 0x46
 800965a:	eb00 0204 	add.w	r2, r0, r4
 800965e:	d1e9      	bne.n	8009634 <__cvt+0x58>
 8009660:	7803      	ldrb	r3, [r0, #0]
 8009662:	2b30      	cmp	r3, #48	@ 0x30
 8009664:	d107      	bne.n	8009676 <__cvt+0x9a>
 8009666:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800966a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966e:	bf1c      	itt	ne
 8009670:	f1c4 0401 	rsbne	r4, r4, #1
 8009674:	6034      	strne	r4, [r6, #0]
 8009676:	6833      	ldr	r3, [r6, #0]
 8009678:	441a      	add	r2, r3
 800967a:	e7db      	b.n	8009634 <__cvt+0x58>
 800967c:	1c5c      	adds	r4, r3, #1
 800967e:	9403      	str	r4, [sp, #12]
 8009680:	7019      	strb	r1, [r3, #0]
 8009682:	e7de      	b.n	8009642 <__cvt+0x66>

08009684 <__exponent>:
 8009684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009686:	2900      	cmp	r1, #0
 8009688:	bfba      	itte	lt
 800968a:	4249      	neglt	r1, r1
 800968c:	232d      	movlt	r3, #45	@ 0x2d
 800968e:	232b      	movge	r3, #43	@ 0x2b
 8009690:	2909      	cmp	r1, #9
 8009692:	7002      	strb	r2, [r0, #0]
 8009694:	7043      	strb	r3, [r0, #1]
 8009696:	dd29      	ble.n	80096ec <__exponent+0x68>
 8009698:	f10d 0307 	add.w	r3, sp, #7
 800969c:	461d      	mov	r5, r3
 800969e:	270a      	movs	r7, #10
 80096a0:	461a      	mov	r2, r3
 80096a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80096a6:	fb07 1416 	mls	r4, r7, r6, r1
 80096aa:	3430      	adds	r4, #48	@ 0x30
 80096ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80096b0:	460c      	mov	r4, r1
 80096b2:	2c63      	cmp	r4, #99	@ 0x63
 80096b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80096b8:	4631      	mov	r1, r6
 80096ba:	dcf1      	bgt.n	80096a0 <__exponent+0x1c>
 80096bc:	3130      	adds	r1, #48	@ 0x30
 80096be:	1e94      	subs	r4, r2, #2
 80096c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096c4:	1c41      	adds	r1, r0, #1
 80096c6:	4623      	mov	r3, r4
 80096c8:	42ab      	cmp	r3, r5
 80096ca:	d30a      	bcc.n	80096e2 <__exponent+0x5e>
 80096cc:	f10d 0309 	add.w	r3, sp, #9
 80096d0:	1a9b      	subs	r3, r3, r2
 80096d2:	42ac      	cmp	r4, r5
 80096d4:	bf88      	it	hi
 80096d6:	2300      	movhi	r3, #0
 80096d8:	3302      	adds	r3, #2
 80096da:	4403      	add	r3, r0
 80096dc:	1a18      	subs	r0, r3, r0
 80096de:	b003      	add	sp, #12
 80096e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096ea:	e7ed      	b.n	80096c8 <__exponent+0x44>
 80096ec:	2330      	movs	r3, #48	@ 0x30
 80096ee:	3130      	adds	r1, #48	@ 0x30
 80096f0:	7083      	strb	r3, [r0, #2]
 80096f2:	70c1      	strb	r1, [r0, #3]
 80096f4:	1d03      	adds	r3, r0, #4
 80096f6:	e7f1      	b.n	80096dc <__exponent+0x58>

080096f8 <_printf_float>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	b08d      	sub	sp, #52	@ 0x34
 80096fe:	460c      	mov	r4, r1
 8009700:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009704:	4616      	mov	r6, r2
 8009706:	461f      	mov	r7, r3
 8009708:	4605      	mov	r5, r0
 800970a:	f000 fed7 	bl	800a4bc <_localeconv_r>
 800970e:	f8d0 b000 	ldr.w	fp, [r0]
 8009712:	4658      	mov	r0, fp
 8009714:	f7f6 fe34 	bl	8000380 <strlen>
 8009718:	2300      	movs	r3, #0
 800971a:	930a      	str	r3, [sp, #40]	@ 0x28
 800971c:	f8d8 3000 	ldr.w	r3, [r8]
 8009720:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009724:	6822      	ldr	r2, [r4, #0]
 8009726:	9005      	str	r0, [sp, #20]
 8009728:	3307      	adds	r3, #7
 800972a:	f023 0307 	bic.w	r3, r3, #7
 800972e:	f103 0108 	add.w	r1, r3, #8
 8009732:	f8c8 1000 	str.w	r1, [r8]
 8009736:	ed93 0b00 	vldr	d0, [r3]
 800973a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009998 <_printf_float+0x2a0>
 800973e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009742:	eeb4 7b46 	vcmp.f64	d7, d6
 8009746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800974e:	dd24      	ble.n	800979a <_printf_float+0xa2>
 8009750:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009758:	d502      	bpl.n	8009760 <_printf_float+0x68>
 800975a:	232d      	movs	r3, #45	@ 0x2d
 800975c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009760:	498f      	ldr	r1, [pc, #572]	@ (80099a0 <_printf_float+0x2a8>)
 8009762:	4b90      	ldr	r3, [pc, #576]	@ (80099a4 <_printf_float+0x2ac>)
 8009764:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009768:	bf94      	ite	ls
 800976a:	4688      	movls	r8, r1
 800976c:	4698      	movhi	r8, r3
 800976e:	f022 0204 	bic.w	r2, r2, #4
 8009772:	2303      	movs	r3, #3
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	6022      	str	r2, [r4, #0]
 8009778:	f04f 0a00 	mov.w	sl, #0
 800977c:	9700      	str	r7, [sp, #0]
 800977e:	4633      	mov	r3, r6
 8009780:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009782:	4621      	mov	r1, r4
 8009784:	4628      	mov	r0, r5
 8009786:	f000 f9d1 	bl	8009b2c <_printf_common>
 800978a:	3001      	adds	r0, #1
 800978c:	f040 8089 	bne.w	80098a2 <_printf_float+0x1aa>
 8009790:	f04f 30ff 	mov.w	r0, #4294967295
 8009794:	b00d      	add	sp, #52	@ 0x34
 8009796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979a:	eeb4 0b40 	vcmp.f64	d0, d0
 800979e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a2:	d709      	bvc.n	80097b8 <_printf_float+0xc0>
 80097a4:	ee10 3a90 	vmov	r3, s1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfbc      	itt	lt
 80097ac:	232d      	movlt	r3, #45	@ 0x2d
 80097ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097b2:	497d      	ldr	r1, [pc, #500]	@ (80099a8 <_printf_float+0x2b0>)
 80097b4:	4b7d      	ldr	r3, [pc, #500]	@ (80099ac <_printf_float+0x2b4>)
 80097b6:	e7d5      	b.n	8009764 <_printf_float+0x6c>
 80097b8:	6863      	ldr	r3, [r4, #4]
 80097ba:	1c59      	adds	r1, r3, #1
 80097bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80097c0:	d139      	bne.n	8009836 <_printf_float+0x13e>
 80097c2:	2306      	movs	r3, #6
 80097c4:	6063      	str	r3, [r4, #4]
 80097c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80097ca:	2300      	movs	r3, #0
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	9303      	str	r3, [sp, #12]
 80097d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80097d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80097d6:	ab09      	add	r3, sp, #36	@ 0x24
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	6861      	ldr	r1, [r4, #4]
 80097dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80097e0:	4628      	mov	r0, r5
 80097e2:	f7ff fefb 	bl	80095dc <__cvt>
 80097e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80097ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097ec:	4680      	mov	r8, r0
 80097ee:	d129      	bne.n	8009844 <_printf_float+0x14c>
 80097f0:	1cc8      	adds	r0, r1, #3
 80097f2:	db02      	blt.n	80097fa <_printf_float+0x102>
 80097f4:	6863      	ldr	r3, [r4, #4]
 80097f6:	4299      	cmp	r1, r3
 80097f8:	dd41      	ble.n	800987e <_printf_float+0x186>
 80097fa:	f1a9 0902 	sub.w	r9, r9, #2
 80097fe:	fa5f f989 	uxtb.w	r9, r9
 8009802:	3901      	subs	r1, #1
 8009804:	464a      	mov	r2, r9
 8009806:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800980a:	9109      	str	r1, [sp, #36]	@ 0x24
 800980c:	f7ff ff3a 	bl	8009684 <__exponent>
 8009810:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009812:	1813      	adds	r3, r2, r0
 8009814:	2a01      	cmp	r2, #1
 8009816:	4682      	mov	sl, r0
 8009818:	6123      	str	r3, [r4, #16]
 800981a:	dc02      	bgt.n	8009822 <_printf_float+0x12a>
 800981c:	6822      	ldr	r2, [r4, #0]
 800981e:	07d2      	lsls	r2, r2, #31
 8009820:	d501      	bpl.n	8009826 <_printf_float+0x12e>
 8009822:	3301      	adds	r3, #1
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0a6      	beq.n	800977c <_printf_float+0x84>
 800982e:	232d      	movs	r3, #45	@ 0x2d
 8009830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009834:	e7a2      	b.n	800977c <_printf_float+0x84>
 8009836:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800983a:	d1c4      	bne.n	80097c6 <_printf_float+0xce>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1c2      	bne.n	80097c6 <_printf_float+0xce>
 8009840:	2301      	movs	r3, #1
 8009842:	e7bf      	b.n	80097c4 <_printf_float+0xcc>
 8009844:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009848:	d9db      	bls.n	8009802 <_printf_float+0x10a>
 800984a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800984e:	d118      	bne.n	8009882 <_printf_float+0x18a>
 8009850:	2900      	cmp	r1, #0
 8009852:	6863      	ldr	r3, [r4, #4]
 8009854:	dd0b      	ble.n	800986e <_printf_float+0x176>
 8009856:	6121      	str	r1, [r4, #16]
 8009858:	b913      	cbnz	r3, 8009860 <_printf_float+0x168>
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	07d0      	lsls	r0, r2, #31
 800985e:	d502      	bpl.n	8009866 <_printf_float+0x16e>
 8009860:	3301      	adds	r3, #1
 8009862:	440b      	add	r3, r1
 8009864:	6123      	str	r3, [r4, #16]
 8009866:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009868:	f04f 0a00 	mov.w	sl, #0
 800986c:	e7db      	b.n	8009826 <_printf_float+0x12e>
 800986e:	b913      	cbnz	r3, 8009876 <_printf_float+0x17e>
 8009870:	6822      	ldr	r2, [r4, #0]
 8009872:	07d2      	lsls	r2, r2, #31
 8009874:	d501      	bpl.n	800987a <_printf_float+0x182>
 8009876:	3302      	adds	r3, #2
 8009878:	e7f4      	b.n	8009864 <_printf_float+0x16c>
 800987a:	2301      	movs	r3, #1
 800987c:	e7f2      	b.n	8009864 <_printf_float+0x16c>
 800987e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009884:	4299      	cmp	r1, r3
 8009886:	db05      	blt.n	8009894 <_printf_float+0x19c>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	6121      	str	r1, [r4, #16]
 800988c:	07d8      	lsls	r0, r3, #31
 800988e:	d5ea      	bpl.n	8009866 <_printf_float+0x16e>
 8009890:	1c4b      	adds	r3, r1, #1
 8009892:	e7e7      	b.n	8009864 <_printf_float+0x16c>
 8009894:	2900      	cmp	r1, #0
 8009896:	bfd4      	ite	le
 8009898:	f1c1 0202 	rsble	r2, r1, #2
 800989c:	2201      	movgt	r2, #1
 800989e:	4413      	add	r3, r2
 80098a0:	e7e0      	b.n	8009864 <_printf_float+0x16c>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	055a      	lsls	r2, r3, #21
 80098a6:	d407      	bmi.n	80098b8 <_printf_float+0x1c0>
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	4642      	mov	r2, r8
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	d12a      	bne.n	800990c <_printf_float+0x214>
 80098b6:	e76b      	b.n	8009790 <_printf_float+0x98>
 80098b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80098bc:	f240 80e0 	bls.w	8009a80 <_printf_float+0x388>
 80098c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80098c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	d133      	bne.n	8009936 <_printf_float+0x23e>
 80098ce:	4a38      	ldr	r2, [pc, #224]	@ (80099b0 <_printf_float+0x2b8>)
 80098d0:	2301      	movs	r3, #1
 80098d2:	4631      	mov	r1, r6
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b8      	blx	r7
 80098d8:	3001      	adds	r0, #1
 80098da:	f43f af59 	beq.w	8009790 <_printf_float+0x98>
 80098de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80098e2:	4543      	cmp	r3, r8
 80098e4:	db02      	blt.n	80098ec <_printf_float+0x1f4>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	07d8      	lsls	r0, r3, #31
 80098ea:	d50f      	bpl.n	800990c <_printf_float+0x214>
 80098ec:	9b05      	ldr	r3, [sp, #20]
 80098ee:	465a      	mov	r2, fp
 80098f0:	4631      	mov	r1, r6
 80098f2:	4628      	mov	r0, r5
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f af4a 	beq.w	8009790 <_printf_float+0x98>
 80098fc:	f04f 0900 	mov.w	r9, #0
 8009900:	f108 38ff 	add.w	r8, r8, #4294967295
 8009904:	f104 0a1a 	add.w	sl, r4, #26
 8009908:	45c8      	cmp	r8, r9
 800990a:	dc09      	bgt.n	8009920 <_printf_float+0x228>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	079b      	lsls	r3, r3, #30
 8009910:	f100 8107 	bmi.w	8009b22 <_printf_float+0x42a>
 8009914:	68e0      	ldr	r0, [r4, #12]
 8009916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009918:	4298      	cmp	r0, r3
 800991a:	bfb8      	it	lt
 800991c:	4618      	movlt	r0, r3
 800991e:	e739      	b.n	8009794 <_printf_float+0x9c>
 8009920:	2301      	movs	r3, #1
 8009922:	4652      	mov	r2, sl
 8009924:	4631      	mov	r1, r6
 8009926:	4628      	mov	r0, r5
 8009928:	47b8      	blx	r7
 800992a:	3001      	adds	r0, #1
 800992c:	f43f af30 	beq.w	8009790 <_printf_float+0x98>
 8009930:	f109 0901 	add.w	r9, r9, #1
 8009934:	e7e8      	b.n	8009908 <_printf_float+0x210>
 8009936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	dc3b      	bgt.n	80099b4 <_printf_float+0x2bc>
 800993c:	4a1c      	ldr	r2, [pc, #112]	@ (80099b0 <_printf_float+0x2b8>)
 800993e:	2301      	movs	r3, #1
 8009940:	4631      	mov	r1, r6
 8009942:	4628      	mov	r0, r5
 8009944:	47b8      	blx	r7
 8009946:	3001      	adds	r0, #1
 8009948:	f43f af22 	beq.w	8009790 <_printf_float+0x98>
 800994c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009950:	ea59 0303 	orrs.w	r3, r9, r3
 8009954:	d102      	bne.n	800995c <_printf_float+0x264>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	07d9      	lsls	r1, r3, #31
 800995a:	d5d7      	bpl.n	800990c <_printf_float+0x214>
 800995c:	9b05      	ldr	r3, [sp, #20]
 800995e:	465a      	mov	r2, fp
 8009960:	4631      	mov	r1, r6
 8009962:	4628      	mov	r0, r5
 8009964:	47b8      	blx	r7
 8009966:	3001      	adds	r0, #1
 8009968:	f43f af12 	beq.w	8009790 <_printf_float+0x98>
 800996c:	f04f 0a00 	mov.w	sl, #0
 8009970:	f104 0b1a 	add.w	fp, r4, #26
 8009974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009976:	425b      	negs	r3, r3
 8009978:	4553      	cmp	r3, sl
 800997a:	dc01      	bgt.n	8009980 <_printf_float+0x288>
 800997c:	464b      	mov	r3, r9
 800997e:	e794      	b.n	80098aa <_printf_float+0x1b2>
 8009980:	2301      	movs	r3, #1
 8009982:	465a      	mov	r2, fp
 8009984:	4631      	mov	r1, r6
 8009986:	4628      	mov	r0, r5
 8009988:	47b8      	blx	r7
 800998a:	3001      	adds	r0, #1
 800998c:	f43f af00 	beq.w	8009790 <_printf_float+0x98>
 8009990:	f10a 0a01 	add.w	sl, sl, #1
 8009994:	e7ee      	b.n	8009974 <_printf_float+0x27c>
 8009996:	bf00      	nop
 8009998:	ffffffff 	.word	0xffffffff
 800999c:	7fefffff 	.word	0x7fefffff
 80099a0:	0800e638 	.word	0x0800e638
 80099a4:	0800e63c 	.word	0x0800e63c
 80099a8:	0800e640 	.word	0x0800e640
 80099ac:	0800e644 	.word	0x0800e644
 80099b0:	0800e648 	.word	0x0800e648
 80099b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099ba:	4553      	cmp	r3, sl
 80099bc:	bfa8      	it	ge
 80099be:	4653      	movge	r3, sl
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	4699      	mov	r9, r3
 80099c4:	dc37      	bgt.n	8009a36 <_printf_float+0x33e>
 80099c6:	2300      	movs	r3, #0
 80099c8:	9307      	str	r3, [sp, #28]
 80099ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099ce:	f104 021a 	add.w	r2, r4, #26
 80099d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099d4:	9907      	ldr	r1, [sp, #28]
 80099d6:	9306      	str	r3, [sp, #24]
 80099d8:	eba3 0309 	sub.w	r3, r3, r9
 80099dc:	428b      	cmp	r3, r1
 80099de:	dc31      	bgt.n	8009a44 <_printf_float+0x34c>
 80099e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e2:	459a      	cmp	sl, r3
 80099e4:	dc3b      	bgt.n	8009a5e <_printf_float+0x366>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	07da      	lsls	r2, r3, #31
 80099ea:	d438      	bmi.n	8009a5e <_printf_float+0x366>
 80099ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ee:	ebaa 0903 	sub.w	r9, sl, r3
 80099f2:	9b06      	ldr	r3, [sp, #24]
 80099f4:	ebaa 0303 	sub.w	r3, sl, r3
 80099f8:	4599      	cmp	r9, r3
 80099fa:	bfa8      	it	ge
 80099fc:	4699      	movge	r9, r3
 80099fe:	f1b9 0f00 	cmp.w	r9, #0
 8009a02:	dc34      	bgt.n	8009a6e <_printf_float+0x376>
 8009a04:	f04f 0800 	mov.w	r8, #0
 8009a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a0c:	f104 0b1a 	add.w	fp, r4, #26
 8009a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a12:	ebaa 0303 	sub.w	r3, sl, r3
 8009a16:	eba3 0309 	sub.w	r3, r3, r9
 8009a1a:	4543      	cmp	r3, r8
 8009a1c:	f77f af76 	ble.w	800990c <_printf_float+0x214>
 8009a20:	2301      	movs	r3, #1
 8009a22:	465a      	mov	r2, fp
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f43f aeb0 	beq.w	8009790 <_printf_float+0x98>
 8009a30:	f108 0801 	add.w	r8, r8, #1
 8009a34:	e7ec      	b.n	8009a10 <_printf_float+0x318>
 8009a36:	4642      	mov	r2, r8
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	d1c1      	bne.n	80099c6 <_printf_float+0x2ce>
 8009a42:	e6a5      	b.n	8009790 <_printf_float+0x98>
 8009a44:	2301      	movs	r3, #1
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	9206      	str	r2, [sp, #24]
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	f43f ae9e 	beq.w	8009790 <_printf_float+0x98>
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	9a06      	ldr	r2, [sp, #24]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	9307      	str	r3, [sp, #28]
 8009a5c:	e7b9      	b.n	80099d2 <_printf_float+0x2da>
 8009a5e:	9b05      	ldr	r3, [sp, #20]
 8009a60:	465a      	mov	r2, fp
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d1bf      	bne.n	80099ec <_printf_float+0x2f4>
 8009a6c:	e690      	b.n	8009790 <_printf_float+0x98>
 8009a6e:	9a06      	ldr	r2, [sp, #24]
 8009a70:	464b      	mov	r3, r9
 8009a72:	4442      	add	r2, r8
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	d1c2      	bne.n	8009a04 <_printf_float+0x30c>
 8009a7e:	e687      	b.n	8009790 <_printf_float+0x98>
 8009a80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009a84:	f1b9 0f01 	cmp.w	r9, #1
 8009a88:	dc01      	bgt.n	8009a8e <_printf_float+0x396>
 8009a8a:	07db      	lsls	r3, r3, #31
 8009a8c:	d536      	bpl.n	8009afc <_printf_float+0x404>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4642      	mov	r2, r8
 8009a92:	4631      	mov	r1, r6
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b8      	blx	r7
 8009a98:	3001      	adds	r0, #1
 8009a9a:	f43f ae79 	beq.w	8009790 <_printf_float+0x98>
 8009a9e:	9b05      	ldr	r3, [sp, #20]
 8009aa0:	465a      	mov	r2, fp
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	47b8      	blx	r7
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	f43f ae71 	beq.w	8009790 <_printf_float+0x98>
 8009aae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009ab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aba:	f109 39ff 	add.w	r9, r9, #4294967295
 8009abe:	d018      	beq.n	8009af2 <_printf_float+0x3fa>
 8009ac0:	464b      	mov	r3, r9
 8009ac2:	f108 0201 	add.w	r2, r8, #1
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	d10c      	bne.n	8009aea <_printf_float+0x3f2>
 8009ad0:	e65e      	b.n	8009790 <_printf_float+0x98>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	465a      	mov	r2, fp
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	f43f ae57 	beq.w	8009790 <_printf_float+0x98>
 8009ae2:	f108 0801 	add.w	r8, r8, #1
 8009ae6:	45c8      	cmp	r8, r9
 8009ae8:	dbf3      	blt.n	8009ad2 <_printf_float+0x3da>
 8009aea:	4653      	mov	r3, sl
 8009aec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009af0:	e6dc      	b.n	80098ac <_printf_float+0x1b4>
 8009af2:	f04f 0800 	mov.w	r8, #0
 8009af6:	f104 0b1a 	add.w	fp, r4, #26
 8009afa:	e7f4      	b.n	8009ae6 <_printf_float+0x3ee>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4642      	mov	r2, r8
 8009b00:	e7e1      	b.n	8009ac6 <_printf_float+0x3ce>
 8009b02:	2301      	movs	r3, #1
 8009b04:	464a      	mov	r2, r9
 8009b06:	4631      	mov	r1, r6
 8009b08:	4628      	mov	r0, r5
 8009b0a:	47b8      	blx	r7
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f43f ae3f 	beq.w	8009790 <_printf_float+0x98>
 8009b12:	f108 0801 	add.w	r8, r8, #1
 8009b16:	68e3      	ldr	r3, [r4, #12]
 8009b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b1a:	1a5b      	subs	r3, r3, r1
 8009b1c:	4543      	cmp	r3, r8
 8009b1e:	dcf0      	bgt.n	8009b02 <_printf_float+0x40a>
 8009b20:	e6f8      	b.n	8009914 <_printf_float+0x21c>
 8009b22:	f04f 0800 	mov.w	r8, #0
 8009b26:	f104 0919 	add.w	r9, r4, #25
 8009b2a:	e7f4      	b.n	8009b16 <_printf_float+0x41e>

08009b2c <_printf_common>:
 8009b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b30:	4616      	mov	r6, r2
 8009b32:	4698      	mov	r8, r3
 8009b34:	688a      	ldr	r2, [r1, #8]
 8009b36:	690b      	ldr	r3, [r1, #16]
 8009b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	bfb8      	it	lt
 8009b40:	4613      	movlt	r3, r2
 8009b42:	6033      	str	r3, [r6, #0]
 8009b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b48:	4607      	mov	r7, r0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	b10a      	cbz	r2, 8009b52 <_printf_common+0x26>
 8009b4e:	3301      	adds	r3, #1
 8009b50:	6033      	str	r3, [r6, #0]
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	0699      	lsls	r1, r3, #26
 8009b56:	bf42      	ittt	mi
 8009b58:	6833      	ldrmi	r3, [r6, #0]
 8009b5a:	3302      	addmi	r3, #2
 8009b5c:	6033      	strmi	r3, [r6, #0]
 8009b5e:	6825      	ldr	r5, [r4, #0]
 8009b60:	f015 0506 	ands.w	r5, r5, #6
 8009b64:	d106      	bne.n	8009b74 <_printf_common+0x48>
 8009b66:	f104 0a19 	add.w	sl, r4, #25
 8009b6a:	68e3      	ldr	r3, [r4, #12]
 8009b6c:	6832      	ldr	r2, [r6, #0]
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	42ab      	cmp	r3, r5
 8009b72:	dc26      	bgt.n	8009bc2 <_printf_common+0x96>
 8009b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b78:	6822      	ldr	r2, [r4, #0]
 8009b7a:	3b00      	subs	r3, #0
 8009b7c:	bf18      	it	ne
 8009b7e:	2301      	movne	r3, #1
 8009b80:	0692      	lsls	r2, r2, #26
 8009b82:	d42b      	bmi.n	8009bdc <_printf_common+0xb0>
 8009b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b88:	4641      	mov	r1, r8
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	47c8      	blx	r9
 8009b8e:	3001      	adds	r0, #1
 8009b90:	d01e      	beq.n	8009bd0 <_printf_common+0xa4>
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	6922      	ldr	r2, [r4, #16]
 8009b96:	f003 0306 	and.w	r3, r3, #6
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	bf02      	ittt	eq
 8009b9e:	68e5      	ldreq	r5, [r4, #12]
 8009ba0:	6833      	ldreq	r3, [r6, #0]
 8009ba2:	1aed      	subeq	r5, r5, r3
 8009ba4:	68a3      	ldr	r3, [r4, #8]
 8009ba6:	bf0c      	ite	eq
 8009ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bac:	2500      	movne	r5, #0
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	bfc4      	itt	gt
 8009bb2:	1a9b      	subgt	r3, r3, r2
 8009bb4:	18ed      	addgt	r5, r5, r3
 8009bb6:	2600      	movs	r6, #0
 8009bb8:	341a      	adds	r4, #26
 8009bba:	42b5      	cmp	r5, r6
 8009bbc:	d11a      	bne.n	8009bf4 <_printf_common+0xc8>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e008      	b.n	8009bd4 <_printf_common+0xa8>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4652      	mov	r2, sl
 8009bc6:	4641      	mov	r1, r8
 8009bc8:	4638      	mov	r0, r7
 8009bca:	47c8      	blx	r9
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d103      	bne.n	8009bd8 <_printf_common+0xac>
 8009bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd8:	3501      	adds	r5, #1
 8009bda:	e7c6      	b.n	8009b6a <_printf_common+0x3e>
 8009bdc:	18e1      	adds	r1, r4, r3
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	2030      	movs	r0, #48	@ 0x30
 8009be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009be6:	4422      	add	r2, r4
 8009be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bf0:	3302      	adds	r3, #2
 8009bf2:	e7c7      	b.n	8009b84 <_printf_common+0x58>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	47c8      	blx	r9
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d0e6      	beq.n	8009bd0 <_printf_common+0xa4>
 8009c02:	3601      	adds	r6, #1
 8009c04:	e7d9      	b.n	8009bba <_printf_common+0x8e>
	...

08009c08 <_printf_i>:
 8009c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c0c:	7e0f      	ldrb	r7, [r1, #24]
 8009c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c10:	2f78      	cmp	r7, #120	@ 0x78
 8009c12:	4691      	mov	r9, r2
 8009c14:	4680      	mov	r8, r0
 8009c16:	460c      	mov	r4, r1
 8009c18:	469a      	mov	sl, r3
 8009c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c1e:	d807      	bhi.n	8009c30 <_printf_i+0x28>
 8009c20:	2f62      	cmp	r7, #98	@ 0x62
 8009c22:	d80a      	bhi.n	8009c3a <_printf_i+0x32>
 8009c24:	2f00      	cmp	r7, #0
 8009c26:	f000 80d2 	beq.w	8009dce <_printf_i+0x1c6>
 8009c2a:	2f58      	cmp	r7, #88	@ 0x58
 8009c2c:	f000 80b9 	beq.w	8009da2 <_printf_i+0x19a>
 8009c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c38:	e03a      	b.n	8009cb0 <_printf_i+0xa8>
 8009c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c3e:	2b15      	cmp	r3, #21
 8009c40:	d8f6      	bhi.n	8009c30 <_printf_i+0x28>
 8009c42:	a101      	add	r1, pc, #4	@ (adr r1, 8009c48 <_printf_i+0x40>)
 8009c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c48:	08009ca1 	.word	0x08009ca1
 8009c4c:	08009cb5 	.word	0x08009cb5
 8009c50:	08009c31 	.word	0x08009c31
 8009c54:	08009c31 	.word	0x08009c31
 8009c58:	08009c31 	.word	0x08009c31
 8009c5c:	08009c31 	.word	0x08009c31
 8009c60:	08009cb5 	.word	0x08009cb5
 8009c64:	08009c31 	.word	0x08009c31
 8009c68:	08009c31 	.word	0x08009c31
 8009c6c:	08009c31 	.word	0x08009c31
 8009c70:	08009c31 	.word	0x08009c31
 8009c74:	08009db5 	.word	0x08009db5
 8009c78:	08009cdf 	.word	0x08009cdf
 8009c7c:	08009d6f 	.word	0x08009d6f
 8009c80:	08009c31 	.word	0x08009c31
 8009c84:	08009c31 	.word	0x08009c31
 8009c88:	08009dd7 	.word	0x08009dd7
 8009c8c:	08009c31 	.word	0x08009c31
 8009c90:	08009cdf 	.word	0x08009cdf
 8009c94:	08009c31 	.word	0x08009c31
 8009c98:	08009c31 	.word	0x08009c31
 8009c9c:	08009d77 	.word	0x08009d77
 8009ca0:	6833      	ldr	r3, [r6, #0]
 8009ca2:	1d1a      	adds	r2, r3, #4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6032      	str	r2, [r6, #0]
 8009ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e09d      	b.n	8009df0 <_printf_i+0x1e8>
 8009cb4:	6833      	ldr	r3, [r6, #0]
 8009cb6:	6820      	ldr	r0, [r4, #0]
 8009cb8:	1d19      	adds	r1, r3, #4
 8009cba:	6031      	str	r1, [r6, #0]
 8009cbc:	0606      	lsls	r6, r0, #24
 8009cbe:	d501      	bpl.n	8009cc4 <_printf_i+0xbc>
 8009cc0:	681d      	ldr	r5, [r3, #0]
 8009cc2:	e003      	b.n	8009ccc <_printf_i+0xc4>
 8009cc4:	0645      	lsls	r5, r0, #25
 8009cc6:	d5fb      	bpl.n	8009cc0 <_printf_i+0xb8>
 8009cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	da03      	bge.n	8009cd8 <_printf_i+0xd0>
 8009cd0:	232d      	movs	r3, #45	@ 0x2d
 8009cd2:	426d      	negs	r5, r5
 8009cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cd8:	4859      	ldr	r0, [pc, #356]	@ (8009e40 <_printf_i+0x238>)
 8009cda:	230a      	movs	r3, #10
 8009cdc:	e011      	b.n	8009d02 <_printf_i+0xfa>
 8009cde:	6821      	ldr	r1, [r4, #0]
 8009ce0:	6833      	ldr	r3, [r6, #0]
 8009ce2:	0608      	lsls	r0, r1, #24
 8009ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ce8:	d402      	bmi.n	8009cf0 <_printf_i+0xe8>
 8009cea:	0649      	lsls	r1, r1, #25
 8009cec:	bf48      	it	mi
 8009cee:	b2ad      	uxthmi	r5, r5
 8009cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cf2:	4853      	ldr	r0, [pc, #332]	@ (8009e40 <_printf_i+0x238>)
 8009cf4:	6033      	str	r3, [r6, #0]
 8009cf6:	bf14      	ite	ne
 8009cf8:	230a      	movne	r3, #10
 8009cfa:	2308      	moveq	r3, #8
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d02:	6866      	ldr	r6, [r4, #4]
 8009d04:	60a6      	str	r6, [r4, #8]
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	bfa2      	ittt	ge
 8009d0a:	6821      	ldrge	r1, [r4, #0]
 8009d0c:	f021 0104 	bicge.w	r1, r1, #4
 8009d10:	6021      	strge	r1, [r4, #0]
 8009d12:	b90d      	cbnz	r5, 8009d18 <_printf_i+0x110>
 8009d14:	2e00      	cmp	r6, #0
 8009d16:	d04b      	beq.n	8009db0 <_printf_i+0x1a8>
 8009d18:	4616      	mov	r6, r2
 8009d1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d1e:	fb03 5711 	mls	r7, r3, r1, r5
 8009d22:	5dc7      	ldrb	r7, [r0, r7]
 8009d24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d28:	462f      	mov	r7, r5
 8009d2a:	42bb      	cmp	r3, r7
 8009d2c:	460d      	mov	r5, r1
 8009d2e:	d9f4      	bls.n	8009d1a <_printf_i+0x112>
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d10b      	bne.n	8009d4c <_printf_i+0x144>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	07df      	lsls	r7, r3, #31
 8009d38:	d508      	bpl.n	8009d4c <_printf_i+0x144>
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	6861      	ldr	r1, [r4, #4]
 8009d3e:	4299      	cmp	r1, r3
 8009d40:	bfde      	ittt	le
 8009d42:	2330      	movle	r3, #48	@ 0x30
 8009d44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d4c:	1b92      	subs	r2, r2, r6
 8009d4e:	6122      	str	r2, [r4, #16]
 8009d50:	f8cd a000 	str.w	sl, [sp]
 8009d54:	464b      	mov	r3, r9
 8009d56:	aa03      	add	r2, sp, #12
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	f7ff fee6 	bl	8009b2c <_printf_common>
 8009d60:	3001      	adds	r0, #1
 8009d62:	d14a      	bne.n	8009dfa <_printf_i+0x1f2>
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295
 8009d68:	b004      	add	sp, #16
 8009d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	f043 0320 	orr.w	r3, r3, #32
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	4833      	ldr	r0, [pc, #204]	@ (8009e44 <_printf_i+0x23c>)
 8009d78:	2778      	movs	r7, #120	@ 0x78
 8009d7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	6831      	ldr	r1, [r6, #0]
 8009d82:	061f      	lsls	r7, r3, #24
 8009d84:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d88:	d402      	bmi.n	8009d90 <_printf_i+0x188>
 8009d8a:	065f      	lsls	r7, r3, #25
 8009d8c:	bf48      	it	mi
 8009d8e:	b2ad      	uxthmi	r5, r5
 8009d90:	6031      	str	r1, [r6, #0]
 8009d92:	07d9      	lsls	r1, r3, #31
 8009d94:	bf44      	itt	mi
 8009d96:	f043 0320 	orrmi.w	r3, r3, #32
 8009d9a:	6023      	strmi	r3, [r4, #0]
 8009d9c:	b11d      	cbz	r5, 8009da6 <_printf_i+0x19e>
 8009d9e:	2310      	movs	r3, #16
 8009da0:	e7ac      	b.n	8009cfc <_printf_i+0xf4>
 8009da2:	4827      	ldr	r0, [pc, #156]	@ (8009e40 <_printf_i+0x238>)
 8009da4:	e7e9      	b.n	8009d7a <_printf_i+0x172>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	f023 0320 	bic.w	r3, r3, #32
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	e7f6      	b.n	8009d9e <_printf_i+0x196>
 8009db0:	4616      	mov	r6, r2
 8009db2:	e7bd      	b.n	8009d30 <_printf_i+0x128>
 8009db4:	6833      	ldr	r3, [r6, #0]
 8009db6:	6825      	ldr	r5, [r4, #0]
 8009db8:	6961      	ldr	r1, [r4, #20]
 8009dba:	1d18      	adds	r0, r3, #4
 8009dbc:	6030      	str	r0, [r6, #0]
 8009dbe:	062e      	lsls	r6, r5, #24
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	d501      	bpl.n	8009dc8 <_printf_i+0x1c0>
 8009dc4:	6019      	str	r1, [r3, #0]
 8009dc6:	e002      	b.n	8009dce <_printf_i+0x1c6>
 8009dc8:	0668      	lsls	r0, r5, #25
 8009dca:	d5fb      	bpl.n	8009dc4 <_printf_i+0x1bc>
 8009dcc:	8019      	strh	r1, [r3, #0]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6123      	str	r3, [r4, #16]
 8009dd2:	4616      	mov	r6, r2
 8009dd4:	e7bc      	b.n	8009d50 <_printf_i+0x148>
 8009dd6:	6833      	ldr	r3, [r6, #0]
 8009dd8:	1d1a      	adds	r2, r3, #4
 8009dda:	6032      	str	r2, [r6, #0]
 8009ddc:	681e      	ldr	r6, [r3, #0]
 8009dde:	6862      	ldr	r2, [r4, #4]
 8009de0:	2100      	movs	r1, #0
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7f6 fa7c 	bl	80002e0 <memchr>
 8009de8:	b108      	cbz	r0, 8009dee <_printf_i+0x1e6>
 8009dea:	1b80      	subs	r0, r0, r6
 8009dec:	6060      	str	r0, [r4, #4]
 8009dee:	6863      	ldr	r3, [r4, #4]
 8009df0:	6123      	str	r3, [r4, #16]
 8009df2:	2300      	movs	r3, #0
 8009df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009df8:	e7aa      	b.n	8009d50 <_printf_i+0x148>
 8009dfa:	6923      	ldr	r3, [r4, #16]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4649      	mov	r1, r9
 8009e00:	4640      	mov	r0, r8
 8009e02:	47d0      	blx	sl
 8009e04:	3001      	adds	r0, #1
 8009e06:	d0ad      	beq.n	8009d64 <_printf_i+0x15c>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	079b      	lsls	r3, r3, #30
 8009e0c:	d413      	bmi.n	8009e36 <_printf_i+0x22e>
 8009e0e:	68e0      	ldr	r0, [r4, #12]
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	4298      	cmp	r0, r3
 8009e14:	bfb8      	it	lt
 8009e16:	4618      	movlt	r0, r3
 8009e18:	e7a6      	b.n	8009d68 <_printf_i+0x160>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	4649      	mov	r1, r9
 8009e20:	4640      	mov	r0, r8
 8009e22:	47d0      	blx	sl
 8009e24:	3001      	adds	r0, #1
 8009e26:	d09d      	beq.n	8009d64 <_printf_i+0x15c>
 8009e28:	3501      	adds	r5, #1
 8009e2a:	68e3      	ldr	r3, [r4, #12]
 8009e2c:	9903      	ldr	r1, [sp, #12]
 8009e2e:	1a5b      	subs	r3, r3, r1
 8009e30:	42ab      	cmp	r3, r5
 8009e32:	dcf2      	bgt.n	8009e1a <_printf_i+0x212>
 8009e34:	e7eb      	b.n	8009e0e <_printf_i+0x206>
 8009e36:	2500      	movs	r5, #0
 8009e38:	f104 0619 	add.w	r6, r4, #25
 8009e3c:	e7f5      	b.n	8009e2a <_printf_i+0x222>
 8009e3e:	bf00      	nop
 8009e40:	0800e64a 	.word	0x0800e64a
 8009e44:	0800e65b 	.word	0x0800e65b

08009e48 <_scanf_float>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	b087      	sub	sp, #28
 8009e4e:	4617      	mov	r7, r2
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	688b      	ldr	r3, [r1, #8]
 8009e54:	1e5a      	subs	r2, r3, #1
 8009e56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e5a:	bf81      	itttt	hi
 8009e5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e60:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e68:	608b      	strhi	r3, [r1, #8]
 8009e6a:	680b      	ldr	r3, [r1, #0]
 8009e6c:	460a      	mov	r2, r1
 8009e6e:	f04f 0500 	mov.w	r5, #0
 8009e72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009e76:	f842 3b1c 	str.w	r3, [r2], #28
 8009e7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e7e:	4680      	mov	r8, r0
 8009e80:	460c      	mov	r4, r1
 8009e82:	bf98      	it	ls
 8009e84:	f04f 0b00 	movls.w	fp, #0
 8009e88:	9201      	str	r2, [sp, #4]
 8009e8a:	4616      	mov	r6, r2
 8009e8c:	46aa      	mov	sl, r5
 8009e8e:	46a9      	mov	r9, r5
 8009e90:	9502      	str	r5, [sp, #8]
 8009e92:	68a2      	ldr	r2, [r4, #8]
 8009e94:	b152      	cbz	r2, 8009eac <_scanf_float+0x64>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b4e      	cmp	r3, #78	@ 0x4e
 8009e9c:	d864      	bhi.n	8009f68 <_scanf_float+0x120>
 8009e9e:	2b40      	cmp	r3, #64	@ 0x40
 8009ea0:	d83c      	bhi.n	8009f1c <_scanf_float+0xd4>
 8009ea2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009ea6:	b2c8      	uxtb	r0, r1
 8009ea8:	280e      	cmp	r0, #14
 8009eaa:	d93a      	bls.n	8009f22 <_scanf_float+0xda>
 8009eac:	f1b9 0f00 	cmp.w	r9, #0
 8009eb0:	d003      	beq.n	8009eba <_scanf_float+0x72>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ebe:	f1ba 0f01 	cmp.w	sl, #1
 8009ec2:	f200 8117 	bhi.w	800a0f4 <_scanf_float+0x2ac>
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	429e      	cmp	r6, r3
 8009eca:	f200 8108 	bhi.w	800a0de <_scanf_float+0x296>
 8009ece:	2001      	movs	r0, #1
 8009ed0:	b007      	add	sp, #28
 8009ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009eda:	2a0d      	cmp	r2, #13
 8009edc:	d8e6      	bhi.n	8009eac <_scanf_float+0x64>
 8009ede:	a101      	add	r1, pc, #4	@ (adr r1, 8009ee4 <_scanf_float+0x9c>)
 8009ee0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ee4:	0800a02b 	.word	0x0800a02b
 8009ee8:	08009ead 	.word	0x08009ead
 8009eec:	08009ead 	.word	0x08009ead
 8009ef0:	08009ead 	.word	0x08009ead
 8009ef4:	0800a08b 	.word	0x0800a08b
 8009ef8:	0800a063 	.word	0x0800a063
 8009efc:	08009ead 	.word	0x08009ead
 8009f00:	08009ead 	.word	0x08009ead
 8009f04:	0800a039 	.word	0x0800a039
 8009f08:	08009ead 	.word	0x08009ead
 8009f0c:	08009ead 	.word	0x08009ead
 8009f10:	08009ead 	.word	0x08009ead
 8009f14:	08009ead 	.word	0x08009ead
 8009f18:	08009ff1 	.word	0x08009ff1
 8009f1c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f20:	e7db      	b.n	8009eda <_scanf_float+0x92>
 8009f22:	290e      	cmp	r1, #14
 8009f24:	d8c2      	bhi.n	8009eac <_scanf_float+0x64>
 8009f26:	a001      	add	r0, pc, #4	@ (adr r0, 8009f2c <_scanf_float+0xe4>)
 8009f28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f2c:	08009fe1 	.word	0x08009fe1
 8009f30:	08009ead 	.word	0x08009ead
 8009f34:	08009fe1 	.word	0x08009fe1
 8009f38:	0800a077 	.word	0x0800a077
 8009f3c:	08009ead 	.word	0x08009ead
 8009f40:	08009f89 	.word	0x08009f89
 8009f44:	08009fc7 	.word	0x08009fc7
 8009f48:	08009fc7 	.word	0x08009fc7
 8009f4c:	08009fc7 	.word	0x08009fc7
 8009f50:	08009fc7 	.word	0x08009fc7
 8009f54:	08009fc7 	.word	0x08009fc7
 8009f58:	08009fc7 	.word	0x08009fc7
 8009f5c:	08009fc7 	.word	0x08009fc7
 8009f60:	08009fc7 	.word	0x08009fc7
 8009f64:	08009fc7 	.word	0x08009fc7
 8009f68:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f6a:	d809      	bhi.n	8009f80 <_scanf_float+0x138>
 8009f6c:	2b60      	cmp	r3, #96	@ 0x60
 8009f6e:	d8b2      	bhi.n	8009ed6 <_scanf_float+0x8e>
 8009f70:	2b54      	cmp	r3, #84	@ 0x54
 8009f72:	d07b      	beq.n	800a06c <_scanf_float+0x224>
 8009f74:	2b59      	cmp	r3, #89	@ 0x59
 8009f76:	d199      	bne.n	8009eac <_scanf_float+0x64>
 8009f78:	2d07      	cmp	r5, #7
 8009f7a:	d197      	bne.n	8009eac <_scanf_float+0x64>
 8009f7c:	2508      	movs	r5, #8
 8009f7e:	e02c      	b.n	8009fda <_scanf_float+0x192>
 8009f80:	2b74      	cmp	r3, #116	@ 0x74
 8009f82:	d073      	beq.n	800a06c <_scanf_float+0x224>
 8009f84:	2b79      	cmp	r3, #121	@ 0x79
 8009f86:	e7f6      	b.n	8009f76 <_scanf_float+0x12e>
 8009f88:	6821      	ldr	r1, [r4, #0]
 8009f8a:	05c8      	lsls	r0, r1, #23
 8009f8c:	d51b      	bpl.n	8009fc6 <_scanf_float+0x17e>
 8009f8e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009f92:	6021      	str	r1, [r4, #0]
 8009f94:	f109 0901 	add.w	r9, r9, #1
 8009f98:	f1bb 0f00 	cmp.w	fp, #0
 8009f9c:	d003      	beq.n	8009fa6 <_scanf_float+0x15e>
 8009f9e:	3201      	adds	r2, #1
 8009fa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fa4:	60a2      	str	r2, [r4, #8]
 8009fa6:	68a3      	ldr	r3, [r4, #8]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	60a3      	str	r3, [r4, #8]
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	6123      	str	r3, [r4, #16]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	607b      	str	r3, [r7, #4]
 8009fba:	f340 8087 	ble.w	800a0cc <_scanf_float+0x284>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	e765      	b.n	8009e92 <_scanf_float+0x4a>
 8009fc6:	eb1a 0105 	adds.w	r1, sl, r5
 8009fca:	f47f af6f 	bne.w	8009eac <_scanf_float+0x64>
 8009fce:	6822      	ldr	r2, [r4, #0]
 8009fd0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009fd4:	6022      	str	r2, [r4, #0]
 8009fd6:	460d      	mov	r5, r1
 8009fd8:	468a      	mov	sl, r1
 8009fda:	f806 3b01 	strb.w	r3, [r6], #1
 8009fde:	e7e2      	b.n	8009fa6 <_scanf_float+0x15e>
 8009fe0:	6822      	ldr	r2, [r4, #0]
 8009fe2:	0610      	lsls	r0, r2, #24
 8009fe4:	f57f af62 	bpl.w	8009eac <_scanf_float+0x64>
 8009fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fec:	6022      	str	r2, [r4, #0]
 8009fee:	e7f4      	b.n	8009fda <_scanf_float+0x192>
 8009ff0:	f1ba 0f00 	cmp.w	sl, #0
 8009ff4:	d10e      	bne.n	800a014 <_scanf_float+0x1cc>
 8009ff6:	f1b9 0f00 	cmp.w	r9, #0
 8009ffa:	d10e      	bne.n	800a01a <_scanf_float+0x1d2>
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a002:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a006:	d108      	bne.n	800a01a <_scanf_float+0x1d2>
 800a008:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a00c:	6022      	str	r2, [r4, #0]
 800a00e:	f04f 0a01 	mov.w	sl, #1
 800a012:	e7e2      	b.n	8009fda <_scanf_float+0x192>
 800a014:	f1ba 0f02 	cmp.w	sl, #2
 800a018:	d055      	beq.n	800a0c6 <_scanf_float+0x27e>
 800a01a:	2d01      	cmp	r5, #1
 800a01c:	d002      	beq.n	800a024 <_scanf_float+0x1dc>
 800a01e:	2d04      	cmp	r5, #4
 800a020:	f47f af44 	bne.w	8009eac <_scanf_float+0x64>
 800a024:	3501      	adds	r5, #1
 800a026:	b2ed      	uxtb	r5, r5
 800a028:	e7d7      	b.n	8009fda <_scanf_float+0x192>
 800a02a:	f1ba 0f01 	cmp.w	sl, #1
 800a02e:	f47f af3d 	bne.w	8009eac <_scanf_float+0x64>
 800a032:	f04f 0a02 	mov.w	sl, #2
 800a036:	e7d0      	b.n	8009fda <_scanf_float+0x192>
 800a038:	b97d      	cbnz	r5, 800a05a <_scanf_float+0x212>
 800a03a:	f1b9 0f00 	cmp.w	r9, #0
 800a03e:	f47f af38 	bne.w	8009eb2 <_scanf_float+0x6a>
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a048:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a04c:	f040 8101 	bne.w	800a252 <_scanf_float+0x40a>
 800a050:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	2501      	movs	r5, #1
 800a058:	e7bf      	b.n	8009fda <_scanf_float+0x192>
 800a05a:	2d03      	cmp	r5, #3
 800a05c:	d0e2      	beq.n	800a024 <_scanf_float+0x1dc>
 800a05e:	2d05      	cmp	r5, #5
 800a060:	e7de      	b.n	800a020 <_scanf_float+0x1d8>
 800a062:	2d02      	cmp	r5, #2
 800a064:	f47f af22 	bne.w	8009eac <_scanf_float+0x64>
 800a068:	2503      	movs	r5, #3
 800a06a:	e7b6      	b.n	8009fda <_scanf_float+0x192>
 800a06c:	2d06      	cmp	r5, #6
 800a06e:	f47f af1d 	bne.w	8009eac <_scanf_float+0x64>
 800a072:	2507      	movs	r5, #7
 800a074:	e7b1      	b.n	8009fda <_scanf_float+0x192>
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	0591      	lsls	r1, r2, #22
 800a07a:	f57f af17 	bpl.w	8009eac <_scanf_float+0x64>
 800a07e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a082:	6022      	str	r2, [r4, #0]
 800a084:	f8cd 9008 	str.w	r9, [sp, #8]
 800a088:	e7a7      	b.n	8009fda <_scanf_float+0x192>
 800a08a:	6822      	ldr	r2, [r4, #0]
 800a08c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a090:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a094:	d006      	beq.n	800a0a4 <_scanf_float+0x25c>
 800a096:	0550      	lsls	r0, r2, #21
 800a098:	f57f af08 	bpl.w	8009eac <_scanf_float+0x64>
 800a09c:	f1b9 0f00 	cmp.w	r9, #0
 800a0a0:	f000 80d7 	beq.w	800a252 <_scanf_float+0x40a>
 800a0a4:	0591      	lsls	r1, r2, #22
 800a0a6:	bf58      	it	pl
 800a0a8:	9902      	ldrpl	r1, [sp, #8]
 800a0aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0ae:	bf58      	it	pl
 800a0b0:	eba9 0101 	subpl.w	r1, r9, r1
 800a0b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a0b8:	bf58      	it	pl
 800a0ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a0be:	6022      	str	r2, [r4, #0]
 800a0c0:	f04f 0900 	mov.w	r9, #0
 800a0c4:	e789      	b.n	8009fda <_scanf_float+0x192>
 800a0c6:	f04f 0a03 	mov.w	sl, #3
 800a0ca:	e786      	b.n	8009fda <_scanf_float+0x192>
 800a0cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a0d0:	4639      	mov	r1, r7
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4798      	blx	r3
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f43f aedb 	beq.w	8009e92 <_scanf_float+0x4a>
 800a0dc:	e6e6      	b.n	8009eac <_scanf_float+0x64>
 800a0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	4798      	blx	r3
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	e6e8      	b.n	8009ec6 <_scanf_float+0x7e>
 800a0f4:	1e6b      	subs	r3, r5, #1
 800a0f6:	2b06      	cmp	r3, #6
 800a0f8:	d824      	bhi.n	800a144 <_scanf_float+0x2fc>
 800a0fa:	2d02      	cmp	r5, #2
 800a0fc:	d836      	bhi.n	800a16c <_scanf_float+0x324>
 800a0fe:	9b01      	ldr	r3, [sp, #4]
 800a100:	429e      	cmp	r6, r3
 800a102:	f67f aee4 	bls.w	8009ece <_scanf_float+0x86>
 800a106:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a10a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a10e:	463a      	mov	r2, r7
 800a110:	4640      	mov	r0, r8
 800a112:	4798      	blx	r3
 800a114:	6923      	ldr	r3, [r4, #16]
 800a116:	3b01      	subs	r3, #1
 800a118:	6123      	str	r3, [r4, #16]
 800a11a:	e7f0      	b.n	800a0fe <_scanf_float+0x2b6>
 800a11c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a120:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a124:	463a      	mov	r2, r7
 800a126:	4640      	mov	r0, r8
 800a128:	4798      	blx	r3
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a134:	fa5f fa8a 	uxtb.w	sl, sl
 800a138:	f1ba 0f02 	cmp.w	sl, #2
 800a13c:	d1ee      	bne.n	800a11c <_scanf_float+0x2d4>
 800a13e:	3d03      	subs	r5, #3
 800a140:	b2ed      	uxtb	r5, r5
 800a142:	1b76      	subs	r6, r6, r5
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	05da      	lsls	r2, r3, #23
 800a148:	d530      	bpl.n	800a1ac <_scanf_float+0x364>
 800a14a:	055b      	lsls	r3, r3, #21
 800a14c:	d511      	bpl.n	800a172 <_scanf_float+0x32a>
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	429e      	cmp	r6, r3
 800a152:	f67f aebc 	bls.w	8009ece <_scanf_float+0x86>
 800a156:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a15a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a15e:	463a      	mov	r2, r7
 800a160:	4640      	mov	r0, r8
 800a162:	4798      	blx	r3
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	3b01      	subs	r3, #1
 800a168:	6123      	str	r3, [r4, #16]
 800a16a:	e7f0      	b.n	800a14e <_scanf_float+0x306>
 800a16c:	46aa      	mov	sl, r5
 800a16e:	46b3      	mov	fp, r6
 800a170:	e7de      	b.n	800a130 <_scanf_float+0x2e8>
 800a172:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a176:	6923      	ldr	r3, [r4, #16]
 800a178:	2965      	cmp	r1, #101	@ 0x65
 800a17a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a17e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	d00c      	beq.n	800a1a0 <_scanf_float+0x358>
 800a186:	2945      	cmp	r1, #69	@ 0x45
 800a188:	d00a      	beq.n	800a1a0 <_scanf_float+0x358>
 800a18a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a18e:	463a      	mov	r2, r7
 800a190:	4640      	mov	r0, r8
 800a192:	4798      	blx	r3
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	1eb5      	subs	r5, r6, #2
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1a4:	463a      	mov	r2, r7
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	4798      	blx	r3
 800a1aa:	462e      	mov	r6, r5
 800a1ac:	6822      	ldr	r2, [r4, #0]
 800a1ae:	f012 0210 	ands.w	r2, r2, #16
 800a1b2:	d001      	beq.n	800a1b8 <_scanf_float+0x370>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	e68b      	b.n	8009ed0 <_scanf_float+0x88>
 800a1b8:	7032      	strb	r2, [r6, #0]
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a1c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1c4:	d11a      	bne.n	800a1fc <_scanf_float+0x3b4>
 800a1c6:	9b02      	ldr	r3, [sp, #8]
 800a1c8:	454b      	cmp	r3, r9
 800a1ca:	eba3 0209 	sub.w	r2, r3, r9
 800a1ce:	d121      	bne.n	800a214 <_scanf_float+0x3cc>
 800a1d0:	9901      	ldr	r1, [sp, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	f002 fb2d 	bl	800c834 <_strtod_r>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	6821      	ldr	r1, [r4, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f011 0f02 	tst.w	r1, #2
 800a1e4:	f103 0204 	add.w	r2, r3, #4
 800a1e8:	d01f      	beq.n	800a22a <_scanf_float+0x3e2>
 800a1ea:	9903      	ldr	r1, [sp, #12]
 800a1ec:	600a      	str	r2, [r1, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	ed83 0b00 	vstr	d0, [r3]
 800a1f4:	68e3      	ldr	r3, [r4, #12]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	60e3      	str	r3, [r4, #12]
 800a1fa:	e7db      	b.n	800a1b4 <_scanf_float+0x36c>
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0e6      	beq.n	800a1d0 <_scanf_float+0x388>
 800a202:	9905      	ldr	r1, [sp, #20]
 800a204:	230a      	movs	r3, #10
 800a206:	3101      	adds	r1, #1
 800a208:	4640      	mov	r0, r8
 800a20a:	f002 fb93 	bl	800c934 <_strtol_r>
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	9e05      	ldr	r6, [sp, #20]
 800a212:	1ac2      	subs	r2, r0, r3
 800a214:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a218:	429e      	cmp	r6, r3
 800a21a:	bf28      	it	cs
 800a21c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a220:	490d      	ldr	r1, [pc, #52]	@ (800a258 <_scanf_float+0x410>)
 800a222:	4630      	mov	r0, r6
 800a224:	f000 f8de 	bl	800a3e4 <siprintf>
 800a228:	e7d2      	b.n	800a1d0 <_scanf_float+0x388>
 800a22a:	f011 0f04 	tst.w	r1, #4
 800a22e:	9903      	ldr	r1, [sp, #12]
 800a230:	600a      	str	r2, [r1, #0]
 800a232:	d1dc      	bne.n	800a1ee <_scanf_float+0x3a6>
 800a234:	eeb4 0b40 	vcmp.f64	d0, d0
 800a238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23c:	681d      	ldr	r5, [r3, #0]
 800a23e:	d705      	bvc.n	800a24c <_scanf_float+0x404>
 800a240:	4806      	ldr	r0, [pc, #24]	@ (800a25c <_scanf_float+0x414>)
 800a242:	f000 f9b3 	bl	800a5ac <nanf>
 800a246:	ed85 0a00 	vstr	s0, [r5]
 800a24a:	e7d3      	b.n	800a1f4 <_scanf_float+0x3ac>
 800a24c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a250:	e7f9      	b.n	800a246 <_scanf_float+0x3fe>
 800a252:	f04f 0900 	mov.w	r9, #0
 800a256:	e630      	b.n	8009eba <_scanf_float+0x72>
 800a258:	0800e66c 	.word	0x0800e66c
 800a25c:	0800ea05 	.word	0x0800ea05

0800a260 <std>:
 800a260:	2300      	movs	r3, #0
 800a262:	b510      	push	{r4, lr}
 800a264:	4604      	mov	r4, r0
 800a266:	e9c0 3300 	strd	r3, r3, [r0]
 800a26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a26e:	6083      	str	r3, [r0, #8]
 800a270:	8181      	strh	r1, [r0, #12]
 800a272:	6643      	str	r3, [r0, #100]	@ 0x64
 800a274:	81c2      	strh	r2, [r0, #14]
 800a276:	6183      	str	r3, [r0, #24]
 800a278:	4619      	mov	r1, r3
 800a27a:	2208      	movs	r2, #8
 800a27c:	305c      	adds	r0, #92	@ 0x5c
 800a27e:	f000 f914 	bl	800a4aa <memset>
 800a282:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <std+0x58>)
 800a284:	6263      	str	r3, [r4, #36]	@ 0x24
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <std+0x5c>)
 800a288:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a28a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c0 <std+0x60>)
 800a28c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a28e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c4 <std+0x64>)
 800a290:	6323      	str	r3, [r4, #48]	@ 0x30
 800a292:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c8 <std+0x68>)
 800a294:	6224      	str	r4, [r4, #32]
 800a296:	429c      	cmp	r4, r3
 800a298:	d006      	beq.n	800a2a8 <std+0x48>
 800a29a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a29e:	4294      	cmp	r4, r2
 800a2a0:	d002      	beq.n	800a2a8 <std+0x48>
 800a2a2:	33d0      	adds	r3, #208	@ 0xd0
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	d105      	bne.n	800a2b4 <std+0x54>
 800a2a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b0:	f000 b978 	b.w	800a5a4 <__retarget_lock_init_recursive>
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800a425 	.word	0x0800a425
 800a2bc:	0800a447 	.word	0x0800a447
 800a2c0:	0800a47f 	.word	0x0800a47f
 800a2c4:	0800a4a3 	.word	0x0800a4a3
 800a2c8:	2400056c 	.word	0x2400056c

0800a2cc <stdio_exit_handler>:
 800a2cc:	4a02      	ldr	r2, [pc, #8]	@ (800a2d8 <stdio_exit_handler+0xc>)
 800a2ce:	4903      	ldr	r1, [pc, #12]	@ (800a2dc <stdio_exit_handler+0x10>)
 800a2d0:	4803      	ldr	r0, [pc, #12]	@ (800a2e0 <stdio_exit_handler+0x14>)
 800a2d2:	f000 b869 	b.w	800a3a8 <_fwalk_sglue>
 800a2d6:	bf00      	nop
 800a2d8:	24000014 	.word	0x24000014
 800a2dc:	0800ccf1 	.word	0x0800ccf1
 800a2e0:	24000024 	.word	0x24000024

0800a2e4 <cleanup_stdio>:
 800a2e4:	6841      	ldr	r1, [r0, #4]
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a318 <cleanup_stdio+0x34>)
 800a2e8:	4299      	cmp	r1, r3
 800a2ea:	b510      	push	{r4, lr}
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	d001      	beq.n	800a2f4 <cleanup_stdio+0x10>
 800a2f0:	f002 fcfe 	bl	800ccf0 <_fflush_r>
 800a2f4:	68a1      	ldr	r1, [r4, #8]
 800a2f6:	4b09      	ldr	r3, [pc, #36]	@ (800a31c <cleanup_stdio+0x38>)
 800a2f8:	4299      	cmp	r1, r3
 800a2fa:	d002      	beq.n	800a302 <cleanup_stdio+0x1e>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f002 fcf7 	bl	800ccf0 <_fflush_r>
 800a302:	68e1      	ldr	r1, [r4, #12]
 800a304:	4b06      	ldr	r3, [pc, #24]	@ (800a320 <cleanup_stdio+0x3c>)
 800a306:	4299      	cmp	r1, r3
 800a308:	d004      	beq.n	800a314 <cleanup_stdio+0x30>
 800a30a:	4620      	mov	r0, r4
 800a30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a310:	f002 bcee 	b.w	800ccf0 <_fflush_r>
 800a314:	bd10      	pop	{r4, pc}
 800a316:	bf00      	nop
 800a318:	2400056c 	.word	0x2400056c
 800a31c:	240005d4 	.word	0x240005d4
 800a320:	2400063c 	.word	0x2400063c

0800a324 <global_stdio_init.part.0>:
 800a324:	b510      	push	{r4, lr}
 800a326:	4b0b      	ldr	r3, [pc, #44]	@ (800a354 <global_stdio_init.part.0+0x30>)
 800a328:	4c0b      	ldr	r4, [pc, #44]	@ (800a358 <global_stdio_init.part.0+0x34>)
 800a32a:	4a0c      	ldr	r2, [pc, #48]	@ (800a35c <global_stdio_init.part.0+0x38>)
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	4620      	mov	r0, r4
 800a330:	2200      	movs	r2, #0
 800a332:	2104      	movs	r1, #4
 800a334:	f7ff ff94 	bl	800a260 <std>
 800a338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a33c:	2201      	movs	r2, #1
 800a33e:	2109      	movs	r1, #9
 800a340:	f7ff ff8e 	bl	800a260 <std>
 800a344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a348:	2202      	movs	r2, #2
 800a34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a34e:	2112      	movs	r1, #18
 800a350:	f7ff bf86 	b.w	800a260 <std>
 800a354:	240006a4 	.word	0x240006a4
 800a358:	2400056c 	.word	0x2400056c
 800a35c:	0800a2cd 	.word	0x0800a2cd

0800a360 <__sfp_lock_acquire>:
 800a360:	4801      	ldr	r0, [pc, #4]	@ (800a368 <__sfp_lock_acquire+0x8>)
 800a362:	f000 b920 	b.w	800a5a6 <__retarget_lock_acquire_recursive>
 800a366:	bf00      	nop
 800a368:	240006ad 	.word	0x240006ad

0800a36c <__sfp_lock_release>:
 800a36c:	4801      	ldr	r0, [pc, #4]	@ (800a374 <__sfp_lock_release+0x8>)
 800a36e:	f000 b91b 	b.w	800a5a8 <__retarget_lock_release_recursive>
 800a372:	bf00      	nop
 800a374:	240006ad 	.word	0x240006ad

0800a378 <__sinit>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	4604      	mov	r4, r0
 800a37c:	f7ff fff0 	bl	800a360 <__sfp_lock_acquire>
 800a380:	6a23      	ldr	r3, [r4, #32]
 800a382:	b11b      	cbz	r3, 800a38c <__sinit+0x14>
 800a384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a388:	f7ff bff0 	b.w	800a36c <__sfp_lock_release>
 800a38c:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <__sinit+0x28>)
 800a38e:	6223      	str	r3, [r4, #32]
 800a390:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <__sinit+0x2c>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1f5      	bne.n	800a384 <__sinit+0xc>
 800a398:	f7ff ffc4 	bl	800a324 <global_stdio_init.part.0>
 800a39c:	e7f2      	b.n	800a384 <__sinit+0xc>
 800a39e:	bf00      	nop
 800a3a0:	0800a2e5 	.word	0x0800a2e5
 800a3a4:	240006a4 	.word	0x240006a4

0800a3a8 <_fwalk_sglue>:
 800a3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	4688      	mov	r8, r1
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	2600      	movs	r6, #0
 800a3b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3b8:	f1b9 0901 	subs.w	r9, r9, #1
 800a3bc:	d505      	bpl.n	800a3ca <_fwalk_sglue+0x22>
 800a3be:	6824      	ldr	r4, [r4, #0]
 800a3c0:	2c00      	cmp	r4, #0
 800a3c2:	d1f7      	bne.n	800a3b4 <_fwalk_sglue+0xc>
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d907      	bls.n	800a3e0 <_fwalk_sglue+0x38>
 800a3d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	d003      	beq.n	800a3e0 <_fwalk_sglue+0x38>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c0      	blx	r8
 800a3de:	4306      	orrs	r6, r0
 800a3e0:	3568      	adds	r5, #104	@ 0x68
 800a3e2:	e7e9      	b.n	800a3b8 <_fwalk_sglue+0x10>

0800a3e4 <siprintf>:
 800a3e4:	b40e      	push	{r1, r2, r3}
 800a3e6:	b500      	push	{lr}
 800a3e8:	b09c      	sub	sp, #112	@ 0x70
 800a3ea:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3ec:	9002      	str	r0, [sp, #8]
 800a3ee:	9006      	str	r0, [sp, #24]
 800a3f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3f4:	4809      	ldr	r0, [pc, #36]	@ (800a41c <siprintf+0x38>)
 800a3f6:	9107      	str	r1, [sp, #28]
 800a3f8:	9104      	str	r1, [sp, #16]
 800a3fa:	4909      	ldr	r1, [pc, #36]	@ (800a420 <siprintf+0x3c>)
 800a3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a400:	9105      	str	r1, [sp, #20]
 800a402:	6800      	ldr	r0, [r0, #0]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	a902      	add	r1, sp, #8
 800a408:	f002 faf2 	bl	800c9f0 <_svfiprintf_r>
 800a40c:	9b02      	ldr	r3, [sp, #8]
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
 800a412:	b01c      	add	sp, #112	@ 0x70
 800a414:	f85d eb04 	ldr.w	lr, [sp], #4
 800a418:	b003      	add	sp, #12
 800a41a:	4770      	bx	lr
 800a41c:	24000020 	.word	0x24000020
 800a420:	ffff0208 	.word	0xffff0208

0800a424 <__sread>:
 800a424:	b510      	push	{r4, lr}
 800a426:	460c      	mov	r4, r1
 800a428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a42c:	f000 f86c 	bl	800a508 <_read_r>
 800a430:	2800      	cmp	r0, #0
 800a432:	bfab      	itete	ge
 800a434:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a436:	89a3      	ldrhlt	r3, [r4, #12]
 800a438:	181b      	addge	r3, r3, r0
 800a43a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a43e:	bfac      	ite	ge
 800a440:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a442:	81a3      	strhlt	r3, [r4, #12]
 800a444:	bd10      	pop	{r4, pc}

0800a446 <__swrite>:
 800a446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44a:	461f      	mov	r7, r3
 800a44c:	898b      	ldrh	r3, [r1, #12]
 800a44e:	05db      	lsls	r3, r3, #23
 800a450:	4605      	mov	r5, r0
 800a452:	460c      	mov	r4, r1
 800a454:	4616      	mov	r6, r2
 800a456:	d505      	bpl.n	800a464 <__swrite+0x1e>
 800a458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a45c:	2302      	movs	r3, #2
 800a45e:	2200      	movs	r2, #0
 800a460:	f000 f840 	bl	800a4e4 <_lseek_r>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a46a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	4632      	mov	r2, r6
 800a472:	463b      	mov	r3, r7
 800a474:	4628      	mov	r0, r5
 800a476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a47a:	f000 b857 	b.w	800a52c <_write_r>

0800a47e <__sseek>:
 800a47e:	b510      	push	{r4, lr}
 800a480:	460c      	mov	r4, r1
 800a482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a486:	f000 f82d 	bl	800a4e4 <_lseek_r>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	bf15      	itete	ne
 800a490:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a49a:	81a3      	strheq	r3, [r4, #12]
 800a49c:	bf18      	it	ne
 800a49e:	81a3      	strhne	r3, [r4, #12]
 800a4a0:	bd10      	pop	{r4, pc}

0800a4a2 <__sclose>:
 800a4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a6:	f000 b80d 	b.w	800a4c4 <_close_r>

0800a4aa <memset>:
 800a4aa:	4402      	add	r2, r0
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d100      	bne.n	800a4b4 <memset+0xa>
 800a4b2:	4770      	bx	lr
 800a4b4:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b8:	e7f9      	b.n	800a4ae <memset+0x4>
	...

0800a4bc <_localeconv_r>:
 800a4bc:	4800      	ldr	r0, [pc, #0]	@ (800a4c0 <_localeconv_r+0x4>)
 800a4be:	4770      	bx	lr
 800a4c0:	24000160 	.word	0x24000160

0800a4c4 <_close_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d06      	ldr	r5, [pc, #24]	@ (800a4e0 <_close_r+0x1c>)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	f7f8 fae0 	bl	8002a94 <_close>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_close_r+0x1a>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_close_r+0x1a>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	240006a8 	.word	0x240006a8

0800a4e4 <_lseek_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d07      	ldr	r5, [pc, #28]	@ (800a504 <_lseek_r+0x20>)
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f7f8 faf5 	bl	8002ae2 <_lseek>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_lseek_r+0x1e>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_lseek_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	240006a8 	.word	0x240006a8

0800a508 <_read_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	@ (800a528 <_read_r+0x20>)
 800a50c:	4604      	mov	r4, r0
 800a50e:	4608      	mov	r0, r1
 800a510:	4611      	mov	r1, r2
 800a512:	2200      	movs	r2, #0
 800a514:	602a      	str	r2, [r5, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	f7f8 fa9f 	bl	8002a5a <_read>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_read_r+0x1e>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_read_r+0x1e>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	240006a8 	.word	0x240006a8

0800a52c <_write_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d07      	ldr	r5, [pc, #28]	@ (800a54c <_write_r+0x20>)
 800a530:	4604      	mov	r4, r0
 800a532:	4608      	mov	r0, r1
 800a534:	4611      	mov	r1, r2
 800a536:	2200      	movs	r2, #0
 800a538:	602a      	str	r2, [r5, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	f7f7 fd00 	bl	8001f40 <_write>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_write_r+0x1e>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_write_r+0x1e>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	240006a8 	.word	0x240006a8

0800a550 <__errno>:
 800a550:	4b01      	ldr	r3, [pc, #4]	@ (800a558 <__errno+0x8>)
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	24000020 	.word	0x24000020

0800a55c <__libc_init_array>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	4d0d      	ldr	r5, [pc, #52]	@ (800a594 <__libc_init_array+0x38>)
 800a560:	4c0d      	ldr	r4, [pc, #52]	@ (800a598 <__libc_init_array+0x3c>)
 800a562:	1b64      	subs	r4, r4, r5
 800a564:	10a4      	asrs	r4, r4, #2
 800a566:	2600      	movs	r6, #0
 800a568:	42a6      	cmp	r6, r4
 800a56a:	d109      	bne.n	800a580 <__libc_init_array+0x24>
 800a56c:	4d0b      	ldr	r5, [pc, #44]	@ (800a59c <__libc_init_array+0x40>)
 800a56e:	4c0c      	ldr	r4, [pc, #48]	@ (800a5a0 <__libc_init_array+0x44>)
 800a570:	f004 f83a 	bl	800e5e8 <_init>
 800a574:	1b64      	subs	r4, r4, r5
 800a576:	10a4      	asrs	r4, r4, #2
 800a578:	2600      	movs	r6, #0
 800a57a:	42a6      	cmp	r6, r4
 800a57c:	d105      	bne.n	800a58a <__libc_init_array+0x2e>
 800a57e:	bd70      	pop	{r4, r5, r6, pc}
 800a580:	f855 3b04 	ldr.w	r3, [r5], #4
 800a584:	4798      	blx	r3
 800a586:	3601      	adds	r6, #1
 800a588:	e7ee      	b.n	800a568 <__libc_init_array+0xc>
 800a58a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a58e:	4798      	blx	r3
 800a590:	3601      	adds	r6, #1
 800a592:	e7f2      	b.n	800a57a <__libc_init_array+0x1e>
 800a594:	08010360 	.word	0x08010360
 800a598:	08010360 	.word	0x08010360
 800a59c:	08010360 	.word	0x08010360
 800a5a0:	08010364 	.word	0x08010364

0800a5a4 <__retarget_lock_init_recursive>:
 800a5a4:	4770      	bx	lr

0800a5a6 <__retarget_lock_acquire_recursive>:
 800a5a6:	4770      	bx	lr

0800a5a8 <__retarget_lock_release_recursive>:
 800a5a8:	4770      	bx	lr
	...

0800a5ac <nanf>:
 800a5ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a5b4 <nanf+0x8>
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	7fc00000 	.word	0x7fc00000

0800a5b8 <quorem>:
 800a5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	6903      	ldr	r3, [r0, #16]
 800a5be:	690c      	ldr	r4, [r1, #16]
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	db7e      	blt.n	800a6c4 <quorem+0x10c>
 800a5c6:	3c01      	subs	r4, #1
 800a5c8:	f101 0814 	add.w	r8, r1, #20
 800a5cc:	00a3      	lsls	r3, r4, #2
 800a5ce:	f100 0514 	add.w	r5, r0, #20
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5ee:	d32e      	bcc.n	800a64e <quorem+0x96>
 800a5f0:	f04f 0a00 	mov.w	sl, #0
 800a5f4:	46c4      	mov	ip, r8
 800a5f6:	46ae      	mov	lr, r5
 800a5f8:	46d3      	mov	fp, sl
 800a5fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5fe:	b298      	uxth	r0, r3
 800a600:	fb06 a000 	mla	r0, r6, r0, sl
 800a604:	0c02      	lsrs	r2, r0, #16
 800a606:	0c1b      	lsrs	r3, r3, #16
 800a608:	fb06 2303 	mla	r3, r6, r3, r2
 800a60c:	f8de 2000 	ldr.w	r2, [lr]
 800a610:	b280      	uxth	r0, r0
 800a612:	b292      	uxth	r2, r2
 800a614:	1a12      	subs	r2, r2, r0
 800a616:	445a      	add	r2, fp
 800a618:	f8de 0000 	ldr.w	r0, [lr]
 800a61c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a620:	b29b      	uxth	r3, r3
 800a622:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a626:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a62a:	b292      	uxth	r2, r2
 800a62c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a630:	45e1      	cmp	r9, ip
 800a632:	f84e 2b04 	str.w	r2, [lr], #4
 800a636:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a63a:	d2de      	bcs.n	800a5fa <quorem+0x42>
 800a63c:	9b00      	ldr	r3, [sp, #0]
 800a63e:	58eb      	ldr	r3, [r5, r3]
 800a640:	b92b      	cbnz	r3, 800a64e <quorem+0x96>
 800a642:	9b01      	ldr	r3, [sp, #4]
 800a644:	3b04      	subs	r3, #4
 800a646:	429d      	cmp	r5, r3
 800a648:	461a      	mov	r2, r3
 800a64a:	d32f      	bcc.n	800a6ac <quorem+0xf4>
 800a64c:	613c      	str	r4, [r7, #16]
 800a64e:	4638      	mov	r0, r7
 800a650:	f001 f954 	bl	800b8fc <__mcmp>
 800a654:	2800      	cmp	r0, #0
 800a656:	db25      	blt.n	800a6a4 <quorem+0xec>
 800a658:	4629      	mov	r1, r5
 800a65a:	2000      	movs	r0, #0
 800a65c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a660:	f8d1 c000 	ldr.w	ip, [r1]
 800a664:	fa1f fe82 	uxth.w	lr, r2
 800a668:	fa1f f38c 	uxth.w	r3, ip
 800a66c:	eba3 030e 	sub.w	r3, r3, lr
 800a670:	4403      	add	r3, r0
 800a672:	0c12      	lsrs	r2, r2, #16
 800a674:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a678:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a682:	45c1      	cmp	r9, r8
 800a684:	f841 3b04 	str.w	r3, [r1], #4
 800a688:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a68c:	d2e6      	bcs.n	800a65c <quorem+0xa4>
 800a68e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a696:	b922      	cbnz	r2, 800a6a2 <quorem+0xea>
 800a698:	3b04      	subs	r3, #4
 800a69a:	429d      	cmp	r5, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	d30b      	bcc.n	800a6b8 <quorem+0x100>
 800a6a0:	613c      	str	r4, [r7, #16]
 800a6a2:	3601      	adds	r6, #1
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	b003      	add	sp, #12
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	6812      	ldr	r2, [r2, #0]
 800a6ae:	3b04      	subs	r3, #4
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	d1cb      	bne.n	800a64c <quorem+0x94>
 800a6b4:	3c01      	subs	r4, #1
 800a6b6:	e7c6      	b.n	800a646 <quorem+0x8e>
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	3b04      	subs	r3, #4
 800a6bc:	2a00      	cmp	r2, #0
 800a6be:	d1ef      	bne.n	800a6a0 <quorem+0xe8>
 800a6c0:	3c01      	subs	r4, #1
 800a6c2:	e7ea      	b.n	800a69a <quorem+0xe2>
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	e7ee      	b.n	800a6a6 <quorem+0xee>

0800a6c8 <_dtoa_r>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	ed2d 8b02 	vpush	{d8}
 800a6d0:	69c7      	ldr	r7, [r0, #28]
 800a6d2:	b091      	sub	sp, #68	@ 0x44
 800a6d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6d8:	ec55 4b10 	vmov	r4, r5, d0
 800a6dc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a6de:	9107      	str	r1, [sp, #28]
 800a6e0:	4681      	mov	r9, r0
 800a6e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6e4:	930d      	str	r3, [sp, #52]	@ 0x34
 800a6e6:	b97f      	cbnz	r7, 800a708 <_dtoa_r+0x40>
 800a6e8:	2010      	movs	r0, #16
 800a6ea:	f000 fd8d 	bl	800b208 <malloc>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	f8c9 001c 	str.w	r0, [r9, #28]
 800a6f4:	b920      	cbnz	r0, 800a700 <_dtoa_r+0x38>
 800a6f6:	4ba0      	ldr	r3, [pc, #640]	@ (800a978 <_dtoa_r+0x2b0>)
 800a6f8:	21ef      	movs	r1, #239	@ 0xef
 800a6fa:	48a0      	ldr	r0, [pc, #640]	@ (800a97c <_dtoa_r+0x2b4>)
 800a6fc:	f002 fb74 	bl	800cde8 <__assert_func>
 800a700:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a704:	6007      	str	r7, [r0, #0]
 800a706:	60c7      	str	r7, [r0, #12]
 800a708:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a70c:	6819      	ldr	r1, [r3, #0]
 800a70e:	b159      	cbz	r1, 800a728 <_dtoa_r+0x60>
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	604a      	str	r2, [r1, #4]
 800a714:	2301      	movs	r3, #1
 800a716:	4093      	lsls	r3, r2
 800a718:	608b      	str	r3, [r1, #8]
 800a71a:	4648      	mov	r0, r9
 800a71c:	f000 fe6a 	bl	800b3f4 <_Bfree>
 800a720:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a724:	2200      	movs	r2, #0
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	1e2b      	subs	r3, r5, #0
 800a72a:	bfbb      	ittet	lt
 800a72c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a730:	9303      	strlt	r3, [sp, #12]
 800a732:	2300      	movge	r3, #0
 800a734:	2201      	movlt	r2, #1
 800a736:	bfac      	ite	ge
 800a738:	6033      	strge	r3, [r6, #0]
 800a73a:	6032      	strlt	r2, [r6, #0]
 800a73c:	4b90      	ldr	r3, [pc, #576]	@ (800a980 <_dtoa_r+0x2b8>)
 800a73e:	9e03      	ldr	r6, [sp, #12]
 800a740:	43b3      	bics	r3, r6
 800a742:	d110      	bne.n	800a766 <_dtoa_r+0x9e>
 800a744:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a746:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a750:	4323      	orrs	r3, r4
 800a752:	f000 84de 	beq.w	800b112 <_dtoa_r+0xa4a>
 800a756:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a758:	4f8a      	ldr	r7, [pc, #552]	@ (800a984 <_dtoa_r+0x2bc>)
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 84e0 	beq.w	800b120 <_dtoa_r+0xa58>
 800a760:	1cfb      	adds	r3, r7, #3
 800a762:	f000 bcdb 	b.w	800b11c <_dtoa_r+0xa54>
 800a766:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a76a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a772:	d10a      	bne.n	800a78a <_dtoa_r+0xc2>
 800a774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a776:	2301      	movs	r3, #1
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a77c:	b113      	cbz	r3, 800a784 <_dtoa_r+0xbc>
 800a77e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a780:	4b81      	ldr	r3, [pc, #516]	@ (800a988 <_dtoa_r+0x2c0>)
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	4f81      	ldr	r7, [pc, #516]	@ (800a98c <_dtoa_r+0x2c4>)
 800a786:	f000 bccb 	b.w	800b120 <_dtoa_r+0xa58>
 800a78a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a78c:	a90f      	add	r1, sp, #60	@ 0x3c
 800a78e:	4648      	mov	r0, r9
 800a790:	eeb0 0b48 	vmov.f64	d0, d8
 800a794:	f001 f9d2 	bl	800bb3c <__d2b>
 800a798:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a79c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a79e:	9001      	str	r0, [sp, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d045      	beq.n	800a830 <_dtoa_r+0x168>
 800a7a4:	eeb0 7b48 	vmov.f64	d7, d8
 800a7a8:	ee18 1a90 	vmov	r1, s17
 800a7ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a7b0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a7b4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a7b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a7bc:	2500      	movs	r5, #0
 800a7be:	ee07 1a90 	vmov	s15, r1
 800a7c2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a7c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a960 <_dtoa_r+0x298>
 800a7ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a7ce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a968 <_dtoa_r+0x2a0>
 800a7d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a7d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a970 <_dtoa_r+0x2a8>
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a7e2:	eeb0 7b46 	vmov.f64	d7, d6
 800a7e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a7ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a7ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	ee16 8a90 	vmov	r8, s13
 800a7fa:	d508      	bpl.n	800a80e <_dtoa_r+0x146>
 800a7fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a800:	eeb4 6b47 	vcmp.f64	d6, d7
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	bf18      	it	ne
 800a80a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a80e:	f1b8 0f16 	cmp.w	r8, #22
 800a812:	d82b      	bhi.n	800a86c <_dtoa_r+0x1a4>
 800a814:	495e      	ldr	r1, [pc, #376]	@ (800a990 <_dtoa_r+0x2c8>)
 800a816:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a81a:	ed91 7b00 	vldr	d7, [r1]
 800a81e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a826:	d501      	bpl.n	800a82c <_dtoa_r+0x164>
 800a828:	f108 38ff 	add.w	r8, r8, #4294967295
 800a82c:	2100      	movs	r1, #0
 800a82e:	e01e      	b.n	800a86e <_dtoa_r+0x1a6>
 800a830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a832:	4413      	add	r3, r2
 800a834:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a838:	2920      	cmp	r1, #32
 800a83a:	bfc1      	itttt	gt
 800a83c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a840:	408e      	lslgt	r6, r1
 800a842:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a846:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a84a:	bfd6      	itet	le
 800a84c:	f1c1 0120 	rsble	r1, r1, #32
 800a850:	4331      	orrgt	r1, r6
 800a852:	fa04 f101 	lslle.w	r1, r4, r1
 800a856:	ee07 1a90 	vmov	s15, r1
 800a85a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a85e:	3b01      	subs	r3, #1
 800a860:	ee17 1a90 	vmov	r1, s15
 800a864:	2501      	movs	r5, #1
 800a866:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a86a:	e7a8      	b.n	800a7be <_dtoa_r+0xf6>
 800a86c:	2101      	movs	r1, #1
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	1e53      	subs	r3, r2, #1
 800a872:	9306      	str	r3, [sp, #24]
 800a874:	bf45      	ittet	mi
 800a876:	f1c2 0301 	rsbmi	r3, r2, #1
 800a87a:	9305      	strmi	r3, [sp, #20]
 800a87c:	2300      	movpl	r3, #0
 800a87e:	2300      	movmi	r3, #0
 800a880:	bf4c      	ite	mi
 800a882:	9306      	strmi	r3, [sp, #24]
 800a884:	9305      	strpl	r3, [sp, #20]
 800a886:	f1b8 0f00 	cmp.w	r8, #0
 800a88a:	910c      	str	r1, [sp, #48]	@ 0x30
 800a88c:	db18      	blt.n	800a8c0 <_dtoa_r+0x1f8>
 800a88e:	9b06      	ldr	r3, [sp, #24]
 800a890:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a894:	4443      	add	r3, r8
 800a896:	9306      	str	r3, [sp, #24]
 800a898:	2300      	movs	r3, #0
 800a89a:	9a07      	ldr	r2, [sp, #28]
 800a89c:	2a09      	cmp	r2, #9
 800a89e:	d849      	bhi.n	800a934 <_dtoa_r+0x26c>
 800a8a0:	2a05      	cmp	r2, #5
 800a8a2:	bfc4      	itt	gt
 800a8a4:	3a04      	subgt	r2, #4
 800a8a6:	9207      	strgt	r2, [sp, #28]
 800a8a8:	9a07      	ldr	r2, [sp, #28]
 800a8aa:	f1a2 0202 	sub.w	r2, r2, #2
 800a8ae:	bfcc      	ite	gt
 800a8b0:	2400      	movgt	r4, #0
 800a8b2:	2401      	movle	r4, #1
 800a8b4:	2a03      	cmp	r2, #3
 800a8b6:	d848      	bhi.n	800a94a <_dtoa_r+0x282>
 800a8b8:	e8df f002 	tbb	[pc, r2]
 800a8bc:	3a2c2e0b 	.word	0x3a2c2e0b
 800a8c0:	9b05      	ldr	r3, [sp, #20]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	eba3 0308 	sub.w	r3, r3, r8
 800a8c8:	9305      	str	r3, [sp, #20]
 800a8ca:	920a      	str	r2, [sp, #40]	@ 0x28
 800a8cc:	f1c8 0300 	rsb	r3, r8, #0
 800a8d0:	e7e3      	b.n	800a89a <_dtoa_r+0x1d2>
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	9208      	str	r2, [sp, #32]
 800a8d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	dc39      	bgt.n	800a950 <_dtoa_r+0x288>
 800a8dc:	f04f 0b01 	mov.w	fp, #1
 800a8e0:	46da      	mov	sl, fp
 800a8e2:	465a      	mov	r2, fp
 800a8e4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a8e8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	2004      	movs	r0, #4
 800a8f0:	f100 0614 	add.w	r6, r0, #20
 800a8f4:	4296      	cmp	r6, r2
 800a8f6:	d930      	bls.n	800a95a <_dtoa_r+0x292>
 800a8f8:	6079      	str	r1, [r7, #4]
 800a8fa:	4648      	mov	r0, r9
 800a8fc:	9304      	str	r3, [sp, #16]
 800a8fe:	f000 fd39 	bl	800b374 <_Balloc>
 800a902:	9b04      	ldr	r3, [sp, #16]
 800a904:	4607      	mov	r7, r0
 800a906:	2800      	cmp	r0, #0
 800a908:	d146      	bne.n	800a998 <_dtoa_r+0x2d0>
 800a90a:	4b22      	ldr	r3, [pc, #136]	@ (800a994 <_dtoa_r+0x2cc>)
 800a90c:	4602      	mov	r2, r0
 800a90e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a912:	e6f2      	b.n	800a6fa <_dtoa_r+0x32>
 800a914:	2201      	movs	r2, #1
 800a916:	e7dd      	b.n	800a8d4 <_dtoa_r+0x20c>
 800a918:	2200      	movs	r2, #0
 800a91a:	9208      	str	r2, [sp, #32]
 800a91c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a91e:	eb08 0b02 	add.w	fp, r8, r2
 800a922:	f10b 0a01 	add.w	sl, fp, #1
 800a926:	4652      	mov	r2, sl
 800a928:	2a01      	cmp	r2, #1
 800a92a:	bfb8      	it	lt
 800a92c:	2201      	movlt	r2, #1
 800a92e:	e7db      	b.n	800a8e8 <_dtoa_r+0x220>
 800a930:	2201      	movs	r2, #1
 800a932:	e7f2      	b.n	800a91a <_dtoa_r+0x252>
 800a934:	2401      	movs	r4, #1
 800a936:	2200      	movs	r2, #0
 800a938:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a93c:	f04f 3bff 	mov.w	fp, #4294967295
 800a940:	2100      	movs	r1, #0
 800a942:	46da      	mov	sl, fp
 800a944:	2212      	movs	r2, #18
 800a946:	9109      	str	r1, [sp, #36]	@ 0x24
 800a948:	e7ce      	b.n	800a8e8 <_dtoa_r+0x220>
 800a94a:	2201      	movs	r2, #1
 800a94c:	9208      	str	r2, [sp, #32]
 800a94e:	e7f5      	b.n	800a93c <_dtoa_r+0x274>
 800a950:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a954:	46da      	mov	sl, fp
 800a956:	465a      	mov	r2, fp
 800a958:	e7c6      	b.n	800a8e8 <_dtoa_r+0x220>
 800a95a:	3101      	adds	r1, #1
 800a95c:	0040      	lsls	r0, r0, #1
 800a95e:	e7c7      	b.n	800a8f0 <_dtoa_r+0x228>
 800a960:	636f4361 	.word	0x636f4361
 800a964:	3fd287a7 	.word	0x3fd287a7
 800a968:	8b60c8b3 	.word	0x8b60c8b3
 800a96c:	3fc68a28 	.word	0x3fc68a28
 800a970:	509f79fb 	.word	0x509f79fb
 800a974:	3fd34413 	.word	0x3fd34413
 800a978:	0800e67e 	.word	0x0800e67e
 800a97c:	0800e695 	.word	0x0800e695
 800a980:	7ff00000 	.word	0x7ff00000
 800a984:	0800e67a 	.word	0x0800e67a
 800a988:	0800e649 	.word	0x0800e649
 800a98c:	0800e648 	.word	0x0800e648
 800a990:	0800e790 	.word	0x0800e790
 800a994:	0800e6ed 	.word	0x0800e6ed
 800a998:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a99c:	f1ba 0f0e 	cmp.w	sl, #14
 800a9a0:	6010      	str	r0, [r2, #0]
 800a9a2:	d86f      	bhi.n	800aa84 <_dtoa_r+0x3bc>
 800a9a4:	2c00      	cmp	r4, #0
 800a9a6:	d06d      	beq.n	800aa84 <_dtoa_r+0x3bc>
 800a9a8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ac:	f340 80c2 	ble.w	800ab34 <_dtoa_r+0x46c>
 800a9b0:	4aca      	ldr	r2, [pc, #808]	@ (800acdc <_dtoa_r+0x614>)
 800a9b2:	f008 010f 	and.w	r1, r8, #15
 800a9b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a9ba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a9be:	ed92 7b00 	vldr	d7, [r2]
 800a9c2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a9c6:	f000 80a9 	beq.w	800ab1c <_dtoa_r+0x454>
 800a9ca:	4ac5      	ldr	r2, [pc, #788]	@ (800ace0 <_dtoa_r+0x618>)
 800a9cc:	ed92 6b08 	vldr	d6, [r2, #32]
 800a9d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a9d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a9d8:	f001 010f 	and.w	r1, r1, #15
 800a9dc:	2203      	movs	r2, #3
 800a9de:	48c0      	ldr	r0, [pc, #768]	@ (800ace0 <_dtoa_r+0x618>)
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	f040 809d 	bne.w	800ab20 <_dtoa_r+0x458>
 800a9e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a9ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a9ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a9f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	f000 80c1 	beq.w	800ab80 <_dtoa_r+0x4b8>
 800a9fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800aa02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0a:	f140 80b9 	bpl.w	800ab80 <_dtoa_r+0x4b8>
 800aa0e:	f1ba 0f00 	cmp.w	sl, #0
 800aa12:	f000 80b5 	beq.w	800ab80 <_dtoa_r+0x4b8>
 800aa16:	f1bb 0f00 	cmp.w	fp, #0
 800aa1a:	dd31      	ble.n	800aa80 <_dtoa_r+0x3b8>
 800aa1c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800aa20:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa28:	f108 31ff 	add.w	r1, r8, #4294967295
 800aa2c:	9104      	str	r1, [sp, #16]
 800aa2e:	3201      	adds	r2, #1
 800aa30:	465c      	mov	r4, fp
 800aa32:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aa36:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800aa3a:	ee07 2a90 	vmov	s15, r2
 800aa3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aa42:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aa46:	ee15 2a90 	vmov	r2, s11
 800aa4a:	ec51 0b15 	vmov	r0, r1, d5
 800aa4e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aa52:	2c00      	cmp	r4, #0
 800aa54:	f040 8098 	bne.w	800ab88 <_dtoa_r+0x4c0>
 800aa58:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aa5c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aa60:	ec41 0b17 	vmov	d7, r0, r1
 800aa64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa6c:	f300 8261 	bgt.w	800af32 <_dtoa_r+0x86a>
 800aa70:	eeb1 7b47 	vneg.f64	d7, d7
 800aa74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa7c:	f100 80f5 	bmi.w	800ac6a <_dtoa_r+0x5a2>
 800aa80:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa86:	2a00      	cmp	r2, #0
 800aa88:	f2c0 812c 	blt.w	800ace4 <_dtoa_r+0x61c>
 800aa8c:	f1b8 0f0e 	cmp.w	r8, #14
 800aa90:	f300 8128 	bgt.w	800ace4 <_dtoa_r+0x61c>
 800aa94:	4b91      	ldr	r3, [pc, #580]	@ (800acdc <_dtoa_r+0x614>)
 800aa96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa9a:	ed93 6b00 	vldr	d6, [r3]
 800aa9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da03      	bge.n	800aaac <_dtoa_r+0x3e4>
 800aaa4:	f1ba 0f00 	cmp.w	sl, #0
 800aaa8:	f340 80d2 	ble.w	800ac50 <_dtoa_r+0x588>
 800aaac:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800aab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aab4:	463e      	mov	r6, r7
 800aab6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aaba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aabe:	ee15 3a10 	vmov	r3, s10
 800aac2:	3330      	adds	r3, #48	@ 0x30
 800aac4:	f806 3b01 	strb.w	r3, [r6], #1
 800aac8:	1bf3      	subs	r3, r6, r7
 800aaca:	459a      	cmp	sl, r3
 800aacc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aad0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aad4:	f040 80f8 	bne.w	800acc8 <_dtoa_r+0x600>
 800aad8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aadc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae4:	f300 80dd 	bgt.w	800aca2 <_dtoa_r+0x5da>
 800aae8:	eeb4 7b46 	vcmp.f64	d7, d6
 800aaec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf0:	d104      	bne.n	800aafc <_dtoa_r+0x434>
 800aaf2:	ee15 3a10 	vmov	r3, s10
 800aaf6:	07db      	lsls	r3, r3, #31
 800aaf8:	f100 80d3 	bmi.w	800aca2 <_dtoa_r+0x5da>
 800aafc:	9901      	ldr	r1, [sp, #4]
 800aafe:	4648      	mov	r0, r9
 800ab00:	f000 fc78 	bl	800b3f4 <_Bfree>
 800ab04:	2300      	movs	r3, #0
 800ab06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab08:	7033      	strb	r3, [r6, #0]
 800ab0a:	f108 0301 	add.w	r3, r8, #1
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 8304 	beq.w	800b120 <_dtoa_r+0xa58>
 800ab18:	601e      	str	r6, [r3, #0]
 800ab1a:	e301      	b.n	800b120 <_dtoa_r+0xa58>
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	e75e      	b.n	800a9de <_dtoa_r+0x316>
 800ab20:	07cc      	lsls	r4, r1, #31
 800ab22:	d504      	bpl.n	800ab2e <_dtoa_r+0x466>
 800ab24:	ed90 6b00 	vldr	d6, [r0]
 800ab28:	3201      	adds	r2, #1
 800ab2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab2e:	1049      	asrs	r1, r1, #1
 800ab30:	3008      	adds	r0, #8
 800ab32:	e755      	b.n	800a9e0 <_dtoa_r+0x318>
 800ab34:	d022      	beq.n	800ab7c <_dtoa_r+0x4b4>
 800ab36:	f1c8 0100 	rsb	r1, r8, #0
 800ab3a:	4a68      	ldr	r2, [pc, #416]	@ (800acdc <_dtoa_r+0x614>)
 800ab3c:	f001 000f 	and.w	r0, r1, #15
 800ab40:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ab44:	ed92 7b00 	vldr	d7, [r2]
 800ab48:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ab4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab50:	4863      	ldr	r0, [pc, #396]	@ (800ace0 <_dtoa_r+0x618>)
 800ab52:	1109      	asrs	r1, r1, #4
 800ab54:	2400      	movs	r4, #0
 800ab56:	2202      	movs	r2, #2
 800ab58:	b929      	cbnz	r1, 800ab66 <_dtoa_r+0x49e>
 800ab5a:	2c00      	cmp	r4, #0
 800ab5c:	f43f af49 	beq.w	800a9f2 <_dtoa_r+0x32a>
 800ab60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab64:	e745      	b.n	800a9f2 <_dtoa_r+0x32a>
 800ab66:	07ce      	lsls	r6, r1, #31
 800ab68:	d505      	bpl.n	800ab76 <_dtoa_r+0x4ae>
 800ab6a:	ed90 6b00 	vldr	d6, [r0]
 800ab6e:	3201      	adds	r2, #1
 800ab70:	2401      	movs	r4, #1
 800ab72:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab76:	1049      	asrs	r1, r1, #1
 800ab78:	3008      	adds	r0, #8
 800ab7a:	e7ed      	b.n	800ab58 <_dtoa_r+0x490>
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	e738      	b.n	800a9f2 <_dtoa_r+0x32a>
 800ab80:	f8cd 8010 	str.w	r8, [sp, #16]
 800ab84:	4654      	mov	r4, sl
 800ab86:	e754      	b.n	800aa32 <_dtoa_r+0x36a>
 800ab88:	4a54      	ldr	r2, [pc, #336]	@ (800acdc <_dtoa_r+0x614>)
 800ab8a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ab8e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ab92:	9a08      	ldr	r2, [sp, #32]
 800ab94:	ec41 0b17 	vmov	d7, r0, r1
 800ab98:	443c      	add	r4, r7
 800ab9a:	b34a      	cbz	r2, 800abf0 <_dtoa_r+0x528>
 800ab9c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800aba0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800aba4:	463e      	mov	r6, r7
 800aba6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800abaa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800abae:	ee35 7b47 	vsub.f64	d7, d5, d7
 800abb2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800abb6:	ee14 2a90 	vmov	r2, s9
 800abba:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800abbe:	3230      	adds	r2, #48	@ 0x30
 800abc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800abc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abcc:	f806 2b01 	strb.w	r2, [r6], #1
 800abd0:	d438      	bmi.n	800ac44 <_dtoa_r+0x57c>
 800abd2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800abd6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800abda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abde:	d462      	bmi.n	800aca6 <_dtoa_r+0x5de>
 800abe0:	42a6      	cmp	r6, r4
 800abe2:	f43f af4d 	beq.w	800aa80 <_dtoa_r+0x3b8>
 800abe6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800abea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800abee:	e7e0      	b.n	800abb2 <_dtoa_r+0x4ea>
 800abf0:	4621      	mov	r1, r4
 800abf2:	463e      	mov	r6, r7
 800abf4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800abf8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800abfc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ac00:	ee14 2a90 	vmov	r2, s9
 800ac04:	3230      	adds	r2, #48	@ 0x30
 800ac06:	f806 2b01 	strb.w	r2, [r6], #1
 800ac0a:	42a6      	cmp	r6, r4
 800ac0c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ac10:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ac14:	d119      	bne.n	800ac4a <_dtoa_r+0x582>
 800ac16:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ac1a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ac1e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ac22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac26:	dc3e      	bgt.n	800aca6 <_dtoa_r+0x5de>
 800ac28:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ac2c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ac30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac34:	f57f af24 	bpl.w	800aa80 <_dtoa_r+0x3b8>
 800ac38:	460e      	mov	r6, r1
 800ac3a:	3901      	subs	r1, #1
 800ac3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac40:	2b30      	cmp	r3, #48	@ 0x30
 800ac42:	d0f9      	beq.n	800ac38 <_dtoa_r+0x570>
 800ac44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ac48:	e758      	b.n	800aafc <_dtoa_r+0x434>
 800ac4a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ac4e:	e7d5      	b.n	800abfc <_dtoa_r+0x534>
 800ac50:	d10b      	bne.n	800ac6a <_dtoa_r+0x5a2>
 800ac52:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ac56:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac66:	f2c0 8161 	blt.w	800af2c <_dtoa_r+0x864>
 800ac6a:	2400      	movs	r4, #0
 800ac6c:	4625      	mov	r5, r4
 800ac6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac70:	43db      	mvns	r3, r3
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	463e      	mov	r6, r7
 800ac76:	f04f 0800 	mov.w	r8, #0
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4648      	mov	r0, r9
 800ac7e:	f000 fbb9 	bl	800b3f4 <_Bfree>
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	d0de      	beq.n	800ac44 <_dtoa_r+0x57c>
 800ac86:	f1b8 0f00 	cmp.w	r8, #0
 800ac8a:	d005      	beq.n	800ac98 <_dtoa_r+0x5d0>
 800ac8c:	45a8      	cmp	r8, r5
 800ac8e:	d003      	beq.n	800ac98 <_dtoa_r+0x5d0>
 800ac90:	4641      	mov	r1, r8
 800ac92:	4648      	mov	r0, r9
 800ac94:	f000 fbae 	bl	800b3f4 <_Bfree>
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4648      	mov	r0, r9
 800ac9c:	f000 fbaa 	bl	800b3f4 <_Bfree>
 800aca0:	e7d0      	b.n	800ac44 <_dtoa_r+0x57c>
 800aca2:	f8cd 8010 	str.w	r8, [sp, #16]
 800aca6:	4633      	mov	r3, r6
 800aca8:	461e      	mov	r6, r3
 800acaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acae:	2a39      	cmp	r2, #57	@ 0x39
 800acb0:	d106      	bne.n	800acc0 <_dtoa_r+0x5f8>
 800acb2:	429f      	cmp	r7, r3
 800acb4:	d1f8      	bne.n	800aca8 <_dtoa_r+0x5e0>
 800acb6:	9a04      	ldr	r2, [sp, #16]
 800acb8:	3201      	adds	r2, #1
 800acba:	9204      	str	r2, [sp, #16]
 800acbc:	2230      	movs	r2, #48	@ 0x30
 800acbe:	703a      	strb	r2, [r7, #0]
 800acc0:	781a      	ldrb	r2, [r3, #0]
 800acc2:	3201      	adds	r2, #1
 800acc4:	701a      	strb	r2, [r3, #0]
 800acc6:	e7bd      	b.n	800ac44 <_dtoa_r+0x57c>
 800acc8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800accc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800acd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd4:	f47f aeef 	bne.w	800aab6 <_dtoa_r+0x3ee>
 800acd8:	e710      	b.n	800aafc <_dtoa_r+0x434>
 800acda:	bf00      	nop
 800acdc:	0800e790 	.word	0x0800e790
 800ace0:	0800e768 	.word	0x0800e768
 800ace4:	9908      	ldr	r1, [sp, #32]
 800ace6:	2900      	cmp	r1, #0
 800ace8:	f000 80e3 	beq.w	800aeb2 <_dtoa_r+0x7ea>
 800acec:	9907      	ldr	r1, [sp, #28]
 800acee:	2901      	cmp	r1, #1
 800acf0:	f300 80c8 	bgt.w	800ae84 <_dtoa_r+0x7bc>
 800acf4:	2d00      	cmp	r5, #0
 800acf6:	f000 80c1 	beq.w	800ae7c <_dtoa_r+0x7b4>
 800acfa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800acfe:	9e05      	ldr	r6, [sp, #20]
 800ad00:	461c      	mov	r4, r3
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	9b05      	ldr	r3, [sp, #20]
 800ad06:	4413      	add	r3, r2
 800ad08:	9305      	str	r3, [sp, #20]
 800ad0a:	9b06      	ldr	r3, [sp, #24]
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4413      	add	r3, r2
 800ad10:	4648      	mov	r0, r9
 800ad12:	9306      	str	r3, [sp, #24]
 800ad14:	f000 fc6c 	bl	800b5f0 <__i2b>
 800ad18:	9b04      	ldr	r3, [sp, #16]
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	b166      	cbz	r6, 800ad38 <_dtoa_r+0x670>
 800ad1e:	9a06      	ldr	r2, [sp, #24]
 800ad20:	2a00      	cmp	r2, #0
 800ad22:	dd09      	ble.n	800ad38 <_dtoa_r+0x670>
 800ad24:	42b2      	cmp	r2, r6
 800ad26:	9905      	ldr	r1, [sp, #20]
 800ad28:	bfa8      	it	ge
 800ad2a:	4632      	movge	r2, r6
 800ad2c:	1a89      	subs	r1, r1, r2
 800ad2e:	9105      	str	r1, [sp, #20]
 800ad30:	9906      	ldr	r1, [sp, #24]
 800ad32:	1ab6      	subs	r6, r6, r2
 800ad34:	1a8a      	subs	r2, r1, r2
 800ad36:	9206      	str	r2, [sp, #24]
 800ad38:	b1fb      	cbz	r3, 800ad7a <_dtoa_r+0x6b2>
 800ad3a:	9a08      	ldr	r2, [sp, #32]
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	f000 80bc 	beq.w	800aeba <_dtoa_r+0x7f2>
 800ad42:	b19c      	cbz	r4, 800ad6c <_dtoa_r+0x6a4>
 800ad44:	4629      	mov	r1, r5
 800ad46:	4622      	mov	r2, r4
 800ad48:	4648      	mov	r0, r9
 800ad4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad4c:	f000 fd10 	bl	800b770 <__pow5mult>
 800ad50:	9a01      	ldr	r2, [sp, #4]
 800ad52:	4601      	mov	r1, r0
 800ad54:	4605      	mov	r5, r0
 800ad56:	4648      	mov	r0, r9
 800ad58:	f000 fc60 	bl	800b61c <__multiply>
 800ad5c:	9901      	ldr	r1, [sp, #4]
 800ad5e:	9004      	str	r0, [sp, #16]
 800ad60:	4648      	mov	r0, r9
 800ad62:	f000 fb47 	bl	800b3f4 <_Bfree>
 800ad66:	9a04      	ldr	r2, [sp, #16]
 800ad68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad6a:	9201      	str	r2, [sp, #4]
 800ad6c:	1b1a      	subs	r2, r3, r4
 800ad6e:	d004      	beq.n	800ad7a <_dtoa_r+0x6b2>
 800ad70:	9901      	ldr	r1, [sp, #4]
 800ad72:	4648      	mov	r0, r9
 800ad74:	f000 fcfc 	bl	800b770 <__pow5mult>
 800ad78:	9001      	str	r0, [sp, #4]
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	4648      	mov	r0, r9
 800ad7e:	f000 fc37 	bl	800b5f0 <__i2b>
 800ad82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad84:	4604      	mov	r4, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 81d0 	beq.w	800b12c <_dtoa_r+0xa64>
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	4601      	mov	r1, r0
 800ad90:	4648      	mov	r0, r9
 800ad92:	f000 fced 	bl	800b770 <__pow5mult>
 800ad96:	9b07      	ldr	r3, [sp, #28]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	f300 8095 	bgt.w	800aeca <_dtoa_r+0x802>
 800ada0:	9b02      	ldr	r3, [sp, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f040 808b 	bne.w	800aebe <_dtoa_r+0x7f6>
 800ada8:	9b03      	ldr	r3, [sp, #12]
 800adaa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800adae:	2a00      	cmp	r2, #0
 800adb0:	f040 8087 	bne.w	800aec2 <_dtoa_r+0x7fa>
 800adb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800adb8:	0d12      	lsrs	r2, r2, #20
 800adba:	0512      	lsls	r2, r2, #20
 800adbc:	2a00      	cmp	r2, #0
 800adbe:	f000 8082 	beq.w	800aec6 <_dtoa_r+0x7fe>
 800adc2:	9b05      	ldr	r3, [sp, #20]
 800adc4:	3301      	adds	r3, #1
 800adc6:	9305      	str	r3, [sp, #20]
 800adc8:	9b06      	ldr	r3, [sp, #24]
 800adca:	3301      	adds	r3, #1
 800adcc:	9306      	str	r3, [sp, #24]
 800adce:	2301      	movs	r3, #1
 800add0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800add2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 81af 	beq.w	800b138 <_dtoa_r+0xa70>
 800adda:	6922      	ldr	r2, [r4, #16]
 800addc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ade0:	6910      	ldr	r0, [r2, #16]
 800ade2:	f000 fbb9 	bl	800b558 <__hi0bits>
 800ade6:	f1c0 0020 	rsb	r0, r0, #32
 800adea:	9b06      	ldr	r3, [sp, #24]
 800adec:	4418      	add	r0, r3
 800adee:	f010 001f 	ands.w	r0, r0, #31
 800adf2:	d076      	beq.n	800aee2 <_dtoa_r+0x81a>
 800adf4:	f1c0 0220 	rsb	r2, r0, #32
 800adf8:	2a04      	cmp	r2, #4
 800adfa:	dd69      	ble.n	800aed0 <_dtoa_r+0x808>
 800adfc:	9b05      	ldr	r3, [sp, #20]
 800adfe:	f1c0 001c 	rsb	r0, r0, #28
 800ae02:	4403      	add	r3, r0
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	4406      	add	r6, r0
 800ae0a:	4403      	add	r3, r0
 800ae0c:	9306      	str	r3, [sp, #24]
 800ae0e:	9b05      	ldr	r3, [sp, #20]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dd05      	ble.n	800ae20 <_dtoa_r+0x758>
 800ae14:	9901      	ldr	r1, [sp, #4]
 800ae16:	461a      	mov	r2, r3
 800ae18:	4648      	mov	r0, r9
 800ae1a:	f000 fd03 	bl	800b824 <__lshift>
 800ae1e:	9001      	str	r0, [sp, #4]
 800ae20:	9b06      	ldr	r3, [sp, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dd05      	ble.n	800ae32 <_dtoa_r+0x76a>
 800ae26:	4621      	mov	r1, r4
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4648      	mov	r0, r9
 800ae2c:	f000 fcfa 	bl	800b824 <__lshift>
 800ae30:	4604      	mov	r4, r0
 800ae32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d056      	beq.n	800aee6 <_dtoa_r+0x81e>
 800ae38:	9801      	ldr	r0, [sp, #4]
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	f000 fd5e 	bl	800b8fc <__mcmp>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	da50      	bge.n	800aee6 <_dtoa_r+0x81e>
 800ae44:	f108 33ff 	add.w	r3, r8, #4294967295
 800ae48:	9304      	str	r3, [sp, #16]
 800ae4a:	9901      	ldr	r1, [sp, #4]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	220a      	movs	r2, #10
 800ae50:	4648      	mov	r0, r9
 800ae52:	f000 faf1 	bl	800b438 <__multadd>
 800ae56:	9b08      	ldr	r3, [sp, #32]
 800ae58:	9001      	str	r0, [sp, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f000 816e 	beq.w	800b13c <_dtoa_r+0xa74>
 800ae60:	4629      	mov	r1, r5
 800ae62:	2300      	movs	r3, #0
 800ae64:	220a      	movs	r2, #10
 800ae66:	4648      	mov	r0, r9
 800ae68:	f000 fae6 	bl	800b438 <__multadd>
 800ae6c:	f1bb 0f00 	cmp.w	fp, #0
 800ae70:	4605      	mov	r5, r0
 800ae72:	dc64      	bgt.n	800af3e <_dtoa_r+0x876>
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	dc3e      	bgt.n	800aef8 <_dtoa_r+0x830>
 800ae7a:	e060      	b.n	800af3e <_dtoa_r+0x876>
 800ae7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ae82:	e73c      	b.n	800acfe <_dtoa_r+0x636>
 800ae84:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ae88:	42a3      	cmp	r3, r4
 800ae8a:	bfbf      	itttt	lt
 800ae8c:	1ae2      	sublt	r2, r4, r3
 800ae8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ae90:	189b      	addlt	r3, r3, r2
 800ae92:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ae94:	bfae      	itee	ge
 800ae96:	1b1c      	subge	r4, r3, r4
 800ae98:	4623      	movlt	r3, r4
 800ae9a:	2400      	movlt	r4, #0
 800ae9c:	f1ba 0f00 	cmp.w	sl, #0
 800aea0:	bfb5      	itete	lt
 800aea2:	9a05      	ldrlt	r2, [sp, #20]
 800aea4:	9e05      	ldrge	r6, [sp, #20]
 800aea6:	eba2 060a 	sublt.w	r6, r2, sl
 800aeaa:	4652      	movge	r2, sl
 800aeac:	bfb8      	it	lt
 800aeae:	2200      	movlt	r2, #0
 800aeb0:	e727      	b.n	800ad02 <_dtoa_r+0x63a>
 800aeb2:	9e05      	ldr	r6, [sp, #20]
 800aeb4:	9d08      	ldr	r5, [sp, #32]
 800aeb6:	461c      	mov	r4, r3
 800aeb8:	e730      	b.n	800ad1c <_dtoa_r+0x654>
 800aeba:	461a      	mov	r2, r3
 800aebc:	e758      	b.n	800ad70 <_dtoa_r+0x6a8>
 800aebe:	2300      	movs	r3, #0
 800aec0:	e786      	b.n	800add0 <_dtoa_r+0x708>
 800aec2:	9b02      	ldr	r3, [sp, #8]
 800aec4:	e784      	b.n	800add0 <_dtoa_r+0x708>
 800aec6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aec8:	e783      	b.n	800add2 <_dtoa_r+0x70a>
 800aeca:	2300      	movs	r3, #0
 800aecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aece:	e784      	b.n	800adda <_dtoa_r+0x712>
 800aed0:	d09d      	beq.n	800ae0e <_dtoa_r+0x746>
 800aed2:	9b05      	ldr	r3, [sp, #20]
 800aed4:	321c      	adds	r2, #28
 800aed6:	4413      	add	r3, r2
 800aed8:	9305      	str	r3, [sp, #20]
 800aeda:	9b06      	ldr	r3, [sp, #24]
 800aedc:	4416      	add	r6, r2
 800aede:	4413      	add	r3, r2
 800aee0:	e794      	b.n	800ae0c <_dtoa_r+0x744>
 800aee2:	4602      	mov	r2, r0
 800aee4:	e7f5      	b.n	800aed2 <_dtoa_r+0x80a>
 800aee6:	f1ba 0f00 	cmp.w	sl, #0
 800aeea:	f8cd 8010 	str.w	r8, [sp, #16]
 800aeee:	46d3      	mov	fp, sl
 800aef0:	dc21      	bgt.n	800af36 <_dtoa_r+0x86e>
 800aef2:	9b07      	ldr	r3, [sp, #28]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	dd1e      	ble.n	800af36 <_dtoa_r+0x86e>
 800aef8:	f1bb 0f00 	cmp.w	fp, #0
 800aefc:	f47f aeb7 	bne.w	800ac6e <_dtoa_r+0x5a6>
 800af00:	4621      	mov	r1, r4
 800af02:	465b      	mov	r3, fp
 800af04:	2205      	movs	r2, #5
 800af06:	4648      	mov	r0, r9
 800af08:	f000 fa96 	bl	800b438 <__multadd>
 800af0c:	4601      	mov	r1, r0
 800af0e:	4604      	mov	r4, r0
 800af10:	9801      	ldr	r0, [sp, #4]
 800af12:	f000 fcf3 	bl	800b8fc <__mcmp>
 800af16:	2800      	cmp	r0, #0
 800af18:	f77f aea9 	ble.w	800ac6e <_dtoa_r+0x5a6>
 800af1c:	463e      	mov	r6, r7
 800af1e:	2331      	movs	r3, #49	@ 0x31
 800af20:	f806 3b01 	strb.w	r3, [r6], #1
 800af24:	9b04      	ldr	r3, [sp, #16]
 800af26:	3301      	adds	r3, #1
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	e6a4      	b.n	800ac76 <_dtoa_r+0x5ae>
 800af2c:	f8cd 8010 	str.w	r8, [sp, #16]
 800af30:	4654      	mov	r4, sl
 800af32:	4625      	mov	r5, r4
 800af34:	e7f2      	b.n	800af1c <_dtoa_r+0x854>
 800af36:	9b08      	ldr	r3, [sp, #32]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 8103 	beq.w	800b144 <_dtoa_r+0xa7c>
 800af3e:	2e00      	cmp	r6, #0
 800af40:	dd05      	ble.n	800af4e <_dtoa_r+0x886>
 800af42:	4629      	mov	r1, r5
 800af44:	4632      	mov	r2, r6
 800af46:	4648      	mov	r0, r9
 800af48:	f000 fc6c 	bl	800b824 <__lshift>
 800af4c:	4605      	mov	r5, r0
 800af4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d058      	beq.n	800b006 <_dtoa_r+0x93e>
 800af54:	6869      	ldr	r1, [r5, #4]
 800af56:	4648      	mov	r0, r9
 800af58:	f000 fa0c 	bl	800b374 <_Balloc>
 800af5c:	4606      	mov	r6, r0
 800af5e:	b928      	cbnz	r0, 800af6c <_dtoa_r+0x8a4>
 800af60:	4b82      	ldr	r3, [pc, #520]	@ (800b16c <_dtoa_r+0xaa4>)
 800af62:	4602      	mov	r2, r0
 800af64:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af68:	f7ff bbc7 	b.w	800a6fa <_dtoa_r+0x32>
 800af6c:	692a      	ldr	r2, [r5, #16]
 800af6e:	3202      	adds	r2, #2
 800af70:	0092      	lsls	r2, r2, #2
 800af72:	f105 010c 	add.w	r1, r5, #12
 800af76:	300c      	adds	r0, #12
 800af78:	f001 ff1e 	bl	800cdb8 <memcpy>
 800af7c:	2201      	movs	r2, #1
 800af7e:	4631      	mov	r1, r6
 800af80:	4648      	mov	r0, r9
 800af82:	f000 fc4f 	bl	800b824 <__lshift>
 800af86:	1c7b      	adds	r3, r7, #1
 800af88:	9305      	str	r3, [sp, #20]
 800af8a:	eb07 030b 	add.w	r3, r7, fp
 800af8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af90:	9b02      	ldr	r3, [sp, #8]
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	46a8      	mov	r8, r5
 800af98:	9308      	str	r3, [sp, #32]
 800af9a:	4605      	mov	r5, r0
 800af9c:	9b05      	ldr	r3, [sp, #20]
 800af9e:	9801      	ldr	r0, [sp, #4]
 800afa0:	4621      	mov	r1, r4
 800afa2:	f103 3bff 	add.w	fp, r3, #4294967295
 800afa6:	f7ff fb07 	bl	800a5b8 <quorem>
 800afaa:	4641      	mov	r1, r8
 800afac:	9002      	str	r0, [sp, #8]
 800afae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800afb2:	9801      	ldr	r0, [sp, #4]
 800afb4:	f000 fca2 	bl	800b8fc <__mcmp>
 800afb8:	462a      	mov	r2, r5
 800afba:	9006      	str	r0, [sp, #24]
 800afbc:	4621      	mov	r1, r4
 800afbe:	4648      	mov	r0, r9
 800afc0:	f000 fcb8 	bl	800b934 <__mdiff>
 800afc4:	68c2      	ldr	r2, [r0, #12]
 800afc6:	4606      	mov	r6, r0
 800afc8:	b9fa      	cbnz	r2, 800b00a <_dtoa_r+0x942>
 800afca:	4601      	mov	r1, r0
 800afcc:	9801      	ldr	r0, [sp, #4]
 800afce:	f000 fc95 	bl	800b8fc <__mcmp>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4631      	mov	r1, r6
 800afd6:	4648      	mov	r0, r9
 800afd8:	920a      	str	r2, [sp, #40]	@ 0x28
 800afda:	f000 fa0b 	bl	800b3f4 <_Bfree>
 800afde:	9b07      	ldr	r3, [sp, #28]
 800afe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afe2:	9e05      	ldr	r6, [sp, #20]
 800afe4:	ea43 0102 	orr.w	r1, r3, r2
 800afe8:	9b08      	ldr	r3, [sp, #32]
 800afea:	4319      	orrs	r1, r3
 800afec:	d10f      	bne.n	800b00e <_dtoa_r+0x946>
 800afee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aff2:	d028      	beq.n	800b046 <_dtoa_r+0x97e>
 800aff4:	9b06      	ldr	r3, [sp, #24]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd02      	ble.n	800b000 <_dtoa_r+0x938>
 800affa:	9b02      	ldr	r3, [sp, #8]
 800affc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b000:	f88b a000 	strb.w	sl, [fp]
 800b004:	e639      	b.n	800ac7a <_dtoa_r+0x5b2>
 800b006:	4628      	mov	r0, r5
 800b008:	e7bd      	b.n	800af86 <_dtoa_r+0x8be>
 800b00a:	2201      	movs	r2, #1
 800b00c:	e7e2      	b.n	800afd4 <_dtoa_r+0x90c>
 800b00e:	9b06      	ldr	r3, [sp, #24]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db04      	blt.n	800b01e <_dtoa_r+0x956>
 800b014:	9907      	ldr	r1, [sp, #28]
 800b016:	430b      	orrs	r3, r1
 800b018:	9908      	ldr	r1, [sp, #32]
 800b01a:	430b      	orrs	r3, r1
 800b01c:	d120      	bne.n	800b060 <_dtoa_r+0x998>
 800b01e:	2a00      	cmp	r2, #0
 800b020:	ddee      	ble.n	800b000 <_dtoa_r+0x938>
 800b022:	9901      	ldr	r1, [sp, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	4648      	mov	r0, r9
 800b028:	f000 fbfc 	bl	800b824 <__lshift>
 800b02c:	4621      	mov	r1, r4
 800b02e:	9001      	str	r0, [sp, #4]
 800b030:	f000 fc64 	bl	800b8fc <__mcmp>
 800b034:	2800      	cmp	r0, #0
 800b036:	dc03      	bgt.n	800b040 <_dtoa_r+0x978>
 800b038:	d1e2      	bne.n	800b000 <_dtoa_r+0x938>
 800b03a:	f01a 0f01 	tst.w	sl, #1
 800b03e:	d0df      	beq.n	800b000 <_dtoa_r+0x938>
 800b040:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b044:	d1d9      	bne.n	800affa <_dtoa_r+0x932>
 800b046:	2339      	movs	r3, #57	@ 0x39
 800b048:	f88b 3000 	strb.w	r3, [fp]
 800b04c:	4633      	mov	r3, r6
 800b04e:	461e      	mov	r6, r3
 800b050:	3b01      	subs	r3, #1
 800b052:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b056:	2a39      	cmp	r2, #57	@ 0x39
 800b058:	d053      	beq.n	800b102 <_dtoa_r+0xa3a>
 800b05a:	3201      	adds	r2, #1
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e60c      	b.n	800ac7a <_dtoa_r+0x5b2>
 800b060:	2a00      	cmp	r2, #0
 800b062:	dd07      	ble.n	800b074 <_dtoa_r+0x9ac>
 800b064:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b068:	d0ed      	beq.n	800b046 <_dtoa_r+0x97e>
 800b06a:	f10a 0301 	add.w	r3, sl, #1
 800b06e:	f88b 3000 	strb.w	r3, [fp]
 800b072:	e602      	b.n	800ac7a <_dtoa_r+0x5b2>
 800b074:	9b05      	ldr	r3, [sp, #20]
 800b076:	9a05      	ldr	r2, [sp, #20]
 800b078:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b07e:	4293      	cmp	r3, r2
 800b080:	d029      	beq.n	800b0d6 <_dtoa_r+0xa0e>
 800b082:	9901      	ldr	r1, [sp, #4]
 800b084:	2300      	movs	r3, #0
 800b086:	220a      	movs	r2, #10
 800b088:	4648      	mov	r0, r9
 800b08a:	f000 f9d5 	bl	800b438 <__multadd>
 800b08e:	45a8      	cmp	r8, r5
 800b090:	9001      	str	r0, [sp, #4]
 800b092:	f04f 0300 	mov.w	r3, #0
 800b096:	f04f 020a 	mov.w	r2, #10
 800b09a:	4641      	mov	r1, r8
 800b09c:	4648      	mov	r0, r9
 800b09e:	d107      	bne.n	800b0b0 <_dtoa_r+0x9e8>
 800b0a0:	f000 f9ca 	bl	800b438 <__multadd>
 800b0a4:	4680      	mov	r8, r0
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	9b05      	ldr	r3, [sp, #20]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	e775      	b.n	800af9c <_dtoa_r+0x8d4>
 800b0b0:	f000 f9c2 	bl	800b438 <__multadd>
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4680      	mov	r8, r0
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	220a      	movs	r2, #10
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f000 f9bb 	bl	800b438 <__multadd>
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	e7f0      	b.n	800b0a8 <_dtoa_r+0x9e0>
 800b0c6:	f1bb 0f00 	cmp.w	fp, #0
 800b0ca:	bfcc      	ite	gt
 800b0cc:	465e      	movgt	r6, fp
 800b0ce:	2601      	movle	r6, #1
 800b0d0:	443e      	add	r6, r7
 800b0d2:	f04f 0800 	mov.w	r8, #0
 800b0d6:	9901      	ldr	r1, [sp, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	4648      	mov	r0, r9
 800b0dc:	f000 fba2 	bl	800b824 <__lshift>
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	9001      	str	r0, [sp, #4]
 800b0e4:	f000 fc0a 	bl	800b8fc <__mcmp>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	dcaf      	bgt.n	800b04c <_dtoa_r+0x984>
 800b0ec:	d102      	bne.n	800b0f4 <_dtoa_r+0xa2c>
 800b0ee:	f01a 0f01 	tst.w	sl, #1
 800b0f2:	d1ab      	bne.n	800b04c <_dtoa_r+0x984>
 800b0f4:	4633      	mov	r3, r6
 800b0f6:	461e      	mov	r6, r3
 800b0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0fc:	2a30      	cmp	r2, #48	@ 0x30
 800b0fe:	d0fa      	beq.n	800b0f6 <_dtoa_r+0xa2e>
 800b100:	e5bb      	b.n	800ac7a <_dtoa_r+0x5b2>
 800b102:	429f      	cmp	r7, r3
 800b104:	d1a3      	bne.n	800b04e <_dtoa_r+0x986>
 800b106:	9b04      	ldr	r3, [sp, #16]
 800b108:	3301      	adds	r3, #1
 800b10a:	9304      	str	r3, [sp, #16]
 800b10c:	2331      	movs	r3, #49	@ 0x31
 800b10e:	703b      	strb	r3, [r7, #0]
 800b110:	e5b3      	b.n	800ac7a <_dtoa_r+0x5b2>
 800b112:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b114:	4f16      	ldr	r7, [pc, #88]	@ (800b170 <_dtoa_r+0xaa8>)
 800b116:	b11b      	cbz	r3, 800b120 <_dtoa_r+0xa58>
 800b118:	f107 0308 	add.w	r3, r7, #8
 800b11c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	4638      	mov	r0, r7
 800b122:	b011      	add	sp, #68	@ 0x44
 800b124:	ecbd 8b02 	vpop	{d8}
 800b128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	f77f ae36 	ble.w	800ada0 <_dtoa_r+0x6d8>
 800b134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b136:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b138:	2001      	movs	r0, #1
 800b13a:	e656      	b.n	800adea <_dtoa_r+0x722>
 800b13c:	f1bb 0f00 	cmp.w	fp, #0
 800b140:	f77f aed7 	ble.w	800aef2 <_dtoa_r+0x82a>
 800b144:	463e      	mov	r6, r7
 800b146:	9801      	ldr	r0, [sp, #4]
 800b148:	4621      	mov	r1, r4
 800b14a:	f7ff fa35 	bl	800a5b8 <quorem>
 800b14e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b152:	f806 ab01 	strb.w	sl, [r6], #1
 800b156:	1bf2      	subs	r2, r6, r7
 800b158:	4593      	cmp	fp, r2
 800b15a:	ddb4      	ble.n	800b0c6 <_dtoa_r+0x9fe>
 800b15c:	9901      	ldr	r1, [sp, #4]
 800b15e:	2300      	movs	r3, #0
 800b160:	220a      	movs	r2, #10
 800b162:	4648      	mov	r0, r9
 800b164:	f000 f968 	bl	800b438 <__multadd>
 800b168:	9001      	str	r0, [sp, #4]
 800b16a:	e7ec      	b.n	800b146 <_dtoa_r+0xa7e>
 800b16c:	0800e6ed 	.word	0x0800e6ed
 800b170:	0800e671 	.word	0x0800e671

0800b174 <_free_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4605      	mov	r5, r0
 800b178:	2900      	cmp	r1, #0
 800b17a:	d041      	beq.n	800b200 <_free_r+0x8c>
 800b17c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b180:	1f0c      	subs	r4, r1, #4
 800b182:	2b00      	cmp	r3, #0
 800b184:	bfb8      	it	lt
 800b186:	18e4      	addlt	r4, r4, r3
 800b188:	f000 f8e8 	bl	800b35c <__malloc_lock>
 800b18c:	4a1d      	ldr	r2, [pc, #116]	@ (800b204 <_free_r+0x90>)
 800b18e:	6813      	ldr	r3, [r2, #0]
 800b190:	b933      	cbnz	r3, 800b1a0 <_free_r+0x2c>
 800b192:	6063      	str	r3, [r4, #4]
 800b194:	6014      	str	r4, [r2, #0]
 800b196:	4628      	mov	r0, r5
 800b198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b19c:	f000 b8e4 	b.w	800b368 <__malloc_unlock>
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	d908      	bls.n	800b1b6 <_free_r+0x42>
 800b1a4:	6820      	ldr	r0, [r4, #0]
 800b1a6:	1821      	adds	r1, r4, r0
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	bf01      	itttt	eq
 800b1ac:	6819      	ldreq	r1, [r3, #0]
 800b1ae:	685b      	ldreq	r3, [r3, #4]
 800b1b0:	1809      	addeq	r1, r1, r0
 800b1b2:	6021      	streq	r1, [r4, #0]
 800b1b4:	e7ed      	b.n	800b192 <_free_r+0x1e>
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	b10b      	cbz	r3, 800b1c0 <_free_r+0x4c>
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	d9fa      	bls.n	800b1b6 <_free_r+0x42>
 800b1c0:	6811      	ldr	r1, [r2, #0]
 800b1c2:	1850      	adds	r0, r2, r1
 800b1c4:	42a0      	cmp	r0, r4
 800b1c6:	d10b      	bne.n	800b1e0 <_free_r+0x6c>
 800b1c8:	6820      	ldr	r0, [r4, #0]
 800b1ca:	4401      	add	r1, r0
 800b1cc:	1850      	adds	r0, r2, r1
 800b1ce:	4283      	cmp	r3, r0
 800b1d0:	6011      	str	r1, [r2, #0]
 800b1d2:	d1e0      	bne.n	800b196 <_free_r+0x22>
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	6053      	str	r3, [r2, #4]
 800b1da:	4408      	add	r0, r1
 800b1dc:	6010      	str	r0, [r2, #0]
 800b1de:	e7da      	b.n	800b196 <_free_r+0x22>
 800b1e0:	d902      	bls.n	800b1e8 <_free_r+0x74>
 800b1e2:	230c      	movs	r3, #12
 800b1e4:	602b      	str	r3, [r5, #0]
 800b1e6:	e7d6      	b.n	800b196 <_free_r+0x22>
 800b1e8:	6820      	ldr	r0, [r4, #0]
 800b1ea:	1821      	adds	r1, r4, r0
 800b1ec:	428b      	cmp	r3, r1
 800b1ee:	bf04      	itt	eq
 800b1f0:	6819      	ldreq	r1, [r3, #0]
 800b1f2:	685b      	ldreq	r3, [r3, #4]
 800b1f4:	6063      	str	r3, [r4, #4]
 800b1f6:	bf04      	itt	eq
 800b1f8:	1809      	addeq	r1, r1, r0
 800b1fa:	6021      	streq	r1, [r4, #0]
 800b1fc:	6054      	str	r4, [r2, #4]
 800b1fe:	e7ca      	b.n	800b196 <_free_r+0x22>
 800b200:	bd38      	pop	{r3, r4, r5, pc}
 800b202:	bf00      	nop
 800b204:	240006b4 	.word	0x240006b4

0800b208 <malloc>:
 800b208:	4b02      	ldr	r3, [pc, #8]	@ (800b214 <malloc+0xc>)
 800b20a:	4601      	mov	r1, r0
 800b20c:	6818      	ldr	r0, [r3, #0]
 800b20e:	f000 b825 	b.w	800b25c <_malloc_r>
 800b212:	bf00      	nop
 800b214:	24000020 	.word	0x24000020

0800b218 <sbrk_aligned>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	4e0f      	ldr	r6, [pc, #60]	@ (800b258 <sbrk_aligned+0x40>)
 800b21c:	460c      	mov	r4, r1
 800b21e:	6831      	ldr	r1, [r6, #0]
 800b220:	4605      	mov	r5, r0
 800b222:	b911      	cbnz	r1, 800b22a <sbrk_aligned+0x12>
 800b224:	f001 fdb8 	bl	800cd98 <_sbrk_r>
 800b228:	6030      	str	r0, [r6, #0]
 800b22a:	4621      	mov	r1, r4
 800b22c:	4628      	mov	r0, r5
 800b22e:	f001 fdb3 	bl	800cd98 <_sbrk_r>
 800b232:	1c43      	adds	r3, r0, #1
 800b234:	d103      	bne.n	800b23e <sbrk_aligned+0x26>
 800b236:	f04f 34ff 	mov.w	r4, #4294967295
 800b23a:	4620      	mov	r0, r4
 800b23c:	bd70      	pop	{r4, r5, r6, pc}
 800b23e:	1cc4      	adds	r4, r0, #3
 800b240:	f024 0403 	bic.w	r4, r4, #3
 800b244:	42a0      	cmp	r0, r4
 800b246:	d0f8      	beq.n	800b23a <sbrk_aligned+0x22>
 800b248:	1a21      	subs	r1, r4, r0
 800b24a:	4628      	mov	r0, r5
 800b24c:	f001 fda4 	bl	800cd98 <_sbrk_r>
 800b250:	3001      	adds	r0, #1
 800b252:	d1f2      	bne.n	800b23a <sbrk_aligned+0x22>
 800b254:	e7ef      	b.n	800b236 <sbrk_aligned+0x1e>
 800b256:	bf00      	nop
 800b258:	240006b0 	.word	0x240006b0

0800b25c <_malloc_r>:
 800b25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b260:	1ccd      	adds	r5, r1, #3
 800b262:	f025 0503 	bic.w	r5, r5, #3
 800b266:	3508      	adds	r5, #8
 800b268:	2d0c      	cmp	r5, #12
 800b26a:	bf38      	it	cc
 800b26c:	250c      	movcc	r5, #12
 800b26e:	2d00      	cmp	r5, #0
 800b270:	4606      	mov	r6, r0
 800b272:	db01      	blt.n	800b278 <_malloc_r+0x1c>
 800b274:	42a9      	cmp	r1, r5
 800b276:	d904      	bls.n	800b282 <_malloc_r+0x26>
 800b278:	230c      	movs	r3, #12
 800b27a:	6033      	str	r3, [r6, #0]
 800b27c:	2000      	movs	r0, #0
 800b27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b358 <_malloc_r+0xfc>
 800b286:	f000 f869 	bl	800b35c <__malloc_lock>
 800b28a:	f8d8 3000 	ldr.w	r3, [r8]
 800b28e:	461c      	mov	r4, r3
 800b290:	bb44      	cbnz	r4, 800b2e4 <_malloc_r+0x88>
 800b292:	4629      	mov	r1, r5
 800b294:	4630      	mov	r0, r6
 800b296:	f7ff ffbf 	bl	800b218 <sbrk_aligned>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	4604      	mov	r4, r0
 800b29e:	d158      	bne.n	800b352 <_malloc_r+0xf6>
 800b2a0:	f8d8 4000 	ldr.w	r4, [r8]
 800b2a4:	4627      	mov	r7, r4
 800b2a6:	2f00      	cmp	r7, #0
 800b2a8:	d143      	bne.n	800b332 <_malloc_r+0xd6>
 800b2aa:	2c00      	cmp	r4, #0
 800b2ac:	d04b      	beq.n	800b346 <_malloc_r+0xea>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	eb04 0903 	add.w	r9, r4, r3
 800b2b8:	f001 fd6e 	bl	800cd98 <_sbrk_r>
 800b2bc:	4581      	cmp	r9, r0
 800b2be:	d142      	bne.n	800b346 <_malloc_r+0xea>
 800b2c0:	6821      	ldr	r1, [r4, #0]
 800b2c2:	1a6d      	subs	r5, r5, r1
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f7ff ffa6 	bl	800b218 <sbrk_aligned>
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d03a      	beq.n	800b346 <_malloc_r+0xea>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	442b      	add	r3, r5
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	bb62      	cbnz	r2, 800b338 <_malloc_r+0xdc>
 800b2de:	f8c8 7000 	str.w	r7, [r8]
 800b2e2:	e00f      	b.n	800b304 <_malloc_r+0xa8>
 800b2e4:	6822      	ldr	r2, [r4, #0]
 800b2e6:	1b52      	subs	r2, r2, r5
 800b2e8:	d420      	bmi.n	800b32c <_malloc_r+0xd0>
 800b2ea:	2a0b      	cmp	r2, #11
 800b2ec:	d917      	bls.n	800b31e <_malloc_r+0xc2>
 800b2ee:	1961      	adds	r1, r4, r5
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	6025      	str	r5, [r4, #0]
 800b2f4:	bf18      	it	ne
 800b2f6:	6059      	strne	r1, [r3, #4]
 800b2f8:	6863      	ldr	r3, [r4, #4]
 800b2fa:	bf08      	it	eq
 800b2fc:	f8c8 1000 	streq.w	r1, [r8]
 800b300:	5162      	str	r2, [r4, r5]
 800b302:	604b      	str	r3, [r1, #4]
 800b304:	4630      	mov	r0, r6
 800b306:	f000 f82f 	bl	800b368 <__malloc_unlock>
 800b30a:	f104 000b 	add.w	r0, r4, #11
 800b30e:	1d23      	adds	r3, r4, #4
 800b310:	f020 0007 	bic.w	r0, r0, #7
 800b314:	1ac2      	subs	r2, r0, r3
 800b316:	bf1c      	itt	ne
 800b318:	1a1b      	subne	r3, r3, r0
 800b31a:	50a3      	strne	r3, [r4, r2]
 800b31c:	e7af      	b.n	800b27e <_malloc_r+0x22>
 800b31e:	6862      	ldr	r2, [r4, #4]
 800b320:	42a3      	cmp	r3, r4
 800b322:	bf0c      	ite	eq
 800b324:	f8c8 2000 	streq.w	r2, [r8]
 800b328:	605a      	strne	r2, [r3, #4]
 800b32a:	e7eb      	b.n	800b304 <_malloc_r+0xa8>
 800b32c:	4623      	mov	r3, r4
 800b32e:	6864      	ldr	r4, [r4, #4]
 800b330:	e7ae      	b.n	800b290 <_malloc_r+0x34>
 800b332:	463c      	mov	r4, r7
 800b334:	687f      	ldr	r7, [r7, #4]
 800b336:	e7b6      	b.n	800b2a6 <_malloc_r+0x4a>
 800b338:	461a      	mov	r2, r3
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	d1fb      	bne.n	800b338 <_malloc_r+0xdc>
 800b340:	2300      	movs	r3, #0
 800b342:	6053      	str	r3, [r2, #4]
 800b344:	e7de      	b.n	800b304 <_malloc_r+0xa8>
 800b346:	230c      	movs	r3, #12
 800b348:	6033      	str	r3, [r6, #0]
 800b34a:	4630      	mov	r0, r6
 800b34c:	f000 f80c 	bl	800b368 <__malloc_unlock>
 800b350:	e794      	b.n	800b27c <_malloc_r+0x20>
 800b352:	6005      	str	r5, [r0, #0]
 800b354:	e7d6      	b.n	800b304 <_malloc_r+0xa8>
 800b356:	bf00      	nop
 800b358:	240006b4 	.word	0x240006b4

0800b35c <__malloc_lock>:
 800b35c:	4801      	ldr	r0, [pc, #4]	@ (800b364 <__malloc_lock+0x8>)
 800b35e:	f7ff b922 	b.w	800a5a6 <__retarget_lock_acquire_recursive>
 800b362:	bf00      	nop
 800b364:	240006ac 	.word	0x240006ac

0800b368 <__malloc_unlock>:
 800b368:	4801      	ldr	r0, [pc, #4]	@ (800b370 <__malloc_unlock+0x8>)
 800b36a:	f7ff b91d 	b.w	800a5a8 <__retarget_lock_release_recursive>
 800b36e:	bf00      	nop
 800b370:	240006ac 	.word	0x240006ac

0800b374 <_Balloc>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	69c6      	ldr	r6, [r0, #28]
 800b378:	4604      	mov	r4, r0
 800b37a:	460d      	mov	r5, r1
 800b37c:	b976      	cbnz	r6, 800b39c <_Balloc+0x28>
 800b37e:	2010      	movs	r0, #16
 800b380:	f7ff ff42 	bl	800b208 <malloc>
 800b384:	4602      	mov	r2, r0
 800b386:	61e0      	str	r0, [r4, #28]
 800b388:	b920      	cbnz	r0, 800b394 <_Balloc+0x20>
 800b38a:	4b18      	ldr	r3, [pc, #96]	@ (800b3ec <_Balloc+0x78>)
 800b38c:	4818      	ldr	r0, [pc, #96]	@ (800b3f0 <_Balloc+0x7c>)
 800b38e:	216b      	movs	r1, #107	@ 0x6b
 800b390:	f001 fd2a 	bl	800cde8 <__assert_func>
 800b394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b398:	6006      	str	r6, [r0, #0]
 800b39a:	60c6      	str	r6, [r0, #12]
 800b39c:	69e6      	ldr	r6, [r4, #28]
 800b39e:	68f3      	ldr	r3, [r6, #12]
 800b3a0:	b183      	cbz	r3, 800b3c4 <_Balloc+0x50>
 800b3a2:	69e3      	ldr	r3, [r4, #28]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3aa:	b9b8      	cbnz	r0, 800b3dc <_Balloc+0x68>
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b3b2:	1d72      	adds	r2, r6, #5
 800b3b4:	0092      	lsls	r2, r2, #2
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 fd34 	bl	800ce24 <_calloc_r>
 800b3bc:	b160      	cbz	r0, 800b3d8 <_Balloc+0x64>
 800b3be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3c2:	e00e      	b.n	800b3e2 <_Balloc+0x6e>
 800b3c4:	2221      	movs	r2, #33	@ 0x21
 800b3c6:	2104      	movs	r1, #4
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f001 fd2b 	bl	800ce24 <_calloc_r>
 800b3ce:	69e3      	ldr	r3, [r4, #28]
 800b3d0:	60f0      	str	r0, [r6, #12]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1e4      	bne.n	800b3a2 <_Balloc+0x2e>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	bd70      	pop	{r4, r5, r6, pc}
 800b3dc:	6802      	ldr	r2, [r0, #0]
 800b3de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3e8:	e7f7      	b.n	800b3da <_Balloc+0x66>
 800b3ea:	bf00      	nop
 800b3ec:	0800e67e 	.word	0x0800e67e
 800b3f0:	0800e6fe 	.word	0x0800e6fe

0800b3f4 <_Bfree>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	69c6      	ldr	r6, [r0, #28]
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	b976      	cbnz	r6, 800b41c <_Bfree+0x28>
 800b3fe:	2010      	movs	r0, #16
 800b400:	f7ff ff02 	bl	800b208 <malloc>
 800b404:	4602      	mov	r2, r0
 800b406:	61e8      	str	r0, [r5, #28]
 800b408:	b920      	cbnz	r0, 800b414 <_Bfree+0x20>
 800b40a:	4b09      	ldr	r3, [pc, #36]	@ (800b430 <_Bfree+0x3c>)
 800b40c:	4809      	ldr	r0, [pc, #36]	@ (800b434 <_Bfree+0x40>)
 800b40e:	218f      	movs	r1, #143	@ 0x8f
 800b410:	f001 fcea 	bl	800cde8 <__assert_func>
 800b414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b418:	6006      	str	r6, [r0, #0]
 800b41a:	60c6      	str	r6, [r0, #12]
 800b41c:	b13c      	cbz	r4, 800b42e <_Bfree+0x3a>
 800b41e:	69eb      	ldr	r3, [r5, #28]
 800b420:	6862      	ldr	r2, [r4, #4]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b428:	6021      	str	r1, [r4, #0]
 800b42a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	0800e67e 	.word	0x0800e67e
 800b434:	0800e6fe 	.word	0x0800e6fe

0800b438 <__multadd>:
 800b438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43c:	690d      	ldr	r5, [r1, #16]
 800b43e:	4607      	mov	r7, r0
 800b440:	460c      	mov	r4, r1
 800b442:	461e      	mov	r6, r3
 800b444:	f101 0c14 	add.w	ip, r1, #20
 800b448:	2000      	movs	r0, #0
 800b44a:	f8dc 3000 	ldr.w	r3, [ip]
 800b44e:	b299      	uxth	r1, r3
 800b450:	fb02 6101 	mla	r1, r2, r1, r6
 800b454:	0c1e      	lsrs	r6, r3, #16
 800b456:	0c0b      	lsrs	r3, r1, #16
 800b458:	fb02 3306 	mla	r3, r2, r6, r3
 800b45c:	b289      	uxth	r1, r1
 800b45e:	3001      	adds	r0, #1
 800b460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b464:	4285      	cmp	r5, r0
 800b466:	f84c 1b04 	str.w	r1, [ip], #4
 800b46a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b46e:	dcec      	bgt.n	800b44a <__multadd+0x12>
 800b470:	b30e      	cbz	r6, 800b4b6 <__multadd+0x7e>
 800b472:	68a3      	ldr	r3, [r4, #8]
 800b474:	42ab      	cmp	r3, r5
 800b476:	dc19      	bgt.n	800b4ac <__multadd+0x74>
 800b478:	6861      	ldr	r1, [r4, #4]
 800b47a:	4638      	mov	r0, r7
 800b47c:	3101      	adds	r1, #1
 800b47e:	f7ff ff79 	bl	800b374 <_Balloc>
 800b482:	4680      	mov	r8, r0
 800b484:	b928      	cbnz	r0, 800b492 <__multadd+0x5a>
 800b486:	4602      	mov	r2, r0
 800b488:	4b0c      	ldr	r3, [pc, #48]	@ (800b4bc <__multadd+0x84>)
 800b48a:	480d      	ldr	r0, [pc, #52]	@ (800b4c0 <__multadd+0x88>)
 800b48c:	21ba      	movs	r1, #186	@ 0xba
 800b48e:	f001 fcab 	bl	800cde8 <__assert_func>
 800b492:	6922      	ldr	r2, [r4, #16]
 800b494:	3202      	adds	r2, #2
 800b496:	f104 010c 	add.w	r1, r4, #12
 800b49a:	0092      	lsls	r2, r2, #2
 800b49c:	300c      	adds	r0, #12
 800b49e:	f001 fc8b 	bl	800cdb8 <memcpy>
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	f7ff ffa5 	bl	800b3f4 <_Bfree>
 800b4aa:	4644      	mov	r4, r8
 800b4ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4b0:	3501      	adds	r5, #1
 800b4b2:	615e      	str	r6, [r3, #20]
 800b4b4:	6125      	str	r5, [r4, #16]
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4bc:	0800e6ed 	.word	0x0800e6ed
 800b4c0:	0800e6fe 	.word	0x0800e6fe

0800b4c4 <__s2b>:
 800b4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	4615      	mov	r5, r2
 800b4cc:	461f      	mov	r7, r3
 800b4ce:	2209      	movs	r2, #9
 800b4d0:	3308      	adds	r3, #8
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4d8:	2100      	movs	r1, #0
 800b4da:	2201      	movs	r2, #1
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	db09      	blt.n	800b4f4 <__s2b+0x30>
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	f7ff ff47 	bl	800b374 <_Balloc>
 800b4e6:	b940      	cbnz	r0, 800b4fa <__s2b+0x36>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	4b19      	ldr	r3, [pc, #100]	@ (800b550 <__s2b+0x8c>)
 800b4ec:	4819      	ldr	r0, [pc, #100]	@ (800b554 <__s2b+0x90>)
 800b4ee:	21d3      	movs	r1, #211	@ 0xd3
 800b4f0:	f001 fc7a 	bl	800cde8 <__assert_func>
 800b4f4:	0052      	lsls	r2, r2, #1
 800b4f6:	3101      	adds	r1, #1
 800b4f8:	e7f0      	b.n	800b4dc <__s2b+0x18>
 800b4fa:	9b08      	ldr	r3, [sp, #32]
 800b4fc:	6143      	str	r3, [r0, #20]
 800b4fe:	2d09      	cmp	r5, #9
 800b500:	f04f 0301 	mov.w	r3, #1
 800b504:	6103      	str	r3, [r0, #16]
 800b506:	dd16      	ble.n	800b536 <__s2b+0x72>
 800b508:	f104 0909 	add.w	r9, r4, #9
 800b50c:	46c8      	mov	r8, r9
 800b50e:	442c      	add	r4, r5
 800b510:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b514:	4601      	mov	r1, r0
 800b516:	3b30      	subs	r3, #48	@ 0x30
 800b518:	220a      	movs	r2, #10
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7ff ff8c 	bl	800b438 <__multadd>
 800b520:	45a0      	cmp	r8, r4
 800b522:	d1f5      	bne.n	800b510 <__s2b+0x4c>
 800b524:	f1a5 0408 	sub.w	r4, r5, #8
 800b528:	444c      	add	r4, r9
 800b52a:	1b2d      	subs	r5, r5, r4
 800b52c:	1963      	adds	r3, r4, r5
 800b52e:	42bb      	cmp	r3, r7
 800b530:	db04      	blt.n	800b53c <__s2b+0x78>
 800b532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b536:	340a      	adds	r4, #10
 800b538:	2509      	movs	r5, #9
 800b53a:	e7f6      	b.n	800b52a <__s2b+0x66>
 800b53c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b540:	4601      	mov	r1, r0
 800b542:	3b30      	subs	r3, #48	@ 0x30
 800b544:	220a      	movs	r2, #10
 800b546:	4630      	mov	r0, r6
 800b548:	f7ff ff76 	bl	800b438 <__multadd>
 800b54c:	e7ee      	b.n	800b52c <__s2b+0x68>
 800b54e:	bf00      	nop
 800b550:	0800e6ed 	.word	0x0800e6ed
 800b554:	0800e6fe 	.word	0x0800e6fe

0800b558 <__hi0bits>:
 800b558:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b55c:	4603      	mov	r3, r0
 800b55e:	bf36      	itet	cc
 800b560:	0403      	lslcc	r3, r0, #16
 800b562:	2000      	movcs	r0, #0
 800b564:	2010      	movcc	r0, #16
 800b566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b56a:	bf3c      	itt	cc
 800b56c:	021b      	lslcc	r3, r3, #8
 800b56e:	3008      	addcc	r0, #8
 800b570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b574:	bf3c      	itt	cc
 800b576:	011b      	lslcc	r3, r3, #4
 800b578:	3004      	addcc	r0, #4
 800b57a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b57e:	bf3c      	itt	cc
 800b580:	009b      	lslcc	r3, r3, #2
 800b582:	3002      	addcc	r0, #2
 800b584:	2b00      	cmp	r3, #0
 800b586:	db05      	blt.n	800b594 <__hi0bits+0x3c>
 800b588:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b58c:	f100 0001 	add.w	r0, r0, #1
 800b590:	bf08      	it	eq
 800b592:	2020      	moveq	r0, #32
 800b594:	4770      	bx	lr

0800b596 <__lo0bits>:
 800b596:	6803      	ldr	r3, [r0, #0]
 800b598:	4602      	mov	r2, r0
 800b59a:	f013 0007 	ands.w	r0, r3, #7
 800b59e:	d00b      	beq.n	800b5b8 <__lo0bits+0x22>
 800b5a0:	07d9      	lsls	r1, r3, #31
 800b5a2:	d421      	bmi.n	800b5e8 <__lo0bits+0x52>
 800b5a4:	0798      	lsls	r0, r3, #30
 800b5a6:	bf49      	itett	mi
 800b5a8:	085b      	lsrmi	r3, r3, #1
 800b5aa:	089b      	lsrpl	r3, r3, #2
 800b5ac:	2001      	movmi	r0, #1
 800b5ae:	6013      	strmi	r3, [r2, #0]
 800b5b0:	bf5c      	itt	pl
 800b5b2:	6013      	strpl	r3, [r2, #0]
 800b5b4:	2002      	movpl	r0, #2
 800b5b6:	4770      	bx	lr
 800b5b8:	b299      	uxth	r1, r3
 800b5ba:	b909      	cbnz	r1, 800b5c0 <__lo0bits+0x2a>
 800b5bc:	0c1b      	lsrs	r3, r3, #16
 800b5be:	2010      	movs	r0, #16
 800b5c0:	b2d9      	uxtb	r1, r3
 800b5c2:	b909      	cbnz	r1, 800b5c8 <__lo0bits+0x32>
 800b5c4:	3008      	adds	r0, #8
 800b5c6:	0a1b      	lsrs	r3, r3, #8
 800b5c8:	0719      	lsls	r1, r3, #28
 800b5ca:	bf04      	itt	eq
 800b5cc:	091b      	lsreq	r3, r3, #4
 800b5ce:	3004      	addeq	r0, #4
 800b5d0:	0799      	lsls	r1, r3, #30
 800b5d2:	bf04      	itt	eq
 800b5d4:	089b      	lsreq	r3, r3, #2
 800b5d6:	3002      	addeq	r0, #2
 800b5d8:	07d9      	lsls	r1, r3, #31
 800b5da:	d403      	bmi.n	800b5e4 <__lo0bits+0x4e>
 800b5dc:	085b      	lsrs	r3, r3, #1
 800b5de:	f100 0001 	add.w	r0, r0, #1
 800b5e2:	d003      	beq.n	800b5ec <__lo0bits+0x56>
 800b5e4:	6013      	str	r3, [r2, #0]
 800b5e6:	4770      	bx	lr
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	4770      	bx	lr
 800b5ec:	2020      	movs	r0, #32
 800b5ee:	4770      	bx	lr

0800b5f0 <__i2b>:
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	f7ff febd 	bl	800b374 <_Balloc>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	b928      	cbnz	r0, 800b60a <__i2b+0x1a>
 800b5fe:	4b05      	ldr	r3, [pc, #20]	@ (800b614 <__i2b+0x24>)
 800b600:	4805      	ldr	r0, [pc, #20]	@ (800b618 <__i2b+0x28>)
 800b602:	f240 1145 	movw	r1, #325	@ 0x145
 800b606:	f001 fbef 	bl	800cde8 <__assert_func>
 800b60a:	2301      	movs	r3, #1
 800b60c:	6144      	str	r4, [r0, #20]
 800b60e:	6103      	str	r3, [r0, #16]
 800b610:	bd10      	pop	{r4, pc}
 800b612:	bf00      	nop
 800b614:	0800e6ed 	.word	0x0800e6ed
 800b618:	0800e6fe 	.word	0x0800e6fe

0800b61c <__multiply>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	4614      	mov	r4, r2
 800b622:	690a      	ldr	r2, [r1, #16]
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	429a      	cmp	r2, r3
 800b628:	bfa8      	it	ge
 800b62a:	4623      	movge	r3, r4
 800b62c:	460f      	mov	r7, r1
 800b62e:	bfa4      	itt	ge
 800b630:	460c      	movge	r4, r1
 800b632:	461f      	movge	r7, r3
 800b634:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b638:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	6861      	ldr	r1, [r4, #4]
 800b640:	eb0a 0609 	add.w	r6, sl, r9
 800b644:	42b3      	cmp	r3, r6
 800b646:	b085      	sub	sp, #20
 800b648:	bfb8      	it	lt
 800b64a:	3101      	addlt	r1, #1
 800b64c:	f7ff fe92 	bl	800b374 <_Balloc>
 800b650:	b930      	cbnz	r0, 800b660 <__multiply+0x44>
 800b652:	4602      	mov	r2, r0
 800b654:	4b44      	ldr	r3, [pc, #272]	@ (800b768 <__multiply+0x14c>)
 800b656:	4845      	ldr	r0, [pc, #276]	@ (800b76c <__multiply+0x150>)
 800b658:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b65c:	f001 fbc4 	bl	800cde8 <__assert_func>
 800b660:	f100 0514 	add.w	r5, r0, #20
 800b664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b668:	462b      	mov	r3, r5
 800b66a:	2200      	movs	r2, #0
 800b66c:	4543      	cmp	r3, r8
 800b66e:	d321      	bcc.n	800b6b4 <__multiply+0x98>
 800b670:	f107 0114 	add.w	r1, r7, #20
 800b674:	f104 0214 	add.w	r2, r4, #20
 800b678:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b67c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b680:	9302      	str	r3, [sp, #8]
 800b682:	1b13      	subs	r3, r2, r4
 800b684:	3b15      	subs	r3, #21
 800b686:	f023 0303 	bic.w	r3, r3, #3
 800b68a:	3304      	adds	r3, #4
 800b68c:	f104 0715 	add.w	r7, r4, #21
 800b690:	42ba      	cmp	r2, r7
 800b692:	bf38      	it	cc
 800b694:	2304      	movcc	r3, #4
 800b696:	9301      	str	r3, [sp, #4]
 800b698:	9b02      	ldr	r3, [sp, #8]
 800b69a:	9103      	str	r1, [sp, #12]
 800b69c:	428b      	cmp	r3, r1
 800b69e:	d80c      	bhi.n	800b6ba <__multiply+0x9e>
 800b6a0:	2e00      	cmp	r6, #0
 800b6a2:	dd03      	ble.n	800b6ac <__multiply+0x90>
 800b6a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d05b      	beq.n	800b764 <__multiply+0x148>
 800b6ac:	6106      	str	r6, [r0, #16]
 800b6ae:	b005      	add	sp, #20
 800b6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b4:	f843 2b04 	str.w	r2, [r3], #4
 800b6b8:	e7d8      	b.n	800b66c <__multiply+0x50>
 800b6ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6be:	f1ba 0f00 	cmp.w	sl, #0
 800b6c2:	d024      	beq.n	800b70e <__multiply+0xf2>
 800b6c4:	f104 0e14 	add.w	lr, r4, #20
 800b6c8:	46a9      	mov	r9, r5
 800b6ca:	f04f 0c00 	mov.w	ip, #0
 800b6ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6d2:	f8d9 3000 	ldr.w	r3, [r9]
 800b6d6:	fa1f fb87 	uxth.w	fp, r7
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b6e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b6e4:	f8d9 7000 	ldr.w	r7, [r9]
 800b6e8:	4463      	add	r3, ip
 800b6ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b6ee:	fb0a c70b 	mla	r7, sl, fp, ip
 800b6f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b6fc:	4572      	cmp	r2, lr
 800b6fe:	f849 3b04 	str.w	r3, [r9], #4
 800b702:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b706:	d8e2      	bhi.n	800b6ce <__multiply+0xb2>
 800b708:	9b01      	ldr	r3, [sp, #4]
 800b70a:	f845 c003 	str.w	ip, [r5, r3]
 800b70e:	9b03      	ldr	r3, [sp, #12]
 800b710:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b714:	3104      	adds	r1, #4
 800b716:	f1b9 0f00 	cmp.w	r9, #0
 800b71a:	d021      	beq.n	800b760 <__multiply+0x144>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	f104 0c14 	add.w	ip, r4, #20
 800b722:	46ae      	mov	lr, r5
 800b724:	f04f 0a00 	mov.w	sl, #0
 800b728:	f8bc b000 	ldrh.w	fp, [ip]
 800b72c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b730:	fb09 770b 	mla	r7, r9, fp, r7
 800b734:	4457      	add	r7, sl
 800b736:	b29b      	uxth	r3, r3
 800b738:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b73c:	f84e 3b04 	str.w	r3, [lr], #4
 800b740:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b744:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b748:	f8be 3000 	ldrh.w	r3, [lr]
 800b74c:	fb09 330a 	mla	r3, r9, sl, r3
 800b750:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b754:	4562      	cmp	r2, ip
 800b756:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b75a:	d8e5      	bhi.n	800b728 <__multiply+0x10c>
 800b75c:	9f01      	ldr	r7, [sp, #4]
 800b75e:	51eb      	str	r3, [r5, r7]
 800b760:	3504      	adds	r5, #4
 800b762:	e799      	b.n	800b698 <__multiply+0x7c>
 800b764:	3e01      	subs	r6, #1
 800b766:	e79b      	b.n	800b6a0 <__multiply+0x84>
 800b768:	0800e6ed 	.word	0x0800e6ed
 800b76c:	0800e6fe 	.word	0x0800e6fe

0800b770 <__pow5mult>:
 800b770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b774:	4615      	mov	r5, r2
 800b776:	f012 0203 	ands.w	r2, r2, #3
 800b77a:	4607      	mov	r7, r0
 800b77c:	460e      	mov	r6, r1
 800b77e:	d007      	beq.n	800b790 <__pow5mult+0x20>
 800b780:	4c25      	ldr	r4, [pc, #148]	@ (800b818 <__pow5mult+0xa8>)
 800b782:	3a01      	subs	r2, #1
 800b784:	2300      	movs	r3, #0
 800b786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b78a:	f7ff fe55 	bl	800b438 <__multadd>
 800b78e:	4606      	mov	r6, r0
 800b790:	10ad      	asrs	r5, r5, #2
 800b792:	d03d      	beq.n	800b810 <__pow5mult+0xa0>
 800b794:	69fc      	ldr	r4, [r7, #28]
 800b796:	b97c      	cbnz	r4, 800b7b8 <__pow5mult+0x48>
 800b798:	2010      	movs	r0, #16
 800b79a:	f7ff fd35 	bl	800b208 <malloc>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	61f8      	str	r0, [r7, #28]
 800b7a2:	b928      	cbnz	r0, 800b7b0 <__pow5mult+0x40>
 800b7a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b81c <__pow5mult+0xac>)
 800b7a6:	481e      	ldr	r0, [pc, #120]	@ (800b820 <__pow5mult+0xb0>)
 800b7a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7ac:	f001 fb1c 	bl	800cde8 <__assert_func>
 800b7b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7b4:	6004      	str	r4, [r0, #0]
 800b7b6:	60c4      	str	r4, [r0, #12]
 800b7b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7c0:	b94c      	cbnz	r4, 800b7d6 <__pow5mult+0x66>
 800b7c2:	f240 2171 	movw	r1, #625	@ 0x271
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f7ff ff12 	bl	800b5f0 <__i2b>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	6003      	str	r3, [r0, #0]
 800b7d6:	f04f 0900 	mov.w	r9, #0
 800b7da:	07eb      	lsls	r3, r5, #31
 800b7dc:	d50a      	bpl.n	800b7f4 <__pow5mult+0x84>
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	f7ff ff1a 	bl	800b61c <__multiply>
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4680      	mov	r8, r0
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f7ff fe01 	bl	800b3f4 <_Bfree>
 800b7f2:	4646      	mov	r6, r8
 800b7f4:	106d      	asrs	r5, r5, #1
 800b7f6:	d00b      	beq.n	800b810 <__pow5mult+0xa0>
 800b7f8:	6820      	ldr	r0, [r4, #0]
 800b7fa:	b938      	cbnz	r0, 800b80c <__pow5mult+0x9c>
 800b7fc:	4622      	mov	r2, r4
 800b7fe:	4621      	mov	r1, r4
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff ff0b 	bl	800b61c <__multiply>
 800b806:	6020      	str	r0, [r4, #0]
 800b808:	f8c0 9000 	str.w	r9, [r0]
 800b80c:	4604      	mov	r4, r0
 800b80e:	e7e4      	b.n	800b7da <__pow5mult+0x6a>
 800b810:	4630      	mov	r0, r6
 800b812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b816:	bf00      	nop
 800b818:	0800e758 	.word	0x0800e758
 800b81c:	0800e67e 	.word	0x0800e67e
 800b820:	0800e6fe 	.word	0x0800e6fe

0800b824 <__lshift>:
 800b824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b828:	460c      	mov	r4, r1
 800b82a:	6849      	ldr	r1, [r1, #4]
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	4607      	mov	r7, r0
 800b836:	4691      	mov	r9, r2
 800b838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b83c:	f108 0601 	add.w	r6, r8, #1
 800b840:	42b3      	cmp	r3, r6
 800b842:	db0b      	blt.n	800b85c <__lshift+0x38>
 800b844:	4638      	mov	r0, r7
 800b846:	f7ff fd95 	bl	800b374 <_Balloc>
 800b84a:	4605      	mov	r5, r0
 800b84c:	b948      	cbnz	r0, 800b862 <__lshift+0x3e>
 800b84e:	4602      	mov	r2, r0
 800b850:	4b28      	ldr	r3, [pc, #160]	@ (800b8f4 <__lshift+0xd0>)
 800b852:	4829      	ldr	r0, [pc, #164]	@ (800b8f8 <__lshift+0xd4>)
 800b854:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b858:	f001 fac6 	bl	800cde8 <__assert_func>
 800b85c:	3101      	adds	r1, #1
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	e7ee      	b.n	800b840 <__lshift+0x1c>
 800b862:	2300      	movs	r3, #0
 800b864:	f100 0114 	add.w	r1, r0, #20
 800b868:	f100 0210 	add.w	r2, r0, #16
 800b86c:	4618      	mov	r0, r3
 800b86e:	4553      	cmp	r3, sl
 800b870:	db33      	blt.n	800b8da <__lshift+0xb6>
 800b872:	6920      	ldr	r0, [r4, #16]
 800b874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b878:	f104 0314 	add.w	r3, r4, #20
 800b87c:	f019 091f 	ands.w	r9, r9, #31
 800b880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b884:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b888:	d02b      	beq.n	800b8e2 <__lshift+0xbe>
 800b88a:	f1c9 0e20 	rsb	lr, r9, #32
 800b88e:	468a      	mov	sl, r1
 800b890:	2200      	movs	r2, #0
 800b892:	6818      	ldr	r0, [r3, #0]
 800b894:	fa00 f009 	lsl.w	r0, r0, r9
 800b898:	4310      	orrs	r0, r2
 800b89a:	f84a 0b04 	str.w	r0, [sl], #4
 800b89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a2:	459c      	cmp	ip, r3
 800b8a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8a8:	d8f3      	bhi.n	800b892 <__lshift+0x6e>
 800b8aa:	ebac 0304 	sub.w	r3, ip, r4
 800b8ae:	3b15      	subs	r3, #21
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	f104 0015 	add.w	r0, r4, #21
 800b8ba:	4584      	cmp	ip, r0
 800b8bc:	bf38      	it	cc
 800b8be:	2304      	movcc	r3, #4
 800b8c0:	50ca      	str	r2, [r1, r3]
 800b8c2:	b10a      	cbz	r2, 800b8c8 <__lshift+0xa4>
 800b8c4:	f108 0602 	add.w	r6, r8, #2
 800b8c8:	3e01      	subs	r6, #1
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	612e      	str	r6, [r5, #16]
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	f7ff fd90 	bl	800b3f4 <_Bfree>
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8da:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8de:	3301      	adds	r3, #1
 800b8e0:	e7c5      	b.n	800b86e <__lshift+0x4a>
 800b8e2:	3904      	subs	r1, #4
 800b8e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8ec:	459c      	cmp	ip, r3
 800b8ee:	d8f9      	bhi.n	800b8e4 <__lshift+0xc0>
 800b8f0:	e7ea      	b.n	800b8c8 <__lshift+0xa4>
 800b8f2:	bf00      	nop
 800b8f4:	0800e6ed 	.word	0x0800e6ed
 800b8f8:	0800e6fe 	.word	0x0800e6fe

0800b8fc <__mcmp>:
 800b8fc:	690a      	ldr	r2, [r1, #16]
 800b8fe:	4603      	mov	r3, r0
 800b900:	6900      	ldr	r0, [r0, #16]
 800b902:	1a80      	subs	r0, r0, r2
 800b904:	b530      	push	{r4, r5, lr}
 800b906:	d10e      	bne.n	800b926 <__mcmp+0x2a>
 800b908:	3314      	adds	r3, #20
 800b90a:	3114      	adds	r1, #20
 800b90c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b910:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b91c:	4295      	cmp	r5, r2
 800b91e:	d003      	beq.n	800b928 <__mcmp+0x2c>
 800b920:	d205      	bcs.n	800b92e <__mcmp+0x32>
 800b922:	f04f 30ff 	mov.w	r0, #4294967295
 800b926:	bd30      	pop	{r4, r5, pc}
 800b928:	42a3      	cmp	r3, r4
 800b92a:	d3f3      	bcc.n	800b914 <__mcmp+0x18>
 800b92c:	e7fb      	b.n	800b926 <__mcmp+0x2a>
 800b92e:	2001      	movs	r0, #1
 800b930:	e7f9      	b.n	800b926 <__mcmp+0x2a>
	...

0800b934 <__mdiff>:
 800b934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b938:	4689      	mov	r9, r1
 800b93a:	4606      	mov	r6, r0
 800b93c:	4611      	mov	r1, r2
 800b93e:	4648      	mov	r0, r9
 800b940:	4614      	mov	r4, r2
 800b942:	f7ff ffdb 	bl	800b8fc <__mcmp>
 800b946:	1e05      	subs	r5, r0, #0
 800b948:	d112      	bne.n	800b970 <__mdiff+0x3c>
 800b94a:	4629      	mov	r1, r5
 800b94c:	4630      	mov	r0, r6
 800b94e:	f7ff fd11 	bl	800b374 <_Balloc>
 800b952:	4602      	mov	r2, r0
 800b954:	b928      	cbnz	r0, 800b962 <__mdiff+0x2e>
 800b956:	4b3f      	ldr	r3, [pc, #252]	@ (800ba54 <__mdiff+0x120>)
 800b958:	f240 2137 	movw	r1, #567	@ 0x237
 800b95c:	483e      	ldr	r0, [pc, #248]	@ (800ba58 <__mdiff+0x124>)
 800b95e:	f001 fa43 	bl	800cde8 <__assert_func>
 800b962:	2301      	movs	r3, #1
 800b964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b968:	4610      	mov	r0, r2
 800b96a:	b003      	add	sp, #12
 800b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b970:	bfbc      	itt	lt
 800b972:	464b      	movlt	r3, r9
 800b974:	46a1      	movlt	r9, r4
 800b976:	4630      	mov	r0, r6
 800b978:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b97c:	bfba      	itte	lt
 800b97e:	461c      	movlt	r4, r3
 800b980:	2501      	movlt	r5, #1
 800b982:	2500      	movge	r5, #0
 800b984:	f7ff fcf6 	bl	800b374 <_Balloc>
 800b988:	4602      	mov	r2, r0
 800b98a:	b918      	cbnz	r0, 800b994 <__mdiff+0x60>
 800b98c:	4b31      	ldr	r3, [pc, #196]	@ (800ba54 <__mdiff+0x120>)
 800b98e:	f240 2145 	movw	r1, #581	@ 0x245
 800b992:	e7e3      	b.n	800b95c <__mdiff+0x28>
 800b994:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b998:	6926      	ldr	r6, [r4, #16]
 800b99a:	60c5      	str	r5, [r0, #12]
 800b99c:	f109 0310 	add.w	r3, r9, #16
 800b9a0:	f109 0514 	add.w	r5, r9, #20
 800b9a4:	f104 0e14 	add.w	lr, r4, #20
 800b9a8:	f100 0b14 	add.w	fp, r0, #20
 800b9ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9b4:	9301      	str	r3, [sp, #4]
 800b9b6:	46d9      	mov	r9, fp
 800b9b8:	f04f 0c00 	mov.w	ip, #0
 800b9bc:	9b01      	ldr	r3, [sp, #4]
 800b9be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	fa1f f38a 	uxth.w	r3, sl
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	b283      	uxth	r3, r0
 800b9d0:	1acb      	subs	r3, r1, r3
 800b9d2:	0c00      	lsrs	r0, r0, #16
 800b9d4:	4463      	add	r3, ip
 800b9d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b9e4:	4576      	cmp	r6, lr
 800b9e6:	f849 3b04 	str.w	r3, [r9], #4
 800b9ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9ee:	d8e5      	bhi.n	800b9bc <__mdiff+0x88>
 800b9f0:	1b33      	subs	r3, r6, r4
 800b9f2:	3b15      	subs	r3, #21
 800b9f4:	f023 0303 	bic.w	r3, r3, #3
 800b9f8:	3415      	adds	r4, #21
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	42a6      	cmp	r6, r4
 800b9fe:	bf38      	it	cc
 800ba00:	2304      	movcc	r3, #4
 800ba02:	441d      	add	r5, r3
 800ba04:	445b      	add	r3, fp
 800ba06:	461e      	mov	r6, r3
 800ba08:	462c      	mov	r4, r5
 800ba0a:	4544      	cmp	r4, r8
 800ba0c:	d30e      	bcc.n	800ba2c <__mdiff+0xf8>
 800ba0e:	f108 0103 	add.w	r1, r8, #3
 800ba12:	1b49      	subs	r1, r1, r5
 800ba14:	f021 0103 	bic.w	r1, r1, #3
 800ba18:	3d03      	subs	r5, #3
 800ba1a:	45a8      	cmp	r8, r5
 800ba1c:	bf38      	it	cc
 800ba1e:	2100      	movcc	r1, #0
 800ba20:	440b      	add	r3, r1
 800ba22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba26:	b191      	cbz	r1, 800ba4e <__mdiff+0x11a>
 800ba28:	6117      	str	r7, [r2, #16]
 800ba2a:	e79d      	b.n	800b968 <__mdiff+0x34>
 800ba2c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba30:	46e6      	mov	lr, ip
 800ba32:	0c08      	lsrs	r0, r1, #16
 800ba34:	fa1c fc81 	uxtah	ip, ip, r1
 800ba38:	4471      	add	r1, lr
 800ba3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba3e:	b289      	uxth	r1, r1
 800ba40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba44:	f846 1b04 	str.w	r1, [r6], #4
 800ba48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba4c:	e7dd      	b.n	800ba0a <__mdiff+0xd6>
 800ba4e:	3f01      	subs	r7, #1
 800ba50:	e7e7      	b.n	800ba22 <__mdiff+0xee>
 800ba52:	bf00      	nop
 800ba54:	0800e6ed 	.word	0x0800e6ed
 800ba58:	0800e6fe 	.word	0x0800e6fe

0800ba5c <__ulp>:
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	ed8d 0b00 	vstr	d0, [sp]
 800ba62:	9a01      	ldr	r2, [sp, #4]
 800ba64:	4b0f      	ldr	r3, [pc, #60]	@ (800baa4 <__ulp+0x48>)
 800ba66:	4013      	ands	r3, r2
 800ba68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dc08      	bgt.n	800ba82 <__ulp+0x26>
 800ba70:	425b      	negs	r3, r3
 800ba72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ba76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba7a:	da04      	bge.n	800ba86 <__ulp+0x2a>
 800ba7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ba80:	4113      	asrs	r3, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	e008      	b.n	800ba98 <__ulp+0x3c>
 800ba86:	f1a2 0314 	sub.w	r3, r2, #20
 800ba8a:	2b1e      	cmp	r3, #30
 800ba8c:	bfda      	itte	le
 800ba8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ba92:	40da      	lsrle	r2, r3
 800ba94:	2201      	movgt	r2, #1
 800ba96:	2300      	movs	r3, #0
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	ec41 0b10 	vmov	d0, r0, r1
 800baa0:	b002      	add	sp, #8
 800baa2:	4770      	bx	lr
 800baa4:	7ff00000 	.word	0x7ff00000

0800baa8 <__b2d>:
 800baa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baac:	6906      	ldr	r6, [r0, #16]
 800baae:	f100 0814 	add.w	r8, r0, #20
 800bab2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bab6:	1f37      	subs	r7, r6, #4
 800bab8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800babc:	4610      	mov	r0, r2
 800babe:	f7ff fd4b 	bl	800b558 <__hi0bits>
 800bac2:	f1c0 0320 	rsb	r3, r0, #32
 800bac6:	280a      	cmp	r0, #10
 800bac8:	600b      	str	r3, [r1, #0]
 800baca:	491b      	ldr	r1, [pc, #108]	@ (800bb38 <__b2d+0x90>)
 800bacc:	dc15      	bgt.n	800bafa <__b2d+0x52>
 800bace:	f1c0 0c0b 	rsb	ip, r0, #11
 800bad2:	fa22 f30c 	lsr.w	r3, r2, ip
 800bad6:	45b8      	cmp	r8, r7
 800bad8:	ea43 0501 	orr.w	r5, r3, r1
 800badc:	bf34      	ite	cc
 800bade:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bae2:	2300      	movcs	r3, #0
 800bae4:	3015      	adds	r0, #21
 800bae6:	fa02 f000 	lsl.w	r0, r2, r0
 800baea:	fa23 f30c 	lsr.w	r3, r3, ip
 800baee:	4303      	orrs	r3, r0
 800baf0:	461c      	mov	r4, r3
 800baf2:	ec45 4b10 	vmov	d0, r4, r5
 800baf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bafa:	45b8      	cmp	r8, r7
 800bafc:	bf3a      	itte	cc
 800bafe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb02:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb06:	2300      	movcs	r3, #0
 800bb08:	380b      	subs	r0, #11
 800bb0a:	d012      	beq.n	800bb32 <__b2d+0x8a>
 800bb0c:	f1c0 0120 	rsb	r1, r0, #32
 800bb10:	fa23 f401 	lsr.w	r4, r3, r1
 800bb14:	4082      	lsls	r2, r0
 800bb16:	4322      	orrs	r2, r4
 800bb18:	4547      	cmp	r7, r8
 800bb1a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bb1e:	bf8c      	ite	hi
 800bb20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb24:	2200      	movls	r2, #0
 800bb26:	4083      	lsls	r3, r0
 800bb28:	40ca      	lsrs	r2, r1
 800bb2a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	e7de      	b.n	800baf0 <__b2d+0x48>
 800bb32:	ea42 0501 	orr.w	r5, r2, r1
 800bb36:	e7db      	b.n	800baf0 <__b2d+0x48>
 800bb38:	3ff00000 	.word	0x3ff00000

0800bb3c <__d2b>:
 800bb3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	460f      	mov	r7, r1
 800bb42:	2101      	movs	r1, #1
 800bb44:	ec59 8b10 	vmov	r8, r9, d0
 800bb48:	4616      	mov	r6, r2
 800bb4a:	f7ff fc13 	bl	800b374 <_Balloc>
 800bb4e:	4604      	mov	r4, r0
 800bb50:	b930      	cbnz	r0, 800bb60 <__d2b+0x24>
 800bb52:	4602      	mov	r2, r0
 800bb54:	4b23      	ldr	r3, [pc, #140]	@ (800bbe4 <__d2b+0xa8>)
 800bb56:	4824      	ldr	r0, [pc, #144]	@ (800bbe8 <__d2b+0xac>)
 800bb58:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb5c:	f001 f944 	bl	800cde8 <__assert_func>
 800bb60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb68:	b10d      	cbz	r5, 800bb6e <__d2b+0x32>
 800bb6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	f1b8 0300 	subs.w	r3, r8, #0
 800bb74:	d023      	beq.n	800bbbe <__d2b+0x82>
 800bb76:	4668      	mov	r0, sp
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	f7ff fd0c 	bl	800b596 <__lo0bits>
 800bb7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb82:	b1d0      	cbz	r0, 800bbba <__d2b+0x7e>
 800bb84:	f1c0 0320 	rsb	r3, r0, #32
 800bb88:	fa02 f303 	lsl.w	r3, r2, r3
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	40c2      	lsrs	r2, r0
 800bb90:	6163      	str	r3, [r4, #20]
 800bb92:	9201      	str	r2, [sp, #4]
 800bb94:	9b01      	ldr	r3, [sp, #4]
 800bb96:	61a3      	str	r3, [r4, #24]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	bf0c      	ite	eq
 800bb9c:	2201      	moveq	r2, #1
 800bb9e:	2202      	movne	r2, #2
 800bba0:	6122      	str	r2, [r4, #16]
 800bba2:	b1a5      	cbz	r5, 800bbce <__d2b+0x92>
 800bba4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bba8:	4405      	add	r5, r0
 800bbaa:	603d      	str	r5, [r7, #0]
 800bbac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbb0:	6030      	str	r0, [r6, #0]
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	b003      	add	sp, #12
 800bbb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbba:	6161      	str	r1, [r4, #20]
 800bbbc:	e7ea      	b.n	800bb94 <__d2b+0x58>
 800bbbe:	a801      	add	r0, sp, #4
 800bbc0:	f7ff fce9 	bl	800b596 <__lo0bits>
 800bbc4:	9b01      	ldr	r3, [sp, #4]
 800bbc6:	6163      	str	r3, [r4, #20]
 800bbc8:	3020      	adds	r0, #32
 800bbca:	2201      	movs	r2, #1
 800bbcc:	e7e8      	b.n	800bba0 <__d2b+0x64>
 800bbce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbd6:	6038      	str	r0, [r7, #0]
 800bbd8:	6918      	ldr	r0, [r3, #16]
 800bbda:	f7ff fcbd 	bl	800b558 <__hi0bits>
 800bbde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbe2:	e7e5      	b.n	800bbb0 <__d2b+0x74>
 800bbe4:	0800e6ed 	.word	0x0800e6ed
 800bbe8:	0800e6fe 	.word	0x0800e6fe

0800bbec <__ratio>:
 800bbec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	4688      	mov	r8, r1
 800bbf2:	4669      	mov	r1, sp
 800bbf4:	4681      	mov	r9, r0
 800bbf6:	f7ff ff57 	bl	800baa8 <__b2d>
 800bbfa:	a901      	add	r1, sp, #4
 800bbfc:	4640      	mov	r0, r8
 800bbfe:	ec55 4b10 	vmov	r4, r5, d0
 800bc02:	f7ff ff51 	bl	800baa8 <__b2d>
 800bc06:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bc0a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bc14:	1a5b      	subs	r3, r3, r1
 800bc16:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bc1a:	ec57 6b10 	vmov	r6, r7, d0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bfd6      	itet	le
 800bc22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc26:	462a      	movgt	r2, r5
 800bc28:	463a      	movle	r2, r7
 800bc2a:	46ab      	mov	fp, r5
 800bc2c:	46a2      	mov	sl, r4
 800bc2e:	bfce      	itee	gt
 800bc30:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bc34:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bc38:	ee00 3a90 	vmovle	s1, r3
 800bc3c:	ec4b ab17 	vmov	d7, sl, fp
 800bc40:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bc44:	b003      	add	sp, #12
 800bc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc4a <__copybits>:
 800bc4a:	3901      	subs	r1, #1
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	1149      	asrs	r1, r1, #5
 800bc50:	6914      	ldr	r4, [r2, #16]
 800bc52:	3101      	adds	r1, #1
 800bc54:	f102 0314 	add.w	r3, r2, #20
 800bc58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc60:	1f05      	subs	r5, r0, #4
 800bc62:	42a3      	cmp	r3, r4
 800bc64:	d30c      	bcc.n	800bc80 <__copybits+0x36>
 800bc66:	1aa3      	subs	r3, r4, r2
 800bc68:	3b11      	subs	r3, #17
 800bc6a:	f023 0303 	bic.w	r3, r3, #3
 800bc6e:	3211      	adds	r2, #17
 800bc70:	42a2      	cmp	r2, r4
 800bc72:	bf88      	it	hi
 800bc74:	2300      	movhi	r3, #0
 800bc76:	4418      	add	r0, r3
 800bc78:	2300      	movs	r3, #0
 800bc7a:	4288      	cmp	r0, r1
 800bc7c:	d305      	bcc.n	800bc8a <__copybits+0x40>
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc84:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc88:	e7eb      	b.n	800bc62 <__copybits+0x18>
 800bc8a:	f840 3b04 	str.w	r3, [r0], #4
 800bc8e:	e7f4      	b.n	800bc7a <__copybits+0x30>

0800bc90 <__any_on>:
 800bc90:	f100 0214 	add.w	r2, r0, #20
 800bc94:	6900      	ldr	r0, [r0, #16]
 800bc96:	114b      	asrs	r3, r1, #5
 800bc98:	4298      	cmp	r0, r3
 800bc9a:	b510      	push	{r4, lr}
 800bc9c:	db11      	blt.n	800bcc2 <__any_on+0x32>
 800bc9e:	dd0a      	ble.n	800bcb6 <__any_on+0x26>
 800bca0:	f011 011f 	ands.w	r1, r1, #31
 800bca4:	d007      	beq.n	800bcb6 <__any_on+0x26>
 800bca6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcaa:	fa24 f001 	lsr.w	r0, r4, r1
 800bcae:	fa00 f101 	lsl.w	r1, r0, r1
 800bcb2:	428c      	cmp	r4, r1
 800bcb4:	d10b      	bne.n	800bcce <__any_on+0x3e>
 800bcb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d803      	bhi.n	800bcc6 <__any_on+0x36>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	bd10      	pop	{r4, pc}
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	e7f7      	b.n	800bcb6 <__any_on+0x26>
 800bcc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcca:	2900      	cmp	r1, #0
 800bccc:	d0f5      	beq.n	800bcba <__any_on+0x2a>
 800bcce:	2001      	movs	r0, #1
 800bcd0:	e7f6      	b.n	800bcc0 <__any_on+0x30>

0800bcd2 <sulp>:
 800bcd2:	b570      	push	{r4, r5, r6, lr}
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	460d      	mov	r5, r1
 800bcd8:	4616      	mov	r6, r2
 800bcda:	ec45 4b10 	vmov	d0, r4, r5
 800bcde:	f7ff febd 	bl	800ba5c <__ulp>
 800bce2:	b17e      	cbz	r6, 800bd04 <sulp+0x32>
 800bce4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bce8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	dd09      	ble.n	800bd04 <sulp+0x32>
 800bcf0:	051b      	lsls	r3, r3, #20
 800bcf2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800bcfc:	ec41 0b17 	vmov	d7, r0, r1
 800bd00:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd08 <_strtod_l>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	ed2d 8b0a 	vpush	{d8-d12}
 800bd10:	b097      	sub	sp, #92	@ 0x5c
 800bd12:	4688      	mov	r8, r1
 800bd14:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd16:	2200      	movs	r2, #0
 800bd18:	9212      	str	r2, [sp, #72]	@ 0x48
 800bd1a:	9005      	str	r0, [sp, #20]
 800bd1c:	f04f 0a00 	mov.w	sl, #0
 800bd20:	f04f 0b00 	mov.w	fp, #0
 800bd24:	460a      	mov	r2, r1
 800bd26:	9211      	str	r2, [sp, #68]	@ 0x44
 800bd28:	7811      	ldrb	r1, [r2, #0]
 800bd2a:	292b      	cmp	r1, #43	@ 0x2b
 800bd2c:	d04c      	beq.n	800bdc8 <_strtod_l+0xc0>
 800bd2e:	d839      	bhi.n	800bda4 <_strtod_l+0x9c>
 800bd30:	290d      	cmp	r1, #13
 800bd32:	d833      	bhi.n	800bd9c <_strtod_l+0x94>
 800bd34:	2908      	cmp	r1, #8
 800bd36:	d833      	bhi.n	800bda0 <_strtod_l+0x98>
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	d03c      	beq.n	800bdb6 <_strtod_l+0xae>
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	9208      	str	r2, [sp, #32]
 800bd40:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800bd42:	782a      	ldrb	r2, [r5, #0]
 800bd44:	2a30      	cmp	r2, #48	@ 0x30
 800bd46:	f040 80b5 	bne.w	800beb4 <_strtod_l+0x1ac>
 800bd4a:	786a      	ldrb	r2, [r5, #1]
 800bd4c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd50:	2a58      	cmp	r2, #88	@ 0x58
 800bd52:	d170      	bne.n	800be36 <_strtod_l+0x12e>
 800bd54:	9302      	str	r3, [sp, #8]
 800bd56:	9b08      	ldr	r3, [sp, #32]
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	ab12      	add	r3, sp, #72	@ 0x48
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	4a8b      	ldr	r2, [pc, #556]	@ (800bf8c <_strtod_l+0x284>)
 800bd60:	9805      	ldr	r0, [sp, #20]
 800bd62:	ab13      	add	r3, sp, #76	@ 0x4c
 800bd64:	a911      	add	r1, sp, #68	@ 0x44
 800bd66:	f001 f8d9 	bl	800cf1c <__gethex>
 800bd6a:	f010 060f 	ands.w	r6, r0, #15
 800bd6e:	4604      	mov	r4, r0
 800bd70:	d005      	beq.n	800bd7e <_strtod_l+0x76>
 800bd72:	2e06      	cmp	r6, #6
 800bd74:	d12a      	bne.n	800bdcc <_strtod_l+0xc4>
 800bd76:	3501      	adds	r5, #1
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9511      	str	r5, [sp, #68]	@ 0x44
 800bd7c:	9308      	str	r3, [sp, #32]
 800bd7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f040 852f 	bne.w	800c7e4 <_strtod_l+0xadc>
 800bd86:	9b08      	ldr	r3, [sp, #32]
 800bd88:	ec4b ab10 	vmov	d0, sl, fp
 800bd8c:	b1cb      	cbz	r3, 800bdc2 <_strtod_l+0xba>
 800bd8e:	eeb1 0b40 	vneg.f64	d0, d0
 800bd92:	b017      	add	sp, #92	@ 0x5c
 800bd94:	ecbd 8b0a 	vpop	{d8-d12}
 800bd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9c:	2920      	cmp	r1, #32
 800bd9e:	d1cd      	bne.n	800bd3c <_strtod_l+0x34>
 800bda0:	3201      	adds	r2, #1
 800bda2:	e7c0      	b.n	800bd26 <_strtod_l+0x1e>
 800bda4:	292d      	cmp	r1, #45	@ 0x2d
 800bda6:	d1c9      	bne.n	800bd3c <_strtod_l+0x34>
 800bda8:	2101      	movs	r1, #1
 800bdaa:	9108      	str	r1, [sp, #32]
 800bdac:	1c51      	adds	r1, r2, #1
 800bdae:	9111      	str	r1, [sp, #68]	@ 0x44
 800bdb0:	7852      	ldrb	r2, [r2, #1]
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	d1c4      	bne.n	800bd40 <_strtod_l+0x38>
 800bdb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdb8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f040 850f 	bne.w	800c7e0 <_strtod_l+0xad8>
 800bdc2:	ec4b ab10 	vmov	d0, sl, fp
 800bdc6:	e7e4      	b.n	800bd92 <_strtod_l+0x8a>
 800bdc8:	2100      	movs	r1, #0
 800bdca:	e7ee      	b.n	800bdaa <_strtod_l+0xa2>
 800bdcc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bdce:	b13a      	cbz	r2, 800bde0 <_strtod_l+0xd8>
 800bdd0:	2135      	movs	r1, #53	@ 0x35
 800bdd2:	a814      	add	r0, sp, #80	@ 0x50
 800bdd4:	f7ff ff39 	bl	800bc4a <__copybits>
 800bdd8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bdda:	9805      	ldr	r0, [sp, #20]
 800bddc:	f7ff fb0a 	bl	800b3f4 <_Bfree>
 800bde0:	1e73      	subs	r3, r6, #1
 800bde2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bde4:	2b04      	cmp	r3, #4
 800bde6:	d806      	bhi.n	800bdf6 <_strtod_l+0xee>
 800bde8:	e8df f003 	tbb	[pc, r3]
 800bdec:	201d0314 	.word	0x201d0314
 800bdf0:	14          	.byte	0x14
 800bdf1:	00          	.byte	0x00
 800bdf2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800bdf6:	05e3      	lsls	r3, r4, #23
 800bdf8:	bf48      	it	mi
 800bdfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bdfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be02:	0d1b      	lsrs	r3, r3, #20
 800be04:	051b      	lsls	r3, r3, #20
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1b9      	bne.n	800bd7e <_strtod_l+0x76>
 800be0a:	f7fe fba1 	bl	800a550 <__errno>
 800be0e:	2322      	movs	r3, #34	@ 0x22
 800be10:	6003      	str	r3, [r0, #0]
 800be12:	e7b4      	b.n	800bd7e <_strtod_l+0x76>
 800be14:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800be18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800be1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800be20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be24:	e7e7      	b.n	800bdf6 <_strtod_l+0xee>
 800be26:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800bf94 <_strtod_l+0x28c>
 800be2a:	e7e4      	b.n	800bdf6 <_strtod_l+0xee>
 800be2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800be30:	f04f 3aff 	mov.w	sl, #4294967295
 800be34:	e7df      	b.n	800bdf6 <_strtod_l+0xee>
 800be36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	9211      	str	r2, [sp, #68]	@ 0x44
 800be3c:	785b      	ldrb	r3, [r3, #1]
 800be3e:	2b30      	cmp	r3, #48	@ 0x30
 800be40:	d0f9      	beq.n	800be36 <_strtod_l+0x12e>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d09b      	beq.n	800bd7e <_strtod_l+0x76>
 800be46:	2301      	movs	r3, #1
 800be48:	2600      	movs	r6, #0
 800be4a:	9307      	str	r3, [sp, #28]
 800be4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be50:	46b1      	mov	r9, r6
 800be52:	4635      	mov	r5, r6
 800be54:	220a      	movs	r2, #10
 800be56:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800be58:	7804      	ldrb	r4, [r0, #0]
 800be5a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800be5e:	b2d9      	uxtb	r1, r3
 800be60:	2909      	cmp	r1, #9
 800be62:	d929      	bls.n	800beb8 <_strtod_l+0x1b0>
 800be64:	494a      	ldr	r1, [pc, #296]	@ (800bf90 <_strtod_l+0x288>)
 800be66:	2201      	movs	r2, #1
 800be68:	f000 ff84 	bl	800cd74 <strncmp>
 800be6c:	b378      	cbz	r0, 800bece <_strtod_l+0x1c6>
 800be6e:	2000      	movs	r0, #0
 800be70:	4622      	mov	r2, r4
 800be72:	462b      	mov	r3, r5
 800be74:	4607      	mov	r7, r0
 800be76:	9006      	str	r0, [sp, #24]
 800be78:	2a65      	cmp	r2, #101	@ 0x65
 800be7a:	d001      	beq.n	800be80 <_strtod_l+0x178>
 800be7c:	2a45      	cmp	r2, #69	@ 0x45
 800be7e:	d117      	bne.n	800beb0 <_strtod_l+0x1a8>
 800be80:	b91b      	cbnz	r3, 800be8a <_strtod_l+0x182>
 800be82:	9b07      	ldr	r3, [sp, #28]
 800be84:	4303      	orrs	r3, r0
 800be86:	d096      	beq.n	800bdb6 <_strtod_l+0xae>
 800be88:	2300      	movs	r3, #0
 800be8a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800be8e:	f108 0201 	add.w	r2, r8, #1
 800be92:	9211      	str	r2, [sp, #68]	@ 0x44
 800be94:	f898 2001 	ldrb.w	r2, [r8, #1]
 800be98:	2a2b      	cmp	r2, #43	@ 0x2b
 800be9a:	d06b      	beq.n	800bf74 <_strtod_l+0x26c>
 800be9c:	2a2d      	cmp	r2, #45	@ 0x2d
 800be9e:	d071      	beq.n	800bf84 <_strtod_l+0x27c>
 800bea0:	f04f 0e00 	mov.w	lr, #0
 800bea4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800bea8:	2c09      	cmp	r4, #9
 800beaa:	d979      	bls.n	800bfa0 <_strtod_l+0x298>
 800beac:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800beb0:	2400      	movs	r4, #0
 800beb2:	e094      	b.n	800bfde <_strtod_l+0x2d6>
 800beb4:	2300      	movs	r3, #0
 800beb6:	e7c7      	b.n	800be48 <_strtod_l+0x140>
 800beb8:	2d08      	cmp	r5, #8
 800beba:	f100 0001 	add.w	r0, r0, #1
 800bebe:	bfd4      	ite	le
 800bec0:	fb02 3909 	mlale	r9, r2, r9, r3
 800bec4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800bec8:	3501      	adds	r5, #1
 800beca:	9011      	str	r0, [sp, #68]	@ 0x44
 800becc:	e7c3      	b.n	800be56 <_strtod_l+0x14e>
 800bece:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	9211      	str	r2, [sp, #68]	@ 0x44
 800bed4:	785a      	ldrb	r2, [r3, #1]
 800bed6:	b375      	cbz	r5, 800bf36 <_strtod_l+0x22e>
 800bed8:	4607      	mov	r7, r0
 800beda:	462b      	mov	r3, r5
 800bedc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bee0:	2909      	cmp	r1, #9
 800bee2:	d913      	bls.n	800bf0c <_strtod_l+0x204>
 800bee4:	2101      	movs	r1, #1
 800bee6:	9106      	str	r1, [sp, #24]
 800bee8:	e7c6      	b.n	800be78 <_strtod_l+0x170>
 800beea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800beec:	1c5a      	adds	r2, r3, #1
 800beee:	9211      	str	r2, [sp, #68]	@ 0x44
 800bef0:	785a      	ldrb	r2, [r3, #1]
 800bef2:	3001      	adds	r0, #1
 800bef4:	2a30      	cmp	r2, #48	@ 0x30
 800bef6:	d0f8      	beq.n	800beea <_strtod_l+0x1e2>
 800bef8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800befc:	2b08      	cmp	r3, #8
 800befe:	f200 8476 	bhi.w	800c7ee <_strtod_l+0xae6>
 800bf02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf04:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf06:	4607      	mov	r7, r0
 800bf08:	2000      	movs	r0, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	3a30      	subs	r2, #48	@ 0x30
 800bf0e:	f100 0101 	add.w	r1, r0, #1
 800bf12:	d023      	beq.n	800bf5c <_strtod_l+0x254>
 800bf14:	440f      	add	r7, r1
 800bf16:	eb00 0c03 	add.w	ip, r0, r3
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	240a      	movs	r4, #10
 800bf1e:	4561      	cmp	r1, ip
 800bf20:	d10b      	bne.n	800bf3a <_strtod_l+0x232>
 800bf22:	1c5c      	adds	r4, r3, #1
 800bf24:	4403      	add	r3, r0
 800bf26:	2b08      	cmp	r3, #8
 800bf28:	4404      	add	r4, r0
 800bf2a:	dc11      	bgt.n	800bf50 <_strtod_l+0x248>
 800bf2c:	230a      	movs	r3, #10
 800bf2e:	fb03 2909 	mla	r9, r3, r9, r2
 800bf32:	2100      	movs	r1, #0
 800bf34:	e013      	b.n	800bf5e <_strtod_l+0x256>
 800bf36:	4628      	mov	r0, r5
 800bf38:	e7dc      	b.n	800bef4 <_strtod_l+0x1ec>
 800bf3a:	2908      	cmp	r1, #8
 800bf3c:	f101 0101 	add.w	r1, r1, #1
 800bf40:	dc02      	bgt.n	800bf48 <_strtod_l+0x240>
 800bf42:	fb04 f909 	mul.w	r9, r4, r9
 800bf46:	e7ea      	b.n	800bf1e <_strtod_l+0x216>
 800bf48:	2910      	cmp	r1, #16
 800bf4a:	bfd8      	it	le
 800bf4c:	4366      	mulle	r6, r4
 800bf4e:	e7e6      	b.n	800bf1e <_strtod_l+0x216>
 800bf50:	2b0f      	cmp	r3, #15
 800bf52:	dcee      	bgt.n	800bf32 <_strtod_l+0x22a>
 800bf54:	230a      	movs	r3, #10
 800bf56:	fb03 2606 	mla	r6, r3, r6, r2
 800bf5a:	e7ea      	b.n	800bf32 <_strtod_l+0x22a>
 800bf5c:	461c      	mov	r4, r3
 800bf5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf60:	1c5a      	adds	r2, r3, #1
 800bf62:	9211      	str	r2, [sp, #68]	@ 0x44
 800bf64:	785a      	ldrb	r2, [r3, #1]
 800bf66:	4608      	mov	r0, r1
 800bf68:	4623      	mov	r3, r4
 800bf6a:	e7b7      	b.n	800bedc <_strtod_l+0x1d4>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	2700      	movs	r7, #0
 800bf70:	9306      	str	r3, [sp, #24]
 800bf72:	e786      	b.n	800be82 <_strtod_l+0x17a>
 800bf74:	f04f 0e00 	mov.w	lr, #0
 800bf78:	f108 0202 	add.w	r2, r8, #2
 800bf7c:	9211      	str	r2, [sp, #68]	@ 0x44
 800bf7e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bf82:	e78f      	b.n	800bea4 <_strtod_l+0x19c>
 800bf84:	f04f 0e01 	mov.w	lr, #1
 800bf88:	e7f6      	b.n	800bf78 <_strtod_l+0x270>
 800bf8a:	bf00      	nop
 800bf8c:	0800e870 	.word	0x0800e870
 800bf90:	0800e858 	.word	0x0800e858
 800bf94:	7ff00000 	.word	0x7ff00000
 800bf98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf9a:	1c54      	adds	r4, r2, #1
 800bf9c:	9411      	str	r4, [sp, #68]	@ 0x44
 800bf9e:	7852      	ldrb	r2, [r2, #1]
 800bfa0:	2a30      	cmp	r2, #48	@ 0x30
 800bfa2:	d0f9      	beq.n	800bf98 <_strtod_l+0x290>
 800bfa4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800bfa8:	2c08      	cmp	r4, #8
 800bfaa:	d881      	bhi.n	800beb0 <_strtod_l+0x1a8>
 800bfac:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800bfb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bfb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfb4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bfb6:	1c51      	adds	r1, r2, #1
 800bfb8:	9111      	str	r1, [sp, #68]	@ 0x44
 800bfba:	7852      	ldrb	r2, [r2, #1]
 800bfbc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800bfc0:	2c09      	cmp	r4, #9
 800bfc2:	d938      	bls.n	800c036 <_strtod_l+0x32e>
 800bfc4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bfc6:	1b0c      	subs	r4, r1, r4
 800bfc8:	2c08      	cmp	r4, #8
 800bfca:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800bfce:	dc02      	bgt.n	800bfd6 <_strtod_l+0x2ce>
 800bfd0:	4564      	cmp	r4, ip
 800bfd2:	bfa8      	it	ge
 800bfd4:	4664      	movge	r4, ip
 800bfd6:	f1be 0f00 	cmp.w	lr, #0
 800bfda:	d000      	beq.n	800bfde <_strtod_l+0x2d6>
 800bfdc:	4264      	negs	r4, r4
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d14e      	bne.n	800c080 <_strtod_l+0x378>
 800bfe2:	9b07      	ldr	r3, [sp, #28]
 800bfe4:	4318      	orrs	r0, r3
 800bfe6:	f47f aeca 	bne.w	800bd7e <_strtod_l+0x76>
 800bfea:	9b06      	ldr	r3, [sp, #24]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f47f aee2 	bne.w	800bdb6 <_strtod_l+0xae>
 800bff2:	2a69      	cmp	r2, #105	@ 0x69
 800bff4:	d027      	beq.n	800c046 <_strtod_l+0x33e>
 800bff6:	dc24      	bgt.n	800c042 <_strtod_l+0x33a>
 800bff8:	2a49      	cmp	r2, #73	@ 0x49
 800bffa:	d024      	beq.n	800c046 <_strtod_l+0x33e>
 800bffc:	2a4e      	cmp	r2, #78	@ 0x4e
 800bffe:	f47f aeda 	bne.w	800bdb6 <_strtod_l+0xae>
 800c002:	4997      	ldr	r1, [pc, #604]	@ (800c260 <_strtod_l+0x558>)
 800c004:	a811      	add	r0, sp, #68	@ 0x44
 800c006:	f001 f9ab 	bl	800d360 <__match>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	f43f aed3 	beq.w	800bdb6 <_strtod_l+0xae>
 800c010:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b28      	cmp	r3, #40	@ 0x28
 800c016:	d12d      	bne.n	800c074 <_strtod_l+0x36c>
 800c018:	4992      	ldr	r1, [pc, #584]	@ (800c264 <_strtod_l+0x55c>)
 800c01a:	aa14      	add	r2, sp, #80	@ 0x50
 800c01c:	a811      	add	r0, sp, #68	@ 0x44
 800c01e:	f001 f9b3 	bl	800d388 <__hexnan>
 800c022:	2805      	cmp	r0, #5
 800c024:	d126      	bne.n	800c074 <_strtod_l+0x36c>
 800c026:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c028:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c02c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c030:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c034:	e6a3      	b.n	800bd7e <_strtod_l+0x76>
 800c036:	240a      	movs	r4, #10
 800c038:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c03c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c040:	e7b8      	b.n	800bfb4 <_strtod_l+0x2ac>
 800c042:	2a6e      	cmp	r2, #110	@ 0x6e
 800c044:	e7db      	b.n	800bffe <_strtod_l+0x2f6>
 800c046:	4988      	ldr	r1, [pc, #544]	@ (800c268 <_strtod_l+0x560>)
 800c048:	a811      	add	r0, sp, #68	@ 0x44
 800c04a:	f001 f989 	bl	800d360 <__match>
 800c04e:	2800      	cmp	r0, #0
 800c050:	f43f aeb1 	beq.w	800bdb6 <_strtod_l+0xae>
 800c054:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c056:	4985      	ldr	r1, [pc, #532]	@ (800c26c <_strtod_l+0x564>)
 800c058:	3b01      	subs	r3, #1
 800c05a:	a811      	add	r0, sp, #68	@ 0x44
 800c05c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c05e:	f001 f97f 	bl	800d360 <__match>
 800c062:	b910      	cbnz	r0, 800c06a <_strtod_l+0x362>
 800c064:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c066:	3301      	adds	r3, #1
 800c068:	9311      	str	r3, [sp, #68]	@ 0x44
 800c06a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c280 <_strtod_l+0x578>
 800c06e:	f04f 0a00 	mov.w	sl, #0
 800c072:	e684      	b.n	800bd7e <_strtod_l+0x76>
 800c074:	487e      	ldr	r0, [pc, #504]	@ (800c270 <_strtod_l+0x568>)
 800c076:	f000 feaf 	bl	800cdd8 <nan>
 800c07a:	ec5b ab10 	vmov	sl, fp, d0
 800c07e:	e67e      	b.n	800bd7e <_strtod_l+0x76>
 800c080:	ee07 9a90 	vmov	s15, r9
 800c084:	1be2      	subs	r2, r4, r7
 800c086:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c08a:	2d00      	cmp	r5, #0
 800c08c:	bf08      	it	eq
 800c08e:	461d      	moveq	r5, r3
 800c090:	2b10      	cmp	r3, #16
 800c092:	9209      	str	r2, [sp, #36]	@ 0x24
 800c094:	461a      	mov	r2, r3
 800c096:	bfa8      	it	ge
 800c098:	2210      	movge	r2, #16
 800c09a:	2b09      	cmp	r3, #9
 800c09c:	ec5b ab17 	vmov	sl, fp, d7
 800c0a0:	dc15      	bgt.n	800c0ce <_strtod_l+0x3c6>
 800c0a2:	1be1      	subs	r1, r4, r7
 800c0a4:	2900      	cmp	r1, #0
 800c0a6:	f43f ae6a 	beq.w	800bd7e <_strtod_l+0x76>
 800c0aa:	eba4 0107 	sub.w	r1, r4, r7
 800c0ae:	dd72      	ble.n	800c196 <_strtod_l+0x48e>
 800c0b0:	2916      	cmp	r1, #22
 800c0b2:	dc59      	bgt.n	800c168 <_strtod_l+0x460>
 800c0b4:	4b6f      	ldr	r3, [pc, #444]	@ (800c274 <_strtod_l+0x56c>)
 800c0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0bc:	ed93 7b00 	vldr	d7, [r3]
 800c0c0:	ec4b ab16 	vmov	d6, sl, fp
 800c0c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0c8:	ec5b ab17 	vmov	sl, fp, d7
 800c0cc:	e657      	b.n	800bd7e <_strtod_l+0x76>
 800c0ce:	4969      	ldr	r1, [pc, #420]	@ (800c274 <_strtod_l+0x56c>)
 800c0d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c0d4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c0d8:	ee06 6a90 	vmov	s13, r6
 800c0dc:	2b0f      	cmp	r3, #15
 800c0de:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c0e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c0e6:	ec5b ab16 	vmov	sl, fp, d6
 800c0ea:	ddda      	ble.n	800c0a2 <_strtod_l+0x39a>
 800c0ec:	1a9a      	subs	r2, r3, r2
 800c0ee:	1be1      	subs	r1, r4, r7
 800c0f0:	440a      	add	r2, r1
 800c0f2:	2a00      	cmp	r2, #0
 800c0f4:	f340 8094 	ble.w	800c220 <_strtod_l+0x518>
 800c0f8:	f012 000f 	ands.w	r0, r2, #15
 800c0fc:	d00a      	beq.n	800c114 <_strtod_l+0x40c>
 800c0fe:	495d      	ldr	r1, [pc, #372]	@ (800c274 <_strtod_l+0x56c>)
 800c100:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c104:	ed91 7b00 	vldr	d7, [r1]
 800c108:	ec4b ab16 	vmov	d6, sl, fp
 800c10c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c110:	ec5b ab17 	vmov	sl, fp, d7
 800c114:	f032 020f 	bics.w	r2, r2, #15
 800c118:	d073      	beq.n	800c202 <_strtod_l+0x4fa>
 800c11a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c11e:	dd47      	ble.n	800c1b0 <_strtod_l+0x4a8>
 800c120:	2400      	movs	r4, #0
 800c122:	4625      	mov	r5, r4
 800c124:	9407      	str	r4, [sp, #28]
 800c126:	4626      	mov	r6, r4
 800c128:	9a05      	ldr	r2, [sp, #20]
 800c12a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c280 <_strtod_l+0x578>
 800c12e:	2322      	movs	r3, #34	@ 0x22
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	f04f 0a00 	mov.w	sl, #0
 800c136:	9b07      	ldr	r3, [sp, #28]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f43f ae20 	beq.w	800bd7e <_strtod_l+0x76>
 800c13e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c140:	9805      	ldr	r0, [sp, #20]
 800c142:	f7ff f957 	bl	800b3f4 <_Bfree>
 800c146:	9805      	ldr	r0, [sp, #20]
 800c148:	4631      	mov	r1, r6
 800c14a:	f7ff f953 	bl	800b3f4 <_Bfree>
 800c14e:	9805      	ldr	r0, [sp, #20]
 800c150:	4629      	mov	r1, r5
 800c152:	f7ff f94f 	bl	800b3f4 <_Bfree>
 800c156:	9907      	ldr	r1, [sp, #28]
 800c158:	9805      	ldr	r0, [sp, #20]
 800c15a:	f7ff f94b 	bl	800b3f4 <_Bfree>
 800c15e:	9805      	ldr	r0, [sp, #20]
 800c160:	4621      	mov	r1, r4
 800c162:	f7ff f947 	bl	800b3f4 <_Bfree>
 800c166:	e60a      	b.n	800bd7e <_strtod_l+0x76>
 800c168:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c16c:	1be0      	subs	r0, r4, r7
 800c16e:	4281      	cmp	r1, r0
 800c170:	dbbc      	blt.n	800c0ec <_strtod_l+0x3e4>
 800c172:	4a40      	ldr	r2, [pc, #256]	@ (800c274 <_strtod_l+0x56c>)
 800c174:	f1c3 030f 	rsb	r3, r3, #15
 800c178:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c17c:	ed91 7b00 	vldr	d7, [r1]
 800c180:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c182:	ec4b ab16 	vmov	d6, sl, fp
 800c186:	1acb      	subs	r3, r1, r3
 800c188:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c18c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c190:	ed92 6b00 	vldr	d6, [r2]
 800c194:	e796      	b.n	800c0c4 <_strtod_l+0x3bc>
 800c196:	3116      	adds	r1, #22
 800c198:	dba8      	blt.n	800c0ec <_strtod_l+0x3e4>
 800c19a:	4b36      	ldr	r3, [pc, #216]	@ (800c274 <_strtod_l+0x56c>)
 800c19c:	1b3c      	subs	r4, r7, r4
 800c19e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c1a2:	ed94 7b00 	vldr	d7, [r4]
 800c1a6:	ec4b ab16 	vmov	d6, sl, fp
 800c1aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c1ae:	e78b      	b.n	800c0c8 <_strtod_l+0x3c0>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	ec4b ab17 	vmov	d7, sl, fp
 800c1b6:	4e30      	ldr	r6, [pc, #192]	@ (800c278 <_strtod_l+0x570>)
 800c1b8:	1112      	asrs	r2, r2, #4
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	2a01      	cmp	r2, #1
 800c1be:	dc23      	bgt.n	800c208 <_strtod_l+0x500>
 800c1c0:	b108      	cbz	r0, 800c1c6 <_strtod_l+0x4be>
 800c1c2:	ec5b ab17 	vmov	sl, fp, d7
 800c1c6:	4a2c      	ldr	r2, [pc, #176]	@ (800c278 <_strtod_l+0x570>)
 800c1c8:	482c      	ldr	r0, [pc, #176]	@ (800c27c <_strtod_l+0x574>)
 800c1ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c1ce:	ed92 7b00 	vldr	d7, [r2]
 800c1d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c1d6:	ec4b ab16 	vmov	d6, sl, fp
 800c1da:	4a29      	ldr	r2, [pc, #164]	@ (800c280 <_strtod_l+0x578>)
 800c1dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1e0:	ee17 1a90 	vmov	r1, s15
 800c1e4:	400a      	ands	r2, r1
 800c1e6:	4282      	cmp	r2, r0
 800c1e8:	ec5b ab17 	vmov	sl, fp, d7
 800c1ec:	d898      	bhi.n	800c120 <_strtod_l+0x418>
 800c1ee:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c1f2:	4282      	cmp	r2, r0
 800c1f4:	bf86      	itte	hi
 800c1f6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c284 <_strtod_l+0x57c>
 800c1fa:	f04f 3aff 	movhi.w	sl, #4294967295
 800c1fe:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c202:	2200      	movs	r2, #0
 800c204:	9206      	str	r2, [sp, #24]
 800c206:	e076      	b.n	800c2f6 <_strtod_l+0x5ee>
 800c208:	f012 0f01 	tst.w	r2, #1
 800c20c:	d004      	beq.n	800c218 <_strtod_l+0x510>
 800c20e:	ed96 6b00 	vldr	d6, [r6]
 800c212:	2001      	movs	r0, #1
 800c214:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c218:	3101      	adds	r1, #1
 800c21a:	1052      	asrs	r2, r2, #1
 800c21c:	3608      	adds	r6, #8
 800c21e:	e7cd      	b.n	800c1bc <_strtod_l+0x4b4>
 800c220:	d0ef      	beq.n	800c202 <_strtod_l+0x4fa>
 800c222:	4252      	negs	r2, r2
 800c224:	f012 000f 	ands.w	r0, r2, #15
 800c228:	d00a      	beq.n	800c240 <_strtod_l+0x538>
 800c22a:	4912      	ldr	r1, [pc, #72]	@ (800c274 <_strtod_l+0x56c>)
 800c22c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c230:	ed91 7b00 	vldr	d7, [r1]
 800c234:	ec4b ab16 	vmov	d6, sl, fp
 800c238:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c23c:	ec5b ab17 	vmov	sl, fp, d7
 800c240:	1112      	asrs	r2, r2, #4
 800c242:	d0de      	beq.n	800c202 <_strtod_l+0x4fa>
 800c244:	2a1f      	cmp	r2, #31
 800c246:	dd1f      	ble.n	800c288 <_strtod_l+0x580>
 800c248:	2400      	movs	r4, #0
 800c24a:	4625      	mov	r5, r4
 800c24c:	9407      	str	r4, [sp, #28]
 800c24e:	4626      	mov	r6, r4
 800c250:	9a05      	ldr	r2, [sp, #20]
 800c252:	2322      	movs	r3, #34	@ 0x22
 800c254:	f04f 0a00 	mov.w	sl, #0
 800c258:	f04f 0b00 	mov.w	fp, #0
 800c25c:	6013      	str	r3, [r2, #0]
 800c25e:	e76a      	b.n	800c136 <_strtod_l+0x42e>
 800c260:	0800e645 	.word	0x0800e645
 800c264:	0800e85c 	.word	0x0800e85c
 800c268:	0800e63d 	.word	0x0800e63d
 800c26c:	0800e674 	.word	0x0800e674
 800c270:	0800ea05 	.word	0x0800ea05
 800c274:	0800e790 	.word	0x0800e790
 800c278:	0800e768 	.word	0x0800e768
 800c27c:	7ca00000 	.word	0x7ca00000
 800c280:	7ff00000 	.word	0x7ff00000
 800c284:	7fefffff 	.word	0x7fefffff
 800c288:	f012 0110 	ands.w	r1, r2, #16
 800c28c:	bf18      	it	ne
 800c28e:	216a      	movne	r1, #106	@ 0x6a
 800c290:	9106      	str	r1, [sp, #24]
 800c292:	ec4b ab17 	vmov	d7, sl, fp
 800c296:	49b0      	ldr	r1, [pc, #704]	@ (800c558 <_strtod_l+0x850>)
 800c298:	2000      	movs	r0, #0
 800c29a:	07d6      	lsls	r6, r2, #31
 800c29c:	d504      	bpl.n	800c2a8 <_strtod_l+0x5a0>
 800c29e:	ed91 6b00 	vldr	d6, [r1]
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2a8:	1052      	asrs	r2, r2, #1
 800c2aa:	f101 0108 	add.w	r1, r1, #8
 800c2ae:	d1f4      	bne.n	800c29a <_strtod_l+0x592>
 800c2b0:	b108      	cbz	r0, 800c2b6 <_strtod_l+0x5ae>
 800c2b2:	ec5b ab17 	vmov	sl, fp, d7
 800c2b6:	9a06      	ldr	r2, [sp, #24]
 800c2b8:	b1b2      	cbz	r2, 800c2e8 <_strtod_l+0x5e0>
 800c2ba:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c2be:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	4658      	mov	r0, fp
 800c2c6:	dd0f      	ble.n	800c2e8 <_strtod_l+0x5e0>
 800c2c8:	2a1f      	cmp	r2, #31
 800c2ca:	dd55      	ble.n	800c378 <_strtod_l+0x670>
 800c2cc:	2a34      	cmp	r2, #52	@ 0x34
 800c2ce:	bfde      	ittt	le
 800c2d0:	f04f 32ff 	movle.w	r2, #4294967295
 800c2d4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c2d8:	408a      	lslle	r2, r1
 800c2da:	f04f 0a00 	mov.w	sl, #0
 800c2de:	bfcc      	ite	gt
 800c2e0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c2e4:	ea02 0b00 	andle.w	fp, r2, r0
 800c2e8:	ec4b ab17 	vmov	d7, sl, fp
 800c2ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f4:	d0a8      	beq.n	800c248 <_strtod_l+0x540>
 800c2f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2f8:	9805      	ldr	r0, [sp, #20]
 800c2fa:	f8cd 9000 	str.w	r9, [sp]
 800c2fe:	462a      	mov	r2, r5
 800c300:	f7ff f8e0 	bl	800b4c4 <__s2b>
 800c304:	9007      	str	r0, [sp, #28]
 800c306:	2800      	cmp	r0, #0
 800c308:	f43f af0a 	beq.w	800c120 <_strtod_l+0x418>
 800c30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c30e:	1b3f      	subs	r7, r7, r4
 800c310:	2b00      	cmp	r3, #0
 800c312:	bfb4      	ite	lt
 800c314:	463b      	movlt	r3, r7
 800c316:	2300      	movge	r3, #0
 800c318:	930a      	str	r3, [sp, #40]	@ 0x28
 800c31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c31c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800c548 <_strtod_l+0x840>
 800c320:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c324:	2400      	movs	r4, #0
 800c326:	930d      	str	r3, [sp, #52]	@ 0x34
 800c328:	4625      	mov	r5, r4
 800c32a:	9b07      	ldr	r3, [sp, #28]
 800c32c:	9805      	ldr	r0, [sp, #20]
 800c32e:	6859      	ldr	r1, [r3, #4]
 800c330:	f7ff f820 	bl	800b374 <_Balloc>
 800c334:	4606      	mov	r6, r0
 800c336:	2800      	cmp	r0, #0
 800c338:	f43f aef6 	beq.w	800c128 <_strtod_l+0x420>
 800c33c:	9b07      	ldr	r3, [sp, #28]
 800c33e:	691a      	ldr	r2, [r3, #16]
 800c340:	ec4b ab19 	vmov	d9, sl, fp
 800c344:	3202      	adds	r2, #2
 800c346:	f103 010c 	add.w	r1, r3, #12
 800c34a:	0092      	lsls	r2, r2, #2
 800c34c:	300c      	adds	r0, #12
 800c34e:	f000 fd33 	bl	800cdb8 <memcpy>
 800c352:	eeb0 0b49 	vmov.f64	d0, d9
 800c356:	9805      	ldr	r0, [sp, #20]
 800c358:	aa14      	add	r2, sp, #80	@ 0x50
 800c35a:	a913      	add	r1, sp, #76	@ 0x4c
 800c35c:	f7ff fbee 	bl	800bb3c <__d2b>
 800c360:	9012      	str	r0, [sp, #72]	@ 0x48
 800c362:	2800      	cmp	r0, #0
 800c364:	f43f aee0 	beq.w	800c128 <_strtod_l+0x420>
 800c368:	9805      	ldr	r0, [sp, #20]
 800c36a:	2101      	movs	r1, #1
 800c36c:	f7ff f940 	bl	800b5f0 <__i2b>
 800c370:	4605      	mov	r5, r0
 800c372:	b940      	cbnz	r0, 800c386 <_strtod_l+0x67e>
 800c374:	2500      	movs	r5, #0
 800c376:	e6d7      	b.n	800c128 <_strtod_l+0x420>
 800c378:	f04f 31ff 	mov.w	r1, #4294967295
 800c37c:	fa01 f202 	lsl.w	r2, r1, r2
 800c380:	ea02 0a0a 	and.w	sl, r2, sl
 800c384:	e7b0      	b.n	800c2e8 <_strtod_l+0x5e0>
 800c386:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c388:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c38a:	2f00      	cmp	r7, #0
 800c38c:	bfab      	itete	ge
 800c38e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c390:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c392:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c396:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c39a:	bfac      	ite	ge
 800c39c:	eb07 0903 	addge.w	r9, r7, r3
 800c3a0:	eba3 0807 	sublt.w	r8, r3, r7
 800c3a4:	9b06      	ldr	r3, [sp, #24]
 800c3a6:	1aff      	subs	r7, r7, r3
 800c3a8:	4417      	add	r7, r2
 800c3aa:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c3ae:	4a6b      	ldr	r2, [pc, #428]	@ (800c55c <_strtod_l+0x854>)
 800c3b0:	3f01      	subs	r7, #1
 800c3b2:	4297      	cmp	r7, r2
 800c3b4:	da51      	bge.n	800c45a <_strtod_l+0x752>
 800c3b6:	1bd1      	subs	r1, r2, r7
 800c3b8:	291f      	cmp	r1, #31
 800c3ba:	eba3 0301 	sub.w	r3, r3, r1
 800c3be:	f04f 0201 	mov.w	r2, #1
 800c3c2:	dc3e      	bgt.n	800c442 <_strtod_l+0x73a>
 800c3c4:	408a      	lsls	r2, r1
 800c3c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c3cc:	eb09 0703 	add.w	r7, r9, r3
 800c3d0:	4498      	add	r8, r3
 800c3d2:	9b06      	ldr	r3, [sp, #24]
 800c3d4:	45b9      	cmp	r9, r7
 800c3d6:	4498      	add	r8, r3
 800c3d8:	464b      	mov	r3, r9
 800c3da:	bfa8      	it	ge
 800c3dc:	463b      	movge	r3, r7
 800c3de:	4543      	cmp	r3, r8
 800c3e0:	bfa8      	it	ge
 800c3e2:	4643      	movge	r3, r8
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bfc2      	ittt	gt
 800c3e8:	1aff      	subgt	r7, r7, r3
 800c3ea:	eba8 0803 	subgt.w	r8, r8, r3
 800c3ee:	eba9 0903 	subgt.w	r9, r9, r3
 800c3f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	dd16      	ble.n	800c426 <_strtod_l+0x71e>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	9805      	ldr	r0, [sp, #20]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	f7ff f9b7 	bl	800b770 <__pow5mult>
 800c402:	4605      	mov	r5, r0
 800c404:	2800      	cmp	r0, #0
 800c406:	d0b5      	beq.n	800c374 <_strtod_l+0x66c>
 800c408:	4601      	mov	r1, r0
 800c40a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c40c:	9805      	ldr	r0, [sp, #20]
 800c40e:	f7ff f905 	bl	800b61c <__multiply>
 800c412:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c414:	2800      	cmp	r0, #0
 800c416:	f43f ae87 	beq.w	800c128 <_strtod_l+0x420>
 800c41a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c41c:	9805      	ldr	r0, [sp, #20]
 800c41e:	f7fe ffe9 	bl	800b3f4 <_Bfree>
 800c422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c424:	9312      	str	r3, [sp, #72]	@ 0x48
 800c426:	2f00      	cmp	r7, #0
 800c428:	dc1b      	bgt.n	800c462 <_strtod_l+0x75a>
 800c42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	dd21      	ble.n	800c474 <_strtod_l+0x76c>
 800c430:	4631      	mov	r1, r6
 800c432:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c434:	9805      	ldr	r0, [sp, #20]
 800c436:	f7ff f99b 	bl	800b770 <__pow5mult>
 800c43a:	4606      	mov	r6, r0
 800c43c:	b9d0      	cbnz	r0, 800c474 <_strtod_l+0x76c>
 800c43e:	2600      	movs	r6, #0
 800c440:	e672      	b.n	800c128 <_strtod_l+0x420>
 800c442:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c446:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c44a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c44e:	37e2      	adds	r7, #226	@ 0xe2
 800c450:	fa02 f107 	lsl.w	r1, r2, r7
 800c454:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c456:	920c      	str	r2, [sp, #48]	@ 0x30
 800c458:	e7b8      	b.n	800c3cc <_strtod_l+0x6c4>
 800c45a:	2200      	movs	r2, #0
 800c45c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c45e:	2201      	movs	r2, #1
 800c460:	e7f9      	b.n	800c456 <_strtod_l+0x74e>
 800c462:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c464:	9805      	ldr	r0, [sp, #20]
 800c466:	463a      	mov	r2, r7
 800c468:	f7ff f9dc 	bl	800b824 <__lshift>
 800c46c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c46e:	2800      	cmp	r0, #0
 800c470:	d1db      	bne.n	800c42a <_strtod_l+0x722>
 800c472:	e659      	b.n	800c128 <_strtod_l+0x420>
 800c474:	f1b8 0f00 	cmp.w	r8, #0
 800c478:	dd07      	ble.n	800c48a <_strtod_l+0x782>
 800c47a:	4631      	mov	r1, r6
 800c47c:	9805      	ldr	r0, [sp, #20]
 800c47e:	4642      	mov	r2, r8
 800c480:	f7ff f9d0 	bl	800b824 <__lshift>
 800c484:	4606      	mov	r6, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	d0d9      	beq.n	800c43e <_strtod_l+0x736>
 800c48a:	f1b9 0f00 	cmp.w	r9, #0
 800c48e:	dd08      	ble.n	800c4a2 <_strtod_l+0x79a>
 800c490:	4629      	mov	r1, r5
 800c492:	9805      	ldr	r0, [sp, #20]
 800c494:	464a      	mov	r2, r9
 800c496:	f7ff f9c5 	bl	800b824 <__lshift>
 800c49a:	4605      	mov	r5, r0
 800c49c:	2800      	cmp	r0, #0
 800c49e:	f43f ae43 	beq.w	800c128 <_strtod_l+0x420>
 800c4a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c4a4:	9805      	ldr	r0, [sp, #20]
 800c4a6:	4632      	mov	r2, r6
 800c4a8:	f7ff fa44 	bl	800b934 <__mdiff>
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	f43f ae3a 	beq.w	800c128 <_strtod_l+0x420>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c4ba:	60c3      	str	r3, [r0, #12]
 800c4bc:	4629      	mov	r1, r5
 800c4be:	f7ff fa1d 	bl	800b8fc <__mcmp>
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	da4e      	bge.n	800c564 <_strtod_l+0x85c>
 800c4c6:	ea58 080a 	orrs.w	r8, r8, sl
 800c4ca:	d174      	bne.n	800c5b6 <_strtod_l+0x8ae>
 800c4cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d170      	bne.n	800c5b6 <_strtod_l+0x8ae>
 800c4d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c4d8:	0d1b      	lsrs	r3, r3, #20
 800c4da:	051b      	lsls	r3, r3, #20
 800c4dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c4e0:	d969      	bls.n	800c5b6 <_strtod_l+0x8ae>
 800c4e2:	6963      	ldr	r3, [r4, #20]
 800c4e4:	b913      	cbnz	r3, 800c4ec <_strtod_l+0x7e4>
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	dd64      	ble.n	800c5b6 <_strtod_l+0x8ae>
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	9805      	ldr	r0, [sp, #20]
 800c4f2:	f7ff f997 	bl	800b824 <__lshift>
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	f7ff f9ff 	bl	800b8fc <__mcmp>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	dd59      	ble.n	800c5b6 <_strtod_l+0x8ae>
 800c502:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c506:	9a06      	ldr	r2, [sp, #24]
 800c508:	0d1b      	lsrs	r3, r3, #20
 800c50a:	051b      	lsls	r3, r3, #20
 800c50c:	2a00      	cmp	r2, #0
 800c50e:	d070      	beq.n	800c5f2 <_strtod_l+0x8ea>
 800c510:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c514:	d86d      	bhi.n	800c5f2 <_strtod_l+0x8ea>
 800c516:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c51a:	f67f ae99 	bls.w	800c250 <_strtod_l+0x548>
 800c51e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800c550 <_strtod_l+0x848>
 800c522:	ec4b ab16 	vmov	d6, sl, fp
 800c526:	4b0e      	ldr	r3, [pc, #56]	@ (800c560 <_strtod_l+0x858>)
 800c528:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c52c:	ee17 2a90 	vmov	r2, s15
 800c530:	4013      	ands	r3, r2
 800c532:	ec5b ab17 	vmov	sl, fp, d7
 800c536:	2b00      	cmp	r3, #0
 800c538:	f47f ae01 	bne.w	800c13e <_strtod_l+0x436>
 800c53c:	9a05      	ldr	r2, [sp, #20]
 800c53e:	2322      	movs	r3, #34	@ 0x22
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	e5fc      	b.n	800c13e <_strtod_l+0x436>
 800c544:	f3af 8000 	nop.w
 800c548:	ffc00000 	.word	0xffc00000
 800c54c:	41dfffff 	.word	0x41dfffff
 800c550:	00000000 	.word	0x00000000
 800c554:	39500000 	.word	0x39500000
 800c558:	0800e888 	.word	0x0800e888
 800c55c:	fffffc02 	.word	0xfffffc02
 800c560:	7ff00000 	.word	0x7ff00000
 800c564:	46d9      	mov	r9, fp
 800c566:	d15d      	bne.n	800c624 <_strtod_l+0x91c>
 800c568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c56c:	f1b8 0f00 	cmp.w	r8, #0
 800c570:	d02a      	beq.n	800c5c8 <_strtod_l+0x8c0>
 800c572:	4aab      	ldr	r2, [pc, #684]	@ (800c820 <_strtod_l+0xb18>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d12a      	bne.n	800c5ce <_strtod_l+0x8c6>
 800c578:	9b06      	ldr	r3, [sp, #24]
 800c57a:	4652      	mov	r2, sl
 800c57c:	b1fb      	cbz	r3, 800c5be <_strtod_l+0x8b6>
 800c57e:	4ba9      	ldr	r3, [pc, #676]	@ (800c824 <_strtod_l+0xb1c>)
 800c580:	ea0b 0303 	and.w	r3, fp, r3
 800c584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c588:	f04f 31ff 	mov.w	r1, #4294967295
 800c58c:	d81a      	bhi.n	800c5c4 <_strtod_l+0x8bc>
 800c58e:	0d1b      	lsrs	r3, r3, #20
 800c590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c594:	fa01 f303 	lsl.w	r3, r1, r3
 800c598:	429a      	cmp	r2, r3
 800c59a:	d118      	bne.n	800c5ce <_strtod_l+0x8c6>
 800c59c:	4ba2      	ldr	r3, [pc, #648]	@ (800c828 <_strtod_l+0xb20>)
 800c59e:	4599      	cmp	r9, r3
 800c5a0:	d102      	bne.n	800c5a8 <_strtod_l+0x8a0>
 800c5a2:	3201      	adds	r2, #1
 800c5a4:	f43f adc0 	beq.w	800c128 <_strtod_l+0x420>
 800c5a8:	4b9e      	ldr	r3, [pc, #632]	@ (800c824 <_strtod_l+0xb1c>)
 800c5aa:	ea09 0303 	and.w	r3, r9, r3
 800c5ae:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800c5b2:	f04f 0a00 	mov.w	sl, #0
 800c5b6:	9b06      	ldr	r3, [sp, #24]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1b0      	bne.n	800c51e <_strtod_l+0x816>
 800c5bc:	e5bf      	b.n	800c13e <_strtod_l+0x436>
 800c5be:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c2:	e7e9      	b.n	800c598 <_strtod_l+0x890>
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	e7e7      	b.n	800c598 <_strtod_l+0x890>
 800c5c8:	ea53 030a 	orrs.w	r3, r3, sl
 800c5cc:	d099      	beq.n	800c502 <_strtod_l+0x7fa>
 800c5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5d0:	b1c3      	cbz	r3, 800c604 <_strtod_l+0x8fc>
 800c5d2:	ea13 0f09 	tst.w	r3, r9
 800c5d6:	d0ee      	beq.n	800c5b6 <_strtod_l+0x8ae>
 800c5d8:	9a06      	ldr	r2, [sp, #24]
 800c5da:	4650      	mov	r0, sl
 800c5dc:	4659      	mov	r1, fp
 800c5de:	f1b8 0f00 	cmp.w	r8, #0
 800c5e2:	d013      	beq.n	800c60c <_strtod_l+0x904>
 800c5e4:	f7ff fb75 	bl	800bcd2 <sulp>
 800c5e8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c5ec:	ec5b ab17 	vmov	sl, fp, d7
 800c5f0:	e7e1      	b.n	800c5b6 <_strtod_l+0x8ae>
 800c5f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c5f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c5fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c5fe:	f04f 3aff 	mov.w	sl, #4294967295
 800c602:	e7d8      	b.n	800c5b6 <_strtod_l+0x8ae>
 800c604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c606:	ea13 0f0a 	tst.w	r3, sl
 800c60a:	e7e4      	b.n	800c5d6 <_strtod_l+0x8ce>
 800c60c:	f7ff fb61 	bl	800bcd2 <sulp>
 800c610:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c614:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c61c:	ec5b ab10 	vmov	sl, fp, d0
 800c620:	d1c9      	bne.n	800c5b6 <_strtod_l+0x8ae>
 800c622:	e615      	b.n	800c250 <_strtod_l+0x548>
 800c624:	4629      	mov	r1, r5
 800c626:	4620      	mov	r0, r4
 800c628:	f7ff fae0 	bl	800bbec <__ratio>
 800c62c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c630:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c638:	d85d      	bhi.n	800c6f6 <_strtod_l+0x9ee>
 800c63a:	f1b8 0f00 	cmp.w	r8, #0
 800c63e:	d164      	bne.n	800c70a <_strtod_l+0xa02>
 800c640:	f1ba 0f00 	cmp.w	sl, #0
 800c644:	d14b      	bne.n	800c6de <_strtod_l+0x9d6>
 800c646:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c64a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d160      	bne.n	800c714 <_strtod_l+0xa0c>
 800c652:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c656:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c65e:	d401      	bmi.n	800c664 <_strtod_l+0x95c>
 800c660:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c664:	eeb1 ab48 	vneg.f64	d10, d8
 800c668:	486e      	ldr	r0, [pc, #440]	@ (800c824 <_strtod_l+0xb1c>)
 800c66a:	4970      	ldr	r1, [pc, #448]	@ (800c82c <_strtod_l+0xb24>)
 800c66c:	ea09 0700 	and.w	r7, r9, r0
 800c670:	428f      	cmp	r7, r1
 800c672:	ec53 2b1a 	vmov	r2, r3, d10
 800c676:	d17d      	bne.n	800c774 <_strtod_l+0xa6c>
 800c678:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c67c:	ec4b ab1c 	vmov	d12, sl, fp
 800c680:	eeb0 0b4c 	vmov.f64	d0, d12
 800c684:	f7ff f9ea 	bl	800ba5c <__ulp>
 800c688:	4866      	ldr	r0, [pc, #408]	@ (800c824 <_strtod_l+0xb1c>)
 800c68a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c68e:	ee1c 3a90 	vmov	r3, s25
 800c692:	4a67      	ldr	r2, [pc, #412]	@ (800c830 <_strtod_l+0xb28>)
 800c694:	ea03 0100 	and.w	r1, r3, r0
 800c698:	4291      	cmp	r1, r2
 800c69a:	ec5b ab1c 	vmov	sl, fp, d12
 800c69e:	d93c      	bls.n	800c71a <_strtod_l+0xa12>
 800c6a0:	ee19 2a90 	vmov	r2, s19
 800c6a4:	4b60      	ldr	r3, [pc, #384]	@ (800c828 <_strtod_l+0xb20>)
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d104      	bne.n	800c6b4 <_strtod_l+0x9ac>
 800c6aa:	ee19 3a10 	vmov	r3, s18
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	f43f ad3a 	beq.w	800c128 <_strtod_l+0x420>
 800c6b4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c828 <_strtod_l+0xb20>
 800c6b8:	f04f 3aff 	mov.w	sl, #4294967295
 800c6bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c6be:	9805      	ldr	r0, [sp, #20]
 800c6c0:	f7fe fe98 	bl	800b3f4 <_Bfree>
 800c6c4:	9805      	ldr	r0, [sp, #20]
 800c6c6:	4631      	mov	r1, r6
 800c6c8:	f7fe fe94 	bl	800b3f4 <_Bfree>
 800c6cc:	9805      	ldr	r0, [sp, #20]
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	f7fe fe90 	bl	800b3f4 <_Bfree>
 800c6d4:	9805      	ldr	r0, [sp, #20]
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	f7fe fe8c 	bl	800b3f4 <_Bfree>
 800c6dc:	e625      	b.n	800c32a <_strtod_l+0x622>
 800c6de:	f1ba 0f01 	cmp.w	sl, #1
 800c6e2:	d103      	bne.n	800c6ec <_strtod_l+0x9e4>
 800c6e4:	f1bb 0f00 	cmp.w	fp, #0
 800c6e8:	f43f adb2 	beq.w	800c250 <_strtod_l+0x548>
 800c6ec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c6f0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c6f4:	e7b8      	b.n	800c668 <_strtod_l+0x960>
 800c6f6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c6fa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c6fe:	f1b8 0f00 	cmp.w	r8, #0
 800c702:	d0af      	beq.n	800c664 <_strtod_l+0x95c>
 800c704:	eeb0 ab48 	vmov.f64	d10, d8
 800c708:	e7ae      	b.n	800c668 <_strtod_l+0x960>
 800c70a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c70e:	eeb0 8b4a 	vmov.f64	d8, d10
 800c712:	e7a9      	b.n	800c668 <_strtod_l+0x960>
 800c714:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c718:	e7a6      	b.n	800c668 <_strtod_l+0x960>
 800c71a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c71e:	9b06      	ldr	r3, [sp, #24]
 800c720:	46d9      	mov	r9, fp
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1ca      	bne.n	800c6bc <_strtod_l+0x9b4>
 800c726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c72a:	0d1b      	lsrs	r3, r3, #20
 800c72c:	051b      	lsls	r3, r3, #20
 800c72e:	429f      	cmp	r7, r3
 800c730:	d1c4      	bne.n	800c6bc <_strtod_l+0x9b4>
 800c732:	ec51 0b18 	vmov	r0, r1, d8
 800c736:	f7f3 ffff 	bl	8000738 <__aeabi_d2lz>
 800c73a:	f7f3 ffb7 	bl	80006ac <__aeabi_l2d>
 800c73e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c742:	ec41 0b17 	vmov	d7, r0, r1
 800c746:	ea49 090a 	orr.w	r9, r9, sl
 800c74a:	ea59 0908 	orrs.w	r9, r9, r8
 800c74e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c752:	d03c      	beq.n	800c7ce <_strtod_l+0xac6>
 800c754:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c808 <_strtod_l+0xb00>
 800c758:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c760:	f53f aced 	bmi.w	800c13e <_strtod_l+0x436>
 800c764:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c810 <_strtod_l+0xb08>
 800c768:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c770:	dda4      	ble.n	800c6bc <_strtod_l+0x9b4>
 800c772:	e4e4      	b.n	800c13e <_strtod_l+0x436>
 800c774:	9906      	ldr	r1, [sp, #24]
 800c776:	b1e1      	cbz	r1, 800c7b2 <_strtod_l+0xaaa>
 800c778:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c77c:	d819      	bhi.n	800c7b2 <_strtod_l+0xaaa>
 800c77e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c786:	d811      	bhi.n	800c7ac <_strtod_l+0xaa4>
 800c788:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c78c:	ee18 3a10 	vmov	r3, s16
 800c790:	2b01      	cmp	r3, #1
 800c792:	bf38      	it	cc
 800c794:	2301      	movcc	r3, #1
 800c796:	ee08 3a10 	vmov	s16, r3
 800c79a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c79e:	f1b8 0f00 	cmp.w	r8, #0
 800c7a2:	d111      	bne.n	800c7c8 <_strtod_l+0xac0>
 800c7a4:	eeb1 7b48 	vneg.f64	d7, d8
 800c7a8:	ec53 2b17 	vmov	r2, r3, d7
 800c7ac:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c7b0:	1bcb      	subs	r3, r1, r7
 800c7b2:	eeb0 0b49 	vmov.f64	d0, d9
 800c7b6:	ec43 2b1a 	vmov	d10, r2, r3
 800c7ba:	f7ff f94f 	bl	800ba5c <__ulp>
 800c7be:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c7c2:	ec5b ab19 	vmov	sl, fp, d9
 800c7c6:	e7aa      	b.n	800c71e <_strtod_l+0xa16>
 800c7c8:	eeb0 7b48 	vmov.f64	d7, d8
 800c7cc:	e7ec      	b.n	800c7a8 <_strtod_l+0xaa0>
 800c7ce:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c818 <_strtod_l+0xb10>
 800c7d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7da:	f57f af6f 	bpl.w	800c6bc <_strtod_l+0x9b4>
 800c7de:	e4ae      	b.n	800c13e <_strtod_l+0x436>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	9308      	str	r3, [sp, #32]
 800c7e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	f7ff bacc 	b.w	800bd86 <_strtod_l+0x7e>
 800c7ee:	2a65      	cmp	r2, #101	@ 0x65
 800c7f0:	f43f abbc 	beq.w	800bf6c <_strtod_l+0x264>
 800c7f4:	2a45      	cmp	r2, #69	@ 0x45
 800c7f6:	f43f abb9 	beq.w	800bf6c <_strtod_l+0x264>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	9306      	str	r3, [sp, #24]
 800c7fe:	f7ff bbf0 	b.w	800bfe2 <_strtod_l+0x2da>
 800c802:	bf00      	nop
 800c804:	f3af 8000 	nop.w
 800c808:	94a03595 	.word	0x94a03595
 800c80c:	3fdfffff 	.word	0x3fdfffff
 800c810:	35afe535 	.word	0x35afe535
 800c814:	3fe00000 	.word	0x3fe00000
 800c818:	94a03595 	.word	0x94a03595
 800c81c:	3fcfffff 	.word	0x3fcfffff
 800c820:	000fffff 	.word	0x000fffff
 800c824:	7ff00000 	.word	0x7ff00000
 800c828:	7fefffff 	.word	0x7fefffff
 800c82c:	7fe00000 	.word	0x7fe00000
 800c830:	7c9fffff 	.word	0x7c9fffff

0800c834 <_strtod_r>:
 800c834:	4b01      	ldr	r3, [pc, #4]	@ (800c83c <_strtod_r+0x8>)
 800c836:	f7ff ba67 	b.w	800bd08 <_strtod_l>
 800c83a:	bf00      	nop
 800c83c:	24000070 	.word	0x24000070

0800c840 <_strtol_l.constprop.0>:
 800c840:	2b24      	cmp	r3, #36	@ 0x24
 800c842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c846:	4686      	mov	lr, r0
 800c848:	4690      	mov	r8, r2
 800c84a:	d801      	bhi.n	800c850 <_strtol_l.constprop.0+0x10>
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d106      	bne.n	800c85e <_strtol_l.constprop.0+0x1e>
 800c850:	f7fd fe7e 	bl	800a550 <__errno>
 800c854:	2316      	movs	r3, #22
 800c856:	6003      	str	r3, [r0, #0]
 800c858:	2000      	movs	r0, #0
 800c85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c85e:	4834      	ldr	r0, [pc, #208]	@ (800c930 <_strtol_l.constprop.0+0xf0>)
 800c860:	460d      	mov	r5, r1
 800c862:	462a      	mov	r2, r5
 800c864:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c868:	5d06      	ldrb	r6, [r0, r4]
 800c86a:	f016 0608 	ands.w	r6, r6, #8
 800c86e:	d1f8      	bne.n	800c862 <_strtol_l.constprop.0+0x22>
 800c870:	2c2d      	cmp	r4, #45	@ 0x2d
 800c872:	d12d      	bne.n	800c8d0 <_strtol_l.constprop.0+0x90>
 800c874:	782c      	ldrb	r4, [r5, #0]
 800c876:	2601      	movs	r6, #1
 800c878:	1c95      	adds	r5, r2, #2
 800c87a:	f033 0210 	bics.w	r2, r3, #16
 800c87e:	d109      	bne.n	800c894 <_strtol_l.constprop.0+0x54>
 800c880:	2c30      	cmp	r4, #48	@ 0x30
 800c882:	d12a      	bne.n	800c8da <_strtol_l.constprop.0+0x9a>
 800c884:	782a      	ldrb	r2, [r5, #0]
 800c886:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c88a:	2a58      	cmp	r2, #88	@ 0x58
 800c88c:	d125      	bne.n	800c8da <_strtol_l.constprop.0+0x9a>
 800c88e:	786c      	ldrb	r4, [r5, #1]
 800c890:	2310      	movs	r3, #16
 800c892:	3502      	adds	r5, #2
 800c894:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c898:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c89c:	2200      	movs	r2, #0
 800c89e:	fbbc f9f3 	udiv	r9, ip, r3
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c8a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c8ac:	2f09      	cmp	r7, #9
 800c8ae:	d81b      	bhi.n	800c8e8 <_strtol_l.constprop.0+0xa8>
 800c8b0:	463c      	mov	r4, r7
 800c8b2:	42a3      	cmp	r3, r4
 800c8b4:	dd27      	ble.n	800c906 <_strtol_l.constprop.0+0xc6>
 800c8b6:	1c57      	adds	r7, r2, #1
 800c8b8:	d007      	beq.n	800c8ca <_strtol_l.constprop.0+0x8a>
 800c8ba:	4581      	cmp	r9, r0
 800c8bc:	d320      	bcc.n	800c900 <_strtol_l.constprop.0+0xc0>
 800c8be:	d101      	bne.n	800c8c4 <_strtol_l.constprop.0+0x84>
 800c8c0:	45a2      	cmp	sl, r4
 800c8c2:	db1d      	blt.n	800c900 <_strtol_l.constprop.0+0xc0>
 800c8c4:	fb00 4003 	mla	r0, r0, r3, r4
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8ce:	e7eb      	b.n	800c8a8 <_strtol_l.constprop.0+0x68>
 800c8d0:	2c2b      	cmp	r4, #43	@ 0x2b
 800c8d2:	bf04      	itt	eq
 800c8d4:	782c      	ldrbeq	r4, [r5, #0]
 800c8d6:	1c95      	addeq	r5, r2, #2
 800c8d8:	e7cf      	b.n	800c87a <_strtol_l.constprop.0+0x3a>
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1da      	bne.n	800c894 <_strtol_l.constprop.0+0x54>
 800c8de:	2c30      	cmp	r4, #48	@ 0x30
 800c8e0:	bf0c      	ite	eq
 800c8e2:	2308      	moveq	r3, #8
 800c8e4:	230a      	movne	r3, #10
 800c8e6:	e7d5      	b.n	800c894 <_strtol_l.constprop.0+0x54>
 800c8e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c8ec:	2f19      	cmp	r7, #25
 800c8ee:	d801      	bhi.n	800c8f4 <_strtol_l.constprop.0+0xb4>
 800c8f0:	3c37      	subs	r4, #55	@ 0x37
 800c8f2:	e7de      	b.n	800c8b2 <_strtol_l.constprop.0+0x72>
 800c8f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c8f8:	2f19      	cmp	r7, #25
 800c8fa:	d804      	bhi.n	800c906 <_strtol_l.constprop.0+0xc6>
 800c8fc:	3c57      	subs	r4, #87	@ 0x57
 800c8fe:	e7d8      	b.n	800c8b2 <_strtol_l.constprop.0+0x72>
 800c900:	f04f 32ff 	mov.w	r2, #4294967295
 800c904:	e7e1      	b.n	800c8ca <_strtol_l.constprop.0+0x8a>
 800c906:	1c53      	adds	r3, r2, #1
 800c908:	d108      	bne.n	800c91c <_strtol_l.constprop.0+0xdc>
 800c90a:	2322      	movs	r3, #34	@ 0x22
 800c90c:	f8ce 3000 	str.w	r3, [lr]
 800c910:	4660      	mov	r0, ip
 800c912:	f1b8 0f00 	cmp.w	r8, #0
 800c916:	d0a0      	beq.n	800c85a <_strtol_l.constprop.0+0x1a>
 800c918:	1e69      	subs	r1, r5, #1
 800c91a:	e006      	b.n	800c92a <_strtol_l.constprop.0+0xea>
 800c91c:	b106      	cbz	r6, 800c920 <_strtol_l.constprop.0+0xe0>
 800c91e:	4240      	negs	r0, r0
 800c920:	f1b8 0f00 	cmp.w	r8, #0
 800c924:	d099      	beq.n	800c85a <_strtol_l.constprop.0+0x1a>
 800c926:	2a00      	cmp	r2, #0
 800c928:	d1f6      	bne.n	800c918 <_strtol_l.constprop.0+0xd8>
 800c92a:	f8c8 1000 	str.w	r1, [r8]
 800c92e:	e794      	b.n	800c85a <_strtol_l.constprop.0+0x1a>
 800c930:	0800e8b1 	.word	0x0800e8b1

0800c934 <_strtol_r>:
 800c934:	f7ff bf84 	b.w	800c840 <_strtol_l.constprop.0>

0800c938 <__ssputs_r>:
 800c938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c93c:	688e      	ldr	r6, [r1, #8]
 800c93e:	461f      	mov	r7, r3
 800c940:	42be      	cmp	r6, r7
 800c942:	680b      	ldr	r3, [r1, #0]
 800c944:	4682      	mov	sl, r0
 800c946:	460c      	mov	r4, r1
 800c948:	4690      	mov	r8, r2
 800c94a:	d82d      	bhi.n	800c9a8 <__ssputs_r+0x70>
 800c94c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c950:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c954:	d026      	beq.n	800c9a4 <__ssputs_r+0x6c>
 800c956:	6965      	ldr	r5, [r4, #20]
 800c958:	6909      	ldr	r1, [r1, #16]
 800c95a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c95e:	eba3 0901 	sub.w	r9, r3, r1
 800c962:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c966:	1c7b      	adds	r3, r7, #1
 800c968:	444b      	add	r3, r9
 800c96a:	106d      	asrs	r5, r5, #1
 800c96c:	429d      	cmp	r5, r3
 800c96e:	bf38      	it	cc
 800c970:	461d      	movcc	r5, r3
 800c972:	0553      	lsls	r3, r2, #21
 800c974:	d527      	bpl.n	800c9c6 <__ssputs_r+0x8e>
 800c976:	4629      	mov	r1, r5
 800c978:	f7fe fc70 	bl	800b25c <_malloc_r>
 800c97c:	4606      	mov	r6, r0
 800c97e:	b360      	cbz	r0, 800c9da <__ssputs_r+0xa2>
 800c980:	6921      	ldr	r1, [r4, #16]
 800c982:	464a      	mov	r2, r9
 800c984:	f000 fa18 	bl	800cdb8 <memcpy>
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c98e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c992:	81a3      	strh	r3, [r4, #12]
 800c994:	6126      	str	r6, [r4, #16]
 800c996:	6165      	str	r5, [r4, #20]
 800c998:	444e      	add	r6, r9
 800c99a:	eba5 0509 	sub.w	r5, r5, r9
 800c99e:	6026      	str	r6, [r4, #0]
 800c9a0:	60a5      	str	r5, [r4, #8]
 800c9a2:	463e      	mov	r6, r7
 800c9a4:	42be      	cmp	r6, r7
 800c9a6:	d900      	bls.n	800c9aa <__ssputs_r+0x72>
 800c9a8:	463e      	mov	r6, r7
 800c9aa:	6820      	ldr	r0, [r4, #0]
 800c9ac:	4632      	mov	r2, r6
 800c9ae:	4641      	mov	r1, r8
 800c9b0:	f000 f9c6 	bl	800cd40 <memmove>
 800c9b4:	68a3      	ldr	r3, [r4, #8]
 800c9b6:	1b9b      	subs	r3, r3, r6
 800c9b8:	60a3      	str	r3, [r4, #8]
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	4433      	add	r3, r6
 800c9be:	6023      	str	r3, [r4, #0]
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c6:	462a      	mov	r2, r5
 800c9c8:	f000 fd8b 	bl	800d4e2 <_realloc_r>
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d1e0      	bne.n	800c994 <__ssputs_r+0x5c>
 800c9d2:	6921      	ldr	r1, [r4, #16]
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	f7fe fbcd 	bl	800b174 <_free_r>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	f8ca 3000 	str.w	r3, [sl]
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9e6:	81a3      	strh	r3, [r4, #12]
 800c9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ec:	e7e9      	b.n	800c9c2 <__ssputs_r+0x8a>
	...

0800c9f0 <_svfiprintf_r>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	4698      	mov	r8, r3
 800c9f6:	898b      	ldrh	r3, [r1, #12]
 800c9f8:	061b      	lsls	r3, r3, #24
 800c9fa:	b09d      	sub	sp, #116	@ 0x74
 800c9fc:	4607      	mov	r7, r0
 800c9fe:	460d      	mov	r5, r1
 800ca00:	4614      	mov	r4, r2
 800ca02:	d510      	bpl.n	800ca26 <_svfiprintf_r+0x36>
 800ca04:	690b      	ldr	r3, [r1, #16]
 800ca06:	b973      	cbnz	r3, 800ca26 <_svfiprintf_r+0x36>
 800ca08:	2140      	movs	r1, #64	@ 0x40
 800ca0a:	f7fe fc27 	bl	800b25c <_malloc_r>
 800ca0e:	6028      	str	r0, [r5, #0]
 800ca10:	6128      	str	r0, [r5, #16]
 800ca12:	b930      	cbnz	r0, 800ca22 <_svfiprintf_r+0x32>
 800ca14:	230c      	movs	r3, #12
 800ca16:	603b      	str	r3, [r7, #0]
 800ca18:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1c:	b01d      	add	sp, #116	@ 0x74
 800ca1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca22:	2340      	movs	r3, #64	@ 0x40
 800ca24:	616b      	str	r3, [r5, #20]
 800ca26:	2300      	movs	r3, #0
 800ca28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca2a:	2320      	movs	r3, #32
 800ca2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca34:	2330      	movs	r3, #48	@ 0x30
 800ca36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cbd4 <_svfiprintf_r+0x1e4>
 800ca3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca3e:	f04f 0901 	mov.w	r9, #1
 800ca42:	4623      	mov	r3, r4
 800ca44:	469a      	mov	sl, r3
 800ca46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca4a:	b10a      	cbz	r2, 800ca50 <_svfiprintf_r+0x60>
 800ca4c:	2a25      	cmp	r2, #37	@ 0x25
 800ca4e:	d1f9      	bne.n	800ca44 <_svfiprintf_r+0x54>
 800ca50:	ebba 0b04 	subs.w	fp, sl, r4
 800ca54:	d00b      	beq.n	800ca6e <_svfiprintf_r+0x7e>
 800ca56:	465b      	mov	r3, fp
 800ca58:	4622      	mov	r2, r4
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	4638      	mov	r0, r7
 800ca5e:	f7ff ff6b 	bl	800c938 <__ssputs_r>
 800ca62:	3001      	adds	r0, #1
 800ca64:	f000 80a7 	beq.w	800cbb6 <_svfiprintf_r+0x1c6>
 800ca68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca6a:	445a      	add	r2, fp
 800ca6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 809f 	beq.w	800cbb6 <_svfiprintf_r+0x1c6>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca82:	f10a 0a01 	add.w	sl, sl, #1
 800ca86:	9304      	str	r3, [sp, #16]
 800ca88:	9307      	str	r3, [sp, #28]
 800ca8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca90:	4654      	mov	r4, sl
 800ca92:	2205      	movs	r2, #5
 800ca94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca98:	484e      	ldr	r0, [pc, #312]	@ (800cbd4 <_svfiprintf_r+0x1e4>)
 800ca9a:	f7f3 fc21 	bl	80002e0 <memchr>
 800ca9e:	9a04      	ldr	r2, [sp, #16]
 800caa0:	b9d8      	cbnz	r0, 800cada <_svfiprintf_r+0xea>
 800caa2:	06d0      	lsls	r0, r2, #27
 800caa4:	bf44      	itt	mi
 800caa6:	2320      	movmi	r3, #32
 800caa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caac:	0711      	lsls	r1, r2, #28
 800caae:	bf44      	itt	mi
 800cab0:	232b      	movmi	r3, #43	@ 0x2b
 800cab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cab6:	f89a 3000 	ldrb.w	r3, [sl]
 800caba:	2b2a      	cmp	r3, #42	@ 0x2a
 800cabc:	d015      	beq.n	800caea <_svfiprintf_r+0xfa>
 800cabe:	9a07      	ldr	r2, [sp, #28]
 800cac0:	4654      	mov	r4, sl
 800cac2:	2000      	movs	r0, #0
 800cac4:	f04f 0c0a 	mov.w	ip, #10
 800cac8:	4621      	mov	r1, r4
 800caca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cace:	3b30      	subs	r3, #48	@ 0x30
 800cad0:	2b09      	cmp	r3, #9
 800cad2:	d94b      	bls.n	800cb6c <_svfiprintf_r+0x17c>
 800cad4:	b1b0      	cbz	r0, 800cb04 <_svfiprintf_r+0x114>
 800cad6:	9207      	str	r2, [sp, #28]
 800cad8:	e014      	b.n	800cb04 <_svfiprintf_r+0x114>
 800cada:	eba0 0308 	sub.w	r3, r0, r8
 800cade:	fa09 f303 	lsl.w	r3, r9, r3
 800cae2:	4313      	orrs	r3, r2
 800cae4:	9304      	str	r3, [sp, #16]
 800cae6:	46a2      	mov	sl, r4
 800cae8:	e7d2      	b.n	800ca90 <_svfiprintf_r+0xa0>
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	1d19      	adds	r1, r3, #4
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	9103      	str	r1, [sp, #12]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	bfbb      	ittet	lt
 800caf6:	425b      	neglt	r3, r3
 800caf8:	f042 0202 	orrlt.w	r2, r2, #2
 800cafc:	9307      	strge	r3, [sp, #28]
 800cafe:	9307      	strlt	r3, [sp, #28]
 800cb00:	bfb8      	it	lt
 800cb02:	9204      	strlt	r2, [sp, #16]
 800cb04:	7823      	ldrb	r3, [r4, #0]
 800cb06:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb08:	d10a      	bne.n	800cb20 <_svfiprintf_r+0x130>
 800cb0a:	7863      	ldrb	r3, [r4, #1]
 800cb0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb0e:	d132      	bne.n	800cb76 <_svfiprintf_r+0x186>
 800cb10:	9b03      	ldr	r3, [sp, #12]
 800cb12:	1d1a      	adds	r2, r3, #4
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	9203      	str	r2, [sp, #12]
 800cb18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb1c:	3402      	adds	r4, #2
 800cb1e:	9305      	str	r3, [sp, #20]
 800cb20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cbe4 <_svfiprintf_r+0x1f4>
 800cb24:	7821      	ldrb	r1, [r4, #0]
 800cb26:	2203      	movs	r2, #3
 800cb28:	4650      	mov	r0, sl
 800cb2a:	f7f3 fbd9 	bl	80002e0 <memchr>
 800cb2e:	b138      	cbz	r0, 800cb40 <_svfiprintf_r+0x150>
 800cb30:	9b04      	ldr	r3, [sp, #16]
 800cb32:	eba0 000a 	sub.w	r0, r0, sl
 800cb36:	2240      	movs	r2, #64	@ 0x40
 800cb38:	4082      	lsls	r2, r0
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	3401      	adds	r4, #1
 800cb3e:	9304      	str	r3, [sp, #16]
 800cb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb44:	4824      	ldr	r0, [pc, #144]	@ (800cbd8 <_svfiprintf_r+0x1e8>)
 800cb46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb4a:	2206      	movs	r2, #6
 800cb4c:	f7f3 fbc8 	bl	80002e0 <memchr>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d036      	beq.n	800cbc2 <_svfiprintf_r+0x1d2>
 800cb54:	4b21      	ldr	r3, [pc, #132]	@ (800cbdc <_svfiprintf_r+0x1ec>)
 800cb56:	bb1b      	cbnz	r3, 800cba0 <_svfiprintf_r+0x1b0>
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	3307      	adds	r3, #7
 800cb5c:	f023 0307 	bic.w	r3, r3, #7
 800cb60:	3308      	adds	r3, #8
 800cb62:	9303      	str	r3, [sp, #12]
 800cb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb66:	4433      	add	r3, r6
 800cb68:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb6a:	e76a      	b.n	800ca42 <_svfiprintf_r+0x52>
 800cb6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb70:	460c      	mov	r4, r1
 800cb72:	2001      	movs	r0, #1
 800cb74:	e7a8      	b.n	800cac8 <_svfiprintf_r+0xd8>
 800cb76:	2300      	movs	r3, #0
 800cb78:	3401      	adds	r4, #1
 800cb7a:	9305      	str	r3, [sp, #20]
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	f04f 0c0a 	mov.w	ip, #10
 800cb82:	4620      	mov	r0, r4
 800cb84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb88:	3a30      	subs	r2, #48	@ 0x30
 800cb8a:	2a09      	cmp	r2, #9
 800cb8c:	d903      	bls.n	800cb96 <_svfiprintf_r+0x1a6>
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0c6      	beq.n	800cb20 <_svfiprintf_r+0x130>
 800cb92:	9105      	str	r1, [sp, #20]
 800cb94:	e7c4      	b.n	800cb20 <_svfiprintf_r+0x130>
 800cb96:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e7f0      	b.n	800cb82 <_svfiprintf_r+0x192>
 800cba0:	ab03      	add	r3, sp, #12
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	462a      	mov	r2, r5
 800cba6:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe0 <_svfiprintf_r+0x1f0>)
 800cba8:	a904      	add	r1, sp, #16
 800cbaa:	4638      	mov	r0, r7
 800cbac:	f7fc fda4 	bl	80096f8 <_printf_float>
 800cbb0:	1c42      	adds	r2, r0, #1
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	d1d6      	bne.n	800cb64 <_svfiprintf_r+0x174>
 800cbb6:	89ab      	ldrh	r3, [r5, #12]
 800cbb8:	065b      	lsls	r3, r3, #25
 800cbba:	f53f af2d 	bmi.w	800ca18 <_svfiprintf_r+0x28>
 800cbbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbc0:	e72c      	b.n	800ca1c <_svfiprintf_r+0x2c>
 800cbc2:	ab03      	add	r3, sp, #12
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	462a      	mov	r2, r5
 800cbc8:	4b05      	ldr	r3, [pc, #20]	@ (800cbe0 <_svfiprintf_r+0x1f0>)
 800cbca:	a904      	add	r1, sp, #16
 800cbcc:	4638      	mov	r0, r7
 800cbce:	f7fd f81b 	bl	8009c08 <_printf_i>
 800cbd2:	e7ed      	b.n	800cbb0 <_svfiprintf_r+0x1c0>
 800cbd4:	0800e9b1 	.word	0x0800e9b1
 800cbd8:	0800e9bb 	.word	0x0800e9bb
 800cbdc:	080096f9 	.word	0x080096f9
 800cbe0:	0800c939 	.word	0x0800c939
 800cbe4:	0800e9b7 	.word	0x0800e9b7

0800cbe8 <__sflush_r>:
 800cbe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf0:	0716      	lsls	r6, r2, #28
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	d454      	bmi.n	800cca2 <__sflush_r+0xba>
 800cbf8:	684b      	ldr	r3, [r1, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	dc02      	bgt.n	800cc04 <__sflush_r+0x1c>
 800cbfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	dd48      	ble.n	800cc96 <__sflush_r+0xae>
 800cc04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc06:	2e00      	cmp	r6, #0
 800cc08:	d045      	beq.n	800cc96 <__sflush_r+0xae>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc10:	682f      	ldr	r7, [r5, #0]
 800cc12:	6a21      	ldr	r1, [r4, #32]
 800cc14:	602b      	str	r3, [r5, #0]
 800cc16:	d030      	beq.n	800cc7a <__sflush_r+0x92>
 800cc18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	0759      	lsls	r1, r3, #29
 800cc1e:	d505      	bpl.n	800cc2c <__sflush_r+0x44>
 800cc20:	6863      	ldr	r3, [r4, #4]
 800cc22:	1ad2      	subs	r2, r2, r3
 800cc24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc26:	b10b      	cbz	r3, 800cc2c <__sflush_r+0x44>
 800cc28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc2a:	1ad2      	subs	r2, r2, r3
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc30:	6a21      	ldr	r1, [r4, #32]
 800cc32:	4628      	mov	r0, r5
 800cc34:	47b0      	blx	r6
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	d106      	bne.n	800cc4a <__sflush_r+0x62>
 800cc3c:	6829      	ldr	r1, [r5, #0]
 800cc3e:	291d      	cmp	r1, #29
 800cc40:	d82b      	bhi.n	800cc9a <__sflush_r+0xb2>
 800cc42:	4a2a      	ldr	r2, [pc, #168]	@ (800ccec <__sflush_r+0x104>)
 800cc44:	410a      	asrs	r2, r1
 800cc46:	07d6      	lsls	r6, r2, #31
 800cc48:	d427      	bmi.n	800cc9a <__sflush_r+0xb2>
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	6062      	str	r2, [r4, #4]
 800cc4e:	04d9      	lsls	r1, r3, #19
 800cc50:	6922      	ldr	r2, [r4, #16]
 800cc52:	6022      	str	r2, [r4, #0]
 800cc54:	d504      	bpl.n	800cc60 <__sflush_r+0x78>
 800cc56:	1c42      	adds	r2, r0, #1
 800cc58:	d101      	bne.n	800cc5e <__sflush_r+0x76>
 800cc5a:	682b      	ldr	r3, [r5, #0]
 800cc5c:	b903      	cbnz	r3, 800cc60 <__sflush_r+0x78>
 800cc5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc62:	602f      	str	r7, [r5, #0]
 800cc64:	b1b9      	cbz	r1, 800cc96 <__sflush_r+0xae>
 800cc66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc6a:	4299      	cmp	r1, r3
 800cc6c:	d002      	beq.n	800cc74 <__sflush_r+0x8c>
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f7fe fa80 	bl	800b174 <_free_r>
 800cc74:	2300      	movs	r3, #0
 800cc76:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc78:	e00d      	b.n	800cc96 <__sflush_r+0xae>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b0      	blx	r6
 800cc80:	4602      	mov	r2, r0
 800cc82:	1c50      	adds	r0, r2, #1
 800cc84:	d1c9      	bne.n	800cc1a <__sflush_r+0x32>
 800cc86:	682b      	ldr	r3, [r5, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d0c6      	beq.n	800cc1a <__sflush_r+0x32>
 800cc8c:	2b1d      	cmp	r3, #29
 800cc8e:	d001      	beq.n	800cc94 <__sflush_r+0xac>
 800cc90:	2b16      	cmp	r3, #22
 800cc92:	d11e      	bne.n	800ccd2 <__sflush_r+0xea>
 800cc94:	602f      	str	r7, [r5, #0]
 800cc96:	2000      	movs	r0, #0
 800cc98:	e022      	b.n	800cce0 <__sflush_r+0xf8>
 800cc9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc9e:	b21b      	sxth	r3, r3
 800cca0:	e01b      	b.n	800ccda <__sflush_r+0xf2>
 800cca2:	690f      	ldr	r7, [r1, #16]
 800cca4:	2f00      	cmp	r7, #0
 800cca6:	d0f6      	beq.n	800cc96 <__sflush_r+0xae>
 800cca8:	0793      	lsls	r3, r2, #30
 800ccaa:	680e      	ldr	r6, [r1, #0]
 800ccac:	bf08      	it	eq
 800ccae:	694b      	ldreq	r3, [r1, #20]
 800ccb0:	600f      	str	r7, [r1, #0]
 800ccb2:	bf18      	it	ne
 800ccb4:	2300      	movne	r3, #0
 800ccb6:	eba6 0807 	sub.w	r8, r6, r7
 800ccba:	608b      	str	r3, [r1, #8]
 800ccbc:	f1b8 0f00 	cmp.w	r8, #0
 800ccc0:	dde9      	ble.n	800cc96 <__sflush_r+0xae>
 800ccc2:	6a21      	ldr	r1, [r4, #32]
 800ccc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ccc6:	4643      	mov	r3, r8
 800ccc8:	463a      	mov	r2, r7
 800ccca:	4628      	mov	r0, r5
 800cccc:	47b0      	blx	r6
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	dc08      	bgt.n	800cce4 <__sflush_r+0xfc>
 800ccd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccda:	81a3      	strh	r3, [r4, #12]
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cce4:	4407      	add	r7, r0
 800cce6:	eba8 0800 	sub.w	r8, r8, r0
 800ccea:	e7e7      	b.n	800ccbc <__sflush_r+0xd4>
 800ccec:	dfbffffe 	.word	0xdfbffffe

0800ccf0 <_fflush_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	690b      	ldr	r3, [r1, #16]
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	460c      	mov	r4, r1
 800ccf8:	b913      	cbnz	r3, 800cd00 <_fflush_r+0x10>
 800ccfa:	2500      	movs	r5, #0
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	bd38      	pop	{r3, r4, r5, pc}
 800cd00:	b118      	cbz	r0, 800cd0a <_fflush_r+0x1a>
 800cd02:	6a03      	ldr	r3, [r0, #32]
 800cd04:	b90b      	cbnz	r3, 800cd0a <_fflush_r+0x1a>
 800cd06:	f7fd fb37 	bl	800a378 <__sinit>
 800cd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d0f3      	beq.n	800ccfa <_fflush_r+0xa>
 800cd12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd14:	07d0      	lsls	r0, r2, #31
 800cd16:	d404      	bmi.n	800cd22 <_fflush_r+0x32>
 800cd18:	0599      	lsls	r1, r3, #22
 800cd1a:	d402      	bmi.n	800cd22 <_fflush_r+0x32>
 800cd1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd1e:	f7fd fc42 	bl	800a5a6 <__retarget_lock_acquire_recursive>
 800cd22:	4628      	mov	r0, r5
 800cd24:	4621      	mov	r1, r4
 800cd26:	f7ff ff5f 	bl	800cbe8 <__sflush_r>
 800cd2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd2c:	07da      	lsls	r2, r3, #31
 800cd2e:	4605      	mov	r5, r0
 800cd30:	d4e4      	bmi.n	800ccfc <_fflush_r+0xc>
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	059b      	lsls	r3, r3, #22
 800cd36:	d4e1      	bmi.n	800ccfc <_fflush_r+0xc>
 800cd38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd3a:	f7fd fc35 	bl	800a5a8 <__retarget_lock_release_recursive>
 800cd3e:	e7dd      	b.n	800ccfc <_fflush_r+0xc>

0800cd40 <memmove>:
 800cd40:	4288      	cmp	r0, r1
 800cd42:	b510      	push	{r4, lr}
 800cd44:	eb01 0402 	add.w	r4, r1, r2
 800cd48:	d902      	bls.n	800cd50 <memmove+0x10>
 800cd4a:	4284      	cmp	r4, r0
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	d807      	bhi.n	800cd60 <memmove+0x20>
 800cd50:	1e43      	subs	r3, r0, #1
 800cd52:	42a1      	cmp	r1, r4
 800cd54:	d008      	beq.n	800cd68 <memmove+0x28>
 800cd56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd5e:	e7f8      	b.n	800cd52 <memmove+0x12>
 800cd60:	4402      	add	r2, r0
 800cd62:	4601      	mov	r1, r0
 800cd64:	428a      	cmp	r2, r1
 800cd66:	d100      	bne.n	800cd6a <memmove+0x2a>
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd72:	e7f7      	b.n	800cd64 <memmove+0x24>

0800cd74 <strncmp>:
 800cd74:	b510      	push	{r4, lr}
 800cd76:	b16a      	cbz	r2, 800cd94 <strncmp+0x20>
 800cd78:	3901      	subs	r1, #1
 800cd7a:	1884      	adds	r4, r0, r2
 800cd7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d103      	bne.n	800cd90 <strncmp+0x1c>
 800cd88:	42a0      	cmp	r0, r4
 800cd8a:	d001      	beq.n	800cd90 <strncmp+0x1c>
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	d1f5      	bne.n	800cd7c <strncmp+0x8>
 800cd90:	1ad0      	subs	r0, r2, r3
 800cd92:	bd10      	pop	{r4, pc}
 800cd94:	4610      	mov	r0, r2
 800cd96:	e7fc      	b.n	800cd92 <strncmp+0x1e>

0800cd98 <_sbrk_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d06      	ldr	r5, [pc, #24]	@ (800cdb4 <_sbrk_r+0x1c>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	602b      	str	r3, [r5, #0]
 800cda4:	f7f5 feaa 	bl	8002afc <_sbrk>
 800cda8:	1c43      	adds	r3, r0, #1
 800cdaa:	d102      	bne.n	800cdb2 <_sbrk_r+0x1a>
 800cdac:	682b      	ldr	r3, [r5, #0]
 800cdae:	b103      	cbz	r3, 800cdb2 <_sbrk_r+0x1a>
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	240006a8 	.word	0x240006a8

0800cdb8 <memcpy>:
 800cdb8:	440a      	add	r2, r1
 800cdba:	4291      	cmp	r1, r2
 800cdbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdc0:	d100      	bne.n	800cdc4 <memcpy+0xc>
 800cdc2:	4770      	bx	lr
 800cdc4:	b510      	push	{r4, lr}
 800cdc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdce:	4291      	cmp	r1, r2
 800cdd0:	d1f9      	bne.n	800cdc6 <memcpy+0xe>
 800cdd2:	bd10      	pop	{r4, pc}
 800cdd4:	0000      	movs	r0, r0
	...

0800cdd8 <nan>:
 800cdd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cde0 <nan+0x8>
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	00000000 	.word	0x00000000
 800cde4:	7ff80000 	.word	0x7ff80000

0800cde8 <__assert_func>:
 800cde8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdea:	4614      	mov	r4, r2
 800cdec:	461a      	mov	r2, r3
 800cdee:	4b09      	ldr	r3, [pc, #36]	@ (800ce14 <__assert_func+0x2c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	68d8      	ldr	r0, [r3, #12]
 800cdf6:	b954      	cbnz	r4, 800ce0e <__assert_func+0x26>
 800cdf8:	4b07      	ldr	r3, [pc, #28]	@ (800ce18 <__assert_func+0x30>)
 800cdfa:	461c      	mov	r4, r3
 800cdfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce00:	9100      	str	r1, [sp, #0]
 800ce02:	462b      	mov	r3, r5
 800ce04:	4905      	ldr	r1, [pc, #20]	@ (800ce1c <__assert_func+0x34>)
 800ce06:	f000 fba7 	bl	800d558 <fiprintf>
 800ce0a:	f000 fbb7 	bl	800d57c <abort>
 800ce0e:	4b04      	ldr	r3, [pc, #16]	@ (800ce20 <__assert_func+0x38>)
 800ce10:	e7f4      	b.n	800cdfc <__assert_func+0x14>
 800ce12:	bf00      	nop
 800ce14:	24000020 	.word	0x24000020
 800ce18:	0800ea05 	.word	0x0800ea05
 800ce1c:	0800e9d7 	.word	0x0800e9d7
 800ce20:	0800e9ca 	.word	0x0800e9ca

0800ce24 <_calloc_r>:
 800ce24:	b570      	push	{r4, r5, r6, lr}
 800ce26:	fba1 5402 	umull	r5, r4, r1, r2
 800ce2a:	b93c      	cbnz	r4, 800ce3c <_calloc_r+0x18>
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	f7fe fa15 	bl	800b25c <_malloc_r>
 800ce32:	4606      	mov	r6, r0
 800ce34:	b928      	cbnz	r0, 800ce42 <_calloc_r+0x1e>
 800ce36:	2600      	movs	r6, #0
 800ce38:	4630      	mov	r0, r6
 800ce3a:	bd70      	pop	{r4, r5, r6, pc}
 800ce3c:	220c      	movs	r2, #12
 800ce3e:	6002      	str	r2, [r0, #0]
 800ce40:	e7f9      	b.n	800ce36 <_calloc_r+0x12>
 800ce42:	462a      	mov	r2, r5
 800ce44:	4621      	mov	r1, r4
 800ce46:	f7fd fb30 	bl	800a4aa <memset>
 800ce4a:	e7f5      	b.n	800ce38 <_calloc_r+0x14>

0800ce4c <rshift>:
 800ce4c:	6903      	ldr	r3, [r0, #16]
 800ce4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce5a:	f100 0414 	add.w	r4, r0, #20
 800ce5e:	dd45      	ble.n	800ceec <rshift+0xa0>
 800ce60:	f011 011f 	ands.w	r1, r1, #31
 800ce64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce6c:	d10c      	bne.n	800ce88 <rshift+0x3c>
 800ce6e:	f100 0710 	add.w	r7, r0, #16
 800ce72:	4629      	mov	r1, r5
 800ce74:	42b1      	cmp	r1, r6
 800ce76:	d334      	bcc.n	800cee2 <rshift+0x96>
 800ce78:	1a9b      	subs	r3, r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	1eea      	subs	r2, r5, #3
 800ce7e:	4296      	cmp	r6, r2
 800ce80:	bf38      	it	cc
 800ce82:	2300      	movcc	r3, #0
 800ce84:	4423      	add	r3, r4
 800ce86:	e015      	b.n	800ceb4 <rshift+0x68>
 800ce88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce8c:	f1c1 0820 	rsb	r8, r1, #32
 800ce90:	40cf      	lsrs	r7, r1
 800ce92:	f105 0e04 	add.w	lr, r5, #4
 800ce96:	46a1      	mov	r9, r4
 800ce98:	4576      	cmp	r6, lr
 800ce9a:	46f4      	mov	ip, lr
 800ce9c:	d815      	bhi.n	800ceca <rshift+0x7e>
 800ce9e:	1a9a      	subs	r2, r3, r2
 800cea0:	0092      	lsls	r2, r2, #2
 800cea2:	3a04      	subs	r2, #4
 800cea4:	3501      	adds	r5, #1
 800cea6:	42ae      	cmp	r6, r5
 800cea8:	bf38      	it	cc
 800ceaa:	2200      	movcc	r2, #0
 800ceac:	18a3      	adds	r3, r4, r2
 800ceae:	50a7      	str	r7, [r4, r2]
 800ceb0:	b107      	cbz	r7, 800ceb4 <rshift+0x68>
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	1b1a      	subs	r2, r3, r4
 800ceb6:	42a3      	cmp	r3, r4
 800ceb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cebc:	bf08      	it	eq
 800cebe:	2300      	moveq	r3, #0
 800cec0:	6102      	str	r2, [r0, #16]
 800cec2:	bf08      	it	eq
 800cec4:	6143      	streq	r3, [r0, #20]
 800cec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceca:	f8dc c000 	ldr.w	ip, [ip]
 800cece:	fa0c fc08 	lsl.w	ip, ip, r8
 800ced2:	ea4c 0707 	orr.w	r7, ip, r7
 800ced6:	f849 7b04 	str.w	r7, [r9], #4
 800ceda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cede:	40cf      	lsrs	r7, r1
 800cee0:	e7da      	b.n	800ce98 <rshift+0x4c>
 800cee2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cee6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ceea:	e7c3      	b.n	800ce74 <rshift+0x28>
 800ceec:	4623      	mov	r3, r4
 800ceee:	e7e1      	b.n	800ceb4 <rshift+0x68>

0800cef0 <__hexdig_fun>:
 800cef0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cef4:	2b09      	cmp	r3, #9
 800cef6:	d802      	bhi.n	800cefe <__hexdig_fun+0xe>
 800cef8:	3820      	subs	r0, #32
 800cefa:	b2c0      	uxtb	r0, r0
 800cefc:	4770      	bx	lr
 800cefe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cf02:	2b05      	cmp	r3, #5
 800cf04:	d801      	bhi.n	800cf0a <__hexdig_fun+0x1a>
 800cf06:	3847      	subs	r0, #71	@ 0x47
 800cf08:	e7f7      	b.n	800cefa <__hexdig_fun+0xa>
 800cf0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cf0e:	2b05      	cmp	r3, #5
 800cf10:	d801      	bhi.n	800cf16 <__hexdig_fun+0x26>
 800cf12:	3827      	subs	r0, #39	@ 0x27
 800cf14:	e7f1      	b.n	800cefa <__hexdig_fun+0xa>
 800cf16:	2000      	movs	r0, #0
 800cf18:	4770      	bx	lr
	...

0800cf1c <__gethex>:
 800cf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	b085      	sub	sp, #20
 800cf22:	468a      	mov	sl, r1
 800cf24:	9302      	str	r3, [sp, #8]
 800cf26:	680b      	ldr	r3, [r1, #0]
 800cf28:	9001      	str	r0, [sp, #4]
 800cf2a:	4690      	mov	r8, r2
 800cf2c:	1c9c      	adds	r4, r3, #2
 800cf2e:	46a1      	mov	r9, r4
 800cf30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cf34:	2830      	cmp	r0, #48	@ 0x30
 800cf36:	d0fa      	beq.n	800cf2e <__gethex+0x12>
 800cf38:	eba9 0303 	sub.w	r3, r9, r3
 800cf3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cf40:	f7ff ffd6 	bl	800cef0 <__hexdig_fun>
 800cf44:	4605      	mov	r5, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d168      	bne.n	800d01c <__gethex+0x100>
 800cf4a:	49a0      	ldr	r1, [pc, #640]	@ (800d1cc <__gethex+0x2b0>)
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	4648      	mov	r0, r9
 800cf50:	f7ff ff10 	bl	800cd74 <strncmp>
 800cf54:	4607      	mov	r7, r0
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d167      	bne.n	800d02a <__gethex+0x10e>
 800cf5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cf5e:	4626      	mov	r6, r4
 800cf60:	f7ff ffc6 	bl	800cef0 <__hexdig_fun>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d062      	beq.n	800d02e <__gethex+0x112>
 800cf68:	4623      	mov	r3, r4
 800cf6a:	7818      	ldrb	r0, [r3, #0]
 800cf6c:	2830      	cmp	r0, #48	@ 0x30
 800cf6e:	4699      	mov	r9, r3
 800cf70:	f103 0301 	add.w	r3, r3, #1
 800cf74:	d0f9      	beq.n	800cf6a <__gethex+0x4e>
 800cf76:	f7ff ffbb 	bl	800cef0 <__hexdig_fun>
 800cf7a:	fab0 f580 	clz	r5, r0
 800cf7e:	096d      	lsrs	r5, r5, #5
 800cf80:	f04f 0b01 	mov.w	fp, #1
 800cf84:	464a      	mov	r2, r9
 800cf86:	4616      	mov	r6, r2
 800cf88:	3201      	adds	r2, #1
 800cf8a:	7830      	ldrb	r0, [r6, #0]
 800cf8c:	f7ff ffb0 	bl	800cef0 <__hexdig_fun>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d1f8      	bne.n	800cf86 <__gethex+0x6a>
 800cf94:	498d      	ldr	r1, [pc, #564]	@ (800d1cc <__gethex+0x2b0>)
 800cf96:	2201      	movs	r2, #1
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f7ff feeb 	bl	800cd74 <strncmp>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d13f      	bne.n	800d022 <__gethex+0x106>
 800cfa2:	b944      	cbnz	r4, 800cfb6 <__gethex+0x9a>
 800cfa4:	1c74      	adds	r4, r6, #1
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	4616      	mov	r6, r2
 800cfaa:	3201      	adds	r2, #1
 800cfac:	7830      	ldrb	r0, [r6, #0]
 800cfae:	f7ff ff9f 	bl	800cef0 <__hexdig_fun>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d1f8      	bne.n	800cfa8 <__gethex+0x8c>
 800cfb6:	1ba4      	subs	r4, r4, r6
 800cfb8:	00a7      	lsls	r7, r4, #2
 800cfba:	7833      	ldrb	r3, [r6, #0]
 800cfbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cfc0:	2b50      	cmp	r3, #80	@ 0x50
 800cfc2:	d13e      	bne.n	800d042 <__gethex+0x126>
 800cfc4:	7873      	ldrb	r3, [r6, #1]
 800cfc6:	2b2b      	cmp	r3, #43	@ 0x2b
 800cfc8:	d033      	beq.n	800d032 <__gethex+0x116>
 800cfca:	2b2d      	cmp	r3, #45	@ 0x2d
 800cfcc:	d034      	beq.n	800d038 <__gethex+0x11c>
 800cfce:	1c71      	adds	r1, r6, #1
 800cfd0:	2400      	movs	r4, #0
 800cfd2:	7808      	ldrb	r0, [r1, #0]
 800cfd4:	f7ff ff8c 	bl	800cef0 <__hexdig_fun>
 800cfd8:	1e43      	subs	r3, r0, #1
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b18      	cmp	r3, #24
 800cfde:	d830      	bhi.n	800d042 <__gethex+0x126>
 800cfe0:	f1a0 0210 	sub.w	r2, r0, #16
 800cfe4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfe8:	f7ff ff82 	bl	800cef0 <__hexdig_fun>
 800cfec:	f100 3cff 	add.w	ip, r0, #4294967295
 800cff0:	fa5f fc8c 	uxtb.w	ip, ip
 800cff4:	f1bc 0f18 	cmp.w	ip, #24
 800cff8:	f04f 030a 	mov.w	r3, #10
 800cffc:	d91e      	bls.n	800d03c <__gethex+0x120>
 800cffe:	b104      	cbz	r4, 800d002 <__gethex+0xe6>
 800d000:	4252      	negs	r2, r2
 800d002:	4417      	add	r7, r2
 800d004:	f8ca 1000 	str.w	r1, [sl]
 800d008:	b1ed      	cbz	r5, 800d046 <__gethex+0x12a>
 800d00a:	f1bb 0f00 	cmp.w	fp, #0
 800d00e:	bf0c      	ite	eq
 800d010:	2506      	moveq	r5, #6
 800d012:	2500      	movne	r5, #0
 800d014:	4628      	mov	r0, r5
 800d016:	b005      	add	sp, #20
 800d018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01c:	2500      	movs	r5, #0
 800d01e:	462c      	mov	r4, r5
 800d020:	e7b0      	b.n	800cf84 <__gethex+0x68>
 800d022:	2c00      	cmp	r4, #0
 800d024:	d1c7      	bne.n	800cfb6 <__gethex+0x9a>
 800d026:	4627      	mov	r7, r4
 800d028:	e7c7      	b.n	800cfba <__gethex+0x9e>
 800d02a:	464e      	mov	r6, r9
 800d02c:	462f      	mov	r7, r5
 800d02e:	2501      	movs	r5, #1
 800d030:	e7c3      	b.n	800cfba <__gethex+0x9e>
 800d032:	2400      	movs	r4, #0
 800d034:	1cb1      	adds	r1, r6, #2
 800d036:	e7cc      	b.n	800cfd2 <__gethex+0xb6>
 800d038:	2401      	movs	r4, #1
 800d03a:	e7fb      	b.n	800d034 <__gethex+0x118>
 800d03c:	fb03 0002 	mla	r0, r3, r2, r0
 800d040:	e7ce      	b.n	800cfe0 <__gethex+0xc4>
 800d042:	4631      	mov	r1, r6
 800d044:	e7de      	b.n	800d004 <__gethex+0xe8>
 800d046:	eba6 0309 	sub.w	r3, r6, r9
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4629      	mov	r1, r5
 800d04e:	2b07      	cmp	r3, #7
 800d050:	dc0a      	bgt.n	800d068 <__gethex+0x14c>
 800d052:	9801      	ldr	r0, [sp, #4]
 800d054:	f7fe f98e 	bl	800b374 <_Balloc>
 800d058:	4604      	mov	r4, r0
 800d05a:	b940      	cbnz	r0, 800d06e <__gethex+0x152>
 800d05c:	4b5c      	ldr	r3, [pc, #368]	@ (800d1d0 <__gethex+0x2b4>)
 800d05e:	4602      	mov	r2, r0
 800d060:	21e4      	movs	r1, #228	@ 0xe4
 800d062:	485c      	ldr	r0, [pc, #368]	@ (800d1d4 <__gethex+0x2b8>)
 800d064:	f7ff fec0 	bl	800cde8 <__assert_func>
 800d068:	3101      	adds	r1, #1
 800d06a:	105b      	asrs	r3, r3, #1
 800d06c:	e7ef      	b.n	800d04e <__gethex+0x132>
 800d06e:	f100 0a14 	add.w	sl, r0, #20
 800d072:	2300      	movs	r3, #0
 800d074:	4655      	mov	r5, sl
 800d076:	469b      	mov	fp, r3
 800d078:	45b1      	cmp	r9, r6
 800d07a:	d337      	bcc.n	800d0ec <__gethex+0x1d0>
 800d07c:	f845 bb04 	str.w	fp, [r5], #4
 800d080:	eba5 050a 	sub.w	r5, r5, sl
 800d084:	10ad      	asrs	r5, r5, #2
 800d086:	6125      	str	r5, [r4, #16]
 800d088:	4658      	mov	r0, fp
 800d08a:	f7fe fa65 	bl	800b558 <__hi0bits>
 800d08e:	016d      	lsls	r5, r5, #5
 800d090:	f8d8 6000 	ldr.w	r6, [r8]
 800d094:	1a2d      	subs	r5, r5, r0
 800d096:	42b5      	cmp	r5, r6
 800d098:	dd54      	ble.n	800d144 <__gethex+0x228>
 800d09a:	1bad      	subs	r5, r5, r6
 800d09c:	4629      	mov	r1, r5
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f7fe fdf6 	bl	800bc90 <__any_on>
 800d0a4:	4681      	mov	r9, r0
 800d0a6:	b178      	cbz	r0, 800d0c8 <__gethex+0x1ac>
 800d0a8:	1e6b      	subs	r3, r5, #1
 800d0aa:	1159      	asrs	r1, r3, #5
 800d0ac:	f003 021f 	and.w	r2, r3, #31
 800d0b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d0b4:	f04f 0901 	mov.w	r9, #1
 800d0b8:	fa09 f202 	lsl.w	r2, r9, r2
 800d0bc:	420a      	tst	r2, r1
 800d0be:	d003      	beq.n	800d0c8 <__gethex+0x1ac>
 800d0c0:	454b      	cmp	r3, r9
 800d0c2:	dc36      	bgt.n	800d132 <__gethex+0x216>
 800d0c4:	f04f 0902 	mov.w	r9, #2
 800d0c8:	4629      	mov	r1, r5
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f7ff febe 	bl	800ce4c <rshift>
 800d0d0:	442f      	add	r7, r5
 800d0d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0d6:	42bb      	cmp	r3, r7
 800d0d8:	da42      	bge.n	800d160 <__gethex+0x244>
 800d0da:	9801      	ldr	r0, [sp, #4]
 800d0dc:	4621      	mov	r1, r4
 800d0de:	f7fe f989 	bl	800b3f4 <_Bfree>
 800d0e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	25a3      	movs	r5, #163	@ 0xa3
 800d0ea:	e793      	b.n	800d014 <__gethex+0xf8>
 800d0ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d0f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d0f2:	d012      	beq.n	800d11a <__gethex+0x1fe>
 800d0f4:	2b20      	cmp	r3, #32
 800d0f6:	d104      	bne.n	800d102 <__gethex+0x1e6>
 800d0f8:	f845 bb04 	str.w	fp, [r5], #4
 800d0fc:	f04f 0b00 	mov.w	fp, #0
 800d100:	465b      	mov	r3, fp
 800d102:	7830      	ldrb	r0, [r6, #0]
 800d104:	9303      	str	r3, [sp, #12]
 800d106:	f7ff fef3 	bl	800cef0 <__hexdig_fun>
 800d10a:	9b03      	ldr	r3, [sp, #12]
 800d10c:	f000 000f 	and.w	r0, r0, #15
 800d110:	4098      	lsls	r0, r3
 800d112:	ea4b 0b00 	orr.w	fp, fp, r0
 800d116:	3304      	adds	r3, #4
 800d118:	e7ae      	b.n	800d078 <__gethex+0x15c>
 800d11a:	45b1      	cmp	r9, r6
 800d11c:	d8ea      	bhi.n	800d0f4 <__gethex+0x1d8>
 800d11e:	492b      	ldr	r1, [pc, #172]	@ (800d1cc <__gethex+0x2b0>)
 800d120:	9303      	str	r3, [sp, #12]
 800d122:	2201      	movs	r2, #1
 800d124:	4630      	mov	r0, r6
 800d126:	f7ff fe25 	bl	800cd74 <strncmp>
 800d12a:	9b03      	ldr	r3, [sp, #12]
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d1e1      	bne.n	800d0f4 <__gethex+0x1d8>
 800d130:	e7a2      	b.n	800d078 <__gethex+0x15c>
 800d132:	1ea9      	subs	r1, r5, #2
 800d134:	4620      	mov	r0, r4
 800d136:	f7fe fdab 	bl	800bc90 <__any_on>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d0c2      	beq.n	800d0c4 <__gethex+0x1a8>
 800d13e:	f04f 0903 	mov.w	r9, #3
 800d142:	e7c1      	b.n	800d0c8 <__gethex+0x1ac>
 800d144:	da09      	bge.n	800d15a <__gethex+0x23e>
 800d146:	1b75      	subs	r5, r6, r5
 800d148:	4621      	mov	r1, r4
 800d14a:	9801      	ldr	r0, [sp, #4]
 800d14c:	462a      	mov	r2, r5
 800d14e:	f7fe fb69 	bl	800b824 <__lshift>
 800d152:	1b7f      	subs	r7, r7, r5
 800d154:	4604      	mov	r4, r0
 800d156:	f100 0a14 	add.w	sl, r0, #20
 800d15a:	f04f 0900 	mov.w	r9, #0
 800d15e:	e7b8      	b.n	800d0d2 <__gethex+0x1b6>
 800d160:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d164:	42bd      	cmp	r5, r7
 800d166:	dd6f      	ble.n	800d248 <__gethex+0x32c>
 800d168:	1bed      	subs	r5, r5, r7
 800d16a:	42ae      	cmp	r6, r5
 800d16c:	dc34      	bgt.n	800d1d8 <__gethex+0x2bc>
 800d16e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d172:	2b02      	cmp	r3, #2
 800d174:	d022      	beq.n	800d1bc <__gethex+0x2a0>
 800d176:	2b03      	cmp	r3, #3
 800d178:	d024      	beq.n	800d1c4 <__gethex+0x2a8>
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d115      	bne.n	800d1aa <__gethex+0x28e>
 800d17e:	42ae      	cmp	r6, r5
 800d180:	d113      	bne.n	800d1aa <__gethex+0x28e>
 800d182:	2e01      	cmp	r6, #1
 800d184:	d10b      	bne.n	800d19e <__gethex+0x282>
 800d186:	9a02      	ldr	r2, [sp, #8]
 800d188:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d18c:	6013      	str	r3, [r2, #0]
 800d18e:	2301      	movs	r3, #1
 800d190:	6123      	str	r3, [r4, #16]
 800d192:	f8ca 3000 	str.w	r3, [sl]
 800d196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d198:	2562      	movs	r5, #98	@ 0x62
 800d19a:	601c      	str	r4, [r3, #0]
 800d19c:	e73a      	b.n	800d014 <__gethex+0xf8>
 800d19e:	1e71      	subs	r1, r6, #1
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f7fe fd75 	bl	800bc90 <__any_on>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d1ed      	bne.n	800d186 <__gethex+0x26a>
 800d1aa:	9801      	ldr	r0, [sp, #4]
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	f7fe f921 	bl	800b3f4 <_Bfree>
 800d1b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	2550      	movs	r5, #80	@ 0x50
 800d1ba:	e72b      	b.n	800d014 <__gethex+0xf8>
 800d1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1f3      	bne.n	800d1aa <__gethex+0x28e>
 800d1c2:	e7e0      	b.n	800d186 <__gethex+0x26a>
 800d1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1dd      	bne.n	800d186 <__gethex+0x26a>
 800d1ca:	e7ee      	b.n	800d1aa <__gethex+0x28e>
 800d1cc:	0800e858 	.word	0x0800e858
 800d1d0:	0800e6ed 	.word	0x0800e6ed
 800d1d4:	0800ea06 	.word	0x0800ea06
 800d1d8:	1e6f      	subs	r7, r5, #1
 800d1da:	f1b9 0f00 	cmp.w	r9, #0
 800d1de:	d130      	bne.n	800d242 <__gethex+0x326>
 800d1e0:	b127      	cbz	r7, 800d1ec <__gethex+0x2d0>
 800d1e2:	4639      	mov	r1, r7
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7fe fd53 	bl	800bc90 <__any_on>
 800d1ea:	4681      	mov	r9, r0
 800d1ec:	117a      	asrs	r2, r7, #5
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d1f4:	f007 071f 	and.w	r7, r7, #31
 800d1f8:	40bb      	lsls	r3, r7
 800d1fa:	4213      	tst	r3, r2
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	4620      	mov	r0, r4
 800d200:	bf18      	it	ne
 800d202:	f049 0902 	orrne.w	r9, r9, #2
 800d206:	f7ff fe21 	bl	800ce4c <rshift>
 800d20a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d20e:	1b76      	subs	r6, r6, r5
 800d210:	2502      	movs	r5, #2
 800d212:	f1b9 0f00 	cmp.w	r9, #0
 800d216:	d047      	beq.n	800d2a8 <__gethex+0x38c>
 800d218:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d015      	beq.n	800d24c <__gethex+0x330>
 800d220:	2b03      	cmp	r3, #3
 800d222:	d017      	beq.n	800d254 <__gethex+0x338>
 800d224:	2b01      	cmp	r3, #1
 800d226:	d109      	bne.n	800d23c <__gethex+0x320>
 800d228:	f019 0f02 	tst.w	r9, #2
 800d22c:	d006      	beq.n	800d23c <__gethex+0x320>
 800d22e:	f8da 3000 	ldr.w	r3, [sl]
 800d232:	ea49 0903 	orr.w	r9, r9, r3
 800d236:	f019 0f01 	tst.w	r9, #1
 800d23a:	d10e      	bne.n	800d25a <__gethex+0x33e>
 800d23c:	f045 0510 	orr.w	r5, r5, #16
 800d240:	e032      	b.n	800d2a8 <__gethex+0x38c>
 800d242:	f04f 0901 	mov.w	r9, #1
 800d246:	e7d1      	b.n	800d1ec <__gethex+0x2d0>
 800d248:	2501      	movs	r5, #1
 800d24a:	e7e2      	b.n	800d212 <__gethex+0x2f6>
 800d24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d24e:	f1c3 0301 	rsb	r3, r3, #1
 800d252:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d256:	2b00      	cmp	r3, #0
 800d258:	d0f0      	beq.n	800d23c <__gethex+0x320>
 800d25a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d25e:	f104 0314 	add.w	r3, r4, #20
 800d262:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d266:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d26a:	f04f 0c00 	mov.w	ip, #0
 800d26e:	4618      	mov	r0, r3
 800d270:	f853 2b04 	ldr.w	r2, [r3], #4
 800d274:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d278:	d01b      	beq.n	800d2b2 <__gethex+0x396>
 800d27a:	3201      	adds	r2, #1
 800d27c:	6002      	str	r2, [r0, #0]
 800d27e:	2d02      	cmp	r5, #2
 800d280:	f104 0314 	add.w	r3, r4, #20
 800d284:	d13c      	bne.n	800d300 <__gethex+0x3e4>
 800d286:	f8d8 2000 	ldr.w	r2, [r8]
 800d28a:	3a01      	subs	r2, #1
 800d28c:	42b2      	cmp	r2, r6
 800d28e:	d109      	bne.n	800d2a4 <__gethex+0x388>
 800d290:	1171      	asrs	r1, r6, #5
 800d292:	2201      	movs	r2, #1
 800d294:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d298:	f006 061f 	and.w	r6, r6, #31
 800d29c:	fa02 f606 	lsl.w	r6, r2, r6
 800d2a0:	421e      	tst	r6, r3
 800d2a2:	d13a      	bne.n	800d31a <__gethex+0x3fe>
 800d2a4:	f045 0520 	orr.w	r5, r5, #32
 800d2a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2aa:	601c      	str	r4, [r3, #0]
 800d2ac:	9b02      	ldr	r3, [sp, #8]
 800d2ae:	601f      	str	r7, [r3, #0]
 800d2b0:	e6b0      	b.n	800d014 <__gethex+0xf8>
 800d2b2:	4299      	cmp	r1, r3
 800d2b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2b8:	d8d9      	bhi.n	800d26e <__gethex+0x352>
 800d2ba:	68a3      	ldr	r3, [r4, #8]
 800d2bc:	459b      	cmp	fp, r3
 800d2be:	db17      	blt.n	800d2f0 <__gethex+0x3d4>
 800d2c0:	6861      	ldr	r1, [r4, #4]
 800d2c2:	9801      	ldr	r0, [sp, #4]
 800d2c4:	3101      	adds	r1, #1
 800d2c6:	f7fe f855 	bl	800b374 <_Balloc>
 800d2ca:	4681      	mov	r9, r0
 800d2cc:	b918      	cbnz	r0, 800d2d6 <__gethex+0x3ba>
 800d2ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d338 <__gethex+0x41c>)
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	2184      	movs	r1, #132	@ 0x84
 800d2d4:	e6c5      	b.n	800d062 <__gethex+0x146>
 800d2d6:	6922      	ldr	r2, [r4, #16]
 800d2d8:	3202      	adds	r2, #2
 800d2da:	f104 010c 	add.w	r1, r4, #12
 800d2de:	0092      	lsls	r2, r2, #2
 800d2e0:	300c      	adds	r0, #12
 800d2e2:	f7ff fd69 	bl	800cdb8 <memcpy>
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	9801      	ldr	r0, [sp, #4]
 800d2ea:	f7fe f883 	bl	800b3f4 <_Bfree>
 800d2ee:	464c      	mov	r4, r9
 800d2f0:	6923      	ldr	r3, [r4, #16]
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2f8:	6122      	str	r2, [r4, #16]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	615a      	str	r2, [r3, #20]
 800d2fe:	e7be      	b.n	800d27e <__gethex+0x362>
 800d300:	6922      	ldr	r2, [r4, #16]
 800d302:	455a      	cmp	r2, fp
 800d304:	dd0b      	ble.n	800d31e <__gethex+0x402>
 800d306:	2101      	movs	r1, #1
 800d308:	4620      	mov	r0, r4
 800d30a:	f7ff fd9f 	bl	800ce4c <rshift>
 800d30e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d312:	3701      	adds	r7, #1
 800d314:	42bb      	cmp	r3, r7
 800d316:	f6ff aee0 	blt.w	800d0da <__gethex+0x1be>
 800d31a:	2501      	movs	r5, #1
 800d31c:	e7c2      	b.n	800d2a4 <__gethex+0x388>
 800d31e:	f016 061f 	ands.w	r6, r6, #31
 800d322:	d0fa      	beq.n	800d31a <__gethex+0x3fe>
 800d324:	4453      	add	r3, sl
 800d326:	f1c6 0620 	rsb	r6, r6, #32
 800d32a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d32e:	f7fe f913 	bl	800b558 <__hi0bits>
 800d332:	42b0      	cmp	r0, r6
 800d334:	dbe7      	blt.n	800d306 <__gethex+0x3ea>
 800d336:	e7f0      	b.n	800d31a <__gethex+0x3fe>
 800d338:	0800e6ed 	.word	0x0800e6ed

0800d33c <L_shift>:
 800d33c:	f1c2 0208 	rsb	r2, r2, #8
 800d340:	0092      	lsls	r2, r2, #2
 800d342:	b570      	push	{r4, r5, r6, lr}
 800d344:	f1c2 0620 	rsb	r6, r2, #32
 800d348:	6843      	ldr	r3, [r0, #4]
 800d34a:	6804      	ldr	r4, [r0, #0]
 800d34c:	fa03 f506 	lsl.w	r5, r3, r6
 800d350:	432c      	orrs	r4, r5
 800d352:	40d3      	lsrs	r3, r2
 800d354:	6004      	str	r4, [r0, #0]
 800d356:	f840 3f04 	str.w	r3, [r0, #4]!
 800d35a:	4288      	cmp	r0, r1
 800d35c:	d3f4      	bcc.n	800d348 <L_shift+0xc>
 800d35e:	bd70      	pop	{r4, r5, r6, pc}

0800d360 <__match>:
 800d360:	b530      	push	{r4, r5, lr}
 800d362:	6803      	ldr	r3, [r0, #0]
 800d364:	3301      	adds	r3, #1
 800d366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d36a:	b914      	cbnz	r4, 800d372 <__match+0x12>
 800d36c:	6003      	str	r3, [r0, #0]
 800d36e:	2001      	movs	r0, #1
 800d370:	bd30      	pop	{r4, r5, pc}
 800d372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d376:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d37a:	2d19      	cmp	r5, #25
 800d37c:	bf98      	it	ls
 800d37e:	3220      	addls	r2, #32
 800d380:	42a2      	cmp	r2, r4
 800d382:	d0f0      	beq.n	800d366 <__match+0x6>
 800d384:	2000      	movs	r0, #0
 800d386:	e7f3      	b.n	800d370 <__match+0x10>

0800d388 <__hexnan>:
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	680b      	ldr	r3, [r1, #0]
 800d38e:	6801      	ldr	r1, [r0, #0]
 800d390:	115e      	asrs	r6, r3, #5
 800d392:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d396:	f013 031f 	ands.w	r3, r3, #31
 800d39a:	b087      	sub	sp, #28
 800d39c:	bf18      	it	ne
 800d39e:	3604      	addne	r6, #4
 800d3a0:	2500      	movs	r5, #0
 800d3a2:	1f37      	subs	r7, r6, #4
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	4690      	mov	r8, r2
 800d3a8:	9301      	str	r3, [sp, #4]
 800d3aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3ae:	46b9      	mov	r9, r7
 800d3b0:	463c      	mov	r4, r7
 800d3b2:	9502      	str	r5, [sp, #8]
 800d3b4:	46ab      	mov	fp, r5
 800d3b6:	784a      	ldrb	r2, [r1, #1]
 800d3b8:	1c4b      	adds	r3, r1, #1
 800d3ba:	9303      	str	r3, [sp, #12]
 800d3bc:	b342      	cbz	r2, 800d410 <__hexnan+0x88>
 800d3be:	4610      	mov	r0, r2
 800d3c0:	9105      	str	r1, [sp, #20]
 800d3c2:	9204      	str	r2, [sp, #16]
 800d3c4:	f7ff fd94 	bl	800cef0 <__hexdig_fun>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d151      	bne.n	800d470 <__hexnan+0xe8>
 800d3cc:	9a04      	ldr	r2, [sp, #16]
 800d3ce:	9905      	ldr	r1, [sp, #20]
 800d3d0:	2a20      	cmp	r2, #32
 800d3d2:	d818      	bhi.n	800d406 <__hexnan+0x7e>
 800d3d4:	9b02      	ldr	r3, [sp, #8]
 800d3d6:	459b      	cmp	fp, r3
 800d3d8:	dd13      	ble.n	800d402 <__hexnan+0x7a>
 800d3da:	454c      	cmp	r4, r9
 800d3dc:	d206      	bcs.n	800d3ec <__hexnan+0x64>
 800d3de:	2d07      	cmp	r5, #7
 800d3e0:	dc04      	bgt.n	800d3ec <__hexnan+0x64>
 800d3e2:	462a      	mov	r2, r5
 800d3e4:	4649      	mov	r1, r9
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f7ff ffa8 	bl	800d33c <L_shift>
 800d3ec:	4544      	cmp	r4, r8
 800d3ee:	d952      	bls.n	800d496 <__hexnan+0x10e>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f1a4 0904 	sub.w	r9, r4, #4
 800d3f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3fa:	f8cd b008 	str.w	fp, [sp, #8]
 800d3fe:	464c      	mov	r4, r9
 800d400:	461d      	mov	r5, r3
 800d402:	9903      	ldr	r1, [sp, #12]
 800d404:	e7d7      	b.n	800d3b6 <__hexnan+0x2e>
 800d406:	2a29      	cmp	r2, #41	@ 0x29
 800d408:	d157      	bne.n	800d4ba <__hexnan+0x132>
 800d40a:	3102      	adds	r1, #2
 800d40c:	f8ca 1000 	str.w	r1, [sl]
 800d410:	f1bb 0f00 	cmp.w	fp, #0
 800d414:	d051      	beq.n	800d4ba <__hexnan+0x132>
 800d416:	454c      	cmp	r4, r9
 800d418:	d206      	bcs.n	800d428 <__hexnan+0xa0>
 800d41a:	2d07      	cmp	r5, #7
 800d41c:	dc04      	bgt.n	800d428 <__hexnan+0xa0>
 800d41e:	462a      	mov	r2, r5
 800d420:	4649      	mov	r1, r9
 800d422:	4620      	mov	r0, r4
 800d424:	f7ff ff8a 	bl	800d33c <L_shift>
 800d428:	4544      	cmp	r4, r8
 800d42a:	d936      	bls.n	800d49a <__hexnan+0x112>
 800d42c:	f1a8 0204 	sub.w	r2, r8, #4
 800d430:	4623      	mov	r3, r4
 800d432:	f853 1b04 	ldr.w	r1, [r3], #4
 800d436:	f842 1f04 	str.w	r1, [r2, #4]!
 800d43a:	429f      	cmp	r7, r3
 800d43c:	d2f9      	bcs.n	800d432 <__hexnan+0xaa>
 800d43e:	1b3b      	subs	r3, r7, r4
 800d440:	f023 0303 	bic.w	r3, r3, #3
 800d444:	3304      	adds	r3, #4
 800d446:	3401      	adds	r4, #1
 800d448:	3e03      	subs	r6, #3
 800d44a:	42b4      	cmp	r4, r6
 800d44c:	bf88      	it	hi
 800d44e:	2304      	movhi	r3, #4
 800d450:	4443      	add	r3, r8
 800d452:	2200      	movs	r2, #0
 800d454:	f843 2b04 	str.w	r2, [r3], #4
 800d458:	429f      	cmp	r7, r3
 800d45a:	d2fb      	bcs.n	800d454 <__hexnan+0xcc>
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	b91b      	cbnz	r3, 800d468 <__hexnan+0xe0>
 800d460:	4547      	cmp	r7, r8
 800d462:	d128      	bne.n	800d4b6 <__hexnan+0x12e>
 800d464:	2301      	movs	r3, #1
 800d466:	603b      	str	r3, [r7, #0]
 800d468:	2005      	movs	r0, #5
 800d46a:	b007      	add	sp, #28
 800d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d470:	3501      	adds	r5, #1
 800d472:	2d08      	cmp	r5, #8
 800d474:	f10b 0b01 	add.w	fp, fp, #1
 800d478:	dd06      	ble.n	800d488 <__hexnan+0x100>
 800d47a:	4544      	cmp	r4, r8
 800d47c:	d9c1      	bls.n	800d402 <__hexnan+0x7a>
 800d47e:	2300      	movs	r3, #0
 800d480:	f844 3c04 	str.w	r3, [r4, #-4]
 800d484:	2501      	movs	r5, #1
 800d486:	3c04      	subs	r4, #4
 800d488:	6822      	ldr	r2, [r4, #0]
 800d48a:	f000 000f 	and.w	r0, r0, #15
 800d48e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d492:	6020      	str	r0, [r4, #0]
 800d494:	e7b5      	b.n	800d402 <__hexnan+0x7a>
 800d496:	2508      	movs	r5, #8
 800d498:	e7b3      	b.n	800d402 <__hexnan+0x7a>
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d0dd      	beq.n	800d45c <__hexnan+0xd4>
 800d4a0:	f1c3 0320 	rsb	r3, r3, #32
 800d4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a8:	40da      	lsrs	r2, r3
 800d4aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d4ae:	4013      	ands	r3, r2
 800d4b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d4b4:	e7d2      	b.n	800d45c <__hexnan+0xd4>
 800d4b6:	3f04      	subs	r7, #4
 800d4b8:	e7d0      	b.n	800d45c <__hexnan+0xd4>
 800d4ba:	2004      	movs	r0, #4
 800d4bc:	e7d5      	b.n	800d46a <__hexnan+0xe2>

0800d4be <__ascii_mbtowc>:
 800d4be:	b082      	sub	sp, #8
 800d4c0:	b901      	cbnz	r1, 800d4c4 <__ascii_mbtowc+0x6>
 800d4c2:	a901      	add	r1, sp, #4
 800d4c4:	b142      	cbz	r2, 800d4d8 <__ascii_mbtowc+0x1a>
 800d4c6:	b14b      	cbz	r3, 800d4dc <__ascii_mbtowc+0x1e>
 800d4c8:	7813      	ldrb	r3, [r2, #0]
 800d4ca:	600b      	str	r3, [r1, #0]
 800d4cc:	7812      	ldrb	r2, [r2, #0]
 800d4ce:	1e10      	subs	r0, r2, #0
 800d4d0:	bf18      	it	ne
 800d4d2:	2001      	movne	r0, #1
 800d4d4:	b002      	add	sp, #8
 800d4d6:	4770      	bx	lr
 800d4d8:	4610      	mov	r0, r2
 800d4da:	e7fb      	b.n	800d4d4 <__ascii_mbtowc+0x16>
 800d4dc:	f06f 0001 	mvn.w	r0, #1
 800d4e0:	e7f8      	b.n	800d4d4 <__ascii_mbtowc+0x16>

0800d4e2 <_realloc_r>:
 800d4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e6:	4680      	mov	r8, r0
 800d4e8:	4615      	mov	r5, r2
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	b921      	cbnz	r1, 800d4f8 <_realloc_r+0x16>
 800d4ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f2:	4611      	mov	r1, r2
 800d4f4:	f7fd beb2 	b.w	800b25c <_malloc_r>
 800d4f8:	b92a      	cbnz	r2, 800d506 <_realloc_r+0x24>
 800d4fa:	f7fd fe3b 	bl	800b174 <_free_r>
 800d4fe:	2400      	movs	r4, #0
 800d500:	4620      	mov	r0, r4
 800d502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d506:	f000 f840 	bl	800d58a <_malloc_usable_size_r>
 800d50a:	4285      	cmp	r5, r0
 800d50c:	4606      	mov	r6, r0
 800d50e:	d802      	bhi.n	800d516 <_realloc_r+0x34>
 800d510:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d514:	d8f4      	bhi.n	800d500 <_realloc_r+0x1e>
 800d516:	4629      	mov	r1, r5
 800d518:	4640      	mov	r0, r8
 800d51a:	f7fd fe9f 	bl	800b25c <_malloc_r>
 800d51e:	4607      	mov	r7, r0
 800d520:	2800      	cmp	r0, #0
 800d522:	d0ec      	beq.n	800d4fe <_realloc_r+0x1c>
 800d524:	42b5      	cmp	r5, r6
 800d526:	462a      	mov	r2, r5
 800d528:	4621      	mov	r1, r4
 800d52a:	bf28      	it	cs
 800d52c:	4632      	movcs	r2, r6
 800d52e:	f7ff fc43 	bl	800cdb8 <memcpy>
 800d532:	4621      	mov	r1, r4
 800d534:	4640      	mov	r0, r8
 800d536:	f7fd fe1d 	bl	800b174 <_free_r>
 800d53a:	463c      	mov	r4, r7
 800d53c:	e7e0      	b.n	800d500 <_realloc_r+0x1e>

0800d53e <__ascii_wctomb>:
 800d53e:	4603      	mov	r3, r0
 800d540:	4608      	mov	r0, r1
 800d542:	b141      	cbz	r1, 800d556 <__ascii_wctomb+0x18>
 800d544:	2aff      	cmp	r2, #255	@ 0xff
 800d546:	d904      	bls.n	800d552 <__ascii_wctomb+0x14>
 800d548:	228a      	movs	r2, #138	@ 0x8a
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	f04f 30ff 	mov.w	r0, #4294967295
 800d550:	4770      	bx	lr
 800d552:	700a      	strb	r2, [r1, #0]
 800d554:	2001      	movs	r0, #1
 800d556:	4770      	bx	lr

0800d558 <fiprintf>:
 800d558:	b40e      	push	{r1, r2, r3}
 800d55a:	b503      	push	{r0, r1, lr}
 800d55c:	4601      	mov	r1, r0
 800d55e:	ab03      	add	r3, sp, #12
 800d560:	4805      	ldr	r0, [pc, #20]	@ (800d578 <fiprintf+0x20>)
 800d562:	f853 2b04 	ldr.w	r2, [r3], #4
 800d566:	6800      	ldr	r0, [r0, #0]
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	f000 f83f 	bl	800d5ec <_vfiprintf_r>
 800d56e:	b002      	add	sp, #8
 800d570:	f85d eb04 	ldr.w	lr, [sp], #4
 800d574:	b003      	add	sp, #12
 800d576:	4770      	bx	lr
 800d578:	24000020 	.word	0x24000020

0800d57c <abort>:
 800d57c:	b508      	push	{r3, lr}
 800d57e:	2006      	movs	r0, #6
 800d580:	f000 fa08 	bl	800d994 <raise>
 800d584:	2001      	movs	r0, #1
 800d586:	f7f5 fa5d 	bl	8002a44 <_exit>

0800d58a <_malloc_usable_size_r>:
 800d58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d58e:	1f18      	subs	r0, r3, #4
 800d590:	2b00      	cmp	r3, #0
 800d592:	bfbc      	itt	lt
 800d594:	580b      	ldrlt	r3, [r1, r0]
 800d596:	18c0      	addlt	r0, r0, r3
 800d598:	4770      	bx	lr

0800d59a <__sfputc_r>:
 800d59a:	6893      	ldr	r3, [r2, #8]
 800d59c:	3b01      	subs	r3, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	b410      	push	{r4}
 800d5a2:	6093      	str	r3, [r2, #8]
 800d5a4:	da08      	bge.n	800d5b8 <__sfputc_r+0x1e>
 800d5a6:	6994      	ldr	r4, [r2, #24]
 800d5a8:	42a3      	cmp	r3, r4
 800d5aa:	db01      	blt.n	800d5b0 <__sfputc_r+0x16>
 800d5ac:	290a      	cmp	r1, #10
 800d5ae:	d103      	bne.n	800d5b8 <__sfputc_r+0x1e>
 800d5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5b4:	f000 b932 	b.w	800d81c <__swbuf_r>
 800d5b8:	6813      	ldr	r3, [r2, #0]
 800d5ba:	1c58      	adds	r0, r3, #1
 800d5bc:	6010      	str	r0, [r2, #0]
 800d5be:	7019      	strb	r1, [r3, #0]
 800d5c0:	4608      	mov	r0, r1
 800d5c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <__sfputs_r>:
 800d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460f      	mov	r7, r1
 800d5ce:	4614      	mov	r4, r2
 800d5d0:	18d5      	adds	r5, r2, r3
 800d5d2:	42ac      	cmp	r4, r5
 800d5d4:	d101      	bne.n	800d5da <__sfputs_r+0x12>
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	e007      	b.n	800d5ea <__sfputs_r+0x22>
 800d5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5de:	463a      	mov	r2, r7
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff ffda 	bl	800d59a <__sfputc_r>
 800d5e6:	1c43      	adds	r3, r0, #1
 800d5e8:	d1f3      	bne.n	800d5d2 <__sfputs_r+0xa>
 800d5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5ec <_vfiprintf_r>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	460d      	mov	r5, r1
 800d5f2:	b09d      	sub	sp, #116	@ 0x74
 800d5f4:	4614      	mov	r4, r2
 800d5f6:	4698      	mov	r8, r3
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	b118      	cbz	r0, 800d604 <_vfiprintf_r+0x18>
 800d5fc:	6a03      	ldr	r3, [r0, #32]
 800d5fe:	b90b      	cbnz	r3, 800d604 <_vfiprintf_r+0x18>
 800d600:	f7fc feba 	bl	800a378 <__sinit>
 800d604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d606:	07d9      	lsls	r1, r3, #31
 800d608:	d405      	bmi.n	800d616 <_vfiprintf_r+0x2a>
 800d60a:	89ab      	ldrh	r3, [r5, #12]
 800d60c:	059a      	lsls	r2, r3, #22
 800d60e:	d402      	bmi.n	800d616 <_vfiprintf_r+0x2a>
 800d610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d612:	f7fc ffc8 	bl	800a5a6 <__retarget_lock_acquire_recursive>
 800d616:	89ab      	ldrh	r3, [r5, #12]
 800d618:	071b      	lsls	r3, r3, #28
 800d61a:	d501      	bpl.n	800d620 <_vfiprintf_r+0x34>
 800d61c:	692b      	ldr	r3, [r5, #16]
 800d61e:	b99b      	cbnz	r3, 800d648 <_vfiprintf_r+0x5c>
 800d620:	4629      	mov	r1, r5
 800d622:	4630      	mov	r0, r6
 800d624:	f000 f938 	bl	800d898 <__swsetup_r>
 800d628:	b170      	cbz	r0, 800d648 <_vfiprintf_r+0x5c>
 800d62a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d62c:	07dc      	lsls	r4, r3, #31
 800d62e:	d504      	bpl.n	800d63a <_vfiprintf_r+0x4e>
 800d630:	f04f 30ff 	mov.w	r0, #4294967295
 800d634:	b01d      	add	sp, #116	@ 0x74
 800d636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63a:	89ab      	ldrh	r3, [r5, #12]
 800d63c:	0598      	lsls	r0, r3, #22
 800d63e:	d4f7      	bmi.n	800d630 <_vfiprintf_r+0x44>
 800d640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d642:	f7fc ffb1 	bl	800a5a8 <__retarget_lock_release_recursive>
 800d646:	e7f3      	b.n	800d630 <_vfiprintf_r+0x44>
 800d648:	2300      	movs	r3, #0
 800d64a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d64c:	2320      	movs	r3, #32
 800d64e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d652:	f8cd 800c 	str.w	r8, [sp, #12]
 800d656:	2330      	movs	r3, #48	@ 0x30
 800d658:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d808 <_vfiprintf_r+0x21c>
 800d65c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d660:	f04f 0901 	mov.w	r9, #1
 800d664:	4623      	mov	r3, r4
 800d666:	469a      	mov	sl, r3
 800d668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d66c:	b10a      	cbz	r2, 800d672 <_vfiprintf_r+0x86>
 800d66e:	2a25      	cmp	r2, #37	@ 0x25
 800d670:	d1f9      	bne.n	800d666 <_vfiprintf_r+0x7a>
 800d672:	ebba 0b04 	subs.w	fp, sl, r4
 800d676:	d00b      	beq.n	800d690 <_vfiprintf_r+0xa4>
 800d678:	465b      	mov	r3, fp
 800d67a:	4622      	mov	r2, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	4630      	mov	r0, r6
 800d680:	f7ff ffa2 	bl	800d5c8 <__sfputs_r>
 800d684:	3001      	adds	r0, #1
 800d686:	f000 80a7 	beq.w	800d7d8 <_vfiprintf_r+0x1ec>
 800d68a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d68c:	445a      	add	r2, fp
 800d68e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d690:	f89a 3000 	ldrb.w	r3, [sl]
 800d694:	2b00      	cmp	r3, #0
 800d696:	f000 809f 	beq.w	800d7d8 <_vfiprintf_r+0x1ec>
 800d69a:	2300      	movs	r3, #0
 800d69c:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6a4:	f10a 0a01 	add.w	sl, sl, #1
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	9307      	str	r3, [sp, #28]
 800d6ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6b2:	4654      	mov	r4, sl
 800d6b4:	2205      	movs	r2, #5
 800d6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ba:	4853      	ldr	r0, [pc, #332]	@ (800d808 <_vfiprintf_r+0x21c>)
 800d6bc:	f7f2 fe10 	bl	80002e0 <memchr>
 800d6c0:	9a04      	ldr	r2, [sp, #16]
 800d6c2:	b9d8      	cbnz	r0, 800d6fc <_vfiprintf_r+0x110>
 800d6c4:	06d1      	lsls	r1, r2, #27
 800d6c6:	bf44      	itt	mi
 800d6c8:	2320      	movmi	r3, #32
 800d6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6ce:	0713      	lsls	r3, r2, #28
 800d6d0:	bf44      	itt	mi
 800d6d2:	232b      	movmi	r3, #43	@ 0x2b
 800d6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6de:	d015      	beq.n	800d70c <_vfiprintf_r+0x120>
 800d6e0:	9a07      	ldr	r2, [sp, #28]
 800d6e2:	4654      	mov	r4, sl
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	f04f 0c0a 	mov.w	ip, #10
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6f0:	3b30      	subs	r3, #48	@ 0x30
 800d6f2:	2b09      	cmp	r3, #9
 800d6f4:	d94b      	bls.n	800d78e <_vfiprintf_r+0x1a2>
 800d6f6:	b1b0      	cbz	r0, 800d726 <_vfiprintf_r+0x13a>
 800d6f8:	9207      	str	r2, [sp, #28]
 800d6fa:	e014      	b.n	800d726 <_vfiprintf_r+0x13a>
 800d6fc:	eba0 0308 	sub.w	r3, r0, r8
 800d700:	fa09 f303 	lsl.w	r3, r9, r3
 800d704:	4313      	orrs	r3, r2
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	46a2      	mov	sl, r4
 800d70a:	e7d2      	b.n	800d6b2 <_vfiprintf_r+0xc6>
 800d70c:	9b03      	ldr	r3, [sp, #12]
 800d70e:	1d19      	adds	r1, r3, #4
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	9103      	str	r1, [sp, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	bfbb      	ittet	lt
 800d718:	425b      	neglt	r3, r3
 800d71a:	f042 0202 	orrlt.w	r2, r2, #2
 800d71e:	9307      	strge	r3, [sp, #28]
 800d720:	9307      	strlt	r3, [sp, #28]
 800d722:	bfb8      	it	lt
 800d724:	9204      	strlt	r2, [sp, #16]
 800d726:	7823      	ldrb	r3, [r4, #0]
 800d728:	2b2e      	cmp	r3, #46	@ 0x2e
 800d72a:	d10a      	bne.n	800d742 <_vfiprintf_r+0x156>
 800d72c:	7863      	ldrb	r3, [r4, #1]
 800d72e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d730:	d132      	bne.n	800d798 <_vfiprintf_r+0x1ac>
 800d732:	9b03      	ldr	r3, [sp, #12]
 800d734:	1d1a      	adds	r2, r3, #4
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	9203      	str	r2, [sp, #12]
 800d73a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d73e:	3402      	adds	r4, #2
 800d740:	9305      	str	r3, [sp, #20]
 800d742:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d818 <_vfiprintf_r+0x22c>
 800d746:	7821      	ldrb	r1, [r4, #0]
 800d748:	2203      	movs	r2, #3
 800d74a:	4650      	mov	r0, sl
 800d74c:	f7f2 fdc8 	bl	80002e0 <memchr>
 800d750:	b138      	cbz	r0, 800d762 <_vfiprintf_r+0x176>
 800d752:	9b04      	ldr	r3, [sp, #16]
 800d754:	eba0 000a 	sub.w	r0, r0, sl
 800d758:	2240      	movs	r2, #64	@ 0x40
 800d75a:	4082      	lsls	r2, r0
 800d75c:	4313      	orrs	r3, r2
 800d75e:	3401      	adds	r4, #1
 800d760:	9304      	str	r3, [sp, #16]
 800d762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d766:	4829      	ldr	r0, [pc, #164]	@ (800d80c <_vfiprintf_r+0x220>)
 800d768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d76c:	2206      	movs	r2, #6
 800d76e:	f7f2 fdb7 	bl	80002e0 <memchr>
 800d772:	2800      	cmp	r0, #0
 800d774:	d03f      	beq.n	800d7f6 <_vfiprintf_r+0x20a>
 800d776:	4b26      	ldr	r3, [pc, #152]	@ (800d810 <_vfiprintf_r+0x224>)
 800d778:	bb1b      	cbnz	r3, 800d7c2 <_vfiprintf_r+0x1d6>
 800d77a:	9b03      	ldr	r3, [sp, #12]
 800d77c:	3307      	adds	r3, #7
 800d77e:	f023 0307 	bic.w	r3, r3, #7
 800d782:	3308      	adds	r3, #8
 800d784:	9303      	str	r3, [sp, #12]
 800d786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d788:	443b      	add	r3, r7
 800d78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d78c:	e76a      	b.n	800d664 <_vfiprintf_r+0x78>
 800d78e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d792:	460c      	mov	r4, r1
 800d794:	2001      	movs	r0, #1
 800d796:	e7a8      	b.n	800d6ea <_vfiprintf_r+0xfe>
 800d798:	2300      	movs	r3, #0
 800d79a:	3401      	adds	r4, #1
 800d79c:	9305      	str	r3, [sp, #20]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	f04f 0c0a 	mov.w	ip, #10
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7aa:	3a30      	subs	r2, #48	@ 0x30
 800d7ac:	2a09      	cmp	r2, #9
 800d7ae:	d903      	bls.n	800d7b8 <_vfiprintf_r+0x1cc>
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d0c6      	beq.n	800d742 <_vfiprintf_r+0x156>
 800d7b4:	9105      	str	r1, [sp, #20]
 800d7b6:	e7c4      	b.n	800d742 <_vfiprintf_r+0x156>
 800d7b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7bc:	4604      	mov	r4, r0
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e7f0      	b.n	800d7a4 <_vfiprintf_r+0x1b8>
 800d7c2:	ab03      	add	r3, sp, #12
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	462a      	mov	r2, r5
 800d7c8:	4b12      	ldr	r3, [pc, #72]	@ (800d814 <_vfiprintf_r+0x228>)
 800d7ca:	a904      	add	r1, sp, #16
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f7fb ff93 	bl	80096f8 <_printf_float>
 800d7d2:	4607      	mov	r7, r0
 800d7d4:	1c78      	adds	r0, r7, #1
 800d7d6:	d1d6      	bne.n	800d786 <_vfiprintf_r+0x19a>
 800d7d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7da:	07d9      	lsls	r1, r3, #31
 800d7dc:	d405      	bmi.n	800d7ea <_vfiprintf_r+0x1fe>
 800d7de:	89ab      	ldrh	r3, [r5, #12]
 800d7e0:	059a      	lsls	r2, r3, #22
 800d7e2:	d402      	bmi.n	800d7ea <_vfiprintf_r+0x1fe>
 800d7e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7e6:	f7fc fedf 	bl	800a5a8 <__retarget_lock_release_recursive>
 800d7ea:	89ab      	ldrh	r3, [r5, #12]
 800d7ec:	065b      	lsls	r3, r3, #25
 800d7ee:	f53f af1f 	bmi.w	800d630 <_vfiprintf_r+0x44>
 800d7f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7f4:	e71e      	b.n	800d634 <_vfiprintf_r+0x48>
 800d7f6:	ab03      	add	r3, sp, #12
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	462a      	mov	r2, r5
 800d7fc:	4b05      	ldr	r3, [pc, #20]	@ (800d814 <_vfiprintf_r+0x228>)
 800d7fe:	a904      	add	r1, sp, #16
 800d800:	4630      	mov	r0, r6
 800d802:	f7fc fa01 	bl	8009c08 <_printf_i>
 800d806:	e7e4      	b.n	800d7d2 <_vfiprintf_r+0x1e6>
 800d808:	0800e9b1 	.word	0x0800e9b1
 800d80c:	0800e9bb 	.word	0x0800e9bb
 800d810:	080096f9 	.word	0x080096f9
 800d814:	0800d5c9 	.word	0x0800d5c9
 800d818:	0800e9b7 	.word	0x0800e9b7

0800d81c <__swbuf_r>:
 800d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81e:	460e      	mov	r6, r1
 800d820:	4614      	mov	r4, r2
 800d822:	4605      	mov	r5, r0
 800d824:	b118      	cbz	r0, 800d82e <__swbuf_r+0x12>
 800d826:	6a03      	ldr	r3, [r0, #32]
 800d828:	b90b      	cbnz	r3, 800d82e <__swbuf_r+0x12>
 800d82a:	f7fc fda5 	bl	800a378 <__sinit>
 800d82e:	69a3      	ldr	r3, [r4, #24]
 800d830:	60a3      	str	r3, [r4, #8]
 800d832:	89a3      	ldrh	r3, [r4, #12]
 800d834:	071a      	lsls	r2, r3, #28
 800d836:	d501      	bpl.n	800d83c <__swbuf_r+0x20>
 800d838:	6923      	ldr	r3, [r4, #16]
 800d83a:	b943      	cbnz	r3, 800d84e <__swbuf_r+0x32>
 800d83c:	4621      	mov	r1, r4
 800d83e:	4628      	mov	r0, r5
 800d840:	f000 f82a 	bl	800d898 <__swsetup_r>
 800d844:	b118      	cbz	r0, 800d84e <__swbuf_r+0x32>
 800d846:	f04f 37ff 	mov.w	r7, #4294967295
 800d84a:	4638      	mov	r0, r7
 800d84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	6922      	ldr	r2, [r4, #16]
 800d852:	1a98      	subs	r0, r3, r2
 800d854:	6963      	ldr	r3, [r4, #20]
 800d856:	b2f6      	uxtb	r6, r6
 800d858:	4283      	cmp	r3, r0
 800d85a:	4637      	mov	r7, r6
 800d85c:	dc05      	bgt.n	800d86a <__swbuf_r+0x4e>
 800d85e:	4621      	mov	r1, r4
 800d860:	4628      	mov	r0, r5
 800d862:	f7ff fa45 	bl	800ccf0 <_fflush_r>
 800d866:	2800      	cmp	r0, #0
 800d868:	d1ed      	bne.n	800d846 <__swbuf_r+0x2a>
 800d86a:	68a3      	ldr	r3, [r4, #8]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	60a3      	str	r3, [r4, #8]
 800d870:	6823      	ldr	r3, [r4, #0]
 800d872:	1c5a      	adds	r2, r3, #1
 800d874:	6022      	str	r2, [r4, #0]
 800d876:	701e      	strb	r6, [r3, #0]
 800d878:	6962      	ldr	r2, [r4, #20]
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d004      	beq.n	800d88a <__swbuf_r+0x6e>
 800d880:	89a3      	ldrh	r3, [r4, #12]
 800d882:	07db      	lsls	r3, r3, #31
 800d884:	d5e1      	bpl.n	800d84a <__swbuf_r+0x2e>
 800d886:	2e0a      	cmp	r6, #10
 800d888:	d1df      	bne.n	800d84a <__swbuf_r+0x2e>
 800d88a:	4621      	mov	r1, r4
 800d88c:	4628      	mov	r0, r5
 800d88e:	f7ff fa2f 	bl	800ccf0 <_fflush_r>
 800d892:	2800      	cmp	r0, #0
 800d894:	d0d9      	beq.n	800d84a <__swbuf_r+0x2e>
 800d896:	e7d6      	b.n	800d846 <__swbuf_r+0x2a>

0800d898 <__swsetup_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4b29      	ldr	r3, [pc, #164]	@ (800d940 <__swsetup_r+0xa8>)
 800d89c:	4605      	mov	r5, r0
 800d89e:	6818      	ldr	r0, [r3, #0]
 800d8a0:	460c      	mov	r4, r1
 800d8a2:	b118      	cbz	r0, 800d8ac <__swsetup_r+0x14>
 800d8a4:	6a03      	ldr	r3, [r0, #32]
 800d8a6:	b90b      	cbnz	r3, 800d8ac <__swsetup_r+0x14>
 800d8a8:	f7fc fd66 	bl	800a378 <__sinit>
 800d8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b0:	0719      	lsls	r1, r3, #28
 800d8b2:	d422      	bmi.n	800d8fa <__swsetup_r+0x62>
 800d8b4:	06da      	lsls	r2, r3, #27
 800d8b6:	d407      	bmi.n	800d8c8 <__swsetup_r+0x30>
 800d8b8:	2209      	movs	r2, #9
 800d8ba:	602a      	str	r2, [r5, #0]
 800d8bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c6:	e033      	b.n	800d930 <__swsetup_r+0x98>
 800d8c8:	0758      	lsls	r0, r3, #29
 800d8ca:	d512      	bpl.n	800d8f2 <__swsetup_r+0x5a>
 800d8cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8ce:	b141      	cbz	r1, 800d8e2 <__swsetup_r+0x4a>
 800d8d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8d4:	4299      	cmp	r1, r3
 800d8d6:	d002      	beq.n	800d8de <__swsetup_r+0x46>
 800d8d8:	4628      	mov	r0, r5
 800d8da:	f7fd fc4b 	bl	800b174 <_free_r>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d8e8:	81a3      	strh	r3, [r4, #12]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	6063      	str	r3, [r4, #4]
 800d8ee:	6923      	ldr	r3, [r4, #16]
 800d8f0:	6023      	str	r3, [r4, #0]
 800d8f2:	89a3      	ldrh	r3, [r4, #12]
 800d8f4:	f043 0308 	orr.w	r3, r3, #8
 800d8f8:	81a3      	strh	r3, [r4, #12]
 800d8fa:	6923      	ldr	r3, [r4, #16]
 800d8fc:	b94b      	cbnz	r3, 800d912 <__swsetup_r+0x7a>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d908:	d003      	beq.n	800d912 <__swsetup_r+0x7a>
 800d90a:	4621      	mov	r1, r4
 800d90c:	4628      	mov	r0, r5
 800d90e:	f000 f883 	bl	800da18 <__smakebuf_r>
 800d912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d916:	f013 0201 	ands.w	r2, r3, #1
 800d91a:	d00a      	beq.n	800d932 <__swsetup_r+0x9a>
 800d91c:	2200      	movs	r2, #0
 800d91e:	60a2      	str	r2, [r4, #8]
 800d920:	6962      	ldr	r2, [r4, #20]
 800d922:	4252      	negs	r2, r2
 800d924:	61a2      	str	r2, [r4, #24]
 800d926:	6922      	ldr	r2, [r4, #16]
 800d928:	b942      	cbnz	r2, 800d93c <__swsetup_r+0xa4>
 800d92a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d92e:	d1c5      	bne.n	800d8bc <__swsetup_r+0x24>
 800d930:	bd38      	pop	{r3, r4, r5, pc}
 800d932:	0799      	lsls	r1, r3, #30
 800d934:	bf58      	it	pl
 800d936:	6962      	ldrpl	r2, [r4, #20]
 800d938:	60a2      	str	r2, [r4, #8]
 800d93a:	e7f4      	b.n	800d926 <__swsetup_r+0x8e>
 800d93c:	2000      	movs	r0, #0
 800d93e:	e7f7      	b.n	800d930 <__swsetup_r+0x98>
 800d940:	24000020 	.word	0x24000020

0800d944 <_raise_r>:
 800d944:	291f      	cmp	r1, #31
 800d946:	b538      	push	{r3, r4, r5, lr}
 800d948:	4605      	mov	r5, r0
 800d94a:	460c      	mov	r4, r1
 800d94c:	d904      	bls.n	800d958 <_raise_r+0x14>
 800d94e:	2316      	movs	r3, #22
 800d950:	6003      	str	r3, [r0, #0]
 800d952:	f04f 30ff 	mov.w	r0, #4294967295
 800d956:	bd38      	pop	{r3, r4, r5, pc}
 800d958:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d95a:	b112      	cbz	r2, 800d962 <_raise_r+0x1e>
 800d95c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d960:	b94b      	cbnz	r3, 800d976 <_raise_r+0x32>
 800d962:	4628      	mov	r0, r5
 800d964:	f000 f830 	bl	800d9c8 <_getpid_r>
 800d968:	4622      	mov	r2, r4
 800d96a:	4601      	mov	r1, r0
 800d96c:	4628      	mov	r0, r5
 800d96e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d972:	f000 b817 	b.w	800d9a4 <_kill_r>
 800d976:	2b01      	cmp	r3, #1
 800d978:	d00a      	beq.n	800d990 <_raise_r+0x4c>
 800d97a:	1c59      	adds	r1, r3, #1
 800d97c:	d103      	bne.n	800d986 <_raise_r+0x42>
 800d97e:	2316      	movs	r3, #22
 800d980:	6003      	str	r3, [r0, #0]
 800d982:	2001      	movs	r0, #1
 800d984:	e7e7      	b.n	800d956 <_raise_r+0x12>
 800d986:	2100      	movs	r1, #0
 800d988:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d98c:	4620      	mov	r0, r4
 800d98e:	4798      	blx	r3
 800d990:	2000      	movs	r0, #0
 800d992:	e7e0      	b.n	800d956 <_raise_r+0x12>

0800d994 <raise>:
 800d994:	4b02      	ldr	r3, [pc, #8]	@ (800d9a0 <raise+0xc>)
 800d996:	4601      	mov	r1, r0
 800d998:	6818      	ldr	r0, [r3, #0]
 800d99a:	f7ff bfd3 	b.w	800d944 <_raise_r>
 800d99e:	bf00      	nop
 800d9a0:	24000020 	.word	0x24000020

0800d9a4 <_kill_r>:
 800d9a4:	b538      	push	{r3, r4, r5, lr}
 800d9a6:	4d07      	ldr	r5, [pc, #28]	@ (800d9c4 <_kill_r+0x20>)
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	4608      	mov	r0, r1
 800d9ae:	4611      	mov	r1, r2
 800d9b0:	602b      	str	r3, [r5, #0]
 800d9b2:	f7f5 f837 	bl	8002a24 <_kill>
 800d9b6:	1c43      	adds	r3, r0, #1
 800d9b8:	d102      	bne.n	800d9c0 <_kill_r+0x1c>
 800d9ba:	682b      	ldr	r3, [r5, #0]
 800d9bc:	b103      	cbz	r3, 800d9c0 <_kill_r+0x1c>
 800d9be:	6023      	str	r3, [r4, #0]
 800d9c0:	bd38      	pop	{r3, r4, r5, pc}
 800d9c2:	bf00      	nop
 800d9c4:	240006a8 	.word	0x240006a8

0800d9c8 <_getpid_r>:
 800d9c8:	f7f5 b824 	b.w	8002a14 <_getpid>

0800d9cc <__swhatbuf_r>:
 800d9cc:	b570      	push	{r4, r5, r6, lr}
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d4:	2900      	cmp	r1, #0
 800d9d6:	b096      	sub	sp, #88	@ 0x58
 800d9d8:	4615      	mov	r5, r2
 800d9da:	461e      	mov	r6, r3
 800d9dc:	da0d      	bge.n	800d9fa <__swhatbuf_r+0x2e>
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9e4:	f04f 0100 	mov.w	r1, #0
 800d9e8:	bf14      	ite	ne
 800d9ea:	2340      	movne	r3, #64	@ 0x40
 800d9ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	6031      	str	r1, [r6, #0]
 800d9f4:	602b      	str	r3, [r5, #0]
 800d9f6:	b016      	add	sp, #88	@ 0x58
 800d9f8:	bd70      	pop	{r4, r5, r6, pc}
 800d9fa:	466a      	mov	r2, sp
 800d9fc:	f000 f848 	bl	800da90 <_fstat_r>
 800da00:	2800      	cmp	r0, #0
 800da02:	dbec      	blt.n	800d9de <__swhatbuf_r+0x12>
 800da04:	9901      	ldr	r1, [sp, #4]
 800da06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da0e:	4259      	negs	r1, r3
 800da10:	4159      	adcs	r1, r3
 800da12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da16:	e7eb      	b.n	800d9f0 <__swhatbuf_r+0x24>

0800da18 <__smakebuf_r>:
 800da18:	898b      	ldrh	r3, [r1, #12]
 800da1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da1c:	079d      	lsls	r5, r3, #30
 800da1e:	4606      	mov	r6, r0
 800da20:	460c      	mov	r4, r1
 800da22:	d507      	bpl.n	800da34 <__smakebuf_r+0x1c>
 800da24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	6123      	str	r3, [r4, #16]
 800da2c:	2301      	movs	r3, #1
 800da2e:	6163      	str	r3, [r4, #20]
 800da30:	b003      	add	sp, #12
 800da32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da34:	ab01      	add	r3, sp, #4
 800da36:	466a      	mov	r2, sp
 800da38:	f7ff ffc8 	bl	800d9cc <__swhatbuf_r>
 800da3c:	9f00      	ldr	r7, [sp, #0]
 800da3e:	4605      	mov	r5, r0
 800da40:	4639      	mov	r1, r7
 800da42:	4630      	mov	r0, r6
 800da44:	f7fd fc0a 	bl	800b25c <_malloc_r>
 800da48:	b948      	cbnz	r0, 800da5e <__smakebuf_r+0x46>
 800da4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da4e:	059a      	lsls	r2, r3, #22
 800da50:	d4ee      	bmi.n	800da30 <__smakebuf_r+0x18>
 800da52:	f023 0303 	bic.w	r3, r3, #3
 800da56:	f043 0302 	orr.w	r3, r3, #2
 800da5a:	81a3      	strh	r3, [r4, #12]
 800da5c:	e7e2      	b.n	800da24 <__smakebuf_r+0xc>
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	6020      	str	r0, [r4, #0]
 800da62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da66:	81a3      	strh	r3, [r4, #12]
 800da68:	9b01      	ldr	r3, [sp, #4]
 800da6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da6e:	b15b      	cbz	r3, 800da88 <__smakebuf_r+0x70>
 800da70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da74:	4630      	mov	r0, r6
 800da76:	f000 f81d 	bl	800dab4 <_isatty_r>
 800da7a:	b128      	cbz	r0, 800da88 <__smakebuf_r+0x70>
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	f023 0303 	bic.w	r3, r3, #3
 800da82:	f043 0301 	orr.w	r3, r3, #1
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	431d      	orrs	r5, r3
 800da8c:	81a5      	strh	r5, [r4, #12]
 800da8e:	e7cf      	b.n	800da30 <__smakebuf_r+0x18>

0800da90 <_fstat_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d07      	ldr	r5, [pc, #28]	@ (800dab0 <_fstat_r+0x20>)
 800da94:	2300      	movs	r3, #0
 800da96:	4604      	mov	r4, r0
 800da98:	4608      	mov	r0, r1
 800da9a:	4611      	mov	r1, r2
 800da9c:	602b      	str	r3, [r5, #0]
 800da9e:	f7f5 f805 	bl	8002aac <_fstat>
 800daa2:	1c43      	adds	r3, r0, #1
 800daa4:	d102      	bne.n	800daac <_fstat_r+0x1c>
 800daa6:	682b      	ldr	r3, [r5, #0]
 800daa8:	b103      	cbz	r3, 800daac <_fstat_r+0x1c>
 800daaa:	6023      	str	r3, [r4, #0]
 800daac:	bd38      	pop	{r3, r4, r5, pc}
 800daae:	bf00      	nop
 800dab0:	240006a8 	.word	0x240006a8

0800dab4 <_isatty_r>:
 800dab4:	b538      	push	{r3, r4, r5, lr}
 800dab6:	4d06      	ldr	r5, [pc, #24]	@ (800dad0 <_isatty_r+0x1c>)
 800dab8:	2300      	movs	r3, #0
 800daba:	4604      	mov	r4, r0
 800dabc:	4608      	mov	r0, r1
 800dabe:	602b      	str	r3, [r5, #0]
 800dac0:	f7f5 f804 	bl	8002acc <_isatty>
 800dac4:	1c43      	adds	r3, r0, #1
 800dac6:	d102      	bne.n	800dace <_isatty_r+0x1a>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	b103      	cbz	r3, 800dace <_isatty_r+0x1a>
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	bd38      	pop	{r3, r4, r5, pc}
 800dad0:	240006a8 	.word	0x240006a8

0800dad4 <asinf>:
 800dad4:	b508      	push	{r3, lr}
 800dad6:	ed2d 8b02 	vpush	{d8}
 800dada:	eeb0 8a40 	vmov.f32	s16, s0
 800dade:	f000 fab3 	bl	800e048 <__ieee754_asinf>
 800dae2:	eeb4 8a48 	vcmp.f32	s16, s16
 800dae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daea:	eef0 8a40 	vmov.f32	s17, s0
 800daee:	d615      	bvs.n	800db1c <asinf+0x48>
 800daf0:	eeb0 0a48 	vmov.f32	s0, s16
 800daf4:	f000 f81c 	bl	800db30 <fabsf>
 800daf8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800dafc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800db00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db04:	dd0a      	ble.n	800db1c <asinf+0x48>
 800db06:	f7fc fd23 	bl	800a550 <__errno>
 800db0a:	ecbd 8b02 	vpop	{d8}
 800db0e:	2321      	movs	r3, #33	@ 0x21
 800db10:	6003      	str	r3, [r0, #0]
 800db12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db16:	4804      	ldr	r0, [pc, #16]	@ (800db28 <asinf+0x54>)
 800db18:	f7fc bd48 	b.w	800a5ac <nanf>
 800db1c:	eeb0 0a68 	vmov.f32	s0, s17
 800db20:	ecbd 8b02 	vpop	{d8}
 800db24:	bd08      	pop	{r3, pc}
 800db26:	bf00      	nop
 800db28:	0800ea05 	.word	0x0800ea05

0800db2c <atan2f>:
 800db2c:	f000 bb72 	b.w	800e214 <__ieee754_atan2f>

0800db30 <fabsf>:
 800db30:	ee10 3a10 	vmov	r3, s0
 800db34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db38:	ee00 3a10 	vmov	s0, r3
 800db3c:	4770      	bx	lr

0800db3e <checkint>:
 800db3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db42:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800db46:	429a      	cmp	r2, r3
 800db48:	b570      	push	{r4, r5, r6, lr}
 800db4a:	dd2a      	ble.n	800dba2 <checkint+0x64>
 800db4c:	f240 4333 	movw	r3, #1075	@ 0x433
 800db50:	429a      	cmp	r2, r3
 800db52:	dc24      	bgt.n	800db9e <checkint+0x60>
 800db54:	1a9b      	subs	r3, r3, r2
 800db56:	f1a3 0620 	sub.w	r6, r3, #32
 800db5a:	f04f 32ff 	mov.w	r2, #4294967295
 800db5e:	fa02 f403 	lsl.w	r4, r2, r3
 800db62:	fa02 f606 	lsl.w	r6, r2, r6
 800db66:	f1c3 0520 	rsb	r5, r3, #32
 800db6a:	fa22 f505 	lsr.w	r5, r2, r5
 800db6e:	4334      	orrs	r4, r6
 800db70:	432c      	orrs	r4, r5
 800db72:	409a      	lsls	r2, r3
 800db74:	ea20 0202 	bic.w	r2, r0, r2
 800db78:	ea21 0404 	bic.w	r4, r1, r4
 800db7c:	4322      	orrs	r2, r4
 800db7e:	f1a3 0420 	sub.w	r4, r3, #32
 800db82:	f1c3 0220 	rsb	r2, r3, #32
 800db86:	d10c      	bne.n	800dba2 <checkint+0x64>
 800db88:	40d8      	lsrs	r0, r3
 800db8a:	fa01 f302 	lsl.w	r3, r1, r2
 800db8e:	4318      	orrs	r0, r3
 800db90:	40e1      	lsrs	r1, r4
 800db92:	4308      	orrs	r0, r1
 800db94:	f000 0001 	and.w	r0, r0, #1
 800db98:	f1d0 0002 	rsbs	r0, r0, #2
 800db9c:	bd70      	pop	{r4, r5, r6, pc}
 800db9e:	2002      	movs	r0, #2
 800dba0:	e7fc      	b.n	800db9c <checkint+0x5e>
 800dba2:	2000      	movs	r0, #0
 800dba4:	e7fa      	b.n	800db9c <checkint+0x5e>
	...

0800dba8 <pow>:
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	ee10 4a90 	vmov	r4, s1
 800dbb0:	ed2d 8b0a 	vpush	{d8-d12}
 800dbb4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800dbb8:	ee11 aa90 	vmov	sl, s3
 800dbbc:	f108 32ff 	add.w	r2, r8, #4294967295
 800dbc0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	ee10 5a10 	vmov	r5, s0
 800dbca:	ee11 0a10 	vmov	r0, s2
 800dbce:	b087      	sub	sp, #28
 800dbd0:	46c4      	mov	ip, r8
 800dbd2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800dbd6:	d806      	bhi.n	800dbe6 <pow+0x3e>
 800dbd8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800dbdc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800dbe0:	2b7f      	cmp	r3, #127	@ 0x7f
 800dbe2:	f240 8157 	bls.w	800de94 <pow+0x2ec>
 800dbe6:	1802      	adds	r2, r0, r0
 800dbe8:	eb4a 010a 	adc.w	r1, sl, sl
 800dbec:	f06f 0b01 	mvn.w	fp, #1
 800dbf0:	1e57      	subs	r7, r2, #1
 800dbf2:	f141 33ff 	adc.w	r3, r1, #4294967295
 800dbf6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800dbfa:	45bb      	cmp	fp, r7
 800dbfc:	eb7e 0303 	sbcs.w	r3, lr, r3
 800dc00:	d242      	bcs.n	800dc88 <pow+0xe0>
 800dc02:	ea52 0301 	orrs.w	r3, r2, r1
 800dc06:	f04f 0300 	mov.w	r3, #0
 800dc0a:	d10c      	bne.n	800dc26 <pow+0x7e>
 800dc0c:	196d      	adds	r5, r5, r5
 800dc0e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800dc12:	4164      	adcs	r4, r4
 800dc14:	42ab      	cmp	r3, r5
 800dc16:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dc1a:	41a3      	sbcs	r3, r4
 800dc1c:	f0c0 808f 	bcc.w	800dd3e <pow+0x196>
 800dc20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dc24:	e02b      	b.n	800dc7e <pow+0xd6>
 800dc26:	4ed4      	ldr	r6, [pc, #848]	@ (800df78 <pow+0x3d0>)
 800dc28:	42b4      	cmp	r4, r6
 800dc2a:	bf08      	it	eq
 800dc2c:	429d      	cmpeq	r5, r3
 800dc2e:	d109      	bne.n	800dc44 <pow+0x9c>
 800dc30:	1800      	adds	r0, r0, r0
 800dc32:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800dc36:	eb4a 0a0a 	adc.w	sl, sl, sl
 800dc3a:	4283      	cmp	r3, r0
 800dc3c:	4bcf      	ldr	r3, [pc, #828]	@ (800df7c <pow+0x3d4>)
 800dc3e:	eb73 030a 	sbcs.w	r3, r3, sl
 800dc42:	e7eb      	b.n	800dc1c <pow+0x74>
 800dc44:	196d      	adds	r5, r5, r5
 800dc46:	48ce      	ldr	r0, [pc, #824]	@ (800df80 <pow+0x3d8>)
 800dc48:	4164      	adcs	r4, r4
 800dc4a:	42ab      	cmp	r3, r5
 800dc4c:	eb70 0604 	sbcs.w	r6, r0, r4
 800dc50:	d375      	bcc.n	800dd3e <pow+0x196>
 800dc52:	4281      	cmp	r1, r0
 800dc54:	bf08      	it	eq
 800dc56:	429a      	cmpeq	r2, r3
 800dc58:	d171      	bne.n	800dd3e <pow+0x196>
 800dc5a:	4aca      	ldr	r2, [pc, #808]	@ (800df84 <pow+0x3dc>)
 800dc5c:	4294      	cmp	r4, r2
 800dc5e:	bf08      	it	eq
 800dc60:	429d      	cmpeq	r5, r3
 800dc62:	d0dd      	beq.n	800dc20 <pow+0x78>
 800dc64:	4294      	cmp	r4, r2
 800dc66:	ea6f 0a0a 	mvn.w	sl, sl
 800dc6a:	bf34      	ite	cc
 800dc6c:	2400      	movcc	r4, #0
 800dc6e:	2401      	movcs	r4, #1
 800dc70:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800dc74:	4554      	cmp	r4, sl
 800dc76:	f040 81dc 	bne.w	800e032 <pow+0x48a>
 800dc7a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800dc7e:	b007      	add	sp, #28
 800dc80:	ecbd 8b0a 	vpop	{d8-d12}
 800dc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc88:	196f      	adds	r7, r5, r5
 800dc8a:	eb44 0904 	adc.w	r9, r4, r4
 800dc8e:	1e7a      	subs	r2, r7, #1
 800dc90:	f169 0300 	sbc.w	r3, r9, #0
 800dc94:	4593      	cmp	fp, r2
 800dc96:	eb7e 0303 	sbcs.w	r3, lr, r3
 800dc9a:	d225      	bcs.n	800dce8 <pow+0x140>
 800dc9c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800dca0:	2c00      	cmp	r4, #0
 800dca2:	da13      	bge.n	800dccc <pow+0x124>
 800dca4:	4651      	mov	r1, sl
 800dca6:	f7ff ff4a 	bl	800db3e <checkint>
 800dcaa:	2801      	cmp	r0, #1
 800dcac:	d10e      	bne.n	800dccc <pow+0x124>
 800dcae:	eeb1 0b40 	vneg.f64	d0, d0
 800dcb2:	ea57 0909 	orrs.w	r9, r7, r9
 800dcb6:	d10b      	bne.n	800dcd0 <pow+0x128>
 800dcb8:	f1ba 0f00 	cmp.w	sl, #0
 800dcbc:	dadf      	bge.n	800dc7e <pow+0xd6>
 800dcbe:	b007      	add	sp, #28
 800dcc0:	ecbd 8b0a 	vpop	{d8-d12}
 800dcc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc8:	f000 bc46 	b.w	800e558 <__math_divzero>
 800dccc:	2000      	movs	r0, #0
 800dcce:	e7f0      	b.n	800dcb2 <pow+0x10a>
 800dcd0:	f1ba 0f00 	cmp.w	sl, #0
 800dcd4:	dad3      	bge.n	800dc7e <pow+0xd6>
 800dcd6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800dcda:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dcde:	ed8d 7b00 	vstr	d7, [sp]
 800dce2:	ed9d 0b00 	vldr	d0, [sp]
 800dce6:	e7ca      	b.n	800dc7e <pow+0xd6>
 800dce8:	2c00      	cmp	r4, #0
 800dcea:	da2b      	bge.n	800dd44 <pow+0x19c>
 800dcec:	4651      	mov	r1, sl
 800dcee:	f7ff ff26 	bl	800db3e <checkint>
 800dcf2:	b930      	cbnz	r0, 800dd02 <pow+0x15a>
 800dcf4:	b007      	add	sp, #28
 800dcf6:	ecbd 8b0a 	vpop	{d8-d12}
 800dcfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfe:	f000 bc43 	b.w	800e588 <__math_invalid>
 800dd02:	1e41      	subs	r1, r0, #1
 800dd04:	4248      	negs	r0, r1
 800dd06:	4148      	adcs	r0, r1
 800dd08:	0480      	lsls	r0, r0, #18
 800dd0a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dd0e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800dd12:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800dd16:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800dd1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd1c:	d92d      	bls.n	800dd7a <pow+0x1d2>
 800dd1e:	4b96      	ldr	r3, [pc, #600]	@ (800df78 <pow+0x3d0>)
 800dd20:	2000      	movs	r0, #0
 800dd22:	429c      	cmp	r4, r3
 800dd24:	bf08      	it	eq
 800dd26:	4285      	cmpeq	r5, r0
 800dd28:	f43f af7a 	beq.w	800dc20 <pow+0x78>
 800dd2c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800dd30:	428a      	cmp	r2, r1
 800dd32:	d80c      	bhi.n	800dd4e <pow+0x1a6>
 800dd34:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dd38:	42a8      	cmp	r0, r5
 800dd3a:	41a3      	sbcs	r3, r4
 800dd3c:	d204      	bcs.n	800dd48 <pow+0x1a0>
 800dd3e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800dd42:	e79c      	b.n	800dc7e <pow+0xd6>
 800dd44:	2000      	movs	r0, #0
 800dd46:	e7e4      	b.n	800dd12 <pow+0x16a>
 800dd48:	ee30 0b41 	vsub.f64	d0, d0, d1
 800dd4c:	e797      	b.n	800dc7e <pow+0xd6>
 800dd4e:	2d01      	cmp	r5, #1
 800dd50:	eb74 0303 	sbcs.w	r3, r4, r3
 800dd54:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800dd58:	bf34      	ite	cc
 800dd5a:	2301      	movcc	r3, #1
 800dd5c:	2300      	movcs	r3, #0
 800dd5e:	4296      	cmp	r6, r2
 800dd60:	bf8c      	ite	hi
 800dd62:	2600      	movhi	r6, #0
 800dd64:	2601      	movls	r6, #1
 800dd66:	42b3      	cmp	r3, r6
 800dd68:	f000 809c 	beq.w	800dea4 <pow+0x2fc>
 800dd6c:	b007      	add	sp, #28
 800dd6e:	ecbd 8b0a 	vpop	{d8-d12}
 800dd72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd76:	f000 bbe7 	b.w	800e548 <__math_oflow>
 800dd7a:	f1bc 0f00 	cmp.w	ip, #0
 800dd7e:	d10a      	bne.n	800dd96 <pow+0x1ee>
 800dd80:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800df68 <pow+0x3c0>
 800dd84:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dd88:	ec53 2b17 	vmov	r2, r3, d7
 800dd8c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800dd90:	4615      	mov	r5, r2
 800dd92:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800dd96:	4a7c      	ldr	r2, [pc, #496]	@ (800df88 <pow+0x3e0>)
 800dd98:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800dd9c:	4422      	add	r2, r4
 800dd9e:	1513      	asrs	r3, r2, #20
 800dda0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800dda4:	ee03 3a10 	vmov	s6, r3
 800dda8:	0d12      	lsrs	r2, r2, #20
 800ddaa:	4b78      	ldr	r3, [pc, #480]	@ (800df8c <pow+0x3e4>)
 800ddac:	0512      	lsls	r2, r2, #20
 800ddae:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800ddb2:	1aa7      	subs	r7, r4, r2
 800ddb4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800ddb8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800ddbc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800ddc0:	1e2e      	subs	r6, r5, #0
 800ddc2:	ec47 6b14 	vmov	d4, r6, r7
 800ddc6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800ddca:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ddce:	ed93 5b00 	vldr	d5, [r3]
 800ddd2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800ddd6:	eea3 2b05 	vfma.f64	d2, d3, d5
 800ddda:	ed93 5b02 	vldr	d5, [r3, #8]
 800ddde:	ee36 4b02 	vadd.f64	d4, d6, d2
 800dde2:	ee32 2b44 	vsub.f64	d2, d2, d4
 800dde6:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ddea:	ed93 5b04 	vldr	d5, [r3, #16]
 800ddee:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ddf2:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ddf6:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ddfa:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ddfe:	ee34 8b00 	vadd.f64	d8, d4, d0
 800de02:	eeb0 9b40 	vmov.f64	d9, d0
 800de06:	ee34 4b48 	vsub.f64	d4, d4, d8
 800de0a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800de0e:	ee34 ab00 	vadd.f64	d10, d4, d0
 800de12:	ed93 5b06 	vldr	d5, [r3, #24]
 800de16:	ee26 bb00 	vmul.f64	d11, d6, d0
 800de1a:	ee37 7b09 	vadd.f64	d7, d7, d9
 800de1e:	ed93 4b08 	vldr	d4, [r3, #32]
 800de22:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800de26:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800de2a:	eea6 5b04 	vfma.f64	d5, d6, d4
 800de2e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800de32:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800de36:	eea6 4b03 	vfma.f64	d4, d6, d3
 800de3a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800de3e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800de42:	eea0 4b03 	vfma.f64	d4, d0, d3
 800de46:	eea0 5b04 	vfma.f64	d5, d0, d4
 800de4a:	eeab 7b05 	vfma.f64	d7, d11, d5
 800de4e:	ee38 4b07 	vadd.f64	d4, d8, d7
 800de52:	ee21 6b04 	vmul.f64	d6, d1, d4
 800de56:	ee16 3a90 	vmov	r3, s13
 800de5a:	eeb0 5b46 	vmov.f64	d5, d6
 800de5e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800de62:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800de66:	18b2      	adds	r2, r6, r2
 800de68:	2a3e      	cmp	r2, #62	@ 0x3e
 800de6a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800de6e:	ee38 8b44 	vsub.f64	d8, d8, d4
 800de72:	ee38 8b07 	vadd.f64	d8, d8, d7
 800de76:	eea1 5b08 	vfma.f64	d5, d1, d8
 800de7a:	d91b      	bls.n	800deb4 <pow+0x30c>
 800de7c:	2a00      	cmp	r2, #0
 800de7e:	da0b      	bge.n	800de98 <pow+0x2f0>
 800de80:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800de84:	ee36 0b00 	vadd.f64	d0, d6, d0
 800de88:	2800      	cmp	r0, #0
 800de8a:	f43f aef8 	beq.w	800dc7e <pow+0xd6>
 800de8e:	eeb1 0b40 	vneg.f64	d0, d0
 800de92:	e6f4      	b.n	800dc7e <pow+0xd6>
 800de94:	2000      	movs	r0, #0
 800de96:	e77e      	b.n	800dd96 <pow+0x1ee>
 800de98:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800de9c:	d909      	bls.n	800deb2 <pow+0x30a>
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f6bf af64 	bge.w	800dd6c <pow+0x1c4>
 800dea4:	b007      	add	sp, #28
 800dea6:	ecbd 8b0a 	vpop	{d8-d12}
 800deaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deae:	f000 bb43 	b.w	800e538 <__math_uflow>
 800deb2:	2600      	movs	r6, #0
 800deb4:	4936      	ldr	r1, [pc, #216]	@ (800df90 <pow+0x3e8>)
 800deb6:	ed91 4b02 	vldr	d4, [r1, #8]
 800deba:	ed91 3b00 	vldr	d3, [r1]
 800debe:	eeb0 7b44 	vmov.f64	d7, d4
 800dec2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dec6:	ee17 5a10 	vmov	r5, s14
 800deca:	ee37 7b44 	vsub.f64	d7, d7, d4
 800dece:	ed91 4b04 	vldr	d4, [r1, #16]
 800ded2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800ded6:	eea7 6b04 	vfma.f64	d6, d7, d4
 800deda:	ed91 4b06 	vldr	d4, [r1, #24]
 800dede:	18dc      	adds	r4, r3, r3
 800dee0:	f104 030f 	add.w	r3, r4, #15
 800dee4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800dee8:	eea7 6b04 	vfma.f64	d6, d7, d4
 800deec:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800def0:	ee35 5b06 	vadd.f64	d5, d5, d6
 800def4:	ee25 6b05 	vmul.f64	d6, d5, d5
 800def8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800defc:	ed91 4b08 	vldr	d4, [r1, #32]
 800df00:	ee35 7b07 	vadd.f64	d7, d5, d7
 800df04:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800df08:	eea5 4b03 	vfma.f64	d4, d5, d3
 800df0c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800df10:	eea6 7b04 	vfma.f64	d7, d6, d4
 800df14:	ee26 6b06 	vmul.f64	d6, d6, d6
 800df18:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800df1c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800df20:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800df24:	eea5 4b03 	vfma.f64	d4, d5, d3
 800df28:	1940      	adds	r0, r0, r5
 800df2a:	2700      	movs	r7, #0
 800df2c:	eb17 020c 	adds.w	r2, r7, ip
 800df30:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800df34:	eea6 7b04 	vfma.f64	d7, d6, d4
 800df38:	2e00      	cmp	r6, #0
 800df3a:	d175      	bne.n	800e028 <pow+0x480>
 800df3c:	42bd      	cmp	r5, r7
 800df3e:	db29      	blt.n	800df94 <pow+0x3ec>
 800df40:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800df44:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800df48:	4610      	mov	r0, r2
 800df4a:	ec41 0b10 	vmov	d0, r0, r1
 800df4e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800df52:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800df70 <pow+0x3c8>
 800df56:	ee20 0b07 	vmul.f64	d0, d0, d7
 800df5a:	b007      	add	sp, #28
 800df5c:	ecbd 8b0a 	vpop	{d8-d12}
 800df60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	f000 bb28 	b.w	800e5b8 <__math_check_oflow>
 800df68:	00000000 	.word	0x00000000
 800df6c:	43300000 	.word	0x43300000
 800df70:	00000000 	.word	0x00000000
 800df74:	7f000000 	.word	0x7f000000
 800df78:	3ff00000 	.word	0x3ff00000
 800df7c:	fff00000 	.word	0xfff00000
 800df80:	ffe00000 	.word	0xffe00000
 800df84:	7fe00000 	.word	0x7fe00000
 800df88:	c0196aab 	.word	0xc0196aab
 800df8c:	0800ea68 	.word	0x0800ea68
 800df90:	0800fae8 	.word	0x0800fae8
 800df94:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800df98:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800df9c:	4610      	mov	r0, r2
 800df9e:	ec41 0b15 	vmov	d5, r0, r1
 800dfa2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800dfa6:	ee27 6b05 	vmul.f64	d6, d7, d5
 800dfaa:	ee35 7b06 	vadd.f64	d7, d5, d6
 800dfae:	eeb0 4bc7 	vabs.f64	d4, d7
 800dfb2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800dfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfba:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800e038 <pow+0x490>
 800dfbe:	d52a      	bpl.n	800e016 <pow+0x46e>
 800dfc0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dfc4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800dfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfcc:	ee35 5b06 	vadd.f64	d5, d5, d6
 800dfd0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800dfd4:	bf58      	it	pl
 800dfd6:	eeb0 4b43 	vmovpl.f64	d4, d3
 800dfda:	ee37 3b04 	vadd.f64	d3, d7, d4
 800dfde:	ee34 6b43 	vsub.f64	d6, d4, d3
 800dfe2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dfe6:	ee36 6b05 	vadd.f64	d6, d6, d5
 800dfea:	ee36 6b03 	vadd.f64	d6, d6, d3
 800dfee:	ee36 7b44 	vsub.f64	d7, d6, d4
 800dff2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dffa:	d104      	bne.n	800e006 <pow+0x45e>
 800dffc:	4632      	mov	r2, r6
 800dffe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e002:	ec43 2b17 	vmov	d7, r2, r3
 800e006:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e00a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e00e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e012:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e016:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e01a:	b007      	add	sp, #28
 800e01c:	ecbd 8b0a 	vpop	{d8-d12}
 800e020:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e024:	f000 babf 	b.w	800e5a6 <__math_check_uflow>
 800e028:	ec43 2b10 	vmov	d0, r2, r3
 800e02c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e030:	e625      	b.n	800dc7e <pow+0xd6>
 800e032:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800e040 <pow+0x498>
 800e036:	e622      	b.n	800dc7e <pow+0xd6>
 800e038:	00000000 	.word	0x00000000
 800e03c:	00100000 	.word	0x00100000
	...

0800e048 <__ieee754_asinf>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	ee10 5a10 	vmov	r5, s0
 800e04e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e052:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800e056:	ed2d 8b04 	vpush	{d8-d9}
 800e05a:	d10c      	bne.n	800e076 <__ieee754_asinf+0x2e>
 800e05c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800e1d4 <__ieee754_asinf+0x18c>
 800e060:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800e1d8 <__ieee754_asinf+0x190>
 800e064:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e068:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e06c:	eeb0 0a67 	vmov.f32	s0, s15
 800e070:	ecbd 8b04 	vpop	{d8-d9}
 800e074:	bd38      	pop	{r3, r4, r5, pc}
 800e076:	d904      	bls.n	800e082 <__ieee754_asinf+0x3a>
 800e078:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e07c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e080:	e7f6      	b.n	800e070 <__ieee754_asinf+0x28>
 800e082:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e086:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e08a:	d20b      	bcs.n	800e0a4 <__ieee754_asinf+0x5c>
 800e08c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800e090:	d252      	bcs.n	800e138 <__ieee754_asinf+0xf0>
 800e092:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800e1dc <__ieee754_asinf+0x194>
 800e096:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e09a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a2:	dce5      	bgt.n	800e070 <__ieee754_asinf+0x28>
 800e0a4:	f7ff fd44 	bl	800db30 <fabsf>
 800e0a8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800e0ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e0b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e0b4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800e1e0 <__ieee754_asinf+0x198>
 800e0b8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800e1e4 <__ieee754_asinf+0x19c>
 800e0bc:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800e1e8 <__ieee754_asinf+0x1a0>
 800e0c0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e0c4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800e1ec <__ieee754_asinf+0x1a4>
 800e0c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e0cc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800e1f0 <__ieee754_asinf+0x1a8>
 800e0d0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e0d4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800e1f4 <__ieee754_asinf+0x1ac>
 800e0d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e0dc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800e1f8 <__ieee754_asinf+0x1b0>
 800e0e0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e0e4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800e1fc <__ieee754_asinf+0x1b4>
 800e0e8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e0ec:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800e200 <__ieee754_asinf+0x1b8>
 800e0f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e0f4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800e204 <__ieee754_asinf+0x1bc>
 800e0f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e0fc:	eeb0 0a48 	vmov.f32	s0, s16
 800e100:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e104:	f000 fa6c 	bl	800e5e0 <__ieee754_sqrtf>
 800e108:	4b3f      	ldr	r3, [pc, #252]	@ (800e208 <__ieee754_asinf+0x1c0>)
 800e10a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e10e:	429c      	cmp	r4, r3
 800e110:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e114:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e118:	d93d      	bls.n	800e196 <__ieee754_asinf+0x14e>
 800e11a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e11e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800e20c <__ieee754_asinf+0x1c4>
 800e122:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e126:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800e1d8 <__ieee754_asinf+0x190>
 800e12a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e12e:	2d00      	cmp	r5, #0
 800e130:	bfd8      	it	le
 800e132:	eeb1 0a40 	vnegle.f32	s0, s0
 800e136:	e79b      	b.n	800e070 <__ieee754_asinf+0x28>
 800e138:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e13c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800e1e4 <__ieee754_asinf+0x19c>
 800e140:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800e1e0 <__ieee754_asinf+0x198>
 800e144:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800e1f8 <__ieee754_asinf+0x1b0>
 800e148:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e14c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e1ec <__ieee754_asinf+0x1a4>
 800e150:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e154:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e1f0 <__ieee754_asinf+0x1a8>
 800e158:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e15c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800e1f4 <__ieee754_asinf+0x1ac>
 800e160:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e164:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800e1e8 <__ieee754_asinf+0x1a0>
 800e168:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e16c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800e1fc <__ieee754_asinf+0x1b4>
 800e170:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e174:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800e200 <__ieee754_asinf+0x1b8>
 800e178:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e17c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800e204 <__ieee754_asinf+0x1bc>
 800e180:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e184:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e188:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e18c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e190:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e194:	e76c      	b.n	800e070 <__ieee754_asinf+0x28>
 800e196:	ee10 3a10 	vmov	r3, s0
 800e19a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e19e:	f023 030f 	bic.w	r3, r3, #15
 800e1a2:	ee07 3a10 	vmov	s14, r3
 800e1a6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e1aa:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e1ae:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e1b2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e1d4 <__ieee754_asinf+0x18c>
 800e1b6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e1ba:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800e210 <__ieee754_asinf+0x1c8>
 800e1be:	eee5 7a66 	vfms.f32	s15, s10, s13
 800e1c2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e1c6:	eeb0 6a40 	vmov.f32	s12, s0
 800e1ca:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e1ce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e1d2:	e7aa      	b.n	800e12a <__ieee754_asinf+0xe2>
 800e1d4:	b33bbd2e 	.word	0xb33bbd2e
 800e1d8:	3fc90fdb 	.word	0x3fc90fdb
 800e1dc:	7149f2ca 	.word	0x7149f2ca
 800e1e0:	3a4f7f04 	.word	0x3a4f7f04
 800e1e4:	3811ef08 	.word	0x3811ef08
 800e1e8:	3e2aaaab 	.word	0x3e2aaaab
 800e1ec:	bd241146 	.word	0xbd241146
 800e1f0:	3e4e0aa8 	.word	0x3e4e0aa8
 800e1f4:	bea6b090 	.word	0xbea6b090
 800e1f8:	3d9dc62e 	.word	0x3d9dc62e
 800e1fc:	bf303361 	.word	0xbf303361
 800e200:	4001572d 	.word	0x4001572d
 800e204:	c019d139 	.word	0xc019d139
 800e208:	3f799999 	.word	0x3f799999
 800e20c:	333bbd2e 	.word	0x333bbd2e
 800e210:	3f490fdb 	.word	0x3f490fdb

0800e214 <__ieee754_atan2f>:
 800e214:	ee10 2a90 	vmov	r2, s1
 800e218:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e21c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e220:	b510      	push	{r4, lr}
 800e222:	eef0 7a40 	vmov.f32	s15, s0
 800e226:	d806      	bhi.n	800e236 <__ieee754_atan2f+0x22>
 800e228:	ee10 0a10 	vmov	r0, s0
 800e22c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e230:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e234:	d904      	bls.n	800e240 <__ieee754_atan2f+0x2c>
 800e236:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e23a:	eeb0 0a67 	vmov.f32	s0, s15
 800e23e:	bd10      	pop	{r4, pc}
 800e240:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e244:	d103      	bne.n	800e24e <__ieee754_atan2f+0x3a>
 800e246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e24a:	f000 b881 	b.w	800e350 <atanf>
 800e24e:	1794      	asrs	r4, r2, #30
 800e250:	f004 0402 	and.w	r4, r4, #2
 800e254:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e258:	b93b      	cbnz	r3, 800e26a <__ieee754_atan2f+0x56>
 800e25a:	2c02      	cmp	r4, #2
 800e25c:	d05c      	beq.n	800e318 <__ieee754_atan2f+0x104>
 800e25e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800e32c <__ieee754_atan2f+0x118>
 800e262:	2c03      	cmp	r4, #3
 800e264:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800e268:	e7e7      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e26a:	b939      	cbnz	r1, 800e27c <__ieee754_atan2f+0x68>
 800e26c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800e330 <__ieee754_atan2f+0x11c>
 800e270:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800e334 <__ieee754_atan2f+0x120>
 800e274:	2800      	cmp	r0, #0
 800e276:	fe67 7a87 	vselge.f32	s15, s15, s14
 800e27a:	e7de      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e27c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e280:	d110      	bne.n	800e2a4 <__ieee754_atan2f+0x90>
 800e282:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e286:	f104 34ff 	add.w	r4, r4, #4294967295
 800e28a:	d107      	bne.n	800e29c <__ieee754_atan2f+0x88>
 800e28c:	2c02      	cmp	r4, #2
 800e28e:	d846      	bhi.n	800e31e <__ieee754_atan2f+0x10a>
 800e290:	4b29      	ldr	r3, [pc, #164]	@ (800e338 <__ieee754_atan2f+0x124>)
 800e292:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e296:	edd3 7a00 	vldr	s15, [r3]
 800e29a:	e7ce      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e29c:	2c02      	cmp	r4, #2
 800e29e:	d841      	bhi.n	800e324 <__ieee754_atan2f+0x110>
 800e2a0:	4b26      	ldr	r3, [pc, #152]	@ (800e33c <__ieee754_atan2f+0x128>)
 800e2a2:	e7f6      	b.n	800e292 <__ieee754_atan2f+0x7e>
 800e2a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e2a8:	d0e0      	beq.n	800e26c <__ieee754_atan2f+0x58>
 800e2aa:	1a5b      	subs	r3, r3, r1
 800e2ac:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e2b0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e2b4:	da1a      	bge.n	800e2ec <__ieee754_atan2f+0xd8>
 800e2b6:	2a00      	cmp	r2, #0
 800e2b8:	da01      	bge.n	800e2be <__ieee754_atan2f+0xaa>
 800e2ba:	313c      	adds	r1, #60	@ 0x3c
 800e2bc:	db19      	blt.n	800e2f2 <__ieee754_atan2f+0xde>
 800e2be:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e2c2:	f7ff fc35 	bl	800db30 <fabsf>
 800e2c6:	f000 f843 	bl	800e350 <atanf>
 800e2ca:	eef0 7a40 	vmov.f32	s15, s0
 800e2ce:	2c01      	cmp	r4, #1
 800e2d0:	d012      	beq.n	800e2f8 <__ieee754_atan2f+0xe4>
 800e2d2:	2c02      	cmp	r4, #2
 800e2d4:	d017      	beq.n	800e306 <__ieee754_atan2f+0xf2>
 800e2d6:	2c00      	cmp	r4, #0
 800e2d8:	d0af      	beq.n	800e23a <__ieee754_atan2f+0x26>
 800e2da:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e340 <__ieee754_atan2f+0x12c>
 800e2de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2e2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e344 <__ieee754_atan2f+0x130>
 800e2e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2ea:	e7a6      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e2ec:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800e330 <__ieee754_atan2f+0x11c>
 800e2f0:	e7ed      	b.n	800e2ce <__ieee754_atan2f+0xba>
 800e2f2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e348 <__ieee754_atan2f+0x134>
 800e2f6:	e7ea      	b.n	800e2ce <__ieee754_atan2f+0xba>
 800e2f8:	ee17 3a90 	vmov	r3, s15
 800e2fc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e300:	ee07 3a90 	vmov	s15, r3
 800e304:	e799      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e306:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e340 <__ieee754_atan2f+0x12c>
 800e30a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e30e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e344 <__ieee754_atan2f+0x130>
 800e312:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e316:	e790      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e318:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e344 <__ieee754_atan2f+0x130>
 800e31c:	e78d      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e31e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e34c <__ieee754_atan2f+0x138>
 800e322:	e78a      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e324:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e348 <__ieee754_atan2f+0x134>
 800e328:	e787      	b.n	800e23a <__ieee754_atan2f+0x26>
 800e32a:	bf00      	nop
 800e32c:	c0490fdb 	.word	0xc0490fdb
 800e330:	3fc90fdb 	.word	0x3fc90fdb
 800e334:	bfc90fdb 	.word	0xbfc90fdb
 800e338:	0800fabc 	.word	0x0800fabc
 800e33c:	0800fab0 	.word	0x0800fab0
 800e340:	33bbbd2e 	.word	0x33bbbd2e
 800e344:	40490fdb 	.word	0x40490fdb
 800e348:	00000000 	.word	0x00000000
 800e34c:	3f490fdb 	.word	0x3f490fdb

0800e350 <atanf>:
 800e350:	b538      	push	{r3, r4, r5, lr}
 800e352:	ee10 5a10 	vmov	r5, s0
 800e356:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e35a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e35e:	eef0 7a40 	vmov.f32	s15, s0
 800e362:	d30f      	bcc.n	800e384 <atanf+0x34>
 800e364:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e368:	d904      	bls.n	800e374 <atanf+0x24>
 800e36a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e36e:	eeb0 0a67 	vmov.f32	s0, s15
 800e372:	bd38      	pop	{r3, r4, r5, pc}
 800e374:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e4ac <atanf+0x15c>
 800e378:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e4b0 <atanf+0x160>
 800e37c:	2d00      	cmp	r5, #0
 800e37e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800e382:	e7f4      	b.n	800e36e <atanf+0x1e>
 800e384:	4b4b      	ldr	r3, [pc, #300]	@ (800e4b4 <atanf+0x164>)
 800e386:	429c      	cmp	r4, r3
 800e388:	d810      	bhi.n	800e3ac <atanf+0x5c>
 800e38a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e38e:	d20a      	bcs.n	800e3a6 <atanf+0x56>
 800e390:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e4b8 <atanf+0x168>
 800e394:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e398:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e39c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a4:	dce3      	bgt.n	800e36e <atanf+0x1e>
 800e3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3aa:	e013      	b.n	800e3d4 <atanf+0x84>
 800e3ac:	f7ff fbc0 	bl	800db30 <fabsf>
 800e3b0:	4b42      	ldr	r3, [pc, #264]	@ (800e4bc <atanf+0x16c>)
 800e3b2:	429c      	cmp	r4, r3
 800e3b4:	d84f      	bhi.n	800e456 <atanf+0x106>
 800e3b6:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e3ba:	429c      	cmp	r4, r3
 800e3bc:	d841      	bhi.n	800e442 <atanf+0xf2>
 800e3be:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e3c2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e3c6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e3da:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800e4c0 <atanf+0x170>
 800e3de:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800e4c4 <atanf+0x174>
 800e3e2:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800e4c8 <atanf+0x178>
 800e3e6:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e3ea:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e3ee:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800e4cc <atanf+0x17c>
 800e3f2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e3f6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800e4d0 <atanf+0x180>
 800e3fa:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e3fe:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800e4d4 <atanf+0x184>
 800e402:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e406:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e4d8 <atanf+0x188>
 800e40a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e40e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800e4dc <atanf+0x18c>
 800e412:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e416:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e4e0 <atanf+0x190>
 800e41a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e41e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800e4e4 <atanf+0x194>
 800e422:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e426:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800e4e8 <atanf+0x198>
 800e42a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e42e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e432:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e436:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e43a:	d121      	bne.n	800e480 <atanf+0x130>
 800e43c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e440:	e795      	b.n	800e36e <atanf+0x1e>
 800e442:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e446:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e44a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e44e:	2301      	movs	r3, #1
 800e450:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e454:	e7be      	b.n	800e3d4 <atanf+0x84>
 800e456:	4b25      	ldr	r3, [pc, #148]	@ (800e4ec <atanf+0x19c>)
 800e458:	429c      	cmp	r4, r3
 800e45a:	d80b      	bhi.n	800e474 <atanf+0x124>
 800e45c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e460:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e464:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e468:	2302      	movs	r3, #2
 800e46a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e46e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e472:	e7af      	b.n	800e3d4 <atanf+0x84>
 800e474:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e478:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e47c:	2303      	movs	r3, #3
 800e47e:	e7a9      	b.n	800e3d4 <atanf+0x84>
 800e480:	4a1b      	ldr	r2, [pc, #108]	@ (800e4f0 <atanf+0x1a0>)
 800e482:	491c      	ldr	r1, [pc, #112]	@ (800e4f4 <atanf+0x1a4>)
 800e484:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e488:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e48c:	edd3 6a00 	vldr	s13, [r3]
 800e490:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e494:	2d00      	cmp	r5, #0
 800e496:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e49a:	edd2 7a00 	vldr	s15, [r2]
 800e49e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4a2:	bfb8      	it	lt
 800e4a4:	eef1 7a67 	vneglt.f32	s15, s15
 800e4a8:	e761      	b.n	800e36e <atanf+0x1e>
 800e4aa:	bf00      	nop
 800e4ac:	bfc90fdb 	.word	0xbfc90fdb
 800e4b0:	3fc90fdb 	.word	0x3fc90fdb
 800e4b4:	3edfffff 	.word	0x3edfffff
 800e4b8:	7149f2ca 	.word	0x7149f2ca
 800e4bc:	3f97ffff 	.word	0x3f97ffff
 800e4c0:	3c8569d7 	.word	0x3c8569d7
 800e4c4:	3d4bda59 	.word	0x3d4bda59
 800e4c8:	bd6ef16b 	.word	0xbd6ef16b
 800e4cc:	3d886b35 	.word	0x3d886b35
 800e4d0:	3dba2e6e 	.word	0x3dba2e6e
 800e4d4:	3e124925 	.word	0x3e124925
 800e4d8:	3eaaaaab 	.word	0x3eaaaaab
 800e4dc:	bd15a221 	.word	0xbd15a221
 800e4e0:	bd9d8795 	.word	0xbd9d8795
 800e4e4:	bde38e38 	.word	0xbde38e38
 800e4e8:	be4ccccd 	.word	0xbe4ccccd
 800e4ec:	401bffff 	.word	0x401bffff
 800e4f0:	0800fad8 	.word	0x0800fad8
 800e4f4:	0800fac8 	.word	0x0800fac8

0800e4f8 <with_errno>:
 800e4f8:	b510      	push	{r4, lr}
 800e4fa:	ed2d 8b02 	vpush	{d8}
 800e4fe:	eeb0 8b40 	vmov.f64	d8, d0
 800e502:	4604      	mov	r4, r0
 800e504:	f7fc f824 	bl	800a550 <__errno>
 800e508:	eeb0 0b48 	vmov.f64	d0, d8
 800e50c:	ecbd 8b02 	vpop	{d8}
 800e510:	6004      	str	r4, [r0, #0]
 800e512:	bd10      	pop	{r4, pc}

0800e514 <xflow>:
 800e514:	b082      	sub	sp, #8
 800e516:	b158      	cbz	r0, 800e530 <xflow+0x1c>
 800e518:	eeb1 7b40 	vneg.f64	d7, d0
 800e51c:	ed8d 7b00 	vstr	d7, [sp]
 800e520:	ed9d 7b00 	vldr	d7, [sp]
 800e524:	2022      	movs	r0, #34	@ 0x22
 800e526:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e52a:	b002      	add	sp, #8
 800e52c:	f7ff bfe4 	b.w	800e4f8 <with_errno>
 800e530:	eeb0 7b40 	vmov.f64	d7, d0
 800e534:	e7f2      	b.n	800e51c <xflow+0x8>
	...

0800e538 <__math_uflow>:
 800e538:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e540 <__math_uflow+0x8>
 800e53c:	f7ff bfea 	b.w	800e514 <xflow>
 800e540:	00000000 	.word	0x00000000
 800e544:	10000000 	.word	0x10000000

0800e548 <__math_oflow>:
 800e548:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e550 <__math_oflow+0x8>
 800e54c:	f7ff bfe2 	b.w	800e514 <xflow>
 800e550:	00000000 	.word	0x00000000
 800e554:	70000000 	.word	0x70000000

0800e558 <__math_divzero>:
 800e558:	b082      	sub	sp, #8
 800e55a:	2800      	cmp	r0, #0
 800e55c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800e560:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e564:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800e568:	ed8d 7b00 	vstr	d7, [sp]
 800e56c:	ed9d 0b00 	vldr	d0, [sp]
 800e570:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800e580 <__math_divzero+0x28>
 800e574:	2022      	movs	r0, #34	@ 0x22
 800e576:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e57a:	b002      	add	sp, #8
 800e57c:	f7ff bfbc 	b.w	800e4f8 <with_errno>
	...

0800e588 <__math_invalid>:
 800e588:	eeb0 7b40 	vmov.f64	d7, d0
 800e58c:	eeb4 7b47 	vcmp.f64	d7, d7
 800e590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e594:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e598:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e59c:	d602      	bvs.n	800e5a4 <__math_invalid+0x1c>
 800e59e:	2021      	movs	r0, #33	@ 0x21
 800e5a0:	f7ff bfaa 	b.w	800e4f8 <with_errno>
 800e5a4:	4770      	bx	lr

0800e5a6 <__math_check_uflow>:
 800e5a6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ae:	d102      	bne.n	800e5b6 <__math_check_uflow+0x10>
 800e5b0:	2022      	movs	r0, #34	@ 0x22
 800e5b2:	f7ff bfa1 	b.w	800e4f8 <with_errno>
 800e5b6:	4770      	bx	lr

0800e5b8 <__math_check_oflow>:
 800e5b8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800e5d8 <__math_check_oflow+0x20>
 800e5bc:	eeb0 7bc0 	vabs.f64	d7, d0
 800e5c0:	eeb4 7b46 	vcmp.f64	d7, d6
 800e5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c8:	dd02      	ble.n	800e5d0 <__math_check_oflow+0x18>
 800e5ca:	2022      	movs	r0, #34	@ 0x22
 800e5cc:	f7ff bf94 	b.w	800e4f8 <with_errno>
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop
 800e5d4:	f3af 8000 	nop.w
 800e5d8:	ffffffff 	.word	0xffffffff
 800e5dc:	7fefffff 	.word	0x7fefffff

0800e5e0 <__ieee754_sqrtf>:
 800e5e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e5e4:	4770      	bx	lr
	...

0800e5e8 <_init>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	bf00      	nop
 800e5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ee:	bc08      	pop	{r3}
 800e5f0:	469e      	mov	lr, r3
 800e5f2:	4770      	bx	lr

0800e5f4 <_fini>:
 800e5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f6:	bf00      	nop
 800e5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5fa:	bc08      	pop	{r3}
 800e5fc:	469e      	mov	lr, r3
 800e5fe:	4770      	bx	lr
