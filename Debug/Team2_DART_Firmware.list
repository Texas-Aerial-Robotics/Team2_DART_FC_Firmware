
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb34  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800bdd8  0800bdd8  0000cdd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c288  0800c288  0000d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c290  0800c290  0000d290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c294  0800c294  0000d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800c298  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000308  240001d8  0800c470  0000e1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004e0  0800c470  0000e4e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000171fa  00000000  00000000  0000e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028e0  00000000  00000000  00025400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001250  00000000  00000000  00027ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e4c  00000000  00000000  00028f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038548  00000000  00000000  00029d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017b28  00000000  00000000  000622c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016846e  00000000  00000000  00079dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e225a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000062f8  00000000  00000000  001e22a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001e8598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bdbc 	.word	0x0800bdbc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800bdbc 	.word	0x0800bdbc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a70:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d013      	beq.n	8000aa8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a80:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000a88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00b      	beq.n	8000aa8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a90:	e000      	b.n	8000a94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a94:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a9e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	ed2d 8b02 	vpush	{d8}
 8000abe:	b090      	sub	sp, #64	@ 0x40
 8000ac0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ac2:	f000 fbff 	bl	80012c4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f000 fefb 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f9af 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f000 fb1b 	bl	8001108 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ad2:	f000 facd 	bl	8001070 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ad6:	f000 fa25 	bl	8000f24 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ada:	f000 fa7b 	bl	8000fd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t imu_data[6];
  char buffer[40] = {'\0'};
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2224      	movs	r2, #36	@ 0x24
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f007 fd2a 	bl	8008542 <memset>

  mpu9250_config();
 8000aee:	f000 fb4f 	bl	8001190 <mpu9250_config>
//		  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
//		  accel_data = ((int16_t)imu_data[0]<<8) + imu_data[1];
//		  timer_flag = 0;
//	  }

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000af2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000af6:	2206      	movs	r2, #6
 8000af8:	4619      	mov	r1, r3
 8000afa:	203b      	movs	r0, #59	@ 0x3b
 8000afc:	f000 fb7e 	bl	80011fc <mpu9250_read_reg>
	  accel_x_raw = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8000b00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	4bb5      	ldr	r3, [pc, #724]	@ (8000de8 <main+0x330>)
 8000b14:	801a      	strh	r2, [r3, #0]
	  accel_y_raw = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8000b16:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4bb0      	ldr	r3, [pc, #704]	@ (8000dec <main+0x334>)
 8000b2a:	801a      	strh	r2, [r3, #0]
	  accel_z_raw = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8000b2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21a      	sxth	r2, r3
 8000b3e:	4bac      	ldr	r3, [pc, #688]	@ (8000df0 <main+0x338>)
 8000b40:	801a      	strh	r2, [r3, #0]

	  AccX = (float)accel_x_raw/4096.0;
 8000b42:	4ba9      	ldr	r3, [pc, #676]	@ (8000de8 <main+0x330>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	ee07 3a90 	vmov	s15, r3
 8000b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b50:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b54:	ed9f 5b9e 	vldr	d5, [pc, #632]	@ 8000dd0 <main+0x318>
 8000b58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b60:	4ba4      	ldr	r3, [pc, #656]	@ (8000df4 <main+0x33c>)
 8000b62:	edc3 7a00 	vstr	s15, [r3]
	  AccY = (float)accel_y_raw/4096.0;
 8000b66:	4ba1      	ldr	r3, [pc, #644]	@ (8000dec <main+0x334>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b74:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b78:	ed9f 5b95 	vldr	d5, [pc, #596]	@ 8000dd0 <main+0x318>
 8000b7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b84:	4b9c      	ldr	r3, [pc, #624]	@ (8000df8 <main+0x340>)
 8000b86:	edc3 7a00 	vstr	s15, [r3]
	  AccZ = (float)accel_z_raw/4096.0;
 8000b8a:	4b99      	ldr	r3, [pc, #612]	@ (8000df0 <main+0x338>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	ee07 3a90 	vmov	s15, r3
 8000b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b98:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b9c:	ed9f 5b8c 	vldr	d5, [pc, #560]	@ 8000dd0 <main+0x318>
 8000ba0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ba4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba8:	4b94      	ldr	r3, [pc, #592]	@ (8000dfc <main+0x344>)
 8000baa:	edc3 7a00 	vstr	s15, [r3]
	  AccZ -= 4;	//offset accel_z_raw to be around 0
 8000bae:	4b93      	ldr	r3, [pc, #588]	@ (8000dfc <main+0x344>)
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
 8000bb4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000bb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bbc:	4b8f      	ldr	r3, [pc, #572]	@ (8000dfc <main+0x344>)
 8000bbe:	edc3 7a00 	vstr	s15, [r3]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 8000bc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bc6:	2206      	movs	r2, #6
 8000bc8:	4619      	mov	r1, r3
 8000bca:	2043      	movs	r0, #67	@ 0x43
 8000bcc:	f000 fb16 	bl	80011fc <mpu9250_read_reg>
	  gyro_x_raw = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8000bd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	4b87      	ldr	r3, [pc, #540]	@ (8000e00 <main+0x348>)
 8000be4:	801a      	strh	r2, [r3, #0]
	  gyro_y_raw = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8000be6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	4b82      	ldr	r3, [pc, #520]	@ (8000e04 <main+0x34c>)
 8000bfa:	801a      	strh	r2, [r3, #0]
	  gyro_z_raw = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8000bfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	4b7e      	ldr	r3, [pc, #504]	@ (8000e08 <main+0x350>)
 8000c10:	801a      	strh	r2, [r3, #0]

	  GyroX = (float)gyro_x_raw/65.5;
 8000c12:	4b7b      	ldr	r3, [pc, #492]	@ (8000e00 <main+0x348>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c20:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c24:	ed9f 5b6c 	vldr	d5, [pc, #432]	@ 8000dd8 <main+0x320>
 8000c28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c30:	4b76      	ldr	r3, [pc, #472]	@ (8000e0c <main+0x354>)
 8000c32:	edc3 7a00 	vstr	s15, [r3]
	  GyroY = (float)gyro_y_raw/65.5;
 8000c36:	4b73      	ldr	r3, [pc, #460]	@ (8000e04 <main+0x34c>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c44:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c48:	ed9f 5b63 	vldr	d5, [pc, #396]	@ 8000dd8 <main+0x320>
 8000c4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c54:	4b6e      	ldr	r3, [pc, #440]	@ (8000e10 <main+0x358>)
 8000c56:	edc3 7a00 	vstr	s15, [r3]
	  GyroZ = (float)gyro_z_raw/65.5;
 8000c5a:	4b6b      	ldr	r3, [pc, #428]	@ (8000e08 <main+0x350>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	ee07 3a90 	vmov	s15, r3
 8000c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c68:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c6c:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8000dd8 <main+0x320>
 8000c70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c78:	4b66      	ldr	r3, [pc, #408]	@ (8000e14 <main+0x35c>)
 8000c7a:	edc3 7a00 	vstr	s15, [r3]
	  GyroX -= 4;
 8000c7e:	4b63      	ldr	r3, [pc, #396]	@ (8000e0c <main+0x354>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c8c:	4b5f      	ldr	r3, [pc, #380]	@ (8000e0c <main+0x354>)
 8000c8e:	edc3 7a00 	vstr	s15, [r3]
	  GyroY += 20;
 8000c92:	4b5f      	ldr	r3, [pc, #380]	@ (8000e10 <main+0x358>)
 8000c94:	edd3 7a00 	vldr	s15, [r3]
 8000c98:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000c9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e10 <main+0x358>)
 8000ca2:	edc3 7a00 	vstr	s15, [r3]
	  GyroZ += 5;
 8000ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8000e14 <main+0x35c>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cb4:	4b57      	ldr	r3, [pc, #348]	@ (8000e14 <main+0x35c>)
 8000cb6:	edc3 7a00 	vstr	s15, [r3]

	  AngleRoll=atan(AccY/sqrt(AccX*AccX+AccZ*AccZ))*1/(3.142/180);
 8000cba:	4b4f      	ldr	r3, [pc, #316]	@ (8000df8 <main+0x340>)
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8000df4 <main+0x33c>)
 8000cc6:	ed93 7a00 	vldr	s14, [r3]
 8000cca:	4b4a      	ldr	r3, [pc, #296]	@ (8000df4 <main+0x33c>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cd4:	4b49      	ldr	r3, [pc, #292]	@ (8000dfc <main+0x344>)
 8000cd6:	edd3 6a00 	vldr	s13, [r3]
 8000cda:	4b48      	ldr	r3, [pc, #288]	@ (8000dfc <main+0x344>)
 8000cdc:	edd3 7a00 	vldr	s15, [r3]
 8000ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cec:	eeb0 0b47 	vmov.f64	d0, d7
 8000cf0:	f00a ff3e 	bl	800bb70 <sqrt>
 8000cf4:	eeb0 6b40 	vmov.f64	d6, d0
 8000cf8:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000cfc:	eeb0 0b47 	vmov.f64	d0, d7
 8000d00:	f00a ff56 	bl	800bbb0 <atan>
 8000d04:	eeb0 6b40 	vmov.f64	d6, d0
 8000d08:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8000de0 <main+0x328>
 8000d0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d14:	4b40      	ldr	r3, [pc, #256]	@ (8000e18 <main+0x360>)
 8000d16:	edc3 7a00 	vstr	s15, [r3]
	  AnglePitch=-atan(AccX/sqrt(AccY*AccY+AccZ*AccZ))*1/(3.142/180);
 8000d1a:	4b36      	ldr	r3, [pc, #216]	@ (8000df4 <main+0x33c>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000d24:	4b34      	ldr	r3, [pc, #208]	@ (8000df8 <main+0x340>)
 8000d26:	ed93 7a00 	vldr	s14, [r3]
 8000d2a:	4b33      	ldr	r3, [pc, #204]	@ (8000df8 <main+0x340>)
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d34:	4b31      	ldr	r3, [pc, #196]	@ (8000dfc <main+0x344>)
 8000d36:	edd3 6a00 	vldr	s13, [r3]
 8000d3a:	4b30      	ldr	r3, [pc, #192]	@ (8000dfc <main+0x344>)
 8000d3c:	edd3 7a00 	vldr	s15, [r3]
 8000d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d50:	f00a ff0e 	bl	800bb70 <sqrt>
 8000d54:	eeb0 6b40 	vmov.f64	d6, d0
 8000d58:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d60:	f00a ff26 	bl	800bbb0 <atan>
 8000d64:	eeb0 7b40 	vmov.f64	d7, d0
 8000d68:	eeb1 6b47 	vneg.f64	d6, d7
 8000d6c:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 8000de0 <main+0x328>
 8000d70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d78:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <main+0x364>)
 8000d7a:	edc3 7a00 	vstr	s15, [r3]

	  timer_flag = 0;
 8000d7e:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <main+0x368>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]

	  //send data through UART
	  snprintf(buffer, sizeof(buffer), "%.4f,%.4f\n", AngleRoll, AnglePitch);
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <main+0x360>)
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8e:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <main+0x364>)
 8000d90:	edd3 6a00 	vldr	s13, [r3]
 8000d94:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d98:	463b      	mov	r3, r7
 8000d9a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d9e:	ed8d 7b00 	vstr	d7, [sp]
 8000da2:	4a20      	ldr	r2, [pc, #128]	@ (8000e24 <main+0x36c>)
 8000da4:	2128      	movs	r1, #40	@ 0x28
 8000da6:	4618      	mov	r0, r3
 8000da8:	f007 fb34 	bl	8008414 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000dac:	463b      	mov	r3, r7
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fae6 	bl	8000380 <strlen>
 8000db4:	4603      	mov	r3, r0
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4639      	mov	r1, r7
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	481a      	ldr	r0, [pc, #104]	@ (8000e28 <main+0x370>)
 8000dc0:	f005 fb0a 	bl	80063d8 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8000dc4:	200a      	movs	r0, #10
 8000dc6:	f000 fe0d 	bl	80019e4 <HAL_Delay>
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000dca:	bf00      	nop
 8000dcc:	e691      	b.n	8000af2 <main+0x3a>
 8000dce:	bf00      	nop
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	40b00000 	.word	0x40b00000
 8000dd8:	00000000 	.word	0x00000000
 8000ddc:	40506000 	.word	0x40506000
 8000de0:	80fa7e3f 	.word	0x80fa7e3f
 8000de4:	3f91dfde 	.word	0x3f91dfde
 8000de8:	2400035e 	.word	0x2400035e
 8000dec:	24000360 	.word	0x24000360
 8000df0:	24000362 	.word	0x24000362
 8000df4:	2400036c 	.word	0x2400036c
 8000df8:	24000370 	.word	0x24000370
 8000dfc:	24000374 	.word	0x24000374
 8000e00:	24000364 	.word	0x24000364
 8000e04:	24000366 	.word	0x24000366
 8000e08:	24000368 	.word	0x24000368
 8000e0c:	24000378 	.word	0x24000378
 8000e10:	2400037c 	.word	0x2400037c
 8000e14:	24000380 	.word	0x24000380
 8000e18:	24000384 	.word	0x24000384
 8000e1c:	24000388 	.word	0x24000388
 8000e20:	2400035c 	.word	0x2400035c
 8000e24:	0800bdd8 	.word	0x0800bdd8
 8000e28:	240002c8 	.word	0x240002c8

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09c      	sub	sp, #112	@ 0x70
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	224c      	movs	r2, #76	@ 0x4c
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f007 fb81 	bl	8008542 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2220      	movs	r2, #32
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 fb7b 	bl	8008542 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f001 f94b 	bl	80020e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <SystemClock_Config+0xf0>)
 8000e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5a:	4a30      	ldr	r2, [pc, #192]	@ (8000f1c <SystemClock_Config+0xf0>)
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e62:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <SystemClock_Config+0xf0>)
 8000e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <SystemClock_Config+0xf4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e74:	4a2a      	ldr	r2, [pc, #168]	@ (8000f20 <SystemClock_Config+0xf4>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <SystemClock_Config+0xf4>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e88:	bf00      	nop
 8000e8a:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <SystemClock_Config+0xf4>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e96:	d1f8      	bne.n	8000e8a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea0:	2340      	movs	r3, #64	@ 0x40
 8000ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eac:	2304      	movs	r3, #4
 8000eae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 f943 	bl	800215c <HAL_RCC_OscConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000edc:	f000 fa1e 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	233f      	movs	r3, #63	@ 0x3f
 8000ee2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ef4:	2340      	movs	r3, #64	@ 0x40
 8000ef6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2101      	movs	r1, #1
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fd83 	bl	8002a10 <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f10:	f000 fa04 	bl	800131c <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3770      	adds	r7, #112	@ 0x70
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58000400 	.word	0x58000400
 8000f20:	58024800 	.word	0x58024800

08000f24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f28:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f2a:	4a29      	ldr	r2, [pc, #164]	@ (8000fd0 <MX_SPI1_Init+0xac>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2e:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f3c:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f42:	4b22      	ldr	r3, [pc, #136]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f52:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f80:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f88:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <MX_SPI1_Init+0xa8>)
 8000fba:	f003 fee1 	bl	8004d80 <HAL_SPI_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8000fc4:	f000 f9aa 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	240001f4 	.word	0x240001f4
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <MX_TIM2_Init+0x98>)
 8000ff4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <MX_TIM2_Init+0x98>)
 8000ffc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001000:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_TIM2_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001008:	4b18      	ldr	r3, [pc, #96]	@ (800106c <MX_TIM2_Init+0x98>)
 800100a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800100e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_TIM2_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <MX_TIM2_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101c:	4813      	ldr	r0, [pc, #76]	@ (800106c <MX_TIM2_Init+0x98>)
 800101e:	f004 fd1c 	bl	8005a5a <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001028:	f000 f978 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <MX_TIM2_Init+0x98>)
 800103a:	f004 fe6d 	bl	8005d18 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001044:	f000 f96a 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_TIM2_Init+0x98>)
 8001056:	f005 f8c3 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001060:	f000 f95c 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2400027c 	.word	0x2400027c

08001070 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 8001076:	4a23      	ldr	r2, [pc, #140]	@ (8001104 <MX_USART2_UART_Init+0x94>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b8:	4811      	ldr	r0, [pc, #68]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 80010ba:	f005 f93d 	bl	8006338 <HAL_UART_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010c4:	f000 f92a 	bl	800131c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	480d      	ldr	r0, [pc, #52]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 80010cc:	f006 f9d3 	bl	8007476 <HAL_UARTEx_SetTxFifoThreshold>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010d6:	f000 f921 	bl	800131c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4808      	ldr	r0, [pc, #32]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 80010de:	f006 fa08 	bl	80074f2 <HAL_UARTEx_SetRxFifoThreshold>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010e8:	f000 f918 	bl	800131c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_USART2_UART_Init+0x90>)
 80010ee:	f006 f989 	bl	8007404 <HAL_UARTEx_DisableFifoMode>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010f8:	f000 f910 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	240002c8 	.word	0x240002c8
 8001104:	40004400 	.word	0x40004400

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_GPIO_Init+0x80>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001124:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <MX_GPIO_Init+0x80>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_GPIO_Init+0x80>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_GPIO_Init+0x80>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <MX_GPIO_Init+0x80>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_GPIO_Init+0x80>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	480b      	ldr	r0, [pc, #44]	@ (800118c <MX_GPIO_Init+0x84>)
 8001160:	f000 ffa8 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001164:	2320      	movs	r3, #32
 8001166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_GPIO_Init+0x84>)
 800117c:	f000 fdea 	bl	8001d54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	58024400 	.word	0x58024400
 800118c:	58020000 	.word	0x58020000

08001190 <mpu9250_config>:

/* USER CODE BEGIN 4 */
void mpu9250_config()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001194:	2105      	movs	r1, #5
 8001196:	201a      	movs	r0, #26
 8001198:	f000 f80a 	bl	80011b0 <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 800119c:	2110      	movs	r1, #16
 800119e:	201c      	movs	r0, #28
 80011a0:	f000 f806 	bl	80011b0 <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 80011a4:	2108      	movs	r1, #8
 80011a6:	201b      	movs	r0, #27
 80011a8:	f000 f802 	bl	80011b0 <mpu9250_write_reg>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <mpu9250_write_reg>:

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <mpu9250_write_reg+0x44>)
 80011c6:	f000 ff75 	bl	80020b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 80011ca:	1df9      	adds	r1, r7, #7
 80011cc:	2364      	movs	r3, #100	@ 0x64
 80011ce:	2201      	movs	r2, #1
 80011d0:	4809      	ldr	r0, [pc, #36]	@ (80011f8 <mpu9250_write_reg+0x48>)
 80011d2:	f003 fef9 	bl	8004fc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80011d6:	1db9      	adds	r1, r7, #6
 80011d8:	2364      	movs	r3, #100	@ 0x64
 80011da:	2201      	movs	r2, #1
 80011dc:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <mpu9250_write_reg+0x48>)
 80011de:	f003 fef3 	bl	8004fc8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2120      	movs	r1, #32
 80011e6:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <mpu9250_write_reg+0x44>)
 80011e8:	f000 ff64 	bl	80020b4 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58020000 	.word	0x58020000
 80011f8:	240001f4 	.word	0x240001f4

080011fc <mpu9250_read_reg>:
void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	4613      	mov	r3, r2
 800120a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001212:	b2db      	uxtb	r3, r3
 8001214:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	480f      	ldr	r0, [pc, #60]	@ (8001258 <mpu9250_read_reg+0x5c>)
 800121c:	f000 ff4a 	bl	80020b4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001220:	f107 010e 	add.w	r1, r7, #14
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	2201      	movs	r2, #1
 8001228:	480c      	ldr	r0, [pc, #48]	@ (800125c <mpu9250_read_reg+0x60>)
 800122a:	f003 fecd 	bl	8004fc8 <HAL_SPI_Transmit>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	b29a      	uxth	r2, r3
 8001236:	2364      	movs	r3, #100	@ 0x64
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	4808      	ldr	r0, [pc, #32]	@ (800125c <mpu9250_read_reg+0x60>)
 800123c:	f004 f8b2 	bl	80053a4 <HAL_SPI_Receive>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2120      	movs	r1, #32
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <mpu9250_read_reg+0x5c>)
 800124a:	f000 ff33 	bl	80020b4 <HAL_GPIO_WritePin>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	58020000 	.word	0x58020000
 800125c:	240001f4 	.word	0x240001f4

08001260 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d102      	bne.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
	}
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2400027c 	.word	0x2400027c
 8001288:	2400035c 	.word	0x2400035c

0800128c <_write>:
int _write(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e009      	b.n	80012b2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	60ba      	str	r2, [r7, #8]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fbde 	bl	8000a68 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbf1      	blt.n	800129e <_write+0x12>
	}
	return len;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012d6:	f000 fcc5 	bl	8001c64 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012da:	2301      	movs	r3, #1
 80012dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012de:	2300      	movs	r3, #0
 80012e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012e6:	231f      	movs	r3, #31
 80012e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012ea:	2387      	movs	r3, #135	@ 0x87
 80012ec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012f2:	2300      	movs	r3, #0
 80012f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001306:	463b      	mov	r3, r7
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fce3 	bl	8001cd4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800130e:	2004      	movs	r0, #4
 8001310:	f000 fcc0 	bl	8001c94 <HAL_MPU_Enable>

}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_MspInit+0x30>)
 8001330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_MspInit+0x30>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_MspInit+0x30>)
 8001340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	58024400 	.word	0x58024400

0800135c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0bc      	sub	sp, #240	@ 0xf0
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	22c0      	movs	r2, #192	@ 0xc0
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f007 f8e0 	bl	8008542 <memset>
  if(hspi->Instance==SPI1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a38      	ldr	r2, [pc, #224]	@ (8001468 <HAL_SPI_MspInit+0x10c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d168      	bne.n	800145e <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800138c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001398:	2300      	movs	r3, #0
 800139a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fec1 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80013ac:	f7ff ffb6 	bl	800131c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b0:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013b6:	4a2d      	ldr	r2, [pc, #180]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d4:	4a25      	ldr	r2, [pc, #148]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f2:	4a1e      	ldr	r2, [pc, #120]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <HAL_SPI_MspInit+0x110>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001422:	2305      	movs	r3, #5
 8001424:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800142c:	4619      	mov	r1, r3
 800142e:	4810      	ldr	r0, [pc, #64]	@ (8001470 <HAL_SPI_MspInit+0x114>)
 8001430:	f000 fc90 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001434:	2318      	movs	r3, #24
 8001436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144c:	2305      	movs	r3, #5
 800144e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001456:	4619      	mov	r1, r3
 8001458:	4806      	ldr	r0, [pc, #24]	@ (8001474 <HAL_SPI_MspInit+0x118>)
 800145a:	f000 fc7b 	bl	8001d54 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800145e:	bf00      	nop
 8001460:	37f0      	adds	r7, #240	@ 0xf0
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40013000 	.word	0x40013000
 800146c:	58024400 	.word	0x58024400
 8001470:	58020000 	.word	0x58020000
 8001474:	58020400 	.word	0x58020400

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001488:	d116      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 800148c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001490:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 800149c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	201c      	movs	r0, #28
 80014ae:	f000 fba4 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b2:	201c      	movs	r0, #28
 80014b4:	f000 fbbb 	bl	8001c2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58024400 	.word	0x58024400

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0ba      	sub	sp, #232	@ 0xe8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	22c0      	movs	r2, #192	@ 0xc0
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f007 f82c 	bl	8008542 <memset>
  if(huart->Instance==USART2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a26      	ldr	r2, [pc, #152]	@ (8001588 <HAL_UART_MspInit+0xc4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d145      	bne.n	8001580 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f4:	f04f 0202 	mov.w	r2, #2
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fe0c 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001516:	f7ff ff01 	bl	800131c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151a:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <HAL_UART_MspInit+0xc8>)
 800151c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001520:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <HAL_UART_MspInit+0xc8>)
 8001522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001526:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_UART_MspInit+0xc8>)
 800152c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_UART_MspInit+0xc8>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	4a13      	ldr	r2, [pc, #76]	@ (800158c <HAL_UART_MspInit+0xc8>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <HAL_UART_MspInit+0xc8>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001556:	230c      	movs	r3, #12
 8001558:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156e:	2307      	movs	r3, #7
 8001570:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <HAL_UART_MspInit+0xcc>)
 800157c:	f000 fbea 	bl	8001d54 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001580:	bf00      	nop
 8001582:	37e8      	adds	r7, #232	@ 0xe8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40004400 	.word	0x40004400
 800158c:	58024400 	.word	0x58024400
 8001590:	58020000 	.word	0x58020000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <NMI_Handler+0x4>

0800159c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <MemManage_Handler+0x4>

080015ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <UsageFault_Handler+0x4>

080015bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 f9db 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <TIM2_IRQHandler+0x10>)
 80015fa:	f004 fa85 	bl	8005b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2400027c 	.word	0x2400027c

08001608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_kill>:

int _kill(int pid, int sig)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001622:	f006 ffe1 	bl	80085e8 <__errno>
 8001626:	4603      	mov	r3, r0
 8001628:	2216      	movs	r2, #22
 800162a:	601a      	str	r2, [r3, #0]
  return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_exit>:

void _exit (int status)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffe7 	bl	8001618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800164a:	bf00      	nop
 800164c:	e7fd      	b.n	800164a <_exit+0x12>

0800164e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e00a      	b.n	8001676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001660:	f3af 8000 	nop.w
 8001664:	4601      	mov	r1, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	b2ca      	uxtb	r2, r1
 800166e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbf0      	blt.n	8001660 <_read+0x12>
  }

  return len;
 800167e:	687b      	ldr	r3, [r7, #4]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016b0:	605a      	str	r2, [r3, #4]
  return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_isatty>:

int _isatty(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f006 ff62 	bl	80085e8 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	24080000 	.word	0x24080000
 8001750:	00000400 	.word	0x00000400
 8001754:	2400038c 	.word	0x2400038c
 8001758:	240004e0 	.word	0x240004e0

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001760:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <SystemInit+0xe4>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001766:	4a36      	ldr	r2, [pc, #216]	@ (8001840 <SystemInit+0xe4>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001770:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <SystemInit+0xe8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	2b06      	cmp	r3, #6
 800177a:	d807      	bhi.n	800178c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800177c:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <SystemInit+0xe8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 030f 	bic.w	r3, r3, #15
 8001784:	4a2f      	ldr	r2, [pc, #188]	@ (8001844 <SystemInit+0xe8>)
 8001786:	f043 0307 	orr.w	r3, r3, #7
 800178a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800178c:	4b2e      	ldr	r3, [pc, #184]	@ (8001848 <SystemInit+0xec>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2d      	ldr	r2, [pc, #180]	@ (8001848 <SystemInit+0xec>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001798:	4b2b      	ldr	r3, [pc, #172]	@ (8001848 <SystemInit+0xec>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800179e:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <SystemInit+0xec>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4929      	ldr	r1, [pc, #164]	@ (8001848 <SystemInit+0xec>)
 80017a4:	4b29      	ldr	r3, [pc, #164]	@ (800184c <SystemInit+0xf0>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017aa:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <SystemInit+0xe8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017b6:	4b23      	ldr	r3, [pc, #140]	@ (8001844 <SystemInit+0xe8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 030f 	bic.w	r3, r3, #15
 80017be:	4a21      	ldr	r2, [pc, #132]	@ (8001844 <SystemInit+0xe8>)
 80017c0:	f043 0307 	orr.w	r3, r3, #7
 80017c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <SystemInit+0xec>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <SystemInit+0xec>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <SystemInit+0xec>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <SystemInit+0xec>)
 80017da:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <SystemInit+0xf4>)
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017de:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <SystemInit+0xec>)
 80017e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <SystemInit+0xf8>)
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <SystemInit+0xec>)
 80017e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001858 <SystemInit+0xfc>)
 80017e8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ea:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <SystemInit+0xec>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017f0:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <SystemInit+0xec>)
 80017f2:	4a19      	ldr	r2, [pc, #100]	@ (8001858 <SystemInit+0xfc>)
 80017f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <SystemInit+0xec>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <SystemInit+0xec>)
 80017fe:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <SystemInit+0xfc>)
 8001800:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <SystemInit+0xec>)
 8001804:	2200      	movs	r2, #0
 8001806:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <SystemInit+0xec>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0e      	ldr	r2, [pc, #56]	@ (8001848 <SystemInit+0xec>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001812:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <SystemInit+0xec>)
 8001816:	2200      	movs	r2, #0
 8001818:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <SystemInit+0x100>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <SystemInit+0x104>)
 8001820:	4013      	ands	r3, r2
 8001822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001826:	d202      	bcs.n	800182e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <SystemInit+0x108>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <SystemInit+0x10c>)
 8001830:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001834:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	52002000 	.word	0x52002000
 8001848:	58024400 	.word	0x58024400
 800184c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001850:	02020200 	.word	0x02020200
 8001854:	01ff0000 	.word	0x01ff0000
 8001858:	01010280 	.word	0x01010280
 800185c:	5c001000 	.word	0x5c001000
 8001860:	ffff0000 	.word	0xffff0000
 8001864:	51008108 	.word	0x51008108
 8001868:	52004000 	.word	0x52004000

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001870:	f7ff ff74 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001876:	490d      	ldr	r1, [pc, #52]	@ (80018ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800188c:	4c0a      	ldr	r4, [pc, #40]	@ (80018b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189a:	f006 feab 	bl	80085f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7ff f90b 	bl	8000ab8 <main>
  bx  lr
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018ac:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80018b0:	0800c298 	.word	0x0800c298
  ldr r2, =_sbss
 80018b4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80018b8:	240004e0 	.word	0x240004e0

080018bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC3_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c6:	2003      	movs	r0, #3
 80018c8:	f000 f98c 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018cc:	f001 fa56 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_Init+0x68>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	4913      	ldr	r1, [pc, #76]	@ (800192c <HAL_Init+0x6c>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_Init+0x68>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <HAL_Init+0x6c>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001900:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <HAL_Init+0x70>)
 8001902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001904:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_Init+0x74>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f814 	bl	8001938 <HAL_InitTick>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e002      	b.n	8001920 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800191a:	f7ff fd05 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	58024400 	.word	0x58024400
 800192c:	0800bde4 	.word	0x0800bde4
 8001930:	24000004 	.word	0x24000004
 8001934:	24000000 	.word	0x24000000

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001940:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_InitTick+0x60>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e021      	b.n	8001990 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <HAL_InitTick+0x64>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_InitTick+0x60>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f971 	bl	8001c4a <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 f93b 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	@ (80019a0 <HAL_InitTick+0x68>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2400000c 	.word	0x2400000c
 800199c:	24000000 	.word	0x24000000
 80019a0:	24000008 	.word	0x24000008

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2400000c 	.word	0x2400000c
 80019c8:	24000390 	.word	0x24000390

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	24000390 	.word	0x24000390

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2400000c 	.word	0x2400000c

08001a2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_GetREVID+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0c1b      	lsrs	r3, r3, #16
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	5c001000 	.word	0x5c001000

08001a44 <__NVIC_SetPriorityGrouping>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x40>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x40>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00
 8001a88:	05fa0000 	.word	0x05fa0000

08001a8c <__NVIC_GetPriorityGrouping>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4907      	ldr	r1, [pc, #28]	@ (8001ae0 <__NVIC_EnableIRQ+0x38>)
 8001ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <__NVIC_SetPriority>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff29 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff40 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff90 	bl	8001b38 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5f 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff33 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffa4 	bl	8001ba0 <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c68:	f3bf 8f5f 	dmb	sy
}
 8001c6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <HAL_MPU_Disable+0x28>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_MPU_Disable+0x28>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c78:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c7a:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_MPU_Disable+0x2c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00
 8001c90:	e000ed90 	.word	0xe000ed90

08001c94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_MPU_Enable+0x38>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_MPU_Enable+0x3c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <HAL_MPU_Enable+0x3c>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb2:	f3bf 8f4f 	dsb	sy
}
 8001cb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb8:	f3bf 8f6f 	isb	sy
}
 8001cbc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed90 	.word	0xe000ed90
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	785a      	ldrb	r2, [r3, #1]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cf0:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7b1b      	ldrb	r3, [r3, #12]
 8001cfc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7adb      	ldrb	r3, [r3, #11]
 8001d02:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7a9b      	ldrb	r3, [r3, #10]
 8001d0a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7b5b      	ldrb	r3, [r3, #13]
 8001d12:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7b9b      	ldrb	r3, [r3, #14]
 8001d1a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7bdb      	ldrb	r3, [r3, #15]
 8001d22:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7a5b      	ldrb	r3, [r3, #9]
 8001d2a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7a1b      	ldrb	r3, [r3, #8]
 8001d32:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d34:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d3e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d40:	6113      	str	r3, [r2, #16]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed90 	.word	0xe000ed90

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d62:	4b89      	ldr	r3, [pc, #548]	@ (8001f88 <HAL_GPIO_Init+0x234>)
 8001d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d66:	e194      	b.n	8002092 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8186 	beq.w	800208c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d005      	beq.n	8001d98 <HAL_GPIO_Init+0x44>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d130      	bne.n	8001dfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	f003 0201 	and.w	r2, r3, #1
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d017      	beq.n	8001e36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d123      	bne.n	8001e8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80e0 	beq.w	800208c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <HAL_GPIO_Init+0x238>)
 8001ece:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f8c <HAL_GPIO_Init+0x238>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <HAL_GPIO_Init+0x238>)
 8001ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eea:	4a29      	ldr	r2, [pc, #164]	@ (8001f90 <HAL_GPIO_Init+0x23c>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <HAL_GPIO_Init+0x240>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d052      	beq.n	8001fbc <HAL_GPIO_Init+0x268>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_GPIO_Init+0x244>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d031      	beq.n	8001f82 <HAL_GPIO_Init+0x22e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <HAL_GPIO_Init+0x248>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x22a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa0 <HAL_GPIO_Init+0x24c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x226>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <HAL_GPIO_Init+0x250>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x222>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa8 <HAL_GPIO_Init+0x254>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x21e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1a      	ldr	r2, [pc, #104]	@ (8001fac <HAL_GPIO_Init+0x258>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x21a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_GPIO_Init+0x25c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x216>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a18      	ldr	r2, [pc, #96]	@ (8001fb4 <HAL_GPIO_Init+0x260>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x212>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <HAL_GPIO_Init+0x264>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x20e>
 8001f5e:	2309      	movs	r3, #9
 8001f60:	e02d      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f62:	230a      	movs	r3, #10
 8001f64:	e02b      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f66:	2308      	movs	r3, #8
 8001f68:	e029      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e027      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e025      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e023      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e021      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e01f      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e01d      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e01b      	b.n	8001fbe <HAL_GPIO_Init+0x26a>
 8001f86:	bf00      	nop
 8001f88:	58000080 	.word	0x58000080
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58000400 	.word	0x58000400
 8001f94:	58020000 	.word	0x58020000
 8001f98:	58020400 	.word	0x58020400
 8001f9c:	58020800 	.word	0x58020800
 8001fa0:	58020c00 	.word	0x58020c00
 8001fa4:	58021000 	.word	0x58021000
 8001fa8:	58021400 	.word	0x58021400
 8001fac:	58021800 	.word	0x58021800
 8001fb0:	58021c00 	.word	0x58021c00
 8001fb4:	58022000 	.word	0x58022000
 8001fb8:	58022400 	.word	0x58022400
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f002 0203 	and.w	r2, r2, #3
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fce:	4938      	ldr	r1, [pc, #224]	@ (80020b0 <HAL_GPIO_Init+0x35c>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002002:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002030:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f ae63 	bne.w	8001d68 <HAL_GPIO_Init+0x14>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	3724      	adds	r7, #36	@ 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	58000400 	.word	0x58000400

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020d0:	e003      	b.n	80020da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	041a      	lsls	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <HAL_PWREx_ConfigSupply+0x70>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00a      	beq.n	8002112 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020fc:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <HAL_PWREx_ConfigSupply+0x70>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e01f      	b.n	800214e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e01d      	b.n	800214e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002112:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_PWREx_ConfigSupply+0x70>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	490f      	ldr	r1, [pc, #60]	@ (8002158 <HAL_PWREx_ConfigSupply+0x70>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4313      	orrs	r3, r2
 8002120:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002122:	f7ff fc53 	bl	80019cc <HAL_GetTick>
 8002126:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002128:	e009      	b.n	800213e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800212a:	f7ff fc4f 	bl	80019cc <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002138:	d901      	bls.n	800213e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e007      	b.n	800214e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_PWREx_ConfigSupply+0x70>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800214a:	d1ee      	bne.n	800212a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	58024800 	.word	0x58024800

0800215c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	@ 0x30
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	f000 bc48 	b.w	8002a00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8088 	beq.w	800228e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217e:	4b99      	ldr	r3, [pc, #612]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002188:	4b96      	ldr	r3, [pc, #600]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002190:	2b10      	cmp	r3, #16
 8002192:	d007      	beq.n	80021a4 <HAL_RCC_OscConfig+0x48>
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	2b18      	cmp	r3, #24
 8002198:	d111      	bne.n	80021be <HAL_RCC_OscConfig+0x62>
 800219a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b8f      	ldr	r3, [pc, #572]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d06d      	beq.n	800228c <HAL_RCC_OscConfig+0x130>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d169      	bne.n	800228c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f000 bc21 	b.w	8002a00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x7a>
 80021c8:	4b86      	ldr	r3, [pc, #536]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a85      	ldr	r2, [pc, #532]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e02e      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x9c>
 80021de:	4b81      	ldr	r3, [pc, #516]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a80      	ldr	r2, [pc, #512]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b7e      	ldr	r3, [pc, #504]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7d      	ldr	r2, [pc, #500]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80021f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0xc0>
 8002202:	4b78      	ldr	r3, [pc, #480]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a77      	ldr	r2, [pc, #476]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b75      	ldr	r3, [pc, #468]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a74      	ldr	r2, [pc, #464]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 800221c:	4b71      	ldr	r3, [pc, #452]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a70      	ldr	r2, [pc, #448]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b6e      	ldr	r3, [pc, #440]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6d      	ldr	r2, [pc, #436]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff fbc6 	bl	80019cc <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff fbc2 	bl	80019cc <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	@ 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e3d4      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002256:	4b63      	ldr	r3, [pc, #396]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xe8>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff fbb2 	bl	80019cc <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff fbae 	bl	80019cc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	@ 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e3c0      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800227e:	4b59      	ldr	r3, [pc, #356]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x110>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80ca 	beq.w	8002430 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229c:	4b51      	ldr	r3, [pc, #324]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a6:	4b4f      	ldr	r3, [pc, #316]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_RCC_OscConfig+0x166>
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2b18      	cmp	r3, #24
 80022b6:	d156      	bne.n	8002366 <HAL_RCC_OscConfig+0x20a>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d151      	bne.n	8002366 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c2:	4b48      	ldr	r3, [pc, #288]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x17e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e392      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022da:	4b42      	ldr	r3, [pc, #264]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 0219 	bic.w	r2, r3, #25
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	493f      	ldr	r1, [pc, #252]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff fb6e 	bl	80019cc <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f4:	f7ff fb6a 	bl	80019cc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e37c      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002306:	4b37      	ldr	r3, [pc, #220]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	f7ff fb8b 	bl	8001a2c <HAL_GetREVID>
 8002316:	4603      	mov	r3, r0
 8002318:	f241 0203 	movw	r2, #4099	@ 0x1003
 800231c:	4293      	cmp	r3, r2
 800231e:	d817      	bhi.n	8002350 <HAL_RCC_OscConfig+0x1f4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b40      	cmp	r3, #64	@ 0x40
 8002326:	d108      	bne.n	800233a <HAL_RCC_OscConfig+0x1de>
 8002328:	4b2e      	ldr	r3, [pc, #184]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002330:	4a2c      	ldr	r2, [pc, #176]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002336:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	e07a      	b.n	8002430 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	031b      	lsls	r3, r3, #12
 8002348:	4926      	ldr	r1, [pc, #152]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800234e:	e06f      	b.n	8002430 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b24      	ldr	r3, [pc, #144]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	4921      	ldr	r1, [pc, #132]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002364:	e064      	b.n	8002430 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d047      	beq.n	80023fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800236e:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0219 	bic.w	r2, r3, #25
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	491a      	ldr	r1, [pc, #104]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7ff fb24 	bl	80019cc <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7ff fb20 	bl	80019cc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e332      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	f7ff fb41 	bl	8001a2c <HAL_GetREVID>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d819      	bhi.n	80023e8 <HAL_RCC_OscConfig+0x28c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b40      	cmp	r3, #64	@ 0x40
 80023ba:	d108      	bne.n	80023ce <HAL_RCC_OscConfig+0x272>
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80023c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ca:	6053      	str	r3, [r2, #4]
 80023cc:	e030      	b.n	8002430 <HAL_RCC_OscConfig+0x2d4>
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	031b      	lsls	r3, r3, #12
 80023dc:	4901      	ldr	r1, [pc, #4]	@ (80023e4 <HAL_RCC_OscConfig+0x288>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
 80023e2:	e025      	b.n	8002430 <HAL_RCC_OscConfig+0x2d4>
 80023e4:	58024400 	.word	0x58024400
 80023e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	4997      	ldr	r1, [pc, #604]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	e018      	b.n	8002430 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fe:	4b95      	ldr	r3, [pc, #596]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a94      	ldr	r2, [pc, #592]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7ff fadf 	bl	80019cc <HAL_GetTick>
 800240e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002412:	f7ff fadb 	bl	80019cc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e2ed      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002424:	4b8b      	ldr	r3, [pc, #556]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a9 	beq.w	8002590 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002446:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002448:	4b82      	ldr	r3, [pc, #520]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d007      	beq.n	8002464 <HAL_RCC_OscConfig+0x308>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b18      	cmp	r3, #24
 8002458:	d13a      	bne.n	80024d0 <HAL_RCC_OscConfig+0x374>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d135      	bne.n	80024d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002464:	4b7b      	ldr	r3, [pc, #492]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_OscConfig+0x320>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b80      	cmp	r3, #128	@ 0x80
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e2c1      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800247c:	f7ff fad6 	bl	8001a2c <HAL_GetREVID>
 8002480:	4603      	mov	r3, r0
 8002482:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002486:	4293      	cmp	r3, r2
 8002488:	d817      	bhi.n	80024ba <HAL_RCC_OscConfig+0x35e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	2b20      	cmp	r3, #32
 8002490:	d108      	bne.n	80024a4 <HAL_RCC_OscConfig+0x348>
 8002492:	4b70      	ldr	r3, [pc, #448]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800249a:	4a6e      	ldr	r2, [pc, #440]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800249c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024a2:	e075      	b.n	8002590 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	069b      	lsls	r3, r3, #26
 80024b2:	4968      	ldr	r1, [pc, #416]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024b8:	e06a      	b.n	8002590 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024ba:	4b66      	ldr	r3, [pc, #408]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	061b      	lsls	r3, r3, #24
 80024c8:	4962      	ldr	r1, [pc, #392]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024ce:	e05f      	b.n	8002590 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d042      	beq.n	800255e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80024de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7ff fa72 	bl	80019cc <HAL_GetTick>
 80024e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024ec:	f7ff fa6e 	bl	80019cc <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e280      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024fe:	4b55      	ldr	r3, [pc, #340]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800250a:	f7ff fa8f 	bl	8001a2c <HAL_GetREVID>
 800250e:	4603      	mov	r3, r0
 8002510:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002514:	4293      	cmp	r3, r2
 8002516:	d817      	bhi.n	8002548 <HAL_RCC_OscConfig+0x3ec>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2b20      	cmp	r3, #32
 800251e:	d108      	bne.n	8002532 <HAL_RCC_OscConfig+0x3d6>
 8002520:	4b4c      	ldr	r3, [pc, #304]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002528:	4a4a      	ldr	r2, [pc, #296]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800252a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800252e:	6053      	str	r3, [r2, #4]
 8002530:	e02e      	b.n	8002590 <HAL_RCC_OscConfig+0x434>
 8002532:	4b48      	ldr	r3, [pc, #288]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	069b      	lsls	r3, r3, #26
 8002540:	4944      	ldr	r1, [pc, #272]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
 8002546:	e023      	b.n	8002590 <HAL_RCC_OscConfig+0x434>
 8002548:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	493f      	ldr	r1, [pc, #252]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e018      	b.n	8002590 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800255e:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a3c      	ldr	r2, [pc, #240]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7ff fa2f 	bl	80019cc <HAL_GetTick>
 800256e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002572:	f7ff fa2b 	bl	80019cc <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e23d      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002584:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d036      	beq.n	800260a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d019      	beq.n	80025d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80025a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7ff fa0c 	bl	80019cc <HAL_GetTick>
 80025b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff fa08 	bl	80019cc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e21a      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x45c>
 80025d6:	e018      	b.n	800260a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff f9f2 	bl	80019cc <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff f9ee 	bl	80019cc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e200      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d039      	beq.n	800268a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01c      	beq.n	8002658 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800261e:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a0c      	ldr	r2, [pc, #48]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002624:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002628:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800262a:	f7ff f9cf 	bl	80019cc <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002632:	f7ff f9cb 	bl	80019cc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1dd      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x4d6>
 8002650:	e01b      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
 8002652:	bf00      	nop
 8002654:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002658:	4b9b      	ldr	r3, [pc, #620]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a9a      	ldr	r2, [pc, #616]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800265e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002662:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002664:	f7ff f9b2 	bl	80019cc <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266c:	f7ff f9ae 	bl	80019cc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1c0      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800267e:	4b92      	ldr	r3, [pc, #584]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8081 	beq.w	800279a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002698:	4b8c      	ldr	r3, [pc, #560]	@ (80028cc <HAL_RCC_OscConfig+0x770>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a8b      	ldr	r2, [pc, #556]	@ (80028cc <HAL_RCC_OscConfig+0x770>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a4:	f7ff f992 	bl	80019cc <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7ff f98e 	bl	80019cc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1a0      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026be:	4b83      	ldr	r3, [pc, #524]	@ (80028cc <HAL_RCC_OscConfig+0x770>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x584>
 80026d2:	4b7d      	ldr	r3, [pc, #500]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	4a7c      	ldr	r2, [pc, #496]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026de:	e02d      	b.n	800273c <HAL_RCC_OscConfig+0x5e0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x5a6>
 80026e8:	4b77      	ldr	r3, [pc, #476]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	4a76      	ldr	r2, [pc, #472]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f4:	4b74      	ldr	r3, [pc, #464]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	4a73      	ldr	r2, [pc, #460]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80026fa:	f023 0304 	bic.w	r3, r3, #4
 80026fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002700:	e01c      	b.n	800273c <HAL_RCC_OscConfig+0x5e0>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c8>
 800270a:	4b6f      	ldr	r3, [pc, #444]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270e:	4a6e      	ldr	r2, [pc, #440]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	@ 0x70
 8002716:	4b6c      	ldr	r3, [pc, #432]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271a:	4a6b      	ldr	r2, [pc, #428]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	@ 0x70
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x5e0>
 8002724:	4b68      	ldr	r3, [pc, #416]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	4a67      	ldr	r2, [pc, #412]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002730:	4b65      	ldr	r3, [pc, #404]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	4a64      	ldr	r2, [pc, #400]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff f942 	bl	80019cc <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7ff f93e 	bl	80019cc <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e14e      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002762:	4b59      	ldr	r3, [pc, #356]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ee      	beq.n	800274c <HAL_RCC_OscConfig+0x5f0>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7ff f92c 	bl	80019cc <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7ff f928 	bl	80019cc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e138      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800278e:	4b4e      	ldr	r3, [pc, #312]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ee      	bne.n	8002778 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 812d 	beq.w	80029fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027a4:	4b48      	ldr	r3, [pc, #288]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027ac:	2b18      	cmp	r3, #24
 80027ae:	f000 80bd 	beq.w	800292c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	f040 809e 	bne.w	80028f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b42      	ldr	r3, [pc, #264]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a41      	ldr	r2, [pc, #260]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80027c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7ff f900 	bl	80019cc <HAL_GetTick>
 80027cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7ff f8fc 	bl	80019cc <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e10e      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e2:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ee:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80027f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027f2:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_OscConfig+0x774>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	430a      	orrs	r2, r1
 8002802:	4931      	ldr	r1, [pc, #196]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	628b      	str	r3, [r1, #40]	@ 0x28
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	3b01      	subs	r3, #1
 800280e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002816:	3b01      	subs	r3, #1
 8002818:	025b      	lsls	r3, r3, #9
 800281a:	b29b      	uxth	r3, r3
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002822:	3b01      	subs	r3, #1
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002830:	3b01      	subs	r3, #1
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002838:	4923      	ldr	r1, [pc, #140]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800283e:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002842:	4a21      	ldr	r2, [pc, #132]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800284a:	4b1f      	ldr	r3, [pc, #124]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800284c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800284e:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <HAL_RCC_OscConfig+0x778>)
 8002850:	4013      	ands	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002856:	00d2      	lsls	r2, r2, #3
 8002858:	491b      	ldr	r1, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800285a:	4313      	orrs	r3, r2
 800285c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800285e:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002862:	f023 020c 	bic.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	4917      	ldr	r1, [pc, #92]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800286c:	4313      	orrs	r3, r2
 800286e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002870:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	f023 0202 	bic.w	r2, r3, #2
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287c:	4912      	ldr	r1, [pc, #72]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002882:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	4a10      	ldr	r2, [pc, #64]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002892:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 8002894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289e:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028a6:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80028a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028aa:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b2:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a04      	ldr	r2, [pc, #16]	@ (80028c8 <HAL_RCC_OscConfig+0x76c>)
 80028b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7ff f885 	bl	80019cc <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028c4:	e011      	b.n	80028ea <HAL_RCC_OscConfig+0x78e>
 80028c6:	bf00      	nop
 80028c8:	58024400 	.word	0x58024400
 80028cc:	58024800 	.word	0x58024800
 80028d0:	fffffc0c 	.word	0xfffffc0c
 80028d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7ff f878 	bl	80019cc <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e08a      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x77c>
 80028f6:	e082      	b.n	80029fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f8:	4b43      	ldr	r3, [pc, #268]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a42      	ldr	r2, [pc, #264]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80028fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7ff f862 	bl	80019cc <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff f85e 	bl	80019cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e070      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800291e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x7b0>
 800292a:	e068      	b.n	80029fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002932:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	2b01      	cmp	r3, #1
 800293e:	d031      	beq.n	80029a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d12a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d122      	bne.n	80029a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d11a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	0a5b      	lsrs	r3, r3, #9
 8002972:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d111      	bne.n	80029a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	0c1b      	lsrs	r3, r3, #16
 8002984:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	0e1b      	lsrs	r3, r3, #24
 8002996:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e02b      	b.n	8002a00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029a8:	4b17      	ldr	r3, [pc, #92]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80029aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d01f      	beq.n	80029fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029be:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	4a11      	ldr	r2, [pc, #68]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029ca:	f7fe ffff 	bl	80019cc <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029d0:	bf00      	nop
 80029d2:	f7fe fffb 	bl	80019cc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	4293      	cmp	r3, r2
 80029dc:	d0f9      	beq.n	80029d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029de:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80029e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029e2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <HAL_RCC_OscConfig+0x8b0>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029ea:	00d2      	lsls	r2, r2, #3
 80029ec:	4906      	ldr	r1, [pc, #24]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029f2:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <HAL_RCC_OscConfig+0x8ac>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3730      	adds	r7, #48	@ 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	ffff0007 	.word	0xffff0007

08002a10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e19c      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b8a      	ldr	r3, [pc, #552]	@ (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d910      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b87      	ldr	r3, [pc, #540]	@ (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 020f 	bic.w	r2, r3, #15
 8002a3a:	4985      	ldr	r1, [pc, #532]	@ (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b83      	ldr	r3, [pc, #524]	@ (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e184      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	4b7b      	ldr	r3, [pc, #492]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d908      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a70:	4b78      	ldr	r3, [pc, #480]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4975      	ldr	r1, [pc, #468]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d010      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	4b70      	ldr	r3, [pc, #448]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	496a      	ldr	r1, [pc, #424]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d010      	beq.n	8002ade <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	4b64      	ldr	r3, [pc, #400]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d908      	bls.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002acc:	4b61      	ldr	r3, [pc, #388]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	495e      	ldr	r1, [pc, #376]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	4b59      	ldr	r3, [pc, #356]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d908      	bls.n	8002b0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002afa:	4b56      	ldr	r3, [pc, #344]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	4953      	ldr	r1, [pc, #332]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d908      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b4a      	ldr	r3, [pc, #296]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f023 020f 	bic.w	r2, r3, #15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4947      	ldr	r1, [pc, #284]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d055      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b46:	4b43      	ldr	r3, [pc, #268]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4940      	ldr	r1, [pc, #256]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b60:	4b3c      	ldr	r3, [pc, #240]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d121      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0f6      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b78:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d115      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0ea      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b90:	4b30      	ldr	r3, [pc, #192]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0de      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d6      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bb0:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f023 0207 	bic.w	r2, r3, #7
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4925      	ldr	r1, [pc, #148]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc2:	f7fe ff03 	bl	80019cc <HAL_GetTick>
 8002bc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bca:	f7fe feff 	bl	80019cc <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e0be      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d1eb      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d208      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f023 020f 	bic.w	r2, r3, #15
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	490e      	ldr	r1, [pc, #56]	@ (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d214      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 020f 	bic.w	r2, r3, #15
 8002c36:	4906      	ldr	r1, [pc, #24]	@ (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e086      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
 8002c50:	52002000 	.word	0x52002000
 8002c54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	4b3f      	ldr	r3, [pc, #252]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d208      	bcs.n	8002c86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c74:	4b3c      	ldr	r3, [pc, #240]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4939      	ldr	r1, [pc, #228]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	4b34      	ldr	r3, [pc, #208]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d208      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ca2:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	492e      	ldr	r1, [pc, #184]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	4b28      	ldr	r3, [pc, #160]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d208      	bcs.n	8002ce2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cd0:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4922      	ldr	r1, [pc, #136]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d208      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4917      	ldr	r1, [pc, #92]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d10:	f000 f834 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	4912      	ldr	r1, [pc, #72]	@ (8002d6c <HAL_RCC_ClockConfig+0x35c>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <HAL_RCC_ClockConfig+0x35c>)
 8002d38:	5cd3      	ldrb	r3, [r2, r3]
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
 8002d44:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <HAL_RCC_ClockConfig+0x360>)
 8002d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d48:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <HAL_RCC_ClockConfig+0x364>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <HAL_RCC_ClockConfig+0x368>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fdf0 	bl	8001938 <HAL_InitTick>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	0800bde4 	.word	0x0800bde4
 8002d70:	24000004 	.word	0x24000004
 8002d74:	24000000 	.word	0x24000000
 8002d78:	24000008 	.word	0x24000008

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	@ 0x24
 8002d80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d82:	4bb3      	ldr	r3, [pc, #716]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d8a:	2b18      	cmp	r3, #24
 8002d8c:	f200 8155 	bhi.w	800303a <HAL_RCC_GetSysClockFreq+0x2be>
 8002d90:	a201      	add	r2, pc, #4	@ (adr r2, 8002d98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dfd 	.word	0x08002dfd
 8002d9c:	0800303b 	.word	0x0800303b
 8002da0:	0800303b 	.word	0x0800303b
 8002da4:	0800303b 	.word	0x0800303b
 8002da8:	0800303b 	.word	0x0800303b
 8002dac:	0800303b 	.word	0x0800303b
 8002db0:	0800303b 	.word	0x0800303b
 8002db4:	0800303b 	.word	0x0800303b
 8002db8:	08002e23 	.word	0x08002e23
 8002dbc:	0800303b 	.word	0x0800303b
 8002dc0:	0800303b 	.word	0x0800303b
 8002dc4:	0800303b 	.word	0x0800303b
 8002dc8:	0800303b 	.word	0x0800303b
 8002dcc:	0800303b 	.word	0x0800303b
 8002dd0:	0800303b 	.word	0x0800303b
 8002dd4:	0800303b 	.word	0x0800303b
 8002dd8:	08002e29 	.word	0x08002e29
 8002ddc:	0800303b 	.word	0x0800303b
 8002de0:	0800303b 	.word	0x0800303b
 8002de4:	0800303b 	.word	0x0800303b
 8002de8:	0800303b 	.word	0x0800303b
 8002dec:	0800303b 	.word	0x0800303b
 8002df0:	0800303b 	.word	0x0800303b
 8002df4:	0800303b 	.word	0x0800303b
 8002df8:	08002e2f 	.word	0x08002e2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dfc:	4b94      	ldr	r3, [pc, #592]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e08:	4b91      	ldr	r3, [pc, #580]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	4a90      	ldr	r2, [pc, #576]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e1a:	e111      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e1e:	61bb      	str	r3, [r7, #24]
      break;
 8002e20:	e10e      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e22:	4b8d      	ldr	r3, [pc, #564]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e24:	61bb      	str	r3, [r7, #24]
      break;
 8002e26:	e10b      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e28:	4b8c      	ldr	r3, [pc, #560]	@ (800305c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e2a:	61bb      	str	r3, [r7, #24]
      break;
 8002e2c:	e108      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e2e:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e38:	4b85      	ldr	r3, [pc, #532]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e44:	4b82      	ldr	r3, [pc, #520]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e4e:	4b80      	ldr	r3, [pc, #512]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e52:	08db      	lsrs	r3, r3, #3
 8002e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80e1 	beq.w	8003034 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	f000 8083 	beq.w	8002f80 <HAL_RCC_GetSysClockFreq+0x204>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f200 80a1 	bhi.w	8002fc4 <HAL_RCC_GetSysClockFreq+0x248>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x114>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d056      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e8e:	e099      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e90:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d02d      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	4a6b      	ldr	r2, [pc, #428]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	ee07 3a90 	vmov	s15, r3
 8002eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec6:	4b62      	ldr	r3, [pc, #392]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002ef6:	e087      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003064 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0a:	4b51      	ldr	r3, [pc, #324]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f3a:	e065      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003068 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4e:	4b40      	ldr	r3, [pc, #256]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f7e:	e043      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800306c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b2f      	ldr	r3, [pc, #188]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fc2:	e021      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003068 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003006:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	0a5b      	lsrs	r3, r3, #9
 800300e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003012:	3301      	adds	r3, #1
 8003014:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003020:	edd7 6a07 	vldr	s13, [r7, #28]
 8003024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800302c:	ee17 3a90 	vmov	r3, s15
 8003030:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003032:	e005      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
      break;
 8003038:	e002      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800303c:	61bb      	str	r3, [r7, #24]
      break;
 800303e:	bf00      	nop
  }

  return sysclockfreq;
 8003040:	69bb      	ldr	r3, [r7, #24]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	@ 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	58024400 	.word	0x58024400
 8003054:	03d09000 	.word	0x03d09000
 8003058:	003d0900 	.word	0x003d0900
 800305c:	017d7840 	.word	0x017d7840
 8003060:	46000000 	.word	0x46000000
 8003064:	4c742400 	.word	0x4c742400
 8003068:	4a742400 	.word	0x4a742400
 800306c:	4bbebc20 	.word	0x4bbebc20

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003076:	f7ff fe81 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 800307a:	4602      	mov	r2, r0
 800307c:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	490f      	ldr	r1, [pc, #60]	@ (80030c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003088:	5ccb      	ldrb	r3, [r1, r3]
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003094:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	4a09      	ldr	r2, [pc, #36]	@ (80030c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	4a07      	ldr	r2, [pc, #28]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ae:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030b4:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58024400 	.word	0x58024400
 80030c4:	0800bde4 	.word	0x0800bde4
 80030c8:	24000004 	.word	0x24000004
 80030cc:	24000000 	.word	0x24000000

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80030d4:	f7ff ffcc 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4904      	ldr	r1, [pc, #16]	@ (80030f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	58024400 	.word	0x58024400
 80030f8:	0800bde4 	.word	0x0800bde4

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003100:	f7ff ffb6 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4904      	ldr	r1, [pc, #16]	@ (8003124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	58024400 	.word	0x58024400
 8003124:	0800bde4 	.word	0x0800bde4

08003128 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b0ca      	sub	sp, #296	@ 0x128
 800312e:	af00      	add	r7, sp, #0
 8003130:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800313a:	2300      	movs	r3, #0
 800313c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800314c:	2500      	movs	r5, #0
 800314e:	ea54 0305 	orrs.w	r3, r4, r5
 8003152:	d049      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800315a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800315e:	d02f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003160:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003164:	d828      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800316a:	d01a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800316c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003170:	d822      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800317a:	d007      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800317c:	e01c      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800317e:	4bb8      	ldr	r3, [pc, #736]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	4ab7      	ldr	r2, [pc, #732]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003188:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800318a:	e01a      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800318c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003190:	3308      	adds	r3, #8
 8003192:	2102      	movs	r1, #2
 8003194:	4618      	mov	r0, r3
 8003196:	f001 fc8f 	bl	8004ab8 <RCCEx_PLL2_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031a0:	e00f      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a6:	3328      	adds	r3, #40	@ 0x28
 80031a8:	2102      	movs	r1, #2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fd36 	bl	8004c1c <RCCEx_PLL3_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031b6:	e004      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031be:	e000      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80031c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031ca:	4ba5      	ldr	r3, [pc, #660]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80031d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031d8:	4aa1      	ldr	r2, [pc, #644]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031da:	430b      	orrs	r3, r1
 80031dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80031de:	e003      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80031f4:	f04f 0900 	mov.w	r9, #0
 80031f8:	ea58 0309 	orrs.w	r3, r8, r9
 80031fc:	d047      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	2b04      	cmp	r3, #4
 8003206:	d82a      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003208:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003225 	.word	0x08003225
 8003214:	08003233 	.word	0x08003233
 8003218:	08003249 	.word	0x08003249
 800321c:	08003267 	.word	0x08003267
 8003220:	08003267 	.word	0x08003267
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003224:	4b8e      	ldr	r3, [pc, #568]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	4a8d      	ldr	r2, [pc, #564]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800322a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800322e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003230:	e01a      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003236:	3308      	adds	r3, #8
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f001 fc3c 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003246:	e00f      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324c:	3328      	adds	r3, #40	@ 0x28
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f001 fce3 	bl	8004c1c <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800325c:	e004      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003270:	4b7b      	ldr	r3, [pc, #492]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003274:	f023 0107 	bic.w	r1, r3, #7
 8003278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327e:	4a78      	ldr	r2, [pc, #480]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003280:	430b      	orrs	r3, r1
 8003282:	6513      	str	r3, [r2, #80]	@ 0x50
 8003284:	e003      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800329a:	f04f 0b00 	mov.w	fp, #0
 800329e:	ea5a 030b 	orrs.w	r3, sl, fp
 80032a2:	d04c      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ae:	d030      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80032b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b4:	d829      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80032b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80032b8:	d02d      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80032bc:	d825      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80032be:	2b80      	cmp	r3, #128	@ 0x80
 80032c0:	d018      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80032c2:	2b80      	cmp	r3, #128	@ 0x80
 80032c4:	d821      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80032ca:	2b40      	cmp	r3, #64	@ 0x40
 80032cc:	d007      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80032ce:	e01c      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d0:	4b63      	ldr	r3, [pc, #396]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	4a62      	ldr	r2, [pc, #392]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032dc:	e01c      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e2:	3308      	adds	r3, #8
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 fbe6 	bl	8004ab8 <RCCEx_PLL2_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032f2:	e011      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f8:	3328      	adds	r3, #40	@ 0x28
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 fc8d 	bl	8004c1c <RCCEx_PLL3_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003308:	e006      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003310:	e002      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003320:	4b4f      	ldr	r3, [pc, #316]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003324:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	4a4c      	ldr	r2, [pc, #304]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003330:	430b      	orrs	r3, r1
 8003332:	6513      	str	r3, [r2, #80]	@ 0x50
 8003334:	e003      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800333a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800334a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800334e:	2300      	movs	r3, #0
 8003350:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003354:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003358:	460b      	mov	r3, r1
 800335a:	4313      	orrs	r3, r2
 800335c:	d053      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800335e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003362:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003366:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800336a:	d035      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800336c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003370:	d82e      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003372:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003376:	d031      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003378:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800337c:	d828      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800337e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003382:	d01a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003388:	d822      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800338e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003392:	d007      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003394:	e01c      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003396:	4b32      	ldr	r3, [pc, #200]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	4a31      	ldr	r2, [pc, #196]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033a2:	e01c      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a8:	3308      	adds	r3, #8
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 fb83 	bl	8004ab8 <RCCEx_PLL2_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033b8:	e011      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033be:	3328      	adds	r3, #40	@ 0x28
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fc2a 	bl	8004c1c <RCCEx_PLL3_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ce:	e006      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033d6:	e002      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80033d8:	bf00      	nop
 80033da:	e000      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80033dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80033e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80033ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80033fc:	e003      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003412:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800341c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003420:	460b      	mov	r3, r1
 8003422:	4313      	orrs	r3, r2
 8003424:	d056      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800342e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003432:	d038      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003434:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003438:	d831      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800343a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800343e:	d034      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003440:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003444:	d82b      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800344a:	d01d      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800344c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003450:	d825      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800345c:	e01f      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800345e:	bf00      	nop
 8003460:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4ba2      	ldr	r3, [pc, #648]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	4aa1      	ldr	r2, [pc, #644]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003470:	e01c      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003476:	3308      	adds	r3, #8
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fb1c 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003486:	e011      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	3328      	adds	r3, #40	@ 0x28
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fbc3 	bl	8004c1c <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349c:	e006      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034a4:	e002      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80034aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10b      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034b4:	4b8e      	ldr	r3, [pc, #568]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034c4:	4a8a      	ldr	r2, [pc, #552]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034c6:	430b      	orrs	r3, r1
 80034c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ca:	e003      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80034e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80034ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80034ee:	460b      	mov	r3, r1
 80034f0:	4313      	orrs	r3, r2
 80034f2:	d03a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fa:	2b30      	cmp	r3, #48	@ 0x30
 80034fc:	d01f      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80034fe:	2b30      	cmp	r3, #48	@ 0x30
 8003500:	d819      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003502:	2b20      	cmp	r3, #32
 8003504:	d00c      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003506:	2b20      	cmp	r3, #32
 8003508:	d815      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d019      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800350e:	2b10      	cmp	r3, #16
 8003510:	d111      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003512:	4b77      	ldr	r3, [pc, #476]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003516:	4a76      	ldr	r2, [pc, #472]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800351c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800351e:	e011      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003524:	3308      	adds	r3, #8
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f001 fac5 	bl	8004ab8 <RCCEx_PLL2_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003534:	e006      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800353c:	e002      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800354c:	4b68      	ldr	r3, [pc, #416]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003550:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	4a65      	ldr	r2, [pc, #404]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355c:	430b      	orrs	r3, r1
 800355e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003576:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003580:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003584:	460b      	mov	r3, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	d051      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003594:	d035      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800359a:	d82e      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800359c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035a0:	d031      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80035a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035a6:	d828      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ac:	d01a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80035ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b2:	d822      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80035b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035bc:	d007      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80035be:	e01c      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c0:	4b4b      	ldr	r3, [pc, #300]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	4a4a      	ldr	r2, [pc, #296]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035cc:	e01c      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	3308      	adds	r3, #8
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 fa6e 	bl	8004ab8 <RCCEx_PLL2_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035e2:	e011      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	3328      	adds	r3, #40	@ 0x28
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fb15 	bl	8004c1c <RCCEx_PLL3_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035f8:	e006      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003600:	e002      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003610:	4b37      	ldr	r3, [pc, #220]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003614:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	4a34      	ldr	r2, [pc, #208]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003620:	430b      	orrs	r3, r1
 8003622:	6513      	str	r3, [r2, #80]	@ 0x50
 8003624:	e003      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800363a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003644:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003648:	460b      	mov	r3, r1
 800364a:	4313      	orrs	r3, r2
 800364c:	d056      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003658:	d033      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800365a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800365e:	d82c      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003660:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003664:	d02f      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003666:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800366a:	d826      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800366c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003670:	d02b      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003672:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003676:	d820      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800367c:	d012      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800367e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003682:	d81a      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d022      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368c:	d115      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003692:	3308      	adds	r3, #8
 8003694:	2101      	movs	r1, #1
 8003696:	4618      	mov	r0, r3
 8003698:	f001 fa0e 	bl	8004ab8 <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036a2:	e015      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	3328      	adds	r3, #40	@ 0x28
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fab5 	bl	8004c1c <RCCEx_PLL3_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036b8:	e00a      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036c2:	bf00      	nop
 80036c4:	e004      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036c6:	bf00      	nop
 80036c8:	e002      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036d8:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036e6:	4a02      	ldr	r2, [pc, #8]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80036ec:	e006      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036ee:	bf00      	nop
 80036f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003712:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d055      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800371c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003728:	d033      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800372a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800372e:	d82c      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003734:	d02f      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373a:	d826      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800373c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003740:	d02b      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003746:	d820      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800374c:	d012      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800374e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003752:	d81a      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d022      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800375c:	d115      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	3308      	adds	r3, #8
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f9a6 	bl	8004ab8 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003772:	e015      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	3328      	adds	r3, #40	@ 0x28
 800377a:	2101      	movs	r1, #1
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fa4d 	bl	8004c1c <RCCEx_PLL3_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003788:	e00a      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003792:	bf00      	nop
 8003794:	e004      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800379e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037a8:	4ba3      	ldr	r3, [pc, #652]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037b8:	4a9f      	ldr	r2, [pc, #636]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ba:	430b      	orrs	r3, r1
 80037bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80037d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80037de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037e2:	460b      	mov	r3, r1
 80037e4:	4313      	orrs	r3, r2
 80037e6:	d037      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f2:	d00e      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80037f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f8:	d816      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80037fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003802:	d111      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003804:	4b8c      	ldr	r3, [pc, #560]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	4a8b      	ldr	r2, [pc, #556]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003810:	e00f      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	3308      	adds	r3, #8
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f001 f94c 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003826:	e004      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800383a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800383c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003848:	4a7b      	ldr	r2, [pc, #492]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384a:	430b      	orrs	r3, r1
 800384c:	6513      	str	r3, [r2, #80]	@ 0x50
 800384e:	e003      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800386e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003872:	460b      	mov	r3, r1
 8003874:	4313      	orrs	r3, r2
 8003876:	d039      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387e:	2b03      	cmp	r3, #3
 8003880:	d81c      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003882:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038c5 	.word	0x080038c5
 800388c:	08003899 	.word	0x08003899
 8003890:	080038a7 	.word	0x080038a7
 8003894:	080038c5 	.word	0x080038c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003898:	4b67      	ldr	r3, [pc, #412]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	4a66      	ldr	r2, [pc, #408]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038a4:	e00f      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038aa:	3308      	adds	r3, #8
 80038ac:	2102      	movs	r1, #2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f902 	bl	8004ab8 <RCCEx_PLL2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038ba:	e004      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80038c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d2:	f023 0103 	bic.w	r1, r3, #3
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038dc:	4a56      	ldr	r2, [pc, #344]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038de:	430b      	orrs	r3, r1
 80038e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80038f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003902:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	f000 809f 	beq.w	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800390e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a4a      	ldr	r2, [pc, #296]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800391a:	f7fe f857 	bl	80019cc <HAL_GetTick>
 800391e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003922:	e00b      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003924:	f7fe f852 	bl	80019cc <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b64      	cmp	r3, #100	@ 0x64
 8003932:	d903      	bls.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800393a:	e005      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800393c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ed      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394c:	2b00      	cmp	r3, #0
 800394e:	d179      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003950:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003952:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003958:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800395c:	4053      	eors	r3, r2
 800395e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003962:	2b00      	cmp	r3, #0
 8003964:	d015      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003966:	4b34      	ldr	r3, [pc, #208]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800396e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003972:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003976:	4a30      	ldr	r2, [pc, #192]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800397e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	4a2d      	ldr	r2, [pc, #180]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003988:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800398a:	4a2b      	ldr	r2, [pc, #172]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003990:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800399a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800399e:	d118      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fe f814 	bl	80019cc <HAL_GetTick>
 80039a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a8:	e00d      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fe f80f 	bl	80019cc <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d903      	bls.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80039c4:	e005      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0eb      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80039d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d129      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039ea:	d10e      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80039ec:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039fc:	091a      	lsrs	r2, r3, #4
 80039fe:	4b10      	ldr	r3, [pc, #64]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6113      	str	r3, [r2, #16]
 8003a08:	e005      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a14:	6113      	str	r3, [r2, #16]
 8003a16:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a26:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2c:	e00e      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003a36:	e009      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003a38:	58024400 	.word	0x58024400
 8003a3c:	58024800 	.word	0x58024800
 8003a40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f002 0301 	and.w	r3, r2, #1
 8003a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f000 8089 	beq.w	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a74:	2b28      	cmp	r3, #40	@ 0x28
 8003a76:	d86b      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003a78:	a201      	add	r2, pc, #4	@ (adr r2, 8003a80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003b59 	.word	0x08003b59
 8003a84:	08003b51 	.word	0x08003b51
 8003a88:	08003b51 	.word	0x08003b51
 8003a8c:	08003b51 	.word	0x08003b51
 8003a90:	08003b51 	.word	0x08003b51
 8003a94:	08003b51 	.word	0x08003b51
 8003a98:	08003b51 	.word	0x08003b51
 8003a9c:	08003b51 	.word	0x08003b51
 8003aa0:	08003b25 	.word	0x08003b25
 8003aa4:	08003b51 	.word	0x08003b51
 8003aa8:	08003b51 	.word	0x08003b51
 8003aac:	08003b51 	.word	0x08003b51
 8003ab0:	08003b51 	.word	0x08003b51
 8003ab4:	08003b51 	.word	0x08003b51
 8003ab8:	08003b51 	.word	0x08003b51
 8003abc:	08003b51 	.word	0x08003b51
 8003ac0:	08003b3b 	.word	0x08003b3b
 8003ac4:	08003b51 	.word	0x08003b51
 8003ac8:	08003b51 	.word	0x08003b51
 8003acc:	08003b51 	.word	0x08003b51
 8003ad0:	08003b51 	.word	0x08003b51
 8003ad4:	08003b51 	.word	0x08003b51
 8003ad8:	08003b51 	.word	0x08003b51
 8003adc:	08003b51 	.word	0x08003b51
 8003ae0:	08003b59 	.word	0x08003b59
 8003ae4:	08003b51 	.word	0x08003b51
 8003ae8:	08003b51 	.word	0x08003b51
 8003aec:	08003b51 	.word	0x08003b51
 8003af0:	08003b51 	.word	0x08003b51
 8003af4:	08003b51 	.word	0x08003b51
 8003af8:	08003b51 	.word	0x08003b51
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003b51 	.word	0x08003b51
 8003b08:	08003b51 	.word	0x08003b51
 8003b0c:	08003b51 	.word	0x08003b51
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b51 	.word	0x08003b51
 8003b18:	08003b51 	.word	0x08003b51
 8003b1c:	08003b51 	.word	0x08003b51
 8003b20:	08003b59 	.word	0x08003b59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b28:	3308      	adds	r3, #8
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 ffc3 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b38:	e00f      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	3328      	adds	r3, #40	@ 0x28
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 f86a 	bl	8004c1c <RCCEx_PLL3_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b4e:	e004      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b56:	e000      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b62:	4bbf      	ldr	r3, [pc, #764]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b70:	4abb      	ldr	r2, [pc, #748]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 0302 	and.w	r3, r2, #2
 8003b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d041      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d824      	bhi.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003baa:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bfd 	.word	0x08003bfd
 8003bb4:	08003bc9 	.word	0x08003bc9
 8003bb8:	08003bdf 	.word	0x08003bdf
 8003bbc:	08003bfd 	.word	0x08003bfd
 8003bc0:	08003bfd 	.word	0x08003bfd
 8003bc4:	08003bfd 	.word	0x08003bfd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	3308      	adds	r3, #8
 8003bce:	2101      	movs	r1, #1
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 ff71 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bdc:	e00f      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	3328      	adds	r3, #40	@ 0x28
 8003be4:	2101      	movs	r1, #1
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 f818 	bl	8004c1c <RCCEx_PLL3_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bf2:	e004      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfa:	e000      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c06:	4b96      	ldr	r3, [pc, #600]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0a:	f023 0107 	bic.w	r1, r3, #7
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c14:	4a92      	ldr	r2, [pc, #584]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c16:	430b      	orrs	r3, r1
 8003c18:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f002 0304 	and.w	r3, r2, #4
 8003c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d044      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d825      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003c50:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003ca5 	.word	0x08003ca5
 8003c5c:	08003c71 	.word	0x08003c71
 8003c60:	08003c87 	.word	0x08003c87
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003ca5 	.word	0x08003ca5
 8003c6c:	08003ca5 	.word	0x08003ca5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	3308      	adds	r3, #8
 8003c76:	2101      	movs	r1, #1
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 ff1d 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c84:	e00f      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8a:	3328      	adds	r3, #40	@ 0x28
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 ffc4 	bl	8004c1c <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c9a:	e004      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10b      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cae:	4b6c      	ldr	r3, [pc, #432]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	f023 0107 	bic.w	r1, r3, #7
 8003cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cbe:	4a68      	ldr	r2, [pc, #416]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f002 0320 	and.w	r3, r2, #32
 8003cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4313      	orrs	r3, r2
 8003cec:	d055      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cfa:	d033      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d00:	d82c      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d06:	d02f      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d826      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d12:	d02b      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003d14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d18:	d820      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d1e:	d012      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d24:	d81a      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d022      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d2e:	d115      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	3308      	adds	r3, #8
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 febd 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d44:	e015      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	3328      	adds	r3, #40	@ 0x28
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 ff64 	bl	8004c1c <RCCEx_PLL3_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d62:	e006      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d64:	bf00      	nop
 8003d66:	e004      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d68:	bf00      	nop
 8003d6a:	e002      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d6c:	bf00      	nop
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10b      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d7a:	4b39      	ldr	r3, [pc, #228]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8a:	4a35      	ldr	r2, [pc, #212]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d90:	e003      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003daa:	2300      	movs	r3, #0
 8003dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003db0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4313      	orrs	r3, r2
 8003db8:	d058      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003dc6:	d033      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003dc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003dcc:	d82c      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d02f      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd8:	d826      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003dda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dde:	d02b      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003de4:	d820      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dea:	d012      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003df0:	d81a      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d022      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfa:	d115      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	3308      	adds	r3, #8
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fe57 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e10:	e015      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	3328      	adds	r3, #40	@ 0x28
 8003e18:	2102      	movs	r1, #2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fefe 	bl	8004c1c <RCCEx_PLL3_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e26:	e00a      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e2e:	e006      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e30:	bf00      	nop
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e34:	bf00      	nop
 8003e36:	e002      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e38:	bf00      	nop
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10e      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e56:	4a02      	ldr	r2, [pc, #8]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e5c:	e006      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003e5e:	bf00      	nop
 8003e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	d055      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e98:	d033      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e9e:	d82c      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea4:	d02f      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eaa:	d826      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003eac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003eb0:	d02b      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003eb2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003eb6:	d820      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ebc:	d012      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003ebe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec2:	d81a      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d022      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ecc:	d115      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fdee 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ee2:	e015      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	3328      	adds	r3, #40	@ 0x28
 8003eea:	2102      	movs	r1, #2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fe95 	bl	8004c1c <RCCEx_PLL3_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f02:	bf00      	nop
 8003f04:	e004      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f18:	4ba1      	ldr	r3, [pc, #644]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f28:	4a9d      	ldr	r2, [pc, #628]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 0308 	and.w	r3, r2, #8
 8003f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d01e      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	3328      	adds	r3, #40	@ 0x28
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fe54 	bl	8004c1c <RCCEx_PLL3_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f80:	4b87      	ldr	r3, [pc, #540]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f90:	4a83      	ldr	r2, [pc, #524]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	f002 0310 	and.w	r3, r2, #16
 8003fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	d01e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fc2:	d10c      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	3328      	adds	r3, #40	@ 0x28
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fe25 	bl	8004c1c <RCCEx_PLL3_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fde:	4b70      	ldr	r3, [pc, #448]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fee:	4a6c      	ldr	r2, [pc, #432]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800400a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d03e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800401c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004020:	d022      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004026:	d81b      	bhi.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004030:	d00b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004032:	e015      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	3308      	adds	r3, #8
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fd3b 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004048:	e00f      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404e:	3328      	adds	r3, #40	@ 0x28
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fde2 	bl	8004c1c <RCCEx_PLL3_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800405e:	e004      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004066:	e000      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004072:	4b4b      	ldr	r3, [pc, #300]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004076:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004082:	4a47      	ldr	r2, [pc, #284]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004084:	430b      	orrs	r3, r1
 8004086:	6593      	str	r3, [r2, #88]	@ 0x58
 8004088:	e003      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800409e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040a0:	2300      	movs	r3, #0
 80040a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80040a8:	460b      	mov	r3, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d03b      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040ba:	d01f      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80040bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040c0:	d818      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c6:	d003      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80040c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040cc:	d007      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80040ce:	e011      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d0:	4b33      	ldr	r3, [pc, #204]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	4a32      	ldr	r2, [pc, #200]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80040dc:	e00f      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	3328      	adds	r3, #40	@ 0x28
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fd98 	bl	8004c1c <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004106:	4b26      	ldr	r3, [pc, #152]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004116:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004118:	430b      	orrs	r3, r1
 800411a:	6553      	str	r3, [r2, #84]	@ 0x54
 800411c:	e003      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004132:	673b      	str	r3, [r7, #112]	@ 0x70
 8004134:	2300      	movs	r3, #0
 8004136:	677b      	str	r3, [r7, #116]	@ 0x74
 8004138:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800413c:	460b      	mov	r3, r1
 800413e:	4313      	orrs	r3, r2
 8004140:	d034      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004150:	d007      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004152:	e011      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004154:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800415a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800415e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004160:	e00e      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	3308      	adds	r3, #8
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fca4 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004176:	e003      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10d      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004196:	4a02      	ldr	r2, [pc, #8]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004198:	430b      	orrs	r3, r1
 800419a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800419c:	e006      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800419e:	bf00      	nop
 80041a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80041b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ba:	2300      	movs	r3, #0
 80041bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80041c2:	460b      	mov	r3, r1
 80041c4:	4313      	orrs	r3, r2
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	3328      	adds	r3, #40	@ 0x28
 80041ce:	2102      	movs	r1, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fd23 	bl	8004c1c <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80041ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80041f0:	2300      	movs	r3, #0
 80041f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80041f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80041f8:	460b      	mov	r3, r1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	d038      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800420a:	d018      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800420c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004210:	d811      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004216:	d014      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800421c:	d80b      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d011      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004226:	d106      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004228:	4bc3      	ldr	r3, [pc, #780]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	4ac2      	ldr	r2, [pc, #776]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800422e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004234:	e008      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800423c:	e004      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004250:	4bb9      	ldr	r3, [pc, #740]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004254:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004260:	4ab5      	ldr	r2, [pc, #724]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004262:	430b      	orrs	r3, r1
 8004264:	6553      	str	r3, [r2, #84]	@ 0x54
 8004266:	e003      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800427c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800427e:	2300      	movs	r3, #0
 8004280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004282:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004286:	460b      	mov	r3, r1
 8004288:	4313      	orrs	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800428c:	4baa      	ldr	r3, [pc, #680]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800428e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004290:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429a:	4aa7      	ldr	r2, [pc, #668]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800429c:	430b      	orrs	r3, r1
 800429e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80042ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80042ae:	2300      	movs	r3, #0
 80042b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042bc:	4b9e      	ldr	r3, [pc, #632]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042cc:	4a9a      	ldr	r2, [pc, #616]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ce:	430b      	orrs	r3, r1
 80042d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e0:	2300      	movs	r3, #0
 80042e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d009      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ee:	4b92      	ldr	r3, [pc, #584]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042fc:	4a8e      	ldr	r2, [pc, #568]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800430e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004310:	2300      	movs	r3, #0
 8004312:	647b      	str	r3, [r7, #68]	@ 0x44
 8004314:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800431e:	4b86      	ldr	r3, [pc, #536]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	4a85      	ldr	r2, [pc, #532]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004324:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004328:	6113      	str	r3, [r2, #16]
 800432a:	4b83      	ldr	r3, [pc, #524]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800432c:	6919      	ldr	r1, [r3, #16]
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004336:	4a80      	ldr	r2, [pc, #512]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004338:	430b      	orrs	r3, r1
 800433a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800434a:	2300      	movs	r3, #0
 800434c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800434e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004352:	460b      	mov	r3, r1
 8004354:	4313      	orrs	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004358:	4b77      	ldr	r3, [pc, #476]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800435a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004366:	4a74      	ldr	r2, [pc, #464]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004368:	430b      	orrs	r3, r1
 800436a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004378:	633b      	str	r3, [r7, #48]	@ 0x30
 800437a:	2300      	movs	r3, #0
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
 800437e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004382:	460b      	mov	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004388:	4b6b      	ldr	r3, [pc, #428]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004398:	4a67      	ldr	r2, [pc, #412]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800439a:	430b      	orrs	r3, r1
 800439c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	2100      	movs	r1, #0
 80043a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d011      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	3308      	adds	r3, #8
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fb78 	bl	8004ab8 <RCCEx_PLL2_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	2100      	movs	r1, #0
 80043e8:	6239      	str	r1, [r7, #32]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d011      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	3308      	adds	r3, #8
 8004400:	2101      	movs	r1, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fb58 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800440e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	2100      	movs	r1, #0
 8004428:	61b9      	str	r1, [r7, #24]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004434:	460b      	mov	r3, r1
 8004436:	4313      	orrs	r3, r2
 8004438:	d011      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	3308      	adds	r3, #8
 8004440:	2102      	movs	r1, #2
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fb38 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800444e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	2100      	movs	r1, #0
 8004468:	6139      	str	r1, [r7, #16]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d011      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	3328      	adds	r3, #40	@ 0x28
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fbca 	bl	8004c1c <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	2100      	movs	r1, #0
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d011      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	3328      	adds	r3, #40	@ 0x28
 80044c0:	2101      	movs	r1, #1
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fbaa 	bl	8004c1c <RCCEx_PLL3_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	2100      	movs	r1, #0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d011      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	3328      	adds	r3, #40	@ 0x28
 8004500:	2102      	movs	r1, #2
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fb8a 	bl	8004c1c <RCCEx_PLL3_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800450e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800451e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
}
 800452c:	4618      	mov	r0, r3
 800452e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004532:	46bd      	mov	sp, r7
 8004534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004538:	58024400 	.word	0x58024400

0800453c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004540:	f7fe fd96 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4904      	ldr	r1, [pc, #16]	@ (8004564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	58024400 	.word	0x58024400
 8004564:	0800bde4 	.word	0x0800bde4

08004568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	@ 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004570:	4ba1      	ldr	r3, [pc, #644]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800457a:	4b9f      	ldr	r3, [pc, #636]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457e:	0b1b      	lsrs	r3, r3, #12
 8004580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004586:	4b9c      	ldr	r3, [pc, #624]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004592:	4b99      	ldr	r3, [pc, #612]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8111 	beq.w	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f000 8083 	beq.w	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	f200 80a1 	bhi.w	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d056      	beq.n	8004680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045d2:	e099      	b.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d4:	4b88      	ldr	r3, [pc, #544]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02d      	beq.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045e0:	4b85      	ldr	r3, [pc, #532]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	4a84      	ldr	r2, [pc, #528]	@ (80047fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b7b      	ldr	r3, [pc, #492]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a03 	vldr	s12, [r7, #12]
 800461e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800463a:	e087      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b6a      	ldr	r3, [pc, #424]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004662:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800467e:	e065      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c2:	e043      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800480c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b48      	ldr	r3, [pc, #288]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004706:	e021      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b37      	ldr	r3, [pc, #220]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800474a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800474c:	4b2a      	ldr	r3, [pc, #168]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004766:	edd7 6a07 	vldr	s13, [r7, #28]
 800476a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004772:	ee17 2a90 	vmov	r2, s15
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800477a:	4b1f      	ldr	r3, [pc, #124]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004794:	edd7 6a07 	vldr	s13, [r7, #28]
 8004798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800479c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a0:	ee17 2a90 	vmov	r2, s15
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80047a8:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	0e1b      	lsrs	r3, r3, #24
 80047ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ce:	ee17 2a90 	vmov	r2, s15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047d6:	e008      	b.n	80047ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
}
 80047ea:	bf00      	nop
 80047ec:	3724      	adds	r7, #36	@ 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	03d09000 	.word	0x03d09000
 8004800:	46000000 	.word	0x46000000
 8004804:	4c742400 	.word	0x4c742400
 8004808:	4a742400 	.word	0x4a742400
 800480c:	4bbebc20 	.word	0x4bbebc20

08004810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	@ 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004818:	4ba1      	ldr	r3, [pc, #644]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004822:	4b9f      	ldr	r3, [pc, #636]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	0d1b      	lsrs	r3, r3, #20
 8004828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800482c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800482e:	4b9c      	ldr	r3, [pc, #624]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800483a:	4b99      	ldr	r3, [pc, #612]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	08db      	lsrs	r3, r3, #3
 8004840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8111 	beq.w	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f000 8083 	beq.w	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b02      	cmp	r3, #2
 800486a:	f200 80a1 	bhi.w	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d056      	beq.n	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800487a:	e099      	b.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487c:	4b88      	ldr	r3, [pc, #544]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02d      	beq.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004888:	4b85      	ldr	r3, [pc, #532]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	4a84      	ldr	r2, [pc, #528]	@ (8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b7b      	ldr	r3, [pc, #492]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048e2:	e087      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004926:	e065      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b59      	ldr	r3, [pc, #356]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496a:	e043      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800497a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497e:	4b48      	ldr	r3, [pc, #288]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004992:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ae:	e021      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b37      	ldr	r3, [pc, #220]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049f4:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	0a5b      	lsrs	r3, r3, #9
 80049fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1a:	ee17 2a90 	vmov	r2, s15
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a22:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 2a90 	vmov	r2, s15
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a50:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a76:	ee17 2a90 	vmov	r2, s15
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a7e:	e008      	b.n	8004a92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
}
 8004a92:	bf00      	nop
 8004a94:	3724      	adds	r7, #36	@ 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	03d09000 	.word	0x03d09000
 8004aa8:	46000000 	.word	0x46000000
 8004aac:	4c742400 	.word	0x4c742400
 8004ab0:	4a742400 	.word	0x4a742400
 8004ab4:	4bbebc20 	.word	0x4bbebc20

08004ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ac6:	4b53      	ldr	r3, [pc, #332]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d101      	bne.n	8004ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e099      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a4e      	ldr	r2, [pc, #312]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fc ff73 	bl	80019cc <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004aea:	f7fc ff6f 	bl	80019cc <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e086      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004afc:	4b45      	ldr	r3, [pc, #276]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b08:	4b42      	ldr	r3, [pc, #264]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	493f      	ldr	r1, [pc, #252]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	025b      	lsls	r3, r3, #9
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b4c:	4931      	ldr	r1, [pc, #196]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b52:	4b30      	ldr	r3, [pc, #192]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	492d      	ldr	r1, [pc, #180]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b64:	4b2b      	ldr	r3, [pc, #172]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	f023 0220 	bic.w	r2, r3, #32
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	4928      	ldr	r1, [pc, #160]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b76:	4b27      	ldr	r3, [pc, #156]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	4a26      	ldr	r2, [pc, #152]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b82:	4b24      	ldr	r3, [pc, #144]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b86:	4b24      	ldr	r3, [pc, #144]	@ (8004c18 <RCCEx_PLL2_Config+0x160>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	69d2      	ldr	r2, [r2, #28]
 8004b8e:	00d2      	lsls	r2, r2, #3
 8004b90:	4920      	ldr	r1, [pc, #128]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b96:	4b1f      	ldr	r3, [pc, #124]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f043 0310 	orr.w	r3, r3, #16
 8004ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	4a19      	ldr	r2, [pc, #100]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bb4:	e00f      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bbc:	4b15      	ldr	r3, [pc, #84]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	4a14      	ldr	r2, [pc, #80]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bc8:	e005      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bca:	4b12      	ldr	r3, [pc, #72]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	4a11      	ldr	r2, [pc, #68]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a0e      	ldr	r2, [pc, #56]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be2:	f7fc fef3 	bl	80019cc <HAL_GetTick>
 8004be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bea:	f7fc feef 	bl	80019cc <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e006      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	58024400 	.word	0x58024400
 8004c18:	ffff0007 	.word	0xffff0007

08004c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c2a:	4b53      	ldr	r3, [pc, #332]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d101      	bne.n	8004c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e099      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fc fec1 	bl	80019cc <HAL_GetTick>
 8004c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c4e:	f7fc febd 	bl	80019cc <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e086      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c60:	4b45      	ldr	r3, [pc, #276]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c6c:	4b42      	ldr	r3, [pc, #264]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	051b      	lsls	r3, r3, #20
 8004c7a:	493f      	ldr	r1, [pc, #252]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	025b      	lsls	r3, r3, #9
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cb0:	4931      	ldr	r1, [pc, #196]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cb6:	4b30      	ldr	r3, [pc, #192]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	492d      	ldr	r1, [pc, #180]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4928      	ldr	r1, [pc, #160]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cda:	4b27      	ldr	r3, [pc, #156]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cde:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ce6:	4b24      	ldr	r3, [pc, #144]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cea:	4b24      	ldr	r3, [pc, #144]	@ (8004d7c <RCCEx_PLL3_Config+0x160>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	69d2      	ldr	r2, [r2, #28]
 8004cf2:	00d2      	lsls	r2, r2, #3
 8004cf4:	4920      	ldr	r1, [pc, #128]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4a19      	ldr	r2, [pc, #100]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d18:	e00f      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d20:	4b15      	ldr	r3, [pc, #84]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	4a14      	ldr	r2, [pc, #80]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d2c:	e005      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d2e:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	4a11      	ldr	r2, [pc, #68]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d46:	f7fc fe41 	bl	80019cc <HAL_GetTick>
 8004d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d4e:	f7fc fe3d 	bl	80019cc <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e006      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	ffff0007 	.word	0xffff0007

08004d80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e10f      	b.n	8004fb2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a87      	ldr	r2, [pc, #540]	@ (8004fbc <HAL_SPI_Init+0x23c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00f      	beq.n	8004dc2 <HAL_SPI_Init+0x42>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a86      	ldr	r2, [pc, #536]	@ (8004fc0 <HAL_SPI_Init+0x240>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00a      	beq.n	8004dc2 <HAL_SPI_Init+0x42>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a84      	ldr	r2, [pc, #528]	@ (8004fc4 <HAL_SPI_Init+0x244>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d005      	beq.n	8004dc2 <HAL_SPI_Init+0x42>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d901      	bls.n	8004dc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0f7      	b.n	8004fb2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fe2e 	bl	8005a24 <SPI_GetPacketSize>
 8004dc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7b      	ldr	r2, [pc, #492]	@ (8004fbc <HAL_SPI_Init+0x23c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00c      	beq.n	8004dee <HAL_SPI_Init+0x6e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a79      	ldr	r2, [pc, #484]	@ (8004fc0 <HAL_SPI_Init+0x240>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <HAL_SPI_Init+0x6e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a78      	ldr	r2, [pc, #480]	@ (8004fc4 <HAL_SPI_Init+0x244>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d002      	beq.n	8004dee <HAL_SPI_Init+0x6e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d811      	bhi.n	8004e12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004df2:	4a72      	ldr	r2, [pc, #456]	@ (8004fbc <HAL_SPI_Init+0x23c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a70      	ldr	r2, [pc, #448]	@ (8004fc0 <HAL_SPI_Init+0x240>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_SPI_Init+0x8c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6f      	ldr	r2, [pc, #444]	@ (8004fc4 <HAL_SPI_Init+0x244>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d104      	bne.n	8004e16 <HAL_SPI_Init+0x96>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d901      	bls.n	8004e16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e0cd      	b.n	8004fb2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fc fa96 	bl	800135c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004e52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e5c:	d119      	bne.n	8004e92 <HAL_SPI_Init+0x112>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e66:	d103      	bne.n	8004e70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10c      	bne.n	8004e92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e80:	d107      	bne.n	8004e92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00f      	beq.n	8004ebe <HAL_SPI_Init+0x13e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d90b      	bls.n	8004ebe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e007      	b.n	8004ece <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ecc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2e:	ea42 0103 	orr.w	r1, r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d113      	bne.n	8004f6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40013000 	.word	0x40013000
 8004fc0:	40003800 	.word	0x40003800
 8004fc4:	40003c00 	.word	0x40003c00

08004fc8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3320      	adds	r3, #32
 8004fde:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fe0:	f7fc fcf4 	bl	80019cc <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d001      	beq.n	8004ff6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e1d1      	b.n	800539a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_Transmit+0x3a>
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e1c9      	b.n	800539a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_SPI_Transmit+0x4c>
 8005010:	2302      	movs	r3, #2
 8005012:	e1c2      	b.n	800539a <HAL_SPI_Transmit+0x3d2>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2203      	movs	r2, #3
 8005020:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	88fa      	ldrh	r2, [r7, #6]
 8005036:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800506c:	d108      	bne.n	8005080 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e009      	b.n	8005094 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005092:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	4b96      	ldr	r3, [pc, #600]	@ (80052f4 <HAL_SPI_Transmit+0x32c>)
 800509c:	4013      	ands	r3, r2
 800509e:	88f9      	ldrh	r1, [r7, #6]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	430b      	orrs	r3, r1
 80050a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c0:	d107      	bne.n	80050d2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b0f      	cmp	r3, #15
 80050d8:	d947      	bls.n	800516a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80050da:	e03f      	b.n	800515c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d114      	bne.n	8005114 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005112:	e023      	b.n	800515c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005114:	f7fc fc5a 	bl	80019cc <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d803      	bhi.n	800512c <HAL_SPI_Transmit+0x164>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d102      	bne.n	8005132 <HAL_SPI_Transmit+0x16a>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d114      	bne.n	800515c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fba8 	bl	8005888 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e11e      	b.n	800539a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1b9      	bne.n	80050dc <HAL_SPI_Transmit+0x114>
 8005168:	e0f1      	b.n	800534e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b07      	cmp	r3, #7
 8005170:	f240 80e6 	bls.w	8005340 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005174:	e05d      	b.n	8005232 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d132      	bne.n	80051ea <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d918      	bls.n	80051c2 <HAL_SPI_Transmit+0x1fa>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d014      	beq.n	80051c2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b02      	subs	r3, #2
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80051c0:	e037      	b.n	8005232 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c6:	881a      	ldrh	r2, [r3, #0]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d0:	1c9a      	adds	r2, r3, #2
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80051e8:	e023      	b.n	8005232 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ea:	f7fc fbef 	bl	80019cc <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d803      	bhi.n	8005202 <HAL_SPI_Transmit+0x23a>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d102      	bne.n	8005208 <HAL_SPI_Transmit+0x240>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d114      	bne.n	8005232 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fb3d 	bl	8005888 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005214:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e0b3      	b.n	800539a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d19b      	bne.n	8005176 <HAL_SPI_Transmit+0x1ae>
 800523e:	e086      	b.n	800534e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d154      	bne.n	80052f8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b03      	cmp	r3, #3
 8005258:	d918      	bls.n	800528c <HAL_SPI_Transmit+0x2c4>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525e:	2b40      	cmp	r3, #64	@ 0x40
 8005260:	d914      	bls.n	800528c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b04      	subs	r3, #4
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800528a:	e059      	b.n	8005340 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d917      	bls.n	80052c8 <HAL_SPI_Transmit+0x300>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d013      	beq.n	80052c8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a4:	881a      	ldrh	r2, [r3, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b02      	subs	r3, #2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80052c6:	e03b      	b.n	8005340 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3320      	adds	r3, #32
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80052f2:	e025      	b.n	8005340 <HAL_SPI_Transmit+0x378>
 80052f4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f8:	f7fc fb68 	bl	80019cc <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d803      	bhi.n	8005310 <HAL_SPI_Transmit+0x348>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d102      	bne.n	8005316 <HAL_SPI_Transmit+0x34e>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d114      	bne.n	8005340 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fab6 	bl	8005888 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005322:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e02c      	b.n	800539a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	f47f af79 	bne.w	8005240 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2200      	movs	r2, #0
 8005356:	2108      	movs	r1, #8
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fb35 	bl	80059c8 <SPI_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 fa87 	bl	8005888 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005398:	2300      	movs	r3, #0
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop

080053a4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3301      	adds	r3, #1
 80053be:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3330      	adds	r3, #48	@ 0x30
 80053c6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c8:	f7fc fb00 	bl	80019cc <HAL_GetTick>
 80053cc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
 80053dc:	e250      	b.n	8005880 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_SPI_Receive+0x46>
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e248      	b.n	8005880 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_SPI_Receive+0x58>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e241      	b.n	8005880 <HAL_SPI_Receive+0x4dc>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2204      	movs	r2, #4
 8005408:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	88fa      	ldrh	r2, [r7, #6]
 800541e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005454:	d108      	bne.n	8005468 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e009      	b.n	800547c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800547a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4b95      	ldr	r3, [pc, #596]	@ (80056d8 <HAL_SPI_Receive+0x334>)
 8005484:	4013      	ands	r3, r2
 8005486:	88f9      	ldrh	r1, [r7, #6]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	430b      	orrs	r3, r1
 800548e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a8:	d107      	bne.n	80054ba <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b0f      	cmp	r3, #15
 80054c0:	d96c      	bls.n	800559c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80054c2:	e064      	b.n	800558e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d114      	bne.n	8005504 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ea:	1d1a      	adds	r2, r3, #4
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005502:	e044      	b.n	800558e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800550a:	b29b      	uxth	r3, r3
 800550c:	8bfa      	ldrh	r2, [r7, #30]
 800550e:	429a      	cmp	r2, r3
 8005510:	d919      	bls.n	8005546 <HAL_SPI_Receive+0x1a2>
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d014      	beq.n	8005546 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005524:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005526:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800552c:	1d1a      	adds	r2, r3, #4
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005544:	e023      	b.n	800558e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005546:	f7fc fa41 	bl	80019cc <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d803      	bhi.n	800555e <HAL_SPI_Receive+0x1ba>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d102      	bne.n	8005564 <HAL_SPI_Receive+0x1c0>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d114      	bne.n	800558e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f98f 	bl	8005888 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e178      	b.n	8005880 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d194      	bne.n	80054c4 <HAL_SPI_Receive+0x120>
 800559a:	e15e      	b.n	800585a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	2b07      	cmp	r3, #7
 80055a2:	f240 8153 	bls.w	800584c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80055a6:	e08f      	b.n	80056c8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d114      	bne.n	80055e8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	8812      	ldrh	r2, [r2, #0]
 80055c6:	b292      	uxth	r2, r2
 80055c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055ce:	1c9a      	adds	r2, r3, #2
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80055e6:	e06f      	b.n	80056c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8bfa      	ldrh	r2, [r7, #30]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d924      	bls.n	8005640 <HAL_SPI_Receive+0x29c>
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01f      	beq.n	8005640 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	8812      	ldrh	r2, [r2, #0]
 8005608:	b292      	uxth	r2, r2
 800560a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	b292      	uxth	r2, r2
 8005620:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005626:	1c9a      	adds	r2, r3, #2
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b02      	subs	r3, #2
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800563e:	e043      	b.n	80056c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	d119      	bne.n	8005680 <HAL_SPI_Receive+0x2dc>
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d014      	beq.n	8005680 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	8812      	ldrh	r2, [r2, #0]
 800565e:	b292      	uxth	r2, r2
 8005660:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005666:	1c9a      	adds	r2, r3, #2
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800567e:	e023      	b.n	80056c8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005680:	f7fc f9a4 	bl	80019cc <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d803      	bhi.n	8005698 <HAL_SPI_Receive+0x2f4>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d102      	bne.n	800569e <HAL_SPI_Receive+0x2fa>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d114      	bne.n	80056c8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f8f2 	bl	8005888 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e0db      	b.n	8005880 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f47f af69 	bne.w	80055a8 <HAL_SPI_Receive+0x204>
 80056d6:	e0c0      	b.n	800585a <HAL_SPI_Receive+0x4b6>
 80056d8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d117      	bne.n	8005722 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056fe:	7812      	ldrb	r2, [r2, #0]
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005720:	e094      	b.n	800584c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005728:	b29b      	uxth	r3, r3
 800572a:	8bfa      	ldrh	r2, [r7, #30]
 800572c:	429a      	cmp	r2, r3
 800572e:	d946      	bls.n	80057be <HAL_SPI_Receive+0x41a>
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d041      	beq.n	80057be <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005762:	7812      	ldrb	r2, [r2, #0]
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800577e:	7812      	ldrb	r2, [r2, #0]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b04      	subs	r3, #4
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80057bc:	e046      	b.n	800584c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d81c      	bhi.n	8005804 <HAL_SPI_Receive+0x460>
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d017      	beq.n	8005804 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005802:	e023      	b.n	800584c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005804:	f7fc f8e2 	bl	80019cc <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d803      	bhi.n	800581c <HAL_SPI_Receive+0x478>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d102      	bne.n	8005822 <HAL_SPI_Receive+0x47e>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d114      	bne.n	800584c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f830 	bl	8005888 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800582e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e019      	b.n	8005880 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	f47f af41 	bne.w	80056dc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f814 	bl	8005888 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800587e:	2300      	movs	r3, #0
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0210 	orr.w	r2, r2, #16
 80058b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6919      	ldr	r1, [r3, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <SPI_CloseTransfer+0x13c>)
 80058d4:	400b      	ands	r3, r1
 80058d6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80058e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d014      	beq.n	800591e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00f      	beq.n	800591e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005904:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0220 	orr.w	r2, r2, #32
 800591c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b03      	cmp	r3, #3
 8005928:	d014      	beq.n	8005954 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00f      	beq.n	8005954 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800593a:	f043 0204 	orr.w	r2, r3, #4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005952:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00f      	beq.n	800597e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005964:	f043 0201 	orr.w	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800597c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00f      	beq.n	80059a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800598e:	f043 0208 	orr.w	r2, r3, #8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	fffffc90 	.word	0xfffffc90

080059c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059d8:	e010      	b.n	80059fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059da:	f7fb fff7 	bl	80019cc <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d803      	bhi.n	80059f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d102      	bne.n	80059f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e00f      	b.n	8005a1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d0df      	beq.n	80059da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	3307      	adds	r3, #7
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e049      	b.n	8005b00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fb fcf9 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f000 fa5d 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d020      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0202 	mvn.w	r2, #2
 8005b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9e2 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9d4 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f9e5 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d020      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01b      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0204 	mvn.w	r2, #4
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f9bc 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f9ae 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f9bf 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d020      	beq.n	8005c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01b      	beq.n	8005c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0208 	mvn.w	r2, #8
 8005bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f996 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005bf0:	e005      	b.n	8005bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f988 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f999 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d020      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01b      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0210 	mvn.w	r2, #16
 8005c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2208      	movs	r2, #8
 8005c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f970 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005c3c:	e005      	b.n	8005c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f962 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f973 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0201 	mvn.w	r2, #1
 8005c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fb faf6 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00c      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb37 	bl	8006310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00c      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fb2f 	bl	8006324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00c      	beq.n	8005cea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f92d 	bl	8005f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00c      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f06f 0220 	mvn.w	r2, #32
 8005d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 faf7 	bl	80062fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIM_ConfigClockSource+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e0dc      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x1d6>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ef8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a64      	ldr	r2, [pc, #400]	@ (8005efc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	f000 80a9 	beq.w	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d70:	4a62      	ldr	r2, [pc, #392]	@ (8005efc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	f200 80ae 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d78:	4a61      	ldr	r2, [pc, #388]	@ (8005f00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	f000 80a1 	beq.w	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d80:	4a5f      	ldr	r2, [pc, #380]	@ (8005f00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	f200 80a6 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d88:	4a5e      	ldr	r2, [pc, #376]	@ (8005f04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	f000 8099 	beq.w	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d90:	4a5c      	ldr	r2, [pc, #368]	@ (8005f04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	f200 809e 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d9c:	f000 8091 	beq.w	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005da0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005da4:	f200 8096 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dac:	f000 8089 	beq.w	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005db0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db4:	f200 808e 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dbc:	d03e      	beq.n	8005e3c <HAL_TIM_ConfigClockSource+0x124>
 8005dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc2:	f200 8087 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dca:	f000 8086 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x1c2>
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd2:	d87f      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005dd4:	2b70      	cmp	r3, #112	@ 0x70
 8005dd6:	d01a      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0xf6>
 8005dd8:	2b70      	cmp	r3, #112	@ 0x70
 8005dda:	d87b      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ddc:	2b60      	cmp	r3, #96	@ 0x60
 8005dde:	d050      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x16a>
 8005de0:	2b60      	cmp	r3, #96	@ 0x60
 8005de2:	d877      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005de4:	2b50      	cmp	r3, #80	@ 0x50
 8005de6:	d03c      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0x14a>
 8005de8:	2b50      	cmp	r3, #80	@ 0x50
 8005dea:	d873      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	d058      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0x18a>
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	d86f      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005df4:	2b30      	cmp	r3, #48	@ 0x30
 8005df6:	d064      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005df8:	2b30      	cmp	r3, #48	@ 0x30
 8005dfa:	d86b      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d060      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d867      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05c      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d05a      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e0c:	e062      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e1e:	f000 f9bf 	bl	80061a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	609a      	str	r2, [r3, #8]
      break;
 8005e3a:	e04f      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e4c:	f000 f9a8 	bl	80061a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e5e:	609a      	str	r2, [r3, #8]
      break;
 8005e60:	e03c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f000 f918 	bl	80060a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2150      	movs	r1, #80	@ 0x50
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f972 	bl	8006164 <TIM_ITRx_SetConfig>
      break;
 8005e80:	e02c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f000 f937 	bl	8006102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2160      	movs	r1, #96	@ 0x60
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f962 	bl	8006164 <TIM_ITRx_SetConfig>
      break;
 8005ea0:	e01c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 f8f8 	bl	80060a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2140      	movs	r1, #64	@ 0x40
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f952 	bl	8006164 <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e00c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f000 f949 	bl	8006164 <TIM_ITRx_SetConfig>
      break;
 8005ed2:	e003      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed8:	e000      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	ffceff88 	.word	0xffceff88
 8005efc:	00100040 	.word	0x00100040
 8005f00:	00100030 	.word	0x00100030
 8005f04:	00100020 	.word	0x00100020

08005f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a46      	ldr	r2, [pc, #280]	@ (8006084 <TIM_Base_SetConfig+0x12c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a43      	ldr	r2, [pc, #268]	@ (8006088 <TIM_Base_SetConfig+0x130>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a42      	ldr	r2, [pc, #264]	@ (800608c <TIM_Base_SetConfig+0x134>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a41      	ldr	r2, [pc, #260]	@ (8006090 <TIM_Base_SetConfig+0x138>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a40      	ldr	r2, [pc, #256]	@ (8006094 <TIM_Base_SetConfig+0x13c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a35      	ldr	r2, [pc, #212]	@ (8006084 <TIM_Base_SetConfig+0x12c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb8:	d01b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a32      	ldr	r2, [pc, #200]	@ (8006088 <TIM_Base_SetConfig+0x130>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d017      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a31      	ldr	r2, [pc, #196]	@ (800608c <TIM_Base_SetConfig+0x134>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a30      	ldr	r2, [pc, #192]	@ (8006090 <TIM_Base_SetConfig+0x138>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8006094 <TIM_Base_SetConfig+0x13c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8006098 <TIM_Base_SetConfig+0x140>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800609c <TIM_Base_SetConfig+0x144>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2c      	ldr	r2, [pc, #176]	@ (80060a0 <TIM_Base_SetConfig+0x148>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a16      	ldr	r2, [pc, #88]	@ (8006084 <TIM_Base_SetConfig+0x12c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00f      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a18      	ldr	r2, [pc, #96]	@ (8006094 <TIM_Base_SetConfig+0x13c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00b      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a17      	ldr	r2, [pc, #92]	@ (8006098 <TIM_Base_SetConfig+0x140>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d007      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a16      	ldr	r2, [pc, #88]	@ (800609c <TIM_Base_SetConfig+0x144>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a15      	ldr	r2, [pc, #84]	@ (80060a0 <TIM_Base_SetConfig+0x148>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b01      	cmp	r3, #1
 8006068:	d105      	bne.n	8006076 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f023 0201 	bic.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	611a      	str	r2, [r3, #16]
  }
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40010000 	.word	0x40010000
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800
 8006090:	40000c00 	.word	0x40000c00
 8006094:	40010400 	.word	0x40010400
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800

080060a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f023 030a 	bic.w	r3, r3, #10
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006102:	b480      	push	{r7}
 8006104:	b087      	sub	sp, #28
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f023 0210 	bic.w	r2, r3, #16
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800612c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	031b      	lsls	r3, r3, #12
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4b09      	ldr	r3, [pc, #36]	@ (800619c <TIM_ITRx_SetConfig+0x38>)
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	f043 0307 	orr.w	r3, r3, #7
 8006186:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	609a      	str	r2, [r3, #8]
}
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	ffcfff8f 	.word	0xffcfff8f

080061a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	021a      	lsls	r2, r3, #8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e06d      	b.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a30      	ldr	r2, [pc, #192]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2f      	ldr	r2, [pc, #188]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d108      	bne.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a20      	ldr	r2, [pc, #128]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d022      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d01d      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1d      	ldr	r2, [pc, #116]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d018      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1c      	ldr	r2, [pc, #112]	@ (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1a      	ldr	r2, [pc, #104]	@ (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00e      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a15      	ldr	r2, [pc, #84]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a15      	ldr	r2, [pc, #84]	@ (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10c      	bne.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40010400 	.word	0x40010400
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40001800 	.word	0x40001800
 80062f8:	40014000 	.word	0x40014000

080062fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e042      	b.n	80063d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fb f8b1 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2224      	movs	r2, #36	@ 0x24
 8006366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0201 	bic.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fe1e 	bl	8006fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f8b3 	bl	80064f4 <UART_SetConfig>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e01b      	b.n	80063d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fe9d 	bl	8007108 <UART_CheckIdleState>
 80063ce:	4603      	mov	r3, r0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d17b      	bne.n	80064ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_UART_Transmit+0x26>
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e074      	b.n	80064ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2221      	movs	r2, #33	@ 0x21
 800640e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006412:	f7fb fadb 	bl	80019cc <HAL_GetTick>
 8006416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006430:	d108      	bne.n	8006444 <HAL_UART_Transmit+0x6c>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	e003      	b.n	800644c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800644c:	e030      	b.n	80064b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2200      	movs	r2, #0
 8006456:	2180      	movs	r1, #128	@ 0x80
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 feff 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e03d      	b.n	80064ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006484:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	3302      	adds	r3, #2
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	e007      	b.n	800649e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	3301      	adds	r3, #1
 800649c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1c8      	bne.n	800644e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2200      	movs	r2, #0
 80064c4:	2140      	movs	r1, #64	@ 0x40
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fec8 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e006      	b.n	80064ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e000      	b.n	80064ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064ea:	2302      	movs	r3, #2
  }
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f8:	b092      	sub	sp, #72	@ 0x48
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	431a      	orrs	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	431a      	orrs	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	4313      	orrs	r3, r2
 800651a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4bbe      	ldr	r3, [pc, #760]	@ (800681c <UART_SetConfig+0x328>)
 8006524:	4013      	ands	r3, r2
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800652c:	430b      	orrs	r3, r1
 800652e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4ab3      	ldr	r2, [pc, #716]	@ (8006820 <UART_SetConfig+0x32c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800655c:	4313      	orrs	r3, r2
 800655e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	4baf      	ldr	r3, [pc, #700]	@ (8006824 <UART_SetConfig+0x330>)
 8006568:	4013      	ands	r3, r2
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006570:	430b      	orrs	r3, r1
 8006572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	f023 010f 	bic.w	r1, r3, #15
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4aa6      	ldr	r2, [pc, #664]	@ (8006828 <UART_SetConfig+0x334>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d177      	bne.n	8006684 <UART_SetConfig+0x190>
 8006594:	4ba5      	ldr	r3, [pc, #660]	@ (800682c <UART_SetConfig+0x338>)
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800659c:	2b28      	cmp	r3, #40	@ 0x28
 800659e:	d86d      	bhi.n	800667c <UART_SetConfig+0x188>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <UART_SetConfig+0xb4>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	0800664d 	.word	0x0800664d
 80065ac:	0800667d 	.word	0x0800667d
 80065b0:	0800667d 	.word	0x0800667d
 80065b4:	0800667d 	.word	0x0800667d
 80065b8:	0800667d 	.word	0x0800667d
 80065bc:	0800667d 	.word	0x0800667d
 80065c0:	0800667d 	.word	0x0800667d
 80065c4:	0800667d 	.word	0x0800667d
 80065c8:	08006655 	.word	0x08006655
 80065cc:	0800667d 	.word	0x0800667d
 80065d0:	0800667d 	.word	0x0800667d
 80065d4:	0800667d 	.word	0x0800667d
 80065d8:	0800667d 	.word	0x0800667d
 80065dc:	0800667d 	.word	0x0800667d
 80065e0:	0800667d 	.word	0x0800667d
 80065e4:	0800667d 	.word	0x0800667d
 80065e8:	0800665d 	.word	0x0800665d
 80065ec:	0800667d 	.word	0x0800667d
 80065f0:	0800667d 	.word	0x0800667d
 80065f4:	0800667d 	.word	0x0800667d
 80065f8:	0800667d 	.word	0x0800667d
 80065fc:	0800667d 	.word	0x0800667d
 8006600:	0800667d 	.word	0x0800667d
 8006604:	0800667d 	.word	0x0800667d
 8006608:	08006665 	.word	0x08006665
 800660c:	0800667d 	.word	0x0800667d
 8006610:	0800667d 	.word	0x0800667d
 8006614:	0800667d 	.word	0x0800667d
 8006618:	0800667d 	.word	0x0800667d
 800661c:	0800667d 	.word	0x0800667d
 8006620:	0800667d 	.word	0x0800667d
 8006624:	0800667d 	.word	0x0800667d
 8006628:	0800666d 	.word	0x0800666d
 800662c:	0800667d 	.word	0x0800667d
 8006630:	0800667d 	.word	0x0800667d
 8006634:	0800667d 	.word	0x0800667d
 8006638:	0800667d 	.word	0x0800667d
 800663c:	0800667d 	.word	0x0800667d
 8006640:	0800667d 	.word	0x0800667d
 8006644:	0800667d 	.word	0x0800667d
 8006648:	08006675 	.word	0x08006675
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006652:	e222      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006654:	2304      	movs	r3, #4
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665a:	e21e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800665c:	2308      	movs	r3, #8
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e21a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006664:	2310      	movs	r3, #16
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666a:	e216      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800666c:	2320      	movs	r3, #32
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e212      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006674:	2340      	movs	r3, #64	@ 0x40
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e20e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e20a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a69      	ldr	r2, [pc, #420]	@ (8006830 <UART_SetConfig+0x33c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d130      	bne.n	80066f0 <UART_SetConfig+0x1fc>
 800668e:	4b67      	ldr	r3, [pc, #412]	@ (800682c <UART_SetConfig+0x338>)
 8006690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	2b05      	cmp	r3, #5
 8006698:	d826      	bhi.n	80066e8 <UART_SetConfig+0x1f4>
 800669a:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <UART_SetConfig+0x1ac>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	080066b9 	.word	0x080066b9
 80066a4:	080066c1 	.word	0x080066c1
 80066a8:	080066c9 	.word	0x080066c9
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066d9 	.word	0x080066d9
 80066b4:	080066e1 	.word	0x080066e1
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066be:	e1ec      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066c0:	2304      	movs	r3, #4
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e1e8      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066c8:	2308      	movs	r3, #8
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e1e4      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066d0:	2310      	movs	r3, #16
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e1e0      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066d8:	2320      	movs	r3, #32
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e1dc      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066e0:	2340      	movs	r3, #64	@ 0x40
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e1d8      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066e8:	2380      	movs	r3, #128	@ 0x80
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e1d4      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a4f      	ldr	r2, [pc, #316]	@ (8006834 <UART_SetConfig+0x340>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d130      	bne.n	800675c <UART_SetConfig+0x268>
 80066fa:	4b4c      	ldr	r3, [pc, #304]	@ (800682c <UART_SetConfig+0x338>)
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	2b05      	cmp	r3, #5
 8006704:	d826      	bhi.n	8006754 <UART_SetConfig+0x260>
 8006706:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <UART_SetConfig+0x218>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006725 	.word	0x08006725
 8006710:	0800672d 	.word	0x0800672d
 8006714:	08006735 	.word	0x08006735
 8006718:	0800673d 	.word	0x0800673d
 800671c:	08006745 	.word	0x08006745
 8006720:	0800674d 	.word	0x0800674d
 8006724:	2300      	movs	r3, #0
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672a:	e1b6      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800672c:	2304      	movs	r3, #4
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006732:	e1b2      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006734:	2308      	movs	r3, #8
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e1ae      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800673c:	2310      	movs	r3, #16
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e1aa      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006744:	2320      	movs	r3, #32
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e1a6      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800674c:	2340      	movs	r3, #64	@ 0x40
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e1a2      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006754:	2380      	movs	r3, #128	@ 0x80
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e19e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a35      	ldr	r2, [pc, #212]	@ (8006838 <UART_SetConfig+0x344>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d130      	bne.n	80067c8 <UART_SetConfig+0x2d4>
 8006766:	4b31      	ldr	r3, [pc, #196]	@ (800682c <UART_SetConfig+0x338>)
 8006768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	2b05      	cmp	r3, #5
 8006770:	d826      	bhi.n	80067c0 <UART_SetConfig+0x2cc>
 8006772:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <UART_SetConfig+0x284>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006791 	.word	0x08006791
 800677c:	08006799 	.word	0x08006799
 8006780:	080067a1 	.word	0x080067a1
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067b1 	.word	0x080067b1
 800678c:	080067b9 	.word	0x080067b9
 8006790:	2300      	movs	r3, #0
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006796:	e180      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e17c      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e178      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e174      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067b0:	2320      	movs	r3, #32
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e170      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067b8:	2340      	movs	r3, #64	@ 0x40
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e16c      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067c0:	2380      	movs	r3, #128	@ 0x80
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e168      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <UART_SetConfig+0x348>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d142      	bne.n	8006858 <UART_SetConfig+0x364>
 80067d2:	4b16      	ldr	r3, [pc, #88]	@ (800682c <UART_SetConfig+0x338>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b05      	cmp	r3, #5
 80067dc:	d838      	bhi.n	8006850 <UART_SetConfig+0x35c>
 80067de:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <UART_SetConfig+0x2f0>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	080067fd 	.word	0x080067fd
 80067e8:	08006805 	.word	0x08006805
 80067ec:	0800680d 	.word	0x0800680d
 80067f0:	08006815 	.word	0x08006815
 80067f4:	08006841 	.word	0x08006841
 80067f8:	08006849 	.word	0x08006849
 80067fc:	2300      	movs	r3, #0
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006802:	e14a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006804:	2304      	movs	r3, #4
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e146      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800680c:	2308      	movs	r3, #8
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e142      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006814:	2310      	movs	r3, #16
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e13e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800681c:	cfff69f3 	.word	0xcfff69f3
 8006820:	58000c00 	.word	0x58000c00
 8006824:	11fff4ff 	.word	0x11fff4ff
 8006828:	40011000 	.word	0x40011000
 800682c:	58024400 	.word	0x58024400
 8006830:	40004400 	.word	0x40004400
 8006834:	40004800 	.word	0x40004800
 8006838:	40004c00 	.word	0x40004c00
 800683c:	40005000 	.word	0x40005000
 8006840:	2320      	movs	r3, #32
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006846:	e128      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006848:	2340      	movs	r3, #64	@ 0x40
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684e:	e124      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006850:	2380      	movs	r3, #128	@ 0x80
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006856:	e120      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4acb      	ldr	r2, [pc, #812]	@ (8006b8c <UART_SetConfig+0x698>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d176      	bne.n	8006950 <UART_SetConfig+0x45c>
 8006862:	4bcb      	ldr	r3, [pc, #812]	@ (8006b90 <UART_SetConfig+0x69c>)
 8006864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800686a:	2b28      	cmp	r3, #40	@ 0x28
 800686c:	d86c      	bhi.n	8006948 <UART_SetConfig+0x454>
 800686e:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <UART_SetConfig+0x380>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	08006919 	.word	0x08006919
 8006878:	08006949 	.word	0x08006949
 800687c:	08006949 	.word	0x08006949
 8006880:	08006949 	.word	0x08006949
 8006884:	08006949 	.word	0x08006949
 8006888:	08006949 	.word	0x08006949
 800688c:	08006949 	.word	0x08006949
 8006890:	08006949 	.word	0x08006949
 8006894:	08006921 	.word	0x08006921
 8006898:	08006949 	.word	0x08006949
 800689c:	08006949 	.word	0x08006949
 80068a0:	08006949 	.word	0x08006949
 80068a4:	08006949 	.word	0x08006949
 80068a8:	08006949 	.word	0x08006949
 80068ac:	08006949 	.word	0x08006949
 80068b0:	08006949 	.word	0x08006949
 80068b4:	08006929 	.word	0x08006929
 80068b8:	08006949 	.word	0x08006949
 80068bc:	08006949 	.word	0x08006949
 80068c0:	08006949 	.word	0x08006949
 80068c4:	08006949 	.word	0x08006949
 80068c8:	08006949 	.word	0x08006949
 80068cc:	08006949 	.word	0x08006949
 80068d0:	08006949 	.word	0x08006949
 80068d4:	08006931 	.word	0x08006931
 80068d8:	08006949 	.word	0x08006949
 80068dc:	08006949 	.word	0x08006949
 80068e0:	08006949 	.word	0x08006949
 80068e4:	08006949 	.word	0x08006949
 80068e8:	08006949 	.word	0x08006949
 80068ec:	08006949 	.word	0x08006949
 80068f0:	08006949 	.word	0x08006949
 80068f4:	08006939 	.word	0x08006939
 80068f8:	08006949 	.word	0x08006949
 80068fc:	08006949 	.word	0x08006949
 8006900:	08006949 	.word	0x08006949
 8006904:	08006949 	.word	0x08006949
 8006908:	08006949 	.word	0x08006949
 800690c:	08006949 	.word	0x08006949
 8006910:	08006949 	.word	0x08006949
 8006914:	08006941 	.word	0x08006941
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691e:	e0bc      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006920:	2304      	movs	r3, #4
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006926:	e0b8      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006928:	2308      	movs	r3, #8
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692e:	e0b4      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006930:	2310      	movs	r3, #16
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006936:	e0b0      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006938:	2320      	movs	r3, #32
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693e:	e0ac      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006940:	2340      	movs	r3, #64	@ 0x40
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006946:	e0a8      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006948:	2380      	movs	r3, #128	@ 0x80
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e0a4      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a8f      	ldr	r2, [pc, #572]	@ (8006b94 <UART_SetConfig+0x6a0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d130      	bne.n	80069bc <UART_SetConfig+0x4c8>
 800695a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b90 <UART_SetConfig+0x69c>)
 800695c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	2b05      	cmp	r3, #5
 8006964:	d826      	bhi.n	80069b4 <UART_SetConfig+0x4c0>
 8006966:	a201      	add	r2, pc, #4	@ (adr r2, 800696c <UART_SetConfig+0x478>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	08006985 	.word	0x08006985
 8006970:	0800698d 	.word	0x0800698d
 8006974:	08006995 	.word	0x08006995
 8006978:	0800699d 	.word	0x0800699d
 800697c:	080069a5 	.word	0x080069a5
 8006980:	080069ad 	.word	0x080069ad
 8006984:	2300      	movs	r3, #0
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698a:	e086      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800698c:	2304      	movs	r3, #4
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006992:	e082      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006994:	2308      	movs	r3, #8
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699a:	e07e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 800699c:	2310      	movs	r3, #16
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a2:	e07a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069a4:	2320      	movs	r3, #32
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069aa:	e076      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069ac:	2340      	movs	r3, #64	@ 0x40
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b2:	e072      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069b4:	2380      	movs	r3, #128	@ 0x80
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ba:	e06e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a75      	ldr	r2, [pc, #468]	@ (8006b98 <UART_SetConfig+0x6a4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d130      	bne.n	8006a28 <UART_SetConfig+0x534>
 80069c6:	4b72      	ldr	r3, [pc, #456]	@ (8006b90 <UART_SetConfig+0x69c>)
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b05      	cmp	r3, #5
 80069d0:	d826      	bhi.n	8006a20 <UART_SetConfig+0x52c>
 80069d2:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <UART_SetConfig+0x4e4>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	080069f1 	.word	0x080069f1
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	08006a01 	.word	0x08006a01
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a19 	.word	0x08006a19
 80069f0:	2300      	movs	r3, #0
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f6:	e050      	b.n	8006a9a <UART_SetConfig+0x5a6>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fe:	e04c      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a06:	e048      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0e:	e044      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a10:	2320      	movs	r3, #32
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a16:	e040      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a18:	2340      	movs	r3, #64	@ 0x40
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1e:	e03c      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a20:	2380      	movs	r3, #128	@ 0x80
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a26:	e038      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a5b      	ldr	r2, [pc, #364]	@ (8006b9c <UART_SetConfig+0x6a8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d130      	bne.n	8006a94 <UART_SetConfig+0x5a0>
 8006a32:	4b57      	ldr	r3, [pc, #348]	@ (8006b90 <UART_SetConfig+0x69c>)
 8006a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	2b05      	cmp	r3, #5
 8006a3c:	d826      	bhi.n	8006a8c <UART_SetConfig+0x598>
 8006a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a44 <UART_SetConfig+0x550>)
 8006a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a44:	08006a5d 	.word	0x08006a5d
 8006a48:	08006a65 	.word	0x08006a65
 8006a4c:	08006a6d 	.word	0x08006a6d
 8006a50:	08006a75 	.word	0x08006a75
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a85 	.word	0x08006a85
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a62:	e01a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a64:	2304      	movs	r3, #4
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e016      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e012      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a74:	2310      	movs	r3, #16
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	e00e      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a7c:	2320      	movs	r3, #32
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a82:	e00a      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a84:	2340      	movs	r3, #64	@ 0x40
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8a:	e006      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a8c:	2380      	movs	r3, #128	@ 0x80
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a92:	e002      	b.n	8006a9a <UART_SetConfig+0x5a6>
 8006a94:	2380      	movs	r3, #128	@ 0x80
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8006b9c <UART_SetConfig+0x6a8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	f040 80f8 	bne.w	8006c96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	dc46      	bgt.n	8006b3c <UART_SetConfig+0x648>
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	f2c0 8082 	blt.w	8006bb8 <UART_SetConfig+0x6c4>
 8006ab4:	3b02      	subs	r3, #2
 8006ab6:	2b1e      	cmp	r3, #30
 8006ab8:	d87e      	bhi.n	8006bb8 <UART_SetConfig+0x6c4>
 8006aba:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <UART_SetConfig+0x5cc>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006b43 	.word	0x08006b43
 8006ac4:	08006bb9 	.word	0x08006bb9
 8006ac8:	08006b4b 	.word	0x08006b4b
 8006acc:	08006bb9 	.word	0x08006bb9
 8006ad0:	08006bb9 	.word	0x08006bb9
 8006ad4:	08006bb9 	.word	0x08006bb9
 8006ad8:	08006b5b 	.word	0x08006b5b
 8006adc:	08006bb9 	.word	0x08006bb9
 8006ae0:	08006bb9 	.word	0x08006bb9
 8006ae4:	08006bb9 	.word	0x08006bb9
 8006ae8:	08006bb9 	.word	0x08006bb9
 8006aec:	08006bb9 	.word	0x08006bb9
 8006af0:	08006bb9 	.word	0x08006bb9
 8006af4:	08006bb9 	.word	0x08006bb9
 8006af8:	08006b6b 	.word	0x08006b6b
 8006afc:	08006bb9 	.word	0x08006bb9
 8006b00:	08006bb9 	.word	0x08006bb9
 8006b04:	08006bb9 	.word	0x08006bb9
 8006b08:	08006bb9 	.word	0x08006bb9
 8006b0c:	08006bb9 	.word	0x08006bb9
 8006b10:	08006bb9 	.word	0x08006bb9
 8006b14:	08006bb9 	.word	0x08006bb9
 8006b18:	08006bb9 	.word	0x08006bb9
 8006b1c:	08006bb9 	.word	0x08006bb9
 8006b20:	08006bb9 	.word	0x08006bb9
 8006b24:	08006bb9 	.word	0x08006bb9
 8006b28:	08006bb9 	.word	0x08006bb9
 8006b2c:	08006bb9 	.word	0x08006bb9
 8006b30:	08006bb9 	.word	0x08006bb9
 8006b34:	08006bb9 	.word	0x08006bb9
 8006b38:	08006bab 	.word	0x08006bab
 8006b3c:	2b40      	cmp	r3, #64	@ 0x40
 8006b3e:	d037      	beq.n	8006bb0 <UART_SetConfig+0x6bc>
 8006b40:	e03a      	b.n	8006bb8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b42:	f7fd fcfb 	bl	800453c <HAL_RCCEx_GetD3PCLK1Freq>
 8006b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b48:	e03c      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fd fd0a 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b58:	e034      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b5a:	f107 0318 	add.w	r3, r7, #24
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fd fe56 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b68:	e02c      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b6a:	4b09      	ldr	r3, [pc, #36]	@ (8006b90 <UART_SetConfig+0x69c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b76:	4b06      	ldr	r3, [pc, #24]	@ (8006b90 <UART_SetConfig+0x69c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	08db      	lsrs	r3, r3, #3
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	4a07      	ldr	r2, [pc, #28]	@ (8006ba0 <UART_SetConfig+0x6ac>)
 8006b82:	fa22 f303 	lsr.w	r3, r2, r3
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b88:	e01c      	b.n	8006bc4 <UART_SetConfig+0x6d0>
 8006b8a:	bf00      	nop
 8006b8c:	40011400 	.word	0x40011400
 8006b90:	58024400 	.word	0x58024400
 8006b94:	40007800 	.word	0x40007800
 8006b98:	40007c00 	.word	0x40007c00
 8006b9c:	58000c00 	.word	0x58000c00
 8006ba0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ba4:	4b9d      	ldr	r3, [pc, #628]	@ (8006e1c <UART_SetConfig+0x928>)
 8006ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba8:	e00c      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006baa:	4b9d      	ldr	r3, [pc, #628]	@ (8006e20 <UART_SetConfig+0x92c>)
 8006bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bae:	e009      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb6:	e005      	b.n	8006bc4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006bc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 81de 	beq.w	8006f88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	4a94      	ldr	r2, [pc, #592]	@ (8006e24 <UART_SetConfig+0x930>)
 8006bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bda:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bde:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d305      	bcc.n	8006bfc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d903      	bls.n	8006c04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c02:	e1c1      	b.n	8006f88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c06:	2200      	movs	r2, #0
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	60fa      	str	r2, [r7, #12]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	4a84      	ldr	r2, [pc, #528]	@ (8006e24 <UART_SetConfig+0x930>)
 8006c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2200      	movs	r2, #0
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c26:	f7f9 fd6f 	bl	8000708 <__aeabi_uldivmod>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4610      	mov	r0, r2
 8006c30:	4619      	mov	r1, r3
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	020b      	lsls	r3, r1, #8
 8006c3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c40:	0202      	lsls	r2, r0, #8
 8006c42:	6979      	ldr	r1, [r7, #20]
 8006c44:	6849      	ldr	r1, [r1, #4]
 8006c46:	0849      	lsrs	r1, r1, #1
 8006c48:	2000      	movs	r0, #0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	eb12 0804 	adds.w	r8, r2, r4
 8006c52:	eb43 0905 	adc.w	r9, r3, r5
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	469a      	mov	sl, r3
 8006c5e:	4693      	mov	fp, r2
 8006c60:	4652      	mov	r2, sl
 8006c62:	465b      	mov	r3, fp
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 fd4e 	bl	8000708 <__aeabi_uldivmod>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4613      	mov	r3, r2
 8006c72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c7a:	d308      	bcc.n	8006c8e <UART_SetConfig+0x79a>
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c82:	d204      	bcs.n	8006c8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c8a:	60da      	str	r2, [r3, #12]
 8006c8c:	e17c      	b.n	8006f88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c94:	e178      	b.n	8006f88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9e:	f040 80c5 	bne.w	8006e2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006ca2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	dc48      	bgt.n	8006d3c <UART_SetConfig+0x848>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	db7b      	blt.n	8006da6 <UART_SetConfig+0x8b2>
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d879      	bhi.n	8006da6 <UART_SetConfig+0x8b2>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <UART_SetConfig+0x7c4>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006d43 	.word	0x08006d43
 8006cbc:	08006d4b 	.word	0x08006d4b
 8006cc0:	08006da7 	.word	0x08006da7
 8006cc4:	08006da7 	.word	0x08006da7
 8006cc8:	08006d53 	.word	0x08006d53
 8006ccc:	08006da7 	.word	0x08006da7
 8006cd0:	08006da7 	.word	0x08006da7
 8006cd4:	08006da7 	.word	0x08006da7
 8006cd8:	08006d63 	.word	0x08006d63
 8006cdc:	08006da7 	.word	0x08006da7
 8006ce0:	08006da7 	.word	0x08006da7
 8006ce4:	08006da7 	.word	0x08006da7
 8006ce8:	08006da7 	.word	0x08006da7
 8006cec:	08006da7 	.word	0x08006da7
 8006cf0:	08006da7 	.word	0x08006da7
 8006cf4:	08006da7 	.word	0x08006da7
 8006cf8:	08006d73 	.word	0x08006d73
 8006cfc:	08006da7 	.word	0x08006da7
 8006d00:	08006da7 	.word	0x08006da7
 8006d04:	08006da7 	.word	0x08006da7
 8006d08:	08006da7 	.word	0x08006da7
 8006d0c:	08006da7 	.word	0x08006da7
 8006d10:	08006da7 	.word	0x08006da7
 8006d14:	08006da7 	.word	0x08006da7
 8006d18:	08006da7 	.word	0x08006da7
 8006d1c:	08006da7 	.word	0x08006da7
 8006d20:	08006da7 	.word	0x08006da7
 8006d24:	08006da7 	.word	0x08006da7
 8006d28:	08006da7 	.word	0x08006da7
 8006d2c:	08006da7 	.word	0x08006da7
 8006d30:	08006da7 	.word	0x08006da7
 8006d34:	08006da7 	.word	0x08006da7
 8006d38:	08006d99 	.word	0x08006d99
 8006d3c:	2b40      	cmp	r3, #64	@ 0x40
 8006d3e:	d02e      	beq.n	8006d9e <UART_SetConfig+0x8aa>
 8006d40:	e031      	b.n	8006da6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d42:	f7fc f9c5 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8006d46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d48:	e033      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d4a:	f7fc f9d7 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8006d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d50:	e02f      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fd fc06 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d60:	e027      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d62:	f107 0318 	add.w	r3, r7, #24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fd fd52 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d70:	e01f      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d72:	4b2d      	ldr	r3, [pc, #180]	@ (8006e28 <UART_SetConfig+0x934>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d009      	beq.n	8006d92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <UART_SetConfig+0x934>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	08db      	lsrs	r3, r3, #3
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	4a24      	ldr	r2, [pc, #144]	@ (8006e1c <UART_SetConfig+0x928>)
 8006d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d90:	e00f      	b.n	8006db2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d92:	4b22      	ldr	r3, [pc, #136]	@ (8006e1c <UART_SetConfig+0x928>)
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d96:	e00c      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d98:	4b21      	ldr	r3, [pc, #132]	@ (8006e20 <UART_SetConfig+0x92c>)
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d9c:	e009      	b.n	8006db2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da4:	e005      	b.n	8006db2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80e7 	beq.w	8006f88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	4a19      	ldr	r2, [pc, #100]	@ (8006e24 <UART_SetConfig+0x930>)
 8006dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dcc:	005a      	lsls	r2, r3, #1
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	441a      	add	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	2b0f      	cmp	r3, #15
 8006de4:	d916      	bls.n	8006e14 <UART_SetConfig+0x920>
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dec:	d212      	bcs.n	8006e14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f023 030f 	bic.w	r3, r3, #15
 8006df6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e06:	4313      	orrs	r3, r2
 8006e08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	e0b9      	b.n	8006f88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e1a:	e0b5      	b.n	8006f88 <UART_SetConfig+0xa94>
 8006e1c:	03d09000 	.word	0x03d09000
 8006e20:	003d0900 	.word	0x003d0900
 8006e24:	0800bdf4 	.word	0x0800bdf4
 8006e28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	dc49      	bgt.n	8006ec8 <UART_SetConfig+0x9d4>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	db7c      	blt.n	8006f32 <UART_SetConfig+0xa3e>
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	d87a      	bhi.n	8006f32 <UART_SetConfig+0xa3e>
 8006e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e44 <UART_SetConfig+0x950>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006ecf 	.word	0x08006ecf
 8006e48:	08006ed7 	.word	0x08006ed7
 8006e4c:	08006f33 	.word	0x08006f33
 8006e50:	08006f33 	.word	0x08006f33
 8006e54:	08006edf 	.word	0x08006edf
 8006e58:	08006f33 	.word	0x08006f33
 8006e5c:	08006f33 	.word	0x08006f33
 8006e60:	08006f33 	.word	0x08006f33
 8006e64:	08006eef 	.word	0x08006eef
 8006e68:	08006f33 	.word	0x08006f33
 8006e6c:	08006f33 	.word	0x08006f33
 8006e70:	08006f33 	.word	0x08006f33
 8006e74:	08006f33 	.word	0x08006f33
 8006e78:	08006f33 	.word	0x08006f33
 8006e7c:	08006f33 	.word	0x08006f33
 8006e80:	08006f33 	.word	0x08006f33
 8006e84:	08006eff 	.word	0x08006eff
 8006e88:	08006f33 	.word	0x08006f33
 8006e8c:	08006f33 	.word	0x08006f33
 8006e90:	08006f33 	.word	0x08006f33
 8006e94:	08006f33 	.word	0x08006f33
 8006e98:	08006f33 	.word	0x08006f33
 8006e9c:	08006f33 	.word	0x08006f33
 8006ea0:	08006f33 	.word	0x08006f33
 8006ea4:	08006f33 	.word	0x08006f33
 8006ea8:	08006f33 	.word	0x08006f33
 8006eac:	08006f33 	.word	0x08006f33
 8006eb0:	08006f33 	.word	0x08006f33
 8006eb4:	08006f33 	.word	0x08006f33
 8006eb8:	08006f33 	.word	0x08006f33
 8006ebc:	08006f33 	.word	0x08006f33
 8006ec0:	08006f33 	.word	0x08006f33
 8006ec4:	08006f25 	.word	0x08006f25
 8006ec8:	2b40      	cmp	r3, #64	@ 0x40
 8006eca:	d02e      	beq.n	8006f2a <UART_SetConfig+0xa36>
 8006ecc:	e031      	b.n	8006f32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ece:	f7fc f8ff 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8006ed2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ed4:	e033      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed6:	f7fc f911 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8006eda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006edc:	e02f      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fd fb40 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eec:	e027      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eee:	f107 0318 	add.w	r3, r7, #24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd fc8c 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006efc:	e01f      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efe:	4b2d      	ldr	r3, [pc, #180]	@ (8006fb4 <UART_SetConfig+0xac0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006fb4 <UART_SetConfig+0xac0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	08db      	lsrs	r3, r3, #3
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	4a28      	ldr	r2, [pc, #160]	@ (8006fb8 <UART_SetConfig+0xac4>)
 8006f16:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f1c:	e00f      	b.n	8006f3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f1e:	4b26      	ldr	r3, [pc, #152]	@ (8006fb8 <UART_SetConfig+0xac4>)
 8006f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f22:	e00c      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f24:	4b25      	ldr	r3, [pc, #148]	@ (8006fbc <UART_SetConfig+0xac8>)
 8006f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f28:	e009      	b.n	8006f3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f30:	e005      	b.n	8006f3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d021      	beq.n	8006f88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <UART_SetConfig+0xacc>)
 8006f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f52:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	441a      	add	r2, r3
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6a:	2b0f      	cmp	r3, #15
 8006f6c:	d909      	bls.n	8006f82 <UART_SetConfig+0xa8e>
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f74:	d205      	bcs.n	8006f82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60da      	str	r2, [r3, #12]
 8006f80:	e002      	b.n	8006f88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fa4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3748      	adds	r7, #72	@ 0x48
 8006fac:	46bd      	mov	sp, r7
 8006fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fb2:	bf00      	nop
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	03d09000 	.word	0x03d09000
 8006fbc:	003d0900 	.word	0x003d0900
 8006fc0:	0800bdf4 	.word	0x0800bdf4

08006fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01a      	beq.n	80070da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070c2:	d10a      	bne.n	80070da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b098      	sub	sp, #96	@ 0x60
 800710c:	af02      	add	r7, sp, #8
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007118:	f7fa fc58 	bl	80019cc <HAL_GetTick>
 800711c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b08      	cmp	r3, #8
 800712a:	d12f      	bne.n	800718c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800712c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007134:	2200      	movs	r2, #0
 8007136:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f88e 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d022      	beq.n	800718c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800715a:	653b      	str	r3, [r7, #80]	@ 0x50
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007164:	647b      	str	r3, [r7, #68]	@ 0x44
 8007166:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800716a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e6      	bne.n	8007146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e063      	b.n	8007254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b04      	cmp	r3, #4
 8007198:	d149      	bne.n	800722e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800719a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a2:	2200      	movs	r2, #0
 80071a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f857 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d03c      	beq.n	800722e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	623b      	str	r3, [r7, #32]
   return(result);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e6      	bne.n	80071b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007206:	61fa      	str	r2, [r7, #28]
 8007208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	69b9      	ldr	r1, [r7, #24]
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	617b      	str	r3, [r7, #20]
   return(result);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e012      	b.n	8007254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3758      	adds	r7, #88	@ 0x58
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4613      	mov	r3, r2
 800726a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726c:	e04f      	b.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d04b      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007276:	f7fa fba9 	bl	80019cc <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	429a      	cmp	r2, r3
 8007284:	d302      	bcc.n	800728c <UART_WaitOnFlagUntilTimeout+0x30>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e04e      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	d037      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b80      	cmp	r3, #128	@ 0x80
 80072a2:	d034      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b40      	cmp	r3, #64	@ 0x40
 80072a8:	d031      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d110      	bne.n	80072da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2208      	movs	r2, #8
 80072be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 f839 	bl	8007338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2208      	movs	r2, #8
 80072ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e029      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e8:	d111      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f81f 	bl	8007338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e00f      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4013      	ands	r3, r2
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	429a      	cmp	r2, r3
 800731c:	bf0c      	ite	eq
 800731e:	2301      	moveq	r3, #1
 8007320:	2300      	movne	r3, #0
 8007322:	b2db      	uxtb	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	429a      	cmp	r2, r3
 800732a:	d0a0      	beq.n	800726e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b095      	sub	sp, #84	@ 0x54
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800735e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007360:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e6      	bne.n	8007340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	61fb      	str	r3, [r7, #28]
   return(result);
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	4b1e      	ldr	r3, [pc, #120]	@ (8007400 <UART_EndRxTransfer+0xc8>)
 8007386:	4013      	ands	r3, r2
 8007388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3308      	adds	r3, #8
 8007390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e5      	bne.n	8007372 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d118      	bne.n	80073e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f023 0310 	bic.w	r3, r3, #16
 80073c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6979      	ldr	r1, [r7, #20]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	613b      	str	r3, [r7, #16]
   return(result);
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e6      	bne.n	80073ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073f4:	bf00      	nop
 80073f6:	3754      	adds	r7, #84	@ 0x54
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	effffffe 	.word	0xeffffffe

08007404 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UARTEx_DisableFifoMode+0x16>
 8007416:	2302      	movs	r3, #2
 8007418:	e027      	b.n	800746a <HAL_UARTEx_DisableFifoMode+0x66>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	@ 0x24
 8007426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007448:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800748a:	2302      	movs	r3, #2
 800748c:	e02d      	b.n	80074ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2224      	movs	r2, #36	@ 0x24
 800749a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f850 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007506:	2302      	movs	r3, #2
 8007508:	e02d      	b.n	8007566 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2224      	movs	r2, #36	@ 0x24
 8007516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f812 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007590:	e031      	b.n	80075f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007592:	2310      	movs	r3, #16
 8007594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007596:	2310      	movs	r3, #16
 8007598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	0e5b      	lsrs	r3, r3, #25
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	0f5b      	lsrs	r3, r3, #29
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	7b3a      	ldrb	r2, [r7, #12]
 80075be:	4911      	ldr	r1, [pc, #68]	@ (8007604 <UARTEx_SetNbDataToProcess+0x94>)
 80075c0:	5c8a      	ldrb	r2, [r1, r2]
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075c6:	7b3a      	ldrb	r2, [r7, #12]
 80075c8:	490f      	ldr	r1, [pc, #60]	@ (8007608 <UARTEx_SetNbDataToProcess+0x98>)
 80075ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	7b7a      	ldrb	r2, [r7, #13]
 80075dc:	4909      	ldr	r1, [pc, #36]	@ (8007604 <UARTEx_SetNbDataToProcess+0x94>)
 80075de:	5c8a      	ldrb	r2, [r1, r2]
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075e4:	7b7a      	ldrb	r2, [r7, #13]
 80075e6:	4908      	ldr	r1, [pc, #32]	@ (8007608 <UARTEx_SetNbDataToProcess+0x98>)
 80075e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	0800be0c 	.word	0x0800be0c
 8007608:	0800be14 	.word	0x0800be14

0800760c <__cvt>:
 800760c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760e:	ed2d 8b02 	vpush	{d8}
 8007612:	eeb0 8b40 	vmov.f64	d8, d0
 8007616:	b085      	sub	sp, #20
 8007618:	4617      	mov	r7, r2
 800761a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800761c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800761e:	ee18 2a90 	vmov	r2, s17
 8007622:	f025 0520 	bic.w	r5, r5, #32
 8007626:	2a00      	cmp	r2, #0
 8007628:	bfb6      	itet	lt
 800762a:	222d      	movlt	r2, #45	@ 0x2d
 800762c:	2200      	movge	r2, #0
 800762e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007632:	2d46      	cmp	r5, #70	@ 0x46
 8007634:	460c      	mov	r4, r1
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	d004      	beq.n	8007644 <__cvt+0x38>
 800763a:	2d45      	cmp	r5, #69	@ 0x45
 800763c:	d100      	bne.n	8007640 <__cvt+0x34>
 800763e:	3401      	adds	r4, #1
 8007640:	2102      	movs	r1, #2
 8007642:	e000      	b.n	8007646 <__cvt+0x3a>
 8007644:	2103      	movs	r1, #3
 8007646:	ab03      	add	r3, sp, #12
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	ab02      	add	r3, sp, #8
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	4622      	mov	r2, r4
 8007650:	4633      	mov	r3, r6
 8007652:	eeb0 0b48 	vmov.f64	d0, d8
 8007656:	f001 f883 	bl	8008760 <_dtoa_r>
 800765a:	2d47      	cmp	r5, #71	@ 0x47
 800765c:	d114      	bne.n	8007688 <__cvt+0x7c>
 800765e:	07fb      	lsls	r3, r7, #31
 8007660:	d50a      	bpl.n	8007678 <__cvt+0x6c>
 8007662:	1902      	adds	r2, r0, r4
 8007664:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766c:	bf08      	it	eq
 800766e:	9203      	streq	r2, [sp, #12]
 8007670:	2130      	movs	r1, #48	@ 0x30
 8007672:	9b03      	ldr	r3, [sp, #12]
 8007674:	4293      	cmp	r3, r2
 8007676:	d319      	bcc.n	80076ac <__cvt+0xa0>
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800767c:	1a1b      	subs	r3, r3, r0
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	b005      	add	sp, #20
 8007682:	ecbd 8b02 	vpop	{d8}
 8007686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007688:	2d46      	cmp	r5, #70	@ 0x46
 800768a:	eb00 0204 	add.w	r2, r0, r4
 800768e:	d1e9      	bne.n	8007664 <__cvt+0x58>
 8007690:	7803      	ldrb	r3, [r0, #0]
 8007692:	2b30      	cmp	r3, #48	@ 0x30
 8007694:	d107      	bne.n	80076a6 <__cvt+0x9a>
 8007696:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	bf1c      	itt	ne
 80076a0:	f1c4 0401 	rsbne	r4, r4, #1
 80076a4:	6034      	strne	r4, [r6, #0]
 80076a6:	6833      	ldr	r3, [r6, #0]
 80076a8:	441a      	add	r2, r3
 80076aa:	e7db      	b.n	8007664 <__cvt+0x58>
 80076ac:	1c5c      	adds	r4, r3, #1
 80076ae:	9403      	str	r4, [sp, #12]
 80076b0:	7019      	strb	r1, [r3, #0]
 80076b2:	e7de      	b.n	8007672 <__cvt+0x66>

080076b4 <__exponent>:
 80076b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076b6:	2900      	cmp	r1, #0
 80076b8:	bfba      	itte	lt
 80076ba:	4249      	neglt	r1, r1
 80076bc:	232d      	movlt	r3, #45	@ 0x2d
 80076be:	232b      	movge	r3, #43	@ 0x2b
 80076c0:	2909      	cmp	r1, #9
 80076c2:	7002      	strb	r2, [r0, #0]
 80076c4:	7043      	strb	r3, [r0, #1]
 80076c6:	dd29      	ble.n	800771c <__exponent+0x68>
 80076c8:	f10d 0307 	add.w	r3, sp, #7
 80076cc:	461d      	mov	r5, r3
 80076ce:	270a      	movs	r7, #10
 80076d0:	461a      	mov	r2, r3
 80076d2:	fbb1 f6f7 	udiv	r6, r1, r7
 80076d6:	fb07 1416 	mls	r4, r7, r6, r1
 80076da:	3430      	adds	r4, #48	@ 0x30
 80076dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076e0:	460c      	mov	r4, r1
 80076e2:	2c63      	cmp	r4, #99	@ 0x63
 80076e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80076e8:	4631      	mov	r1, r6
 80076ea:	dcf1      	bgt.n	80076d0 <__exponent+0x1c>
 80076ec:	3130      	adds	r1, #48	@ 0x30
 80076ee:	1e94      	subs	r4, r2, #2
 80076f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076f4:	1c41      	adds	r1, r0, #1
 80076f6:	4623      	mov	r3, r4
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	d30a      	bcc.n	8007712 <__exponent+0x5e>
 80076fc:	f10d 0309 	add.w	r3, sp, #9
 8007700:	1a9b      	subs	r3, r3, r2
 8007702:	42ac      	cmp	r4, r5
 8007704:	bf88      	it	hi
 8007706:	2300      	movhi	r3, #0
 8007708:	3302      	adds	r3, #2
 800770a:	4403      	add	r3, r0
 800770c:	1a18      	subs	r0, r3, r0
 800770e:	b003      	add	sp, #12
 8007710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007712:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007716:	f801 6f01 	strb.w	r6, [r1, #1]!
 800771a:	e7ed      	b.n	80076f8 <__exponent+0x44>
 800771c:	2330      	movs	r3, #48	@ 0x30
 800771e:	3130      	adds	r1, #48	@ 0x30
 8007720:	7083      	strb	r3, [r0, #2]
 8007722:	70c1      	strb	r1, [r0, #3]
 8007724:	1d03      	adds	r3, r0, #4
 8007726:	e7f1      	b.n	800770c <__exponent+0x58>

08007728 <_printf_float>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	b08d      	sub	sp, #52	@ 0x34
 800772e:	460c      	mov	r4, r1
 8007730:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007734:	4616      	mov	r6, r2
 8007736:	461f      	mov	r7, r3
 8007738:	4605      	mov	r5, r0
 800773a:	f000 ff0b 	bl	8008554 <_localeconv_r>
 800773e:	f8d0 b000 	ldr.w	fp, [r0]
 8007742:	4658      	mov	r0, fp
 8007744:	f7f8 fe1c 	bl	8000380 <strlen>
 8007748:	2300      	movs	r3, #0
 800774a:	930a      	str	r3, [sp, #40]	@ 0x28
 800774c:	f8d8 3000 	ldr.w	r3, [r8]
 8007750:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	9005      	str	r0, [sp, #20]
 8007758:	3307      	adds	r3, #7
 800775a:	f023 0307 	bic.w	r3, r3, #7
 800775e:	f103 0108 	add.w	r1, r3, #8
 8007762:	f8c8 1000 	str.w	r1, [r8]
 8007766:	ed93 0b00 	vldr	d0, [r3]
 800776a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80079c8 <_printf_float+0x2a0>
 800776e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007772:	eeb4 7b46 	vcmp.f64	d7, d6
 8007776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800777e:	dd24      	ble.n	80077ca <_printf_float+0xa2>
 8007780:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007788:	d502      	bpl.n	8007790 <_printf_float+0x68>
 800778a:	232d      	movs	r3, #45	@ 0x2d
 800778c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007790:	498f      	ldr	r1, [pc, #572]	@ (80079d0 <_printf_float+0x2a8>)
 8007792:	4b90      	ldr	r3, [pc, #576]	@ (80079d4 <_printf_float+0x2ac>)
 8007794:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007798:	bf94      	ite	ls
 800779a:	4688      	movls	r8, r1
 800779c:	4698      	movhi	r8, r3
 800779e:	f022 0204 	bic.w	r2, r2, #4
 80077a2:	2303      	movs	r3, #3
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	f04f 0a00 	mov.w	sl, #0
 80077ac:	9700      	str	r7, [sp, #0]
 80077ae:	4633      	mov	r3, r6
 80077b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80077b2:	4621      	mov	r1, r4
 80077b4:	4628      	mov	r0, r5
 80077b6:	f000 f9d1 	bl	8007b5c <_printf_common>
 80077ba:	3001      	adds	r0, #1
 80077bc:	f040 8089 	bne.w	80078d2 <_printf_float+0x1aa>
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	b00d      	add	sp, #52	@ 0x34
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80077ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d2:	d709      	bvc.n	80077e8 <_printf_float+0xc0>
 80077d4:	ee10 3a90 	vmov	r3, s1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bfbc      	itt	lt
 80077dc:	232d      	movlt	r3, #45	@ 0x2d
 80077de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077e2:	497d      	ldr	r1, [pc, #500]	@ (80079d8 <_printf_float+0x2b0>)
 80077e4:	4b7d      	ldr	r3, [pc, #500]	@ (80079dc <_printf_float+0x2b4>)
 80077e6:	e7d5      	b.n	8007794 <_printf_float+0x6c>
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	1c59      	adds	r1, r3, #1
 80077ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80077f0:	d139      	bne.n	8007866 <_printf_float+0x13e>
 80077f2:	2306      	movs	r3, #6
 80077f4:	6063      	str	r3, [r4, #4]
 80077f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077fa:	2300      	movs	r3, #0
 80077fc:	6022      	str	r2, [r4, #0]
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	ab0a      	add	r3, sp, #40	@ 0x28
 8007802:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007806:	ab09      	add	r3, sp, #36	@ 0x24
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	6861      	ldr	r1, [r4, #4]
 800780c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007810:	4628      	mov	r0, r5
 8007812:	f7ff fefb 	bl	800760c <__cvt>
 8007816:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800781a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800781c:	4680      	mov	r8, r0
 800781e:	d129      	bne.n	8007874 <_printf_float+0x14c>
 8007820:	1cc8      	adds	r0, r1, #3
 8007822:	db02      	blt.n	800782a <_printf_float+0x102>
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	4299      	cmp	r1, r3
 8007828:	dd41      	ble.n	80078ae <_printf_float+0x186>
 800782a:	f1a9 0902 	sub.w	r9, r9, #2
 800782e:	fa5f f989 	uxtb.w	r9, r9
 8007832:	3901      	subs	r1, #1
 8007834:	464a      	mov	r2, r9
 8007836:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800783a:	9109      	str	r1, [sp, #36]	@ 0x24
 800783c:	f7ff ff3a 	bl	80076b4 <__exponent>
 8007840:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007842:	1813      	adds	r3, r2, r0
 8007844:	2a01      	cmp	r2, #1
 8007846:	4682      	mov	sl, r0
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	dc02      	bgt.n	8007852 <_printf_float+0x12a>
 800784c:	6822      	ldr	r2, [r4, #0]
 800784e:	07d2      	lsls	r2, r2, #31
 8007850:	d501      	bpl.n	8007856 <_printf_float+0x12e>
 8007852:	3301      	adds	r3, #1
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0a6      	beq.n	80077ac <_printf_float+0x84>
 800785e:	232d      	movs	r3, #45	@ 0x2d
 8007860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007864:	e7a2      	b.n	80077ac <_printf_float+0x84>
 8007866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800786a:	d1c4      	bne.n	80077f6 <_printf_float+0xce>
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1c2      	bne.n	80077f6 <_printf_float+0xce>
 8007870:	2301      	movs	r3, #1
 8007872:	e7bf      	b.n	80077f4 <_printf_float+0xcc>
 8007874:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007878:	d9db      	bls.n	8007832 <_printf_float+0x10a>
 800787a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800787e:	d118      	bne.n	80078b2 <_printf_float+0x18a>
 8007880:	2900      	cmp	r1, #0
 8007882:	6863      	ldr	r3, [r4, #4]
 8007884:	dd0b      	ble.n	800789e <_printf_float+0x176>
 8007886:	6121      	str	r1, [r4, #16]
 8007888:	b913      	cbnz	r3, 8007890 <_printf_float+0x168>
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	07d0      	lsls	r0, r2, #31
 800788e:	d502      	bpl.n	8007896 <_printf_float+0x16e>
 8007890:	3301      	adds	r3, #1
 8007892:	440b      	add	r3, r1
 8007894:	6123      	str	r3, [r4, #16]
 8007896:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007898:	f04f 0a00 	mov.w	sl, #0
 800789c:	e7db      	b.n	8007856 <_printf_float+0x12e>
 800789e:	b913      	cbnz	r3, 80078a6 <_printf_float+0x17e>
 80078a0:	6822      	ldr	r2, [r4, #0]
 80078a2:	07d2      	lsls	r2, r2, #31
 80078a4:	d501      	bpl.n	80078aa <_printf_float+0x182>
 80078a6:	3302      	adds	r3, #2
 80078a8:	e7f4      	b.n	8007894 <_printf_float+0x16c>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e7f2      	b.n	8007894 <_printf_float+0x16c>
 80078ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80078b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b4:	4299      	cmp	r1, r3
 80078b6:	db05      	blt.n	80078c4 <_printf_float+0x19c>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	6121      	str	r1, [r4, #16]
 80078bc:	07d8      	lsls	r0, r3, #31
 80078be:	d5ea      	bpl.n	8007896 <_printf_float+0x16e>
 80078c0:	1c4b      	adds	r3, r1, #1
 80078c2:	e7e7      	b.n	8007894 <_printf_float+0x16c>
 80078c4:	2900      	cmp	r1, #0
 80078c6:	bfd4      	ite	le
 80078c8:	f1c1 0202 	rsble	r2, r1, #2
 80078cc:	2201      	movgt	r2, #1
 80078ce:	4413      	add	r3, r2
 80078d0:	e7e0      	b.n	8007894 <_printf_float+0x16c>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	055a      	lsls	r2, r3, #21
 80078d6:	d407      	bmi.n	80078e8 <_printf_float+0x1c0>
 80078d8:	6923      	ldr	r3, [r4, #16]
 80078da:	4642      	mov	r2, r8
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	d12a      	bne.n	800793c <_printf_float+0x214>
 80078e6:	e76b      	b.n	80077c0 <_printf_float+0x98>
 80078e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80078ec:	f240 80e0 	bls.w	8007ab0 <_printf_float+0x388>
 80078f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80078f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fc:	d133      	bne.n	8007966 <_printf_float+0x23e>
 80078fe:	4a38      	ldr	r2, [pc, #224]	@ (80079e0 <_printf_float+0x2b8>)
 8007900:	2301      	movs	r3, #1
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	47b8      	blx	r7
 8007908:	3001      	adds	r0, #1
 800790a:	f43f af59 	beq.w	80077c0 <_printf_float+0x98>
 800790e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007912:	4543      	cmp	r3, r8
 8007914:	db02      	blt.n	800791c <_printf_float+0x1f4>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	07d8      	lsls	r0, r3, #31
 800791a:	d50f      	bpl.n	800793c <_printf_float+0x214>
 800791c:	9b05      	ldr	r3, [sp, #20]
 800791e:	465a      	mov	r2, fp
 8007920:	4631      	mov	r1, r6
 8007922:	4628      	mov	r0, r5
 8007924:	47b8      	blx	r7
 8007926:	3001      	adds	r0, #1
 8007928:	f43f af4a 	beq.w	80077c0 <_printf_float+0x98>
 800792c:	f04f 0900 	mov.w	r9, #0
 8007930:	f108 38ff 	add.w	r8, r8, #4294967295
 8007934:	f104 0a1a 	add.w	sl, r4, #26
 8007938:	45c8      	cmp	r8, r9
 800793a:	dc09      	bgt.n	8007950 <_printf_float+0x228>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	079b      	lsls	r3, r3, #30
 8007940:	f100 8107 	bmi.w	8007b52 <_printf_float+0x42a>
 8007944:	68e0      	ldr	r0, [r4, #12]
 8007946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007948:	4298      	cmp	r0, r3
 800794a:	bfb8      	it	lt
 800794c:	4618      	movlt	r0, r3
 800794e:	e739      	b.n	80077c4 <_printf_float+0x9c>
 8007950:	2301      	movs	r3, #1
 8007952:	4652      	mov	r2, sl
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	f43f af30 	beq.w	80077c0 <_printf_float+0x98>
 8007960:	f109 0901 	add.w	r9, r9, #1
 8007964:	e7e8      	b.n	8007938 <_printf_float+0x210>
 8007966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	dc3b      	bgt.n	80079e4 <_printf_float+0x2bc>
 800796c:	4a1c      	ldr	r2, [pc, #112]	@ (80079e0 <_printf_float+0x2b8>)
 800796e:	2301      	movs	r3, #1
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	f43f af22 	beq.w	80077c0 <_printf_float+0x98>
 800797c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007980:	ea59 0303 	orrs.w	r3, r9, r3
 8007984:	d102      	bne.n	800798c <_printf_float+0x264>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	07d9      	lsls	r1, r3, #31
 800798a:	d5d7      	bpl.n	800793c <_printf_float+0x214>
 800798c:	9b05      	ldr	r3, [sp, #20]
 800798e:	465a      	mov	r2, fp
 8007990:	4631      	mov	r1, r6
 8007992:	4628      	mov	r0, r5
 8007994:	47b8      	blx	r7
 8007996:	3001      	adds	r0, #1
 8007998:	f43f af12 	beq.w	80077c0 <_printf_float+0x98>
 800799c:	f04f 0a00 	mov.w	sl, #0
 80079a0:	f104 0b1a 	add.w	fp, r4, #26
 80079a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079a6:	425b      	negs	r3, r3
 80079a8:	4553      	cmp	r3, sl
 80079aa:	dc01      	bgt.n	80079b0 <_printf_float+0x288>
 80079ac:	464b      	mov	r3, r9
 80079ae:	e794      	b.n	80078da <_printf_float+0x1b2>
 80079b0:	2301      	movs	r3, #1
 80079b2:	465a      	mov	r2, fp
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f af00 	beq.w	80077c0 <_printf_float+0x98>
 80079c0:	f10a 0a01 	add.w	sl, sl, #1
 80079c4:	e7ee      	b.n	80079a4 <_printf_float+0x27c>
 80079c6:	bf00      	nop
 80079c8:	ffffffff 	.word	0xffffffff
 80079cc:	7fefffff 	.word	0x7fefffff
 80079d0:	0800be1c 	.word	0x0800be1c
 80079d4:	0800be20 	.word	0x0800be20
 80079d8:	0800be24 	.word	0x0800be24
 80079dc:	0800be28 	.word	0x0800be28
 80079e0:	0800be2c 	.word	0x0800be2c
 80079e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079ea:	4553      	cmp	r3, sl
 80079ec:	bfa8      	it	ge
 80079ee:	4653      	movge	r3, sl
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	4699      	mov	r9, r3
 80079f4:	dc37      	bgt.n	8007a66 <_printf_float+0x33e>
 80079f6:	2300      	movs	r3, #0
 80079f8:	9307      	str	r3, [sp, #28]
 80079fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079fe:	f104 021a 	add.w	r2, r4, #26
 8007a02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a04:	9907      	ldr	r1, [sp, #28]
 8007a06:	9306      	str	r3, [sp, #24]
 8007a08:	eba3 0309 	sub.w	r3, r3, r9
 8007a0c:	428b      	cmp	r3, r1
 8007a0e:	dc31      	bgt.n	8007a74 <_printf_float+0x34c>
 8007a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a12:	459a      	cmp	sl, r3
 8007a14:	dc3b      	bgt.n	8007a8e <_printf_float+0x366>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	07da      	lsls	r2, r3, #31
 8007a1a:	d438      	bmi.n	8007a8e <_printf_float+0x366>
 8007a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1e:	ebaa 0903 	sub.w	r9, sl, r3
 8007a22:	9b06      	ldr	r3, [sp, #24]
 8007a24:	ebaa 0303 	sub.w	r3, sl, r3
 8007a28:	4599      	cmp	r9, r3
 8007a2a:	bfa8      	it	ge
 8007a2c:	4699      	movge	r9, r3
 8007a2e:	f1b9 0f00 	cmp.w	r9, #0
 8007a32:	dc34      	bgt.n	8007a9e <_printf_float+0x376>
 8007a34:	f04f 0800 	mov.w	r8, #0
 8007a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a3c:	f104 0b1a 	add.w	fp, r4, #26
 8007a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a42:	ebaa 0303 	sub.w	r3, sl, r3
 8007a46:	eba3 0309 	sub.w	r3, r3, r9
 8007a4a:	4543      	cmp	r3, r8
 8007a4c:	f77f af76 	ble.w	800793c <_printf_float+0x214>
 8007a50:	2301      	movs	r3, #1
 8007a52:	465a      	mov	r2, fp
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f aeb0 	beq.w	80077c0 <_printf_float+0x98>
 8007a60:	f108 0801 	add.w	r8, r8, #1
 8007a64:	e7ec      	b.n	8007a40 <_printf_float+0x318>
 8007a66:	4642      	mov	r2, r8
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d1c1      	bne.n	80079f6 <_printf_float+0x2ce>
 8007a72:	e6a5      	b.n	80077c0 <_printf_float+0x98>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	9206      	str	r2, [sp, #24]
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f ae9e 	beq.w	80077c0 <_printf_float+0x98>
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	9a06      	ldr	r2, [sp, #24]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	9307      	str	r3, [sp, #28]
 8007a8c:	e7b9      	b.n	8007a02 <_printf_float+0x2da>
 8007a8e:	9b05      	ldr	r3, [sp, #20]
 8007a90:	465a      	mov	r2, fp
 8007a92:	4631      	mov	r1, r6
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b8      	blx	r7
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d1bf      	bne.n	8007a1c <_printf_float+0x2f4>
 8007a9c:	e690      	b.n	80077c0 <_printf_float+0x98>
 8007a9e:	9a06      	ldr	r2, [sp, #24]
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	4442      	add	r2, r8
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b8      	blx	r7
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d1c2      	bne.n	8007a34 <_printf_float+0x30c>
 8007aae:	e687      	b.n	80077c0 <_printf_float+0x98>
 8007ab0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007ab4:	f1b9 0f01 	cmp.w	r9, #1
 8007ab8:	dc01      	bgt.n	8007abe <_printf_float+0x396>
 8007aba:	07db      	lsls	r3, r3, #31
 8007abc:	d536      	bpl.n	8007b2c <_printf_float+0x404>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b8      	blx	r7
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f43f ae79 	beq.w	80077c0 <_printf_float+0x98>
 8007ace:	9b05      	ldr	r3, [sp, #20]
 8007ad0:	465a      	mov	r2, fp
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f43f ae71 	beq.w	80077c0 <_printf_float+0x98>
 8007ade:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007ae2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aea:	f109 39ff 	add.w	r9, r9, #4294967295
 8007aee:	d018      	beq.n	8007b22 <_printf_float+0x3fa>
 8007af0:	464b      	mov	r3, r9
 8007af2:	f108 0201 	add.w	r2, r8, #1
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	d10c      	bne.n	8007b1a <_printf_float+0x3f2>
 8007b00:	e65e      	b.n	80077c0 <_printf_float+0x98>
 8007b02:	2301      	movs	r3, #1
 8007b04:	465a      	mov	r2, fp
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b8      	blx	r7
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	f43f ae57 	beq.w	80077c0 <_printf_float+0x98>
 8007b12:	f108 0801 	add.w	r8, r8, #1
 8007b16:	45c8      	cmp	r8, r9
 8007b18:	dbf3      	blt.n	8007b02 <_printf_float+0x3da>
 8007b1a:	4653      	mov	r3, sl
 8007b1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b20:	e6dc      	b.n	80078dc <_printf_float+0x1b4>
 8007b22:	f04f 0800 	mov.w	r8, #0
 8007b26:	f104 0b1a 	add.w	fp, r4, #26
 8007b2a:	e7f4      	b.n	8007b16 <_printf_float+0x3ee>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	4642      	mov	r2, r8
 8007b30:	e7e1      	b.n	8007af6 <_printf_float+0x3ce>
 8007b32:	2301      	movs	r3, #1
 8007b34:	464a      	mov	r2, r9
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	f43f ae3f 	beq.w	80077c0 <_printf_float+0x98>
 8007b42:	f108 0801 	add.w	r8, r8, #1
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b4a:	1a5b      	subs	r3, r3, r1
 8007b4c:	4543      	cmp	r3, r8
 8007b4e:	dcf0      	bgt.n	8007b32 <_printf_float+0x40a>
 8007b50:	e6f8      	b.n	8007944 <_printf_float+0x21c>
 8007b52:	f04f 0800 	mov.w	r8, #0
 8007b56:	f104 0919 	add.w	r9, r4, #25
 8007b5a:	e7f4      	b.n	8007b46 <_printf_float+0x41e>

08007b5c <_printf_common>:
 8007b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	4616      	mov	r6, r2
 8007b62:	4698      	mov	r8, r3
 8007b64:	688a      	ldr	r2, [r1, #8]
 8007b66:	690b      	ldr	r3, [r1, #16]
 8007b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	bfb8      	it	lt
 8007b70:	4613      	movlt	r3, r2
 8007b72:	6033      	str	r3, [r6, #0]
 8007b74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b78:	4607      	mov	r7, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	b10a      	cbz	r2, 8007b82 <_printf_common+0x26>
 8007b7e:	3301      	adds	r3, #1
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	0699      	lsls	r1, r3, #26
 8007b86:	bf42      	ittt	mi
 8007b88:	6833      	ldrmi	r3, [r6, #0]
 8007b8a:	3302      	addmi	r3, #2
 8007b8c:	6033      	strmi	r3, [r6, #0]
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	f015 0506 	ands.w	r5, r5, #6
 8007b94:	d106      	bne.n	8007ba4 <_printf_common+0x48>
 8007b96:	f104 0a19 	add.w	sl, r4, #25
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	6832      	ldr	r2, [r6, #0]
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	dc26      	bgt.n	8007bf2 <_printf_common+0x96>
 8007ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	3b00      	subs	r3, #0
 8007bac:	bf18      	it	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	0692      	lsls	r2, r2, #26
 8007bb2:	d42b      	bmi.n	8007c0c <_printf_common+0xb0>
 8007bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bb8:	4641      	mov	r1, r8
 8007bba:	4638      	mov	r0, r7
 8007bbc:	47c8      	blx	r9
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	d01e      	beq.n	8007c00 <_printf_common+0xa4>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	6922      	ldr	r2, [r4, #16]
 8007bc6:	f003 0306 	and.w	r3, r3, #6
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	bf02      	ittt	eq
 8007bce:	68e5      	ldreq	r5, [r4, #12]
 8007bd0:	6833      	ldreq	r3, [r6, #0]
 8007bd2:	1aed      	subeq	r5, r5, r3
 8007bd4:	68a3      	ldr	r3, [r4, #8]
 8007bd6:	bf0c      	ite	eq
 8007bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bdc:	2500      	movne	r5, #0
 8007bde:	4293      	cmp	r3, r2
 8007be0:	bfc4      	itt	gt
 8007be2:	1a9b      	subgt	r3, r3, r2
 8007be4:	18ed      	addgt	r5, r5, r3
 8007be6:	2600      	movs	r6, #0
 8007be8:	341a      	adds	r4, #26
 8007bea:	42b5      	cmp	r5, r6
 8007bec:	d11a      	bne.n	8007c24 <_printf_common+0xc8>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	e008      	b.n	8007c04 <_printf_common+0xa8>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	4641      	mov	r1, r8
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	47c8      	blx	r9
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d103      	bne.n	8007c08 <_printf_common+0xac>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	3501      	adds	r5, #1
 8007c0a:	e7c6      	b.n	8007b9a <_printf_common+0x3e>
 8007c0c:	18e1      	adds	r1, r4, r3
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	2030      	movs	r0, #48	@ 0x30
 8007c12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c16:	4422      	add	r2, r4
 8007c18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c20:	3302      	adds	r3, #2
 8007c22:	e7c7      	b.n	8007bb4 <_printf_common+0x58>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4622      	mov	r2, r4
 8007c28:	4641      	mov	r1, r8
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c8      	blx	r9
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d0e6      	beq.n	8007c00 <_printf_common+0xa4>
 8007c32:	3601      	adds	r6, #1
 8007c34:	e7d9      	b.n	8007bea <_printf_common+0x8e>
	...

08007c38 <_printf_i>:
 8007c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	7e0f      	ldrb	r7, [r1, #24]
 8007c3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c40:	2f78      	cmp	r7, #120	@ 0x78
 8007c42:	4691      	mov	r9, r2
 8007c44:	4680      	mov	r8, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	469a      	mov	sl, r3
 8007c4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c4e:	d807      	bhi.n	8007c60 <_printf_i+0x28>
 8007c50:	2f62      	cmp	r7, #98	@ 0x62
 8007c52:	d80a      	bhi.n	8007c6a <_printf_i+0x32>
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	f000 80d2 	beq.w	8007dfe <_printf_i+0x1c6>
 8007c5a:	2f58      	cmp	r7, #88	@ 0x58
 8007c5c:	f000 80b9 	beq.w	8007dd2 <_printf_i+0x19a>
 8007c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c68:	e03a      	b.n	8007ce0 <_printf_i+0xa8>
 8007c6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c6e:	2b15      	cmp	r3, #21
 8007c70:	d8f6      	bhi.n	8007c60 <_printf_i+0x28>
 8007c72:	a101      	add	r1, pc, #4	@ (adr r1, 8007c78 <_printf_i+0x40>)
 8007c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007ce5 	.word	0x08007ce5
 8007c80:	08007c61 	.word	0x08007c61
 8007c84:	08007c61 	.word	0x08007c61
 8007c88:	08007c61 	.word	0x08007c61
 8007c8c:	08007c61 	.word	0x08007c61
 8007c90:	08007ce5 	.word	0x08007ce5
 8007c94:	08007c61 	.word	0x08007c61
 8007c98:	08007c61 	.word	0x08007c61
 8007c9c:	08007c61 	.word	0x08007c61
 8007ca0:	08007c61 	.word	0x08007c61
 8007ca4:	08007de5 	.word	0x08007de5
 8007ca8:	08007d0f 	.word	0x08007d0f
 8007cac:	08007d9f 	.word	0x08007d9f
 8007cb0:	08007c61 	.word	0x08007c61
 8007cb4:	08007c61 	.word	0x08007c61
 8007cb8:	08007e07 	.word	0x08007e07
 8007cbc:	08007c61 	.word	0x08007c61
 8007cc0:	08007d0f 	.word	0x08007d0f
 8007cc4:	08007c61 	.word	0x08007c61
 8007cc8:	08007c61 	.word	0x08007c61
 8007ccc:	08007da7 	.word	0x08007da7
 8007cd0:	6833      	ldr	r3, [r6, #0]
 8007cd2:	1d1a      	adds	r2, r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6032      	str	r2, [r6, #0]
 8007cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e09d      	b.n	8007e20 <_printf_i+0x1e8>
 8007ce4:	6833      	ldr	r3, [r6, #0]
 8007ce6:	6820      	ldr	r0, [r4, #0]
 8007ce8:	1d19      	adds	r1, r3, #4
 8007cea:	6031      	str	r1, [r6, #0]
 8007cec:	0606      	lsls	r6, r0, #24
 8007cee:	d501      	bpl.n	8007cf4 <_printf_i+0xbc>
 8007cf0:	681d      	ldr	r5, [r3, #0]
 8007cf2:	e003      	b.n	8007cfc <_printf_i+0xc4>
 8007cf4:	0645      	lsls	r5, r0, #25
 8007cf6:	d5fb      	bpl.n	8007cf0 <_printf_i+0xb8>
 8007cf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	da03      	bge.n	8007d08 <_printf_i+0xd0>
 8007d00:	232d      	movs	r3, #45	@ 0x2d
 8007d02:	426d      	negs	r5, r5
 8007d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d08:	4859      	ldr	r0, [pc, #356]	@ (8007e70 <_printf_i+0x238>)
 8007d0a:	230a      	movs	r3, #10
 8007d0c:	e011      	b.n	8007d32 <_printf_i+0xfa>
 8007d0e:	6821      	ldr	r1, [r4, #0]
 8007d10:	6833      	ldr	r3, [r6, #0]
 8007d12:	0608      	lsls	r0, r1, #24
 8007d14:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d18:	d402      	bmi.n	8007d20 <_printf_i+0xe8>
 8007d1a:	0649      	lsls	r1, r1, #25
 8007d1c:	bf48      	it	mi
 8007d1e:	b2ad      	uxthmi	r5, r5
 8007d20:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d22:	4853      	ldr	r0, [pc, #332]	@ (8007e70 <_printf_i+0x238>)
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	bf14      	ite	ne
 8007d28:	230a      	movne	r3, #10
 8007d2a:	2308      	moveq	r3, #8
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d32:	6866      	ldr	r6, [r4, #4]
 8007d34:	60a6      	str	r6, [r4, #8]
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	bfa2      	ittt	ge
 8007d3a:	6821      	ldrge	r1, [r4, #0]
 8007d3c:	f021 0104 	bicge.w	r1, r1, #4
 8007d40:	6021      	strge	r1, [r4, #0]
 8007d42:	b90d      	cbnz	r5, 8007d48 <_printf_i+0x110>
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	d04b      	beq.n	8007de0 <_printf_i+0x1a8>
 8007d48:	4616      	mov	r6, r2
 8007d4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d4e:	fb03 5711 	mls	r7, r3, r1, r5
 8007d52:	5dc7      	ldrb	r7, [r0, r7]
 8007d54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d58:	462f      	mov	r7, r5
 8007d5a:	42bb      	cmp	r3, r7
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	d9f4      	bls.n	8007d4a <_printf_i+0x112>
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d10b      	bne.n	8007d7c <_printf_i+0x144>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	07df      	lsls	r7, r3, #31
 8007d68:	d508      	bpl.n	8007d7c <_printf_i+0x144>
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	6861      	ldr	r1, [r4, #4]
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	bfde      	ittt	le
 8007d72:	2330      	movle	r3, #48	@ 0x30
 8007d74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d7c:	1b92      	subs	r2, r2, r6
 8007d7e:	6122      	str	r2, [r4, #16]
 8007d80:	f8cd a000 	str.w	sl, [sp]
 8007d84:	464b      	mov	r3, r9
 8007d86:	aa03      	add	r2, sp, #12
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7ff fee6 	bl	8007b5c <_printf_common>
 8007d90:	3001      	adds	r0, #1
 8007d92:	d14a      	bne.n	8007e2a <_printf_i+0x1f2>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	b004      	add	sp, #16
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f043 0320 	orr.w	r3, r3, #32
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	4833      	ldr	r0, [pc, #204]	@ (8007e74 <_printf_i+0x23c>)
 8007da8:	2778      	movs	r7, #120	@ 0x78
 8007daa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	6831      	ldr	r1, [r6, #0]
 8007db2:	061f      	lsls	r7, r3, #24
 8007db4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007db8:	d402      	bmi.n	8007dc0 <_printf_i+0x188>
 8007dba:	065f      	lsls	r7, r3, #25
 8007dbc:	bf48      	it	mi
 8007dbe:	b2ad      	uxthmi	r5, r5
 8007dc0:	6031      	str	r1, [r6, #0]
 8007dc2:	07d9      	lsls	r1, r3, #31
 8007dc4:	bf44      	itt	mi
 8007dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dca:	6023      	strmi	r3, [r4, #0]
 8007dcc:	b11d      	cbz	r5, 8007dd6 <_printf_i+0x19e>
 8007dce:	2310      	movs	r3, #16
 8007dd0:	e7ac      	b.n	8007d2c <_printf_i+0xf4>
 8007dd2:	4827      	ldr	r0, [pc, #156]	@ (8007e70 <_printf_i+0x238>)
 8007dd4:	e7e9      	b.n	8007daa <_printf_i+0x172>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	f023 0320 	bic.w	r3, r3, #32
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	e7f6      	b.n	8007dce <_printf_i+0x196>
 8007de0:	4616      	mov	r6, r2
 8007de2:	e7bd      	b.n	8007d60 <_printf_i+0x128>
 8007de4:	6833      	ldr	r3, [r6, #0]
 8007de6:	6825      	ldr	r5, [r4, #0]
 8007de8:	6961      	ldr	r1, [r4, #20]
 8007dea:	1d18      	adds	r0, r3, #4
 8007dec:	6030      	str	r0, [r6, #0]
 8007dee:	062e      	lsls	r6, r5, #24
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	d501      	bpl.n	8007df8 <_printf_i+0x1c0>
 8007df4:	6019      	str	r1, [r3, #0]
 8007df6:	e002      	b.n	8007dfe <_printf_i+0x1c6>
 8007df8:	0668      	lsls	r0, r5, #25
 8007dfa:	d5fb      	bpl.n	8007df4 <_printf_i+0x1bc>
 8007dfc:	8019      	strh	r1, [r3, #0]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	4616      	mov	r6, r2
 8007e04:	e7bc      	b.n	8007d80 <_printf_i+0x148>
 8007e06:	6833      	ldr	r3, [r6, #0]
 8007e08:	1d1a      	adds	r2, r3, #4
 8007e0a:	6032      	str	r2, [r6, #0]
 8007e0c:	681e      	ldr	r6, [r3, #0]
 8007e0e:	6862      	ldr	r2, [r4, #4]
 8007e10:	2100      	movs	r1, #0
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7f8 fa64 	bl	80002e0 <memchr>
 8007e18:	b108      	cbz	r0, 8007e1e <_printf_i+0x1e6>
 8007e1a:	1b80      	subs	r0, r0, r6
 8007e1c:	6060      	str	r0, [r4, #4]
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	6123      	str	r3, [r4, #16]
 8007e22:	2300      	movs	r3, #0
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e28:	e7aa      	b.n	8007d80 <_printf_i+0x148>
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	4649      	mov	r1, r9
 8007e30:	4640      	mov	r0, r8
 8007e32:	47d0      	blx	sl
 8007e34:	3001      	adds	r0, #1
 8007e36:	d0ad      	beq.n	8007d94 <_printf_i+0x15c>
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	079b      	lsls	r3, r3, #30
 8007e3c:	d413      	bmi.n	8007e66 <_printf_i+0x22e>
 8007e3e:	68e0      	ldr	r0, [r4, #12]
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	4298      	cmp	r0, r3
 8007e44:	bfb8      	it	lt
 8007e46:	4618      	movlt	r0, r3
 8007e48:	e7a6      	b.n	8007d98 <_printf_i+0x160>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4640      	mov	r0, r8
 8007e52:	47d0      	blx	sl
 8007e54:	3001      	adds	r0, #1
 8007e56:	d09d      	beq.n	8007d94 <_printf_i+0x15c>
 8007e58:	3501      	adds	r5, #1
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	9903      	ldr	r1, [sp, #12]
 8007e5e:	1a5b      	subs	r3, r3, r1
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dcf2      	bgt.n	8007e4a <_printf_i+0x212>
 8007e64:	e7eb      	b.n	8007e3e <_printf_i+0x206>
 8007e66:	2500      	movs	r5, #0
 8007e68:	f104 0619 	add.w	r6, r4, #25
 8007e6c:	e7f5      	b.n	8007e5a <_printf_i+0x222>
 8007e6e:	bf00      	nop
 8007e70:	0800be2e 	.word	0x0800be2e
 8007e74:	0800be3f 	.word	0x0800be3f

08007e78 <_scanf_float>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	b087      	sub	sp, #28
 8007e7e:	4617      	mov	r7, r2
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	688b      	ldr	r3, [r1, #8]
 8007e84:	1e5a      	subs	r2, r3, #1
 8007e86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007e8a:	bf81      	itttt	hi
 8007e8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007e90:	eb03 0b05 	addhi.w	fp, r3, r5
 8007e94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007e98:	608b      	strhi	r3, [r1, #8]
 8007e9a:	680b      	ldr	r3, [r1, #0]
 8007e9c:	460a      	mov	r2, r1
 8007e9e:	f04f 0500 	mov.w	r5, #0
 8007ea2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007ea6:	f842 3b1c 	str.w	r3, [r2], #28
 8007eaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007eae:	4680      	mov	r8, r0
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	bf98      	it	ls
 8007eb4:	f04f 0b00 	movls.w	fp, #0
 8007eb8:	9201      	str	r2, [sp, #4]
 8007eba:	4616      	mov	r6, r2
 8007ebc:	46aa      	mov	sl, r5
 8007ebe:	46a9      	mov	r9, r5
 8007ec0:	9502      	str	r5, [sp, #8]
 8007ec2:	68a2      	ldr	r2, [r4, #8]
 8007ec4:	b152      	cbz	r2, 8007edc <_scanf_float+0x64>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b4e      	cmp	r3, #78	@ 0x4e
 8007ecc:	d864      	bhi.n	8007f98 <_scanf_float+0x120>
 8007ece:	2b40      	cmp	r3, #64	@ 0x40
 8007ed0:	d83c      	bhi.n	8007f4c <_scanf_float+0xd4>
 8007ed2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007ed6:	b2c8      	uxtb	r0, r1
 8007ed8:	280e      	cmp	r0, #14
 8007eda:	d93a      	bls.n	8007f52 <_scanf_float+0xda>
 8007edc:	f1b9 0f00 	cmp.w	r9, #0
 8007ee0:	d003      	beq.n	8007eea <_scanf_float+0x72>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eee:	f1ba 0f01 	cmp.w	sl, #1
 8007ef2:	f200 8117 	bhi.w	8008124 <_scanf_float+0x2ac>
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	429e      	cmp	r6, r3
 8007efa:	f200 8108 	bhi.w	800810e <_scanf_float+0x296>
 8007efe:	2001      	movs	r0, #1
 8007f00:	b007      	add	sp, #28
 8007f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007f0a:	2a0d      	cmp	r2, #13
 8007f0c:	d8e6      	bhi.n	8007edc <_scanf_float+0x64>
 8007f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8007f14 <_scanf_float+0x9c>)
 8007f10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f14:	0800805b 	.word	0x0800805b
 8007f18:	08007edd 	.word	0x08007edd
 8007f1c:	08007edd 	.word	0x08007edd
 8007f20:	08007edd 	.word	0x08007edd
 8007f24:	080080bb 	.word	0x080080bb
 8007f28:	08008093 	.word	0x08008093
 8007f2c:	08007edd 	.word	0x08007edd
 8007f30:	08007edd 	.word	0x08007edd
 8007f34:	08008069 	.word	0x08008069
 8007f38:	08007edd 	.word	0x08007edd
 8007f3c:	08007edd 	.word	0x08007edd
 8007f40:	08007edd 	.word	0x08007edd
 8007f44:	08007edd 	.word	0x08007edd
 8007f48:	08008021 	.word	0x08008021
 8007f4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007f50:	e7db      	b.n	8007f0a <_scanf_float+0x92>
 8007f52:	290e      	cmp	r1, #14
 8007f54:	d8c2      	bhi.n	8007edc <_scanf_float+0x64>
 8007f56:	a001      	add	r0, pc, #4	@ (adr r0, 8007f5c <_scanf_float+0xe4>)
 8007f58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f5c:	08008011 	.word	0x08008011
 8007f60:	08007edd 	.word	0x08007edd
 8007f64:	08008011 	.word	0x08008011
 8007f68:	080080a7 	.word	0x080080a7
 8007f6c:	08007edd 	.word	0x08007edd
 8007f70:	08007fb9 	.word	0x08007fb9
 8007f74:	08007ff7 	.word	0x08007ff7
 8007f78:	08007ff7 	.word	0x08007ff7
 8007f7c:	08007ff7 	.word	0x08007ff7
 8007f80:	08007ff7 	.word	0x08007ff7
 8007f84:	08007ff7 	.word	0x08007ff7
 8007f88:	08007ff7 	.word	0x08007ff7
 8007f8c:	08007ff7 	.word	0x08007ff7
 8007f90:	08007ff7 	.word	0x08007ff7
 8007f94:	08007ff7 	.word	0x08007ff7
 8007f98:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f9a:	d809      	bhi.n	8007fb0 <_scanf_float+0x138>
 8007f9c:	2b60      	cmp	r3, #96	@ 0x60
 8007f9e:	d8b2      	bhi.n	8007f06 <_scanf_float+0x8e>
 8007fa0:	2b54      	cmp	r3, #84	@ 0x54
 8007fa2:	d07b      	beq.n	800809c <_scanf_float+0x224>
 8007fa4:	2b59      	cmp	r3, #89	@ 0x59
 8007fa6:	d199      	bne.n	8007edc <_scanf_float+0x64>
 8007fa8:	2d07      	cmp	r5, #7
 8007faa:	d197      	bne.n	8007edc <_scanf_float+0x64>
 8007fac:	2508      	movs	r5, #8
 8007fae:	e02c      	b.n	800800a <_scanf_float+0x192>
 8007fb0:	2b74      	cmp	r3, #116	@ 0x74
 8007fb2:	d073      	beq.n	800809c <_scanf_float+0x224>
 8007fb4:	2b79      	cmp	r3, #121	@ 0x79
 8007fb6:	e7f6      	b.n	8007fa6 <_scanf_float+0x12e>
 8007fb8:	6821      	ldr	r1, [r4, #0]
 8007fba:	05c8      	lsls	r0, r1, #23
 8007fbc:	d51b      	bpl.n	8007ff6 <_scanf_float+0x17e>
 8007fbe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007fc2:	6021      	str	r1, [r4, #0]
 8007fc4:	f109 0901 	add.w	r9, r9, #1
 8007fc8:	f1bb 0f00 	cmp.w	fp, #0
 8007fcc:	d003      	beq.n	8007fd6 <_scanf_float+0x15e>
 8007fce:	3201      	adds	r2, #1
 8007fd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fd4:	60a2      	str	r2, [r4, #8]
 8007fd6:	68a3      	ldr	r3, [r4, #8]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	60a3      	str	r3, [r4, #8]
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	6123      	str	r3, [r4, #16]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	607b      	str	r3, [r7, #4]
 8007fea:	f340 8087 	ble.w	80080fc <_scanf_float+0x284>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	e765      	b.n	8007ec2 <_scanf_float+0x4a>
 8007ff6:	eb1a 0105 	adds.w	r1, sl, r5
 8007ffa:	f47f af6f 	bne.w	8007edc <_scanf_float+0x64>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008004:	6022      	str	r2, [r4, #0]
 8008006:	460d      	mov	r5, r1
 8008008:	468a      	mov	sl, r1
 800800a:	f806 3b01 	strb.w	r3, [r6], #1
 800800e:	e7e2      	b.n	8007fd6 <_scanf_float+0x15e>
 8008010:	6822      	ldr	r2, [r4, #0]
 8008012:	0610      	lsls	r0, r2, #24
 8008014:	f57f af62 	bpl.w	8007edc <_scanf_float+0x64>
 8008018:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	e7f4      	b.n	800800a <_scanf_float+0x192>
 8008020:	f1ba 0f00 	cmp.w	sl, #0
 8008024:	d10e      	bne.n	8008044 <_scanf_float+0x1cc>
 8008026:	f1b9 0f00 	cmp.w	r9, #0
 800802a:	d10e      	bne.n	800804a <_scanf_float+0x1d2>
 800802c:	6822      	ldr	r2, [r4, #0]
 800802e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008032:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008036:	d108      	bne.n	800804a <_scanf_float+0x1d2>
 8008038:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	f04f 0a01 	mov.w	sl, #1
 8008042:	e7e2      	b.n	800800a <_scanf_float+0x192>
 8008044:	f1ba 0f02 	cmp.w	sl, #2
 8008048:	d055      	beq.n	80080f6 <_scanf_float+0x27e>
 800804a:	2d01      	cmp	r5, #1
 800804c:	d002      	beq.n	8008054 <_scanf_float+0x1dc>
 800804e:	2d04      	cmp	r5, #4
 8008050:	f47f af44 	bne.w	8007edc <_scanf_float+0x64>
 8008054:	3501      	adds	r5, #1
 8008056:	b2ed      	uxtb	r5, r5
 8008058:	e7d7      	b.n	800800a <_scanf_float+0x192>
 800805a:	f1ba 0f01 	cmp.w	sl, #1
 800805e:	f47f af3d 	bne.w	8007edc <_scanf_float+0x64>
 8008062:	f04f 0a02 	mov.w	sl, #2
 8008066:	e7d0      	b.n	800800a <_scanf_float+0x192>
 8008068:	b97d      	cbnz	r5, 800808a <_scanf_float+0x212>
 800806a:	f1b9 0f00 	cmp.w	r9, #0
 800806e:	f47f af38 	bne.w	8007ee2 <_scanf_float+0x6a>
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008078:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800807c:	f040 8101 	bne.w	8008282 <_scanf_float+0x40a>
 8008080:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008084:	6022      	str	r2, [r4, #0]
 8008086:	2501      	movs	r5, #1
 8008088:	e7bf      	b.n	800800a <_scanf_float+0x192>
 800808a:	2d03      	cmp	r5, #3
 800808c:	d0e2      	beq.n	8008054 <_scanf_float+0x1dc>
 800808e:	2d05      	cmp	r5, #5
 8008090:	e7de      	b.n	8008050 <_scanf_float+0x1d8>
 8008092:	2d02      	cmp	r5, #2
 8008094:	f47f af22 	bne.w	8007edc <_scanf_float+0x64>
 8008098:	2503      	movs	r5, #3
 800809a:	e7b6      	b.n	800800a <_scanf_float+0x192>
 800809c:	2d06      	cmp	r5, #6
 800809e:	f47f af1d 	bne.w	8007edc <_scanf_float+0x64>
 80080a2:	2507      	movs	r5, #7
 80080a4:	e7b1      	b.n	800800a <_scanf_float+0x192>
 80080a6:	6822      	ldr	r2, [r4, #0]
 80080a8:	0591      	lsls	r1, r2, #22
 80080aa:	f57f af17 	bpl.w	8007edc <_scanf_float+0x64>
 80080ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80080b2:	6022      	str	r2, [r4, #0]
 80080b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80080b8:	e7a7      	b.n	800800a <_scanf_float+0x192>
 80080ba:	6822      	ldr	r2, [r4, #0]
 80080bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80080c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80080c4:	d006      	beq.n	80080d4 <_scanf_float+0x25c>
 80080c6:	0550      	lsls	r0, r2, #21
 80080c8:	f57f af08 	bpl.w	8007edc <_scanf_float+0x64>
 80080cc:	f1b9 0f00 	cmp.w	r9, #0
 80080d0:	f000 80d7 	beq.w	8008282 <_scanf_float+0x40a>
 80080d4:	0591      	lsls	r1, r2, #22
 80080d6:	bf58      	it	pl
 80080d8:	9902      	ldrpl	r1, [sp, #8]
 80080da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080de:	bf58      	it	pl
 80080e0:	eba9 0101 	subpl.w	r1, r9, r1
 80080e4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80080e8:	bf58      	it	pl
 80080ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	f04f 0900 	mov.w	r9, #0
 80080f4:	e789      	b.n	800800a <_scanf_float+0x192>
 80080f6:	f04f 0a03 	mov.w	sl, #3
 80080fa:	e786      	b.n	800800a <_scanf_float+0x192>
 80080fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008100:	4639      	mov	r1, r7
 8008102:	4640      	mov	r0, r8
 8008104:	4798      	blx	r3
 8008106:	2800      	cmp	r0, #0
 8008108:	f43f aedb 	beq.w	8007ec2 <_scanf_float+0x4a>
 800810c:	e6e6      	b.n	8007edc <_scanf_float+0x64>
 800810e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008112:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008116:	463a      	mov	r2, r7
 8008118:	4640      	mov	r0, r8
 800811a:	4798      	blx	r3
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	3b01      	subs	r3, #1
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	e6e8      	b.n	8007ef6 <_scanf_float+0x7e>
 8008124:	1e6b      	subs	r3, r5, #1
 8008126:	2b06      	cmp	r3, #6
 8008128:	d824      	bhi.n	8008174 <_scanf_float+0x2fc>
 800812a:	2d02      	cmp	r5, #2
 800812c:	d836      	bhi.n	800819c <_scanf_float+0x324>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	429e      	cmp	r6, r3
 8008132:	f67f aee4 	bls.w	8007efe <_scanf_float+0x86>
 8008136:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800813a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800813e:	463a      	mov	r2, r7
 8008140:	4640      	mov	r0, r8
 8008142:	4798      	blx	r3
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	3b01      	subs	r3, #1
 8008148:	6123      	str	r3, [r4, #16]
 800814a:	e7f0      	b.n	800812e <_scanf_float+0x2b6>
 800814c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008150:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008154:	463a      	mov	r2, r7
 8008156:	4640      	mov	r0, r8
 8008158:	4798      	blx	r3
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	3b01      	subs	r3, #1
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008164:	fa5f fa8a 	uxtb.w	sl, sl
 8008168:	f1ba 0f02 	cmp.w	sl, #2
 800816c:	d1ee      	bne.n	800814c <_scanf_float+0x2d4>
 800816e:	3d03      	subs	r5, #3
 8008170:	b2ed      	uxtb	r5, r5
 8008172:	1b76      	subs	r6, r6, r5
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	05da      	lsls	r2, r3, #23
 8008178:	d530      	bpl.n	80081dc <_scanf_float+0x364>
 800817a:	055b      	lsls	r3, r3, #21
 800817c:	d511      	bpl.n	80081a2 <_scanf_float+0x32a>
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	429e      	cmp	r6, r3
 8008182:	f67f aebc 	bls.w	8007efe <_scanf_float+0x86>
 8008186:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800818a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800818e:	463a      	mov	r2, r7
 8008190:	4640      	mov	r0, r8
 8008192:	4798      	blx	r3
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	3b01      	subs	r3, #1
 8008198:	6123      	str	r3, [r4, #16]
 800819a:	e7f0      	b.n	800817e <_scanf_float+0x306>
 800819c:	46aa      	mov	sl, r5
 800819e:	46b3      	mov	fp, r6
 80081a0:	e7de      	b.n	8008160 <_scanf_float+0x2e8>
 80081a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	2965      	cmp	r1, #101	@ 0x65
 80081aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80081ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80081b2:	6123      	str	r3, [r4, #16]
 80081b4:	d00c      	beq.n	80081d0 <_scanf_float+0x358>
 80081b6:	2945      	cmp	r1, #69	@ 0x45
 80081b8:	d00a      	beq.n	80081d0 <_scanf_float+0x358>
 80081ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081be:	463a      	mov	r2, r7
 80081c0:	4640      	mov	r0, r8
 80081c2:	4798      	blx	r3
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	1eb5      	subs	r5, r6, #2
 80081ce:	6123      	str	r3, [r4, #16]
 80081d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081d4:	463a      	mov	r2, r7
 80081d6:	4640      	mov	r0, r8
 80081d8:	4798      	blx	r3
 80081da:	462e      	mov	r6, r5
 80081dc:	6822      	ldr	r2, [r4, #0]
 80081de:	f012 0210 	ands.w	r2, r2, #16
 80081e2:	d001      	beq.n	80081e8 <_scanf_float+0x370>
 80081e4:	2000      	movs	r0, #0
 80081e6:	e68b      	b.n	8007f00 <_scanf_float+0x88>
 80081e8:	7032      	strb	r2, [r6, #0]
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80081f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f4:	d11a      	bne.n	800822c <_scanf_float+0x3b4>
 80081f6:	9b02      	ldr	r3, [sp, #8]
 80081f8:	454b      	cmp	r3, r9
 80081fa:	eba3 0209 	sub.w	r2, r3, r9
 80081fe:	d121      	bne.n	8008244 <_scanf_float+0x3cc>
 8008200:	9901      	ldr	r1, [sp, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	4640      	mov	r0, r8
 8008206:	f002 fb61 	bl	800a8cc <_strtod_r>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	6821      	ldr	r1, [r4, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f011 0f02 	tst.w	r1, #2
 8008214:	f103 0204 	add.w	r2, r3, #4
 8008218:	d01f      	beq.n	800825a <_scanf_float+0x3e2>
 800821a:	9903      	ldr	r1, [sp, #12]
 800821c:	600a      	str	r2, [r1, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	ed83 0b00 	vstr	d0, [r3]
 8008224:	68e3      	ldr	r3, [r4, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60e3      	str	r3, [r4, #12]
 800822a:	e7db      	b.n	80081e4 <_scanf_float+0x36c>
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0e6      	beq.n	8008200 <_scanf_float+0x388>
 8008232:	9905      	ldr	r1, [sp, #20]
 8008234:	230a      	movs	r3, #10
 8008236:	3101      	adds	r1, #1
 8008238:	4640      	mov	r0, r8
 800823a:	f002 fbc7 	bl	800a9cc <_strtol_r>
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	9e05      	ldr	r6, [sp, #20]
 8008242:	1ac2      	subs	r2, r0, r3
 8008244:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008248:	429e      	cmp	r6, r3
 800824a:	bf28      	it	cs
 800824c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008250:	490d      	ldr	r1, [pc, #52]	@ (8008288 <_scanf_float+0x410>)
 8008252:	4630      	mov	r0, r6
 8008254:	f000 f912 	bl	800847c <siprintf>
 8008258:	e7d2      	b.n	8008200 <_scanf_float+0x388>
 800825a:	f011 0f04 	tst.w	r1, #4
 800825e:	9903      	ldr	r1, [sp, #12]
 8008260:	600a      	str	r2, [r1, #0]
 8008262:	d1dc      	bne.n	800821e <_scanf_float+0x3a6>
 8008264:	eeb4 0b40 	vcmp.f64	d0, d0
 8008268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800826c:	681d      	ldr	r5, [r3, #0]
 800826e:	d705      	bvc.n	800827c <_scanf_float+0x404>
 8008270:	4806      	ldr	r0, [pc, #24]	@ (800828c <_scanf_float+0x414>)
 8008272:	f000 f9e7 	bl	8008644 <nanf>
 8008276:	ed85 0a00 	vstr	s0, [r5]
 800827a:	e7d3      	b.n	8008224 <_scanf_float+0x3ac>
 800827c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008280:	e7f9      	b.n	8008276 <_scanf_float+0x3fe>
 8008282:	f04f 0900 	mov.w	r9, #0
 8008286:	e630      	b.n	8007eea <_scanf_float+0x72>
 8008288:	0800be50 	.word	0x0800be50
 800828c:	0800c1e5 	.word	0x0800c1e5

08008290 <std>:
 8008290:	2300      	movs	r3, #0
 8008292:	b510      	push	{r4, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	e9c0 3300 	strd	r3, r3, [r0]
 800829a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829e:	6083      	str	r3, [r0, #8]
 80082a0:	8181      	strh	r1, [r0, #12]
 80082a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80082a4:	81c2      	strh	r2, [r0, #14]
 80082a6:	6183      	str	r3, [r0, #24]
 80082a8:	4619      	mov	r1, r3
 80082aa:	2208      	movs	r2, #8
 80082ac:	305c      	adds	r0, #92	@ 0x5c
 80082ae:	f000 f948 	bl	8008542 <memset>
 80082b2:	4b0d      	ldr	r3, [pc, #52]	@ (80082e8 <std+0x58>)
 80082b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80082b6:	4b0d      	ldr	r3, [pc, #52]	@ (80082ec <std+0x5c>)
 80082b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082ba:	4b0d      	ldr	r3, [pc, #52]	@ (80082f0 <std+0x60>)
 80082bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082be:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <std+0x64>)
 80082c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80082c2:	4b0d      	ldr	r3, [pc, #52]	@ (80082f8 <std+0x68>)
 80082c4:	6224      	str	r4, [r4, #32]
 80082c6:	429c      	cmp	r4, r3
 80082c8:	d006      	beq.n	80082d8 <std+0x48>
 80082ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082ce:	4294      	cmp	r4, r2
 80082d0:	d002      	beq.n	80082d8 <std+0x48>
 80082d2:	33d0      	adds	r3, #208	@ 0xd0
 80082d4:	429c      	cmp	r4, r3
 80082d6:	d105      	bne.n	80082e4 <std+0x54>
 80082d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e0:	f000 b9ac 	b.w	800863c <__retarget_lock_init_recursive>
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	bf00      	nop
 80082e8:	080084bd 	.word	0x080084bd
 80082ec:	080084df 	.word	0x080084df
 80082f0:	08008517 	.word	0x08008517
 80082f4:	0800853b 	.word	0x0800853b
 80082f8:	24000394 	.word	0x24000394

080082fc <stdio_exit_handler>:
 80082fc:	4a02      	ldr	r2, [pc, #8]	@ (8008308 <stdio_exit_handler+0xc>)
 80082fe:	4903      	ldr	r1, [pc, #12]	@ (800830c <stdio_exit_handler+0x10>)
 8008300:	4803      	ldr	r0, [pc, #12]	@ (8008310 <stdio_exit_handler+0x14>)
 8008302:	f000 b869 	b.w	80083d8 <_fwalk_sglue>
 8008306:	bf00      	nop
 8008308:	24000010 	.word	0x24000010
 800830c:	0800ad89 	.word	0x0800ad89
 8008310:	24000020 	.word	0x24000020

08008314 <cleanup_stdio>:
 8008314:	6841      	ldr	r1, [r0, #4]
 8008316:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <cleanup_stdio+0x34>)
 8008318:	4299      	cmp	r1, r3
 800831a:	b510      	push	{r4, lr}
 800831c:	4604      	mov	r4, r0
 800831e:	d001      	beq.n	8008324 <cleanup_stdio+0x10>
 8008320:	f002 fd32 	bl	800ad88 <_fflush_r>
 8008324:	68a1      	ldr	r1, [r4, #8]
 8008326:	4b09      	ldr	r3, [pc, #36]	@ (800834c <cleanup_stdio+0x38>)
 8008328:	4299      	cmp	r1, r3
 800832a:	d002      	beq.n	8008332 <cleanup_stdio+0x1e>
 800832c:	4620      	mov	r0, r4
 800832e:	f002 fd2b 	bl	800ad88 <_fflush_r>
 8008332:	68e1      	ldr	r1, [r4, #12]
 8008334:	4b06      	ldr	r3, [pc, #24]	@ (8008350 <cleanup_stdio+0x3c>)
 8008336:	4299      	cmp	r1, r3
 8008338:	d004      	beq.n	8008344 <cleanup_stdio+0x30>
 800833a:	4620      	mov	r0, r4
 800833c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008340:	f002 bd22 	b.w	800ad88 <_fflush_r>
 8008344:	bd10      	pop	{r4, pc}
 8008346:	bf00      	nop
 8008348:	24000394 	.word	0x24000394
 800834c:	240003fc 	.word	0x240003fc
 8008350:	24000464 	.word	0x24000464

08008354 <global_stdio_init.part.0>:
 8008354:	b510      	push	{r4, lr}
 8008356:	4b0b      	ldr	r3, [pc, #44]	@ (8008384 <global_stdio_init.part.0+0x30>)
 8008358:	4c0b      	ldr	r4, [pc, #44]	@ (8008388 <global_stdio_init.part.0+0x34>)
 800835a:	4a0c      	ldr	r2, [pc, #48]	@ (800838c <global_stdio_init.part.0+0x38>)
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	4620      	mov	r0, r4
 8008360:	2200      	movs	r2, #0
 8008362:	2104      	movs	r1, #4
 8008364:	f7ff ff94 	bl	8008290 <std>
 8008368:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800836c:	2201      	movs	r2, #1
 800836e:	2109      	movs	r1, #9
 8008370:	f7ff ff8e 	bl	8008290 <std>
 8008374:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008378:	2202      	movs	r2, #2
 800837a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800837e:	2112      	movs	r1, #18
 8008380:	f7ff bf86 	b.w	8008290 <std>
 8008384:	240004cc 	.word	0x240004cc
 8008388:	24000394 	.word	0x24000394
 800838c:	080082fd 	.word	0x080082fd

08008390 <__sfp_lock_acquire>:
 8008390:	4801      	ldr	r0, [pc, #4]	@ (8008398 <__sfp_lock_acquire+0x8>)
 8008392:	f000 b954 	b.w	800863e <__retarget_lock_acquire_recursive>
 8008396:	bf00      	nop
 8008398:	240004d5 	.word	0x240004d5

0800839c <__sfp_lock_release>:
 800839c:	4801      	ldr	r0, [pc, #4]	@ (80083a4 <__sfp_lock_release+0x8>)
 800839e:	f000 b94f 	b.w	8008640 <__retarget_lock_release_recursive>
 80083a2:	bf00      	nop
 80083a4:	240004d5 	.word	0x240004d5

080083a8 <__sinit>:
 80083a8:	b510      	push	{r4, lr}
 80083aa:	4604      	mov	r4, r0
 80083ac:	f7ff fff0 	bl	8008390 <__sfp_lock_acquire>
 80083b0:	6a23      	ldr	r3, [r4, #32]
 80083b2:	b11b      	cbz	r3, 80083bc <__sinit+0x14>
 80083b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b8:	f7ff bff0 	b.w	800839c <__sfp_lock_release>
 80083bc:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <__sinit+0x28>)
 80083be:	6223      	str	r3, [r4, #32]
 80083c0:	4b04      	ldr	r3, [pc, #16]	@ (80083d4 <__sinit+0x2c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f5      	bne.n	80083b4 <__sinit+0xc>
 80083c8:	f7ff ffc4 	bl	8008354 <global_stdio_init.part.0>
 80083cc:	e7f2      	b.n	80083b4 <__sinit+0xc>
 80083ce:	bf00      	nop
 80083d0:	08008315 	.word	0x08008315
 80083d4:	240004cc 	.word	0x240004cc

080083d8 <_fwalk_sglue>:
 80083d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083dc:	4607      	mov	r7, r0
 80083de:	4688      	mov	r8, r1
 80083e0:	4614      	mov	r4, r2
 80083e2:	2600      	movs	r6, #0
 80083e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083e8:	f1b9 0901 	subs.w	r9, r9, #1
 80083ec:	d505      	bpl.n	80083fa <_fwalk_sglue+0x22>
 80083ee:	6824      	ldr	r4, [r4, #0]
 80083f0:	2c00      	cmp	r4, #0
 80083f2:	d1f7      	bne.n	80083e4 <_fwalk_sglue+0xc>
 80083f4:	4630      	mov	r0, r6
 80083f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fa:	89ab      	ldrh	r3, [r5, #12]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d907      	bls.n	8008410 <_fwalk_sglue+0x38>
 8008400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008404:	3301      	adds	r3, #1
 8008406:	d003      	beq.n	8008410 <_fwalk_sglue+0x38>
 8008408:	4629      	mov	r1, r5
 800840a:	4638      	mov	r0, r7
 800840c:	47c0      	blx	r8
 800840e:	4306      	orrs	r6, r0
 8008410:	3568      	adds	r5, #104	@ 0x68
 8008412:	e7e9      	b.n	80083e8 <_fwalk_sglue+0x10>

08008414 <sniprintf>:
 8008414:	b40c      	push	{r2, r3}
 8008416:	b530      	push	{r4, r5, lr}
 8008418:	4b17      	ldr	r3, [pc, #92]	@ (8008478 <sniprintf+0x64>)
 800841a:	1e0c      	subs	r4, r1, #0
 800841c:	681d      	ldr	r5, [r3, #0]
 800841e:	b09d      	sub	sp, #116	@ 0x74
 8008420:	da08      	bge.n	8008434 <sniprintf+0x20>
 8008422:	238b      	movs	r3, #139	@ 0x8b
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	f04f 30ff 	mov.w	r0, #4294967295
 800842a:	b01d      	add	sp, #116	@ 0x74
 800842c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008430:	b002      	add	sp, #8
 8008432:	4770      	bx	lr
 8008434:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008438:	f8ad 3014 	strh.w	r3, [sp, #20]
 800843c:	bf14      	ite	ne
 800843e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008442:	4623      	moveq	r3, r4
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	9307      	str	r3, [sp, #28]
 8008448:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800844c:	9002      	str	r0, [sp, #8]
 800844e:	9006      	str	r0, [sp, #24]
 8008450:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008454:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008456:	ab21      	add	r3, sp, #132	@ 0x84
 8008458:	a902      	add	r1, sp, #8
 800845a:	4628      	mov	r0, r5
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f002 fb13 	bl	800aa88 <_svfiprintf_r>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	bfbc      	itt	lt
 8008466:	238b      	movlt	r3, #139	@ 0x8b
 8008468:	602b      	strlt	r3, [r5, #0]
 800846a:	2c00      	cmp	r4, #0
 800846c:	d0dd      	beq.n	800842a <sniprintf+0x16>
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	2200      	movs	r2, #0
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	e7d9      	b.n	800842a <sniprintf+0x16>
 8008476:	bf00      	nop
 8008478:	2400001c 	.word	0x2400001c

0800847c <siprintf>:
 800847c:	b40e      	push	{r1, r2, r3}
 800847e:	b500      	push	{lr}
 8008480:	b09c      	sub	sp, #112	@ 0x70
 8008482:	ab1d      	add	r3, sp, #116	@ 0x74
 8008484:	9002      	str	r0, [sp, #8]
 8008486:	9006      	str	r0, [sp, #24]
 8008488:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800848c:	4809      	ldr	r0, [pc, #36]	@ (80084b4 <siprintf+0x38>)
 800848e:	9107      	str	r1, [sp, #28]
 8008490:	9104      	str	r1, [sp, #16]
 8008492:	4909      	ldr	r1, [pc, #36]	@ (80084b8 <siprintf+0x3c>)
 8008494:	f853 2b04 	ldr.w	r2, [r3], #4
 8008498:	9105      	str	r1, [sp, #20]
 800849a:	6800      	ldr	r0, [r0, #0]
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	a902      	add	r1, sp, #8
 80084a0:	f002 faf2 	bl	800aa88 <_svfiprintf_r>
 80084a4:	9b02      	ldr	r3, [sp, #8]
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
 80084aa:	b01c      	add	sp, #112	@ 0x70
 80084ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80084b0:	b003      	add	sp, #12
 80084b2:	4770      	bx	lr
 80084b4:	2400001c 	.word	0x2400001c
 80084b8:	ffff0208 	.word	0xffff0208

080084bc <__sread>:
 80084bc:	b510      	push	{r4, lr}
 80084be:	460c      	mov	r4, r1
 80084c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c4:	f000 f86c 	bl	80085a0 <_read_r>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	bfab      	itete	ge
 80084cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084ce:	89a3      	ldrhlt	r3, [r4, #12]
 80084d0:	181b      	addge	r3, r3, r0
 80084d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084d6:	bfac      	ite	ge
 80084d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084da:	81a3      	strhlt	r3, [r4, #12]
 80084dc:	bd10      	pop	{r4, pc}

080084de <__swrite>:
 80084de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e2:	461f      	mov	r7, r3
 80084e4:	898b      	ldrh	r3, [r1, #12]
 80084e6:	05db      	lsls	r3, r3, #23
 80084e8:	4605      	mov	r5, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	4616      	mov	r6, r2
 80084ee:	d505      	bpl.n	80084fc <__swrite+0x1e>
 80084f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f4:	2302      	movs	r3, #2
 80084f6:	2200      	movs	r2, #0
 80084f8:	f000 f840 	bl	800857c <_lseek_r>
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008506:	81a3      	strh	r3, [r4, #12]
 8008508:	4632      	mov	r2, r6
 800850a:	463b      	mov	r3, r7
 800850c:	4628      	mov	r0, r5
 800850e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008512:	f000 b857 	b.w	80085c4 <_write_r>

08008516 <__sseek>:
 8008516:	b510      	push	{r4, lr}
 8008518:	460c      	mov	r4, r1
 800851a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851e:	f000 f82d 	bl	800857c <_lseek_r>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	bf15      	itete	ne
 8008528:	6560      	strne	r0, [r4, #84]	@ 0x54
 800852a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800852e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008532:	81a3      	strheq	r3, [r4, #12]
 8008534:	bf18      	it	ne
 8008536:	81a3      	strhne	r3, [r4, #12]
 8008538:	bd10      	pop	{r4, pc}

0800853a <__sclose>:
 800853a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853e:	f000 b80d 	b.w	800855c <_close_r>

08008542 <memset>:
 8008542:	4402      	add	r2, r0
 8008544:	4603      	mov	r3, r0
 8008546:	4293      	cmp	r3, r2
 8008548:	d100      	bne.n	800854c <memset+0xa>
 800854a:	4770      	bx	lr
 800854c:	f803 1b01 	strb.w	r1, [r3], #1
 8008550:	e7f9      	b.n	8008546 <memset+0x4>
	...

08008554 <_localeconv_r>:
 8008554:	4800      	ldr	r0, [pc, #0]	@ (8008558 <_localeconv_r+0x4>)
 8008556:	4770      	bx	lr
 8008558:	2400015c 	.word	0x2400015c

0800855c <_close_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d06      	ldr	r5, [pc, #24]	@ (8008578 <_close_r+0x1c>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	602b      	str	r3, [r5, #0]
 8008568:	f7f9 f88e 	bl	8001688 <_close>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_close_r+0x1a>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_close_r+0x1a>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	240004d0 	.word	0x240004d0

0800857c <_lseek_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d07      	ldr	r5, [pc, #28]	@ (800859c <_lseek_r+0x20>)
 8008580:	4604      	mov	r4, r0
 8008582:	4608      	mov	r0, r1
 8008584:	4611      	mov	r1, r2
 8008586:	2200      	movs	r2, #0
 8008588:	602a      	str	r2, [r5, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f7f9 f8a3 	bl	80016d6 <_lseek>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_lseek_r+0x1e>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_lseek_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	240004d0 	.word	0x240004d0

080085a0 <_read_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d07      	ldr	r5, [pc, #28]	@ (80085c0 <_read_r+0x20>)
 80085a4:	4604      	mov	r4, r0
 80085a6:	4608      	mov	r0, r1
 80085a8:	4611      	mov	r1, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	602a      	str	r2, [r5, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f7f9 f84d 	bl	800164e <_read>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_read_r+0x1e>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_read_r+0x1e>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	240004d0 	.word	0x240004d0

080085c4 <_write_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4d07      	ldr	r5, [pc, #28]	@ (80085e4 <_write_r+0x20>)
 80085c8:	4604      	mov	r4, r0
 80085ca:	4608      	mov	r0, r1
 80085cc:	4611      	mov	r1, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	602a      	str	r2, [r5, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f7f8 fe5a 	bl	800128c <_write>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_write_r+0x1e>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_write_r+0x1e>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	240004d0 	.word	0x240004d0

080085e8 <__errno>:
 80085e8:	4b01      	ldr	r3, [pc, #4]	@ (80085f0 <__errno+0x8>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	2400001c 	.word	0x2400001c

080085f4 <__libc_init_array>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4d0d      	ldr	r5, [pc, #52]	@ (800862c <__libc_init_array+0x38>)
 80085f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008630 <__libc_init_array+0x3c>)
 80085fa:	1b64      	subs	r4, r4, r5
 80085fc:	10a4      	asrs	r4, r4, #2
 80085fe:	2600      	movs	r6, #0
 8008600:	42a6      	cmp	r6, r4
 8008602:	d109      	bne.n	8008618 <__libc_init_array+0x24>
 8008604:	4d0b      	ldr	r5, [pc, #44]	@ (8008634 <__libc_init_array+0x40>)
 8008606:	4c0c      	ldr	r4, [pc, #48]	@ (8008638 <__libc_init_array+0x44>)
 8008608:	f003 fbd8 	bl	800bdbc <_init>
 800860c:	1b64      	subs	r4, r4, r5
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	2600      	movs	r6, #0
 8008612:	42a6      	cmp	r6, r4
 8008614:	d105      	bne.n	8008622 <__libc_init_array+0x2e>
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	f855 3b04 	ldr.w	r3, [r5], #4
 800861c:	4798      	blx	r3
 800861e:	3601      	adds	r6, #1
 8008620:	e7ee      	b.n	8008600 <__libc_init_array+0xc>
 8008622:	f855 3b04 	ldr.w	r3, [r5], #4
 8008626:	4798      	blx	r3
 8008628:	3601      	adds	r6, #1
 800862a:	e7f2      	b.n	8008612 <__libc_init_array+0x1e>
 800862c:	0800c290 	.word	0x0800c290
 8008630:	0800c290 	.word	0x0800c290
 8008634:	0800c290 	.word	0x0800c290
 8008638:	0800c294 	.word	0x0800c294

0800863c <__retarget_lock_init_recursive>:
 800863c:	4770      	bx	lr

0800863e <__retarget_lock_acquire_recursive>:
 800863e:	4770      	bx	lr

08008640 <__retarget_lock_release_recursive>:
 8008640:	4770      	bx	lr
	...

08008644 <nanf>:
 8008644:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800864c <nanf+0x8>
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	7fc00000 	.word	0x7fc00000

08008650 <quorem>:
 8008650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	6903      	ldr	r3, [r0, #16]
 8008656:	690c      	ldr	r4, [r1, #16]
 8008658:	42a3      	cmp	r3, r4
 800865a:	4607      	mov	r7, r0
 800865c:	db7e      	blt.n	800875c <quorem+0x10c>
 800865e:	3c01      	subs	r4, #1
 8008660:	f101 0814 	add.w	r8, r1, #20
 8008664:	00a3      	lsls	r3, r4, #2
 8008666:	f100 0514 	add.w	r5, r0, #20
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008676:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800867a:	3301      	adds	r3, #1
 800867c:	429a      	cmp	r2, r3
 800867e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008682:	fbb2 f6f3 	udiv	r6, r2, r3
 8008686:	d32e      	bcc.n	80086e6 <quorem+0x96>
 8008688:	f04f 0a00 	mov.w	sl, #0
 800868c:	46c4      	mov	ip, r8
 800868e:	46ae      	mov	lr, r5
 8008690:	46d3      	mov	fp, sl
 8008692:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008696:	b298      	uxth	r0, r3
 8008698:	fb06 a000 	mla	r0, r6, r0, sl
 800869c:	0c02      	lsrs	r2, r0, #16
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	fb06 2303 	mla	r3, r6, r3, r2
 80086a4:	f8de 2000 	ldr.w	r2, [lr]
 80086a8:	b280      	uxth	r0, r0
 80086aa:	b292      	uxth	r2, r2
 80086ac:	1a12      	subs	r2, r2, r0
 80086ae:	445a      	add	r2, fp
 80086b0:	f8de 0000 	ldr.w	r0, [lr]
 80086b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80086be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80086c2:	b292      	uxth	r2, r2
 80086c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80086c8:	45e1      	cmp	r9, ip
 80086ca:	f84e 2b04 	str.w	r2, [lr], #4
 80086ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80086d2:	d2de      	bcs.n	8008692 <quorem+0x42>
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	58eb      	ldr	r3, [r5, r3]
 80086d8:	b92b      	cbnz	r3, 80086e6 <quorem+0x96>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	3b04      	subs	r3, #4
 80086de:	429d      	cmp	r5, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	d32f      	bcc.n	8008744 <quorem+0xf4>
 80086e4:	613c      	str	r4, [r7, #16]
 80086e6:	4638      	mov	r0, r7
 80086e8:	f001 f954 	bl	8009994 <__mcmp>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	db25      	blt.n	800873c <quorem+0xec>
 80086f0:	4629      	mov	r1, r5
 80086f2:	2000      	movs	r0, #0
 80086f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80086f8:	f8d1 c000 	ldr.w	ip, [r1]
 80086fc:	fa1f fe82 	uxth.w	lr, r2
 8008700:	fa1f f38c 	uxth.w	r3, ip
 8008704:	eba3 030e 	sub.w	r3, r3, lr
 8008708:	4403      	add	r3, r0
 800870a:	0c12      	lsrs	r2, r2, #16
 800870c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008710:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008714:	b29b      	uxth	r3, r3
 8008716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800871a:	45c1      	cmp	r9, r8
 800871c:	f841 3b04 	str.w	r3, [r1], #4
 8008720:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008724:	d2e6      	bcs.n	80086f4 <quorem+0xa4>
 8008726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800872a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800872e:	b922      	cbnz	r2, 800873a <quorem+0xea>
 8008730:	3b04      	subs	r3, #4
 8008732:	429d      	cmp	r5, r3
 8008734:	461a      	mov	r2, r3
 8008736:	d30b      	bcc.n	8008750 <quorem+0x100>
 8008738:	613c      	str	r4, [r7, #16]
 800873a:	3601      	adds	r6, #1
 800873c:	4630      	mov	r0, r6
 800873e:	b003      	add	sp, #12
 8008740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	3b04      	subs	r3, #4
 8008748:	2a00      	cmp	r2, #0
 800874a:	d1cb      	bne.n	80086e4 <quorem+0x94>
 800874c:	3c01      	subs	r4, #1
 800874e:	e7c6      	b.n	80086de <quorem+0x8e>
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	3b04      	subs	r3, #4
 8008754:	2a00      	cmp	r2, #0
 8008756:	d1ef      	bne.n	8008738 <quorem+0xe8>
 8008758:	3c01      	subs	r4, #1
 800875a:	e7ea      	b.n	8008732 <quorem+0xe2>
 800875c:	2000      	movs	r0, #0
 800875e:	e7ee      	b.n	800873e <quorem+0xee>

08008760 <_dtoa_r>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	ed2d 8b02 	vpush	{d8}
 8008768:	69c7      	ldr	r7, [r0, #28]
 800876a:	b091      	sub	sp, #68	@ 0x44
 800876c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008770:	ec55 4b10 	vmov	r4, r5, d0
 8008774:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008776:	9107      	str	r1, [sp, #28]
 8008778:	4681      	mov	r9, r0
 800877a:	9209      	str	r2, [sp, #36]	@ 0x24
 800877c:	930d      	str	r3, [sp, #52]	@ 0x34
 800877e:	b97f      	cbnz	r7, 80087a0 <_dtoa_r+0x40>
 8008780:	2010      	movs	r0, #16
 8008782:	f000 fd8d 	bl	80092a0 <malloc>
 8008786:	4602      	mov	r2, r0
 8008788:	f8c9 001c 	str.w	r0, [r9, #28]
 800878c:	b920      	cbnz	r0, 8008798 <_dtoa_r+0x38>
 800878e:	4ba0      	ldr	r3, [pc, #640]	@ (8008a10 <_dtoa_r+0x2b0>)
 8008790:	21ef      	movs	r1, #239	@ 0xef
 8008792:	48a0      	ldr	r0, [pc, #640]	@ (8008a14 <_dtoa_r+0x2b4>)
 8008794:	f002 fb74 	bl	800ae80 <__assert_func>
 8008798:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800879c:	6007      	str	r7, [r0, #0]
 800879e:	60c7      	str	r7, [r0, #12]
 80087a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087a4:	6819      	ldr	r1, [r3, #0]
 80087a6:	b159      	cbz	r1, 80087c0 <_dtoa_r+0x60>
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	604a      	str	r2, [r1, #4]
 80087ac:	2301      	movs	r3, #1
 80087ae:	4093      	lsls	r3, r2
 80087b0:	608b      	str	r3, [r1, #8]
 80087b2:	4648      	mov	r0, r9
 80087b4:	f000 fe6a 	bl	800948c <_Bfree>
 80087b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	1e2b      	subs	r3, r5, #0
 80087c2:	bfbb      	ittet	lt
 80087c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80087c8:	9303      	strlt	r3, [sp, #12]
 80087ca:	2300      	movge	r3, #0
 80087cc:	2201      	movlt	r2, #1
 80087ce:	bfac      	ite	ge
 80087d0:	6033      	strge	r3, [r6, #0]
 80087d2:	6032      	strlt	r2, [r6, #0]
 80087d4:	4b90      	ldr	r3, [pc, #576]	@ (8008a18 <_dtoa_r+0x2b8>)
 80087d6:	9e03      	ldr	r6, [sp, #12]
 80087d8:	43b3      	bics	r3, r6
 80087da:	d110      	bne.n	80087fe <_dtoa_r+0x9e>
 80087dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087de:	f242 730f 	movw	r3, #9999	@ 0x270f
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80087e8:	4323      	orrs	r3, r4
 80087ea:	f000 84de 	beq.w	80091aa <_dtoa_r+0xa4a>
 80087ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087f0:	4f8a      	ldr	r7, [pc, #552]	@ (8008a1c <_dtoa_r+0x2bc>)
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 84e0 	beq.w	80091b8 <_dtoa_r+0xa58>
 80087f8:	1cfb      	adds	r3, r7, #3
 80087fa:	f000 bcdb 	b.w	80091b4 <_dtoa_r+0xa54>
 80087fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008802:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880a:	d10a      	bne.n	8008822 <_dtoa_r+0xc2>
 800880c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800880e:	2301      	movs	r3, #1
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008814:	b113      	cbz	r3, 800881c <_dtoa_r+0xbc>
 8008816:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008818:	4b81      	ldr	r3, [pc, #516]	@ (8008a20 <_dtoa_r+0x2c0>)
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	4f81      	ldr	r7, [pc, #516]	@ (8008a24 <_dtoa_r+0x2c4>)
 800881e:	f000 bccb 	b.w	80091b8 <_dtoa_r+0xa58>
 8008822:	aa0e      	add	r2, sp, #56	@ 0x38
 8008824:	a90f      	add	r1, sp, #60	@ 0x3c
 8008826:	4648      	mov	r0, r9
 8008828:	eeb0 0b48 	vmov.f64	d0, d8
 800882c:	f001 f9d2 	bl	8009bd4 <__d2b>
 8008830:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008836:	9001      	str	r0, [sp, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d045      	beq.n	80088c8 <_dtoa_r+0x168>
 800883c:	eeb0 7b48 	vmov.f64	d7, d8
 8008840:	ee18 1a90 	vmov	r1, s17
 8008844:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008848:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800884c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008850:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008854:	2500      	movs	r5, #0
 8008856:	ee07 1a90 	vmov	s15, r1
 800885a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800885e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80089f8 <_dtoa_r+0x298>
 8008862:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008866:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008a00 <_dtoa_r+0x2a0>
 800886a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800886e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008a08 <_dtoa_r+0x2a8>
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800887a:	eeb0 7b46 	vmov.f64	d7, d6
 800887e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008882:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008886:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800888a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888e:	ee16 8a90 	vmov	r8, s13
 8008892:	d508      	bpl.n	80088a6 <_dtoa_r+0x146>
 8008894:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008898:	eeb4 6b47 	vcmp.f64	d6, d7
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	bf18      	it	ne
 80088a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80088a6:	f1b8 0f16 	cmp.w	r8, #22
 80088aa:	d82b      	bhi.n	8008904 <_dtoa_r+0x1a4>
 80088ac:	495e      	ldr	r1, [pc, #376]	@ (8008a28 <_dtoa_r+0x2c8>)
 80088ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80088b2:	ed91 7b00 	vldr	d7, [r1]
 80088b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80088ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088be:	d501      	bpl.n	80088c4 <_dtoa_r+0x164>
 80088c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80088c4:	2100      	movs	r1, #0
 80088c6:	e01e      	b.n	8008906 <_dtoa_r+0x1a6>
 80088c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ca:	4413      	add	r3, r2
 80088cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80088d0:	2920      	cmp	r1, #32
 80088d2:	bfc1      	itttt	gt
 80088d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80088d8:	408e      	lslgt	r6, r1
 80088da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80088de:	fa24 f101 	lsrgt.w	r1, r4, r1
 80088e2:	bfd6      	itet	le
 80088e4:	f1c1 0120 	rsble	r1, r1, #32
 80088e8:	4331      	orrgt	r1, r6
 80088ea:	fa04 f101 	lslle.w	r1, r4, r1
 80088ee:	ee07 1a90 	vmov	s15, r1
 80088f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80088f6:	3b01      	subs	r3, #1
 80088f8:	ee17 1a90 	vmov	r1, s15
 80088fc:	2501      	movs	r5, #1
 80088fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008902:	e7a8      	b.n	8008856 <_dtoa_r+0xf6>
 8008904:	2101      	movs	r1, #1
 8008906:	1ad2      	subs	r2, r2, r3
 8008908:	1e53      	subs	r3, r2, #1
 800890a:	9306      	str	r3, [sp, #24]
 800890c:	bf45      	ittet	mi
 800890e:	f1c2 0301 	rsbmi	r3, r2, #1
 8008912:	9305      	strmi	r3, [sp, #20]
 8008914:	2300      	movpl	r3, #0
 8008916:	2300      	movmi	r3, #0
 8008918:	bf4c      	ite	mi
 800891a:	9306      	strmi	r3, [sp, #24]
 800891c:	9305      	strpl	r3, [sp, #20]
 800891e:	f1b8 0f00 	cmp.w	r8, #0
 8008922:	910c      	str	r1, [sp, #48]	@ 0x30
 8008924:	db18      	blt.n	8008958 <_dtoa_r+0x1f8>
 8008926:	9b06      	ldr	r3, [sp, #24]
 8008928:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800892c:	4443      	add	r3, r8
 800892e:	9306      	str	r3, [sp, #24]
 8008930:	2300      	movs	r3, #0
 8008932:	9a07      	ldr	r2, [sp, #28]
 8008934:	2a09      	cmp	r2, #9
 8008936:	d849      	bhi.n	80089cc <_dtoa_r+0x26c>
 8008938:	2a05      	cmp	r2, #5
 800893a:	bfc4      	itt	gt
 800893c:	3a04      	subgt	r2, #4
 800893e:	9207      	strgt	r2, [sp, #28]
 8008940:	9a07      	ldr	r2, [sp, #28]
 8008942:	f1a2 0202 	sub.w	r2, r2, #2
 8008946:	bfcc      	ite	gt
 8008948:	2400      	movgt	r4, #0
 800894a:	2401      	movle	r4, #1
 800894c:	2a03      	cmp	r2, #3
 800894e:	d848      	bhi.n	80089e2 <_dtoa_r+0x282>
 8008950:	e8df f002 	tbb	[pc, r2]
 8008954:	3a2c2e0b 	.word	0x3a2c2e0b
 8008958:	9b05      	ldr	r3, [sp, #20]
 800895a:	2200      	movs	r2, #0
 800895c:	eba3 0308 	sub.w	r3, r3, r8
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	920a      	str	r2, [sp, #40]	@ 0x28
 8008964:	f1c8 0300 	rsb	r3, r8, #0
 8008968:	e7e3      	b.n	8008932 <_dtoa_r+0x1d2>
 800896a:	2200      	movs	r2, #0
 800896c:	9208      	str	r2, [sp, #32]
 800896e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008970:	2a00      	cmp	r2, #0
 8008972:	dc39      	bgt.n	80089e8 <_dtoa_r+0x288>
 8008974:	f04f 0b01 	mov.w	fp, #1
 8008978:	46da      	mov	sl, fp
 800897a:	465a      	mov	r2, fp
 800897c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008980:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008984:	2100      	movs	r1, #0
 8008986:	2004      	movs	r0, #4
 8008988:	f100 0614 	add.w	r6, r0, #20
 800898c:	4296      	cmp	r6, r2
 800898e:	d930      	bls.n	80089f2 <_dtoa_r+0x292>
 8008990:	6079      	str	r1, [r7, #4]
 8008992:	4648      	mov	r0, r9
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	f000 fd39 	bl	800940c <_Balloc>
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	4607      	mov	r7, r0
 800899e:	2800      	cmp	r0, #0
 80089a0:	d146      	bne.n	8008a30 <_dtoa_r+0x2d0>
 80089a2:	4b22      	ldr	r3, [pc, #136]	@ (8008a2c <_dtoa_r+0x2cc>)
 80089a4:	4602      	mov	r2, r0
 80089a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80089aa:	e6f2      	b.n	8008792 <_dtoa_r+0x32>
 80089ac:	2201      	movs	r2, #1
 80089ae:	e7dd      	b.n	800896c <_dtoa_r+0x20c>
 80089b0:	2200      	movs	r2, #0
 80089b2:	9208      	str	r2, [sp, #32]
 80089b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089b6:	eb08 0b02 	add.w	fp, r8, r2
 80089ba:	f10b 0a01 	add.w	sl, fp, #1
 80089be:	4652      	mov	r2, sl
 80089c0:	2a01      	cmp	r2, #1
 80089c2:	bfb8      	it	lt
 80089c4:	2201      	movlt	r2, #1
 80089c6:	e7db      	b.n	8008980 <_dtoa_r+0x220>
 80089c8:	2201      	movs	r2, #1
 80089ca:	e7f2      	b.n	80089b2 <_dtoa_r+0x252>
 80089cc:	2401      	movs	r4, #1
 80089ce:	2200      	movs	r2, #0
 80089d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80089d4:	f04f 3bff 	mov.w	fp, #4294967295
 80089d8:	2100      	movs	r1, #0
 80089da:	46da      	mov	sl, fp
 80089dc:	2212      	movs	r2, #18
 80089de:	9109      	str	r1, [sp, #36]	@ 0x24
 80089e0:	e7ce      	b.n	8008980 <_dtoa_r+0x220>
 80089e2:	2201      	movs	r2, #1
 80089e4:	9208      	str	r2, [sp, #32]
 80089e6:	e7f5      	b.n	80089d4 <_dtoa_r+0x274>
 80089e8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80089ec:	46da      	mov	sl, fp
 80089ee:	465a      	mov	r2, fp
 80089f0:	e7c6      	b.n	8008980 <_dtoa_r+0x220>
 80089f2:	3101      	adds	r1, #1
 80089f4:	0040      	lsls	r0, r0, #1
 80089f6:	e7c7      	b.n	8008988 <_dtoa_r+0x228>
 80089f8:	636f4361 	.word	0x636f4361
 80089fc:	3fd287a7 	.word	0x3fd287a7
 8008a00:	8b60c8b3 	.word	0x8b60c8b3
 8008a04:	3fc68a28 	.word	0x3fc68a28
 8008a08:	509f79fb 	.word	0x509f79fb
 8008a0c:	3fd34413 	.word	0x3fd34413
 8008a10:	0800be62 	.word	0x0800be62
 8008a14:	0800be79 	.word	0x0800be79
 8008a18:	7ff00000 	.word	0x7ff00000
 8008a1c:	0800be5e 	.word	0x0800be5e
 8008a20:	0800be2d 	.word	0x0800be2d
 8008a24:	0800be2c 	.word	0x0800be2c
 8008a28:	0800bf70 	.word	0x0800bf70
 8008a2c:	0800bed1 	.word	0x0800bed1
 8008a30:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008a34:	f1ba 0f0e 	cmp.w	sl, #14
 8008a38:	6010      	str	r0, [r2, #0]
 8008a3a:	d86f      	bhi.n	8008b1c <_dtoa_r+0x3bc>
 8008a3c:	2c00      	cmp	r4, #0
 8008a3e:	d06d      	beq.n	8008b1c <_dtoa_r+0x3bc>
 8008a40:	f1b8 0f00 	cmp.w	r8, #0
 8008a44:	f340 80c2 	ble.w	8008bcc <_dtoa_r+0x46c>
 8008a48:	4aca      	ldr	r2, [pc, #808]	@ (8008d74 <_dtoa_r+0x614>)
 8008a4a:	f008 010f 	and.w	r1, r8, #15
 8008a4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008a52:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008a56:	ed92 7b00 	vldr	d7, [r2]
 8008a5a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8008a5e:	f000 80a9 	beq.w	8008bb4 <_dtoa_r+0x454>
 8008a62:	4ac5      	ldr	r2, [pc, #788]	@ (8008d78 <_dtoa_r+0x618>)
 8008a64:	ed92 6b08 	vldr	d6, [r2, #32]
 8008a68:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008a6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008a70:	f001 010f 	and.w	r1, r1, #15
 8008a74:	2203      	movs	r2, #3
 8008a76:	48c0      	ldr	r0, [pc, #768]	@ (8008d78 <_dtoa_r+0x618>)
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	f040 809d 	bne.w	8008bb8 <_dtoa_r+0x458>
 8008a7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008a82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a90:	2900      	cmp	r1, #0
 8008a92:	f000 80c1 	beq.w	8008c18 <_dtoa_r+0x4b8>
 8008a96:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008a9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa2:	f140 80b9 	bpl.w	8008c18 <_dtoa_r+0x4b8>
 8008aa6:	f1ba 0f00 	cmp.w	sl, #0
 8008aaa:	f000 80b5 	beq.w	8008c18 <_dtoa_r+0x4b8>
 8008aae:	f1bb 0f00 	cmp.w	fp, #0
 8008ab2:	dd31      	ble.n	8008b18 <_dtoa_r+0x3b8>
 8008ab4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008ab8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008abc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ac0:	f108 31ff 	add.w	r1, r8, #4294967295
 8008ac4:	9104      	str	r1, [sp, #16]
 8008ac6:	3201      	adds	r2, #1
 8008ac8:	465c      	mov	r4, fp
 8008aca:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008ace:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008ad2:	ee07 2a90 	vmov	s15, r2
 8008ad6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008ada:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008ade:	ee15 2a90 	vmov	r2, s11
 8008ae2:	ec51 0b15 	vmov	r0, r1, d5
 8008ae6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8008aea:	2c00      	cmp	r4, #0
 8008aec:	f040 8098 	bne.w	8008c20 <_dtoa_r+0x4c0>
 8008af0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008af4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008af8:	ec41 0b17 	vmov	d7, r0, r1
 8008afc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b04:	f300 8261 	bgt.w	8008fca <_dtoa_r+0x86a>
 8008b08:	eeb1 7b47 	vneg.f64	d7, d7
 8008b0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b14:	f100 80f5 	bmi.w	8008d02 <_dtoa_r+0x5a2>
 8008b18:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008b1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	f2c0 812c 	blt.w	8008d7c <_dtoa_r+0x61c>
 8008b24:	f1b8 0f0e 	cmp.w	r8, #14
 8008b28:	f300 8128 	bgt.w	8008d7c <_dtoa_r+0x61c>
 8008b2c:	4b91      	ldr	r3, [pc, #580]	@ (8008d74 <_dtoa_r+0x614>)
 8008b2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008b32:	ed93 6b00 	vldr	d6, [r3]
 8008b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da03      	bge.n	8008b44 <_dtoa_r+0x3e4>
 8008b3c:	f1ba 0f00 	cmp.w	sl, #0
 8008b40:	f340 80d2 	ble.w	8008ce8 <_dtoa_r+0x588>
 8008b44:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008b48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b4c:	463e      	mov	r6, r7
 8008b4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008b52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008b56:	ee15 3a10 	vmov	r3, s10
 8008b5a:	3330      	adds	r3, #48	@ 0x30
 8008b5c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b60:	1bf3      	subs	r3, r6, r7
 8008b62:	459a      	cmp	sl, r3
 8008b64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008b68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008b6c:	f040 80f8 	bne.w	8008d60 <_dtoa_r+0x600>
 8008b70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008b74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7c:	f300 80dd 	bgt.w	8008d3a <_dtoa_r+0x5da>
 8008b80:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b88:	d104      	bne.n	8008b94 <_dtoa_r+0x434>
 8008b8a:	ee15 3a10 	vmov	r3, s10
 8008b8e:	07db      	lsls	r3, r3, #31
 8008b90:	f100 80d3 	bmi.w	8008d3a <_dtoa_r+0x5da>
 8008b94:	9901      	ldr	r1, [sp, #4]
 8008b96:	4648      	mov	r0, r9
 8008b98:	f000 fc78 	bl	800948c <_Bfree>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ba0:	7033      	strb	r3, [r6, #0]
 8008ba2:	f108 0301 	add.w	r3, r8, #1
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8304 	beq.w	80091b8 <_dtoa_r+0xa58>
 8008bb0:	601e      	str	r6, [r3, #0]
 8008bb2:	e301      	b.n	80091b8 <_dtoa_r+0xa58>
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	e75e      	b.n	8008a76 <_dtoa_r+0x316>
 8008bb8:	07cc      	lsls	r4, r1, #31
 8008bba:	d504      	bpl.n	8008bc6 <_dtoa_r+0x466>
 8008bbc:	ed90 6b00 	vldr	d6, [r0]
 8008bc0:	3201      	adds	r2, #1
 8008bc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008bc6:	1049      	asrs	r1, r1, #1
 8008bc8:	3008      	adds	r0, #8
 8008bca:	e755      	b.n	8008a78 <_dtoa_r+0x318>
 8008bcc:	d022      	beq.n	8008c14 <_dtoa_r+0x4b4>
 8008bce:	f1c8 0100 	rsb	r1, r8, #0
 8008bd2:	4a68      	ldr	r2, [pc, #416]	@ (8008d74 <_dtoa_r+0x614>)
 8008bd4:	f001 000f 	and.w	r0, r1, #15
 8008bd8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008bdc:	ed92 7b00 	vldr	d7, [r2]
 8008be0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008be4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008be8:	4863      	ldr	r0, [pc, #396]	@ (8008d78 <_dtoa_r+0x618>)
 8008bea:	1109      	asrs	r1, r1, #4
 8008bec:	2400      	movs	r4, #0
 8008bee:	2202      	movs	r2, #2
 8008bf0:	b929      	cbnz	r1, 8008bfe <_dtoa_r+0x49e>
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	f43f af49 	beq.w	8008a8a <_dtoa_r+0x32a>
 8008bf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008bfc:	e745      	b.n	8008a8a <_dtoa_r+0x32a>
 8008bfe:	07ce      	lsls	r6, r1, #31
 8008c00:	d505      	bpl.n	8008c0e <_dtoa_r+0x4ae>
 8008c02:	ed90 6b00 	vldr	d6, [r0]
 8008c06:	3201      	adds	r2, #1
 8008c08:	2401      	movs	r4, #1
 8008c0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c0e:	1049      	asrs	r1, r1, #1
 8008c10:	3008      	adds	r0, #8
 8008c12:	e7ed      	b.n	8008bf0 <_dtoa_r+0x490>
 8008c14:	2202      	movs	r2, #2
 8008c16:	e738      	b.n	8008a8a <_dtoa_r+0x32a>
 8008c18:	f8cd 8010 	str.w	r8, [sp, #16]
 8008c1c:	4654      	mov	r4, sl
 8008c1e:	e754      	b.n	8008aca <_dtoa_r+0x36a>
 8008c20:	4a54      	ldr	r2, [pc, #336]	@ (8008d74 <_dtoa_r+0x614>)
 8008c22:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008c26:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008c2a:	9a08      	ldr	r2, [sp, #32]
 8008c2c:	ec41 0b17 	vmov	d7, r0, r1
 8008c30:	443c      	add	r4, r7
 8008c32:	b34a      	cbz	r2, 8008c88 <_dtoa_r+0x528>
 8008c34:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008c38:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008c3c:	463e      	mov	r6, r7
 8008c3e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008c42:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008c46:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008c4a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008c4e:	ee14 2a90 	vmov	r2, s9
 8008c52:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008c56:	3230      	adds	r2, #48	@ 0x30
 8008c58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008c5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c64:	f806 2b01 	strb.w	r2, [r6], #1
 8008c68:	d438      	bmi.n	8008cdc <_dtoa_r+0x57c>
 8008c6a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008c6e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c76:	d462      	bmi.n	8008d3e <_dtoa_r+0x5de>
 8008c78:	42a6      	cmp	r6, r4
 8008c7a:	f43f af4d 	beq.w	8008b18 <_dtoa_r+0x3b8>
 8008c7e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008c82:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008c86:	e7e0      	b.n	8008c4a <_dtoa_r+0x4ea>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	463e      	mov	r6, r7
 8008c8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008c90:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008c94:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008c98:	ee14 2a90 	vmov	r2, s9
 8008c9c:	3230      	adds	r2, #48	@ 0x30
 8008c9e:	f806 2b01 	strb.w	r2, [r6], #1
 8008ca2:	42a6      	cmp	r6, r4
 8008ca4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ca8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008cac:	d119      	bne.n	8008ce2 <_dtoa_r+0x582>
 8008cae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008cb2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008cb6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cbe:	dc3e      	bgt.n	8008d3e <_dtoa_r+0x5de>
 8008cc0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008cc4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ccc:	f57f af24 	bpl.w	8008b18 <_dtoa_r+0x3b8>
 8008cd0:	460e      	mov	r6, r1
 8008cd2:	3901      	subs	r1, #1
 8008cd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cd8:	2b30      	cmp	r3, #48	@ 0x30
 8008cda:	d0f9      	beq.n	8008cd0 <_dtoa_r+0x570>
 8008cdc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ce0:	e758      	b.n	8008b94 <_dtoa_r+0x434>
 8008ce2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008ce6:	e7d5      	b.n	8008c94 <_dtoa_r+0x534>
 8008ce8:	d10b      	bne.n	8008d02 <_dtoa_r+0x5a2>
 8008cea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008cee:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008cf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfe:	f2c0 8161 	blt.w	8008fc4 <_dtoa_r+0x864>
 8008d02:	2400      	movs	r4, #0
 8008d04:	4625      	mov	r5, r4
 8008d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	9304      	str	r3, [sp, #16]
 8008d0c:	463e      	mov	r6, r7
 8008d0e:	f04f 0800 	mov.w	r8, #0
 8008d12:	4621      	mov	r1, r4
 8008d14:	4648      	mov	r0, r9
 8008d16:	f000 fbb9 	bl	800948c <_Bfree>
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	d0de      	beq.n	8008cdc <_dtoa_r+0x57c>
 8008d1e:	f1b8 0f00 	cmp.w	r8, #0
 8008d22:	d005      	beq.n	8008d30 <_dtoa_r+0x5d0>
 8008d24:	45a8      	cmp	r8, r5
 8008d26:	d003      	beq.n	8008d30 <_dtoa_r+0x5d0>
 8008d28:	4641      	mov	r1, r8
 8008d2a:	4648      	mov	r0, r9
 8008d2c:	f000 fbae 	bl	800948c <_Bfree>
 8008d30:	4629      	mov	r1, r5
 8008d32:	4648      	mov	r0, r9
 8008d34:	f000 fbaa 	bl	800948c <_Bfree>
 8008d38:	e7d0      	b.n	8008cdc <_dtoa_r+0x57c>
 8008d3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8008d3e:	4633      	mov	r3, r6
 8008d40:	461e      	mov	r6, r3
 8008d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d46:	2a39      	cmp	r2, #57	@ 0x39
 8008d48:	d106      	bne.n	8008d58 <_dtoa_r+0x5f8>
 8008d4a:	429f      	cmp	r7, r3
 8008d4c:	d1f8      	bne.n	8008d40 <_dtoa_r+0x5e0>
 8008d4e:	9a04      	ldr	r2, [sp, #16]
 8008d50:	3201      	adds	r2, #1
 8008d52:	9204      	str	r2, [sp, #16]
 8008d54:	2230      	movs	r2, #48	@ 0x30
 8008d56:	703a      	strb	r2, [r7, #0]
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	3201      	adds	r2, #1
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	e7bd      	b.n	8008cdc <_dtoa_r+0x57c>
 8008d60:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008d64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6c:	f47f aeef 	bne.w	8008b4e <_dtoa_r+0x3ee>
 8008d70:	e710      	b.n	8008b94 <_dtoa_r+0x434>
 8008d72:	bf00      	nop
 8008d74:	0800bf70 	.word	0x0800bf70
 8008d78:	0800bf48 	.word	0x0800bf48
 8008d7c:	9908      	ldr	r1, [sp, #32]
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	f000 80e3 	beq.w	8008f4a <_dtoa_r+0x7ea>
 8008d84:	9907      	ldr	r1, [sp, #28]
 8008d86:	2901      	cmp	r1, #1
 8008d88:	f300 80c8 	bgt.w	8008f1c <_dtoa_r+0x7bc>
 8008d8c:	2d00      	cmp	r5, #0
 8008d8e:	f000 80c1 	beq.w	8008f14 <_dtoa_r+0x7b4>
 8008d92:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d96:	9e05      	ldr	r6, [sp, #20]
 8008d98:	461c      	mov	r4, r3
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	4413      	add	r3, r2
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	2101      	movs	r1, #1
 8008da6:	4413      	add	r3, r2
 8008da8:	4648      	mov	r0, r9
 8008daa:	9306      	str	r3, [sp, #24]
 8008dac:	f000 fc6c 	bl	8009688 <__i2b>
 8008db0:	9b04      	ldr	r3, [sp, #16]
 8008db2:	4605      	mov	r5, r0
 8008db4:	b166      	cbz	r6, 8008dd0 <_dtoa_r+0x670>
 8008db6:	9a06      	ldr	r2, [sp, #24]
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	dd09      	ble.n	8008dd0 <_dtoa_r+0x670>
 8008dbc:	42b2      	cmp	r2, r6
 8008dbe:	9905      	ldr	r1, [sp, #20]
 8008dc0:	bfa8      	it	ge
 8008dc2:	4632      	movge	r2, r6
 8008dc4:	1a89      	subs	r1, r1, r2
 8008dc6:	9105      	str	r1, [sp, #20]
 8008dc8:	9906      	ldr	r1, [sp, #24]
 8008dca:	1ab6      	subs	r6, r6, r2
 8008dcc:	1a8a      	subs	r2, r1, r2
 8008dce:	9206      	str	r2, [sp, #24]
 8008dd0:	b1fb      	cbz	r3, 8008e12 <_dtoa_r+0x6b2>
 8008dd2:	9a08      	ldr	r2, [sp, #32]
 8008dd4:	2a00      	cmp	r2, #0
 8008dd6:	f000 80bc 	beq.w	8008f52 <_dtoa_r+0x7f2>
 8008dda:	b19c      	cbz	r4, 8008e04 <_dtoa_r+0x6a4>
 8008ddc:	4629      	mov	r1, r5
 8008dde:	4622      	mov	r2, r4
 8008de0:	4648      	mov	r0, r9
 8008de2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008de4:	f000 fd10 	bl	8009808 <__pow5mult>
 8008de8:	9a01      	ldr	r2, [sp, #4]
 8008dea:	4601      	mov	r1, r0
 8008dec:	4605      	mov	r5, r0
 8008dee:	4648      	mov	r0, r9
 8008df0:	f000 fc60 	bl	80096b4 <__multiply>
 8008df4:	9901      	ldr	r1, [sp, #4]
 8008df6:	9004      	str	r0, [sp, #16]
 8008df8:	4648      	mov	r0, r9
 8008dfa:	f000 fb47 	bl	800948c <_Bfree>
 8008dfe:	9a04      	ldr	r2, [sp, #16]
 8008e00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e02:	9201      	str	r2, [sp, #4]
 8008e04:	1b1a      	subs	r2, r3, r4
 8008e06:	d004      	beq.n	8008e12 <_dtoa_r+0x6b2>
 8008e08:	9901      	ldr	r1, [sp, #4]
 8008e0a:	4648      	mov	r0, r9
 8008e0c:	f000 fcfc 	bl	8009808 <__pow5mult>
 8008e10:	9001      	str	r0, [sp, #4]
 8008e12:	2101      	movs	r1, #1
 8008e14:	4648      	mov	r0, r9
 8008e16:	f000 fc37 	bl	8009688 <__i2b>
 8008e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 81d0 	beq.w	80091c4 <_dtoa_r+0xa64>
 8008e24:	461a      	mov	r2, r3
 8008e26:	4601      	mov	r1, r0
 8008e28:	4648      	mov	r0, r9
 8008e2a:	f000 fced 	bl	8009808 <__pow5mult>
 8008e2e:	9b07      	ldr	r3, [sp, #28]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	4604      	mov	r4, r0
 8008e34:	f300 8095 	bgt.w	8008f62 <_dtoa_r+0x802>
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f040 808b 	bne.w	8008f56 <_dtoa_r+0x7f6>
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	f040 8087 	bne.w	8008f5a <_dtoa_r+0x7fa>
 8008e4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008e50:	0d12      	lsrs	r2, r2, #20
 8008e52:	0512      	lsls	r2, r2, #20
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	f000 8082 	beq.w	8008f5e <_dtoa_r+0x7fe>
 8008e5a:	9b05      	ldr	r3, [sp, #20]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	9305      	str	r3, [sp, #20]
 8008e60:	9b06      	ldr	r3, [sp, #24]
 8008e62:	3301      	adds	r3, #1
 8008e64:	9306      	str	r3, [sp, #24]
 8008e66:	2301      	movs	r3, #1
 8008e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 81af 	beq.w	80091d0 <_dtoa_r+0xa70>
 8008e72:	6922      	ldr	r2, [r4, #16]
 8008e74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008e78:	6910      	ldr	r0, [r2, #16]
 8008e7a:	f000 fbb9 	bl	80095f0 <__hi0bits>
 8008e7e:	f1c0 0020 	rsb	r0, r0, #32
 8008e82:	9b06      	ldr	r3, [sp, #24]
 8008e84:	4418      	add	r0, r3
 8008e86:	f010 001f 	ands.w	r0, r0, #31
 8008e8a:	d076      	beq.n	8008f7a <_dtoa_r+0x81a>
 8008e8c:	f1c0 0220 	rsb	r2, r0, #32
 8008e90:	2a04      	cmp	r2, #4
 8008e92:	dd69      	ble.n	8008f68 <_dtoa_r+0x808>
 8008e94:	9b05      	ldr	r3, [sp, #20]
 8008e96:	f1c0 001c 	rsb	r0, r0, #28
 8008e9a:	4403      	add	r3, r0
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	4406      	add	r6, r0
 8008ea2:	4403      	add	r3, r0
 8008ea4:	9306      	str	r3, [sp, #24]
 8008ea6:	9b05      	ldr	r3, [sp, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dd05      	ble.n	8008eb8 <_dtoa_r+0x758>
 8008eac:	9901      	ldr	r1, [sp, #4]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4648      	mov	r0, r9
 8008eb2:	f000 fd03 	bl	80098bc <__lshift>
 8008eb6:	9001      	str	r0, [sp, #4]
 8008eb8:	9b06      	ldr	r3, [sp, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	dd05      	ble.n	8008eca <_dtoa_r+0x76a>
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	4648      	mov	r0, r9
 8008ec4:	f000 fcfa 	bl	80098bc <__lshift>
 8008ec8:	4604      	mov	r4, r0
 8008eca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d056      	beq.n	8008f7e <_dtoa_r+0x81e>
 8008ed0:	9801      	ldr	r0, [sp, #4]
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	f000 fd5e 	bl	8009994 <__mcmp>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	da50      	bge.n	8008f7e <_dtoa_r+0x81e>
 8008edc:	f108 33ff 	add.w	r3, r8, #4294967295
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	9901      	ldr	r1, [sp, #4]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	220a      	movs	r2, #10
 8008ee8:	4648      	mov	r0, r9
 8008eea:	f000 faf1 	bl	80094d0 <__multadd>
 8008eee:	9b08      	ldr	r3, [sp, #32]
 8008ef0:	9001      	str	r0, [sp, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 816e 	beq.w	80091d4 <_dtoa_r+0xa74>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	2300      	movs	r3, #0
 8008efc:	220a      	movs	r2, #10
 8008efe:	4648      	mov	r0, r9
 8008f00:	f000 fae6 	bl	80094d0 <__multadd>
 8008f04:	f1bb 0f00 	cmp.w	fp, #0
 8008f08:	4605      	mov	r5, r0
 8008f0a:	dc64      	bgt.n	8008fd6 <_dtoa_r+0x876>
 8008f0c:	9b07      	ldr	r3, [sp, #28]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	dc3e      	bgt.n	8008f90 <_dtoa_r+0x830>
 8008f12:	e060      	b.n	8008fd6 <_dtoa_r+0x876>
 8008f14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008f1a:	e73c      	b.n	8008d96 <_dtoa_r+0x636>
 8008f1c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	bfbf      	itttt	lt
 8008f24:	1ae2      	sublt	r2, r4, r3
 8008f26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f28:	189b      	addlt	r3, r3, r2
 8008f2a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8008f2c:	bfae      	itee	ge
 8008f2e:	1b1c      	subge	r4, r3, r4
 8008f30:	4623      	movlt	r3, r4
 8008f32:	2400      	movlt	r4, #0
 8008f34:	f1ba 0f00 	cmp.w	sl, #0
 8008f38:	bfb5      	itete	lt
 8008f3a:	9a05      	ldrlt	r2, [sp, #20]
 8008f3c:	9e05      	ldrge	r6, [sp, #20]
 8008f3e:	eba2 060a 	sublt.w	r6, r2, sl
 8008f42:	4652      	movge	r2, sl
 8008f44:	bfb8      	it	lt
 8008f46:	2200      	movlt	r2, #0
 8008f48:	e727      	b.n	8008d9a <_dtoa_r+0x63a>
 8008f4a:	9e05      	ldr	r6, [sp, #20]
 8008f4c:	9d08      	ldr	r5, [sp, #32]
 8008f4e:	461c      	mov	r4, r3
 8008f50:	e730      	b.n	8008db4 <_dtoa_r+0x654>
 8008f52:	461a      	mov	r2, r3
 8008f54:	e758      	b.n	8008e08 <_dtoa_r+0x6a8>
 8008f56:	2300      	movs	r3, #0
 8008f58:	e786      	b.n	8008e68 <_dtoa_r+0x708>
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	e784      	b.n	8008e68 <_dtoa_r+0x708>
 8008f5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008f60:	e783      	b.n	8008e6a <_dtoa_r+0x70a>
 8008f62:	2300      	movs	r3, #0
 8008f64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f66:	e784      	b.n	8008e72 <_dtoa_r+0x712>
 8008f68:	d09d      	beq.n	8008ea6 <_dtoa_r+0x746>
 8008f6a:	9b05      	ldr	r3, [sp, #20]
 8008f6c:	321c      	adds	r2, #28
 8008f6e:	4413      	add	r3, r2
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	4416      	add	r6, r2
 8008f76:	4413      	add	r3, r2
 8008f78:	e794      	b.n	8008ea4 <_dtoa_r+0x744>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	e7f5      	b.n	8008f6a <_dtoa_r+0x80a>
 8008f7e:	f1ba 0f00 	cmp.w	sl, #0
 8008f82:	f8cd 8010 	str.w	r8, [sp, #16]
 8008f86:	46d3      	mov	fp, sl
 8008f88:	dc21      	bgt.n	8008fce <_dtoa_r+0x86e>
 8008f8a:	9b07      	ldr	r3, [sp, #28]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	dd1e      	ble.n	8008fce <_dtoa_r+0x86e>
 8008f90:	f1bb 0f00 	cmp.w	fp, #0
 8008f94:	f47f aeb7 	bne.w	8008d06 <_dtoa_r+0x5a6>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	2205      	movs	r2, #5
 8008f9e:	4648      	mov	r0, r9
 8008fa0:	f000 fa96 	bl	80094d0 <__multadd>
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	9801      	ldr	r0, [sp, #4]
 8008faa:	f000 fcf3 	bl	8009994 <__mcmp>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f77f aea9 	ble.w	8008d06 <_dtoa_r+0x5a6>
 8008fb4:	463e      	mov	r6, r7
 8008fb6:	2331      	movs	r3, #49	@ 0x31
 8008fb8:	f806 3b01 	strb.w	r3, [r6], #1
 8008fbc:	9b04      	ldr	r3, [sp, #16]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	9304      	str	r3, [sp, #16]
 8008fc2:	e6a4      	b.n	8008d0e <_dtoa_r+0x5ae>
 8008fc4:	f8cd 8010 	str.w	r8, [sp, #16]
 8008fc8:	4654      	mov	r4, sl
 8008fca:	4625      	mov	r5, r4
 8008fcc:	e7f2      	b.n	8008fb4 <_dtoa_r+0x854>
 8008fce:	9b08      	ldr	r3, [sp, #32]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8103 	beq.w	80091dc <_dtoa_r+0xa7c>
 8008fd6:	2e00      	cmp	r6, #0
 8008fd8:	dd05      	ble.n	8008fe6 <_dtoa_r+0x886>
 8008fda:	4629      	mov	r1, r5
 8008fdc:	4632      	mov	r2, r6
 8008fde:	4648      	mov	r0, r9
 8008fe0:	f000 fc6c 	bl	80098bc <__lshift>
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d058      	beq.n	800909e <_dtoa_r+0x93e>
 8008fec:	6869      	ldr	r1, [r5, #4]
 8008fee:	4648      	mov	r0, r9
 8008ff0:	f000 fa0c 	bl	800940c <_Balloc>
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	b928      	cbnz	r0, 8009004 <_dtoa_r+0x8a4>
 8008ff8:	4b82      	ldr	r3, [pc, #520]	@ (8009204 <_dtoa_r+0xaa4>)
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009000:	f7ff bbc7 	b.w	8008792 <_dtoa_r+0x32>
 8009004:	692a      	ldr	r2, [r5, #16]
 8009006:	3202      	adds	r2, #2
 8009008:	0092      	lsls	r2, r2, #2
 800900a:	f105 010c 	add.w	r1, r5, #12
 800900e:	300c      	adds	r0, #12
 8009010:	f001 ff1e 	bl	800ae50 <memcpy>
 8009014:	2201      	movs	r2, #1
 8009016:	4631      	mov	r1, r6
 8009018:	4648      	mov	r0, r9
 800901a:	f000 fc4f 	bl	80098bc <__lshift>
 800901e:	1c7b      	adds	r3, r7, #1
 8009020:	9305      	str	r3, [sp, #20]
 8009022:	eb07 030b 	add.w	r3, r7, fp
 8009026:	9309      	str	r3, [sp, #36]	@ 0x24
 8009028:	9b02      	ldr	r3, [sp, #8]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	46a8      	mov	r8, r5
 8009030:	9308      	str	r3, [sp, #32]
 8009032:	4605      	mov	r5, r0
 8009034:	9b05      	ldr	r3, [sp, #20]
 8009036:	9801      	ldr	r0, [sp, #4]
 8009038:	4621      	mov	r1, r4
 800903a:	f103 3bff 	add.w	fp, r3, #4294967295
 800903e:	f7ff fb07 	bl	8008650 <quorem>
 8009042:	4641      	mov	r1, r8
 8009044:	9002      	str	r0, [sp, #8]
 8009046:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800904a:	9801      	ldr	r0, [sp, #4]
 800904c:	f000 fca2 	bl	8009994 <__mcmp>
 8009050:	462a      	mov	r2, r5
 8009052:	9006      	str	r0, [sp, #24]
 8009054:	4621      	mov	r1, r4
 8009056:	4648      	mov	r0, r9
 8009058:	f000 fcb8 	bl	80099cc <__mdiff>
 800905c:	68c2      	ldr	r2, [r0, #12]
 800905e:	4606      	mov	r6, r0
 8009060:	b9fa      	cbnz	r2, 80090a2 <_dtoa_r+0x942>
 8009062:	4601      	mov	r1, r0
 8009064:	9801      	ldr	r0, [sp, #4]
 8009066:	f000 fc95 	bl	8009994 <__mcmp>
 800906a:	4602      	mov	r2, r0
 800906c:	4631      	mov	r1, r6
 800906e:	4648      	mov	r0, r9
 8009070:	920a      	str	r2, [sp, #40]	@ 0x28
 8009072:	f000 fa0b 	bl	800948c <_Bfree>
 8009076:	9b07      	ldr	r3, [sp, #28]
 8009078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800907a:	9e05      	ldr	r6, [sp, #20]
 800907c:	ea43 0102 	orr.w	r1, r3, r2
 8009080:	9b08      	ldr	r3, [sp, #32]
 8009082:	4319      	orrs	r1, r3
 8009084:	d10f      	bne.n	80090a6 <_dtoa_r+0x946>
 8009086:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800908a:	d028      	beq.n	80090de <_dtoa_r+0x97e>
 800908c:	9b06      	ldr	r3, [sp, #24]
 800908e:	2b00      	cmp	r3, #0
 8009090:	dd02      	ble.n	8009098 <_dtoa_r+0x938>
 8009092:	9b02      	ldr	r3, [sp, #8]
 8009094:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009098:	f88b a000 	strb.w	sl, [fp]
 800909c:	e639      	b.n	8008d12 <_dtoa_r+0x5b2>
 800909e:	4628      	mov	r0, r5
 80090a0:	e7bd      	b.n	800901e <_dtoa_r+0x8be>
 80090a2:	2201      	movs	r2, #1
 80090a4:	e7e2      	b.n	800906c <_dtoa_r+0x90c>
 80090a6:	9b06      	ldr	r3, [sp, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	db04      	blt.n	80090b6 <_dtoa_r+0x956>
 80090ac:	9907      	ldr	r1, [sp, #28]
 80090ae:	430b      	orrs	r3, r1
 80090b0:	9908      	ldr	r1, [sp, #32]
 80090b2:	430b      	orrs	r3, r1
 80090b4:	d120      	bne.n	80090f8 <_dtoa_r+0x998>
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	ddee      	ble.n	8009098 <_dtoa_r+0x938>
 80090ba:	9901      	ldr	r1, [sp, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	4648      	mov	r0, r9
 80090c0:	f000 fbfc 	bl	80098bc <__lshift>
 80090c4:	4621      	mov	r1, r4
 80090c6:	9001      	str	r0, [sp, #4]
 80090c8:	f000 fc64 	bl	8009994 <__mcmp>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	dc03      	bgt.n	80090d8 <_dtoa_r+0x978>
 80090d0:	d1e2      	bne.n	8009098 <_dtoa_r+0x938>
 80090d2:	f01a 0f01 	tst.w	sl, #1
 80090d6:	d0df      	beq.n	8009098 <_dtoa_r+0x938>
 80090d8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80090dc:	d1d9      	bne.n	8009092 <_dtoa_r+0x932>
 80090de:	2339      	movs	r3, #57	@ 0x39
 80090e0:	f88b 3000 	strb.w	r3, [fp]
 80090e4:	4633      	mov	r3, r6
 80090e6:	461e      	mov	r6, r3
 80090e8:	3b01      	subs	r3, #1
 80090ea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80090ee:	2a39      	cmp	r2, #57	@ 0x39
 80090f0:	d053      	beq.n	800919a <_dtoa_r+0xa3a>
 80090f2:	3201      	adds	r2, #1
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e60c      	b.n	8008d12 <_dtoa_r+0x5b2>
 80090f8:	2a00      	cmp	r2, #0
 80090fa:	dd07      	ble.n	800910c <_dtoa_r+0x9ac>
 80090fc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009100:	d0ed      	beq.n	80090de <_dtoa_r+0x97e>
 8009102:	f10a 0301 	add.w	r3, sl, #1
 8009106:	f88b 3000 	strb.w	r3, [fp]
 800910a:	e602      	b.n	8008d12 <_dtoa_r+0x5b2>
 800910c:	9b05      	ldr	r3, [sp, #20]
 800910e:	9a05      	ldr	r2, [sp, #20]
 8009110:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009116:	4293      	cmp	r3, r2
 8009118:	d029      	beq.n	800916e <_dtoa_r+0xa0e>
 800911a:	9901      	ldr	r1, [sp, #4]
 800911c:	2300      	movs	r3, #0
 800911e:	220a      	movs	r2, #10
 8009120:	4648      	mov	r0, r9
 8009122:	f000 f9d5 	bl	80094d0 <__multadd>
 8009126:	45a8      	cmp	r8, r5
 8009128:	9001      	str	r0, [sp, #4]
 800912a:	f04f 0300 	mov.w	r3, #0
 800912e:	f04f 020a 	mov.w	r2, #10
 8009132:	4641      	mov	r1, r8
 8009134:	4648      	mov	r0, r9
 8009136:	d107      	bne.n	8009148 <_dtoa_r+0x9e8>
 8009138:	f000 f9ca 	bl	80094d0 <__multadd>
 800913c:	4680      	mov	r8, r0
 800913e:	4605      	mov	r5, r0
 8009140:	9b05      	ldr	r3, [sp, #20]
 8009142:	3301      	adds	r3, #1
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	e775      	b.n	8009034 <_dtoa_r+0x8d4>
 8009148:	f000 f9c2 	bl	80094d0 <__multadd>
 800914c:	4629      	mov	r1, r5
 800914e:	4680      	mov	r8, r0
 8009150:	2300      	movs	r3, #0
 8009152:	220a      	movs	r2, #10
 8009154:	4648      	mov	r0, r9
 8009156:	f000 f9bb 	bl	80094d0 <__multadd>
 800915a:	4605      	mov	r5, r0
 800915c:	e7f0      	b.n	8009140 <_dtoa_r+0x9e0>
 800915e:	f1bb 0f00 	cmp.w	fp, #0
 8009162:	bfcc      	ite	gt
 8009164:	465e      	movgt	r6, fp
 8009166:	2601      	movle	r6, #1
 8009168:	443e      	add	r6, r7
 800916a:	f04f 0800 	mov.w	r8, #0
 800916e:	9901      	ldr	r1, [sp, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	4648      	mov	r0, r9
 8009174:	f000 fba2 	bl	80098bc <__lshift>
 8009178:	4621      	mov	r1, r4
 800917a:	9001      	str	r0, [sp, #4]
 800917c:	f000 fc0a 	bl	8009994 <__mcmp>
 8009180:	2800      	cmp	r0, #0
 8009182:	dcaf      	bgt.n	80090e4 <_dtoa_r+0x984>
 8009184:	d102      	bne.n	800918c <_dtoa_r+0xa2c>
 8009186:	f01a 0f01 	tst.w	sl, #1
 800918a:	d1ab      	bne.n	80090e4 <_dtoa_r+0x984>
 800918c:	4633      	mov	r3, r6
 800918e:	461e      	mov	r6, r3
 8009190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009194:	2a30      	cmp	r2, #48	@ 0x30
 8009196:	d0fa      	beq.n	800918e <_dtoa_r+0xa2e>
 8009198:	e5bb      	b.n	8008d12 <_dtoa_r+0x5b2>
 800919a:	429f      	cmp	r7, r3
 800919c:	d1a3      	bne.n	80090e6 <_dtoa_r+0x986>
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	3301      	adds	r3, #1
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	2331      	movs	r3, #49	@ 0x31
 80091a6:	703b      	strb	r3, [r7, #0]
 80091a8:	e5b3      	b.n	8008d12 <_dtoa_r+0x5b2>
 80091aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80091ac:	4f16      	ldr	r7, [pc, #88]	@ (8009208 <_dtoa_r+0xaa8>)
 80091ae:	b11b      	cbz	r3, 80091b8 <_dtoa_r+0xa58>
 80091b0:	f107 0308 	add.w	r3, r7, #8
 80091b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	4638      	mov	r0, r7
 80091ba:	b011      	add	sp, #68	@ 0x44
 80091bc:	ecbd 8b02 	vpop	{d8}
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	9b07      	ldr	r3, [sp, #28]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	f77f ae36 	ble.w	8008e38 <_dtoa_r+0x6d8>
 80091cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091d0:	2001      	movs	r0, #1
 80091d2:	e656      	b.n	8008e82 <_dtoa_r+0x722>
 80091d4:	f1bb 0f00 	cmp.w	fp, #0
 80091d8:	f77f aed7 	ble.w	8008f8a <_dtoa_r+0x82a>
 80091dc:	463e      	mov	r6, r7
 80091de:	9801      	ldr	r0, [sp, #4]
 80091e0:	4621      	mov	r1, r4
 80091e2:	f7ff fa35 	bl	8008650 <quorem>
 80091e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80091ea:	f806 ab01 	strb.w	sl, [r6], #1
 80091ee:	1bf2      	subs	r2, r6, r7
 80091f0:	4593      	cmp	fp, r2
 80091f2:	ddb4      	ble.n	800915e <_dtoa_r+0x9fe>
 80091f4:	9901      	ldr	r1, [sp, #4]
 80091f6:	2300      	movs	r3, #0
 80091f8:	220a      	movs	r2, #10
 80091fa:	4648      	mov	r0, r9
 80091fc:	f000 f968 	bl	80094d0 <__multadd>
 8009200:	9001      	str	r0, [sp, #4]
 8009202:	e7ec      	b.n	80091de <_dtoa_r+0xa7e>
 8009204:	0800bed1 	.word	0x0800bed1
 8009208:	0800be55 	.word	0x0800be55

0800920c <_free_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4605      	mov	r5, r0
 8009210:	2900      	cmp	r1, #0
 8009212:	d041      	beq.n	8009298 <_free_r+0x8c>
 8009214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009218:	1f0c      	subs	r4, r1, #4
 800921a:	2b00      	cmp	r3, #0
 800921c:	bfb8      	it	lt
 800921e:	18e4      	addlt	r4, r4, r3
 8009220:	f000 f8e8 	bl	80093f4 <__malloc_lock>
 8009224:	4a1d      	ldr	r2, [pc, #116]	@ (800929c <_free_r+0x90>)
 8009226:	6813      	ldr	r3, [r2, #0]
 8009228:	b933      	cbnz	r3, 8009238 <_free_r+0x2c>
 800922a:	6063      	str	r3, [r4, #4]
 800922c:	6014      	str	r4, [r2, #0]
 800922e:	4628      	mov	r0, r5
 8009230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009234:	f000 b8e4 	b.w	8009400 <__malloc_unlock>
 8009238:	42a3      	cmp	r3, r4
 800923a:	d908      	bls.n	800924e <_free_r+0x42>
 800923c:	6820      	ldr	r0, [r4, #0]
 800923e:	1821      	adds	r1, r4, r0
 8009240:	428b      	cmp	r3, r1
 8009242:	bf01      	itttt	eq
 8009244:	6819      	ldreq	r1, [r3, #0]
 8009246:	685b      	ldreq	r3, [r3, #4]
 8009248:	1809      	addeq	r1, r1, r0
 800924a:	6021      	streq	r1, [r4, #0]
 800924c:	e7ed      	b.n	800922a <_free_r+0x1e>
 800924e:	461a      	mov	r2, r3
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	b10b      	cbz	r3, 8009258 <_free_r+0x4c>
 8009254:	42a3      	cmp	r3, r4
 8009256:	d9fa      	bls.n	800924e <_free_r+0x42>
 8009258:	6811      	ldr	r1, [r2, #0]
 800925a:	1850      	adds	r0, r2, r1
 800925c:	42a0      	cmp	r0, r4
 800925e:	d10b      	bne.n	8009278 <_free_r+0x6c>
 8009260:	6820      	ldr	r0, [r4, #0]
 8009262:	4401      	add	r1, r0
 8009264:	1850      	adds	r0, r2, r1
 8009266:	4283      	cmp	r3, r0
 8009268:	6011      	str	r1, [r2, #0]
 800926a:	d1e0      	bne.n	800922e <_free_r+0x22>
 800926c:	6818      	ldr	r0, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	6053      	str	r3, [r2, #4]
 8009272:	4408      	add	r0, r1
 8009274:	6010      	str	r0, [r2, #0]
 8009276:	e7da      	b.n	800922e <_free_r+0x22>
 8009278:	d902      	bls.n	8009280 <_free_r+0x74>
 800927a:	230c      	movs	r3, #12
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	e7d6      	b.n	800922e <_free_r+0x22>
 8009280:	6820      	ldr	r0, [r4, #0]
 8009282:	1821      	adds	r1, r4, r0
 8009284:	428b      	cmp	r3, r1
 8009286:	bf04      	itt	eq
 8009288:	6819      	ldreq	r1, [r3, #0]
 800928a:	685b      	ldreq	r3, [r3, #4]
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	bf04      	itt	eq
 8009290:	1809      	addeq	r1, r1, r0
 8009292:	6021      	streq	r1, [r4, #0]
 8009294:	6054      	str	r4, [r2, #4]
 8009296:	e7ca      	b.n	800922e <_free_r+0x22>
 8009298:	bd38      	pop	{r3, r4, r5, pc}
 800929a:	bf00      	nop
 800929c:	240004dc 	.word	0x240004dc

080092a0 <malloc>:
 80092a0:	4b02      	ldr	r3, [pc, #8]	@ (80092ac <malloc+0xc>)
 80092a2:	4601      	mov	r1, r0
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	f000 b825 	b.w	80092f4 <_malloc_r>
 80092aa:	bf00      	nop
 80092ac:	2400001c 	.word	0x2400001c

080092b0 <sbrk_aligned>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	4e0f      	ldr	r6, [pc, #60]	@ (80092f0 <sbrk_aligned+0x40>)
 80092b4:	460c      	mov	r4, r1
 80092b6:	6831      	ldr	r1, [r6, #0]
 80092b8:	4605      	mov	r5, r0
 80092ba:	b911      	cbnz	r1, 80092c2 <sbrk_aligned+0x12>
 80092bc:	f001 fdb8 	bl	800ae30 <_sbrk_r>
 80092c0:	6030      	str	r0, [r6, #0]
 80092c2:	4621      	mov	r1, r4
 80092c4:	4628      	mov	r0, r5
 80092c6:	f001 fdb3 	bl	800ae30 <_sbrk_r>
 80092ca:	1c43      	adds	r3, r0, #1
 80092cc:	d103      	bne.n	80092d6 <sbrk_aligned+0x26>
 80092ce:	f04f 34ff 	mov.w	r4, #4294967295
 80092d2:	4620      	mov	r0, r4
 80092d4:	bd70      	pop	{r4, r5, r6, pc}
 80092d6:	1cc4      	adds	r4, r0, #3
 80092d8:	f024 0403 	bic.w	r4, r4, #3
 80092dc:	42a0      	cmp	r0, r4
 80092de:	d0f8      	beq.n	80092d2 <sbrk_aligned+0x22>
 80092e0:	1a21      	subs	r1, r4, r0
 80092e2:	4628      	mov	r0, r5
 80092e4:	f001 fda4 	bl	800ae30 <_sbrk_r>
 80092e8:	3001      	adds	r0, #1
 80092ea:	d1f2      	bne.n	80092d2 <sbrk_aligned+0x22>
 80092ec:	e7ef      	b.n	80092ce <sbrk_aligned+0x1e>
 80092ee:	bf00      	nop
 80092f0:	240004d8 	.word	0x240004d8

080092f4 <_malloc_r>:
 80092f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	1ccd      	adds	r5, r1, #3
 80092fa:	f025 0503 	bic.w	r5, r5, #3
 80092fe:	3508      	adds	r5, #8
 8009300:	2d0c      	cmp	r5, #12
 8009302:	bf38      	it	cc
 8009304:	250c      	movcc	r5, #12
 8009306:	2d00      	cmp	r5, #0
 8009308:	4606      	mov	r6, r0
 800930a:	db01      	blt.n	8009310 <_malloc_r+0x1c>
 800930c:	42a9      	cmp	r1, r5
 800930e:	d904      	bls.n	800931a <_malloc_r+0x26>
 8009310:	230c      	movs	r3, #12
 8009312:	6033      	str	r3, [r6, #0]
 8009314:	2000      	movs	r0, #0
 8009316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093f0 <_malloc_r+0xfc>
 800931e:	f000 f869 	bl	80093f4 <__malloc_lock>
 8009322:	f8d8 3000 	ldr.w	r3, [r8]
 8009326:	461c      	mov	r4, r3
 8009328:	bb44      	cbnz	r4, 800937c <_malloc_r+0x88>
 800932a:	4629      	mov	r1, r5
 800932c:	4630      	mov	r0, r6
 800932e:	f7ff ffbf 	bl	80092b0 <sbrk_aligned>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	4604      	mov	r4, r0
 8009336:	d158      	bne.n	80093ea <_malloc_r+0xf6>
 8009338:	f8d8 4000 	ldr.w	r4, [r8]
 800933c:	4627      	mov	r7, r4
 800933e:	2f00      	cmp	r7, #0
 8009340:	d143      	bne.n	80093ca <_malloc_r+0xd6>
 8009342:	2c00      	cmp	r4, #0
 8009344:	d04b      	beq.n	80093de <_malloc_r+0xea>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	4639      	mov	r1, r7
 800934a:	4630      	mov	r0, r6
 800934c:	eb04 0903 	add.w	r9, r4, r3
 8009350:	f001 fd6e 	bl	800ae30 <_sbrk_r>
 8009354:	4581      	cmp	r9, r0
 8009356:	d142      	bne.n	80093de <_malloc_r+0xea>
 8009358:	6821      	ldr	r1, [r4, #0]
 800935a:	1a6d      	subs	r5, r5, r1
 800935c:	4629      	mov	r1, r5
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff ffa6 	bl	80092b0 <sbrk_aligned>
 8009364:	3001      	adds	r0, #1
 8009366:	d03a      	beq.n	80093de <_malloc_r+0xea>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	442b      	add	r3, r5
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	f8d8 3000 	ldr.w	r3, [r8]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	bb62      	cbnz	r2, 80093d0 <_malloc_r+0xdc>
 8009376:	f8c8 7000 	str.w	r7, [r8]
 800937a:	e00f      	b.n	800939c <_malloc_r+0xa8>
 800937c:	6822      	ldr	r2, [r4, #0]
 800937e:	1b52      	subs	r2, r2, r5
 8009380:	d420      	bmi.n	80093c4 <_malloc_r+0xd0>
 8009382:	2a0b      	cmp	r2, #11
 8009384:	d917      	bls.n	80093b6 <_malloc_r+0xc2>
 8009386:	1961      	adds	r1, r4, r5
 8009388:	42a3      	cmp	r3, r4
 800938a:	6025      	str	r5, [r4, #0]
 800938c:	bf18      	it	ne
 800938e:	6059      	strne	r1, [r3, #4]
 8009390:	6863      	ldr	r3, [r4, #4]
 8009392:	bf08      	it	eq
 8009394:	f8c8 1000 	streq.w	r1, [r8]
 8009398:	5162      	str	r2, [r4, r5]
 800939a:	604b      	str	r3, [r1, #4]
 800939c:	4630      	mov	r0, r6
 800939e:	f000 f82f 	bl	8009400 <__malloc_unlock>
 80093a2:	f104 000b 	add.w	r0, r4, #11
 80093a6:	1d23      	adds	r3, r4, #4
 80093a8:	f020 0007 	bic.w	r0, r0, #7
 80093ac:	1ac2      	subs	r2, r0, r3
 80093ae:	bf1c      	itt	ne
 80093b0:	1a1b      	subne	r3, r3, r0
 80093b2:	50a3      	strne	r3, [r4, r2]
 80093b4:	e7af      	b.n	8009316 <_malloc_r+0x22>
 80093b6:	6862      	ldr	r2, [r4, #4]
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	bf0c      	ite	eq
 80093bc:	f8c8 2000 	streq.w	r2, [r8]
 80093c0:	605a      	strne	r2, [r3, #4]
 80093c2:	e7eb      	b.n	800939c <_malloc_r+0xa8>
 80093c4:	4623      	mov	r3, r4
 80093c6:	6864      	ldr	r4, [r4, #4]
 80093c8:	e7ae      	b.n	8009328 <_malloc_r+0x34>
 80093ca:	463c      	mov	r4, r7
 80093cc:	687f      	ldr	r7, [r7, #4]
 80093ce:	e7b6      	b.n	800933e <_malloc_r+0x4a>
 80093d0:	461a      	mov	r2, r3
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	42a3      	cmp	r3, r4
 80093d6:	d1fb      	bne.n	80093d0 <_malloc_r+0xdc>
 80093d8:	2300      	movs	r3, #0
 80093da:	6053      	str	r3, [r2, #4]
 80093dc:	e7de      	b.n	800939c <_malloc_r+0xa8>
 80093de:	230c      	movs	r3, #12
 80093e0:	6033      	str	r3, [r6, #0]
 80093e2:	4630      	mov	r0, r6
 80093e4:	f000 f80c 	bl	8009400 <__malloc_unlock>
 80093e8:	e794      	b.n	8009314 <_malloc_r+0x20>
 80093ea:	6005      	str	r5, [r0, #0]
 80093ec:	e7d6      	b.n	800939c <_malloc_r+0xa8>
 80093ee:	bf00      	nop
 80093f0:	240004dc 	.word	0x240004dc

080093f4 <__malloc_lock>:
 80093f4:	4801      	ldr	r0, [pc, #4]	@ (80093fc <__malloc_lock+0x8>)
 80093f6:	f7ff b922 	b.w	800863e <__retarget_lock_acquire_recursive>
 80093fa:	bf00      	nop
 80093fc:	240004d4 	.word	0x240004d4

08009400 <__malloc_unlock>:
 8009400:	4801      	ldr	r0, [pc, #4]	@ (8009408 <__malloc_unlock+0x8>)
 8009402:	f7ff b91d 	b.w	8008640 <__retarget_lock_release_recursive>
 8009406:	bf00      	nop
 8009408:	240004d4 	.word	0x240004d4

0800940c <_Balloc>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	69c6      	ldr	r6, [r0, #28]
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	b976      	cbnz	r6, 8009434 <_Balloc+0x28>
 8009416:	2010      	movs	r0, #16
 8009418:	f7ff ff42 	bl	80092a0 <malloc>
 800941c:	4602      	mov	r2, r0
 800941e:	61e0      	str	r0, [r4, #28]
 8009420:	b920      	cbnz	r0, 800942c <_Balloc+0x20>
 8009422:	4b18      	ldr	r3, [pc, #96]	@ (8009484 <_Balloc+0x78>)
 8009424:	4818      	ldr	r0, [pc, #96]	@ (8009488 <_Balloc+0x7c>)
 8009426:	216b      	movs	r1, #107	@ 0x6b
 8009428:	f001 fd2a 	bl	800ae80 <__assert_func>
 800942c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009430:	6006      	str	r6, [r0, #0]
 8009432:	60c6      	str	r6, [r0, #12]
 8009434:	69e6      	ldr	r6, [r4, #28]
 8009436:	68f3      	ldr	r3, [r6, #12]
 8009438:	b183      	cbz	r3, 800945c <_Balloc+0x50>
 800943a:	69e3      	ldr	r3, [r4, #28]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009442:	b9b8      	cbnz	r0, 8009474 <_Balloc+0x68>
 8009444:	2101      	movs	r1, #1
 8009446:	fa01 f605 	lsl.w	r6, r1, r5
 800944a:	1d72      	adds	r2, r6, #5
 800944c:	0092      	lsls	r2, r2, #2
 800944e:	4620      	mov	r0, r4
 8009450:	f001 fd34 	bl	800aebc <_calloc_r>
 8009454:	b160      	cbz	r0, 8009470 <_Balloc+0x64>
 8009456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800945a:	e00e      	b.n	800947a <_Balloc+0x6e>
 800945c:	2221      	movs	r2, #33	@ 0x21
 800945e:	2104      	movs	r1, #4
 8009460:	4620      	mov	r0, r4
 8009462:	f001 fd2b 	bl	800aebc <_calloc_r>
 8009466:	69e3      	ldr	r3, [r4, #28]
 8009468:	60f0      	str	r0, [r6, #12]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e4      	bne.n	800943a <_Balloc+0x2e>
 8009470:	2000      	movs	r0, #0
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	6802      	ldr	r2, [r0, #0]
 8009476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800947a:	2300      	movs	r3, #0
 800947c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009480:	e7f7      	b.n	8009472 <_Balloc+0x66>
 8009482:	bf00      	nop
 8009484:	0800be62 	.word	0x0800be62
 8009488:	0800bee2 	.word	0x0800bee2

0800948c <_Bfree>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	69c6      	ldr	r6, [r0, #28]
 8009490:	4605      	mov	r5, r0
 8009492:	460c      	mov	r4, r1
 8009494:	b976      	cbnz	r6, 80094b4 <_Bfree+0x28>
 8009496:	2010      	movs	r0, #16
 8009498:	f7ff ff02 	bl	80092a0 <malloc>
 800949c:	4602      	mov	r2, r0
 800949e:	61e8      	str	r0, [r5, #28]
 80094a0:	b920      	cbnz	r0, 80094ac <_Bfree+0x20>
 80094a2:	4b09      	ldr	r3, [pc, #36]	@ (80094c8 <_Bfree+0x3c>)
 80094a4:	4809      	ldr	r0, [pc, #36]	@ (80094cc <_Bfree+0x40>)
 80094a6:	218f      	movs	r1, #143	@ 0x8f
 80094a8:	f001 fcea 	bl	800ae80 <__assert_func>
 80094ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b0:	6006      	str	r6, [r0, #0]
 80094b2:	60c6      	str	r6, [r0, #12]
 80094b4:	b13c      	cbz	r4, 80094c6 <_Bfree+0x3a>
 80094b6:	69eb      	ldr	r3, [r5, #28]
 80094b8:	6862      	ldr	r2, [r4, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c0:	6021      	str	r1, [r4, #0]
 80094c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	0800be62 	.word	0x0800be62
 80094cc:	0800bee2 	.word	0x0800bee2

080094d0 <__multadd>:
 80094d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d4:	690d      	ldr	r5, [r1, #16]
 80094d6:	4607      	mov	r7, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	461e      	mov	r6, r3
 80094dc:	f101 0c14 	add.w	ip, r1, #20
 80094e0:	2000      	movs	r0, #0
 80094e2:	f8dc 3000 	ldr.w	r3, [ip]
 80094e6:	b299      	uxth	r1, r3
 80094e8:	fb02 6101 	mla	r1, r2, r1, r6
 80094ec:	0c1e      	lsrs	r6, r3, #16
 80094ee:	0c0b      	lsrs	r3, r1, #16
 80094f0:	fb02 3306 	mla	r3, r2, r6, r3
 80094f4:	b289      	uxth	r1, r1
 80094f6:	3001      	adds	r0, #1
 80094f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094fc:	4285      	cmp	r5, r0
 80094fe:	f84c 1b04 	str.w	r1, [ip], #4
 8009502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009506:	dcec      	bgt.n	80094e2 <__multadd+0x12>
 8009508:	b30e      	cbz	r6, 800954e <__multadd+0x7e>
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	42ab      	cmp	r3, r5
 800950e:	dc19      	bgt.n	8009544 <__multadd+0x74>
 8009510:	6861      	ldr	r1, [r4, #4]
 8009512:	4638      	mov	r0, r7
 8009514:	3101      	adds	r1, #1
 8009516:	f7ff ff79 	bl	800940c <_Balloc>
 800951a:	4680      	mov	r8, r0
 800951c:	b928      	cbnz	r0, 800952a <__multadd+0x5a>
 800951e:	4602      	mov	r2, r0
 8009520:	4b0c      	ldr	r3, [pc, #48]	@ (8009554 <__multadd+0x84>)
 8009522:	480d      	ldr	r0, [pc, #52]	@ (8009558 <__multadd+0x88>)
 8009524:	21ba      	movs	r1, #186	@ 0xba
 8009526:	f001 fcab 	bl	800ae80 <__assert_func>
 800952a:	6922      	ldr	r2, [r4, #16]
 800952c:	3202      	adds	r2, #2
 800952e:	f104 010c 	add.w	r1, r4, #12
 8009532:	0092      	lsls	r2, r2, #2
 8009534:	300c      	adds	r0, #12
 8009536:	f001 fc8b 	bl	800ae50 <memcpy>
 800953a:	4621      	mov	r1, r4
 800953c:	4638      	mov	r0, r7
 800953e:	f7ff ffa5 	bl	800948c <_Bfree>
 8009542:	4644      	mov	r4, r8
 8009544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009548:	3501      	adds	r5, #1
 800954a:	615e      	str	r6, [r3, #20]
 800954c:	6125      	str	r5, [r4, #16]
 800954e:	4620      	mov	r0, r4
 8009550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009554:	0800bed1 	.word	0x0800bed1
 8009558:	0800bee2 	.word	0x0800bee2

0800955c <__s2b>:
 800955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009560:	460c      	mov	r4, r1
 8009562:	4615      	mov	r5, r2
 8009564:	461f      	mov	r7, r3
 8009566:	2209      	movs	r2, #9
 8009568:	3308      	adds	r3, #8
 800956a:	4606      	mov	r6, r0
 800956c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009570:	2100      	movs	r1, #0
 8009572:	2201      	movs	r2, #1
 8009574:	429a      	cmp	r2, r3
 8009576:	db09      	blt.n	800958c <__s2b+0x30>
 8009578:	4630      	mov	r0, r6
 800957a:	f7ff ff47 	bl	800940c <_Balloc>
 800957e:	b940      	cbnz	r0, 8009592 <__s2b+0x36>
 8009580:	4602      	mov	r2, r0
 8009582:	4b19      	ldr	r3, [pc, #100]	@ (80095e8 <__s2b+0x8c>)
 8009584:	4819      	ldr	r0, [pc, #100]	@ (80095ec <__s2b+0x90>)
 8009586:	21d3      	movs	r1, #211	@ 0xd3
 8009588:	f001 fc7a 	bl	800ae80 <__assert_func>
 800958c:	0052      	lsls	r2, r2, #1
 800958e:	3101      	adds	r1, #1
 8009590:	e7f0      	b.n	8009574 <__s2b+0x18>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	6143      	str	r3, [r0, #20]
 8009596:	2d09      	cmp	r5, #9
 8009598:	f04f 0301 	mov.w	r3, #1
 800959c:	6103      	str	r3, [r0, #16]
 800959e:	dd16      	ble.n	80095ce <__s2b+0x72>
 80095a0:	f104 0909 	add.w	r9, r4, #9
 80095a4:	46c8      	mov	r8, r9
 80095a6:	442c      	add	r4, r5
 80095a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095ac:	4601      	mov	r1, r0
 80095ae:	3b30      	subs	r3, #48	@ 0x30
 80095b0:	220a      	movs	r2, #10
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ff8c 	bl	80094d0 <__multadd>
 80095b8:	45a0      	cmp	r8, r4
 80095ba:	d1f5      	bne.n	80095a8 <__s2b+0x4c>
 80095bc:	f1a5 0408 	sub.w	r4, r5, #8
 80095c0:	444c      	add	r4, r9
 80095c2:	1b2d      	subs	r5, r5, r4
 80095c4:	1963      	adds	r3, r4, r5
 80095c6:	42bb      	cmp	r3, r7
 80095c8:	db04      	blt.n	80095d4 <__s2b+0x78>
 80095ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ce:	340a      	adds	r4, #10
 80095d0:	2509      	movs	r5, #9
 80095d2:	e7f6      	b.n	80095c2 <__s2b+0x66>
 80095d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095d8:	4601      	mov	r1, r0
 80095da:	3b30      	subs	r3, #48	@ 0x30
 80095dc:	220a      	movs	r2, #10
 80095de:	4630      	mov	r0, r6
 80095e0:	f7ff ff76 	bl	80094d0 <__multadd>
 80095e4:	e7ee      	b.n	80095c4 <__s2b+0x68>
 80095e6:	bf00      	nop
 80095e8:	0800bed1 	.word	0x0800bed1
 80095ec:	0800bee2 	.word	0x0800bee2

080095f0 <__hi0bits>:
 80095f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095f4:	4603      	mov	r3, r0
 80095f6:	bf36      	itet	cc
 80095f8:	0403      	lslcc	r3, r0, #16
 80095fa:	2000      	movcs	r0, #0
 80095fc:	2010      	movcc	r0, #16
 80095fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009602:	bf3c      	itt	cc
 8009604:	021b      	lslcc	r3, r3, #8
 8009606:	3008      	addcc	r0, #8
 8009608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800960c:	bf3c      	itt	cc
 800960e:	011b      	lslcc	r3, r3, #4
 8009610:	3004      	addcc	r0, #4
 8009612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009616:	bf3c      	itt	cc
 8009618:	009b      	lslcc	r3, r3, #2
 800961a:	3002      	addcc	r0, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	db05      	blt.n	800962c <__hi0bits+0x3c>
 8009620:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009624:	f100 0001 	add.w	r0, r0, #1
 8009628:	bf08      	it	eq
 800962a:	2020      	moveq	r0, #32
 800962c:	4770      	bx	lr

0800962e <__lo0bits>:
 800962e:	6803      	ldr	r3, [r0, #0]
 8009630:	4602      	mov	r2, r0
 8009632:	f013 0007 	ands.w	r0, r3, #7
 8009636:	d00b      	beq.n	8009650 <__lo0bits+0x22>
 8009638:	07d9      	lsls	r1, r3, #31
 800963a:	d421      	bmi.n	8009680 <__lo0bits+0x52>
 800963c:	0798      	lsls	r0, r3, #30
 800963e:	bf49      	itett	mi
 8009640:	085b      	lsrmi	r3, r3, #1
 8009642:	089b      	lsrpl	r3, r3, #2
 8009644:	2001      	movmi	r0, #1
 8009646:	6013      	strmi	r3, [r2, #0]
 8009648:	bf5c      	itt	pl
 800964a:	6013      	strpl	r3, [r2, #0]
 800964c:	2002      	movpl	r0, #2
 800964e:	4770      	bx	lr
 8009650:	b299      	uxth	r1, r3
 8009652:	b909      	cbnz	r1, 8009658 <__lo0bits+0x2a>
 8009654:	0c1b      	lsrs	r3, r3, #16
 8009656:	2010      	movs	r0, #16
 8009658:	b2d9      	uxtb	r1, r3
 800965a:	b909      	cbnz	r1, 8009660 <__lo0bits+0x32>
 800965c:	3008      	adds	r0, #8
 800965e:	0a1b      	lsrs	r3, r3, #8
 8009660:	0719      	lsls	r1, r3, #28
 8009662:	bf04      	itt	eq
 8009664:	091b      	lsreq	r3, r3, #4
 8009666:	3004      	addeq	r0, #4
 8009668:	0799      	lsls	r1, r3, #30
 800966a:	bf04      	itt	eq
 800966c:	089b      	lsreq	r3, r3, #2
 800966e:	3002      	addeq	r0, #2
 8009670:	07d9      	lsls	r1, r3, #31
 8009672:	d403      	bmi.n	800967c <__lo0bits+0x4e>
 8009674:	085b      	lsrs	r3, r3, #1
 8009676:	f100 0001 	add.w	r0, r0, #1
 800967a:	d003      	beq.n	8009684 <__lo0bits+0x56>
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	4770      	bx	lr
 8009680:	2000      	movs	r0, #0
 8009682:	4770      	bx	lr
 8009684:	2020      	movs	r0, #32
 8009686:	4770      	bx	lr

08009688 <__i2b>:
 8009688:	b510      	push	{r4, lr}
 800968a:	460c      	mov	r4, r1
 800968c:	2101      	movs	r1, #1
 800968e:	f7ff febd 	bl	800940c <_Balloc>
 8009692:	4602      	mov	r2, r0
 8009694:	b928      	cbnz	r0, 80096a2 <__i2b+0x1a>
 8009696:	4b05      	ldr	r3, [pc, #20]	@ (80096ac <__i2b+0x24>)
 8009698:	4805      	ldr	r0, [pc, #20]	@ (80096b0 <__i2b+0x28>)
 800969a:	f240 1145 	movw	r1, #325	@ 0x145
 800969e:	f001 fbef 	bl	800ae80 <__assert_func>
 80096a2:	2301      	movs	r3, #1
 80096a4:	6144      	str	r4, [r0, #20]
 80096a6:	6103      	str	r3, [r0, #16]
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	bf00      	nop
 80096ac:	0800bed1 	.word	0x0800bed1
 80096b0:	0800bee2 	.word	0x0800bee2

080096b4 <__multiply>:
 80096b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	4614      	mov	r4, r2
 80096ba:	690a      	ldr	r2, [r1, #16]
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	429a      	cmp	r2, r3
 80096c0:	bfa8      	it	ge
 80096c2:	4623      	movge	r3, r4
 80096c4:	460f      	mov	r7, r1
 80096c6:	bfa4      	itt	ge
 80096c8:	460c      	movge	r4, r1
 80096ca:	461f      	movge	r7, r3
 80096cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80096d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80096d4:	68a3      	ldr	r3, [r4, #8]
 80096d6:	6861      	ldr	r1, [r4, #4]
 80096d8:	eb0a 0609 	add.w	r6, sl, r9
 80096dc:	42b3      	cmp	r3, r6
 80096de:	b085      	sub	sp, #20
 80096e0:	bfb8      	it	lt
 80096e2:	3101      	addlt	r1, #1
 80096e4:	f7ff fe92 	bl	800940c <_Balloc>
 80096e8:	b930      	cbnz	r0, 80096f8 <__multiply+0x44>
 80096ea:	4602      	mov	r2, r0
 80096ec:	4b44      	ldr	r3, [pc, #272]	@ (8009800 <__multiply+0x14c>)
 80096ee:	4845      	ldr	r0, [pc, #276]	@ (8009804 <__multiply+0x150>)
 80096f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096f4:	f001 fbc4 	bl	800ae80 <__assert_func>
 80096f8:	f100 0514 	add.w	r5, r0, #20
 80096fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009700:	462b      	mov	r3, r5
 8009702:	2200      	movs	r2, #0
 8009704:	4543      	cmp	r3, r8
 8009706:	d321      	bcc.n	800974c <__multiply+0x98>
 8009708:	f107 0114 	add.w	r1, r7, #20
 800970c:	f104 0214 	add.w	r2, r4, #20
 8009710:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009714:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009718:	9302      	str	r3, [sp, #8]
 800971a:	1b13      	subs	r3, r2, r4
 800971c:	3b15      	subs	r3, #21
 800971e:	f023 0303 	bic.w	r3, r3, #3
 8009722:	3304      	adds	r3, #4
 8009724:	f104 0715 	add.w	r7, r4, #21
 8009728:	42ba      	cmp	r2, r7
 800972a:	bf38      	it	cc
 800972c:	2304      	movcc	r3, #4
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	9b02      	ldr	r3, [sp, #8]
 8009732:	9103      	str	r1, [sp, #12]
 8009734:	428b      	cmp	r3, r1
 8009736:	d80c      	bhi.n	8009752 <__multiply+0x9e>
 8009738:	2e00      	cmp	r6, #0
 800973a:	dd03      	ble.n	8009744 <__multiply+0x90>
 800973c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009740:	2b00      	cmp	r3, #0
 8009742:	d05b      	beq.n	80097fc <__multiply+0x148>
 8009744:	6106      	str	r6, [r0, #16]
 8009746:	b005      	add	sp, #20
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974c:	f843 2b04 	str.w	r2, [r3], #4
 8009750:	e7d8      	b.n	8009704 <__multiply+0x50>
 8009752:	f8b1 a000 	ldrh.w	sl, [r1]
 8009756:	f1ba 0f00 	cmp.w	sl, #0
 800975a:	d024      	beq.n	80097a6 <__multiply+0xf2>
 800975c:	f104 0e14 	add.w	lr, r4, #20
 8009760:	46a9      	mov	r9, r5
 8009762:	f04f 0c00 	mov.w	ip, #0
 8009766:	f85e 7b04 	ldr.w	r7, [lr], #4
 800976a:	f8d9 3000 	ldr.w	r3, [r9]
 800976e:	fa1f fb87 	uxth.w	fp, r7
 8009772:	b29b      	uxth	r3, r3
 8009774:	fb0a 330b 	mla	r3, sl, fp, r3
 8009778:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800977c:	f8d9 7000 	ldr.w	r7, [r9]
 8009780:	4463      	add	r3, ip
 8009782:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009786:	fb0a c70b 	mla	r7, sl, fp, ip
 800978a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800978e:	b29b      	uxth	r3, r3
 8009790:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009794:	4572      	cmp	r2, lr
 8009796:	f849 3b04 	str.w	r3, [r9], #4
 800979a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800979e:	d8e2      	bhi.n	8009766 <__multiply+0xb2>
 80097a0:	9b01      	ldr	r3, [sp, #4]
 80097a2:	f845 c003 	str.w	ip, [r5, r3]
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097ac:	3104      	adds	r1, #4
 80097ae:	f1b9 0f00 	cmp.w	r9, #0
 80097b2:	d021      	beq.n	80097f8 <__multiply+0x144>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	f104 0c14 	add.w	ip, r4, #20
 80097ba:	46ae      	mov	lr, r5
 80097bc:	f04f 0a00 	mov.w	sl, #0
 80097c0:	f8bc b000 	ldrh.w	fp, [ip]
 80097c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80097c8:	fb09 770b 	mla	r7, r9, fp, r7
 80097cc:	4457      	add	r7, sl
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097d4:	f84e 3b04 	str.w	r3, [lr], #4
 80097d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097e0:	f8be 3000 	ldrh.w	r3, [lr]
 80097e4:	fb09 330a 	mla	r3, r9, sl, r3
 80097e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80097ec:	4562      	cmp	r2, ip
 80097ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097f2:	d8e5      	bhi.n	80097c0 <__multiply+0x10c>
 80097f4:	9f01      	ldr	r7, [sp, #4]
 80097f6:	51eb      	str	r3, [r5, r7]
 80097f8:	3504      	adds	r5, #4
 80097fa:	e799      	b.n	8009730 <__multiply+0x7c>
 80097fc:	3e01      	subs	r6, #1
 80097fe:	e79b      	b.n	8009738 <__multiply+0x84>
 8009800:	0800bed1 	.word	0x0800bed1
 8009804:	0800bee2 	.word	0x0800bee2

08009808 <__pow5mult>:
 8009808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800980c:	4615      	mov	r5, r2
 800980e:	f012 0203 	ands.w	r2, r2, #3
 8009812:	4607      	mov	r7, r0
 8009814:	460e      	mov	r6, r1
 8009816:	d007      	beq.n	8009828 <__pow5mult+0x20>
 8009818:	4c25      	ldr	r4, [pc, #148]	@ (80098b0 <__pow5mult+0xa8>)
 800981a:	3a01      	subs	r2, #1
 800981c:	2300      	movs	r3, #0
 800981e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009822:	f7ff fe55 	bl	80094d0 <__multadd>
 8009826:	4606      	mov	r6, r0
 8009828:	10ad      	asrs	r5, r5, #2
 800982a:	d03d      	beq.n	80098a8 <__pow5mult+0xa0>
 800982c:	69fc      	ldr	r4, [r7, #28]
 800982e:	b97c      	cbnz	r4, 8009850 <__pow5mult+0x48>
 8009830:	2010      	movs	r0, #16
 8009832:	f7ff fd35 	bl	80092a0 <malloc>
 8009836:	4602      	mov	r2, r0
 8009838:	61f8      	str	r0, [r7, #28]
 800983a:	b928      	cbnz	r0, 8009848 <__pow5mult+0x40>
 800983c:	4b1d      	ldr	r3, [pc, #116]	@ (80098b4 <__pow5mult+0xac>)
 800983e:	481e      	ldr	r0, [pc, #120]	@ (80098b8 <__pow5mult+0xb0>)
 8009840:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009844:	f001 fb1c 	bl	800ae80 <__assert_func>
 8009848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800984c:	6004      	str	r4, [r0, #0]
 800984e:	60c4      	str	r4, [r0, #12]
 8009850:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009858:	b94c      	cbnz	r4, 800986e <__pow5mult+0x66>
 800985a:	f240 2171 	movw	r1, #625	@ 0x271
 800985e:	4638      	mov	r0, r7
 8009860:	f7ff ff12 	bl	8009688 <__i2b>
 8009864:	2300      	movs	r3, #0
 8009866:	f8c8 0008 	str.w	r0, [r8, #8]
 800986a:	4604      	mov	r4, r0
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	f04f 0900 	mov.w	r9, #0
 8009872:	07eb      	lsls	r3, r5, #31
 8009874:	d50a      	bpl.n	800988c <__pow5mult+0x84>
 8009876:	4631      	mov	r1, r6
 8009878:	4622      	mov	r2, r4
 800987a:	4638      	mov	r0, r7
 800987c:	f7ff ff1a 	bl	80096b4 <__multiply>
 8009880:	4631      	mov	r1, r6
 8009882:	4680      	mov	r8, r0
 8009884:	4638      	mov	r0, r7
 8009886:	f7ff fe01 	bl	800948c <_Bfree>
 800988a:	4646      	mov	r6, r8
 800988c:	106d      	asrs	r5, r5, #1
 800988e:	d00b      	beq.n	80098a8 <__pow5mult+0xa0>
 8009890:	6820      	ldr	r0, [r4, #0]
 8009892:	b938      	cbnz	r0, 80098a4 <__pow5mult+0x9c>
 8009894:	4622      	mov	r2, r4
 8009896:	4621      	mov	r1, r4
 8009898:	4638      	mov	r0, r7
 800989a:	f7ff ff0b 	bl	80096b4 <__multiply>
 800989e:	6020      	str	r0, [r4, #0]
 80098a0:	f8c0 9000 	str.w	r9, [r0]
 80098a4:	4604      	mov	r4, r0
 80098a6:	e7e4      	b.n	8009872 <__pow5mult+0x6a>
 80098a8:	4630      	mov	r0, r6
 80098aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ae:	bf00      	nop
 80098b0:	0800bf3c 	.word	0x0800bf3c
 80098b4:	0800be62 	.word	0x0800be62
 80098b8:	0800bee2 	.word	0x0800bee2

080098bc <__lshift>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	460c      	mov	r4, r1
 80098c2:	6849      	ldr	r1, [r1, #4]
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	4607      	mov	r7, r0
 80098ce:	4691      	mov	r9, r2
 80098d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098d4:	f108 0601 	add.w	r6, r8, #1
 80098d8:	42b3      	cmp	r3, r6
 80098da:	db0b      	blt.n	80098f4 <__lshift+0x38>
 80098dc:	4638      	mov	r0, r7
 80098de:	f7ff fd95 	bl	800940c <_Balloc>
 80098e2:	4605      	mov	r5, r0
 80098e4:	b948      	cbnz	r0, 80098fa <__lshift+0x3e>
 80098e6:	4602      	mov	r2, r0
 80098e8:	4b28      	ldr	r3, [pc, #160]	@ (800998c <__lshift+0xd0>)
 80098ea:	4829      	ldr	r0, [pc, #164]	@ (8009990 <__lshift+0xd4>)
 80098ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098f0:	f001 fac6 	bl	800ae80 <__assert_func>
 80098f4:	3101      	adds	r1, #1
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	e7ee      	b.n	80098d8 <__lshift+0x1c>
 80098fa:	2300      	movs	r3, #0
 80098fc:	f100 0114 	add.w	r1, r0, #20
 8009900:	f100 0210 	add.w	r2, r0, #16
 8009904:	4618      	mov	r0, r3
 8009906:	4553      	cmp	r3, sl
 8009908:	db33      	blt.n	8009972 <__lshift+0xb6>
 800990a:	6920      	ldr	r0, [r4, #16]
 800990c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009910:	f104 0314 	add.w	r3, r4, #20
 8009914:	f019 091f 	ands.w	r9, r9, #31
 8009918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800991c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009920:	d02b      	beq.n	800997a <__lshift+0xbe>
 8009922:	f1c9 0e20 	rsb	lr, r9, #32
 8009926:	468a      	mov	sl, r1
 8009928:	2200      	movs	r2, #0
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	fa00 f009 	lsl.w	r0, r0, r9
 8009930:	4310      	orrs	r0, r2
 8009932:	f84a 0b04 	str.w	r0, [sl], #4
 8009936:	f853 2b04 	ldr.w	r2, [r3], #4
 800993a:	459c      	cmp	ip, r3
 800993c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009940:	d8f3      	bhi.n	800992a <__lshift+0x6e>
 8009942:	ebac 0304 	sub.w	r3, ip, r4
 8009946:	3b15      	subs	r3, #21
 8009948:	f023 0303 	bic.w	r3, r3, #3
 800994c:	3304      	adds	r3, #4
 800994e:	f104 0015 	add.w	r0, r4, #21
 8009952:	4584      	cmp	ip, r0
 8009954:	bf38      	it	cc
 8009956:	2304      	movcc	r3, #4
 8009958:	50ca      	str	r2, [r1, r3]
 800995a:	b10a      	cbz	r2, 8009960 <__lshift+0xa4>
 800995c:	f108 0602 	add.w	r6, r8, #2
 8009960:	3e01      	subs	r6, #1
 8009962:	4638      	mov	r0, r7
 8009964:	612e      	str	r6, [r5, #16]
 8009966:	4621      	mov	r1, r4
 8009968:	f7ff fd90 	bl	800948c <_Bfree>
 800996c:	4628      	mov	r0, r5
 800996e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009972:	f842 0f04 	str.w	r0, [r2, #4]!
 8009976:	3301      	adds	r3, #1
 8009978:	e7c5      	b.n	8009906 <__lshift+0x4a>
 800997a:	3904      	subs	r1, #4
 800997c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009980:	f841 2f04 	str.w	r2, [r1, #4]!
 8009984:	459c      	cmp	ip, r3
 8009986:	d8f9      	bhi.n	800997c <__lshift+0xc0>
 8009988:	e7ea      	b.n	8009960 <__lshift+0xa4>
 800998a:	bf00      	nop
 800998c:	0800bed1 	.word	0x0800bed1
 8009990:	0800bee2 	.word	0x0800bee2

08009994 <__mcmp>:
 8009994:	690a      	ldr	r2, [r1, #16]
 8009996:	4603      	mov	r3, r0
 8009998:	6900      	ldr	r0, [r0, #16]
 800999a:	1a80      	subs	r0, r0, r2
 800999c:	b530      	push	{r4, r5, lr}
 800999e:	d10e      	bne.n	80099be <__mcmp+0x2a>
 80099a0:	3314      	adds	r3, #20
 80099a2:	3114      	adds	r1, #20
 80099a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099b4:	4295      	cmp	r5, r2
 80099b6:	d003      	beq.n	80099c0 <__mcmp+0x2c>
 80099b8:	d205      	bcs.n	80099c6 <__mcmp+0x32>
 80099ba:	f04f 30ff 	mov.w	r0, #4294967295
 80099be:	bd30      	pop	{r4, r5, pc}
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	d3f3      	bcc.n	80099ac <__mcmp+0x18>
 80099c4:	e7fb      	b.n	80099be <__mcmp+0x2a>
 80099c6:	2001      	movs	r0, #1
 80099c8:	e7f9      	b.n	80099be <__mcmp+0x2a>
	...

080099cc <__mdiff>:
 80099cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	4689      	mov	r9, r1
 80099d2:	4606      	mov	r6, r0
 80099d4:	4611      	mov	r1, r2
 80099d6:	4648      	mov	r0, r9
 80099d8:	4614      	mov	r4, r2
 80099da:	f7ff ffdb 	bl	8009994 <__mcmp>
 80099de:	1e05      	subs	r5, r0, #0
 80099e0:	d112      	bne.n	8009a08 <__mdiff+0x3c>
 80099e2:	4629      	mov	r1, r5
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7ff fd11 	bl	800940c <_Balloc>
 80099ea:	4602      	mov	r2, r0
 80099ec:	b928      	cbnz	r0, 80099fa <__mdiff+0x2e>
 80099ee:	4b3f      	ldr	r3, [pc, #252]	@ (8009aec <__mdiff+0x120>)
 80099f0:	f240 2137 	movw	r1, #567	@ 0x237
 80099f4:	483e      	ldr	r0, [pc, #248]	@ (8009af0 <__mdiff+0x124>)
 80099f6:	f001 fa43 	bl	800ae80 <__assert_func>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a00:	4610      	mov	r0, r2
 8009a02:	b003      	add	sp, #12
 8009a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a08:	bfbc      	itt	lt
 8009a0a:	464b      	movlt	r3, r9
 8009a0c:	46a1      	movlt	r9, r4
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a14:	bfba      	itte	lt
 8009a16:	461c      	movlt	r4, r3
 8009a18:	2501      	movlt	r5, #1
 8009a1a:	2500      	movge	r5, #0
 8009a1c:	f7ff fcf6 	bl	800940c <_Balloc>
 8009a20:	4602      	mov	r2, r0
 8009a22:	b918      	cbnz	r0, 8009a2c <__mdiff+0x60>
 8009a24:	4b31      	ldr	r3, [pc, #196]	@ (8009aec <__mdiff+0x120>)
 8009a26:	f240 2145 	movw	r1, #581	@ 0x245
 8009a2a:	e7e3      	b.n	80099f4 <__mdiff+0x28>
 8009a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a30:	6926      	ldr	r6, [r4, #16]
 8009a32:	60c5      	str	r5, [r0, #12]
 8009a34:	f109 0310 	add.w	r3, r9, #16
 8009a38:	f109 0514 	add.w	r5, r9, #20
 8009a3c:	f104 0e14 	add.w	lr, r4, #20
 8009a40:	f100 0b14 	add.w	fp, r0, #20
 8009a44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	46d9      	mov	r9, fp
 8009a50:	f04f 0c00 	mov.w	ip, #0
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	fa1f f38a 	uxth.w	r3, sl
 8009a64:	4619      	mov	r1, r3
 8009a66:	b283      	uxth	r3, r0
 8009a68:	1acb      	subs	r3, r1, r3
 8009a6a:	0c00      	lsrs	r0, r0, #16
 8009a6c:	4463      	add	r3, ip
 8009a6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a7c:	4576      	cmp	r6, lr
 8009a7e:	f849 3b04 	str.w	r3, [r9], #4
 8009a82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a86:	d8e5      	bhi.n	8009a54 <__mdiff+0x88>
 8009a88:	1b33      	subs	r3, r6, r4
 8009a8a:	3b15      	subs	r3, #21
 8009a8c:	f023 0303 	bic.w	r3, r3, #3
 8009a90:	3415      	adds	r4, #21
 8009a92:	3304      	adds	r3, #4
 8009a94:	42a6      	cmp	r6, r4
 8009a96:	bf38      	it	cc
 8009a98:	2304      	movcc	r3, #4
 8009a9a:	441d      	add	r5, r3
 8009a9c:	445b      	add	r3, fp
 8009a9e:	461e      	mov	r6, r3
 8009aa0:	462c      	mov	r4, r5
 8009aa2:	4544      	cmp	r4, r8
 8009aa4:	d30e      	bcc.n	8009ac4 <__mdiff+0xf8>
 8009aa6:	f108 0103 	add.w	r1, r8, #3
 8009aaa:	1b49      	subs	r1, r1, r5
 8009aac:	f021 0103 	bic.w	r1, r1, #3
 8009ab0:	3d03      	subs	r5, #3
 8009ab2:	45a8      	cmp	r8, r5
 8009ab4:	bf38      	it	cc
 8009ab6:	2100      	movcc	r1, #0
 8009ab8:	440b      	add	r3, r1
 8009aba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009abe:	b191      	cbz	r1, 8009ae6 <__mdiff+0x11a>
 8009ac0:	6117      	str	r7, [r2, #16]
 8009ac2:	e79d      	b.n	8009a00 <__mdiff+0x34>
 8009ac4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ac8:	46e6      	mov	lr, ip
 8009aca:	0c08      	lsrs	r0, r1, #16
 8009acc:	fa1c fc81 	uxtah	ip, ip, r1
 8009ad0:	4471      	add	r1, lr
 8009ad2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ad6:	b289      	uxth	r1, r1
 8009ad8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009adc:	f846 1b04 	str.w	r1, [r6], #4
 8009ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ae4:	e7dd      	b.n	8009aa2 <__mdiff+0xd6>
 8009ae6:	3f01      	subs	r7, #1
 8009ae8:	e7e7      	b.n	8009aba <__mdiff+0xee>
 8009aea:	bf00      	nop
 8009aec:	0800bed1 	.word	0x0800bed1
 8009af0:	0800bee2 	.word	0x0800bee2

08009af4 <__ulp>:
 8009af4:	b082      	sub	sp, #8
 8009af6:	ed8d 0b00 	vstr	d0, [sp]
 8009afa:	9a01      	ldr	r2, [sp, #4]
 8009afc:	4b0f      	ldr	r3, [pc, #60]	@ (8009b3c <__ulp+0x48>)
 8009afe:	4013      	ands	r3, r2
 8009b00:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	dc08      	bgt.n	8009b1a <__ulp+0x26>
 8009b08:	425b      	negs	r3, r3
 8009b0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009b0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b12:	da04      	bge.n	8009b1e <__ulp+0x2a>
 8009b14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b18:	4113      	asrs	r3, r2
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	e008      	b.n	8009b30 <__ulp+0x3c>
 8009b1e:	f1a2 0314 	sub.w	r3, r2, #20
 8009b22:	2b1e      	cmp	r3, #30
 8009b24:	bfda      	itte	le
 8009b26:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009b2a:	40da      	lsrle	r2, r3
 8009b2c:	2201      	movgt	r2, #1
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4619      	mov	r1, r3
 8009b32:	4610      	mov	r0, r2
 8009b34:	ec41 0b10 	vmov	d0, r0, r1
 8009b38:	b002      	add	sp, #8
 8009b3a:	4770      	bx	lr
 8009b3c:	7ff00000 	.word	0x7ff00000

08009b40 <__b2d>:
 8009b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b44:	6906      	ldr	r6, [r0, #16]
 8009b46:	f100 0814 	add.w	r8, r0, #20
 8009b4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b4e:	1f37      	subs	r7, r6, #4
 8009b50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b54:	4610      	mov	r0, r2
 8009b56:	f7ff fd4b 	bl	80095f0 <__hi0bits>
 8009b5a:	f1c0 0320 	rsb	r3, r0, #32
 8009b5e:	280a      	cmp	r0, #10
 8009b60:	600b      	str	r3, [r1, #0]
 8009b62:	491b      	ldr	r1, [pc, #108]	@ (8009bd0 <__b2d+0x90>)
 8009b64:	dc15      	bgt.n	8009b92 <__b2d+0x52>
 8009b66:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b6e:	45b8      	cmp	r8, r7
 8009b70:	ea43 0501 	orr.w	r5, r3, r1
 8009b74:	bf34      	ite	cc
 8009b76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b7a:	2300      	movcs	r3, #0
 8009b7c:	3015      	adds	r0, #21
 8009b7e:	fa02 f000 	lsl.w	r0, r2, r0
 8009b82:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b86:	4303      	orrs	r3, r0
 8009b88:	461c      	mov	r4, r3
 8009b8a:	ec45 4b10 	vmov	d0, r4, r5
 8009b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b92:	45b8      	cmp	r8, r7
 8009b94:	bf3a      	itte	cc
 8009b96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009b9e:	2300      	movcs	r3, #0
 8009ba0:	380b      	subs	r0, #11
 8009ba2:	d012      	beq.n	8009bca <__b2d+0x8a>
 8009ba4:	f1c0 0120 	rsb	r1, r0, #32
 8009ba8:	fa23 f401 	lsr.w	r4, r3, r1
 8009bac:	4082      	lsls	r2, r0
 8009bae:	4322      	orrs	r2, r4
 8009bb0:	4547      	cmp	r7, r8
 8009bb2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009bb6:	bf8c      	ite	hi
 8009bb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009bbc:	2200      	movls	r2, #0
 8009bbe:	4083      	lsls	r3, r0
 8009bc0:	40ca      	lsrs	r2, r1
 8009bc2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	e7de      	b.n	8009b88 <__b2d+0x48>
 8009bca:	ea42 0501 	orr.w	r5, r2, r1
 8009bce:	e7db      	b.n	8009b88 <__b2d+0x48>
 8009bd0:	3ff00000 	.word	0x3ff00000

08009bd4 <__d2b>:
 8009bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bd8:	460f      	mov	r7, r1
 8009bda:	2101      	movs	r1, #1
 8009bdc:	ec59 8b10 	vmov	r8, r9, d0
 8009be0:	4616      	mov	r6, r2
 8009be2:	f7ff fc13 	bl	800940c <_Balloc>
 8009be6:	4604      	mov	r4, r0
 8009be8:	b930      	cbnz	r0, 8009bf8 <__d2b+0x24>
 8009bea:	4602      	mov	r2, r0
 8009bec:	4b23      	ldr	r3, [pc, #140]	@ (8009c7c <__d2b+0xa8>)
 8009bee:	4824      	ldr	r0, [pc, #144]	@ (8009c80 <__d2b+0xac>)
 8009bf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009bf4:	f001 f944 	bl	800ae80 <__assert_func>
 8009bf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c00:	b10d      	cbz	r5, 8009c06 <__d2b+0x32>
 8009c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	f1b8 0300 	subs.w	r3, r8, #0
 8009c0c:	d023      	beq.n	8009c56 <__d2b+0x82>
 8009c0e:	4668      	mov	r0, sp
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	f7ff fd0c 	bl	800962e <__lo0bits>
 8009c16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c1a:	b1d0      	cbz	r0, 8009c52 <__d2b+0x7e>
 8009c1c:	f1c0 0320 	rsb	r3, r0, #32
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	430b      	orrs	r3, r1
 8009c26:	40c2      	lsrs	r2, r0
 8009c28:	6163      	str	r3, [r4, #20]
 8009c2a:	9201      	str	r2, [sp, #4]
 8009c2c:	9b01      	ldr	r3, [sp, #4]
 8009c2e:	61a3      	str	r3, [r4, #24]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bf0c      	ite	eq
 8009c34:	2201      	moveq	r2, #1
 8009c36:	2202      	movne	r2, #2
 8009c38:	6122      	str	r2, [r4, #16]
 8009c3a:	b1a5      	cbz	r5, 8009c66 <__d2b+0x92>
 8009c3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c40:	4405      	add	r5, r0
 8009c42:	603d      	str	r5, [r7, #0]
 8009c44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c48:	6030      	str	r0, [r6, #0]
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	b003      	add	sp, #12
 8009c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c52:	6161      	str	r1, [r4, #20]
 8009c54:	e7ea      	b.n	8009c2c <__d2b+0x58>
 8009c56:	a801      	add	r0, sp, #4
 8009c58:	f7ff fce9 	bl	800962e <__lo0bits>
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	6163      	str	r3, [r4, #20]
 8009c60:	3020      	adds	r0, #32
 8009c62:	2201      	movs	r2, #1
 8009c64:	e7e8      	b.n	8009c38 <__d2b+0x64>
 8009c66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c6e:	6038      	str	r0, [r7, #0]
 8009c70:	6918      	ldr	r0, [r3, #16]
 8009c72:	f7ff fcbd 	bl	80095f0 <__hi0bits>
 8009c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c7a:	e7e5      	b.n	8009c48 <__d2b+0x74>
 8009c7c:	0800bed1 	.word	0x0800bed1
 8009c80:	0800bee2 	.word	0x0800bee2

08009c84 <__ratio>:
 8009c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c88:	4688      	mov	r8, r1
 8009c8a:	4669      	mov	r1, sp
 8009c8c:	4681      	mov	r9, r0
 8009c8e:	f7ff ff57 	bl	8009b40 <__b2d>
 8009c92:	a901      	add	r1, sp, #4
 8009c94:	4640      	mov	r0, r8
 8009c96:	ec55 4b10 	vmov	r4, r5, d0
 8009c9a:	f7ff ff51 	bl	8009b40 <__b2d>
 8009c9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009ca2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009ca6:	1ad2      	subs	r2, r2, r3
 8009ca8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009cac:	1a5b      	subs	r3, r3, r1
 8009cae:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8009cb2:	ec57 6b10 	vmov	r6, r7, d0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	bfd6      	itet	le
 8009cba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cbe:	462a      	movgt	r2, r5
 8009cc0:	463a      	movle	r2, r7
 8009cc2:	46ab      	mov	fp, r5
 8009cc4:	46a2      	mov	sl, r4
 8009cc6:	bfce      	itee	gt
 8009cc8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009ccc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009cd0:	ee00 3a90 	vmovle	s1, r3
 8009cd4:	ec4b ab17 	vmov	d7, sl, fp
 8009cd8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8009cdc:	b003      	add	sp, #12
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ce2 <__copybits>:
 8009ce2:	3901      	subs	r1, #1
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	1149      	asrs	r1, r1, #5
 8009ce8:	6914      	ldr	r4, [r2, #16]
 8009cea:	3101      	adds	r1, #1
 8009cec:	f102 0314 	add.w	r3, r2, #20
 8009cf0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cf4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cf8:	1f05      	subs	r5, r0, #4
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	d30c      	bcc.n	8009d18 <__copybits+0x36>
 8009cfe:	1aa3      	subs	r3, r4, r2
 8009d00:	3b11      	subs	r3, #17
 8009d02:	f023 0303 	bic.w	r3, r3, #3
 8009d06:	3211      	adds	r2, #17
 8009d08:	42a2      	cmp	r2, r4
 8009d0a:	bf88      	it	hi
 8009d0c:	2300      	movhi	r3, #0
 8009d0e:	4418      	add	r0, r3
 8009d10:	2300      	movs	r3, #0
 8009d12:	4288      	cmp	r0, r1
 8009d14:	d305      	bcc.n	8009d22 <__copybits+0x40>
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d1c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d20:	e7eb      	b.n	8009cfa <__copybits+0x18>
 8009d22:	f840 3b04 	str.w	r3, [r0], #4
 8009d26:	e7f4      	b.n	8009d12 <__copybits+0x30>

08009d28 <__any_on>:
 8009d28:	f100 0214 	add.w	r2, r0, #20
 8009d2c:	6900      	ldr	r0, [r0, #16]
 8009d2e:	114b      	asrs	r3, r1, #5
 8009d30:	4298      	cmp	r0, r3
 8009d32:	b510      	push	{r4, lr}
 8009d34:	db11      	blt.n	8009d5a <__any_on+0x32>
 8009d36:	dd0a      	ble.n	8009d4e <__any_on+0x26>
 8009d38:	f011 011f 	ands.w	r1, r1, #31
 8009d3c:	d007      	beq.n	8009d4e <__any_on+0x26>
 8009d3e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d42:	fa24 f001 	lsr.w	r0, r4, r1
 8009d46:	fa00 f101 	lsl.w	r1, r0, r1
 8009d4a:	428c      	cmp	r4, r1
 8009d4c:	d10b      	bne.n	8009d66 <__any_on+0x3e>
 8009d4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d803      	bhi.n	8009d5e <__any_on+0x36>
 8009d56:	2000      	movs	r0, #0
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	e7f7      	b.n	8009d4e <__any_on+0x26>
 8009d5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d62:	2900      	cmp	r1, #0
 8009d64:	d0f5      	beq.n	8009d52 <__any_on+0x2a>
 8009d66:	2001      	movs	r0, #1
 8009d68:	e7f6      	b.n	8009d58 <__any_on+0x30>

08009d6a <sulp>:
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	460d      	mov	r5, r1
 8009d70:	4616      	mov	r6, r2
 8009d72:	ec45 4b10 	vmov	d0, r4, r5
 8009d76:	f7ff febd 	bl	8009af4 <__ulp>
 8009d7a:	b17e      	cbz	r6, 8009d9c <sulp+0x32>
 8009d7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	dd09      	ble.n	8009d9c <sulp+0x32>
 8009d88:	051b      	lsls	r3, r3, #20
 8009d8a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8009d8e:	2000      	movs	r0, #0
 8009d90:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8009d94:	ec41 0b17 	vmov	d7, r0, r1
 8009d98:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009da0 <_strtod_l>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	ed2d 8b0a 	vpush	{d8-d12}
 8009da8:	b097      	sub	sp, #92	@ 0x5c
 8009daa:	4688      	mov	r8, r1
 8009dac:	920e      	str	r2, [sp, #56]	@ 0x38
 8009dae:	2200      	movs	r2, #0
 8009db0:	9212      	str	r2, [sp, #72]	@ 0x48
 8009db2:	9005      	str	r0, [sp, #20]
 8009db4:	f04f 0a00 	mov.w	sl, #0
 8009db8:	f04f 0b00 	mov.w	fp, #0
 8009dbc:	460a      	mov	r2, r1
 8009dbe:	9211      	str	r2, [sp, #68]	@ 0x44
 8009dc0:	7811      	ldrb	r1, [r2, #0]
 8009dc2:	292b      	cmp	r1, #43	@ 0x2b
 8009dc4:	d04c      	beq.n	8009e60 <_strtod_l+0xc0>
 8009dc6:	d839      	bhi.n	8009e3c <_strtod_l+0x9c>
 8009dc8:	290d      	cmp	r1, #13
 8009dca:	d833      	bhi.n	8009e34 <_strtod_l+0x94>
 8009dcc:	2908      	cmp	r1, #8
 8009dce:	d833      	bhi.n	8009e38 <_strtod_l+0x98>
 8009dd0:	2900      	cmp	r1, #0
 8009dd2:	d03c      	beq.n	8009e4e <_strtod_l+0xae>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	9208      	str	r2, [sp, #32]
 8009dd8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8009dda:	782a      	ldrb	r2, [r5, #0]
 8009ddc:	2a30      	cmp	r2, #48	@ 0x30
 8009dde:	f040 80b5 	bne.w	8009f4c <_strtod_l+0x1ac>
 8009de2:	786a      	ldrb	r2, [r5, #1]
 8009de4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009de8:	2a58      	cmp	r2, #88	@ 0x58
 8009dea:	d170      	bne.n	8009ece <_strtod_l+0x12e>
 8009dec:	9302      	str	r3, [sp, #8]
 8009dee:	9b08      	ldr	r3, [sp, #32]
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	ab12      	add	r3, sp, #72	@ 0x48
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	4a8b      	ldr	r2, [pc, #556]	@ (800a024 <_strtod_l+0x284>)
 8009df8:	9805      	ldr	r0, [sp, #20]
 8009dfa:	ab13      	add	r3, sp, #76	@ 0x4c
 8009dfc:	a911      	add	r1, sp, #68	@ 0x44
 8009dfe:	f001 f8d9 	bl	800afb4 <__gethex>
 8009e02:	f010 060f 	ands.w	r6, r0, #15
 8009e06:	4604      	mov	r4, r0
 8009e08:	d005      	beq.n	8009e16 <_strtod_l+0x76>
 8009e0a:	2e06      	cmp	r6, #6
 8009e0c:	d12a      	bne.n	8009e64 <_strtod_l+0xc4>
 8009e0e:	3501      	adds	r5, #1
 8009e10:	2300      	movs	r3, #0
 8009e12:	9511      	str	r5, [sp, #68]	@ 0x44
 8009e14:	9308      	str	r3, [sp, #32]
 8009e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f040 852f 	bne.w	800a87c <_strtod_l+0xadc>
 8009e1e:	9b08      	ldr	r3, [sp, #32]
 8009e20:	ec4b ab10 	vmov	d0, sl, fp
 8009e24:	b1cb      	cbz	r3, 8009e5a <_strtod_l+0xba>
 8009e26:	eeb1 0b40 	vneg.f64	d0, d0
 8009e2a:	b017      	add	sp, #92	@ 0x5c
 8009e2c:	ecbd 8b0a 	vpop	{d8-d12}
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	2920      	cmp	r1, #32
 8009e36:	d1cd      	bne.n	8009dd4 <_strtod_l+0x34>
 8009e38:	3201      	adds	r2, #1
 8009e3a:	e7c0      	b.n	8009dbe <_strtod_l+0x1e>
 8009e3c:	292d      	cmp	r1, #45	@ 0x2d
 8009e3e:	d1c9      	bne.n	8009dd4 <_strtod_l+0x34>
 8009e40:	2101      	movs	r1, #1
 8009e42:	9108      	str	r1, [sp, #32]
 8009e44:	1c51      	adds	r1, r2, #1
 8009e46:	9111      	str	r1, [sp, #68]	@ 0x44
 8009e48:	7852      	ldrb	r2, [r2, #1]
 8009e4a:	2a00      	cmp	r2, #0
 8009e4c:	d1c4      	bne.n	8009dd8 <_strtod_l+0x38>
 8009e4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e50:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f040 850f 	bne.w	800a878 <_strtod_l+0xad8>
 8009e5a:	ec4b ab10 	vmov	d0, sl, fp
 8009e5e:	e7e4      	b.n	8009e2a <_strtod_l+0x8a>
 8009e60:	2100      	movs	r1, #0
 8009e62:	e7ee      	b.n	8009e42 <_strtod_l+0xa2>
 8009e64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009e66:	b13a      	cbz	r2, 8009e78 <_strtod_l+0xd8>
 8009e68:	2135      	movs	r1, #53	@ 0x35
 8009e6a:	a814      	add	r0, sp, #80	@ 0x50
 8009e6c:	f7ff ff39 	bl	8009ce2 <__copybits>
 8009e70:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009e72:	9805      	ldr	r0, [sp, #20]
 8009e74:	f7ff fb0a 	bl	800948c <_Bfree>
 8009e78:	1e73      	subs	r3, r6, #1
 8009e7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d806      	bhi.n	8009e8e <_strtod_l+0xee>
 8009e80:	e8df f003 	tbb	[pc, r3]
 8009e84:	201d0314 	.word	0x201d0314
 8009e88:	14          	.byte	0x14
 8009e89:	00          	.byte	0x00
 8009e8a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8009e8e:	05e3      	lsls	r3, r4, #23
 8009e90:	bf48      	it	mi
 8009e92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009e96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e9a:	0d1b      	lsrs	r3, r3, #20
 8009e9c:	051b      	lsls	r3, r3, #20
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1b9      	bne.n	8009e16 <_strtod_l+0x76>
 8009ea2:	f7fe fba1 	bl	80085e8 <__errno>
 8009ea6:	2322      	movs	r3, #34	@ 0x22
 8009ea8:	6003      	str	r3, [r0, #0]
 8009eaa:	e7b4      	b.n	8009e16 <_strtod_l+0x76>
 8009eac:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8009eb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009eb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009eb8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ebc:	e7e7      	b.n	8009e8e <_strtod_l+0xee>
 8009ebe:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800a02c <_strtod_l+0x28c>
 8009ec2:	e7e4      	b.n	8009e8e <_strtod_l+0xee>
 8009ec4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009ec8:	f04f 3aff 	mov.w	sl, #4294967295
 8009ecc:	e7df      	b.n	8009e8e <_strtod_l+0xee>
 8009ece:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	9211      	str	r2, [sp, #68]	@ 0x44
 8009ed4:	785b      	ldrb	r3, [r3, #1]
 8009ed6:	2b30      	cmp	r3, #48	@ 0x30
 8009ed8:	d0f9      	beq.n	8009ece <_strtod_l+0x12e>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d09b      	beq.n	8009e16 <_strtod_l+0x76>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	2600      	movs	r6, #0
 8009ee2:	9307      	str	r3, [sp, #28]
 8009ee4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ee8:	46b1      	mov	r9, r6
 8009eea:	4635      	mov	r5, r6
 8009eec:	220a      	movs	r2, #10
 8009eee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8009ef0:	7804      	ldrb	r4, [r0, #0]
 8009ef2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8009ef6:	b2d9      	uxtb	r1, r3
 8009ef8:	2909      	cmp	r1, #9
 8009efa:	d929      	bls.n	8009f50 <_strtod_l+0x1b0>
 8009efc:	494a      	ldr	r1, [pc, #296]	@ (800a028 <_strtod_l+0x288>)
 8009efe:	2201      	movs	r2, #1
 8009f00:	f000 ff84 	bl	800ae0c <strncmp>
 8009f04:	b378      	cbz	r0, 8009f66 <_strtod_l+0x1c6>
 8009f06:	2000      	movs	r0, #0
 8009f08:	4622      	mov	r2, r4
 8009f0a:	462b      	mov	r3, r5
 8009f0c:	4607      	mov	r7, r0
 8009f0e:	9006      	str	r0, [sp, #24]
 8009f10:	2a65      	cmp	r2, #101	@ 0x65
 8009f12:	d001      	beq.n	8009f18 <_strtod_l+0x178>
 8009f14:	2a45      	cmp	r2, #69	@ 0x45
 8009f16:	d117      	bne.n	8009f48 <_strtod_l+0x1a8>
 8009f18:	b91b      	cbnz	r3, 8009f22 <_strtod_l+0x182>
 8009f1a:	9b07      	ldr	r3, [sp, #28]
 8009f1c:	4303      	orrs	r3, r0
 8009f1e:	d096      	beq.n	8009e4e <_strtod_l+0xae>
 8009f20:	2300      	movs	r3, #0
 8009f22:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8009f26:	f108 0201 	add.w	r2, r8, #1
 8009f2a:	9211      	str	r2, [sp, #68]	@ 0x44
 8009f2c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009f30:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f32:	d06b      	beq.n	800a00c <_strtod_l+0x26c>
 8009f34:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f36:	d071      	beq.n	800a01c <_strtod_l+0x27c>
 8009f38:	f04f 0e00 	mov.w	lr, #0
 8009f3c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8009f40:	2c09      	cmp	r4, #9
 8009f42:	d979      	bls.n	800a038 <_strtod_l+0x298>
 8009f44:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009f48:	2400      	movs	r4, #0
 8009f4a:	e094      	b.n	800a076 <_strtod_l+0x2d6>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e7c7      	b.n	8009ee0 <_strtod_l+0x140>
 8009f50:	2d08      	cmp	r5, #8
 8009f52:	f100 0001 	add.w	r0, r0, #1
 8009f56:	bfd4      	ite	le
 8009f58:	fb02 3909 	mlale	r9, r2, r9, r3
 8009f5c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8009f60:	3501      	adds	r5, #1
 8009f62:	9011      	str	r0, [sp, #68]	@ 0x44
 8009f64:	e7c3      	b.n	8009eee <_strtod_l+0x14e>
 8009f66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8009f6c:	785a      	ldrb	r2, [r3, #1]
 8009f6e:	b375      	cbz	r5, 8009fce <_strtod_l+0x22e>
 8009f70:	4607      	mov	r7, r0
 8009f72:	462b      	mov	r3, r5
 8009f74:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f78:	2909      	cmp	r1, #9
 8009f7a:	d913      	bls.n	8009fa4 <_strtod_l+0x204>
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	9106      	str	r1, [sp, #24]
 8009f80:	e7c6      	b.n	8009f10 <_strtod_l+0x170>
 8009f82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	9211      	str	r2, [sp, #68]	@ 0x44
 8009f88:	785a      	ldrb	r2, [r3, #1]
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	2a30      	cmp	r2, #48	@ 0x30
 8009f8e:	d0f8      	beq.n	8009f82 <_strtod_l+0x1e2>
 8009f90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	f200 8476 	bhi.w	800a886 <_strtod_l+0xae6>
 8009f9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f9e:	4607      	mov	r7, r0
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	3a30      	subs	r2, #48	@ 0x30
 8009fa6:	f100 0101 	add.w	r1, r0, #1
 8009faa:	d023      	beq.n	8009ff4 <_strtod_l+0x254>
 8009fac:	440f      	add	r7, r1
 8009fae:	eb00 0c03 	add.w	ip, r0, r3
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	240a      	movs	r4, #10
 8009fb6:	4561      	cmp	r1, ip
 8009fb8:	d10b      	bne.n	8009fd2 <_strtod_l+0x232>
 8009fba:	1c5c      	adds	r4, r3, #1
 8009fbc:	4403      	add	r3, r0
 8009fbe:	2b08      	cmp	r3, #8
 8009fc0:	4404      	add	r4, r0
 8009fc2:	dc11      	bgt.n	8009fe8 <_strtod_l+0x248>
 8009fc4:	230a      	movs	r3, #10
 8009fc6:	fb03 2909 	mla	r9, r3, r9, r2
 8009fca:	2100      	movs	r1, #0
 8009fcc:	e013      	b.n	8009ff6 <_strtod_l+0x256>
 8009fce:	4628      	mov	r0, r5
 8009fd0:	e7dc      	b.n	8009f8c <_strtod_l+0x1ec>
 8009fd2:	2908      	cmp	r1, #8
 8009fd4:	f101 0101 	add.w	r1, r1, #1
 8009fd8:	dc02      	bgt.n	8009fe0 <_strtod_l+0x240>
 8009fda:	fb04 f909 	mul.w	r9, r4, r9
 8009fde:	e7ea      	b.n	8009fb6 <_strtod_l+0x216>
 8009fe0:	2910      	cmp	r1, #16
 8009fe2:	bfd8      	it	le
 8009fe4:	4366      	mulle	r6, r4
 8009fe6:	e7e6      	b.n	8009fb6 <_strtod_l+0x216>
 8009fe8:	2b0f      	cmp	r3, #15
 8009fea:	dcee      	bgt.n	8009fca <_strtod_l+0x22a>
 8009fec:	230a      	movs	r3, #10
 8009fee:	fb03 2606 	mla	r6, r3, r6, r2
 8009ff2:	e7ea      	b.n	8009fca <_strtod_l+0x22a>
 8009ff4:	461c      	mov	r4, r3
 8009ff6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	9211      	str	r2, [sp, #68]	@ 0x44
 8009ffc:	785a      	ldrb	r2, [r3, #1]
 8009ffe:	4608      	mov	r0, r1
 800a000:	4623      	mov	r3, r4
 800a002:	e7b7      	b.n	8009f74 <_strtod_l+0x1d4>
 800a004:	2301      	movs	r3, #1
 800a006:	2700      	movs	r7, #0
 800a008:	9306      	str	r3, [sp, #24]
 800a00a:	e786      	b.n	8009f1a <_strtod_l+0x17a>
 800a00c:	f04f 0e00 	mov.w	lr, #0
 800a010:	f108 0202 	add.w	r2, r8, #2
 800a014:	9211      	str	r2, [sp, #68]	@ 0x44
 800a016:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a01a:	e78f      	b.n	8009f3c <_strtod_l+0x19c>
 800a01c:	f04f 0e01 	mov.w	lr, #1
 800a020:	e7f6      	b.n	800a010 <_strtod_l+0x270>
 800a022:	bf00      	nop
 800a024:	0800c050 	.word	0x0800c050
 800a028:	0800c038 	.word	0x0800c038
 800a02c:	7ff00000 	.word	0x7ff00000
 800a030:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a032:	1c54      	adds	r4, r2, #1
 800a034:	9411      	str	r4, [sp, #68]	@ 0x44
 800a036:	7852      	ldrb	r2, [r2, #1]
 800a038:	2a30      	cmp	r2, #48	@ 0x30
 800a03a:	d0f9      	beq.n	800a030 <_strtod_l+0x290>
 800a03c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a040:	2c08      	cmp	r4, #8
 800a042:	d881      	bhi.n	8009f48 <_strtod_l+0x1a8>
 800a044:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a048:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a04a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a04c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a04e:	1c51      	adds	r1, r2, #1
 800a050:	9111      	str	r1, [sp, #68]	@ 0x44
 800a052:	7852      	ldrb	r2, [r2, #1]
 800a054:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a058:	2c09      	cmp	r4, #9
 800a05a:	d938      	bls.n	800a0ce <_strtod_l+0x32e>
 800a05c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a05e:	1b0c      	subs	r4, r1, r4
 800a060:	2c08      	cmp	r4, #8
 800a062:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a066:	dc02      	bgt.n	800a06e <_strtod_l+0x2ce>
 800a068:	4564      	cmp	r4, ip
 800a06a:	bfa8      	it	ge
 800a06c:	4664      	movge	r4, ip
 800a06e:	f1be 0f00 	cmp.w	lr, #0
 800a072:	d000      	beq.n	800a076 <_strtod_l+0x2d6>
 800a074:	4264      	negs	r4, r4
 800a076:	2b00      	cmp	r3, #0
 800a078:	d14e      	bne.n	800a118 <_strtod_l+0x378>
 800a07a:	9b07      	ldr	r3, [sp, #28]
 800a07c:	4318      	orrs	r0, r3
 800a07e:	f47f aeca 	bne.w	8009e16 <_strtod_l+0x76>
 800a082:	9b06      	ldr	r3, [sp, #24]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f47f aee2 	bne.w	8009e4e <_strtod_l+0xae>
 800a08a:	2a69      	cmp	r2, #105	@ 0x69
 800a08c:	d027      	beq.n	800a0de <_strtod_l+0x33e>
 800a08e:	dc24      	bgt.n	800a0da <_strtod_l+0x33a>
 800a090:	2a49      	cmp	r2, #73	@ 0x49
 800a092:	d024      	beq.n	800a0de <_strtod_l+0x33e>
 800a094:	2a4e      	cmp	r2, #78	@ 0x4e
 800a096:	f47f aeda 	bne.w	8009e4e <_strtod_l+0xae>
 800a09a:	4997      	ldr	r1, [pc, #604]	@ (800a2f8 <_strtod_l+0x558>)
 800a09c:	a811      	add	r0, sp, #68	@ 0x44
 800a09e:	f001 f9ab 	bl	800b3f8 <__match>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f43f aed3 	beq.w	8009e4e <_strtod_l+0xae>
 800a0a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b28      	cmp	r3, #40	@ 0x28
 800a0ae:	d12d      	bne.n	800a10c <_strtod_l+0x36c>
 800a0b0:	4992      	ldr	r1, [pc, #584]	@ (800a2fc <_strtod_l+0x55c>)
 800a0b2:	aa14      	add	r2, sp, #80	@ 0x50
 800a0b4:	a811      	add	r0, sp, #68	@ 0x44
 800a0b6:	f001 f9b3 	bl	800b420 <__hexnan>
 800a0ba:	2805      	cmp	r0, #5
 800a0bc:	d126      	bne.n	800a10c <_strtod_l+0x36c>
 800a0be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a0c0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a0c4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a0c8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a0cc:	e6a3      	b.n	8009e16 <_strtod_l+0x76>
 800a0ce:	240a      	movs	r4, #10
 800a0d0:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a0d4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a0d8:	e7b8      	b.n	800a04c <_strtod_l+0x2ac>
 800a0da:	2a6e      	cmp	r2, #110	@ 0x6e
 800a0dc:	e7db      	b.n	800a096 <_strtod_l+0x2f6>
 800a0de:	4988      	ldr	r1, [pc, #544]	@ (800a300 <_strtod_l+0x560>)
 800a0e0:	a811      	add	r0, sp, #68	@ 0x44
 800a0e2:	f001 f989 	bl	800b3f8 <__match>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f43f aeb1 	beq.w	8009e4e <_strtod_l+0xae>
 800a0ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0ee:	4985      	ldr	r1, [pc, #532]	@ (800a304 <_strtod_l+0x564>)
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	a811      	add	r0, sp, #68	@ 0x44
 800a0f4:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0f6:	f001 f97f 	bl	800b3f8 <__match>
 800a0fa:	b910      	cbnz	r0, 800a102 <_strtod_l+0x362>
 800a0fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0fe:	3301      	adds	r3, #1
 800a100:	9311      	str	r3, [sp, #68]	@ 0x44
 800a102:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800a318 <_strtod_l+0x578>
 800a106:	f04f 0a00 	mov.w	sl, #0
 800a10a:	e684      	b.n	8009e16 <_strtod_l+0x76>
 800a10c:	487e      	ldr	r0, [pc, #504]	@ (800a308 <_strtod_l+0x568>)
 800a10e:	f000 feaf 	bl	800ae70 <nan>
 800a112:	ec5b ab10 	vmov	sl, fp, d0
 800a116:	e67e      	b.n	8009e16 <_strtod_l+0x76>
 800a118:	ee07 9a90 	vmov	s15, r9
 800a11c:	1be2      	subs	r2, r4, r7
 800a11e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a122:	2d00      	cmp	r5, #0
 800a124:	bf08      	it	eq
 800a126:	461d      	moveq	r5, r3
 800a128:	2b10      	cmp	r3, #16
 800a12a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a12c:	461a      	mov	r2, r3
 800a12e:	bfa8      	it	ge
 800a130:	2210      	movge	r2, #16
 800a132:	2b09      	cmp	r3, #9
 800a134:	ec5b ab17 	vmov	sl, fp, d7
 800a138:	dc15      	bgt.n	800a166 <_strtod_l+0x3c6>
 800a13a:	1be1      	subs	r1, r4, r7
 800a13c:	2900      	cmp	r1, #0
 800a13e:	f43f ae6a 	beq.w	8009e16 <_strtod_l+0x76>
 800a142:	eba4 0107 	sub.w	r1, r4, r7
 800a146:	dd72      	ble.n	800a22e <_strtod_l+0x48e>
 800a148:	2916      	cmp	r1, #22
 800a14a:	dc59      	bgt.n	800a200 <_strtod_l+0x460>
 800a14c:	4b6f      	ldr	r3, [pc, #444]	@ (800a30c <_strtod_l+0x56c>)
 800a14e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a154:	ed93 7b00 	vldr	d7, [r3]
 800a158:	ec4b ab16 	vmov	d6, sl, fp
 800a15c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a160:	ec5b ab17 	vmov	sl, fp, d7
 800a164:	e657      	b.n	8009e16 <_strtod_l+0x76>
 800a166:	4969      	ldr	r1, [pc, #420]	@ (800a30c <_strtod_l+0x56c>)
 800a168:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a16c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a170:	ee06 6a90 	vmov	s13, r6
 800a174:	2b0f      	cmp	r3, #15
 800a176:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a17a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a17e:	ec5b ab16 	vmov	sl, fp, d6
 800a182:	ddda      	ble.n	800a13a <_strtod_l+0x39a>
 800a184:	1a9a      	subs	r2, r3, r2
 800a186:	1be1      	subs	r1, r4, r7
 800a188:	440a      	add	r2, r1
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	f340 8094 	ble.w	800a2b8 <_strtod_l+0x518>
 800a190:	f012 000f 	ands.w	r0, r2, #15
 800a194:	d00a      	beq.n	800a1ac <_strtod_l+0x40c>
 800a196:	495d      	ldr	r1, [pc, #372]	@ (800a30c <_strtod_l+0x56c>)
 800a198:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a19c:	ed91 7b00 	vldr	d7, [r1]
 800a1a0:	ec4b ab16 	vmov	d6, sl, fp
 800a1a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1a8:	ec5b ab17 	vmov	sl, fp, d7
 800a1ac:	f032 020f 	bics.w	r2, r2, #15
 800a1b0:	d073      	beq.n	800a29a <_strtod_l+0x4fa>
 800a1b2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a1b6:	dd47      	ble.n	800a248 <_strtod_l+0x4a8>
 800a1b8:	2400      	movs	r4, #0
 800a1ba:	4625      	mov	r5, r4
 800a1bc:	9407      	str	r4, [sp, #28]
 800a1be:	4626      	mov	r6, r4
 800a1c0:	9a05      	ldr	r2, [sp, #20]
 800a1c2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a318 <_strtod_l+0x578>
 800a1c6:	2322      	movs	r3, #34	@ 0x22
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	f04f 0a00 	mov.w	sl, #0
 800a1ce:	9b07      	ldr	r3, [sp, #28]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f43f ae20 	beq.w	8009e16 <_strtod_l+0x76>
 800a1d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a1d8:	9805      	ldr	r0, [sp, #20]
 800a1da:	f7ff f957 	bl	800948c <_Bfree>
 800a1de:	9805      	ldr	r0, [sp, #20]
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	f7ff f953 	bl	800948c <_Bfree>
 800a1e6:	9805      	ldr	r0, [sp, #20]
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7ff f94f 	bl	800948c <_Bfree>
 800a1ee:	9907      	ldr	r1, [sp, #28]
 800a1f0:	9805      	ldr	r0, [sp, #20]
 800a1f2:	f7ff f94b 	bl	800948c <_Bfree>
 800a1f6:	9805      	ldr	r0, [sp, #20]
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	f7ff f947 	bl	800948c <_Bfree>
 800a1fe:	e60a      	b.n	8009e16 <_strtod_l+0x76>
 800a200:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a204:	1be0      	subs	r0, r4, r7
 800a206:	4281      	cmp	r1, r0
 800a208:	dbbc      	blt.n	800a184 <_strtod_l+0x3e4>
 800a20a:	4a40      	ldr	r2, [pc, #256]	@ (800a30c <_strtod_l+0x56c>)
 800a20c:	f1c3 030f 	rsb	r3, r3, #15
 800a210:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a214:	ed91 7b00 	vldr	d7, [r1]
 800a218:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a21a:	ec4b ab16 	vmov	d6, sl, fp
 800a21e:	1acb      	subs	r3, r1, r3
 800a220:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a224:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a228:	ed92 6b00 	vldr	d6, [r2]
 800a22c:	e796      	b.n	800a15c <_strtod_l+0x3bc>
 800a22e:	3116      	adds	r1, #22
 800a230:	dba8      	blt.n	800a184 <_strtod_l+0x3e4>
 800a232:	4b36      	ldr	r3, [pc, #216]	@ (800a30c <_strtod_l+0x56c>)
 800a234:	1b3c      	subs	r4, r7, r4
 800a236:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a23a:	ed94 7b00 	vldr	d7, [r4]
 800a23e:	ec4b ab16 	vmov	d6, sl, fp
 800a242:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a246:	e78b      	b.n	800a160 <_strtod_l+0x3c0>
 800a248:	2000      	movs	r0, #0
 800a24a:	ec4b ab17 	vmov	d7, sl, fp
 800a24e:	4e30      	ldr	r6, [pc, #192]	@ (800a310 <_strtod_l+0x570>)
 800a250:	1112      	asrs	r2, r2, #4
 800a252:	4601      	mov	r1, r0
 800a254:	2a01      	cmp	r2, #1
 800a256:	dc23      	bgt.n	800a2a0 <_strtod_l+0x500>
 800a258:	b108      	cbz	r0, 800a25e <_strtod_l+0x4be>
 800a25a:	ec5b ab17 	vmov	sl, fp, d7
 800a25e:	4a2c      	ldr	r2, [pc, #176]	@ (800a310 <_strtod_l+0x570>)
 800a260:	482c      	ldr	r0, [pc, #176]	@ (800a314 <_strtod_l+0x574>)
 800a262:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a266:	ed92 7b00 	vldr	d7, [r2]
 800a26a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a26e:	ec4b ab16 	vmov	d6, sl, fp
 800a272:	4a29      	ldr	r2, [pc, #164]	@ (800a318 <_strtod_l+0x578>)
 800a274:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a278:	ee17 1a90 	vmov	r1, s15
 800a27c:	400a      	ands	r2, r1
 800a27e:	4282      	cmp	r2, r0
 800a280:	ec5b ab17 	vmov	sl, fp, d7
 800a284:	d898      	bhi.n	800a1b8 <_strtod_l+0x418>
 800a286:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a28a:	4282      	cmp	r2, r0
 800a28c:	bf86      	itte	hi
 800a28e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a31c <_strtod_l+0x57c>
 800a292:	f04f 3aff 	movhi.w	sl, #4294967295
 800a296:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a29a:	2200      	movs	r2, #0
 800a29c:	9206      	str	r2, [sp, #24]
 800a29e:	e076      	b.n	800a38e <_strtod_l+0x5ee>
 800a2a0:	f012 0f01 	tst.w	r2, #1
 800a2a4:	d004      	beq.n	800a2b0 <_strtod_l+0x510>
 800a2a6:	ed96 6b00 	vldr	d6, [r6]
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a2b0:	3101      	adds	r1, #1
 800a2b2:	1052      	asrs	r2, r2, #1
 800a2b4:	3608      	adds	r6, #8
 800a2b6:	e7cd      	b.n	800a254 <_strtod_l+0x4b4>
 800a2b8:	d0ef      	beq.n	800a29a <_strtod_l+0x4fa>
 800a2ba:	4252      	negs	r2, r2
 800a2bc:	f012 000f 	ands.w	r0, r2, #15
 800a2c0:	d00a      	beq.n	800a2d8 <_strtod_l+0x538>
 800a2c2:	4912      	ldr	r1, [pc, #72]	@ (800a30c <_strtod_l+0x56c>)
 800a2c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a2c8:	ed91 7b00 	vldr	d7, [r1]
 800a2cc:	ec4b ab16 	vmov	d6, sl, fp
 800a2d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a2d4:	ec5b ab17 	vmov	sl, fp, d7
 800a2d8:	1112      	asrs	r2, r2, #4
 800a2da:	d0de      	beq.n	800a29a <_strtod_l+0x4fa>
 800a2dc:	2a1f      	cmp	r2, #31
 800a2de:	dd1f      	ble.n	800a320 <_strtod_l+0x580>
 800a2e0:	2400      	movs	r4, #0
 800a2e2:	4625      	mov	r5, r4
 800a2e4:	9407      	str	r4, [sp, #28]
 800a2e6:	4626      	mov	r6, r4
 800a2e8:	9a05      	ldr	r2, [sp, #20]
 800a2ea:	2322      	movs	r3, #34	@ 0x22
 800a2ec:	f04f 0a00 	mov.w	sl, #0
 800a2f0:	f04f 0b00 	mov.w	fp, #0
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	e76a      	b.n	800a1ce <_strtod_l+0x42e>
 800a2f8:	0800be29 	.word	0x0800be29
 800a2fc:	0800c03c 	.word	0x0800c03c
 800a300:	0800be21 	.word	0x0800be21
 800a304:	0800be58 	.word	0x0800be58
 800a308:	0800c1e5 	.word	0x0800c1e5
 800a30c:	0800bf70 	.word	0x0800bf70
 800a310:	0800bf48 	.word	0x0800bf48
 800a314:	7ca00000 	.word	0x7ca00000
 800a318:	7ff00000 	.word	0x7ff00000
 800a31c:	7fefffff 	.word	0x7fefffff
 800a320:	f012 0110 	ands.w	r1, r2, #16
 800a324:	bf18      	it	ne
 800a326:	216a      	movne	r1, #106	@ 0x6a
 800a328:	9106      	str	r1, [sp, #24]
 800a32a:	ec4b ab17 	vmov	d7, sl, fp
 800a32e:	49b0      	ldr	r1, [pc, #704]	@ (800a5f0 <_strtod_l+0x850>)
 800a330:	2000      	movs	r0, #0
 800a332:	07d6      	lsls	r6, r2, #31
 800a334:	d504      	bpl.n	800a340 <_strtod_l+0x5a0>
 800a336:	ed91 6b00 	vldr	d6, [r1]
 800a33a:	2001      	movs	r0, #1
 800a33c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a340:	1052      	asrs	r2, r2, #1
 800a342:	f101 0108 	add.w	r1, r1, #8
 800a346:	d1f4      	bne.n	800a332 <_strtod_l+0x592>
 800a348:	b108      	cbz	r0, 800a34e <_strtod_l+0x5ae>
 800a34a:	ec5b ab17 	vmov	sl, fp, d7
 800a34e:	9a06      	ldr	r2, [sp, #24]
 800a350:	b1b2      	cbz	r2, 800a380 <_strtod_l+0x5e0>
 800a352:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800a356:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	4658      	mov	r0, fp
 800a35e:	dd0f      	ble.n	800a380 <_strtod_l+0x5e0>
 800a360:	2a1f      	cmp	r2, #31
 800a362:	dd55      	ble.n	800a410 <_strtod_l+0x670>
 800a364:	2a34      	cmp	r2, #52	@ 0x34
 800a366:	bfde      	ittt	le
 800a368:	f04f 32ff 	movle.w	r2, #4294967295
 800a36c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800a370:	408a      	lslle	r2, r1
 800a372:	f04f 0a00 	mov.w	sl, #0
 800a376:	bfcc      	ite	gt
 800a378:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a37c:	ea02 0b00 	andle.w	fp, r2, r0
 800a380:	ec4b ab17 	vmov	d7, sl, fp
 800a384:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38c:	d0a8      	beq.n	800a2e0 <_strtod_l+0x540>
 800a38e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a390:	9805      	ldr	r0, [sp, #20]
 800a392:	f8cd 9000 	str.w	r9, [sp]
 800a396:	462a      	mov	r2, r5
 800a398:	f7ff f8e0 	bl	800955c <__s2b>
 800a39c:	9007      	str	r0, [sp, #28]
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	f43f af0a 	beq.w	800a1b8 <_strtod_l+0x418>
 800a3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a6:	1b3f      	subs	r7, r7, r4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bfb4      	ite	lt
 800a3ac:	463b      	movlt	r3, r7
 800a3ae:	2300      	movge	r3, #0
 800a3b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800a5e0 <_strtod_l+0x840>
 800a3b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a3bc:	2400      	movs	r4, #0
 800a3be:	930d      	str	r3, [sp, #52]	@ 0x34
 800a3c0:	4625      	mov	r5, r4
 800a3c2:	9b07      	ldr	r3, [sp, #28]
 800a3c4:	9805      	ldr	r0, [sp, #20]
 800a3c6:	6859      	ldr	r1, [r3, #4]
 800a3c8:	f7ff f820 	bl	800940c <_Balloc>
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	f43f aef6 	beq.w	800a1c0 <_strtod_l+0x420>
 800a3d4:	9b07      	ldr	r3, [sp, #28]
 800a3d6:	691a      	ldr	r2, [r3, #16]
 800a3d8:	ec4b ab19 	vmov	d9, sl, fp
 800a3dc:	3202      	adds	r2, #2
 800a3de:	f103 010c 	add.w	r1, r3, #12
 800a3e2:	0092      	lsls	r2, r2, #2
 800a3e4:	300c      	adds	r0, #12
 800a3e6:	f000 fd33 	bl	800ae50 <memcpy>
 800a3ea:	eeb0 0b49 	vmov.f64	d0, d9
 800a3ee:	9805      	ldr	r0, [sp, #20]
 800a3f0:	aa14      	add	r2, sp, #80	@ 0x50
 800a3f2:	a913      	add	r1, sp, #76	@ 0x4c
 800a3f4:	f7ff fbee 	bl	8009bd4 <__d2b>
 800a3f8:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	f43f aee0 	beq.w	800a1c0 <_strtod_l+0x420>
 800a400:	9805      	ldr	r0, [sp, #20]
 800a402:	2101      	movs	r1, #1
 800a404:	f7ff f940 	bl	8009688 <__i2b>
 800a408:	4605      	mov	r5, r0
 800a40a:	b940      	cbnz	r0, 800a41e <_strtod_l+0x67e>
 800a40c:	2500      	movs	r5, #0
 800a40e:	e6d7      	b.n	800a1c0 <_strtod_l+0x420>
 800a410:	f04f 31ff 	mov.w	r1, #4294967295
 800a414:	fa01 f202 	lsl.w	r2, r1, r2
 800a418:	ea02 0a0a 	and.w	sl, r2, sl
 800a41c:	e7b0      	b.n	800a380 <_strtod_l+0x5e0>
 800a41e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800a420:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a422:	2f00      	cmp	r7, #0
 800a424:	bfab      	itete	ge
 800a426:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800a428:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800a42a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800a42e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800a432:	bfac      	ite	ge
 800a434:	eb07 0903 	addge.w	r9, r7, r3
 800a438:	eba3 0807 	sublt.w	r8, r3, r7
 800a43c:	9b06      	ldr	r3, [sp, #24]
 800a43e:	1aff      	subs	r7, r7, r3
 800a440:	4417      	add	r7, r2
 800a442:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800a446:	4a6b      	ldr	r2, [pc, #428]	@ (800a5f4 <_strtod_l+0x854>)
 800a448:	3f01      	subs	r7, #1
 800a44a:	4297      	cmp	r7, r2
 800a44c:	da51      	bge.n	800a4f2 <_strtod_l+0x752>
 800a44e:	1bd1      	subs	r1, r2, r7
 800a450:	291f      	cmp	r1, #31
 800a452:	eba3 0301 	sub.w	r3, r3, r1
 800a456:	f04f 0201 	mov.w	r2, #1
 800a45a:	dc3e      	bgt.n	800a4da <_strtod_l+0x73a>
 800a45c:	408a      	lsls	r2, r1
 800a45e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a460:	2200      	movs	r2, #0
 800a462:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a464:	eb09 0703 	add.w	r7, r9, r3
 800a468:	4498      	add	r8, r3
 800a46a:	9b06      	ldr	r3, [sp, #24]
 800a46c:	45b9      	cmp	r9, r7
 800a46e:	4498      	add	r8, r3
 800a470:	464b      	mov	r3, r9
 800a472:	bfa8      	it	ge
 800a474:	463b      	movge	r3, r7
 800a476:	4543      	cmp	r3, r8
 800a478:	bfa8      	it	ge
 800a47a:	4643      	movge	r3, r8
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	bfc2      	ittt	gt
 800a480:	1aff      	subgt	r7, r7, r3
 800a482:	eba8 0803 	subgt.w	r8, r8, r3
 800a486:	eba9 0903 	subgt.w	r9, r9, r3
 800a48a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dd16      	ble.n	800a4be <_strtod_l+0x71e>
 800a490:	4629      	mov	r1, r5
 800a492:	9805      	ldr	r0, [sp, #20]
 800a494:	461a      	mov	r2, r3
 800a496:	f7ff f9b7 	bl	8009808 <__pow5mult>
 800a49a:	4605      	mov	r5, r0
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d0b5      	beq.n	800a40c <_strtod_l+0x66c>
 800a4a0:	4601      	mov	r1, r0
 800a4a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a4a4:	9805      	ldr	r0, [sp, #20]
 800a4a6:	f7ff f905 	bl	80096b4 <__multiply>
 800a4aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f43f ae87 	beq.w	800a1c0 <_strtod_l+0x420>
 800a4b2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a4b4:	9805      	ldr	r0, [sp, #20]
 800a4b6:	f7fe ffe9 	bl	800948c <_Bfree>
 800a4ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4bc:	9312      	str	r3, [sp, #72]	@ 0x48
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	dc1b      	bgt.n	800a4fa <_strtod_l+0x75a>
 800a4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd21      	ble.n	800a50c <_strtod_l+0x76c>
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4cc:	9805      	ldr	r0, [sp, #20]
 800a4ce:	f7ff f99b 	bl	8009808 <__pow5mult>
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	b9d0      	cbnz	r0, 800a50c <_strtod_l+0x76c>
 800a4d6:	2600      	movs	r6, #0
 800a4d8:	e672      	b.n	800a1c0 <_strtod_l+0x420>
 800a4da:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800a4de:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800a4e2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800a4e6:	37e2      	adds	r7, #226	@ 0xe2
 800a4e8:	fa02 f107 	lsl.w	r1, r2, r7
 800a4ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a4ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800a4f0:	e7b8      	b.n	800a464 <_strtod_l+0x6c4>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	e7f9      	b.n	800a4ee <_strtod_l+0x74e>
 800a4fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a4fc:	9805      	ldr	r0, [sp, #20]
 800a4fe:	463a      	mov	r2, r7
 800a500:	f7ff f9dc 	bl	80098bc <__lshift>
 800a504:	9012      	str	r0, [sp, #72]	@ 0x48
 800a506:	2800      	cmp	r0, #0
 800a508:	d1db      	bne.n	800a4c2 <_strtod_l+0x722>
 800a50a:	e659      	b.n	800a1c0 <_strtod_l+0x420>
 800a50c:	f1b8 0f00 	cmp.w	r8, #0
 800a510:	dd07      	ble.n	800a522 <_strtod_l+0x782>
 800a512:	4631      	mov	r1, r6
 800a514:	9805      	ldr	r0, [sp, #20]
 800a516:	4642      	mov	r2, r8
 800a518:	f7ff f9d0 	bl	80098bc <__lshift>
 800a51c:	4606      	mov	r6, r0
 800a51e:	2800      	cmp	r0, #0
 800a520:	d0d9      	beq.n	800a4d6 <_strtod_l+0x736>
 800a522:	f1b9 0f00 	cmp.w	r9, #0
 800a526:	dd08      	ble.n	800a53a <_strtod_l+0x79a>
 800a528:	4629      	mov	r1, r5
 800a52a:	9805      	ldr	r0, [sp, #20]
 800a52c:	464a      	mov	r2, r9
 800a52e:	f7ff f9c5 	bl	80098bc <__lshift>
 800a532:	4605      	mov	r5, r0
 800a534:	2800      	cmp	r0, #0
 800a536:	f43f ae43 	beq.w	800a1c0 <_strtod_l+0x420>
 800a53a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a53c:	9805      	ldr	r0, [sp, #20]
 800a53e:	4632      	mov	r2, r6
 800a540:	f7ff fa44 	bl	80099cc <__mdiff>
 800a544:	4604      	mov	r4, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f ae3a 	beq.w	800a1c0 <_strtod_l+0x420>
 800a54c:	2300      	movs	r3, #0
 800a54e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800a552:	60c3      	str	r3, [r0, #12]
 800a554:	4629      	mov	r1, r5
 800a556:	f7ff fa1d 	bl	8009994 <__mcmp>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	da4e      	bge.n	800a5fc <_strtod_l+0x85c>
 800a55e:	ea58 080a 	orrs.w	r8, r8, sl
 800a562:	d174      	bne.n	800a64e <_strtod_l+0x8ae>
 800a564:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d170      	bne.n	800a64e <_strtod_l+0x8ae>
 800a56c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a570:	0d1b      	lsrs	r3, r3, #20
 800a572:	051b      	lsls	r3, r3, #20
 800a574:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a578:	d969      	bls.n	800a64e <_strtod_l+0x8ae>
 800a57a:	6963      	ldr	r3, [r4, #20]
 800a57c:	b913      	cbnz	r3, 800a584 <_strtod_l+0x7e4>
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	2b01      	cmp	r3, #1
 800a582:	dd64      	ble.n	800a64e <_strtod_l+0x8ae>
 800a584:	4621      	mov	r1, r4
 800a586:	2201      	movs	r2, #1
 800a588:	9805      	ldr	r0, [sp, #20]
 800a58a:	f7ff f997 	bl	80098bc <__lshift>
 800a58e:	4629      	mov	r1, r5
 800a590:	4604      	mov	r4, r0
 800a592:	f7ff f9ff 	bl	8009994 <__mcmp>
 800a596:	2800      	cmp	r0, #0
 800a598:	dd59      	ble.n	800a64e <_strtod_l+0x8ae>
 800a59a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a59e:	9a06      	ldr	r2, [sp, #24]
 800a5a0:	0d1b      	lsrs	r3, r3, #20
 800a5a2:	051b      	lsls	r3, r3, #20
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	d070      	beq.n	800a68a <_strtod_l+0x8ea>
 800a5a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5ac:	d86d      	bhi.n	800a68a <_strtod_l+0x8ea>
 800a5ae:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a5b2:	f67f ae99 	bls.w	800a2e8 <_strtod_l+0x548>
 800a5b6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800a5e8 <_strtod_l+0x848>
 800a5ba:	ec4b ab16 	vmov	d6, sl, fp
 800a5be:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f8 <_strtod_l+0x858>)
 800a5c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a5c4:	ee17 2a90 	vmov	r2, s15
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	ec5b ab17 	vmov	sl, fp, d7
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f47f ae01 	bne.w	800a1d6 <_strtod_l+0x436>
 800a5d4:	9a05      	ldr	r2, [sp, #20]
 800a5d6:	2322      	movs	r3, #34	@ 0x22
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	e5fc      	b.n	800a1d6 <_strtod_l+0x436>
 800a5dc:	f3af 8000 	nop.w
 800a5e0:	ffc00000 	.word	0xffc00000
 800a5e4:	41dfffff 	.word	0x41dfffff
 800a5e8:	00000000 	.word	0x00000000
 800a5ec:	39500000 	.word	0x39500000
 800a5f0:	0800c068 	.word	0x0800c068
 800a5f4:	fffffc02 	.word	0xfffffc02
 800a5f8:	7ff00000 	.word	0x7ff00000
 800a5fc:	46d9      	mov	r9, fp
 800a5fe:	d15d      	bne.n	800a6bc <_strtod_l+0x91c>
 800a600:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a604:	f1b8 0f00 	cmp.w	r8, #0
 800a608:	d02a      	beq.n	800a660 <_strtod_l+0x8c0>
 800a60a:	4aab      	ldr	r2, [pc, #684]	@ (800a8b8 <_strtod_l+0xb18>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d12a      	bne.n	800a666 <_strtod_l+0x8c6>
 800a610:	9b06      	ldr	r3, [sp, #24]
 800a612:	4652      	mov	r2, sl
 800a614:	b1fb      	cbz	r3, 800a656 <_strtod_l+0x8b6>
 800a616:	4ba9      	ldr	r3, [pc, #676]	@ (800a8bc <_strtod_l+0xb1c>)
 800a618:	ea0b 0303 	and.w	r3, fp, r3
 800a61c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a620:	f04f 31ff 	mov.w	r1, #4294967295
 800a624:	d81a      	bhi.n	800a65c <_strtod_l+0x8bc>
 800a626:	0d1b      	lsrs	r3, r3, #20
 800a628:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a62c:	fa01 f303 	lsl.w	r3, r1, r3
 800a630:	429a      	cmp	r2, r3
 800a632:	d118      	bne.n	800a666 <_strtod_l+0x8c6>
 800a634:	4ba2      	ldr	r3, [pc, #648]	@ (800a8c0 <_strtod_l+0xb20>)
 800a636:	4599      	cmp	r9, r3
 800a638:	d102      	bne.n	800a640 <_strtod_l+0x8a0>
 800a63a:	3201      	adds	r2, #1
 800a63c:	f43f adc0 	beq.w	800a1c0 <_strtod_l+0x420>
 800a640:	4b9e      	ldr	r3, [pc, #632]	@ (800a8bc <_strtod_l+0xb1c>)
 800a642:	ea09 0303 	and.w	r3, r9, r3
 800a646:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800a64a:	f04f 0a00 	mov.w	sl, #0
 800a64e:	9b06      	ldr	r3, [sp, #24]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1b0      	bne.n	800a5b6 <_strtod_l+0x816>
 800a654:	e5bf      	b.n	800a1d6 <_strtod_l+0x436>
 800a656:	f04f 33ff 	mov.w	r3, #4294967295
 800a65a:	e7e9      	b.n	800a630 <_strtod_l+0x890>
 800a65c:	460b      	mov	r3, r1
 800a65e:	e7e7      	b.n	800a630 <_strtod_l+0x890>
 800a660:	ea53 030a 	orrs.w	r3, r3, sl
 800a664:	d099      	beq.n	800a59a <_strtod_l+0x7fa>
 800a666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a668:	b1c3      	cbz	r3, 800a69c <_strtod_l+0x8fc>
 800a66a:	ea13 0f09 	tst.w	r3, r9
 800a66e:	d0ee      	beq.n	800a64e <_strtod_l+0x8ae>
 800a670:	9a06      	ldr	r2, [sp, #24]
 800a672:	4650      	mov	r0, sl
 800a674:	4659      	mov	r1, fp
 800a676:	f1b8 0f00 	cmp.w	r8, #0
 800a67a:	d013      	beq.n	800a6a4 <_strtod_l+0x904>
 800a67c:	f7ff fb75 	bl	8009d6a <sulp>
 800a680:	ee39 7b00 	vadd.f64	d7, d9, d0
 800a684:	ec5b ab17 	vmov	sl, fp, d7
 800a688:	e7e1      	b.n	800a64e <_strtod_l+0x8ae>
 800a68a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a68e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a692:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a696:	f04f 3aff 	mov.w	sl, #4294967295
 800a69a:	e7d8      	b.n	800a64e <_strtod_l+0x8ae>
 800a69c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a69e:	ea13 0f0a 	tst.w	r3, sl
 800a6a2:	e7e4      	b.n	800a66e <_strtod_l+0x8ce>
 800a6a4:	f7ff fb61 	bl	8009d6a <sulp>
 800a6a8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800a6ac:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b4:	ec5b ab10 	vmov	sl, fp, d0
 800a6b8:	d1c9      	bne.n	800a64e <_strtod_l+0x8ae>
 800a6ba:	e615      	b.n	800a2e8 <_strtod_l+0x548>
 800a6bc:	4629      	mov	r1, r5
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7ff fae0 	bl	8009c84 <__ratio>
 800a6c4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800a6c8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d0:	d85d      	bhi.n	800a78e <_strtod_l+0x9ee>
 800a6d2:	f1b8 0f00 	cmp.w	r8, #0
 800a6d6:	d164      	bne.n	800a7a2 <_strtod_l+0xa02>
 800a6d8:	f1ba 0f00 	cmp.w	sl, #0
 800a6dc:	d14b      	bne.n	800a776 <_strtod_l+0x9d6>
 800a6de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6e2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d160      	bne.n	800a7ac <_strtod_l+0xa0c>
 800a6ea:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800a6ee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f6:	d401      	bmi.n	800a6fc <_strtod_l+0x95c>
 800a6f8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a6fc:	eeb1 ab48 	vneg.f64	d10, d8
 800a700:	486e      	ldr	r0, [pc, #440]	@ (800a8bc <_strtod_l+0xb1c>)
 800a702:	4970      	ldr	r1, [pc, #448]	@ (800a8c4 <_strtod_l+0xb24>)
 800a704:	ea09 0700 	and.w	r7, r9, r0
 800a708:	428f      	cmp	r7, r1
 800a70a:	ec53 2b1a 	vmov	r2, r3, d10
 800a70e:	d17d      	bne.n	800a80c <_strtod_l+0xa6c>
 800a710:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800a714:	ec4b ab1c 	vmov	d12, sl, fp
 800a718:	eeb0 0b4c 	vmov.f64	d0, d12
 800a71c:	f7ff f9ea 	bl	8009af4 <__ulp>
 800a720:	4866      	ldr	r0, [pc, #408]	@ (800a8bc <_strtod_l+0xb1c>)
 800a722:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800a726:	ee1c 3a90 	vmov	r3, s25
 800a72a:	4a67      	ldr	r2, [pc, #412]	@ (800a8c8 <_strtod_l+0xb28>)
 800a72c:	ea03 0100 	and.w	r1, r3, r0
 800a730:	4291      	cmp	r1, r2
 800a732:	ec5b ab1c 	vmov	sl, fp, d12
 800a736:	d93c      	bls.n	800a7b2 <_strtod_l+0xa12>
 800a738:	ee19 2a90 	vmov	r2, s19
 800a73c:	4b60      	ldr	r3, [pc, #384]	@ (800a8c0 <_strtod_l+0xb20>)
 800a73e:	429a      	cmp	r2, r3
 800a740:	d104      	bne.n	800a74c <_strtod_l+0x9ac>
 800a742:	ee19 3a10 	vmov	r3, s18
 800a746:	3301      	adds	r3, #1
 800a748:	f43f ad3a 	beq.w	800a1c0 <_strtod_l+0x420>
 800a74c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800a8c0 <_strtod_l+0xb20>
 800a750:	f04f 3aff 	mov.w	sl, #4294967295
 800a754:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a756:	9805      	ldr	r0, [sp, #20]
 800a758:	f7fe fe98 	bl	800948c <_Bfree>
 800a75c:	9805      	ldr	r0, [sp, #20]
 800a75e:	4631      	mov	r1, r6
 800a760:	f7fe fe94 	bl	800948c <_Bfree>
 800a764:	9805      	ldr	r0, [sp, #20]
 800a766:	4629      	mov	r1, r5
 800a768:	f7fe fe90 	bl	800948c <_Bfree>
 800a76c:	9805      	ldr	r0, [sp, #20]
 800a76e:	4621      	mov	r1, r4
 800a770:	f7fe fe8c 	bl	800948c <_Bfree>
 800a774:	e625      	b.n	800a3c2 <_strtod_l+0x622>
 800a776:	f1ba 0f01 	cmp.w	sl, #1
 800a77a:	d103      	bne.n	800a784 <_strtod_l+0x9e4>
 800a77c:	f1bb 0f00 	cmp.w	fp, #0
 800a780:	f43f adb2 	beq.w	800a2e8 <_strtod_l+0x548>
 800a784:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a788:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a78c:	e7b8      	b.n	800a700 <_strtod_l+0x960>
 800a78e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a792:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a796:	f1b8 0f00 	cmp.w	r8, #0
 800a79a:	d0af      	beq.n	800a6fc <_strtod_l+0x95c>
 800a79c:	eeb0 ab48 	vmov.f64	d10, d8
 800a7a0:	e7ae      	b.n	800a700 <_strtod_l+0x960>
 800a7a2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800a7a6:	eeb0 8b4a 	vmov.f64	d8, d10
 800a7aa:	e7a9      	b.n	800a700 <_strtod_l+0x960>
 800a7ac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a7b0:	e7a6      	b.n	800a700 <_strtod_l+0x960>
 800a7b2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a7b6:	9b06      	ldr	r3, [sp, #24]
 800a7b8:	46d9      	mov	r9, fp
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1ca      	bne.n	800a754 <_strtod_l+0x9b4>
 800a7be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7c2:	0d1b      	lsrs	r3, r3, #20
 800a7c4:	051b      	lsls	r3, r3, #20
 800a7c6:	429f      	cmp	r7, r3
 800a7c8:	d1c4      	bne.n	800a754 <_strtod_l+0x9b4>
 800a7ca:	ec51 0b18 	vmov	r0, r1, d8
 800a7ce:	f7f5 ffb3 	bl	8000738 <__aeabi_d2lz>
 800a7d2:	f7f5 ff6b 	bl	80006ac <__aeabi_l2d>
 800a7d6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800a7da:	ec41 0b17 	vmov	d7, r0, r1
 800a7de:	ea49 090a 	orr.w	r9, r9, sl
 800a7e2:	ea59 0908 	orrs.w	r9, r9, r8
 800a7e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a7ea:	d03c      	beq.n	800a866 <_strtod_l+0xac6>
 800a7ec:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800a8a0 <_strtod_l+0xb00>
 800a7f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f8:	f53f aced 	bmi.w	800a1d6 <_strtod_l+0x436>
 800a7fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800a8a8 <_strtod_l+0xb08>
 800a800:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	dda4      	ble.n	800a754 <_strtod_l+0x9b4>
 800a80a:	e4e4      	b.n	800a1d6 <_strtod_l+0x436>
 800a80c:	9906      	ldr	r1, [sp, #24]
 800a80e:	b1e1      	cbz	r1, 800a84a <_strtod_l+0xaaa>
 800a810:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800a814:	d819      	bhi.n	800a84a <_strtod_l+0xaaa>
 800a816:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81e:	d811      	bhi.n	800a844 <_strtod_l+0xaa4>
 800a820:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800a824:	ee18 3a10 	vmov	r3, s16
 800a828:	2b01      	cmp	r3, #1
 800a82a:	bf38      	it	cc
 800a82c:	2301      	movcc	r3, #1
 800a82e:	ee08 3a10 	vmov	s16, r3
 800a832:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a836:	f1b8 0f00 	cmp.w	r8, #0
 800a83a:	d111      	bne.n	800a860 <_strtod_l+0xac0>
 800a83c:	eeb1 7b48 	vneg.f64	d7, d8
 800a840:	ec53 2b17 	vmov	r2, r3, d7
 800a844:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800a848:	1bcb      	subs	r3, r1, r7
 800a84a:	eeb0 0b49 	vmov.f64	d0, d9
 800a84e:	ec43 2b1a 	vmov	d10, r2, r3
 800a852:	f7ff f94f 	bl	8009af4 <__ulp>
 800a856:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800a85a:	ec5b ab19 	vmov	sl, fp, d9
 800a85e:	e7aa      	b.n	800a7b6 <_strtod_l+0xa16>
 800a860:	eeb0 7b48 	vmov.f64	d7, d8
 800a864:	e7ec      	b.n	800a840 <_strtod_l+0xaa0>
 800a866:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800a8b0 <_strtod_l+0xb10>
 800a86a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a872:	f57f af6f 	bpl.w	800a754 <_strtod_l+0x9b4>
 800a876:	e4ae      	b.n	800a1d6 <_strtod_l+0x436>
 800a878:	2300      	movs	r3, #0
 800a87a:	9308      	str	r3, [sp, #32]
 800a87c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a87e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	f7ff bacc 	b.w	8009e1e <_strtod_l+0x7e>
 800a886:	2a65      	cmp	r2, #101	@ 0x65
 800a888:	f43f abbc 	beq.w	800a004 <_strtod_l+0x264>
 800a88c:	2a45      	cmp	r2, #69	@ 0x45
 800a88e:	f43f abb9 	beq.w	800a004 <_strtod_l+0x264>
 800a892:	2301      	movs	r3, #1
 800a894:	9306      	str	r3, [sp, #24]
 800a896:	f7ff bbf0 	b.w	800a07a <_strtod_l+0x2da>
 800a89a:	bf00      	nop
 800a89c:	f3af 8000 	nop.w
 800a8a0:	94a03595 	.word	0x94a03595
 800a8a4:	3fdfffff 	.word	0x3fdfffff
 800a8a8:	35afe535 	.word	0x35afe535
 800a8ac:	3fe00000 	.word	0x3fe00000
 800a8b0:	94a03595 	.word	0x94a03595
 800a8b4:	3fcfffff 	.word	0x3fcfffff
 800a8b8:	000fffff 	.word	0x000fffff
 800a8bc:	7ff00000 	.word	0x7ff00000
 800a8c0:	7fefffff 	.word	0x7fefffff
 800a8c4:	7fe00000 	.word	0x7fe00000
 800a8c8:	7c9fffff 	.word	0x7c9fffff

0800a8cc <_strtod_r>:
 800a8cc:	4b01      	ldr	r3, [pc, #4]	@ (800a8d4 <_strtod_r+0x8>)
 800a8ce:	f7ff ba67 	b.w	8009da0 <_strtod_l>
 800a8d2:	bf00      	nop
 800a8d4:	2400006c 	.word	0x2400006c

0800a8d8 <_strtol_l.constprop.0>:
 800a8d8:	2b24      	cmp	r3, #36	@ 0x24
 800a8da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8de:	4686      	mov	lr, r0
 800a8e0:	4690      	mov	r8, r2
 800a8e2:	d801      	bhi.n	800a8e8 <_strtol_l.constprop.0+0x10>
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d106      	bne.n	800a8f6 <_strtol_l.constprop.0+0x1e>
 800a8e8:	f7fd fe7e 	bl	80085e8 <__errno>
 800a8ec:	2316      	movs	r3, #22
 800a8ee:	6003      	str	r3, [r0, #0]
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f6:	4834      	ldr	r0, [pc, #208]	@ (800a9c8 <_strtol_l.constprop.0+0xf0>)
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	462a      	mov	r2, r5
 800a8fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a900:	5d06      	ldrb	r6, [r0, r4]
 800a902:	f016 0608 	ands.w	r6, r6, #8
 800a906:	d1f8      	bne.n	800a8fa <_strtol_l.constprop.0+0x22>
 800a908:	2c2d      	cmp	r4, #45	@ 0x2d
 800a90a:	d12d      	bne.n	800a968 <_strtol_l.constprop.0+0x90>
 800a90c:	782c      	ldrb	r4, [r5, #0]
 800a90e:	2601      	movs	r6, #1
 800a910:	1c95      	adds	r5, r2, #2
 800a912:	f033 0210 	bics.w	r2, r3, #16
 800a916:	d109      	bne.n	800a92c <_strtol_l.constprop.0+0x54>
 800a918:	2c30      	cmp	r4, #48	@ 0x30
 800a91a:	d12a      	bne.n	800a972 <_strtol_l.constprop.0+0x9a>
 800a91c:	782a      	ldrb	r2, [r5, #0]
 800a91e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a922:	2a58      	cmp	r2, #88	@ 0x58
 800a924:	d125      	bne.n	800a972 <_strtol_l.constprop.0+0x9a>
 800a926:	786c      	ldrb	r4, [r5, #1]
 800a928:	2310      	movs	r3, #16
 800a92a:	3502      	adds	r5, #2
 800a92c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a930:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a934:	2200      	movs	r2, #0
 800a936:	fbbc f9f3 	udiv	r9, ip, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a940:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a944:	2f09      	cmp	r7, #9
 800a946:	d81b      	bhi.n	800a980 <_strtol_l.constprop.0+0xa8>
 800a948:	463c      	mov	r4, r7
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	dd27      	ble.n	800a99e <_strtol_l.constprop.0+0xc6>
 800a94e:	1c57      	adds	r7, r2, #1
 800a950:	d007      	beq.n	800a962 <_strtol_l.constprop.0+0x8a>
 800a952:	4581      	cmp	r9, r0
 800a954:	d320      	bcc.n	800a998 <_strtol_l.constprop.0+0xc0>
 800a956:	d101      	bne.n	800a95c <_strtol_l.constprop.0+0x84>
 800a958:	45a2      	cmp	sl, r4
 800a95a:	db1d      	blt.n	800a998 <_strtol_l.constprop.0+0xc0>
 800a95c:	fb00 4003 	mla	r0, r0, r3, r4
 800a960:	2201      	movs	r2, #1
 800a962:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a966:	e7eb      	b.n	800a940 <_strtol_l.constprop.0+0x68>
 800a968:	2c2b      	cmp	r4, #43	@ 0x2b
 800a96a:	bf04      	itt	eq
 800a96c:	782c      	ldrbeq	r4, [r5, #0]
 800a96e:	1c95      	addeq	r5, r2, #2
 800a970:	e7cf      	b.n	800a912 <_strtol_l.constprop.0+0x3a>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1da      	bne.n	800a92c <_strtol_l.constprop.0+0x54>
 800a976:	2c30      	cmp	r4, #48	@ 0x30
 800a978:	bf0c      	ite	eq
 800a97a:	2308      	moveq	r3, #8
 800a97c:	230a      	movne	r3, #10
 800a97e:	e7d5      	b.n	800a92c <_strtol_l.constprop.0+0x54>
 800a980:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a984:	2f19      	cmp	r7, #25
 800a986:	d801      	bhi.n	800a98c <_strtol_l.constprop.0+0xb4>
 800a988:	3c37      	subs	r4, #55	@ 0x37
 800a98a:	e7de      	b.n	800a94a <_strtol_l.constprop.0+0x72>
 800a98c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a990:	2f19      	cmp	r7, #25
 800a992:	d804      	bhi.n	800a99e <_strtol_l.constprop.0+0xc6>
 800a994:	3c57      	subs	r4, #87	@ 0x57
 800a996:	e7d8      	b.n	800a94a <_strtol_l.constprop.0+0x72>
 800a998:	f04f 32ff 	mov.w	r2, #4294967295
 800a99c:	e7e1      	b.n	800a962 <_strtol_l.constprop.0+0x8a>
 800a99e:	1c53      	adds	r3, r2, #1
 800a9a0:	d108      	bne.n	800a9b4 <_strtol_l.constprop.0+0xdc>
 800a9a2:	2322      	movs	r3, #34	@ 0x22
 800a9a4:	f8ce 3000 	str.w	r3, [lr]
 800a9a8:	4660      	mov	r0, ip
 800a9aa:	f1b8 0f00 	cmp.w	r8, #0
 800a9ae:	d0a0      	beq.n	800a8f2 <_strtol_l.constprop.0+0x1a>
 800a9b0:	1e69      	subs	r1, r5, #1
 800a9b2:	e006      	b.n	800a9c2 <_strtol_l.constprop.0+0xea>
 800a9b4:	b106      	cbz	r6, 800a9b8 <_strtol_l.constprop.0+0xe0>
 800a9b6:	4240      	negs	r0, r0
 800a9b8:	f1b8 0f00 	cmp.w	r8, #0
 800a9bc:	d099      	beq.n	800a8f2 <_strtol_l.constprop.0+0x1a>
 800a9be:	2a00      	cmp	r2, #0
 800a9c0:	d1f6      	bne.n	800a9b0 <_strtol_l.constprop.0+0xd8>
 800a9c2:	f8c8 1000 	str.w	r1, [r8]
 800a9c6:	e794      	b.n	800a8f2 <_strtol_l.constprop.0+0x1a>
 800a9c8:	0800c091 	.word	0x0800c091

0800a9cc <_strtol_r>:
 800a9cc:	f7ff bf84 	b.w	800a8d8 <_strtol_l.constprop.0>

0800a9d0 <__ssputs_r>:
 800a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d4:	688e      	ldr	r6, [r1, #8]
 800a9d6:	461f      	mov	r7, r3
 800a9d8:	42be      	cmp	r6, r7
 800a9da:	680b      	ldr	r3, [r1, #0]
 800a9dc:	4682      	mov	sl, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	4690      	mov	r8, r2
 800a9e2:	d82d      	bhi.n	800aa40 <__ssputs_r+0x70>
 800a9e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9ec:	d026      	beq.n	800aa3c <__ssputs_r+0x6c>
 800a9ee:	6965      	ldr	r5, [r4, #20]
 800a9f0:	6909      	ldr	r1, [r1, #16]
 800a9f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9f6:	eba3 0901 	sub.w	r9, r3, r1
 800a9fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9fe:	1c7b      	adds	r3, r7, #1
 800aa00:	444b      	add	r3, r9
 800aa02:	106d      	asrs	r5, r5, #1
 800aa04:	429d      	cmp	r5, r3
 800aa06:	bf38      	it	cc
 800aa08:	461d      	movcc	r5, r3
 800aa0a:	0553      	lsls	r3, r2, #21
 800aa0c:	d527      	bpl.n	800aa5e <__ssputs_r+0x8e>
 800aa0e:	4629      	mov	r1, r5
 800aa10:	f7fe fc70 	bl	80092f4 <_malloc_r>
 800aa14:	4606      	mov	r6, r0
 800aa16:	b360      	cbz	r0, 800aa72 <__ssputs_r+0xa2>
 800aa18:	6921      	ldr	r1, [r4, #16]
 800aa1a:	464a      	mov	r2, r9
 800aa1c:	f000 fa18 	bl	800ae50 <memcpy>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa2a:	81a3      	strh	r3, [r4, #12]
 800aa2c:	6126      	str	r6, [r4, #16]
 800aa2e:	6165      	str	r5, [r4, #20]
 800aa30:	444e      	add	r6, r9
 800aa32:	eba5 0509 	sub.w	r5, r5, r9
 800aa36:	6026      	str	r6, [r4, #0]
 800aa38:	60a5      	str	r5, [r4, #8]
 800aa3a:	463e      	mov	r6, r7
 800aa3c:	42be      	cmp	r6, r7
 800aa3e:	d900      	bls.n	800aa42 <__ssputs_r+0x72>
 800aa40:	463e      	mov	r6, r7
 800aa42:	6820      	ldr	r0, [r4, #0]
 800aa44:	4632      	mov	r2, r6
 800aa46:	4641      	mov	r1, r8
 800aa48:	f000 f9c6 	bl	800add8 <memmove>
 800aa4c:	68a3      	ldr	r3, [r4, #8]
 800aa4e:	1b9b      	subs	r3, r3, r6
 800aa50:	60a3      	str	r3, [r4, #8]
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	4433      	add	r3, r6
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	2000      	movs	r0, #0
 800aa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5e:	462a      	mov	r2, r5
 800aa60:	f000 fd8b 	bl	800b57a <_realloc_r>
 800aa64:	4606      	mov	r6, r0
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d1e0      	bne.n	800aa2c <__ssputs_r+0x5c>
 800aa6a:	6921      	ldr	r1, [r4, #16]
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	f7fe fbcd 	bl	800920c <_free_r>
 800aa72:	230c      	movs	r3, #12
 800aa74:	f8ca 3000 	str.w	r3, [sl]
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295
 800aa84:	e7e9      	b.n	800aa5a <__ssputs_r+0x8a>
	...

0800aa88 <_svfiprintf_r>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	4698      	mov	r8, r3
 800aa8e:	898b      	ldrh	r3, [r1, #12]
 800aa90:	061b      	lsls	r3, r3, #24
 800aa92:	b09d      	sub	sp, #116	@ 0x74
 800aa94:	4607      	mov	r7, r0
 800aa96:	460d      	mov	r5, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	d510      	bpl.n	800aabe <_svfiprintf_r+0x36>
 800aa9c:	690b      	ldr	r3, [r1, #16]
 800aa9e:	b973      	cbnz	r3, 800aabe <_svfiprintf_r+0x36>
 800aaa0:	2140      	movs	r1, #64	@ 0x40
 800aaa2:	f7fe fc27 	bl	80092f4 <_malloc_r>
 800aaa6:	6028      	str	r0, [r5, #0]
 800aaa8:	6128      	str	r0, [r5, #16]
 800aaaa:	b930      	cbnz	r0, 800aaba <_svfiprintf_r+0x32>
 800aaac:	230c      	movs	r3, #12
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	b01d      	add	sp, #116	@ 0x74
 800aab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaba:	2340      	movs	r3, #64	@ 0x40
 800aabc:	616b      	str	r3, [r5, #20]
 800aabe:	2300      	movs	r3, #0
 800aac0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aac2:	2320      	movs	r3, #32
 800aac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aac8:	f8cd 800c 	str.w	r8, [sp, #12]
 800aacc:	2330      	movs	r3, #48	@ 0x30
 800aace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac6c <_svfiprintf_r+0x1e4>
 800aad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aad6:	f04f 0901 	mov.w	r9, #1
 800aada:	4623      	mov	r3, r4
 800aadc:	469a      	mov	sl, r3
 800aade:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae2:	b10a      	cbz	r2, 800aae8 <_svfiprintf_r+0x60>
 800aae4:	2a25      	cmp	r2, #37	@ 0x25
 800aae6:	d1f9      	bne.n	800aadc <_svfiprintf_r+0x54>
 800aae8:	ebba 0b04 	subs.w	fp, sl, r4
 800aaec:	d00b      	beq.n	800ab06 <_svfiprintf_r+0x7e>
 800aaee:	465b      	mov	r3, fp
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f7ff ff6b 	bl	800a9d0 <__ssputs_r>
 800aafa:	3001      	adds	r0, #1
 800aafc:	f000 80a7 	beq.w	800ac4e <_svfiprintf_r+0x1c6>
 800ab00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab02:	445a      	add	r2, fp
 800ab04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab06:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 809f 	beq.w	800ac4e <_svfiprintf_r+0x1c6>
 800ab10:	2300      	movs	r3, #0
 800ab12:	f04f 32ff 	mov.w	r2, #4294967295
 800ab16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab1a:	f10a 0a01 	add.w	sl, sl, #1
 800ab1e:	9304      	str	r3, [sp, #16]
 800ab20:	9307      	str	r3, [sp, #28]
 800ab22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab26:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab28:	4654      	mov	r4, sl
 800ab2a:	2205      	movs	r2, #5
 800ab2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab30:	484e      	ldr	r0, [pc, #312]	@ (800ac6c <_svfiprintf_r+0x1e4>)
 800ab32:	f7f5 fbd5 	bl	80002e0 <memchr>
 800ab36:	9a04      	ldr	r2, [sp, #16]
 800ab38:	b9d8      	cbnz	r0, 800ab72 <_svfiprintf_r+0xea>
 800ab3a:	06d0      	lsls	r0, r2, #27
 800ab3c:	bf44      	itt	mi
 800ab3e:	2320      	movmi	r3, #32
 800ab40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab44:	0711      	lsls	r1, r2, #28
 800ab46:	bf44      	itt	mi
 800ab48:	232b      	movmi	r3, #43	@ 0x2b
 800ab4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab54:	d015      	beq.n	800ab82 <_svfiprintf_r+0xfa>
 800ab56:	9a07      	ldr	r2, [sp, #28]
 800ab58:	4654      	mov	r4, sl
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	f04f 0c0a 	mov.w	ip, #10
 800ab60:	4621      	mov	r1, r4
 800ab62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab66:	3b30      	subs	r3, #48	@ 0x30
 800ab68:	2b09      	cmp	r3, #9
 800ab6a:	d94b      	bls.n	800ac04 <_svfiprintf_r+0x17c>
 800ab6c:	b1b0      	cbz	r0, 800ab9c <_svfiprintf_r+0x114>
 800ab6e:	9207      	str	r2, [sp, #28]
 800ab70:	e014      	b.n	800ab9c <_svfiprintf_r+0x114>
 800ab72:	eba0 0308 	sub.w	r3, r0, r8
 800ab76:	fa09 f303 	lsl.w	r3, r9, r3
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	46a2      	mov	sl, r4
 800ab80:	e7d2      	b.n	800ab28 <_svfiprintf_r+0xa0>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	1d19      	adds	r1, r3, #4
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	9103      	str	r1, [sp, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bfbb      	ittet	lt
 800ab8e:	425b      	neglt	r3, r3
 800ab90:	f042 0202 	orrlt.w	r2, r2, #2
 800ab94:	9307      	strge	r3, [sp, #28]
 800ab96:	9307      	strlt	r3, [sp, #28]
 800ab98:	bfb8      	it	lt
 800ab9a:	9204      	strlt	r2, [sp, #16]
 800ab9c:	7823      	ldrb	r3, [r4, #0]
 800ab9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800aba0:	d10a      	bne.n	800abb8 <_svfiprintf_r+0x130>
 800aba2:	7863      	ldrb	r3, [r4, #1]
 800aba4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aba6:	d132      	bne.n	800ac0e <_svfiprintf_r+0x186>
 800aba8:	9b03      	ldr	r3, [sp, #12]
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	9203      	str	r2, [sp, #12]
 800abb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abb4:	3402      	adds	r4, #2
 800abb6:	9305      	str	r3, [sp, #20]
 800abb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac7c <_svfiprintf_r+0x1f4>
 800abbc:	7821      	ldrb	r1, [r4, #0]
 800abbe:	2203      	movs	r2, #3
 800abc0:	4650      	mov	r0, sl
 800abc2:	f7f5 fb8d 	bl	80002e0 <memchr>
 800abc6:	b138      	cbz	r0, 800abd8 <_svfiprintf_r+0x150>
 800abc8:	9b04      	ldr	r3, [sp, #16]
 800abca:	eba0 000a 	sub.w	r0, r0, sl
 800abce:	2240      	movs	r2, #64	@ 0x40
 800abd0:	4082      	lsls	r2, r0
 800abd2:	4313      	orrs	r3, r2
 800abd4:	3401      	adds	r4, #1
 800abd6:	9304      	str	r3, [sp, #16]
 800abd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abdc:	4824      	ldr	r0, [pc, #144]	@ (800ac70 <_svfiprintf_r+0x1e8>)
 800abde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abe2:	2206      	movs	r2, #6
 800abe4:	f7f5 fb7c 	bl	80002e0 <memchr>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d036      	beq.n	800ac5a <_svfiprintf_r+0x1d2>
 800abec:	4b21      	ldr	r3, [pc, #132]	@ (800ac74 <_svfiprintf_r+0x1ec>)
 800abee:	bb1b      	cbnz	r3, 800ac38 <_svfiprintf_r+0x1b0>
 800abf0:	9b03      	ldr	r3, [sp, #12]
 800abf2:	3307      	adds	r3, #7
 800abf4:	f023 0307 	bic.w	r3, r3, #7
 800abf8:	3308      	adds	r3, #8
 800abfa:	9303      	str	r3, [sp, #12]
 800abfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abfe:	4433      	add	r3, r6
 800ac00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac02:	e76a      	b.n	800aada <_svfiprintf_r+0x52>
 800ac04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac08:	460c      	mov	r4, r1
 800ac0a:	2001      	movs	r0, #1
 800ac0c:	e7a8      	b.n	800ab60 <_svfiprintf_r+0xd8>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	3401      	adds	r4, #1
 800ac12:	9305      	str	r3, [sp, #20]
 800ac14:	4619      	mov	r1, r3
 800ac16:	f04f 0c0a 	mov.w	ip, #10
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac20:	3a30      	subs	r2, #48	@ 0x30
 800ac22:	2a09      	cmp	r2, #9
 800ac24:	d903      	bls.n	800ac2e <_svfiprintf_r+0x1a6>
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0c6      	beq.n	800abb8 <_svfiprintf_r+0x130>
 800ac2a:	9105      	str	r1, [sp, #20]
 800ac2c:	e7c4      	b.n	800abb8 <_svfiprintf_r+0x130>
 800ac2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac32:	4604      	mov	r4, r0
 800ac34:	2301      	movs	r3, #1
 800ac36:	e7f0      	b.n	800ac1a <_svfiprintf_r+0x192>
 800ac38:	ab03      	add	r3, sp, #12
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac78 <_svfiprintf_r+0x1f0>)
 800ac40:	a904      	add	r1, sp, #16
 800ac42:	4638      	mov	r0, r7
 800ac44:	f7fc fd70 	bl	8007728 <_printf_float>
 800ac48:	1c42      	adds	r2, r0, #1
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	d1d6      	bne.n	800abfc <_svfiprintf_r+0x174>
 800ac4e:	89ab      	ldrh	r3, [r5, #12]
 800ac50:	065b      	lsls	r3, r3, #25
 800ac52:	f53f af2d 	bmi.w	800aab0 <_svfiprintf_r+0x28>
 800ac56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac58:	e72c      	b.n	800aab4 <_svfiprintf_r+0x2c>
 800ac5a:	ab03      	add	r3, sp, #12
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4b05      	ldr	r3, [pc, #20]	@ (800ac78 <_svfiprintf_r+0x1f0>)
 800ac62:	a904      	add	r1, sp, #16
 800ac64:	4638      	mov	r0, r7
 800ac66:	f7fc ffe7 	bl	8007c38 <_printf_i>
 800ac6a:	e7ed      	b.n	800ac48 <_svfiprintf_r+0x1c0>
 800ac6c:	0800c191 	.word	0x0800c191
 800ac70:	0800c19b 	.word	0x0800c19b
 800ac74:	08007729 	.word	0x08007729
 800ac78:	0800a9d1 	.word	0x0800a9d1
 800ac7c:	0800c197 	.word	0x0800c197

0800ac80 <__sflush_r>:
 800ac80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac88:	0716      	lsls	r6, r2, #28
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	d454      	bmi.n	800ad3a <__sflush_r+0xba>
 800ac90:	684b      	ldr	r3, [r1, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dc02      	bgt.n	800ac9c <__sflush_r+0x1c>
 800ac96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dd48      	ble.n	800ad2e <__sflush_r+0xae>
 800ac9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	d045      	beq.n	800ad2e <__sflush_r+0xae>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aca8:	682f      	ldr	r7, [r5, #0]
 800acaa:	6a21      	ldr	r1, [r4, #32]
 800acac:	602b      	str	r3, [r5, #0]
 800acae:	d030      	beq.n	800ad12 <__sflush_r+0x92>
 800acb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	0759      	lsls	r1, r3, #29
 800acb6:	d505      	bpl.n	800acc4 <__sflush_r+0x44>
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	1ad2      	subs	r2, r2, r3
 800acbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800acbe:	b10b      	cbz	r3, 800acc4 <__sflush_r+0x44>
 800acc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800acc2:	1ad2      	subs	r2, r2, r3
 800acc4:	2300      	movs	r3, #0
 800acc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800acc8:	6a21      	ldr	r1, [r4, #32]
 800acca:	4628      	mov	r0, r5
 800accc:	47b0      	blx	r6
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	d106      	bne.n	800ace2 <__sflush_r+0x62>
 800acd4:	6829      	ldr	r1, [r5, #0]
 800acd6:	291d      	cmp	r1, #29
 800acd8:	d82b      	bhi.n	800ad32 <__sflush_r+0xb2>
 800acda:	4a2a      	ldr	r2, [pc, #168]	@ (800ad84 <__sflush_r+0x104>)
 800acdc:	410a      	asrs	r2, r1
 800acde:	07d6      	lsls	r6, r2, #31
 800ace0:	d427      	bmi.n	800ad32 <__sflush_r+0xb2>
 800ace2:	2200      	movs	r2, #0
 800ace4:	6062      	str	r2, [r4, #4]
 800ace6:	04d9      	lsls	r1, r3, #19
 800ace8:	6922      	ldr	r2, [r4, #16]
 800acea:	6022      	str	r2, [r4, #0]
 800acec:	d504      	bpl.n	800acf8 <__sflush_r+0x78>
 800acee:	1c42      	adds	r2, r0, #1
 800acf0:	d101      	bne.n	800acf6 <__sflush_r+0x76>
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	b903      	cbnz	r3, 800acf8 <__sflush_r+0x78>
 800acf6:	6560      	str	r0, [r4, #84]	@ 0x54
 800acf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acfa:	602f      	str	r7, [r5, #0]
 800acfc:	b1b9      	cbz	r1, 800ad2e <__sflush_r+0xae>
 800acfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad02:	4299      	cmp	r1, r3
 800ad04:	d002      	beq.n	800ad0c <__sflush_r+0x8c>
 800ad06:	4628      	mov	r0, r5
 800ad08:	f7fe fa80 	bl	800920c <_free_r>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad10:	e00d      	b.n	800ad2e <__sflush_r+0xae>
 800ad12:	2301      	movs	r3, #1
 800ad14:	4628      	mov	r0, r5
 800ad16:	47b0      	blx	r6
 800ad18:	4602      	mov	r2, r0
 800ad1a:	1c50      	adds	r0, r2, #1
 800ad1c:	d1c9      	bne.n	800acb2 <__sflush_r+0x32>
 800ad1e:	682b      	ldr	r3, [r5, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0c6      	beq.n	800acb2 <__sflush_r+0x32>
 800ad24:	2b1d      	cmp	r3, #29
 800ad26:	d001      	beq.n	800ad2c <__sflush_r+0xac>
 800ad28:	2b16      	cmp	r3, #22
 800ad2a:	d11e      	bne.n	800ad6a <__sflush_r+0xea>
 800ad2c:	602f      	str	r7, [r5, #0]
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e022      	b.n	800ad78 <__sflush_r+0xf8>
 800ad32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad36:	b21b      	sxth	r3, r3
 800ad38:	e01b      	b.n	800ad72 <__sflush_r+0xf2>
 800ad3a:	690f      	ldr	r7, [r1, #16]
 800ad3c:	2f00      	cmp	r7, #0
 800ad3e:	d0f6      	beq.n	800ad2e <__sflush_r+0xae>
 800ad40:	0793      	lsls	r3, r2, #30
 800ad42:	680e      	ldr	r6, [r1, #0]
 800ad44:	bf08      	it	eq
 800ad46:	694b      	ldreq	r3, [r1, #20]
 800ad48:	600f      	str	r7, [r1, #0]
 800ad4a:	bf18      	it	ne
 800ad4c:	2300      	movne	r3, #0
 800ad4e:	eba6 0807 	sub.w	r8, r6, r7
 800ad52:	608b      	str	r3, [r1, #8]
 800ad54:	f1b8 0f00 	cmp.w	r8, #0
 800ad58:	dde9      	ble.n	800ad2e <__sflush_r+0xae>
 800ad5a:	6a21      	ldr	r1, [r4, #32]
 800ad5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad5e:	4643      	mov	r3, r8
 800ad60:	463a      	mov	r2, r7
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b0      	blx	r6
 800ad66:	2800      	cmp	r0, #0
 800ad68:	dc08      	bgt.n	800ad7c <__sflush_r+0xfc>
 800ad6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad72:	81a3      	strh	r3, [r4, #12]
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	4407      	add	r7, r0
 800ad7e:	eba8 0800 	sub.w	r8, r8, r0
 800ad82:	e7e7      	b.n	800ad54 <__sflush_r+0xd4>
 800ad84:	dfbffffe 	.word	0xdfbffffe

0800ad88 <_fflush_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	690b      	ldr	r3, [r1, #16]
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	b913      	cbnz	r3, 800ad98 <_fflush_r+0x10>
 800ad92:	2500      	movs	r5, #0
 800ad94:	4628      	mov	r0, r5
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	b118      	cbz	r0, 800ada2 <_fflush_r+0x1a>
 800ad9a:	6a03      	ldr	r3, [r0, #32]
 800ad9c:	b90b      	cbnz	r3, 800ada2 <_fflush_r+0x1a>
 800ad9e:	f7fd fb03 	bl	80083a8 <__sinit>
 800ada2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0f3      	beq.n	800ad92 <_fflush_r+0xa>
 800adaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800adac:	07d0      	lsls	r0, r2, #31
 800adae:	d404      	bmi.n	800adba <_fflush_r+0x32>
 800adb0:	0599      	lsls	r1, r3, #22
 800adb2:	d402      	bmi.n	800adba <_fflush_r+0x32>
 800adb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adb6:	f7fd fc42 	bl	800863e <__retarget_lock_acquire_recursive>
 800adba:	4628      	mov	r0, r5
 800adbc:	4621      	mov	r1, r4
 800adbe:	f7ff ff5f 	bl	800ac80 <__sflush_r>
 800adc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adc4:	07da      	lsls	r2, r3, #31
 800adc6:	4605      	mov	r5, r0
 800adc8:	d4e4      	bmi.n	800ad94 <_fflush_r+0xc>
 800adca:	89a3      	ldrh	r3, [r4, #12]
 800adcc:	059b      	lsls	r3, r3, #22
 800adce:	d4e1      	bmi.n	800ad94 <_fflush_r+0xc>
 800add0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800add2:	f7fd fc35 	bl	8008640 <__retarget_lock_release_recursive>
 800add6:	e7dd      	b.n	800ad94 <_fflush_r+0xc>

0800add8 <memmove>:
 800add8:	4288      	cmp	r0, r1
 800adda:	b510      	push	{r4, lr}
 800addc:	eb01 0402 	add.w	r4, r1, r2
 800ade0:	d902      	bls.n	800ade8 <memmove+0x10>
 800ade2:	4284      	cmp	r4, r0
 800ade4:	4623      	mov	r3, r4
 800ade6:	d807      	bhi.n	800adf8 <memmove+0x20>
 800ade8:	1e43      	subs	r3, r0, #1
 800adea:	42a1      	cmp	r1, r4
 800adec:	d008      	beq.n	800ae00 <memmove+0x28>
 800adee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adf6:	e7f8      	b.n	800adea <memmove+0x12>
 800adf8:	4402      	add	r2, r0
 800adfa:	4601      	mov	r1, r0
 800adfc:	428a      	cmp	r2, r1
 800adfe:	d100      	bne.n	800ae02 <memmove+0x2a>
 800ae00:	bd10      	pop	{r4, pc}
 800ae02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae0a:	e7f7      	b.n	800adfc <memmove+0x24>

0800ae0c <strncmp>:
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	b16a      	cbz	r2, 800ae2c <strncmp+0x20>
 800ae10:	3901      	subs	r1, #1
 800ae12:	1884      	adds	r4, r0, r2
 800ae14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d103      	bne.n	800ae28 <strncmp+0x1c>
 800ae20:	42a0      	cmp	r0, r4
 800ae22:	d001      	beq.n	800ae28 <strncmp+0x1c>
 800ae24:	2a00      	cmp	r2, #0
 800ae26:	d1f5      	bne.n	800ae14 <strncmp+0x8>
 800ae28:	1ad0      	subs	r0, r2, r3
 800ae2a:	bd10      	pop	{r4, pc}
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	e7fc      	b.n	800ae2a <strncmp+0x1e>

0800ae30 <_sbrk_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	4d06      	ldr	r5, [pc, #24]	@ (800ae4c <_sbrk_r+0x1c>)
 800ae34:	2300      	movs	r3, #0
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	f7f6 fc58 	bl	80016f0 <_sbrk>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d102      	bne.n	800ae4a <_sbrk_r+0x1a>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	b103      	cbz	r3, 800ae4a <_sbrk_r+0x1a>
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	240004d0 	.word	0x240004d0

0800ae50 <memcpy>:
 800ae50:	440a      	add	r2, r1
 800ae52:	4291      	cmp	r1, r2
 800ae54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae58:	d100      	bne.n	800ae5c <memcpy+0xc>
 800ae5a:	4770      	bx	lr
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae66:	4291      	cmp	r1, r2
 800ae68:	d1f9      	bne.n	800ae5e <memcpy+0xe>
 800ae6a:	bd10      	pop	{r4, pc}
 800ae6c:	0000      	movs	r0, r0
	...

0800ae70 <nan>:
 800ae70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae78 <nan+0x8>
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	00000000 	.word	0x00000000
 800ae7c:	7ff80000 	.word	0x7ff80000

0800ae80 <__assert_func>:
 800ae80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae82:	4614      	mov	r4, r2
 800ae84:	461a      	mov	r2, r3
 800ae86:	4b09      	ldr	r3, [pc, #36]	@ (800aeac <__assert_func+0x2c>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	68d8      	ldr	r0, [r3, #12]
 800ae8e:	b954      	cbnz	r4, 800aea6 <__assert_func+0x26>
 800ae90:	4b07      	ldr	r3, [pc, #28]	@ (800aeb0 <__assert_func+0x30>)
 800ae92:	461c      	mov	r4, r3
 800ae94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae98:	9100      	str	r1, [sp, #0]
 800ae9a:	462b      	mov	r3, r5
 800ae9c:	4905      	ldr	r1, [pc, #20]	@ (800aeb4 <__assert_func+0x34>)
 800ae9e:	f000 fba7 	bl	800b5f0 <fiprintf>
 800aea2:	f000 fbb7 	bl	800b614 <abort>
 800aea6:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <__assert_func+0x38>)
 800aea8:	e7f4      	b.n	800ae94 <__assert_func+0x14>
 800aeaa:	bf00      	nop
 800aeac:	2400001c 	.word	0x2400001c
 800aeb0:	0800c1e5 	.word	0x0800c1e5
 800aeb4:	0800c1b7 	.word	0x0800c1b7
 800aeb8:	0800c1aa 	.word	0x0800c1aa

0800aebc <_calloc_r>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	fba1 5402 	umull	r5, r4, r1, r2
 800aec2:	b93c      	cbnz	r4, 800aed4 <_calloc_r+0x18>
 800aec4:	4629      	mov	r1, r5
 800aec6:	f7fe fa15 	bl	80092f4 <_malloc_r>
 800aeca:	4606      	mov	r6, r0
 800aecc:	b928      	cbnz	r0, 800aeda <_calloc_r+0x1e>
 800aece:	2600      	movs	r6, #0
 800aed0:	4630      	mov	r0, r6
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	220c      	movs	r2, #12
 800aed6:	6002      	str	r2, [r0, #0]
 800aed8:	e7f9      	b.n	800aece <_calloc_r+0x12>
 800aeda:	462a      	mov	r2, r5
 800aedc:	4621      	mov	r1, r4
 800aede:	f7fd fb30 	bl	8008542 <memset>
 800aee2:	e7f5      	b.n	800aed0 <_calloc_r+0x14>

0800aee4 <rshift>:
 800aee4:	6903      	ldr	r3, [r0, #16]
 800aee6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aeea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aeee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aef2:	f100 0414 	add.w	r4, r0, #20
 800aef6:	dd45      	ble.n	800af84 <rshift+0xa0>
 800aef8:	f011 011f 	ands.w	r1, r1, #31
 800aefc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af04:	d10c      	bne.n	800af20 <rshift+0x3c>
 800af06:	f100 0710 	add.w	r7, r0, #16
 800af0a:	4629      	mov	r1, r5
 800af0c:	42b1      	cmp	r1, r6
 800af0e:	d334      	bcc.n	800af7a <rshift+0x96>
 800af10:	1a9b      	subs	r3, r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	1eea      	subs	r2, r5, #3
 800af16:	4296      	cmp	r6, r2
 800af18:	bf38      	it	cc
 800af1a:	2300      	movcc	r3, #0
 800af1c:	4423      	add	r3, r4
 800af1e:	e015      	b.n	800af4c <rshift+0x68>
 800af20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af24:	f1c1 0820 	rsb	r8, r1, #32
 800af28:	40cf      	lsrs	r7, r1
 800af2a:	f105 0e04 	add.w	lr, r5, #4
 800af2e:	46a1      	mov	r9, r4
 800af30:	4576      	cmp	r6, lr
 800af32:	46f4      	mov	ip, lr
 800af34:	d815      	bhi.n	800af62 <rshift+0x7e>
 800af36:	1a9a      	subs	r2, r3, r2
 800af38:	0092      	lsls	r2, r2, #2
 800af3a:	3a04      	subs	r2, #4
 800af3c:	3501      	adds	r5, #1
 800af3e:	42ae      	cmp	r6, r5
 800af40:	bf38      	it	cc
 800af42:	2200      	movcc	r2, #0
 800af44:	18a3      	adds	r3, r4, r2
 800af46:	50a7      	str	r7, [r4, r2]
 800af48:	b107      	cbz	r7, 800af4c <rshift+0x68>
 800af4a:	3304      	adds	r3, #4
 800af4c:	1b1a      	subs	r2, r3, r4
 800af4e:	42a3      	cmp	r3, r4
 800af50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af54:	bf08      	it	eq
 800af56:	2300      	moveq	r3, #0
 800af58:	6102      	str	r2, [r0, #16]
 800af5a:	bf08      	it	eq
 800af5c:	6143      	streq	r3, [r0, #20]
 800af5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af62:	f8dc c000 	ldr.w	ip, [ip]
 800af66:	fa0c fc08 	lsl.w	ip, ip, r8
 800af6a:	ea4c 0707 	orr.w	r7, ip, r7
 800af6e:	f849 7b04 	str.w	r7, [r9], #4
 800af72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af76:	40cf      	lsrs	r7, r1
 800af78:	e7da      	b.n	800af30 <rshift+0x4c>
 800af7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800af7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800af82:	e7c3      	b.n	800af0c <rshift+0x28>
 800af84:	4623      	mov	r3, r4
 800af86:	e7e1      	b.n	800af4c <rshift+0x68>

0800af88 <__hexdig_fun>:
 800af88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af8c:	2b09      	cmp	r3, #9
 800af8e:	d802      	bhi.n	800af96 <__hexdig_fun+0xe>
 800af90:	3820      	subs	r0, #32
 800af92:	b2c0      	uxtb	r0, r0
 800af94:	4770      	bx	lr
 800af96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af9a:	2b05      	cmp	r3, #5
 800af9c:	d801      	bhi.n	800afa2 <__hexdig_fun+0x1a>
 800af9e:	3847      	subs	r0, #71	@ 0x47
 800afa0:	e7f7      	b.n	800af92 <__hexdig_fun+0xa>
 800afa2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800afa6:	2b05      	cmp	r3, #5
 800afa8:	d801      	bhi.n	800afae <__hexdig_fun+0x26>
 800afaa:	3827      	subs	r0, #39	@ 0x27
 800afac:	e7f1      	b.n	800af92 <__hexdig_fun+0xa>
 800afae:	2000      	movs	r0, #0
 800afb0:	4770      	bx	lr
	...

0800afb4 <__gethex>:
 800afb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	b085      	sub	sp, #20
 800afba:	468a      	mov	sl, r1
 800afbc:	9302      	str	r3, [sp, #8]
 800afbe:	680b      	ldr	r3, [r1, #0]
 800afc0:	9001      	str	r0, [sp, #4]
 800afc2:	4690      	mov	r8, r2
 800afc4:	1c9c      	adds	r4, r3, #2
 800afc6:	46a1      	mov	r9, r4
 800afc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800afcc:	2830      	cmp	r0, #48	@ 0x30
 800afce:	d0fa      	beq.n	800afc6 <__gethex+0x12>
 800afd0:	eba9 0303 	sub.w	r3, r9, r3
 800afd4:	f1a3 0b02 	sub.w	fp, r3, #2
 800afd8:	f7ff ffd6 	bl	800af88 <__hexdig_fun>
 800afdc:	4605      	mov	r5, r0
 800afde:	2800      	cmp	r0, #0
 800afe0:	d168      	bne.n	800b0b4 <__gethex+0x100>
 800afe2:	49a0      	ldr	r1, [pc, #640]	@ (800b264 <__gethex+0x2b0>)
 800afe4:	2201      	movs	r2, #1
 800afe6:	4648      	mov	r0, r9
 800afe8:	f7ff ff10 	bl	800ae0c <strncmp>
 800afec:	4607      	mov	r7, r0
 800afee:	2800      	cmp	r0, #0
 800aff0:	d167      	bne.n	800b0c2 <__gethex+0x10e>
 800aff2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aff6:	4626      	mov	r6, r4
 800aff8:	f7ff ffc6 	bl	800af88 <__hexdig_fun>
 800affc:	2800      	cmp	r0, #0
 800affe:	d062      	beq.n	800b0c6 <__gethex+0x112>
 800b000:	4623      	mov	r3, r4
 800b002:	7818      	ldrb	r0, [r3, #0]
 800b004:	2830      	cmp	r0, #48	@ 0x30
 800b006:	4699      	mov	r9, r3
 800b008:	f103 0301 	add.w	r3, r3, #1
 800b00c:	d0f9      	beq.n	800b002 <__gethex+0x4e>
 800b00e:	f7ff ffbb 	bl	800af88 <__hexdig_fun>
 800b012:	fab0 f580 	clz	r5, r0
 800b016:	096d      	lsrs	r5, r5, #5
 800b018:	f04f 0b01 	mov.w	fp, #1
 800b01c:	464a      	mov	r2, r9
 800b01e:	4616      	mov	r6, r2
 800b020:	3201      	adds	r2, #1
 800b022:	7830      	ldrb	r0, [r6, #0]
 800b024:	f7ff ffb0 	bl	800af88 <__hexdig_fun>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d1f8      	bne.n	800b01e <__gethex+0x6a>
 800b02c:	498d      	ldr	r1, [pc, #564]	@ (800b264 <__gethex+0x2b0>)
 800b02e:	2201      	movs	r2, #1
 800b030:	4630      	mov	r0, r6
 800b032:	f7ff feeb 	bl	800ae0c <strncmp>
 800b036:	2800      	cmp	r0, #0
 800b038:	d13f      	bne.n	800b0ba <__gethex+0x106>
 800b03a:	b944      	cbnz	r4, 800b04e <__gethex+0x9a>
 800b03c:	1c74      	adds	r4, r6, #1
 800b03e:	4622      	mov	r2, r4
 800b040:	4616      	mov	r6, r2
 800b042:	3201      	adds	r2, #1
 800b044:	7830      	ldrb	r0, [r6, #0]
 800b046:	f7ff ff9f 	bl	800af88 <__hexdig_fun>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d1f8      	bne.n	800b040 <__gethex+0x8c>
 800b04e:	1ba4      	subs	r4, r4, r6
 800b050:	00a7      	lsls	r7, r4, #2
 800b052:	7833      	ldrb	r3, [r6, #0]
 800b054:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b058:	2b50      	cmp	r3, #80	@ 0x50
 800b05a:	d13e      	bne.n	800b0da <__gethex+0x126>
 800b05c:	7873      	ldrb	r3, [r6, #1]
 800b05e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b060:	d033      	beq.n	800b0ca <__gethex+0x116>
 800b062:	2b2d      	cmp	r3, #45	@ 0x2d
 800b064:	d034      	beq.n	800b0d0 <__gethex+0x11c>
 800b066:	1c71      	adds	r1, r6, #1
 800b068:	2400      	movs	r4, #0
 800b06a:	7808      	ldrb	r0, [r1, #0]
 800b06c:	f7ff ff8c 	bl	800af88 <__hexdig_fun>
 800b070:	1e43      	subs	r3, r0, #1
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2b18      	cmp	r3, #24
 800b076:	d830      	bhi.n	800b0da <__gethex+0x126>
 800b078:	f1a0 0210 	sub.w	r2, r0, #16
 800b07c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b080:	f7ff ff82 	bl	800af88 <__hexdig_fun>
 800b084:	f100 3cff 	add.w	ip, r0, #4294967295
 800b088:	fa5f fc8c 	uxtb.w	ip, ip
 800b08c:	f1bc 0f18 	cmp.w	ip, #24
 800b090:	f04f 030a 	mov.w	r3, #10
 800b094:	d91e      	bls.n	800b0d4 <__gethex+0x120>
 800b096:	b104      	cbz	r4, 800b09a <__gethex+0xe6>
 800b098:	4252      	negs	r2, r2
 800b09a:	4417      	add	r7, r2
 800b09c:	f8ca 1000 	str.w	r1, [sl]
 800b0a0:	b1ed      	cbz	r5, 800b0de <__gethex+0x12a>
 800b0a2:	f1bb 0f00 	cmp.w	fp, #0
 800b0a6:	bf0c      	ite	eq
 800b0a8:	2506      	moveq	r5, #6
 800b0aa:	2500      	movne	r5, #0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	b005      	add	sp, #20
 800b0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b4:	2500      	movs	r5, #0
 800b0b6:	462c      	mov	r4, r5
 800b0b8:	e7b0      	b.n	800b01c <__gethex+0x68>
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	d1c7      	bne.n	800b04e <__gethex+0x9a>
 800b0be:	4627      	mov	r7, r4
 800b0c0:	e7c7      	b.n	800b052 <__gethex+0x9e>
 800b0c2:	464e      	mov	r6, r9
 800b0c4:	462f      	mov	r7, r5
 800b0c6:	2501      	movs	r5, #1
 800b0c8:	e7c3      	b.n	800b052 <__gethex+0x9e>
 800b0ca:	2400      	movs	r4, #0
 800b0cc:	1cb1      	adds	r1, r6, #2
 800b0ce:	e7cc      	b.n	800b06a <__gethex+0xb6>
 800b0d0:	2401      	movs	r4, #1
 800b0d2:	e7fb      	b.n	800b0cc <__gethex+0x118>
 800b0d4:	fb03 0002 	mla	r0, r3, r2, r0
 800b0d8:	e7ce      	b.n	800b078 <__gethex+0xc4>
 800b0da:	4631      	mov	r1, r6
 800b0dc:	e7de      	b.n	800b09c <__gethex+0xe8>
 800b0de:	eba6 0309 	sub.w	r3, r6, r9
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	2b07      	cmp	r3, #7
 800b0e8:	dc0a      	bgt.n	800b100 <__gethex+0x14c>
 800b0ea:	9801      	ldr	r0, [sp, #4]
 800b0ec:	f7fe f98e 	bl	800940c <_Balloc>
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	b940      	cbnz	r0, 800b106 <__gethex+0x152>
 800b0f4:	4b5c      	ldr	r3, [pc, #368]	@ (800b268 <__gethex+0x2b4>)
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	21e4      	movs	r1, #228	@ 0xe4
 800b0fa:	485c      	ldr	r0, [pc, #368]	@ (800b26c <__gethex+0x2b8>)
 800b0fc:	f7ff fec0 	bl	800ae80 <__assert_func>
 800b100:	3101      	adds	r1, #1
 800b102:	105b      	asrs	r3, r3, #1
 800b104:	e7ef      	b.n	800b0e6 <__gethex+0x132>
 800b106:	f100 0a14 	add.w	sl, r0, #20
 800b10a:	2300      	movs	r3, #0
 800b10c:	4655      	mov	r5, sl
 800b10e:	469b      	mov	fp, r3
 800b110:	45b1      	cmp	r9, r6
 800b112:	d337      	bcc.n	800b184 <__gethex+0x1d0>
 800b114:	f845 bb04 	str.w	fp, [r5], #4
 800b118:	eba5 050a 	sub.w	r5, r5, sl
 800b11c:	10ad      	asrs	r5, r5, #2
 800b11e:	6125      	str	r5, [r4, #16]
 800b120:	4658      	mov	r0, fp
 800b122:	f7fe fa65 	bl	80095f0 <__hi0bits>
 800b126:	016d      	lsls	r5, r5, #5
 800b128:	f8d8 6000 	ldr.w	r6, [r8]
 800b12c:	1a2d      	subs	r5, r5, r0
 800b12e:	42b5      	cmp	r5, r6
 800b130:	dd54      	ble.n	800b1dc <__gethex+0x228>
 800b132:	1bad      	subs	r5, r5, r6
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	f7fe fdf6 	bl	8009d28 <__any_on>
 800b13c:	4681      	mov	r9, r0
 800b13e:	b178      	cbz	r0, 800b160 <__gethex+0x1ac>
 800b140:	1e6b      	subs	r3, r5, #1
 800b142:	1159      	asrs	r1, r3, #5
 800b144:	f003 021f 	and.w	r2, r3, #31
 800b148:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b14c:	f04f 0901 	mov.w	r9, #1
 800b150:	fa09 f202 	lsl.w	r2, r9, r2
 800b154:	420a      	tst	r2, r1
 800b156:	d003      	beq.n	800b160 <__gethex+0x1ac>
 800b158:	454b      	cmp	r3, r9
 800b15a:	dc36      	bgt.n	800b1ca <__gethex+0x216>
 800b15c:	f04f 0902 	mov.w	r9, #2
 800b160:	4629      	mov	r1, r5
 800b162:	4620      	mov	r0, r4
 800b164:	f7ff febe 	bl	800aee4 <rshift>
 800b168:	442f      	add	r7, r5
 800b16a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b16e:	42bb      	cmp	r3, r7
 800b170:	da42      	bge.n	800b1f8 <__gethex+0x244>
 800b172:	9801      	ldr	r0, [sp, #4]
 800b174:	4621      	mov	r1, r4
 800b176:	f7fe f989 	bl	800948c <_Bfree>
 800b17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b17c:	2300      	movs	r3, #0
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	25a3      	movs	r5, #163	@ 0xa3
 800b182:	e793      	b.n	800b0ac <__gethex+0xf8>
 800b184:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b188:	2a2e      	cmp	r2, #46	@ 0x2e
 800b18a:	d012      	beq.n	800b1b2 <__gethex+0x1fe>
 800b18c:	2b20      	cmp	r3, #32
 800b18e:	d104      	bne.n	800b19a <__gethex+0x1e6>
 800b190:	f845 bb04 	str.w	fp, [r5], #4
 800b194:	f04f 0b00 	mov.w	fp, #0
 800b198:	465b      	mov	r3, fp
 800b19a:	7830      	ldrb	r0, [r6, #0]
 800b19c:	9303      	str	r3, [sp, #12]
 800b19e:	f7ff fef3 	bl	800af88 <__hexdig_fun>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	f000 000f 	and.w	r0, r0, #15
 800b1a8:	4098      	lsls	r0, r3
 800b1aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	e7ae      	b.n	800b110 <__gethex+0x15c>
 800b1b2:	45b1      	cmp	r9, r6
 800b1b4:	d8ea      	bhi.n	800b18c <__gethex+0x1d8>
 800b1b6:	492b      	ldr	r1, [pc, #172]	@ (800b264 <__gethex+0x2b0>)
 800b1b8:	9303      	str	r3, [sp, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7ff fe25 	bl	800ae0c <strncmp>
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d1e1      	bne.n	800b18c <__gethex+0x1d8>
 800b1c8:	e7a2      	b.n	800b110 <__gethex+0x15c>
 800b1ca:	1ea9      	subs	r1, r5, #2
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f7fe fdab 	bl	8009d28 <__any_on>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d0c2      	beq.n	800b15c <__gethex+0x1a8>
 800b1d6:	f04f 0903 	mov.w	r9, #3
 800b1da:	e7c1      	b.n	800b160 <__gethex+0x1ac>
 800b1dc:	da09      	bge.n	800b1f2 <__gethex+0x23e>
 800b1de:	1b75      	subs	r5, r6, r5
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	9801      	ldr	r0, [sp, #4]
 800b1e4:	462a      	mov	r2, r5
 800b1e6:	f7fe fb69 	bl	80098bc <__lshift>
 800b1ea:	1b7f      	subs	r7, r7, r5
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	f100 0a14 	add.w	sl, r0, #20
 800b1f2:	f04f 0900 	mov.w	r9, #0
 800b1f6:	e7b8      	b.n	800b16a <__gethex+0x1b6>
 800b1f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1fc:	42bd      	cmp	r5, r7
 800b1fe:	dd6f      	ble.n	800b2e0 <__gethex+0x32c>
 800b200:	1bed      	subs	r5, r5, r7
 800b202:	42ae      	cmp	r6, r5
 800b204:	dc34      	bgt.n	800b270 <__gethex+0x2bc>
 800b206:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d022      	beq.n	800b254 <__gethex+0x2a0>
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d024      	beq.n	800b25c <__gethex+0x2a8>
 800b212:	2b01      	cmp	r3, #1
 800b214:	d115      	bne.n	800b242 <__gethex+0x28e>
 800b216:	42ae      	cmp	r6, r5
 800b218:	d113      	bne.n	800b242 <__gethex+0x28e>
 800b21a:	2e01      	cmp	r6, #1
 800b21c:	d10b      	bne.n	800b236 <__gethex+0x282>
 800b21e:	9a02      	ldr	r2, [sp, #8]
 800b220:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	2301      	movs	r3, #1
 800b228:	6123      	str	r3, [r4, #16]
 800b22a:	f8ca 3000 	str.w	r3, [sl]
 800b22e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b230:	2562      	movs	r5, #98	@ 0x62
 800b232:	601c      	str	r4, [r3, #0]
 800b234:	e73a      	b.n	800b0ac <__gethex+0xf8>
 800b236:	1e71      	subs	r1, r6, #1
 800b238:	4620      	mov	r0, r4
 800b23a:	f7fe fd75 	bl	8009d28 <__any_on>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d1ed      	bne.n	800b21e <__gethex+0x26a>
 800b242:	9801      	ldr	r0, [sp, #4]
 800b244:	4621      	mov	r1, r4
 800b246:	f7fe f921 	bl	800948c <_Bfree>
 800b24a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b24c:	2300      	movs	r3, #0
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	2550      	movs	r5, #80	@ 0x50
 800b252:	e72b      	b.n	800b0ac <__gethex+0xf8>
 800b254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1f3      	bne.n	800b242 <__gethex+0x28e>
 800b25a:	e7e0      	b.n	800b21e <__gethex+0x26a>
 800b25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1dd      	bne.n	800b21e <__gethex+0x26a>
 800b262:	e7ee      	b.n	800b242 <__gethex+0x28e>
 800b264:	0800c038 	.word	0x0800c038
 800b268:	0800bed1 	.word	0x0800bed1
 800b26c:	0800c1e6 	.word	0x0800c1e6
 800b270:	1e6f      	subs	r7, r5, #1
 800b272:	f1b9 0f00 	cmp.w	r9, #0
 800b276:	d130      	bne.n	800b2da <__gethex+0x326>
 800b278:	b127      	cbz	r7, 800b284 <__gethex+0x2d0>
 800b27a:	4639      	mov	r1, r7
 800b27c:	4620      	mov	r0, r4
 800b27e:	f7fe fd53 	bl	8009d28 <__any_on>
 800b282:	4681      	mov	r9, r0
 800b284:	117a      	asrs	r2, r7, #5
 800b286:	2301      	movs	r3, #1
 800b288:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b28c:	f007 071f 	and.w	r7, r7, #31
 800b290:	40bb      	lsls	r3, r7
 800b292:	4213      	tst	r3, r2
 800b294:	4629      	mov	r1, r5
 800b296:	4620      	mov	r0, r4
 800b298:	bf18      	it	ne
 800b29a:	f049 0902 	orrne.w	r9, r9, #2
 800b29e:	f7ff fe21 	bl	800aee4 <rshift>
 800b2a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b2a6:	1b76      	subs	r6, r6, r5
 800b2a8:	2502      	movs	r5, #2
 800b2aa:	f1b9 0f00 	cmp.w	r9, #0
 800b2ae:	d047      	beq.n	800b340 <__gethex+0x38c>
 800b2b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d015      	beq.n	800b2e4 <__gethex+0x330>
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d017      	beq.n	800b2ec <__gethex+0x338>
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d109      	bne.n	800b2d4 <__gethex+0x320>
 800b2c0:	f019 0f02 	tst.w	r9, #2
 800b2c4:	d006      	beq.n	800b2d4 <__gethex+0x320>
 800b2c6:	f8da 3000 	ldr.w	r3, [sl]
 800b2ca:	ea49 0903 	orr.w	r9, r9, r3
 800b2ce:	f019 0f01 	tst.w	r9, #1
 800b2d2:	d10e      	bne.n	800b2f2 <__gethex+0x33e>
 800b2d4:	f045 0510 	orr.w	r5, r5, #16
 800b2d8:	e032      	b.n	800b340 <__gethex+0x38c>
 800b2da:	f04f 0901 	mov.w	r9, #1
 800b2de:	e7d1      	b.n	800b284 <__gethex+0x2d0>
 800b2e0:	2501      	movs	r5, #1
 800b2e2:	e7e2      	b.n	800b2aa <__gethex+0x2f6>
 800b2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2e6:	f1c3 0301 	rsb	r3, r3, #1
 800b2ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d0f0      	beq.n	800b2d4 <__gethex+0x320>
 800b2f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2f6:	f104 0314 	add.w	r3, r4, #20
 800b2fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b302:	f04f 0c00 	mov.w	ip, #0
 800b306:	4618      	mov	r0, r3
 800b308:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b310:	d01b      	beq.n	800b34a <__gethex+0x396>
 800b312:	3201      	adds	r2, #1
 800b314:	6002      	str	r2, [r0, #0]
 800b316:	2d02      	cmp	r5, #2
 800b318:	f104 0314 	add.w	r3, r4, #20
 800b31c:	d13c      	bne.n	800b398 <__gethex+0x3e4>
 800b31e:	f8d8 2000 	ldr.w	r2, [r8]
 800b322:	3a01      	subs	r2, #1
 800b324:	42b2      	cmp	r2, r6
 800b326:	d109      	bne.n	800b33c <__gethex+0x388>
 800b328:	1171      	asrs	r1, r6, #5
 800b32a:	2201      	movs	r2, #1
 800b32c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b330:	f006 061f 	and.w	r6, r6, #31
 800b334:	fa02 f606 	lsl.w	r6, r2, r6
 800b338:	421e      	tst	r6, r3
 800b33a:	d13a      	bne.n	800b3b2 <__gethex+0x3fe>
 800b33c:	f045 0520 	orr.w	r5, r5, #32
 800b340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b342:	601c      	str	r4, [r3, #0]
 800b344:	9b02      	ldr	r3, [sp, #8]
 800b346:	601f      	str	r7, [r3, #0]
 800b348:	e6b0      	b.n	800b0ac <__gethex+0xf8>
 800b34a:	4299      	cmp	r1, r3
 800b34c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b350:	d8d9      	bhi.n	800b306 <__gethex+0x352>
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	459b      	cmp	fp, r3
 800b356:	db17      	blt.n	800b388 <__gethex+0x3d4>
 800b358:	6861      	ldr	r1, [r4, #4]
 800b35a:	9801      	ldr	r0, [sp, #4]
 800b35c:	3101      	adds	r1, #1
 800b35e:	f7fe f855 	bl	800940c <_Balloc>
 800b362:	4681      	mov	r9, r0
 800b364:	b918      	cbnz	r0, 800b36e <__gethex+0x3ba>
 800b366:	4b1a      	ldr	r3, [pc, #104]	@ (800b3d0 <__gethex+0x41c>)
 800b368:	4602      	mov	r2, r0
 800b36a:	2184      	movs	r1, #132	@ 0x84
 800b36c:	e6c5      	b.n	800b0fa <__gethex+0x146>
 800b36e:	6922      	ldr	r2, [r4, #16]
 800b370:	3202      	adds	r2, #2
 800b372:	f104 010c 	add.w	r1, r4, #12
 800b376:	0092      	lsls	r2, r2, #2
 800b378:	300c      	adds	r0, #12
 800b37a:	f7ff fd69 	bl	800ae50 <memcpy>
 800b37e:	4621      	mov	r1, r4
 800b380:	9801      	ldr	r0, [sp, #4]
 800b382:	f7fe f883 	bl	800948c <_Bfree>
 800b386:	464c      	mov	r4, r9
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b390:	6122      	str	r2, [r4, #16]
 800b392:	2201      	movs	r2, #1
 800b394:	615a      	str	r2, [r3, #20]
 800b396:	e7be      	b.n	800b316 <__gethex+0x362>
 800b398:	6922      	ldr	r2, [r4, #16]
 800b39a:	455a      	cmp	r2, fp
 800b39c:	dd0b      	ble.n	800b3b6 <__gethex+0x402>
 800b39e:	2101      	movs	r1, #1
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7ff fd9f 	bl	800aee4 <rshift>
 800b3a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3aa:	3701      	adds	r7, #1
 800b3ac:	42bb      	cmp	r3, r7
 800b3ae:	f6ff aee0 	blt.w	800b172 <__gethex+0x1be>
 800b3b2:	2501      	movs	r5, #1
 800b3b4:	e7c2      	b.n	800b33c <__gethex+0x388>
 800b3b6:	f016 061f 	ands.w	r6, r6, #31
 800b3ba:	d0fa      	beq.n	800b3b2 <__gethex+0x3fe>
 800b3bc:	4453      	add	r3, sl
 800b3be:	f1c6 0620 	rsb	r6, r6, #32
 800b3c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3c6:	f7fe f913 	bl	80095f0 <__hi0bits>
 800b3ca:	42b0      	cmp	r0, r6
 800b3cc:	dbe7      	blt.n	800b39e <__gethex+0x3ea>
 800b3ce:	e7f0      	b.n	800b3b2 <__gethex+0x3fe>
 800b3d0:	0800bed1 	.word	0x0800bed1

0800b3d4 <L_shift>:
 800b3d4:	f1c2 0208 	rsb	r2, r2, #8
 800b3d8:	0092      	lsls	r2, r2, #2
 800b3da:	b570      	push	{r4, r5, r6, lr}
 800b3dc:	f1c2 0620 	rsb	r6, r2, #32
 800b3e0:	6843      	ldr	r3, [r0, #4]
 800b3e2:	6804      	ldr	r4, [r0, #0]
 800b3e4:	fa03 f506 	lsl.w	r5, r3, r6
 800b3e8:	432c      	orrs	r4, r5
 800b3ea:	40d3      	lsrs	r3, r2
 800b3ec:	6004      	str	r4, [r0, #0]
 800b3ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3f2:	4288      	cmp	r0, r1
 800b3f4:	d3f4      	bcc.n	800b3e0 <L_shift+0xc>
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}

0800b3f8 <__match>:
 800b3f8:	b530      	push	{r4, r5, lr}
 800b3fa:	6803      	ldr	r3, [r0, #0]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b402:	b914      	cbnz	r4, 800b40a <__match+0x12>
 800b404:	6003      	str	r3, [r0, #0]
 800b406:	2001      	movs	r0, #1
 800b408:	bd30      	pop	{r4, r5, pc}
 800b40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b412:	2d19      	cmp	r5, #25
 800b414:	bf98      	it	ls
 800b416:	3220      	addls	r2, #32
 800b418:	42a2      	cmp	r2, r4
 800b41a:	d0f0      	beq.n	800b3fe <__match+0x6>
 800b41c:	2000      	movs	r0, #0
 800b41e:	e7f3      	b.n	800b408 <__match+0x10>

0800b420 <__hexnan>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	680b      	ldr	r3, [r1, #0]
 800b426:	6801      	ldr	r1, [r0, #0]
 800b428:	115e      	asrs	r6, r3, #5
 800b42a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b42e:	f013 031f 	ands.w	r3, r3, #31
 800b432:	b087      	sub	sp, #28
 800b434:	bf18      	it	ne
 800b436:	3604      	addne	r6, #4
 800b438:	2500      	movs	r5, #0
 800b43a:	1f37      	subs	r7, r6, #4
 800b43c:	4682      	mov	sl, r0
 800b43e:	4690      	mov	r8, r2
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	f846 5c04 	str.w	r5, [r6, #-4]
 800b446:	46b9      	mov	r9, r7
 800b448:	463c      	mov	r4, r7
 800b44a:	9502      	str	r5, [sp, #8]
 800b44c:	46ab      	mov	fp, r5
 800b44e:	784a      	ldrb	r2, [r1, #1]
 800b450:	1c4b      	adds	r3, r1, #1
 800b452:	9303      	str	r3, [sp, #12]
 800b454:	b342      	cbz	r2, 800b4a8 <__hexnan+0x88>
 800b456:	4610      	mov	r0, r2
 800b458:	9105      	str	r1, [sp, #20]
 800b45a:	9204      	str	r2, [sp, #16]
 800b45c:	f7ff fd94 	bl	800af88 <__hexdig_fun>
 800b460:	2800      	cmp	r0, #0
 800b462:	d151      	bne.n	800b508 <__hexnan+0xe8>
 800b464:	9a04      	ldr	r2, [sp, #16]
 800b466:	9905      	ldr	r1, [sp, #20]
 800b468:	2a20      	cmp	r2, #32
 800b46a:	d818      	bhi.n	800b49e <__hexnan+0x7e>
 800b46c:	9b02      	ldr	r3, [sp, #8]
 800b46e:	459b      	cmp	fp, r3
 800b470:	dd13      	ble.n	800b49a <__hexnan+0x7a>
 800b472:	454c      	cmp	r4, r9
 800b474:	d206      	bcs.n	800b484 <__hexnan+0x64>
 800b476:	2d07      	cmp	r5, #7
 800b478:	dc04      	bgt.n	800b484 <__hexnan+0x64>
 800b47a:	462a      	mov	r2, r5
 800b47c:	4649      	mov	r1, r9
 800b47e:	4620      	mov	r0, r4
 800b480:	f7ff ffa8 	bl	800b3d4 <L_shift>
 800b484:	4544      	cmp	r4, r8
 800b486:	d952      	bls.n	800b52e <__hexnan+0x10e>
 800b488:	2300      	movs	r3, #0
 800b48a:	f1a4 0904 	sub.w	r9, r4, #4
 800b48e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b492:	f8cd b008 	str.w	fp, [sp, #8]
 800b496:	464c      	mov	r4, r9
 800b498:	461d      	mov	r5, r3
 800b49a:	9903      	ldr	r1, [sp, #12]
 800b49c:	e7d7      	b.n	800b44e <__hexnan+0x2e>
 800b49e:	2a29      	cmp	r2, #41	@ 0x29
 800b4a0:	d157      	bne.n	800b552 <__hexnan+0x132>
 800b4a2:	3102      	adds	r1, #2
 800b4a4:	f8ca 1000 	str.w	r1, [sl]
 800b4a8:	f1bb 0f00 	cmp.w	fp, #0
 800b4ac:	d051      	beq.n	800b552 <__hexnan+0x132>
 800b4ae:	454c      	cmp	r4, r9
 800b4b0:	d206      	bcs.n	800b4c0 <__hexnan+0xa0>
 800b4b2:	2d07      	cmp	r5, #7
 800b4b4:	dc04      	bgt.n	800b4c0 <__hexnan+0xa0>
 800b4b6:	462a      	mov	r2, r5
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f7ff ff8a 	bl	800b3d4 <L_shift>
 800b4c0:	4544      	cmp	r4, r8
 800b4c2:	d936      	bls.n	800b532 <__hexnan+0x112>
 800b4c4:	f1a8 0204 	sub.w	r2, r8, #4
 800b4c8:	4623      	mov	r3, r4
 800b4ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4d2:	429f      	cmp	r7, r3
 800b4d4:	d2f9      	bcs.n	800b4ca <__hexnan+0xaa>
 800b4d6:	1b3b      	subs	r3, r7, r4
 800b4d8:	f023 0303 	bic.w	r3, r3, #3
 800b4dc:	3304      	adds	r3, #4
 800b4de:	3401      	adds	r4, #1
 800b4e0:	3e03      	subs	r6, #3
 800b4e2:	42b4      	cmp	r4, r6
 800b4e4:	bf88      	it	hi
 800b4e6:	2304      	movhi	r3, #4
 800b4e8:	4443      	add	r3, r8
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f843 2b04 	str.w	r2, [r3], #4
 800b4f0:	429f      	cmp	r7, r3
 800b4f2:	d2fb      	bcs.n	800b4ec <__hexnan+0xcc>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	b91b      	cbnz	r3, 800b500 <__hexnan+0xe0>
 800b4f8:	4547      	cmp	r7, r8
 800b4fa:	d128      	bne.n	800b54e <__hexnan+0x12e>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	603b      	str	r3, [r7, #0]
 800b500:	2005      	movs	r0, #5
 800b502:	b007      	add	sp, #28
 800b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b508:	3501      	adds	r5, #1
 800b50a:	2d08      	cmp	r5, #8
 800b50c:	f10b 0b01 	add.w	fp, fp, #1
 800b510:	dd06      	ble.n	800b520 <__hexnan+0x100>
 800b512:	4544      	cmp	r4, r8
 800b514:	d9c1      	bls.n	800b49a <__hexnan+0x7a>
 800b516:	2300      	movs	r3, #0
 800b518:	f844 3c04 	str.w	r3, [r4, #-4]
 800b51c:	2501      	movs	r5, #1
 800b51e:	3c04      	subs	r4, #4
 800b520:	6822      	ldr	r2, [r4, #0]
 800b522:	f000 000f 	and.w	r0, r0, #15
 800b526:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b52a:	6020      	str	r0, [r4, #0]
 800b52c:	e7b5      	b.n	800b49a <__hexnan+0x7a>
 800b52e:	2508      	movs	r5, #8
 800b530:	e7b3      	b.n	800b49a <__hexnan+0x7a>
 800b532:	9b01      	ldr	r3, [sp, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d0dd      	beq.n	800b4f4 <__hexnan+0xd4>
 800b538:	f1c3 0320 	rsb	r3, r3, #32
 800b53c:	f04f 32ff 	mov.w	r2, #4294967295
 800b540:	40da      	lsrs	r2, r3
 800b542:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b546:	4013      	ands	r3, r2
 800b548:	f846 3c04 	str.w	r3, [r6, #-4]
 800b54c:	e7d2      	b.n	800b4f4 <__hexnan+0xd4>
 800b54e:	3f04      	subs	r7, #4
 800b550:	e7d0      	b.n	800b4f4 <__hexnan+0xd4>
 800b552:	2004      	movs	r0, #4
 800b554:	e7d5      	b.n	800b502 <__hexnan+0xe2>

0800b556 <__ascii_mbtowc>:
 800b556:	b082      	sub	sp, #8
 800b558:	b901      	cbnz	r1, 800b55c <__ascii_mbtowc+0x6>
 800b55a:	a901      	add	r1, sp, #4
 800b55c:	b142      	cbz	r2, 800b570 <__ascii_mbtowc+0x1a>
 800b55e:	b14b      	cbz	r3, 800b574 <__ascii_mbtowc+0x1e>
 800b560:	7813      	ldrb	r3, [r2, #0]
 800b562:	600b      	str	r3, [r1, #0]
 800b564:	7812      	ldrb	r2, [r2, #0]
 800b566:	1e10      	subs	r0, r2, #0
 800b568:	bf18      	it	ne
 800b56a:	2001      	movne	r0, #1
 800b56c:	b002      	add	sp, #8
 800b56e:	4770      	bx	lr
 800b570:	4610      	mov	r0, r2
 800b572:	e7fb      	b.n	800b56c <__ascii_mbtowc+0x16>
 800b574:	f06f 0001 	mvn.w	r0, #1
 800b578:	e7f8      	b.n	800b56c <__ascii_mbtowc+0x16>

0800b57a <_realloc_r>:
 800b57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57e:	4680      	mov	r8, r0
 800b580:	4615      	mov	r5, r2
 800b582:	460c      	mov	r4, r1
 800b584:	b921      	cbnz	r1, 800b590 <_realloc_r+0x16>
 800b586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b58a:	4611      	mov	r1, r2
 800b58c:	f7fd beb2 	b.w	80092f4 <_malloc_r>
 800b590:	b92a      	cbnz	r2, 800b59e <_realloc_r+0x24>
 800b592:	f7fd fe3b 	bl	800920c <_free_r>
 800b596:	2400      	movs	r4, #0
 800b598:	4620      	mov	r0, r4
 800b59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59e:	f000 f840 	bl	800b622 <_malloc_usable_size_r>
 800b5a2:	4285      	cmp	r5, r0
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	d802      	bhi.n	800b5ae <_realloc_r+0x34>
 800b5a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b5ac:	d8f4      	bhi.n	800b598 <_realloc_r+0x1e>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	f7fd fe9f 	bl	80092f4 <_malloc_r>
 800b5b6:	4607      	mov	r7, r0
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d0ec      	beq.n	800b596 <_realloc_r+0x1c>
 800b5bc:	42b5      	cmp	r5, r6
 800b5be:	462a      	mov	r2, r5
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	bf28      	it	cs
 800b5c4:	4632      	movcs	r2, r6
 800b5c6:	f7ff fc43 	bl	800ae50 <memcpy>
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	f7fd fe1d 	bl	800920c <_free_r>
 800b5d2:	463c      	mov	r4, r7
 800b5d4:	e7e0      	b.n	800b598 <_realloc_r+0x1e>

0800b5d6 <__ascii_wctomb>:
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	b141      	cbz	r1, 800b5ee <__ascii_wctomb+0x18>
 800b5dc:	2aff      	cmp	r2, #255	@ 0xff
 800b5de:	d904      	bls.n	800b5ea <__ascii_wctomb+0x14>
 800b5e0:	228a      	movs	r2, #138	@ 0x8a
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	4770      	bx	lr
 800b5ea:	700a      	strb	r2, [r1, #0]
 800b5ec:	2001      	movs	r0, #1
 800b5ee:	4770      	bx	lr

0800b5f0 <fiprintf>:
 800b5f0:	b40e      	push	{r1, r2, r3}
 800b5f2:	b503      	push	{r0, r1, lr}
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	4805      	ldr	r0, [pc, #20]	@ (800b610 <fiprintf+0x20>)
 800b5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fe:	6800      	ldr	r0, [r0, #0]
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	f000 f83f 	bl	800b684 <_vfiprintf_r>
 800b606:	b002      	add	sp, #8
 800b608:	f85d eb04 	ldr.w	lr, [sp], #4
 800b60c:	b003      	add	sp, #12
 800b60e:	4770      	bx	lr
 800b610:	2400001c 	.word	0x2400001c

0800b614 <abort>:
 800b614:	b508      	push	{r3, lr}
 800b616:	2006      	movs	r0, #6
 800b618:	f000 fa08 	bl	800ba2c <raise>
 800b61c:	2001      	movs	r0, #1
 800b61e:	f7f6 f80b 	bl	8001638 <_exit>

0800b622 <_malloc_usable_size_r>:
 800b622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b626:	1f18      	subs	r0, r3, #4
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bfbc      	itt	lt
 800b62c:	580b      	ldrlt	r3, [r1, r0]
 800b62e:	18c0      	addlt	r0, r0, r3
 800b630:	4770      	bx	lr

0800b632 <__sfputc_r>:
 800b632:	6893      	ldr	r3, [r2, #8]
 800b634:	3b01      	subs	r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	b410      	push	{r4}
 800b63a:	6093      	str	r3, [r2, #8]
 800b63c:	da08      	bge.n	800b650 <__sfputc_r+0x1e>
 800b63e:	6994      	ldr	r4, [r2, #24]
 800b640:	42a3      	cmp	r3, r4
 800b642:	db01      	blt.n	800b648 <__sfputc_r+0x16>
 800b644:	290a      	cmp	r1, #10
 800b646:	d103      	bne.n	800b650 <__sfputc_r+0x1e>
 800b648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b64c:	f000 b932 	b.w	800b8b4 <__swbuf_r>
 800b650:	6813      	ldr	r3, [r2, #0]
 800b652:	1c58      	adds	r0, r3, #1
 800b654:	6010      	str	r0, [r2, #0]
 800b656:	7019      	strb	r1, [r3, #0]
 800b658:	4608      	mov	r0, r1
 800b65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <__sfputs_r>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	4606      	mov	r6, r0
 800b664:	460f      	mov	r7, r1
 800b666:	4614      	mov	r4, r2
 800b668:	18d5      	adds	r5, r2, r3
 800b66a:	42ac      	cmp	r4, r5
 800b66c:	d101      	bne.n	800b672 <__sfputs_r+0x12>
 800b66e:	2000      	movs	r0, #0
 800b670:	e007      	b.n	800b682 <__sfputs_r+0x22>
 800b672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b676:	463a      	mov	r2, r7
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff ffda 	bl	800b632 <__sfputc_r>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	d1f3      	bne.n	800b66a <__sfputs_r+0xa>
 800b682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b684 <_vfiprintf_r>:
 800b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b688:	460d      	mov	r5, r1
 800b68a:	b09d      	sub	sp, #116	@ 0x74
 800b68c:	4614      	mov	r4, r2
 800b68e:	4698      	mov	r8, r3
 800b690:	4606      	mov	r6, r0
 800b692:	b118      	cbz	r0, 800b69c <_vfiprintf_r+0x18>
 800b694:	6a03      	ldr	r3, [r0, #32]
 800b696:	b90b      	cbnz	r3, 800b69c <_vfiprintf_r+0x18>
 800b698:	f7fc fe86 	bl	80083a8 <__sinit>
 800b69c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b69e:	07d9      	lsls	r1, r3, #31
 800b6a0:	d405      	bmi.n	800b6ae <_vfiprintf_r+0x2a>
 800b6a2:	89ab      	ldrh	r3, [r5, #12]
 800b6a4:	059a      	lsls	r2, r3, #22
 800b6a6:	d402      	bmi.n	800b6ae <_vfiprintf_r+0x2a>
 800b6a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6aa:	f7fc ffc8 	bl	800863e <__retarget_lock_acquire_recursive>
 800b6ae:	89ab      	ldrh	r3, [r5, #12]
 800b6b0:	071b      	lsls	r3, r3, #28
 800b6b2:	d501      	bpl.n	800b6b8 <_vfiprintf_r+0x34>
 800b6b4:	692b      	ldr	r3, [r5, #16]
 800b6b6:	b99b      	cbnz	r3, 800b6e0 <_vfiprintf_r+0x5c>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f000 f938 	bl	800b930 <__swsetup_r>
 800b6c0:	b170      	cbz	r0, 800b6e0 <_vfiprintf_r+0x5c>
 800b6c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6c4:	07dc      	lsls	r4, r3, #31
 800b6c6:	d504      	bpl.n	800b6d2 <_vfiprintf_r+0x4e>
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6cc:	b01d      	add	sp, #116	@ 0x74
 800b6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d2:	89ab      	ldrh	r3, [r5, #12]
 800b6d4:	0598      	lsls	r0, r3, #22
 800b6d6:	d4f7      	bmi.n	800b6c8 <_vfiprintf_r+0x44>
 800b6d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6da:	f7fc ffb1 	bl	8008640 <__retarget_lock_release_recursive>
 800b6de:	e7f3      	b.n	800b6c8 <_vfiprintf_r+0x44>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6e4:	2320      	movs	r3, #32
 800b6e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ee:	2330      	movs	r3, #48	@ 0x30
 800b6f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b8a0 <_vfiprintf_r+0x21c>
 800b6f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6f8:	f04f 0901 	mov.w	r9, #1
 800b6fc:	4623      	mov	r3, r4
 800b6fe:	469a      	mov	sl, r3
 800b700:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b704:	b10a      	cbz	r2, 800b70a <_vfiprintf_r+0x86>
 800b706:	2a25      	cmp	r2, #37	@ 0x25
 800b708:	d1f9      	bne.n	800b6fe <_vfiprintf_r+0x7a>
 800b70a:	ebba 0b04 	subs.w	fp, sl, r4
 800b70e:	d00b      	beq.n	800b728 <_vfiprintf_r+0xa4>
 800b710:	465b      	mov	r3, fp
 800b712:	4622      	mov	r2, r4
 800b714:	4629      	mov	r1, r5
 800b716:	4630      	mov	r0, r6
 800b718:	f7ff ffa2 	bl	800b660 <__sfputs_r>
 800b71c:	3001      	adds	r0, #1
 800b71e:	f000 80a7 	beq.w	800b870 <_vfiprintf_r+0x1ec>
 800b722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b724:	445a      	add	r2, fp
 800b726:	9209      	str	r2, [sp, #36]	@ 0x24
 800b728:	f89a 3000 	ldrb.w	r3, [sl]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 809f 	beq.w	800b870 <_vfiprintf_r+0x1ec>
 800b732:	2300      	movs	r3, #0
 800b734:	f04f 32ff 	mov.w	r2, #4294967295
 800b738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b73c:	f10a 0a01 	add.w	sl, sl, #1
 800b740:	9304      	str	r3, [sp, #16]
 800b742:	9307      	str	r3, [sp, #28]
 800b744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b748:	931a      	str	r3, [sp, #104]	@ 0x68
 800b74a:	4654      	mov	r4, sl
 800b74c:	2205      	movs	r2, #5
 800b74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b752:	4853      	ldr	r0, [pc, #332]	@ (800b8a0 <_vfiprintf_r+0x21c>)
 800b754:	f7f4 fdc4 	bl	80002e0 <memchr>
 800b758:	9a04      	ldr	r2, [sp, #16]
 800b75a:	b9d8      	cbnz	r0, 800b794 <_vfiprintf_r+0x110>
 800b75c:	06d1      	lsls	r1, r2, #27
 800b75e:	bf44      	itt	mi
 800b760:	2320      	movmi	r3, #32
 800b762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b766:	0713      	lsls	r3, r2, #28
 800b768:	bf44      	itt	mi
 800b76a:	232b      	movmi	r3, #43	@ 0x2b
 800b76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b770:	f89a 3000 	ldrb.w	r3, [sl]
 800b774:	2b2a      	cmp	r3, #42	@ 0x2a
 800b776:	d015      	beq.n	800b7a4 <_vfiprintf_r+0x120>
 800b778:	9a07      	ldr	r2, [sp, #28]
 800b77a:	4654      	mov	r4, sl
 800b77c:	2000      	movs	r0, #0
 800b77e:	f04f 0c0a 	mov.w	ip, #10
 800b782:	4621      	mov	r1, r4
 800b784:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b788:	3b30      	subs	r3, #48	@ 0x30
 800b78a:	2b09      	cmp	r3, #9
 800b78c:	d94b      	bls.n	800b826 <_vfiprintf_r+0x1a2>
 800b78e:	b1b0      	cbz	r0, 800b7be <_vfiprintf_r+0x13a>
 800b790:	9207      	str	r2, [sp, #28]
 800b792:	e014      	b.n	800b7be <_vfiprintf_r+0x13a>
 800b794:	eba0 0308 	sub.w	r3, r0, r8
 800b798:	fa09 f303 	lsl.w	r3, r9, r3
 800b79c:	4313      	orrs	r3, r2
 800b79e:	9304      	str	r3, [sp, #16]
 800b7a0:	46a2      	mov	sl, r4
 800b7a2:	e7d2      	b.n	800b74a <_vfiprintf_r+0xc6>
 800b7a4:	9b03      	ldr	r3, [sp, #12]
 800b7a6:	1d19      	adds	r1, r3, #4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	9103      	str	r1, [sp, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bfbb      	ittet	lt
 800b7b0:	425b      	neglt	r3, r3
 800b7b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b7b6:	9307      	strge	r3, [sp, #28]
 800b7b8:	9307      	strlt	r3, [sp, #28]
 800b7ba:	bfb8      	it	lt
 800b7bc:	9204      	strlt	r2, [sp, #16]
 800b7be:	7823      	ldrb	r3, [r4, #0]
 800b7c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7c2:	d10a      	bne.n	800b7da <_vfiprintf_r+0x156>
 800b7c4:	7863      	ldrb	r3, [r4, #1]
 800b7c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7c8:	d132      	bne.n	800b830 <_vfiprintf_r+0x1ac>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	1d1a      	adds	r2, r3, #4
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	9203      	str	r2, [sp, #12]
 800b7d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7d6:	3402      	adds	r4, #2
 800b7d8:	9305      	str	r3, [sp, #20]
 800b7da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b8b0 <_vfiprintf_r+0x22c>
 800b7de:	7821      	ldrb	r1, [r4, #0]
 800b7e0:	2203      	movs	r2, #3
 800b7e2:	4650      	mov	r0, sl
 800b7e4:	f7f4 fd7c 	bl	80002e0 <memchr>
 800b7e8:	b138      	cbz	r0, 800b7fa <_vfiprintf_r+0x176>
 800b7ea:	9b04      	ldr	r3, [sp, #16]
 800b7ec:	eba0 000a 	sub.w	r0, r0, sl
 800b7f0:	2240      	movs	r2, #64	@ 0x40
 800b7f2:	4082      	lsls	r2, r0
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	3401      	adds	r4, #1
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fe:	4829      	ldr	r0, [pc, #164]	@ (800b8a4 <_vfiprintf_r+0x220>)
 800b800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b804:	2206      	movs	r2, #6
 800b806:	f7f4 fd6b 	bl	80002e0 <memchr>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d03f      	beq.n	800b88e <_vfiprintf_r+0x20a>
 800b80e:	4b26      	ldr	r3, [pc, #152]	@ (800b8a8 <_vfiprintf_r+0x224>)
 800b810:	bb1b      	cbnz	r3, 800b85a <_vfiprintf_r+0x1d6>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	3307      	adds	r3, #7
 800b816:	f023 0307 	bic.w	r3, r3, #7
 800b81a:	3308      	adds	r3, #8
 800b81c:	9303      	str	r3, [sp, #12]
 800b81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b820:	443b      	add	r3, r7
 800b822:	9309      	str	r3, [sp, #36]	@ 0x24
 800b824:	e76a      	b.n	800b6fc <_vfiprintf_r+0x78>
 800b826:	fb0c 3202 	mla	r2, ip, r2, r3
 800b82a:	460c      	mov	r4, r1
 800b82c:	2001      	movs	r0, #1
 800b82e:	e7a8      	b.n	800b782 <_vfiprintf_r+0xfe>
 800b830:	2300      	movs	r3, #0
 800b832:	3401      	adds	r4, #1
 800b834:	9305      	str	r3, [sp, #20]
 800b836:	4619      	mov	r1, r3
 800b838:	f04f 0c0a 	mov.w	ip, #10
 800b83c:	4620      	mov	r0, r4
 800b83e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b842:	3a30      	subs	r2, #48	@ 0x30
 800b844:	2a09      	cmp	r2, #9
 800b846:	d903      	bls.n	800b850 <_vfiprintf_r+0x1cc>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0c6      	beq.n	800b7da <_vfiprintf_r+0x156>
 800b84c:	9105      	str	r1, [sp, #20]
 800b84e:	e7c4      	b.n	800b7da <_vfiprintf_r+0x156>
 800b850:	fb0c 2101 	mla	r1, ip, r1, r2
 800b854:	4604      	mov	r4, r0
 800b856:	2301      	movs	r3, #1
 800b858:	e7f0      	b.n	800b83c <_vfiprintf_r+0x1b8>
 800b85a:	ab03      	add	r3, sp, #12
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	462a      	mov	r2, r5
 800b860:	4b12      	ldr	r3, [pc, #72]	@ (800b8ac <_vfiprintf_r+0x228>)
 800b862:	a904      	add	r1, sp, #16
 800b864:	4630      	mov	r0, r6
 800b866:	f7fb ff5f 	bl	8007728 <_printf_float>
 800b86a:	4607      	mov	r7, r0
 800b86c:	1c78      	adds	r0, r7, #1
 800b86e:	d1d6      	bne.n	800b81e <_vfiprintf_r+0x19a>
 800b870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b872:	07d9      	lsls	r1, r3, #31
 800b874:	d405      	bmi.n	800b882 <_vfiprintf_r+0x1fe>
 800b876:	89ab      	ldrh	r3, [r5, #12]
 800b878:	059a      	lsls	r2, r3, #22
 800b87a:	d402      	bmi.n	800b882 <_vfiprintf_r+0x1fe>
 800b87c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b87e:	f7fc fedf 	bl	8008640 <__retarget_lock_release_recursive>
 800b882:	89ab      	ldrh	r3, [r5, #12]
 800b884:	065b      	lsls	r3, r3, #25
 800b886:	f53f af1f 	bmi.w	800b6c8 <_vfiprintf_r+0x44>
 800b88a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b88c:	e71e      	b.n	800b6cc <_vfiprintf_r+0x48>
 800b88e:	ab03      	add	r3, sp, #12
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	462a      	mov	r2, r5
 800b894:	4b05      	ldr	r3, [pc, #20]	@ (800b8ac <_vfiprintf_r+0x228>)
 800b896:	a904      	add	r1, sp, #16
 800b898:	4630      	mov	r0, r6
 800b89a:	f7fc f9cd 	bl	8007c38 <_printf_i>
 800b89e:	e7e4      	b.n	800b86a <_vfiprintf_r+0x1e6>
 800b8a0:	0800c191 	.word	0x0800c191
 800b8a4:	0800c19b 	.word	0x0800c19b
 800b8a8:	08007729 	.word	0x08007729
 800b8ac:	0800b661 	.word	0x0800b661
 800b8b0:	0800c197 	.word	0x0800c197

0800b8b4 <__swbuf_r>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	460e      	mov	r6, r1
 800b8b8:	4614      	mov	r4, r2
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	b118      	cbz	r0, 800b8c6 <__swbuf_r+0x12>
 800b8be:	6a03      	ldr	r3, [r0, #32]
 800b8c0:	b90b      	cbnz	r3, 800b8c6 <__swbuf_r+0x12>
 800b8c2:	f7fc fd71 	bl	80083a8 <__sinit>
 800b8c6:	69a3      	ldr	r3, [r4, #24]
 800b8c8:	60a3      	str	r3, [r4, #8]
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	071a      	lsls	r2, r3, #28
 800b8ce:	d501      	bpl.n	800b8d4 <__swbuf_r+0x20>
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	b943      	cbnz	r3, 800b8e6 <__swbuf_r+0x32>
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f000 f82a 	bl	800b930 <__swsetup_r>
 800b8dc:	b118      	cbz	r0, 800b8e6 <__swbuf_r+0x32>
 800b8de:	f04f 37ff 	mov.w	r7, #4294967295
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	6922      	ldr	r2, [r4, #16]
 800b8ea:	1a98      	subs	r0, r3, r2
 800b8ec:	6963      	ldr	r3, [r4, #20]
 800b8ee:	b2f6      	uxtb	r6, r6
 800b8f0:	4283      	cmp	r3, r0
 800b8f2:	4637      	mov	r7, r6
 800b8f4:	dc05      	bgt.n	800b902 <__swbuf_r+0x4e>
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f7ff fa45 	bl	800ad88 <_fflush_r>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d1ed      	bne.n	800b8de <__swbuf_r+0x2a>
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	3b01      	subs	r3, #1
 800b906:	60a3      	str	r3, [r4, #8]
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	6022      	str	r2, [r4, #0]
 800b90e:	701e      	strb	r6, [r3, #0]
 800b910:	6962      	ldr	r2, [r4, #20]
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	429a      	cmp	r2, r3
 800b916:	d004      	beq.n	800b922 <__swbuf_r+0x6e>
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	07db      	lsls	r3, r3, #31
 800b91c:	d5e1      	bpl.n	800b8e2 <__swbuf_r+0x2e>
 800b91e:	2e0a      	cmp	r6, #10
 800b920:	d1df      	bne.n	800b8e2 <__swbuf_r+0x2e>
 800b922:	4621      	mov	r1, r4
 800b924:	4628      	mov	r0, r5
 800b926:	f7ff fa2f 	bl	800ad88 <_fflush_r>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d0d9      	beq.n	800b8e2 <__swbuf_r+0x2e>
 800b92e:	e7d6      	b.n	800b8de <__swbuf_r+0x2a>

0800b930 <__swsetup_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4b29      	ldr	r3, [pc, #164]	@ (800b9d8 <__swsetup_r+0xa8>)
 800b934:	4605      	mov	r5, r0
 800b936:	6818      	ldr	r0, [r3, #0]
 800b938:	460c      	mov	r4, r1
 800b93a:	b118      	cbz	r0, 800b944 <__swsetup_r+0x14>
 800b93c:	6a03      	ldr	r3, [r0, #32]
 800b93e:	b90b      	cbnz	r3, 800b944 <__swsetup_r+0x14>
 800b940:	f7fc fd32 	bl	80083a8 <__sinit>
 800b944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b948:	0719      	lsls	r1, r3, #28
 800b94a:	d422      	bmi.n	800b992 <__swsetup_r+0x62>
 800b94c:	06da      	lsls	r2, r3, #27
 800b94e:	d407      	bmi.n	800b960 <__swsetup_r+0x30>
 800b950:	2209      	movs	r2, #9
 800b952:	602a      	str	r2, [r5, #0]
 800b954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b958:	81a3      	strh	r3, [r4, #12]
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	e033      	b.n	800b9c8 <__swsetup_r+0x98>
 800b960:	0758      	lsls	r0, r3, #29
 800b962:	d512      	bpl.n	800b98a <__swsetup_r+0x5a>
 800b964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b966:	b141      	cbz	r1, 800b97a <__swsetup_r+0x4a>
 800b968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b96c:	4299      	cmp	r1, r3
 800b96e:	d002      	beq.n	800b976 <__swsetup_r+0x46>
 800b970:	4628      	mov	r0, r5
 800b972:	f7fd fc4b 	bl	800920c <_free_r>
 800b976:	2300      	movs	r3, #0
 800b978:	6363      	str	r3, [r4, #52]	@ 0x34
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	2300      	movs	r3, #0
 800b984:	6063      	str	r3, [r4, #4]
 800b986:	6923      	ldr	r3, [r4, #16]
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	f043 0308 	orr.w	r3, r3, #8
 800b990:	81a3      	strh	r3, [r4, #12]
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	b94b      	cbnz	r3, 800b9aa <__swsetup_r+0x7a>
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b99c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9a0:	d003      	beq.n	800b9aa <__swsetup_r+0x7a>
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	f000 f883 	bl	800bab0 <__smakebuf_r>
 800b9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ae:	f013 0201 	ands.w	r2, r3, #1
 800b9b2:	d00a      	beq.n	800b9ca <__swsetup_r+0x9a>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	60a2      	str	r2, [r4, #8]
 800b9b8:	6962      	ldr	r2, [r4, #20]
 800b9ba:	4252      	negs	r2, r2
 800b9bc:	61a2      	str	r2, [r4, #24]
 800b9be:	6922      	ldr	r2, [r4, #16]
 800b9c0:	b942      	cbnz	r2, 800b9d4 <__swsetup_r+0xa4>
 800b9c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b9c6:	d1c5      	bne.n	800b954 <__swsetup_r+0x24>
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	0799      	lsls	r1, r3, #30
 800b9cc:	bf58      	it	pl
 800b9ce:	6962      	ldrpl	r2, [r4, #20]
 800b9d0:	60a2      	str	r2, [r4, #8]
 800b9d2:	e7f4      	b.n	800b9be <__swsetup_r+0x8e>
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	e7f7      	b.n	800b9c8 <__swsetup_r+0x98>
 800b9d8:	2400001c 	.word	0x2400001c

0800b9dc <_raise_r>:
 800b9dc:	291f      	cmp	r1, #31
 800b9de:	b538      	push	{r3, r4, r5, lr}
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	d904      	bls.n	800b9f0 <_raise_r+0x14>
 800b9e6:	2316      	movs	r3, #22
 800b9e8:	6003      	str	r3, [r0, #0]
 800b9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9f2:	b112      	cbz	r2, 800b9fa <_raise_r+0x1e>
 800b9f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9f8:	b94b      	cbnz	r3, 800ba0e <_raise_r+0x32>
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f830 	bl	800ba60 <_getpid_r>
 800ba00:	4622      	mov	r2, r4
 800ba02:	4601      	mov	r1, r0
 800ba04:	4628      	mov	r0, r5
 800ba06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba0a:	f000 b817 	b.w	800ba3c <_kill_r>
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d00a      	beq.n	800ba28 <_raise_r+0x4c>
 800ba12:	1c59      	adds	r1, r3, #1
 800ba14:	d103      	bne.n	800ba1e <_raise_r+0x42>
 800ba16:	2316      	movs	r3, #22
 800ba18:	6003      	str	r3, [r0, #0]
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	e7e7      	b.n	800b9ee <_raise_r+0x12>
 800ba1e:	2100      	movs	r1, #0
 800ba20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba24:	4620      	mov	r0, r4
 800ba26:	4798      	blx	r3
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e7e0      	b.n	800b9ee <_raise_r+0x12>

0800ba2c <raise>:
 800ba2c:	4b02      	ldr	r3, [pc, #8]	@ (800ba38 <raise+0xc>)
 800ba2e:	4601      	mov	r1, r0
 800ba30:	6818      	ldr	r0, [r3, #0]
 800ba32:	f7ff bfd3 	b.w	800b9dc <_raise_r>
 800ba36:	bf00      	nop
 800ba38:	2400001c 	.word	0x2400001c

0800ba3c <_kill_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4d07      	ldr	r5, [pc, #28]	@ (800ba5c <_kill_r+0x20>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	4604      	mov	r4, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	4611      	mov	r1, r2
 800ba48:	602b      	str	r3, [r5, #0]
 800ba4a:	f7f5 fde5 	bl	8001618 <_kill>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	d102      	bne.n	800ba58 <_kill_r+0x1c>
 800ba52:	682b      	ldr	r3, [r5, #0]
 800ba54:	b103      	cbz	r3, 800ba58 <_kill_r+0x1c>
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	bd38      	pop	{r3, r4, r5, pc}
 800ba5a:	bf00      	nop
 800ba5c:	240004d0 	.word	0x240004d0

0800ba60 <_getpid_r>:
 800ba60:	f7f5 bdd2 	b.w	8001608 <_getpid>

0800ba64 <__swhatbuf_r>:
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	460c      	mov	r4, r1
 800ba68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba6c:	2900      	cmp	r1, #0
 800ba6e:	b096      	sub	sp, #88	@ 0x58
 800ba70:	4615      	mov	r5, r2
 800ba72:	461e      	mov	r6, r3
 800ba74:	da0d      	bge.n	800ba92 <__swhatbuf_r+0x2e>
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba7c:	f04f 0100 	mov.w	r1, #0
 800ba80:	bf14      	ite	ne
 800ba82:	2340      	movne	r3, #64	@ 0x40
 800ba84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba88:	2000      	movs	r0, #0
 800ba8a:	6031      	str	r1, [r6, #0]
 800ba8c:	602b      	str	r3, [r5, #0]
 800ba8e:	b016      	add	sp, #88	@ 0x58
 800ba90:	bd70      	pop	{r4, r5, r6, pc}
 800ba92:	466a      	mov	r2, sp
 800ba94:	f000 f848 	bl	800bb28 <_fstat_r>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	dbec      	blt.n	800ba76 <__swhatbuf_r+0x12>
 800ba9c:	9901      	ldr	r1, [sp, #4]
 800ba9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800baa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800baa6:	4259      	negs	r1, r3
 800baa8:	4159      	adcs	r1, r3
 800baaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800baae:	e7eb      	b.n	800ba88 <__swhatbuf_r+0x24>

0800bab0 <__smakebuf_r>:
 800bab0:	898b      	ldrh	r3, [r1, #12]
 800bab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bab4:	079d      	lsls	r5, r3, #30
 800bab6:	4606      	mov	r6, r0
 800bab8:	460c      	mov	r4, r1
 800baba:	d507      	bpl.n	800bacc <__smakebuf_r+0x1c>
 800babc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	6123      	str	r3, [r4, #16]
 800bac4:	2301      	movs	r3, #1
 800bac6:	6163      	str	r3, [r4, #20]
 800bac8:	b003      	add	sp, #12
 800baca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bacc:	ab01      	add	r3, sp, #4
 800bace:	466a      	mov	r2, sp
 800bad0:	f7ff ffc8 	bl	800ba64 <__swhatbuf_r>
 800bad4:	9f00      	ldr	r7, [sp, #0]
 800bad6:	4605      	mov	r5, r0
 800bad8:	4639      	mov	r1, r7
 800bada:	4630      	mov	r0, r6
 800badc:	f7fd fc0a 	bl	80092f4 <_malloc_r>
 800bae0:	b948      	cbnz	r0, 800baf6 <__smakebuf_r+0x46>
 800bae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae6:	059a      	lsls	r2, r3, #22
 800bae8:	d4ee      	bmi.n	800bac8 <__smakebuf_r+0x18>
 800baea:	f023 0303 	bic.w	r3, r3, #3
 800baee:	f043 0302 	orr.w	r3, r3, #2
 800baf2:	81a3      	strh	r3, [r4, #12]
 800baf4:	e7e2      	b.n	800babc <__smakebuf_r+0xc>
 800baf6:	89a3      	ldrh	r3, [r4, #12]
 800baf8:	6020      	str	r0, [r4, #0]
 800bafa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	9b01      	ldr	r3, [sp, #4]
 800bb02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb06:	b15b      	cbz	r3, 800bb20 <__smakebuf_r+0x70>
 800bb08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f000 f81d 	bl	800bb4c <_isatty_r>
 800bb12:	b128      	cbz	r0, 800bb20 <__smakebuf_r+0x70>
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	f023 0303 	bic.w	r3, r3, #3
 800bb1a:	f043 0301 	orr.w	r3, r3, #1
 800bb1e:	81a3      	strh	r3, [r4, #12]
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	431d      	orrs	r5, r3
 800bb24:	81a5      	strh	r5, [r4, #12]
 800bb26:	e7cf      	b.n	800bac8 <__smakebuf_r+0x18>

0800bb28 <_fstat_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d07      	ldr	r5, [pc, #28]	@ (800bb48 <_fstat_r+0x20>)
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4604      	mov	r4, r0
 800bb30:	4608      	mov	r0, r1
 800bb32:	4611      	mov	r1, r2
 800bb34:	602b      	str	r3, [r5, #0]
 800bb36:	f7f5 fdb3 	bl	80016a0 <_fstat>
 800bb3a:	1c43      	adds	r3, r0, #1
 800bb3c:	d102      	bne.n	800bb44 <_fstat_r+0x1c>
 800bb3e:	682b      	ldr	r3, [r5, #0]
 800bb40:	b103      	cbz	r3, 800bb44 <_fstat_r+0x1c>
 800bb42:	6023      	str	r3, [r4, #0]
 800bb44:	bd38      	pop	{r3, r4, r5, pc}
 800bb46:	bf00      	nop
 800bb48:	240004d0 	.word	0x240004d0

0800bb4c <_isatty_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	4d06      	ldr	r5, [pc, #24]	@ (800bb68 <_isatty_r+0x1c>)
 800bb50:	2300      	movs	r3, #0
 800bb52:	4604      	mov	r4, r0
 800bb54:	4608      	mov	r0, r1
 800bb56:	602b      	str	r3, [r5, #0]
 800bb58:	f7f5 fdb2 	bl	80016c0 <_isatty>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	d102      	bne.n	800bb66 <_isatty_r+0x1a>
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	b103      	cbz	r3, 800bb66 <_isatty_r+0x1a>
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	bd38      	pop	{r3, r4, r5, pc}
 800bb68:	240004d0 	.word	0x240004d0
 800bb6c:	00000000 	.word	0x00000000

0800bb70 <sqrt>:
 800bb70:	b508      	push	{r3, lr}
 800bb72:	ed2d 8b04 	vpush	{d8-d9}
 800bb76:	eeb0 8b40 	vmov.f64	d8, d0
 800bb7a:	f000 f91b 	bl	800bdb4 <__ieee754_sqrt>
 800bb7e:	eeb4 8b48 	vcmp.f64	d8, d8
 800bb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb86:	d60c      	bvs.n	800bba2 <sqrt+0x32>
 800bb88:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800bba8 <sqrt+0x38>
 800bb8c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800bb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb94:	d505      	bpl.n	800bba2 <sqrt+0x32>
 800bb96:	f7fc fd27 	bl	80085e8 <__errno>
 800bb9a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800bb9e:	2321      	movs	r3, #33	@ 0x21
 800bba0:	6003      	str	r3, [r0, #0]
 800bba2:	ecbd 8b04 	vpop	{d8-d9}
 800bba6:	bd08      	pop	{r3, pc}
	...

0800bbb0 <atan>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	eeb0 7b40 	vmov.f64	d7, d0
 800bbb6:	ee17 5a90 	vmov	r5, s15
 800bbba:	4b73      	ldr	r3, [pc, #460]	@ (800bd88 <atan+0x1d8>)
 800bbbc:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bbc0:	429c      	cmp	r4, r3
 800bbc2:	d913      	bls.n	800bbec <atan+0x3c>
 800bbc4:	4b71      	ldr	r3, [pc, #452]	@ (800bd8c <atan+0x1dc>)
 800bbc6:	429c      	cmp	r4, r3
 800bbc8:	d803      	bhi.n	800bbd2 <atan+0x22>
 800bbca:	d107      	bne.n	800bbdc <atan+0x2c>
 800bbcc:	ee10 3a10 	vmov	r3, s0
 800bbd0:	b123      	cbz	r3, 800bbdc <atan+0x2c>
 800bbd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bbd6:	eeb0 0b47 	vmov.f64	d0, d7
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800bd18 <atan+0x168>
 800bbe0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800bd20 <atan+0x170>
 800bbe4:	2d00      	cmp	r5, #0
 800bbe6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800bbea:	e7f4      	b.n	800bbd6 <atan+0x26>
 800bbec:	4b68      	ldr	r3, [pc, #416]	@ (800bd90 <atan+0x1e0>)
 800bbee:	429c      	cmp	r4, r3
 800bbf0:	d811      	bhi.n	800bc16 <atan+0x66>
 800bbf2:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bbf6:	429c      	cmp	r4, r3
 800bbf8:	d80a      	bhi.n	800bc10 <atan+0x60>
 800bbfa:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800bbfe:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800bd28 <atan+0x178>
 800bc02:	ee30 6b06 	vadd.f64	d6, d0, d6
 800bc06:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0e:	dce2      	bgt.n	800bbd6 <atan+0x26>
 800bc10:	f04f 33ff 	mov.w	r3, #4294967295
 800bc14:	e013      	b.n	800bc3e <atan+0x8e>
 800bc16:	f000 f8c5 	bl	800bda4 <fabs>
 800bc1a:	4b5e      	ldr	r3, [pc, #376]	@ (800bd94 <atan+0x1e4>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	d84f      	bhi.n	800bcc0 <atan+0x110>
 800bc20:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bc24:	429c      	cmp	r4, r3
 800bc26:	d841      	bhi.n	800bcac <atan+0xfc>
 800bc28:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800bc2c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800bc30:	2300      	movs	r3, #0
 800bc32:	eea0 5b07 	vfma.f64	d5, d0, d7
 800bc36:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bc3a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800bc3e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800bd30 <atan+0x180>
 800bc42:	ee27 4b07 	vmul.f64	d4, d7, d7
 800bc46:	ee24 5b04 	vmul.f64	d5, d4, d4
 800bc4a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800bd38 <atan+0x188>
 800bc4e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800bc52:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800bd40 <atan+0x190>
 800bc56:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bc5a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800bd48 <atan+0x198>
 800bc5e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800bc62:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800bd50 <atan+0x1a0>
 800bc66:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bc6a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800bd58 <atan+0x1a8>
 800bc6e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800bd60 <atan+0x1b0>
 800bc72:	eea6 3b05 	vfma.f64	d3, d6, d5
 800bc76:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800bd68 <atan+0x1b8>
 800bc7a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800bc7e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800bd70 <atan+0x1c0>
 800bc82:	eea2 6b05 	vfma.f64	d6, d2, d5
 800bc86:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800bd78 <atan+0x1c8>
 800bc8a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800bc8e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800bd80 <atan+0x1d0>
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	eea2 6b05 	vfma.f64	d6, d2, d5
 800bc98:	ee26 6b05 	vmul.f64	d6, d6, d5
 800bc9c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800bca0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bca4:	d121      	bne.n	800bcea <atan+0x13a>
 800bca6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bcaa:	e794      	b.n	800bbd6 <atan+0x26>
 800bcac:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	ee30 5b47 	vsub.f64	d5, d0, d7
 800bcb6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bcba:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800bcbe:	e7be      	b.n	800bc3e <atan+0x8e>
 800bcc0:	4b35      	ldr	r3, [pc, #212]	@ (800bd98 <atan+0x1e8>)
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d20b      	bcs.n	800bcde <atan+0x12e>
 800bcc6:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800bcca:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bcce:	ee30 5b47 	vsub.f64	d5, d0, d7
 800bcd2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bcdc:	e7af      	b.n	800bc3e <atan+0x8e>
 800bcde:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800bce2:	2303      	movs	r3, #3
 800bce4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800bce8:	e7a9      	b.n	800bc3e <atan+0x8e>
 800bcea:	4a2c      	ldr	r2, [pc, #176]	@ (800bd9c <atan+0x1ec>)
 800bcec:	492c      	ldr	r1, [pc, #176]	@ (800bda0 <atan+0x1f0>)
 800bcee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bcf2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800bcf6:	ed93 5b00 	vldr	d5, [r3]
 800bcfa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bcfe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bd02:	ed92 7b00 	vldr	d7, [r2]
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bd0c:	bfb8      	it	lt
 800bd0e:	eeb1 7b47 	vneglt.f64	d7, d7
 800bd12:	e760      	b.n	800bbd6 <atan+0x26>
 800bd14:	f3af 8000 	nop.w
 800bd18:	54442d18 	.word	0x54442d18
 800bd1c:	bff921fb 	.word	0xbff921fb
 800bd20:	54442d18 	.word	0x54442d18
 800bd24:	3ff921fb 	.word	0x3ff921fb
 800bd28:	8800759c 	.word	0x8800759c
 800bd2c:	7e37e43c 	.word	0x7e37e43c
 800bd30:	e322da11 	.word	0xe322da11
 800bd34:	3f90ad3a 	.word	0x3f90ad3a
 800bd38:	24760deb 	.word	0x24760deb
 800bd3c:	3fa97b4b 	.word	0x3fa97b4b
 800bd40:	a0d03d51 	.word	0xa0d03d51
 800bd44:	3fb10d66 	.word	0x3fb10d66
 800bd48:	c54c206e 	.word	0xc54c206e
 800bd4c:	3fb745cd 	.word	0x3fb745cd
 800bd50:	920083ff 	.word	0x920083ff
 800bd54:	3fc24924 	.word	0x3fc24924
 800bd58:	5555550d 	.word	0x5555550d
 800bd5c:	3fd55555 	.word	0x3fd55555
 800bd60:	52defd9a 	.word	0x52defd9a
 800bd64:	bfadde2d 	.word	0xbfadde2d
 800bd68:	2c6a6c2f 	.word	0x2c6a6c2f
 800bd6c:	bfa2b444 	.word	0xbfa2b444
 800bd70:	af749a6d 	.word	0xaf749a6d
 800bd74:	bfb3b0f2 	.word	0xbfb3b0f2
 800bd78:	fe231671 	.word	0xfe231671
 800bd7c:	bfbc71c6 	.word	0xbfbc71c6
 800bd80:	9998ebc4 	.word	0x9998ebc4
 800bd84:	bfc99999 	.word	0xbfc99999
 800bd88:	440fffff 	.word	0x440fffff
 800bd8c:	7ff00000 	.word	0x7ff00000
 800bd90:	3fdbffff 	.word	0x3fdbffff
 800bd94:	3ff2ffff 	.word	0x3ff2ffff
 800bd98:	40038000 	.word	0x40038000
 800bd9c:	0800c268 	.word	0x0800c268
 800bda0:	0800c248 	.word	0x0800c248

0800bda4 <fabs>:
 800bda4:	ec51 0b10 	vmov	r0, r1, d0
 800bda8:	4602      	mov	r2, r0
 800bdaa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bdae:	ec43 2b10 	vmov	d0, r2, r3
 800bdb2:	4770      	bx	lr

0800bdb4 <__ieee754_sqrt>:
 800bdb4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800bdb8:	4770      	bx	lr
	...

0800bdbc <_init>:
 800bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbe:	bf00      	nop
 800bdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc2:	bc08      	pop	{r3}
 800bdc4:	469e      	mov	lr, r3
 800bdc6:	4770      	bx	lr

0800bdc8 <_fini>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	bf00      	nop
 800bdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdce:	bc08      	pop	{r3}
 800bdd0:	469e      	mov	lr, r3
 800bdd2:	4770      	bx	lr
