
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb88  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  0800ce28  0800ce28  0000de28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eb90  0800eb90  0000fb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800eb98  0800eb98  0000fb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800eb9c  0800eb9c  0000fb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800eba0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000464  240001d8  0800ed78  000101d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400063c  0800ed78  0001063c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018bae  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002df9  00000000  00000000  00028db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012f8  00000000  00000000  0002bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eca  00000000  00000000  0002cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003772d  00000000  00000000  0002dd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000191dc  00000000  00000000  0006549f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016955e  00000000  00000000  0007e67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e7bd9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006784  00000000  00000000  001e7c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001ee3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ce10 	.word	0x0800ce10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800ce10 	.word	0x0800ce10

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <bmp388_quantize_calibration>:
volatile double altitude;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (double)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 8000a6c:	4b7c      	ldr	r3, [pc, #496]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a78:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8000c08 <bmp388_quantize_calibration+0x1a0>
 8000a7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a80:	4b78      	ldr	r3, [pc, #480]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000a82:	ed83 7b00 	vstr	d7, [r3]
  quantized_bmp388_calib.par_t2 = (double)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8000a86:	4b76      	ldr	r3, [pc, #472]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000a88:	885b      	ldrh	r3, [r3, #2]
 8000a8a:	ee07 3a90 	vmov	s15, r3
 8000a8e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a92:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 8000c10 <bmp388_quantize_calibration+0x1a8>
 8000a96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a9a:	4b72      	ldr	r3, [pc, #456]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000a9c:	ed83 7b02 	vstr	d7, [r3, #8]
  quantized_bmp388_calib.par_t3 = (double)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8000aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000aa2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000aae:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000ab2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ab6:	4b6b      	ldr	r3, [pc, #428]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000ab8:	ed83 7b04 	vstr	d7, [r3, #16]

  quantized_bmp388_calib.par_p1 = ((double)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 8000abc:	4b68      	ldr	r3, [pc, #416]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000abe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aca:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8000c20 <bmp388_quantize_calibration+0x1b8>
 8000ace:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000ad2:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8000c28 <bmp388_quantize_calibration+0x1c0>
 8000ad6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ada:	4b62      	ldr	r3, [pc, #392]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000adc:	ed83 7b06 	vstr	d7, [r3, #24]
  quantized_bmp388_calib.par_p2 = ((double)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8000ae0:	4b5f      	ldr	r3, [pc, #380]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000ae2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8000c20 <bmp388_quantize_calibration+0x1b8>
 8000af2:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000af6:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8000c30 <bmp388_quantize_calibration+0x1c8>
 8000afa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000afe:	4b59      	ldr	r3, [pc, #356]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000b00:	ed83 7b08 	vstr	d7, [r3, #32]
  quantized_bmp388_calib.par_p3 = (double)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 8000b04:	4b56      	ldr	r3, [pc, #344]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000b06:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b12:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8000c38 <bmp388_quantize_calibration+0x1d0>
 8000b16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b1a:	4b52      	ldr	r3, [pc, #328]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000b1c:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p4 = (double)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 8000b20:	4b4f      	ldr	r3, [pc, #316]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000b22:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000b26:	ee07 3a90 	vmov	s15, r3
 8000b2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b2e:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 8000c40 <bmp388_quantize_calibration+0x1d8>
 8000b32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b36:	4b4b      	ldr	r3, [pc, #300]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000b38:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p5 = (double)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 8000b3c:	4b48      	ldr	r3, [pc, #288]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000b3e:	899b      	ldrh	r3, [r3, #12]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b48:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 8000b4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b50:	4b44      	ldr	r3, [pc, #272]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000b52:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  quantized_bmp388_calib.par_p6 = (double)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 8000b56:	4b42      	ldr	r3, [pc, #264]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000b58:	89db      	ldrh	r3, [r3, #14]
 8000b5a:	ee07 3a90 	vmov	s15, r3
 8000b5e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000b62:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 8000c48 <bmp388_quantize_calibration+0x1e0>
 8000b66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000b6c:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
  quantized_bmp388_calib.par_p7 = (double)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 8000b70:	4b3b      	ldr	r3, [pc, #236]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000b72:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000b76:	ee07 3a90 	vmov	s15, r3
 8000b7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b7e:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8000c08 <bmp388_quantize_calibration+0x1a0>
 8000b82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b86:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000b88:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  quantized_bmp388_calib.par_p8 = (double)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 8000b8c:	4b34      	ldr	r3, [pc, #208]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000b8e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000b92:	ee07 3a90 	vmov	s15, r3
 8000b96:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b9a:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8000c50 <bmp388_quantize_calibration+0x1e8>
 8000b9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ba2:	4b30      	ldr	r3, [pc, #192]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000ba4:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
  quantized_bmp388_calib.par_p9 = (double)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000baa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bb6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000bba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000bc0:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
  quantized_bmp388_calib.par_p10 = (double)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 8000bc4:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000bc6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bd2:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000bd6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bda:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000bdc:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
  quantized_bmp388_calib.par_p11 = (double)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <bmp388_quantize_calibration+0x1f8>)
 8000be2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bee:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 8000c58 <bmp388_quantize_calibration+0x1f0>
 8000bf2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <bmp388_quantize_calibration+0x1fc>)
 8000bf8:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40700000 	.word	0x40700000
 8000c10:	00000000 	.word	0x00000000
 8000c14:	41d00000 	.word	0x41d00000
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	42f00000 	.word	0x42f00000
 8000c20:	00000000 	.word	0x00000000
 8000c24:	40d00000 	.word	0x40d00000
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	41300000 	.word	0x41300000
 8000c30:	00000000 	.word	0x00000000
 8000c34:	41c00000 	.word	0x41c00000
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	41f00000 	.word	0x41f00000
 8000c40:	00000000 	.word	0x00000000
 8000c44:	42400000 	.word	0x42400000
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	40500000 	.word	0x40500000
 8000c50:	00000000 	.word	0x00000000
 8000c54:	40e00000 	.word	0x40e00000
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	44000000 	.word	0x44000000
 8000c60:	240001f4 	.word	0x240001f4
 8000c64:	24000210 	.word	0x24000210

08000c68 <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2140      	movs	r1, #64	@ 0x40
 8000c7c:	480b      	ldr	r0, [pc, #44]	@ (8000cac <bmp388_write_reg+0x44>)
 8000c7e:	f001 fed7 	bl	8002a30 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8000c82:	1df9      	adds	r1, r7, #7
 8000c84:	2364      	movs	r3, #100	@ 0x64
 8000c86:	2201      	movs	r2, #1
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <bmp388_write_reg+0x48>)
 8000c8a:	f004 fe5b 	bl	8005944 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000c8e:	1db9      	adds	r1, r7, #6
 8000c90:	2364      	movs	r3, #100	@ 0x64
 8000c92:	2201      	movs	r2, #1
 8000c94:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <bmp388_write_reg+0x48>)
 8000c96:	f004 fe55 	bl	8005944 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2140      	movs	r1, #64	@ 0x40
 8000c9e:	4803      	ldr	r0, [pc, #12]	@ (8000cac <bmp388_write_reg+0x44>)
 8000ca0:	f001 fec6 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58020000 	.word	0x58020000
 8000cb0:	24000330 	.word	0x24000330

08000cb4 <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	71bb      	strb	r3, [r7, #6]
  uint8_t dummy;
  uint8_t temp_data = 0x80 | reg;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2140      	movs	r1, #64	@ 0x40
 8000cd2:	4817      	ldr	r0, [pc, #92]	@ (8000d30 <bmp388_read_reg+0x7c>)
 8000cd4:	f001 feac 	bl	8002a30 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8000cd8:	f107 010d 	add.w	r1, r7, #13
 8000cdc:	2364      	movs	r3, #100	@ 0x64
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4814      	ldr	r0, [pc, #80]	@ (8000d34 <bmp388_read_reg+0x80>)
 8000ce2:	f004 fe2f 	bl	8005944 <HAL_SPI_Transmit>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <bmp388_read_reg+0x40>
    Error_Handler();
 8000cf0:	f000 fd36 	bl	8001760 <Error_Handler>
  HAL_SPI_Receive(&hspi2, &dummy, 1, 100);
 8000cf4:	f107 010e 	add.w	r1, r7, #14
 8000cf8:	2364      	movs	r3, #100	@ 0x64
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <bmp388_read_reg+0x80>)
 8000cfe:	f005 f80f 	bl	8005d20 <HAL_SPI_Receive>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	2364      	movs	r3, #100	@ 0x64
 8000d08:	6839      	ldr	r1, [r7, #0]
 8000d0a:	480a      	ldr	r0, [pc, #40]	@ (8000d34 <bmp388_read_reg+0x80>)
 8000d0c:	f005 f808 	bl	8005d20 <HAL_SPI_Receive>
 8000d10:	4603      	mov	r3, r0
 8000d12:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <bmp388_read_reg+0x6a>
    Error_Handler();
 8000d1a:	f000 fd21 	bl	8001760 <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2140      	movs	r1, #64	@ 0x40
 8000d22:	4803      	ldr	r0, [pc, #12]	@ (8000d30 <bmp388_read_reg+0x7c>)
 8000d24:	f001 fe84 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	58020000 	.word	0x58020000
 8000d34:	24000330 	.word	0x24000330

08000d38 <bmp388_setup>:
void bmp388_setup()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
  bmp388_write_reg(0x7E, 0xB6); // Soft reset
 8000d3e:	21b6      	movs	r1, #182	@ 0xb6
 8000d40:	207e      	movs	r0, #126	@ 0x7e
 8000d42:	f7ff ff91 	bl	8000c68 <bmp388_write_reg>
  HAL_Delay(10); // Wait for reset to complete
 8000d46:	200a      	movs	r0, #10
 8000d48:	f001 fb0a 	bl	8002360 <HAL_Delay>
  uint8_t calib_data[21];
  uint8_t chip[2];
  bmp388_read_reg(0x31, calib_data, 21);
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	2215      	movs	r2, #21
 8000d52:	4619      	mov	r1, r3
 8000d54:	2031      	movs	r0, #49	@ 0x31
 8000d56:	f7ff ffad 	bl	8000cb4 <bmp388_read_reg>
  bmp388_read_reg(0x00, chip, 2);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ffa7 	bl	8000cb4 <bmp388_read_reg>
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 8000d66:	7a3b      	ldrb	r3, [r7, #8]
 8000d68:	b21a      	sxth	r2, r3
 8000d6a:	7a7b      	ldrb	r3, [r7, #9]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b38      	ldr	r3, [pc, #224]	@ (8000e58 <bmp388_setup+0x120>)
 8000d78:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 8000d7a:	7abb      	ldrb	r3, [r7, #10]
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <bmp388_setup+0x120>)
 8000d8c:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <bmp388_setup+0x120>)
 8000d94:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	b21a      	sxth	r2, r3
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e58 <bmp388_setup+0x120>)
 8000da6:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	7c3b      	ldrb	r3, [r7, #16]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <bmp388_setup+0x120>)
 8000db8:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8000dba:	7c7b      	ldrb	r3, [r7, #17]
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <bmp388_setup+0x120>)
 8000dc0:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 8000dc2:	7cbb      	ldrb	r3, [r7, #18]
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <bmp388_setup+0x120>)
 8000dc8:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8000dca:	7cfb      	ldrb	r3, [r7, #19]
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	7d3b      	ldrb	r3, [r7, #20]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <bmp388_setup+0x120>)
 8000ddc:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	7dbb      	ldrb	r3, [r7, #22]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <bmp388_setup+0x120>)
 8000df0:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <bmp388_setup+0x120>)
 8000df8:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 8000dfa:	7e3b      	ldrb	r3, [r7, #24]
 8000dfc:	b25a      	sxtb	r2, r3
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <bmp388_setup+0x120>)
 8000e00:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 8000e02:	7e7b      	ldrb	r3, [r7, #25]
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	7ebb      	ldrb	r3, [r7, #26]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <bmp388_setup+0x120>)
 8000e12:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 8000e14:	7efb      	ldrb	r3, [r7, #27]
 8000e16:	b25a      	sxtb	r2, r3
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <bmp388_setup+0x120>)
 8000e1a:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 8000e1c:	7f3b      	ldrb	r3, [r7, #28]
 8000e1e:	b25a      	sxtb	r2, r3
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <bmp388_setup+0x120>)
 8000e22:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 8000e24:	f7ff fe20 	bl	8000a68 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1A, 0x00);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	201a      	movs	r0, #26
 8000e2c:	f7ff ff1c 	bl	8000c68 <bmp388_write_reg>
  bmp388_write_reg(0x1B, 0x33);  // normal mode, temp pressure on by default with it
 8000e30:	2133      	movs	r1, #51	@ 0x33
 8000e32:	201b      	movs	r0, #27
 8000e34:	f7ff ff18 	bl	8000c68 <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 8000e38:	2103      	movs	r1, #3
 8000e3a:	201c      	movs	r0, #28
 8000e3c:	f7ff ff14 	bl	8000c68 <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 8000e40:	2102      	movs	r1, #2
 8000e42:	201d      	movs	r0, #29
 8000e44:	f7ff ff10 	bl	8000c68 <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x04);  // coefficient for IIR filter, ideally low value for the dart
 8000e48:	2104      	movs	r1, #4
 8000e4a:	201f      	movs	r0, #31
 8000e4c:	f7ff ff0c 	bl	8000c68 <bmp388_write_reg>
}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	240001f4 	.word	0x240001f4

08000e5c <bmp388_read_raw_data>:

void bmp388_read_raw_data()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  uint8_t data[6];
  bmp388_read_reg(0x04, data, 6); // 0x04-0x06 pressure, 0x07-0x09 temperature
 8000e62:	463b      	mov	r3, r7
 8000e64:	2206      	movs	r2, #6
 8000e66:	4619      	mov	r1, r3
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f7ff ff23 	bl	8000cb4 <bmp388_read_reg>
  bmp388_rawData.pressure = (((int32_t)data[2] << 16) | ((int32_t)data[1] << 8) | ((int32_t)data[0]));
 8000e6e:	78bb      	ldrb	r3, [r7, #2]
 8000e70:	041a      	lsls	r2, r3, #16
 8000e72:	787b      	ldrb	r3, [r7, #1]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	4313      	orrs	r3, r2
 8000e78:	783a      	ldrb	r2, [r7, #0]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <bmp388_read_raw_data+0x44>)
 8000e80:	605a      	str	r2, [r3, #4]
  bmp388_rawData.temperature = (((int32_t)data[5] << 16) | ((int32_t)data[4] << 8) | ((int32_t)data[3]));
 8000e82:	797b      	ldrb	r3, [r7, #5]
 8000e84:	041a      	lsls	r2, r3, #16
 8000e86:	793b      	ldrb	r3, [r7, #4]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	78fa      	ldrb	r2, [r7, #3]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <bmp388_read_raw_data+0x44>)
 8000e94:	601a      	str	r2, [r3, #0]

}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	24000288 	.word	0x24000288

08000ea4 <bmp388_compensated_temperature>:

// the math performed in both functions are directly from the datasheet
static double bmp388_compensated_temperature(uint32_t raw_temp)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  double partial_data1 = (double)(raw_temp)-quantized_bmp388_calib.par_t1;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <bmp388_compensated_temperature+0x6c>)
 8000eb8:	ed93 7b00 	vldr	d7, [r3]
 8000ebc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ec0:	ed87 7b04 	vstr	d7, [r7, #16]
  double partial_data2 = partial_data1 * quantized_bmp388_calib.par_t2;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <bmp388_compensated_temperature+0x6c>)
 8000ec6:	ed93 7b02 	vldr	d7, [r3, #8]
 8000eca:	ed97 6b04 	vldr	d6, [r7, #16]
 8000ece:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ed2:	ed87 7b02 	vstr	d7, [r7, #8]
  quantized_bmp388_calib.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantized_bmp388_calib.par_t3;
 8000ed6:	ed97 7b04 	vldr	d7, [r7, #16]
 8000eda:	ee27 6b07 	vmul.f64	d6, d7, d7
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <bmp388_compensated_temperature+0x6c>)
 8000ee0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ee4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ee8:	ed97 7b02 	vldr	d7, [r7, #8]
 8000eec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <bmp388_compensated_temperature+0x6c>)
 8000ef2:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
  return quantized_bmp388_calib.t_lin;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <bmp388_compensated_temperature+0x6c>)
 8000ef8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8000efc:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f00:	eeb0 0b47 	vmov.f64	d0, d7
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	24000210 	.word	0x24000210

08000f14 <bmp388_compensated_pressure>:

static double bmp388_compensated_pressure(uint32_t raw_pressure)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b091      	sub	sp, #68	@ 0x44
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  double pressure;
  double partial_data1, partial_data2, partial_data3, partial_data4;
  double partial_out1, partial_out2;

  partial_data1 = quantized_bmp388_calib.par_p6 * quantized_bmp388_calib.t_lin;
 8000f1c:	4b6e      	ldr	r3, [pc, #440]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f1e:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 8000f22:	4b6d      	ldr	r3, [pc, #436]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f24:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000f28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f2c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p7 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000f30:	4b69      	ldr	r3, [pc, #420]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f32:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8000f36:	4b68      	ldr	r3, [pc, #416]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f38:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000f3c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f40:	4b65      	ldr	r3, [pc, #404]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f42:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000f46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f4a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p8 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000f4e:	4b62      	ldr	r3, [pc, #392]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f50:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8000f54:	4b60      	ldr	r3, [pc, #384]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f56:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000f5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f60:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000f64:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f68:	4b5b      	ldr	r3, [pc, #364]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f6a:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000f6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f72:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out1 = quantized_bmp388_calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8000f76:	4b58      	ldr	r3, [pc, #352]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f78:	ed93 6b0e 	vldr	d6, [r3, #56]	@ 0x38
 8000f7c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8000f80:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f84:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000f88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f8c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8000f90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f94:	ed87 7b08 	vstr	d7, [r7, #32]

  partial_data1 = quantized_bmp388_calib.par_p2 * quantized_bmp388_calib.t_lin;
 8000f98:	4b4f      	ldr	r3, [pc, #316]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000f9a:	ed93 6b08 	vldr	d6, [r3, #32]
 8000f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000fa0:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000fa4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fa8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p3 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000fac:	4b4a      	ldr	r3, [pc, #296]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000fae:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8000fb2:	4b49      	ldr	r3, [pc, #292]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000fb4:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000fb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fbc:	4b46      	ldr	r3, [pc, #280]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000fbe:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000fc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fc6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p4 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000fca:	4b43      	ldr	r3, [pc, #268]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000fcc:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8000fd0:	4b41      	ldr	r3, [pc, #260]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000fd2:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000fd6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fda:	4b3f      	ldr	r3, [pc, #252]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000fdc:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000fe0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000fe6:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000fea:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fee:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out2 = (double)raw_pressure * (quantized_bmp388_calib.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ffc:	4b36      	ldr	r3, [pc, #216]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8000ffe:	ed93 5b06 	vldr	d5, [r3, #24]
 8001002:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001006:	ee35 5b07 	vadd.f64	d5, d5, d7
 800100a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800100e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001012:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001016:	ee35 7b07 	vadd.f64	d7, d5, d7
 800101a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800101e:	ed87 7b06 	vstr	d7, [r7, #24]

  partial_data1 = (double)raw_pressure * (double)raw_pressure;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001036:	ee26 7b07 	vmul.f64	d7, d6, d7
 800103a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p9 + quantized_bmp388_calib.par_p10 * quantized_bmp388_calib.t_lin;
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8001040:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8001046:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800104a:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 800104c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001050:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001054:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001058:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = partial_data1 * partial_data2;
 800105c:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8001060:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001064:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001068:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_data4 = partial_data3 + ((double)raw_pressure * (double)raw_pressure * (double)raw_pressure) * quantized_bmp388_calib.par_p11;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001080:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800108e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <bmp388_compensated_pressure+0x1c4>)
 8001094:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8001098:	ee26 7b07 	vmul.f64	d7, d6, d7
 800109c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80010a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010a4:	ed87 7b04 	vstr	d7, [r7, #16]

  pressure = partial_out1 + partial_out2 + partial_data4;
 80010a8:	ed97 6b08 	vldr	d6, [r7, #32]
 80010ac:	ed97 7b06 	vldr	d7, [r7, #24]
 80010b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010b4:	ed97 6b04 	vldr	d6, [r7, #16]
 80010b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010bc:	ed87 7b02 	vstr	d7, [r7, #8]

  return pressure;
 80010c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010c8:	eeb0 0b47 	vmov.f64	d0, d7
 80010cc:	3744      	adds	r7, #68	@ 0x44
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	24000210 	.word	0x24000210
 80010dc:	00000000 	.word	0x00000000

080010e0 <bmp388_getAltitude>:
double bmp388_getAltitude(double pressure)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0b00 	vstr	d0, [r7]
	double altitude = 44330 * (1-pow(pressure/1019.0e2, 0.190294)); // pressure divided by pressure of sea level at austin
 80010ea:	ed97 7b00 	vldr	d7, [r7]
 80010ee:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8001130 <bmp388_getAltitude+0x50>
 80010f2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010f6:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 8001138 <bmp388_getAltitude+0x58>
 80010fa:	eeb0 0b46 	vmov.f64	d0, d6
 80010fe:	f00b fbbf 	bl	800c880 <pow>
 8001102:	eeb0 7b40 	vmov.f64	d7, d0
 8001106:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800110a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800110e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001140 <bmp388_getAltitude+0x60>
 8001112:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001116:	ed87 7b02 	vstr	d7, [r7, #8]
	return altitude;
 800111a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800111e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001122:	eeb0 0b47 	vmov.f64	d0, d7
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	00000000 	.word	0x00000000
 8001134:	40f8e0c0 	.word	0x40f8e0c0
 8001138:	c55000c9 	.word	0xc55000c9
 800113c:	3fc85b8d 	.word	0x3fc85b8d
 8001140:	00000000 	.word	0x00000000
 8001144:	40e5a540 	.word	0x40e5a540

08001148 <bmp388_getData>:

void bmp388_getData()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  bmp388_read_raw_data();
 800114c:	f7ff fe86 	bl	8000e5c <bmp388_read_raw_data>
  bmp388_processedData.temperature = bmp388_compensated_temperature(bmp388_rawData.temperature);
 8001150:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <bmp388_getData+0x4c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fea5 	bl	8000ea4 <bmp388_compensated_temperature>
 800115a:	eeb0 7b40 	vmov.f64	d7, d0
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <bmp388_getData+0x50>)
 8001160:	ed83 7b00 	vstr	d7, [r3]
  bmp388_processedData.pressure = bmp388_compensated_pressure(bmp388_rawData.pressure);
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <bmp388_getData+0x4c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fed3 	bl	8000f14 <bmp388_compensated_pressure>
 800116e:	eeb0 7b40 	vmov.f64	d7, d0
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <bmp388_getData+0x50>)
 8001174:	ed83 7b02 	vstr	d7, [r3, #8]
  altitude = bmp388_getAltitude(bmp388_processedData.pressure);
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <bmp388_getData+0x50>)
 800117a:	ed93 7b02 	vldr	d7, [r3, #8]
 800117e:	eeb0 0b47 	vmov.f64	d0, d7
 8001182:	f7ff ffad 	bl	80010e0 <bmp388_getAltitude>
 8001186:	eeb0 7b40 	vmov.f64	d7, d0
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <bmp388_getData+0x54>)
 800118c:	ed83 7b00 	vstr	d7, [r3]
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000288 	.word	0x24000288
 8001198:	24000290 	.word	0x24000290
 800119c:	240002a0 	.word	0x240002a0

080011a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00b      	beq.n	80011e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011c8:	e000      	b.n	80011cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80011ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f9      	beq.n	80011ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80011f6:	f000 fa87 	bl	8001708 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fa:	f001 f81f 	bl	800223c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fe:	f000 f847 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001202:	f000 fa0b 	bl	800161c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001206:	f000 f9bd 	bl	8001584 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800120a:	f000 f8bd 	bl	8001388 <MX_SPI1_Init>
  MX_TIM2_Init();
 800120e:	f000 f96b 	bl	80014e8 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001212:	f000 f911 	bl	8001438 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 8001216:	4819      	ldr	r0, [pc, #100]	@ (800127c <main+0x8c>)
 8001218:	f005 f934 	bl	8006484 <HAL_TIM_Base_Start_IT>
  char buffer[40] = {'\0'};
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2224      	movs	r2, #36	@ 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f007 febb 	bl	8008fa2 <memset>
  mpu9250_setup();
 800122c:	f000 fb00 	bl	8001830 <mpu9250_setup>
  bmp388_setup();
 8001230:	f7ff fd82 	bl	8000d38 <bmp388_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <main+0x90>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <main+0x5c>
	  {
		  timer_flag = 0;	//reset timer flag
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <main+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]

		  mpu9250_getProcessedAngle();
 8001244:	f000 fbc0 	bl	80019c8 <mpu9250_getProcessedAngle>
		  bmp388_getData();
 8001248:	f7ff ff7e 	bl	8001148 <bmp388_getData>
	  }

	  //send data through UART
	  //snprintf(buffer, sizeof(buffer), "%.4f,%.4f\n", pitch_angle, roll_angle);
	  snprintf(buffer, sizeof(buffer), "%lu, %lu\n", bmp388_rawData.temperature, bmp388_rawData.pressure);
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <main+0x94>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <main+0x94>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4638      	mov	r0, r7
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <main+0x98>)
 800125c:	2128      	movs	r1, #40	@ 0x28
 800125e:	f007 fe09 	bl	8008e74 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001262:	463b      	mov	r3, r7
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f88b 	bl	8000380 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	4639      	mov	r1, r7
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <main+0x9c>)
 8001276:	f005 fddf 	bl	8006e38 <HAL_UART_Transmit>
	  if(timer_flag)
 800127a:	e7db      	b.n	8001234 <main+0x44>
 800127c:	240003b8 	.word	0x240003b8
 8001280:	24000498 	.word	0x24000498
 8001284:	24000288 	.word	0x24000288
 8001288:	0800ce28 	.word	0x0800ce28
 800128c:	24000404 	.word	0x24000404

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b09c      	sub	sp, #112	@ 0x70
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	224c      	movs	r2, #76	@ 0x4c
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f007 fe7f 	bl	8008fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2220      	movs	r2, #32
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f007 fe79 	bl	8008fa2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012b0:	2002      	movs	r0, #2
 80012b2:	f001 fbd7 	bl	8002a64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <SystemClock_Config+0xf0>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a30      	ldr	r2, [pc, #192]	@ (8001380 <SystemClock_Config+0xf0>)
 80012c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012c4:	6193      	str	r3, [r2, #24]
 80012c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <SystemClock_Config+0xf0>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <SystemClock_Config+0xf4>)
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001384 <SystemClock_Config+0xf4>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012dc:	4b29      	ldr	r3, [pc, #164]	@ (8001384 <SystemClock_Config+0xf4>)
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012e8:	bf00      	nop
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <SystemClock_Config+0xf0>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012f6:	d1f8      	bne.n	80012ea <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f8:	2302      	movs	r3, #2
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001300:	2340      	movs	r3, #64	@ 0x40
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001308:	2300      	movs	r3, #0
 800130a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800130c:	2304      	movs	r3, #4
 800130e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001310:	233c      	movs	r3, #60	@ 0x3c
 8001312:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001318:	2305      	movs	r3, #5
 800131a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800131c:	2302      	movs	r3, #2
 800131e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001320:	230c      	movs	r3, #12
 8001322:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001324:	2300      	movs	r3, #0
 8001326:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fbd1 	bl	8002ad8 <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800133c:	f000 fa10 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001340:	233f      	movs	r3, #63	@ 0x3f
 8001342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001344:	2303      	movs	r3, #3
 8001346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800134c:	2308      	movs	r3, #8
 800134e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001350:	2340      	movs	r3, #64	@ 0x40
 8001352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001354:	2340      	movs	r3, #64	@ 0x40
 8001356:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800135e:	2340      	movs	r3, #64	@ 0x40
 8001360:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2104      	movs	r1, #4
 8001366:	4618      	mov	r0, r3
 8001368:	f002 f810 	bl	800338c <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001372:	f000 f9f5 	bl	8001760 <Error_Handler>
  }
}
 8001376:	bf00      	nop
 8001378:	3770      	adds	r7, #112	@ 0x70
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	58024800 	.word	0x58024800
 8001384:	58000400 	.word	0x58000400

08001388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <MX_SPI1_Init+0xa8>)
 800138e:	4a29      	ldr	r2, [pc, #164]	@ (8001434 <MX_SPI1_Init+0xac>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <MX_SPI1_Init+0xa8>)
 8001394:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <MX_SPI1_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013a2:	2207      	movs	r2, #7
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013a6:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013ec:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <MX_SPI1_Init+0xa8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_SPI1_Init+0xa8>)
 8001400:	2200      	movs	r2, #0
 8001402:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_SPI1_Init+0xa8>)
 8001406:	2200      	movs	r2, #0
 8001408:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_SPI1_Init+0xa8>)
 800140c:	2200      	movs	r2, #0
 800140e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_SPI1_Init+0xa8>)
 8001412:	2200      	movs	r2, #0
 8001414:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_SPI1_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_SPI1_Init+0xa8>)
 800141e:	f004 f96d 	bl	80056fc <HAL_SPI_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001428:	f000 f99a 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	240002a8 	.word	0x240002a8
 8001434:	40013000 	.word	0x40013000

08001438 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800143c:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 800143e:	4a29      	ldr	r2, [pc, #164]	@ (80014e4 <MX_SPI2_Init+0xac>)
 8001440:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001442:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001444:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001448:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800144a:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001450:	4b23      	ldr	r3, [pc, #140]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001452:	2207      	movs	r2, #7
 8001454:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001456:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001458:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800145c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800145e:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001460:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001464:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001468:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800146c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001470:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001474:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001488:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 800148a:	2200      	movs	r2, #0
 800148c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001490:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800149c:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_SPI2_Init+0xa8>)
 80014ce:	f004 f915 	bl	80056fc <HAL_SPI_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80014d8:	f000 f942 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	24000330 	.word	0x24000330
 80014e4:	40003800 	.word	0x40003800

080014e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001506:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <MX_TIM2_Init+0x98>)
 8001508:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <MX_TIM2_Init+0x98>)
 8001510:	f240 321f 	movw	r2, #799	@ 0x31f
 8001514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_TIM2_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_TIM2_Init+0x98>)
 800151e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_TIM2_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_TIM2_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001530:	4813      	ldr	r0, [pc, #76]	@ (8001580 <MX_TIM2_Init+0x98>)
 8001532:	f004 ff50 	bl	80063d6 <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800153c:	f000 f910 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001544:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4619      	mov	r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <MX_TIM2_Init+0x98>)
 800154e:	f005 f919 	bl	8006784 <HAL_TIM_ConfigClockSource>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001558:	f000 f902 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_TIM2_Init+0x98>)
 800156a:	f005 fb69 	bl	8006c40 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001574:	f000 f8f4 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	240003b8 	.word	0x240003b8

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <MX_USART2_UART_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015ce:	f005 fbe3 	bl	8006d98 <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f8c2 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015e0:	f006 fc79 	bl	8007ed6 <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 f8b9 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 80015f2:	f006 fcae 	bl	8007f52 <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 f8b0 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_USART2_UART_Init+0x90>)
 8001602:	f006 fc2f 	bl	8007e64 <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 f8a8 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	24000404 	.word	0x24000404
 8001618:	40004400 	.word	0x40004400

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_GPIO_Init+0x80>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a18      	ldr	r2, [pc, #96]	@ (800169c <MX_GPIO_Init+0x80>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_GPIO_Init+0x80>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <MX_GPIO_Init+0x80>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	4a11      	ldr	r2, [pc, #68]	@ (800169c <MX_GPIO_Init+0x80>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_GPIO_Init+0x80>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2160      	movs	r1, #96	@ 0x60
 8001672:	480b      	ldr	r0, [pc, #44]	@ (80016a0 <MX_GPIO_Init+0x84>)
 8001674:	f001 f9dc 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 8001678:	2360      	movs	r3, #96	@ 0x60
 800167a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4619      	mov	r1, r3
 800168e:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <MX_GPIO_Init+0x84>)
 8001690:	f001 f81e 	bl	80026d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58024400 	.word	0x58024400
 80016a0:	58020000 	.word	0x58020000

080016a4 <HAL_TIM_PeriodElapsedCallback>:
    double dt = current_time - previous_time;
    previous_time = current_time;  // Update for the next call
    return dt;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a06      	ldr	r2, [pc, #24]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
	}
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	240003b8 	.word	0x240003b8
 80016cc:	24000498 	.word	0x24000498

080016d0 <_write>:
int _write(int file, char *ptr, int len)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e009      	b.n	80016f6 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	60ba      	str	r2, [r7, #8]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fd58 	bl	80011a0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbf1      	blt.n	80016e2 <_write+0x12>
	}
	return len;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800170e:	463b      	mov	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800171a:	f000 ff61 	bl	80025e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800171e:	2301      	movs	r3, #1
 8001720:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001722:	2300      	movs	r3, #0
 8001724:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800172a:	231f      	movs	r3, #31
 800172c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800172e:	2387      	movs	r3, #135	@ 0x87
 8001730:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001732:	2300      	movs	r3, #0
 8001734:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001736:	2300      	movs	r3, #0
 8001738:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800173a:	2301      	movs	r3, #1
 800173c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800173e:	2301      	movs	r3, #1
 8001740:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800174a:	463b      	mov	r3, r7
 800174c:	4618      	mov	r0, r3
 800174e:	f000 ff7f 	bl	8002650 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001752:	2004      	movs	r0, #4
 8001754:	f000 ff5c 	bl	8002610 <HAL_MPU_Enable>

}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <Error_Handler+0x8>

0800176c <mpu9250_write_reg>:
IMU_ProcessedData_t imu_processed_data; // Instance of processed IMU data
IMU_Angles_t imu_angles;            // Instance of IMU angles
Mag_CalibData_t mag_calibration_data;

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	2120      	movs	r1, #32
 8001780:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <mpu9250_write_reg+0x44>)
 8001782:	f001 f955 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001786:	1df9      	adds	r1, r7, #7
 8001788:	2364      	movs	r3, #100	@ 0x64
 800178a:	2201      	movs	r2, #1
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <mpu9250_write_reg+0x48>)
 800178e:	f004 f8d9 	bl	8005944 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001792:	1db9      	adds	r1, r7, #6
 8001794:	2364      	movs	r3, #100	@ 0x64
 8001796:	2201      	movs	r2, #1
 8001798:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <mpu9250_write_reg+0x48>)
 800179a:	f004 f8d3 	bl	8005944 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	2120      	movs	r1, #32
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <mpu9250_write_reg+0x44>)
 80017a4:	f001 f944 	bl	8002a30 <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	58020000 	.word	0x58020000
 80017b4:	240002a8 	.word	0x240002a8

080017b8 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2120      	movs	r1, #32
 80017d6:	4814      	ldr	r0, [pc, #80]	@ (8001828 <mpu9250_read_reg+0x70>)
 80017d8:	f001 f92a 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80017dc:	f107 010e 	add.w	r1, r7, #14
 80017e0:	2364      	movs	r3, #100	@ 0x64
 80017e2:	2201      	movs	r2, #1
 80017e4:	4811      	ldr	r0, [pc, #68]	@ (800182c <mpu9250_read_reg+0x74>)
 80017e6:	f004 f8ad 	bl	8005944 <HAL_SPI_Transmit>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <mpu9250_read_reg+0x40>
		Error_Handler();
 80017f4:	f7ff ffb4 	bl	8001760 <Error_Handler>
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 80017f8:	79bb      	ldrb	r3, [r7, #6]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	2364      	movs	r3, #100	@ 0x64
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	480a      	ldr	r0, [pc, #40]	@ (800182c <mpu9250_read_reg+0x74>)
 8001802:	f004 fa8d 	bl	8005d20 <HAL_SPI_Receive>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <mpu9250_read_reg+0x5c>
		Error_Handler();
 8001810:	f7ff ffa6 	bl	8001760 <Error_Handler>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	2120      	movs	r1, #32
 8001818:	4803      	ldr	r0, [pc, #12]	@ (8001828 <mpu9250_read_reg+0x70>)
 800181a:	f001 f909 	bl	8002a30 <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	58020000 	.word	0x58020000
 800182c:	240002a8 	.word	0x240002a8

08001830 <mpu9250_setup>:

void mpu9250_setup()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001834:	2105      	movs	r1, #5
 8001836:	201a      	movs	r0, #26
 8001838:	f7ff ff98 	bl	800176c <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 800183c:	2110      	movs	r1, #16
 800183e:	201c      	movs	r0, #28
 8001840:	f7ff ff94 	bl	800176c <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001844:	2108      	movs	r1, #8
 8001846:	201b      	movs	r0, #27
 8001848:	f7ff ff90 	bl	800176c <mpu9250_write_reg>
	mpu9250_calibrateGyro(1500);
 800184c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001850:	f000 f802 	bl	8001858 <mpu9250_calibrateGyro>
//	// magnetometer setup
//	mpu9250_write_reg(0x6A, 0x20);
//	mpu9250_write_reg(0x24, 0x0D);
//	mpu9250_write_reg(0x25, 0x8C);
//	mpu9250_write_reg(0x26, 0x03);
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <mpu9250_calibrateGyro>:
    mpu9250_write_reg(0x26, 0x03);                   // Start at HXL register
    mpu9250_write_reg(0x27, 0x87);                   // Enable reading 7 bytes (0x80 | 7)
}

void mpu9250_calibrateGyro(uint16_t numCalPoints)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <mpu9250_calibrateGyro+0x20>
    {
        numCalPoints = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001878:	2300      	movs	r3, #0
 800187a:	817b      	strh	r3, [r7, #10]
 800187c:	e01c      	b.n	80018b8 <mpu9250_calibrateGyro+0x60>
    {
        mpu9250_getRawData();
 800187e:	f000 f855 	bl	800192c <mpu9250_getRawData>
        x += imu_raw_data.gyro_x;
 8001882:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <mpu9250_calibrateGyro+0xcc>)
 8001884:	88db      	ldrh	r3, [r3, #6]
 8001886:	b21b      	sxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
        y += imu_raw_data.gyro_y;
 8001890:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <mpu9250_calibrateGyro+0xcc>)
 8001892:	891b      	ldrh	r3, [r3, #8]
 8001894:	b21b      	sxth	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4413      	add	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        z += imu_raw_data.gyro_z;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <mpu9250_calibrateGyro+0xcc>)
 80018a0:	895b      	ldrh	r3, [r3, #10]
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 fd57 	bl	8002360 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80018b2:	897b      	ldrh	r3, [r7, #10]
 80018b4:	3301      	adds	r3, #1
 80018b6:	817b      	strh	r3, [r7, #10]
 80018b8:	897a      	ldrh	r2, [r7, #10]
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3de      	bcc.n	800187e <mpu9250_calibrateGyro+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    imu_processed_data.gyro_offX = (float)x / (float)numCalPoints;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <mpu9250_calibrateGyro+0xd0>)
 80018da:	edc3 7a00 	vstr	s15, [r3]
    imu_processed_data.gyro_offY = (float)y / (float)numCalPoints;
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <mpu9250_calibrateGyro+0xd0>)
 80018f8:	edc3 7a01 	vstr	s15, [r3, #4]
    imu_processed_data.gyro_offZ = (float)z / (float)numCalPoints;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <mpu9250_calibrateGyro+0xd0>)
 8001916:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2400049c 	.word	0x2400049c
 8001928:	240004b0 	.word	0x240004b0

0800192c <mpu9250_getRawData>:



void mpu9250_getRawData()
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8001932:	463b      	mov	r3, r7
 8001934:	2206      	movs	r2, #6
 8001936:	4619      	mov	r1, r3
 8001938:	203b      	movs	r0, #59	@ 0x3b
 800193a:	f7ff ff3d 	bl	80017b8 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 800193e:	783b      	ldrb	r3, [r7, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21a      	sxth	r2, r3
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21a      	sxth	r2, r3
 800194c:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <mpu9250_getRawData+0x94>)
 800194e:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b21a      	sxth	r2, r3
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	b21b      	sxth	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b21a      	sxth	r2, r3
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <mpu9250_getRawData+0x94>)
 8001960:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8001962:	793b      	ldrb	r3, [r7, #4]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b21a      	sxth	r2, r3
 8001968:	797b      	ldrb	r3, [r7, #5]
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b21a      	sxth	r2, r3
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <mpu9250_getRawData+0x94>)
 8001972:	809a      	strh	r2, [r3, #4]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 8001974:	463b      	mov	r3, r7
 8001976:	2206      	movs	r2, #6
 8001978:	4619      	mov	r1, r3
 800197a:	2043      	movs	r0, #67	@ 0x43
 800197c:	f7ff ff1c 	bl	80017b8 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8001980:	783b      	ldrb	r3, [r7, #0]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	b21a      	sxth	r2, r3
 8001986:	787b      	ldrb	r3, [r7, #1]
 8001988:	b21b      	sxth	r3, r3
 800198a:	4313      	orrs	r3, r2
 800198c:	b21a      	sxth	r2, r3
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <mpu9250_getRawData+0x94>)
 8001990:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001992:	78bb      	ldrb	r3, [r7, #2]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	b21b      	sxth	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b21a      	sxth	r2, r3
 80019a0:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <mpu9250_getRawData+0x94>)
 80019a2:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 80019a4:	793b      	ldrb	r3, [r7, #4]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <mpu9250_getRawData+0x94>)
 80019b4:	815a      	strh	r2, [r3, #10]
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2400049c 	.word	0x2400049c
 80019c4:	00000000 	.word	0x00000000

080019c8 <mpu9250_getProcessedAngle>:

void mpu9250_getProcessedAngle()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	ed2d 8b02 	vpush	{d8}
 80019ce:	af00      	add	r7, sp, #0
	  mpu9250_getRawData();
 80019d0:	f7ff ffac 	bl	800192c <mpu9250_getRawData>

	  imu_processed_data.accel_x = (float)imu_raw_data.accel_x/4096.0;
 80019d4:	4b76      	ldr	r3, [pc, #472]	@ (8001bb0 <mpu9250_getProcessedAngle+0x1e8>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80019e6:	ed9f 5b6c 	vldr	d5, [pc, #432]	@ 8001b98 <mpu9250_getProcessedAngle+0x1d0>
 80019ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019f2:	4b70      	ldr	r3, [pc, #448]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 80019f4:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.accel_y = (float)imu_raw_data.accel_y/4096.0;
 80019f8:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb0 <mpu9250_getProcessedAngle+0x1e8>)
 80019fa:	885b      	ldrh	r3, [r3, #2]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a06:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a0a:	ed9f 5b63 	vldr	d5, [pc, #396]	@ 8001b98 <mpu9250_getProcessedAngle+0x1d0>
 8001a0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a16:	4b67      	ldr	r3, [pc, #412]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001a18:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.accel_z = (float)imu_raw_data.accel_z/4096.0;
 8001a1c:	4b64      	ldr	r3, [pc, #400]	@ (8001bb0 <mpu9250_getProcessedAngle+0x1e8>)
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a2e:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8001b98 <mpu9250_getProcessedAngle+0x1d0>
 8001a32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a3a:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001a3c:	edc3 7a05 	vstr	s15, [r3, #20]
//	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0

	  imu_processed_data.gyro_x = ((float)imu_raw_data.gyro_x - imu_processed_data.gyro_offX)/65.5;
 8001a40:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb0 <mpu9250_getProcessedAngle+0x1e8>)
 8001a42:	88db      	ldrh	r3, [r3, #6]
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4e:	4b59      	ldr	r3, [pc, #356]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a58:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a5c:	ed9f 5b50 	vldr	d5, [pc, #320]	@ 8001ba0 <mpu9250_getProcessedAngle+0x1d8>
 8001a60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a68:	4b52      	ldr	r3, [pc, #328]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001a6a:	edc3 7a06 	vstr	s15, [r3, #24]
	  imu_processed_data.gyro_y = ((float)imu_raw_data.gyro_y - imu_processed_data.gyro_offY)/65.5;
 8001a6e:	4b50      	ldr	r3, [pc, #320]	@ (8001bb0 <mpu9250_getProcessedAngle+0x1e8>)
 8001a70:	891b      	ldrh	r3, [r3, #8]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001a7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a86:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a8a:	ed9f 5b45 	vldr	d5, [pc, #276]	@ 8001ba0 <mpu9250_getProcessedAngle+0x1d8>
 8001a8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a96:	4b47      	ldr	r3, [pc, #284]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001a98:	edc3 7a07 	vstr	s15, [r3, #28]
	  imu_processed_data.gyro_z = ((float)imu_raw_data.gyro_z - imu_processed_data.gyro_offZ)/65.5;
 8001a9c:	4b44      	ldr	r3, [pc, #272]	@ (8001bb0 <mpu9250_getProcessedAngle+0x1e8>)
 8001a9e:	895b      	ldrh	r3, [r3, #10]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aaa:	4b42      	ldr	r3, [pc, #264]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001aac:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ab8:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 8001ba0 <mpu9250_getProcessedAngle+0x1d8>
 8001abc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001ac6:	edc3 7a08 	vstr	s15, [r3, #32]
//	  mpu9250_read_reg(0x49, imu_data, sizeof(imu_data));
//	  imu_raw_data.mag_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
//	  imu_raw_data.mag_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
//	  imu_raw_data.mag_z = ((int16_t)imu_data[4]<<8) | imu_data[5];

	  imu_angles.roll=atan(imu_processed_data.accel_y/sqrt((imu_processed_data.accel_x*imu_processed_data.accel_x)+(imu_processed_data.accel_z*imu_processed_data.accel_z)))*1/(3.142/180);
 8001aca:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001acc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ad0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001ad4:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001ad6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ada:	4b36      	ldr	r3, [pc, #216]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001adc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae4:	4b33      	ldr	r3, [pc, #204]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001ae6:	edd3 6a05 	vldr	s13, [r3, #20]
 8001aea:	4b32      	ldr	r3, [pc, #200]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001aec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001afc:	eeb0 0b47 	vmov.f64	d0, d7
 8001b00:	f00a fd66 	bl	800c5d0 <sqrt>
 8001b04:	eeb0 6b40 	vmov.f64	d6, d0
 8001b08:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001b0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b10:	f00a fd7e 	bl	800c610 <atan>
 8001b14:	eeb0 6b40 	vmov.f64	d6, d0
 8001b18:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 8001ba8 <mpu9250_getProcessedAngle+0x1e0>
 8001b1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b24:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <mpu9250_getProcessedAngle+0x1f0>)
 8001b26:	edc3 7a00 	vstr	s15, [r3]
	  imu_angles.pitch=-atan(imu_processed_data.accel_x/sqrt((imu_processed_data.accel_y*imu_processed_data.accel_y)+(imu_processed_data.accel_z*imu_processed_data.accel_z)))*1/(3.142/180);
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001b2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b30:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001b34:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001b36:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001b3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001b46:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <mpu9250_getProcessedAngle+0x1ec>)
 8001b4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b5c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b60:	f00a fd36 	bl	800c5d0 <sqrt>
 8001b64:	eeb0 6b40 	vmov.f64	d6, d0
 8001b68:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001b6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b70:	f00a fd4e 	bl	800c610 <atan>
 8001b74:	eeb0 7b40 	vmov.f64	d7, d0
 8001b78:	eeb1 6b47 	vneg.f64	d6, d7
 8001b7c:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8001ba8 <mpu9250_getProcessedAngle+0x1e0>
 8001b80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <mpu9250_getProcessedAngle+0x1f0>)
 8001b8a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	ecbd 8b02 	vpop	{d8}
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40b00000 	.word	0x40b00000
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40506000 	.word	0x40506000
 8001ba8:	80fa7e3f 	.word	0x80fa7e3f
 8001bac:	3f91dfde 	.word	0x3f91dfde
 8001bb0:	2400049c 	.word	0x2400049c
 8001bb4:	240004b0 	.word	0x240004b0
 8001bb8:	240004e0 	.word	0x240004e0

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_MspInit+0x30>)
 8001bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bc8:	4a08      	ldr	r2, [pc, #32]	@ (8001bec <HAL_MspInit+0x30>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_MspInit+0x30>)
 8001bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	58024400 	.word	0x58024400

08001bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0be      	sub	sp, #248	@ 0xf8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c08:	f107 0320 	add.w	r3, r7, #32
 8001c0c:	22c0      	movs	r2, #192	@ 0xc0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f007 f9c6 	bl	8008fa2 <memset>
  if(hspi->Instance==SPI1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	@ (8001de0 <HAL_SPI_MspInit+0x1f0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d16a      	bne.n	8001cf6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c32:	f107 0320 	add.w	r3, r7, #32
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 ff34 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001c42:	f7ff fd8d 	bl	8001760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c46:	4b67      	ldr	r3, [pc, #412]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c4c:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c56:	4b63      	ldr	r3, [pc, #396]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b5f      	ldr	r3, [pc, #380]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c74:	4b5b      	ldr	r3, [pc, #364]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b58      	ldr	r3, [pc, #352]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c88:	4a56      	ldr	r2, [pc, #344]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c92:	4b54      	ldr	r3, [pc, #336]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb8:	2305      	movs	r3, #5
 8001cba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4848      	ldr	r0, [pc, #288]	@ (8001de8 <HAL_SPI_MspInit+0x1f8>)
 8001cc6:	f000 fd03 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001cca:	2318      	movs	r3, #24
 8001ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cec:	4619      	mov	r1, r3
 8001cee:	483f      	ldr	r0, [pc, #252]	@ (8001dec <HAL_SPI_MspInit+0x1fc>)
 8001cf0:	f000 fcee 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cf4:	e070      	b.n	8001dd8 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001df0 <HAL_SPI_MspInit+0x200>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d16b      	bne.n	8001dd8 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001d00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d12:	f107 0320 	add.w	r3, r7, #32
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fec4 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001d22:	f7ff fd1d 	bl	8001760 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d26:	4b2f      	ldr	r3, [pc, #188]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d36:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	4b27      	ldr	r3, [pc, #156]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4a:	4a26      	ldr	r2, [pc, #152]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d68:	4a1e      	ldr	r2, [pc, #120]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d72:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <HAL_SPI_MspInit+0x1f4>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d80:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4811      	ldr	r0, [pc, #68]	@ (8001dec <HAL_SPI_MspInit+0x1fc>)
 8001da8:	f000 fc92 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001db0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <HAL_SPI_MspInit+0x1f8>)
 8001dd4:	f000 fc7c 	bl	80026d0 <HAL_GPIO_Init>
}
 8001dd8:	bf00      	nop
 8001dda:	37f8      	adds	r7, #248	@ 0xf8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013000 	.word	0x40013000
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58020000 	.word	0x58020000
 8001dec:	58020400 	.word	0x58020400
 8001df0:	40003800 	.word	0x40003800

08001df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e04:	d116      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <HAL_TIM_Base_MspInit+0x48>)
 8001e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <HAL_TIM_Base_MspInit+0x48>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_TIM_Base_MspInit+0x48>)
 8001e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	201c      	movs	r0, #28
 8001e2a:	f000 fba4 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e2e:	201c      	movs	r0, #28
 8001e30:	f000 fbbb 	bl	80025aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	58024400 	.word	0x58024400

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0ba      	sub	sp, #232	@ 0xe8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	22c0      	movs	r2, #192	@ 0xc0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f007 f89e 	bl	8008fa2 <memset>
  if(huart->Instance==USART2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a26      	ldr	r2, [pc, #152]	@ (8001f04 <HAL_UART_MspInit+0xc4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d145      	bne.n	8001efc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e70:	f04f 0202 	mov.w	r2, #2
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 fe0c 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e92:	f7ff fc65 	bl	8001760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e96:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <HAL_UART_MspInit+0xc8>)
 8001e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f08 <HAL_UART_MspInit+0xc8>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ea6:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <HAL_UART_MspInit+0xc8>)
 8001ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_UART_MspInit+0xc8>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <HAL_UART_MspInit+0xc8>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec4:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <HAL_UART_MspInit+0xc8>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eea:	2307      	movs	r3, #7
 8001eec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <HAL_UART_MspInit+0xcc>)
 8001ef8:	f000 fbea 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001efc:	bf00      	nop
 8001efe:	37e8      	adds	r7, #232	@ 0xe8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40004400 	.word	0x40004400
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	58020000 	.word	0x58020000

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <NMI_Handler+0x4>

08001f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <MemManage_Handler+0x4>

08001f28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f66:	f000 f9db 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <TIM2_IRQHandler+0x10>)
 8001f76:	f004 fafd 	bl	8006574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	240003b8 	.word	0x240003b8

08001f84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return 1;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_kill>:

int _kill(int pid, int sig)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f9e:	f007 f853 	bl	8009048 <__errno>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2216      	movs	r2, #22
 8001fa6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_exit>:

void _exit (int status)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ffe7 	bl	8001f94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fc6:	bf00      	nop
 8001fc8:	e7fd      	b.n	8001fc6 <_exit+0x12>

08001fca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e00a      	b.n	8001ff2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fdc:	f3af 8000 	nop.w
 8001fe0:	4601      	mov	r1, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	60ba      	str	r2, [r7, #8]
 8001fe8:	b2ca      	uxtb	r2, r1
 8001fea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbf0      	blt.n	8001fdc <_read+0x12>
  }

  return len;
 8001ffa:	687b      	ldr	r3, [r7, #4]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800202c:	605a      	str	r2, [r3, #4]
  return 0;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_isatty>:

int _isatty(int file)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002044:	2301      	movs	r3, #1
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f006 ffd4 	bl	8009048 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	24080000 	.word	0x24080000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	240004e8 	.word	0x240004e8
 80020d4:	24000640 	.word	0x24000640

080020d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020dc:	4b37      	ldr	r3, [pc, #220]	@ (80021bc <SystemInit+0xe4>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	4a36      	ldr	r2, [pc, #216]	@ (80021bc <SystemInit+0xe4>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020ec:	4b34      	ldr	r3, [pc, #208]	@ (80021c0 <SystemInit+0xe8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	2b06      	cmp	r3, #6
 80020f6:	d807      	bhi.n	8002108 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020f8:	4b31      	ldr	r3, [pc, #196]	@ (80021c0 <SystemInit+0xe8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 030f 	bic.w	r3, r3, #15
 8002100:	4a2f      	ldr	r2, [pc, #188]	@ (80021c0 <SystemInit+0xe8>)
 8002102:	f043 0307 	orr.w	r3, r3, #7
 8002106:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002108:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <SystemInit+0xec>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <SystemInit+0xec>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002114:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <SystemInit+0xec>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <SystemInit+0xec>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4929      	ldr	r1, [pc, #164]	@ (80021c4 <SystemInit+0xec>)
 8002120:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <SystemInit+0xf0>)
 8002122:	4013      	ands	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002126:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <SystemInit+0xe8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002132:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <SystemInit+0xe8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 030f 	bic.w	r3, r3, #15
 800213a:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <SystemInit+0xe8>)
 800213c:	f043 0307 	orr.w	r3, r3, #7
 8002140:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <SystemInit+0xec>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <SystemInit+0xec>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800214e:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <SystemInit+0xec>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <SystemInit+0xec>)
 8002156:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <SystemInit+0xf4>)
 8002158:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <SystemInit+0xec>)
 800215c:	4a1c      	ldr	r2, [pc, #112]	@ (80021d0 <SystemInit+0xf8>)
 800215e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002160:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <SystemInit+0xec>)
 8002162:	4a1c      	ldr	r2, [pc, #112]	@ (80021d4 <SystemInit+0xfc>)
 8002164:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <SystemInit+0xec>)
 8002168:	2200      	movs	r2, #0
 800216a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800216c:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <SystemInit+0xec>)
 800216e:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <SystemInit+0xfc>)
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <SystemInit+0xec>)
 8002174:	2200      	movs	r2, #0
 8002176:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <SystemInit+0xec>)
 800217a:	4a16      	ldr	r2, [pc, #88]	@ (80021d4 <SystemInit+0xfc>)
 800217c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <SystemInit+0xec>)
 8002180:	2200      	movs	r2, #0
 8002182:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <SystemInit+0xec>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0e      	ldr	r2, [pc, #56]	@ (80021c4 <SystemInit+0xec>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <SystemInit+0xec>)
 8002192:	2200      	movs	r2, #0
 8002194:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <SystemInit+0x100>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <SystemInit+0x104>)
 800219c:	4013      	ands	r3, r2
 800219e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021a2:	d202      	bcs.n	80021aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <SystemInit+0x108>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <SystemInit+0x10c>)
 80021ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80021b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00
 80021c0:	52002000 	.word	0x52002000
 80021c4:	58024400 	.word	0x58024400
 80021c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80021cc:	02020200 	.word	0x02020200
 80021d0:	01ff0000 	.word	0x01ff0000
 80021d4:	01010280 	.word	0x01010280
 80021d8:	5c001000 	.word	0x5c001000
 80021dc:	ffff0000 	.word	0xffff0000
 80021e0:	51008108 	.word	0x51008108
 80021e4:	52004000 	.word	0x52004000

080021e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002220 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021ec:	f7ff ff74 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f0:	480c      	ldr	r0, [pc, #48]	@ (8002224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021f2:	490d      	ldr	r1, [pc, #52]	@ (8002228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002208:	4c0a      	ldr	r4, [pc, #40]	@ (8002234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002216:	f006 ff1d 	bl	8009054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7fe ffe9 	bl	80011f0 <main>
  bx  lr
 800221e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002220:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002224:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002228:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800222c:	0800eba0 	.word	0x0800eba0
  ldr r2, =_sbss
 8002230:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002234:	2400063c 	.word	0x2400063c

08002238 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC3_IRQHandler>
	...

0800223c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002242:	2003      	movs	r0, #3
 8002244:	f000 f98c 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002248:	f001 fa56 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_Init+0x68>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	4913      	ldr	r1, [pc, #76]	@ (80022a8 <HAL_Init+0x6c>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
 8002264:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002266:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_Init+0x68>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	4a0e      	ldr	r2, [pc, #56]	@ (80022a8 <HAL_Init+0x6c>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	4a0b      	ldr	r2, [pc, #44]	@ (80022ac <HAL_Init+0x70>)
 800227e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002280:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <HAL_Init+0x74>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002286:	200f      	movs	r0, #15
 8002288:	f000 f814 	bl	80022b4 <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e002      	b.n	800229c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002296:	f7ff fc91 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	58024400 	.word	0x58024400
 80022a8:	0800ce34 	.word	0x0800ce34
 80022ac:	24000004 	.word	0x24000004
 80022b0:	24000000 	.word	0x24000000

080022b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022bc:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <HAL_InitTick+0x60>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e021      	b.n	800230c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_InitTick+0x64>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <HAL_InitTick+0x60>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f971 	bl	80025c6 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f93b 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	@ (800231c <HAL_InitTick+0x68>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2400000c 	.word	0x2400000c
 8002318:	24000000 	.word	0x24000000
 800231c:	24000008 	.word	0x24000008

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	2400000c 	.word	0x2400000c
 8002344:	240004ec 	.word	0x240004ec

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	240004ec 	.word	0x240004ec

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2400000c 	.word	0x2400000c

080023a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023ac:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_GetREVID+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0c1b      	lsrs	r3, r3, #16
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	5c001000 	.word	0x5c001000

080023c0 <__NVIC_SetPriorityGrouping>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <__NVIC_SetPriorityGrouping+0x40>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <__NVIC_SetPriorityGrouping+0x40>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00
 8002404:	05fa0000 	.word	0x05fa0000

08002408 <__NVIC_GetPriorityGrouping>:
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	@ (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	@ (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	@ (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	@ 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	@ (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff40 	bl	8002408 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff90 	bl	80024b4 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5f 	bl	8002460 <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff33 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffa4 	bl	800251c <SysTick_Config>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80025e4:	f3bf 8f5f 	dmb	sy
}
 80025e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <HAL_MPU_Disable+0x28>)
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	4a06      	ldr	r2, [pc, #24]	@ (8002608 <HAL_MPU_Disable+0x28>)
 80025f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80025f6:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_MPU_Disable+0x2c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00
 800260c:	e000ed90 	.word	0xe000ed90

08002610 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <HAL_MPU_Enable+0x38>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <HAL_MPU_Enable+0x3c>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	4a09      	ldr	r2, [pc, #36]	@ (800264c <HAL_MPU_Enable+0x3c>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800262e:	f3bf 8f4f 	dsb	sy
}
 8002632:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002634:	f3bf 8f6f 	isb	sy
}
 8002638:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000ed90 	.word	0xe000ed90
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	785a      	ldrb	r2, [r3, #1]
 800265c:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <HAL_MPU_ConfigRegion+0x7c>)
 800265e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <HAL_MPU_ConfigRegion+0x7c>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a19      	ldr	r2, [pc, #100]	@ (80026cc <HAL_MPU_ConfigRegion+0x7c>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800266c:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <HAL_MPU_ConfigRegion+0x7c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7b1b      	ldrb	r3, [r3, #12]
 8002678:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7adb      	ldrb	r3, [r3, #11]
 800267e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002680:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7a9b      	ldrb	r3, [r3, #10]
 8002686:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002688:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7b5b      	ldrb	r3, [r3, #13]
 800268e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002690:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7b9b      	ldrb	r3, [r3, #14]
 8002696:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002698:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7bdb      	ldrb	r3, [r3, #15]
 800269e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7a5b      	ldrb	r3, [r3, #9]
 80026a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7a1b      	ldrb	r3, [r3, #8]
 80026ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026b8:	4a04      	ldr	r2, [pc, #16]	@ (80026cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026bc:	6113      	str	r3, [r2, #16]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed90 	.word	0xe000ed90

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026de:	4b89      	ldr	r3, [pc, #548]	@ (8002904 <HAL_GPIO_Init+0x234>)
 80026e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026e2:	e194      	b.n	8002a0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8186 	beq.w	8002a08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d005      	beq.n	8002714 <HAL_GPIO_Init+0x44>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d130      	bne.n	8002776 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274a:	2201      	movs	r2, #1
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	f003 0201 	and.w	r2, r3, #1
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b03      	cmp	r3, #3
 8002780:	d017      	beq.n	80027b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d123      	bne.n	8002806 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	08da      	lsrs	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3208      	adds	r2, #8
 80027c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	08da      	lsrs	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3208      	adds	r2, #8
 8002800:	69b9      	ldr	r1, [r7, #24]
 8002802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0203 	and.w	r2, r3, #3
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80e0 	beq.w	8002a08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002848:	4b2f      	ldr	r3, [pc, #188]	@ (8002908 <HAL_GPIO_Init+0x238>)
 800284a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800284e:	4a2e      	ldr	r2, [pc, #184]	@ (8002908 <HAL_GPIO_Init+0x238>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_GPIO_Init+0x238>)
 800285a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002866:	4a29      	ldr	r2, [pc, #164]	@ (800290c <HAL_GPIO_Init+0x23c>)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a20      	ldr	r2, [pc, #128]	@ (8002910 <HAL_GPIO_Init+0x240>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d052      	beq.n	8002938 <HAL_GPIO_Init+0x268>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1f      	ldr	r2, [pc, #124]	@ (8002914 <HAL_GPIO_Init+0x244>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d031      	beq.n	80028fe <HAL_GPIO_Init+0x22e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1e      	ldr	r2, [pc, #120]	@ (8002918 <HAL_GPIO_Init+0x248>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d02b      	beq.n	80028fa <HAL_GPIO_Init+0x22a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_GPIO_Init+0x24c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d025      	beq.n	80028f6 <HAL_GPIO_Init+0x226>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002920 <HAL_GPIO_Init+0x250>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01f      	beq.n	80028f2 <HAL_GPIO_Init+0x222>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002924 <HAL_GPIO_Init+0x254>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d019      	beq.n	80028ee <HAL_GPIO_Init+0x21e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002928 <HAL_GPIO_Init+0x258>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_GPIO_Init+0x21a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a19      	ldr	r2, [pc, #100]	@ (800292c <HAL_GPIO_Init+0x25c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00d      	beq.n	80028e6 <HAL_GPIO_Init+0x216>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <HAL_GPIO_Init+0x260>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <HAL_GPIO_Init+0x212>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <HAL_GPIO_Init+0x264>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_GPIO_Init+0x20e>
 80028da:	2309      	movs	r3, #9
 80028dc:	e02d      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028de:	230a      	movs	r3, #10
 80028e0:	e02b      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028e2:	2308      	movs	r3, #8
 80028e4:	e029      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028e6:	2307      	movs	r3, #7
 80028e8:	e027      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028ea:	2306      	movs	r3, #6
 80028ec:	e025      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028ee:	2305      	movs	r3, #5
 80028f0:	e023      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e021      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e01f      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e01d      	b.n	800293a <HAL_GPIO_Init+0x26a>
 80028fe:	2301      	movs	r3, #1
 8002900:	e01b      	b.n	800293a <HAL_GPIO_Init+0x26a>
 8002902:	bf00      	nop
 8002904:	58000080 	.word	0x58000080
 8002908:	58024400 	.word	0x58024400
 800290c:	58000400 	.word	0x58000400
 8002910:	58020000 	.word	0x58020000
 8002914:	58020400 	.word	0x58020400
 8002918:	58020800 	.word	0x58020800
 800291c:	58020c00 	.word	0x58020c00
 8002920:	58021000 	.word	0x58021000
 8002924:	58021400 	.word	0x58021400
 8002928:	58021800 	.word	0x58021800
 800292c:	58021c00 	.word	0x58021c00
 8002930:	58022000 	.word	0x58022000
 8002934:	58022400 	.word	0x58022400
 8002938:	2300      	movs	r3, #0
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	f002 0203 	and.w	r2, r2, #3
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	4093      	lsls	r3, r2
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800294a:	4938      	ldr	r1, [pc, #224]	@ (8002a2c <HAL_GPIO_Init+0x35c>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800297e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f ae63 	bne.w	80026e4 <HAL_GPIO_Init+0x14>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	3724      	adds	r7, #36	@ 0x24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	58000400 	.word	0x58000400

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a4c:	e003      	b.n	8002a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	619a      	str	r2, [r3, #24]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d00a      	beq.n	8002a8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a78:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e01f      	b.n	8002aca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e01d      	b.n	8002aca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f023 0207 	bic.w	r2, r3, #7
 8002a96:	490f      	ldr	r1, [pc, #60]	@ (8002ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a9e:	f7ff fc53 	bl	8002348 <HAL_GetTick>
 8002aa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aa4:	e009      	b.n	8002aba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002aa6:	f7ff fc4f 	bl	8002348 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ab4:	d901      	bls.n	8002aba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e007      	b.n	8002aca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	58024800 	.word	0x58024800

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	@ 0x30
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f000 bc48 	b.w	800337c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8088 	beq.w	8002c0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afa:	4b99      	ldr	r3, [pc, #612]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b04:	4b96      	ldr	r3, [pc, #600]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d007      	beq.n	8002b20 <HAL_RCC_OscConfig+0x48>
 8002b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b12:	2b18      	cmp	r3, #24
 8002b14:	d111      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
 8002b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d10c      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4b8f      	ldr	r3, [pc, #572]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d06d      	beq.n	8002c08 <HAL_RCC_OscConfig+0x130>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d169      	bne.n	8002c08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f000 bc21 	b.w	800337c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x7a>
 8002b44:	4b86      	ldr	r3, [pc, #536]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a85      	ldr	r2, [pc, #532]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e02e      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x9c>
 8002b5a:	4b81      	ldr	r3, [pc, #516]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a80      	ldr	r2, [pc, #512]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b7e      	ldr	r3, [pc, #504]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002b7e:	4b78      	ldr	r3, [pc, #480]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a77      	ldr	r2, [pc, #476]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b75      	ldr	r3, [pc, #468]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a74      	ldr	r2, [pc, #464]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b98:	4b71      	ldr	r3, [pc, #452]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a70      	ldr	r2, [pc, #448]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b6e      	ldr	r3, [pc, #440]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6d      	ldr	r2, [pc, #436]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff fbc6 	bl	8002348 <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff fbc2 	bl	8002348 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e3d4      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7ff fbb2 	bl	8002348 <HAL_GetTick>
 8002be4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7ff fbae 	bl	8002348 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e3c0      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bfa:	4b59      	ldr	r3, [pc, #356]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x110>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80ca 	beq.w	8002dac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c18:	4b51      	ldr	r3, [pc, #324]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c22:	4b4f      	ldr	r3, [pc, #316]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_RCC_OscConfig+0x166>
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2b18      	cmp	r3, #24
 8002c32:	d156      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x20a>
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d151      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c3e:	4b48      	ldr	r3, [pc, #288]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e392      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c56:	4b42      	ldr	r3, [pc, #264]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0219 	bic.w	r2, r3, #25
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	493f      	ldr	r1, [pc, #252]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7ff fb6e 	bl	8002348 <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7ff fb6a 	bl	8002348 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e37c      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c82:	4b37      	ldr	r3, [pc, #220]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	f7ff fb8b 	bl	80023a8 <HAL_GetREVID>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d817      	bhi.n	8002ccc <HAL_RCC_OscConfig+0x1f4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b40      	cmp	r3, #64	@ 0x40
 8002ca2:	d108      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
 8002ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002cac:	4a2c      	ldr	r2, [pc, #176]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb4:	e07a      	b.n	8002dac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	031b      	lsls	r3, r3, #12
 8002cc4:	4926      	ldr	r1, [pc, #152]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cca:	e06f      	b.n	8002dac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	4921      	ldr	r1, [pc, #132]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce0:	e064      	b.n	8002dac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d047      	beq.n	8002d7a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cea:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 0219 	bic.w	r2, r3, #25
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	491a      	ldr	r1, [pc, #104]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fb24 	bl	8002348 <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7ff fb20 	bl	8002348 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e332      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	f7ff fb41 	bl	80023a8 <HAL_GetREVID>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d819      	bhi.n	8002d64 <HAL_RCC_OscConfig+0x28c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b40      	cmp	r3, #64	@ 0x40
 8002d36:	d108      	bne.n	8002d4a <HAL_RCC_OscConfig+0x272>
 8002d38:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d40:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d46:	6053      	str	r3, [r2, #4]
 8002d48:	e030      	b.n	8002dac <HAL_RCC_OscConfig+0x2d4>
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	031b      	lsls	r3, r3, #12
 8002d58:	4901      	ldr	r1, [pc, #4]	@ (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
 8002d5e:	e025      	b.n	8002dac <HAL_RCC_OscConfig+0x2d4>
 8002d60:	58024400 	.word	0x58024400
 8002d64:	4b9a      	ldr	r3, [pc, #616]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	4997      	ldr	r1, [pc, #604]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	e018      	b.n	8002dac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b95      	ldr	r3, [pc, #596]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a94      	ldr	r2, [pc, #592]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7ff fadf 	bl	8002348 <HAL_GetTick>
 8002d8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7ff fadb 	bl	8002348 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e2ed      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da0:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a9 	beq.w	8002f0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dba:	4b85      	ldr	r3, [pc, #532]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dc4:	4b82      	ldr	r3, [pc, #520]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d007      	beq.n	8002de0 <HAL_RCC_OscConfig+0x308>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b18      	cmp	r3, #24
 8002dd4:	d13a      	bne.n	8002e4c <HAL_RCC_OscConfig+0x374>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d135      	bne.n	8002e4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002de0:	4b7b      	ldr	r3, [pc, #492]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_OscConfig+0x320>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	2b80      	cmp	r3, #128	@ 0x80
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e2c1      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002df8:	f7ff fad6 	bl	80023a8 <HAL_GetREVID>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d817      	bhi.n	8002e36 <HAL_RCC_OscConfig+0x35e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d108      	bne.n	8002e20 <HAL_RCC_OscConfig+0x348>
 8002e0e:	4b70      	ldr	r3, [pc, #448]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e16:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e1e:	e075      	b.n	8002f0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e20:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	069b      	lsls	r3, r3, #26
 8002e2e:	4968      	ldr	r1, [pc, #416]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e34:	e06a      	b.n	8002f0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e36:	4b66      	ldr	r3, [pc, #408]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	061b      	lsls	r3, r3, #24
 8002e44:	4962      	ldr	r1, [pc, #392]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e4a:	e05f      	b.n	8002f0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d042      	beq.n	8002eda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e54:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff fa72 	bl	8002348 <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e68:	f7ff fa6e 	bl	8002348 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e280      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e7a:	4b55      	ldr	r3, [pc, #340]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e86:	f7ff fa8f 	bl	80023a8 <HAL_GetREVID>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d817      	bhi.n	8002ec4 <HAL_RCC_OscConfig+0x3ec>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d108      	bne.n	8002eae <HAL_RCC_OscConfig+0x3d6>
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ea6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002eaa:	6053      	str	r3, [r2, #4]
 8002eac:	e02e      	b.n	8002f0c <HAL_RCC_OscConfig+0x434>
 8002eae:	4b48      	ldr	r3, [pc, #288]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	069b      	lsls	r3, r3, #26
 8002ebc:	4944      	ldr	r1, [pc, #272]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
 8002ec2:	e023      	b.n	8002f0c <HAL_RCC_OscConfig+0x434>
 8002ec4:	4b42      	ldr	r3, [pc, #264]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	493f      	ldr	r1, [pc, #252]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60cb      	str	r3, [r1, #12]
 8002ed8:	e018      	b.n	8002f0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002eda:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7ff fa2f 	bl	8002348 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002eee:	f7ff fa2b 	bl	8002348 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e23d      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f00:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d036      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f20:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f24:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7ff fa0c 	bl	8002348 <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f34:	f7ff fa08 	bl	8002348 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e21a      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f46:	4b22      	ldr	r3, [pc, #136]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x45c>
 8002f52:	e018      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f54:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f58:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7ff f9f2 	bl	8002348 <HAL_GetTick>
 8002f64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7ff f9ee 	bl	8002348 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e200      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d039      	beq.n	8003006 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002fa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fa6:	f7ff f9cf 	bl	8002348 <HAL_GetTick>
 8002faa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fae:	f7ff f9cb 	bl	8002348 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e1dd      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fc0:	4b03      	ldr	r3, [pc, #12]	@ (8002fd0 <HAL_RCC_OscConfig+0x4f8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x4d6>
 8002fcc:	e01b      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
 8002fce:	bf00      	nop
 8002fd0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fd4:	4b9b      	ldr	r3, [pc, #620]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a9a      	ldr	r2, [pc, #616]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8002fda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fe0:	f7ff f9b2 	bl	8002348 <HAL_GetTick>
 8002fe4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fe8:	f7ff f9ae 	bl	8002348 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1c0      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ffa:	4b92      	ldr	r3, [pc, #584]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8081 	beq.w	8003116 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003014:	4b8c      	ldr	r3, [pc, #560]	@ (8003248 <HAL_RCC_OscConfig+0x770>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a8b      	ldr	r2, [pc, #556]	@ (8003248 <HAL_RCC_OscConfig+0x770>)
 800301a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003020:	f7ff f992 	bl	8002348 <HAL_GetTick>
 8003024:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003028:	f7ff f98e 	bl	8002348 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	@ 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1a0      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800303a:	4b83      	ldr	r3, [pc, #524]	@ (8003248 <HAL_RCC_OscConfig+0x770>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x584>
 800304e:	4b7d      	ldr	r3, [pc, #500]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	4a7c      	ldr	r2, [pc, #496]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6713      	str	r3, [r2, #112]	@ 0x70
 800305a:	e02d      	b.n	80030b8 <HAL_RCC_OscConfig+0x5e0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10c      	bne.n	800307e <HAL_RCC_OscConfig+0x5a6>
 8003064:	4b77      	ldr	r3, [pc, #476]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	4a76      	ldr	r2, [pc, #472]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003070:	4b74      	ldr	r3, [pc, #464]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003074:	4a73      	ldr	r2, [pc, #460]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003076:	f023 0304 	bic.w	r3, r3, #4
 800307a:	6713      	str	r3, [r2, #112]	@ 0x70
 800307c:	e01c      	b.n	80030b8 <HAL_RCC_OscConfig+0x5e0>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b05      	cmp	r3, #5
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x5c8>
 8003086:	4b6f      	ldr	r3, [pc, #444]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	4a6e      	ldr	r2, [pc, #440]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6713      	str	r3, [r2, #112]	@ 0x70
 8003092:	4b6c      	ldr	r3, [pc, #432]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	4a6b      	ldr	r2, [pc, #428]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	@ 0x70
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0x5e0>
 80030a0:	4b68      	ldr	r3, [pc, #416]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	4a67      	ldr	r2, [pc, #412]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ac:	4b65      	ldr	r3, [pc, #404]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a64      	ldr	r2, [pc, #400]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80030b2:	f023 0304 	bic.w	r3, r3, #4
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d015      	beq.n	80030ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7ff f942 	bl	8002348 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7ff f93e 	bl	8002348 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e14e      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030de:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ee      	beq.n	80030c8 <HAL_RCC_OscConfig+0x5f0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7ff f92c 	bl	8002348 <HAL_GetTick>
 80030f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030f2:	e00a      	b.n	800310a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7ff f928 	bl	8002348 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e138      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800310a:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ee      	bne.n	80030f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 812d 	beq.w	800337a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003120:	4b48      	ldr	r3, [pc, #288]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003128:	2b18      	cmp	r3, #24
 800312a:	f000 80bd 	beq.w	80032a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	2b02      	cmp	r3, #2
 8003134:	f040 809e 	bne.w	8003274 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a41      	ldr	r2, [pc, #260]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7ff f900 	bl	8002348 <HAL_GetTick>
 8003148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7ff f8fc 	bl	8002348 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e10e      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800315e:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800316a:	4b36      	ldr	r3, [pc, #216]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 800316c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800316e:	4b37      	ldr	r3, [pc, #220]	@ (800324c <HAL_RCC_OscConfig+0x774>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	430a      	orrs	r2, r1
 800317e:	4931      	ldr	r1, [pc, #196]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	628b      	str	r3, [r1, #40]	@ 0x28
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	3b01      	subs	r3, #1
 800318a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003192:	3b01      	subs	r3, #1
 8003194:	025b      	lsls	r3, r3, #9
 8003196:	b29b      	uxth	r3, r3
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	3b01      	subs	r3, #1
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	3b01      	subs	r3, #1
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80031b4:	4923      	ldr	r1, [pc, #140]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80031ba:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	4a21      	ldr	r2, [pc, #132]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ca:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <HAL_RCC_OscConfig+0x778>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031d2:	00d2      	lsls	r2, r2, #3
 80031d4:	491b      	ldr	r1, [pc, #108]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031da:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	f023 020c 	bic.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	4917      	ldr	r1, [pc, #92]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031ec:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	f023 0202 	bic.w	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f8:	4912      	ldr	r1, [pc, #72]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031fe:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	4a10      	ldr	r2, [pc, #64]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800320a:	4b0e      	ldr	r3, [pc, #56]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	4a0d      	ldr	r2, [pc, #52]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003216:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321a:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 800321c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003222:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003226:	4a07      	ldr	r2, [pc, #28]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322e:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a04      	ldr	r2, [pc, #16]	@ (8003244 <HAL_RCC_OscConfig+0x76c>)
 8003234:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7ff f885 	bl	8002348 <HAL_GetTick>
 800323e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003240:	e011      	b.n	8003266 <HAL_RCC_OscConfig+0x78e>
 8003242:	bf00      	nop
 8003244:	58024400 	.word	0x58024400
 8003248:	58024800 	.word	0x58024800
 800324c:	fffffc0c 	.word	0xfffffc0c
 8003250:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7ff f878 	bl	8002348 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e08a      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x77c>
 8003272:	e082      	b.n	800337a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b43      	ldr	r3, [pc, #268]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a42      	ldr	r2, [pc, #264]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 800327a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800327e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7ff f862 	bl	8002348 <HAL_GetTick>
 8003284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7ff f85e 	bl	8002348 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e070      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800329a:	4b3a      	ldr	r3, [pc, #232]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x7b0>
 80032a6:	e068      	b.n	800337a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032a8:	4b36      	ldr	r3, [pc, #216]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032ae:	4b35      	ldr	r3, [pc, #212]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d031      	beq.n	8003320 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f003 0203 	and.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d12a      	bne.n	8003320 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d122      	bne.n	8003320 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d11a      	bne.n	8003320 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	0a5b      	lsrs	r3, r3, #9
 80032ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d111      	bne.n	8003320 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0c1b      	lsrs	r3, r3, #16
 8003300:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d108      	bne.n	8003320 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	0e1b      	lsrs	r3, r3, #24
 8003312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e02b      	b.n	800337c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003324:	4b17      	ldr	r3, [pc, #92]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 8003326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003328:	08db      	lsrs	r3, r3, #3
 800332a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800332e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	429a      	cmp	r2, r3
 8003338:	d01f      	beq.n	800337a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800333a:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	4a11      	ldr	r2, [pc, #68]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003346:	f7fe ffff 	bl	8002348 <HAL_GetTick>
 800334a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800334c:	bf00      	nop
 800334e:	f7fe fffb 	bl	8002348 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	4293      	cmp	r3, r2
 8003358:	d0f9      	beq.n	800334e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800335a:	4b0a      	ldr	r3, [pc, #40]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 800335c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_RCC_OscConfig+0x8b0>)
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003366:	00d2      	lsls	r2, r2, #3
 8003368:	4906      	ldr	r1, [pc, #24]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 800336a:	4313      	orrs	r3, r2
 800336c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800336e:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_RCC_OscConfig+0x8ac>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3730      	adds	r7, #48	@ 0x30
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	58024400 	.word	0x58024400
 8003388:	ffff0007 	.word	0xffff0007

0800338c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e19c      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b8a      	ldr	r3, [pc, #552]	@ (80035cc <HAL_RCC_ClockConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d910      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b87      	ldr	r3, [pc, #540]	@ (80035cc <HAL_RCC_ClockConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 020f 	bic.w	r2, r3, #15
 80033b6:	4985      	ldr	r1, [pc, #532]	@ (80035cc <HAL_RCC_ClockConfig+0x240>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b83      	ldr	r3, [pc, #524]	@ (80035cc <HAL_RCC_ClockConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e184      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	4b7b      	ldr	r3, [pc, #492]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d908      	bls.n	80033fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033ec:	4b78      	ldr	r3, [pc, #480]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	4975      	ldr	r1, [pc, #468]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	4b70      	ldr	r3, [pc, #448]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003416:	429a      	cmp	r2, r3
 8003418:	d908      	bls.n	800342c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800341a:	4b6d      	ldr	r3, [pc, #436]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	496a      	ldr	r1, [pc, #424]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003428:	4313      	orrs	r3, r2
 800342a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	4b64      	ldr	r3, [pc, #400]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003444:	429a      	cmp	r2, r3
 8003446:	d908      	bls.n	800345a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003448:	4b61      	ldr	r3, [pc, #388]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	495e      	ldr	r1, [pc, #376]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003456:	4313      	orrs	r3, r2
 8003458:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	4b59      	ldr	r3, [pc, #356]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003472:	429a      	cmp	r2, r3
 8003474:	d908      	bls.n	8003488 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003476:	4b56      	ldr	r3, [pc, #344]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4953      	ldr	r1, [pc, #332]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003484:	4313      	orrs	r3, r2
 8003486:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	4b4d      	ldr	r3, [pc, #308]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d908      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b4a      	ldr	r3, [pc, #296]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f023 020f 	bic.w	r2, r3, #15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4947      	ldr	r1, [pc, #284]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d055      	beq.n	800356e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034c2:	4b43      	ldr	r3, [pc, #268]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4940      	ldr	r1, [pc, #256]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d107      	bne.n	80034ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034dc:	4b3c      	ldr	r3, [pc, #240]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d121      	bne.n	800352c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0f6      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034f4:	4b36      	ldr	r3, [pc, #216]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d115      	bne.n	800352c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0ea      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800350c:	4b30      	ldr	r3, [pc, #192]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0de      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351c:	4b2c      	ldr	r3, [pc, #176]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0d6      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800352c:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f023 0207 	bic.w	r2, r3, #7
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4925      	ldr	r1, [pc, #148]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800353a:	4313      	orrs	r3, r2
 800353c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353e:	f7fe ff03 	bl	8002348 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003544:	e00a      	b.n	800355c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003546:	f7fe feff 	bl	8002348 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0be      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355c:	4b1c      	ldr	r3, [pc, #112]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	429a      	cmp	r2, r3
 800356c:	d1eb      	bne.n	8003546 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	4b14      	ldr	r3, [pc, #80]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	429a      	cmp	r2, r3
 8003588:	d208      	bcs.n	800359c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358a:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f023 020f 	bic.w	r2, r3, #15
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	490e      	ldr	r1, [pc, #56]	@ (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003598:	4313      	orrs	r3, r2
 800359a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <HAL_RCC_ClockConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d214      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b08      	ldr	r3, [pc, #32]	@ (80035cc <HAL_RCC_ClockConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 020f 	bic.w	r2, r3, #15
 80035b2:	4906      	ldr	r1, [pc, #24]	@ (80035cc <HAL_RCC_ClockConfig+0x240>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <HAL_RCC_ClockConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e086      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
 80035cc:	52002000 	.word	0x52002000
 80035d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b3f      	ldr	r3, [pc, #252]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d208      	bcs.n	8003602 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035f0:	4b3c      	ldr	r3, [pc, #240]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4939      	ldr	r1, [pc, #228]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d010      	beq.n	8003630 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	4b34      	ldr	r3, [pc, #208]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800361a:	429a      	cmp	r2, r3
 800361c:	d208      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	492e      	ldr	r1, [pc, #184]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 800362c:	4313      	orrs	r3, r2
 800362e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003648:	429a      	cmp	r2, r3
 800364a:	d208      	bcs.n	800365e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800364c:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4922      	ldr	r1, [pc, #136]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 800365a:	4313      	orrs	r3, r2
 800365c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003676:	429a      	cmp	r2, r3
 8003678:	d208      	bcs.n	800368c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800367a:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4917      	ldr	r1, [pc, #92]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003688:	4313      	orrs	r3, r2
 800368a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800368c:	f000 f834 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	4912      	ldr	r1, [pc, #72]	@ (80036e8 <HAL_RCC_ClockConfig+0x35c>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036aa:	4b0e      	ldr	r3, [pc, #56]	@ (80036e4 <HAL_RCC_ClockConfig+0x358>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a0d      	ldr	r2, [pc, #52]	@ (80036e8 <HAL_RCC_ClockConfig+0x35c>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <HAL_RCC_ClockConfig+0x360>)
 80036c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036c4:	4a0a      	ldr	r2, [pc, #40]	@ (80036f0 <HAL_RCC_ClockConfig+0x364>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80036ca:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <HAL_RCC_ClockConfig+0x368>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fdf0 	bl	80022b4 <HAL_InitTick>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	58024400 	.word	0x58024400
 80036e8:	0800ce34 	.word	0x0800ce34
 80036ec:	24000004 	.word	0x24000004
 80036f0:	24000000 	.word	0x24000000
 80036f4:	24000008 	.word	0x24000008

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	@ 0x24
 80036fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fe:	4bb3      	ldr	r3, [pc, #716]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003706:	2b18      	cmp	r3, #24
 8003708:	f200 8155 	bhi.w	80039b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800370c:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <HAL_RCC_GetSysClockFreq+0x1c>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003779 	.word	0x08003779
 8003718:	080039b7 	.word	0x080039b7
 800371c:	080039b7 	.word	0x080039b7
 8003720:	080039b7 	.word	0x080039b7
 8003724:	080039b7 	.word	0x080039b7
 8003728:	080039b7 	.word	0x080039b7
 800372c:	080039b7 	.word	0x080039b7
 8003730:	080039b7 	.word	0x080039b7
 8003734:	0800379f 	.word	0x0800379f
 8003738:	080039b7 	.word	0x080039b7
 800373c:	080039b7 	.word	0x080039b7
 8003740:	080039b7 	.word	0x080039b7
 8003744:	080039b7 	.word	0x080039b7
 8003748:	080039b7 	.word	0x080039b7
 800374c:	080039b7 	.word	0x080039b7
 8003750:	080039b7 	.word	0x080039b7
 8003754:	080037a5 	.word	0x080037a5
 8003758:	080039b7 	.word	0x080039b7
 800375c:	080039b7 	.word	0x080039b7
 8003760:	080039b7 	.word	0x080039b7
 8003764:	080039b7 	.word	0x080039b7
 8003768:	080039b7 	.word	0x080039b7
 800376c:	080039b7 	.word	0x080039b7
 8003770:	080039b7 	.word	0x080039b7
 8003774:	080037ab 	.word	0x080037ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003778:	4b94      	ldr	r3, [pc, #592]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003784:	4b91      	ldr	r3, [pc, #580]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	4a90      	ldr	r2, [pc, #576]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
 8003794:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003796:	e111      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003798:	4b8d      	ldr	r3, [pc, #564]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800379a:	61bb      	str	r3, [r7, #24]
      break;
 800379c:	e10e      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800379e:	4b8d      	ldr	r3, [pc, #564]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037a0:	61bb      	str	r3, [r7, #24]
      break;
 80037a2:	e10b      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80037a4:	4b8c      	ldr	r3, [pc, #560]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037a6:	61bb      	str	r3, [r7, #24]
      break;
 80037a8:	e108      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037aa:	4b88      	ldr	r3, [pc, #544]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80037b4:	4b85      	ldr	r3, [pc, #532]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037c0:	4b82      	ldr	r3, [pc, #520]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037ca:	4b80      	ldr	r3, [pc, #512]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	08db      	lsrs	r3, r3, #3
 80037d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80e1 	beq.w	80039b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	f000 8083 	beq.w	80038fc <HAL_RCC_GetSysClockFreq+0x204>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	f200 80a1 	bhi.w	8003940 <HAL_RCC_GetSysClockFreq+0x248>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x114>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d056      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800380a:	e099      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800380c:	4b6f      	ldr	r3, [pc, #444]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02d      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003818:	4b6c      	ldr	r3, [pc, #432]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	08db      	lsrs	r3, r3, #3
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	4a6b      	ldr	r2, [pc, #428]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	ee07 3a90 	vmov	s15, r3
 8003830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b62      	ldr	r3, [pc, #392]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a02 	vldr	s12, [r7, #8]
 8003856:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003872:	e087      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80039e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003886:	4b51      	ldr	r3, [pc, #324]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003896:	ed97 6a02 	vldr	s12, [r7, #8]
 800389a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800389e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038b6:	e065      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80039e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ca:	4b40      	ldr	r3, [pc, #256]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038da:	ed97 6a02 	vldr	s12, [r7, #8]
 80038de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80038e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038fa:	e043      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80039e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800390a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390e:	4b2f      	ldr	r3, [pc, #188]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003922:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800392a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800393e:	e021      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80039e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800394e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003962:	ed97 6a02 	vldr	s12, [r7, #8]
 8003966:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800396a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800397a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003982:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003984:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	0a5b      	lsrs	r3, r3, #9
 800398a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800398e:	3301      	adds	r3, #1
 8003990:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800399c:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a8:	ee17 3a90 	vmov	r3, s15
 80039ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80039ae:	e005      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
      break;
 80039b4:	e002      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80039b6:	4b07      	ldr	r3, [pc, #28]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039b8:	61bb      	str	r3, [r7, #24]
      break;
 80039ba:	bf00      	nop
  }

  return sysclockfreq;
 80039bc:	69bb      	ldr	r3, [r7, #24]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	@ 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
 80039d0:	03d09000 	.word	0x03d09000
 80039d4:	003d0900 	.word	0x003d0900
 80039d8:	017d7840 	.word	0x017d7840
 80039dc:	46000000 	.word	0x46000000
 80039e0:	4c742400 	.word	0x4c742400
 80039e4:	4a742400 	.word	0x4a742400
 80039e8:	4bbebc20 	.word	0x4bbebc20

080039ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039f2:	f7ff fe81 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <HAL_RCC_GetHCLKFreq+0x50>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	490f      	ldr	r1, [pc, #60]	@ (8003a40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a04:	5ccb      	ldrb	r3, [r1, r3]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a10:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a2a:	4a07      	ldr	r2, [pc, #28]	@ (8003a48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a30:	4b04      	ldr	r3, [pc, #16]	@ (8003a44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	0800ce34 	.word	0x0800ce34
 8003a44:	24000004 	.word	0x24000004
 8003a48:	24000000 	.word	0x24000000

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a50:	f7ff ffcc 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4904      	ldr	r1, [pc, #16]	@ (8003a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	58024400 	.word	0x58024400
 8003a74:	0800ce34 	.word	0x0800ce34

08003a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a7c:	f7ff ffb6 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4904      	ldr	r1, [pc, #16]	@ (8003aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	58024400 	.word	0x58024400
 8003aa0:	0800ce34 	.word	0x0800ce34

08003aa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b0ca      	sub	sp, #296	@ 0x128
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003ac8:	2500      	movs	r5, #0
 8003aca:	ea54 0305 	orrs.w	r3, r4, r5
 8003ace:	d049      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ada:	d02f      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003adc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ae0:	d828      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae6:	d01a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ae8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aec:	d822      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af6:	d007      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003af8:	e01c      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afa:	4bb8      	ldr	r3, [pc, #736]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	4ab7      	ldr	r2, [pc, #732]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b06:	e01a      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	2102      	movs	r1, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fc8f 	bl	8005434 <RCCEx_PLL2_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b1c:	e00f      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	3328      	adds	r3, #40	@ 0x28
 8003b24:	2102      	movs	r1, #2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fd36 	bl	8005598 <RCCEx_PLL3_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b32:	e004      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b46:	4ba5      	ldr	r3, [pc, #660]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b54:	4aa1      	ldr	r2, [pc, #644]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b56:	430b      	orrs	r3, r1
 8003b58:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b70:	f04f 0900 	mov.w	r9, #0
 8003b74:	ea58 0309 	orrs.w	r3, r8, r9
 8003b78:	d047      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d82a      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b84:	a201      	add	r2, pc, #4	@ (adr r2, 8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003ba1 	.word	0x08003ba1
 8003b90:	08003baf 	.word	0x08003baf
 8003b94:	08003bc5 	.word	0x08003bc5
 8003b98:	08003be3 	.word	0x08003be3
 8003b9c:	08003be3 	.word	0x08003be3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	4a8d      	ldr	r2, [pc, #564]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bac:	e01a      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 fc3c 	bl	8005434 <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bc2:	e00f      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	3328      	adds	r3, #40	@ 0x28
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 fce3 	bl	8005598 <RCCEx_PLL3_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bd8:	e004      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be0:	e000      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bec:	4b7b      	ldr	r3, [pc, #492]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf0:	f023 0107 	bic.w	r1, r3, #7
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	4a78      	ldr	r2, [pc, #480]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c00:	e003      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003c16:	f04f 0b00 	mov.w	fp, #0
 8003c1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c1e:	d04c      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2a:	d030      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c30:	d829      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c34:	d02d      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c38:	d825      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c3a:	2b80      	cmp	r3, #128	@ 0x80
 8003c3c:	d018      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c3e:	2b80      	cmp	r3, #128	@ 0x80
 8003c40:	d821      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c46:	2b40      	cmp	r3, #64	@ 0x40
 8003c48:	d007      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c4a:	e01c      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4c:	4b63      	ldr	r3, [pc, #396]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	4a62      	ldr	r2, [pc, #392]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c58:	e01c      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	3308      	adds	r3, #8
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 fbe6 	bl	8005434 <RCCEx_PLL2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c6e:	e011      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	3328      	adds	r3, #40	@ 0x28
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 fc8d 	bl	8005598 <RCCEx_PLL3_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c84:	e006      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c8c:	e002      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c8e:	bf00      	nop
 8003c90:	e000      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	4a4c      	ldr	r2, [pc, #304]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cb0:	e003      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003cc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003cd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	d053      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ce6:	d035      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ce8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cec:	d82e      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cf2:	d031      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cf4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cf8:	d828      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cfe:	d01a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d04:	d822      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003d0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d0e:	d007      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003d10:	e01c      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d12:	4b32      	ldr	r3, [pc, #200]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	4a31      	ldr	r2, [pc, #196]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e01c      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	3308      	adds	r3, #8
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fb83 	bl	8005434 <RCCEx_PLL2_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d34:	e011      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3a:	3328      	adds	r3, #40	@ 0x28
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fc2a 	bl	8005598 <RCCEx_PLL3_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d4a:	e006      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d52:	e002      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d54:	bf00      	nop
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d62:	4b1e      	ldr	r3, [pc, #120]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d66:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d72:	4a1a      	ldr	r2, [pc, #104]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d92:	2300      	movs	r3, #0
 8003d94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	d056      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003daa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dae:	d038      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003db0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003db4:	d831      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003db6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dba:	d034      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003dbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dc0:	d82b      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dc6:	d01d      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dcc:	d825      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003dd8:	e01f      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dda:	bf00      	nop
 8003ddc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4ba2      	ldr	r3, [pc, #648]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	4aa1      	ldr	r2, [pc, #644]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dec:	e01c      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df2:	3308      	adds	r3, #8
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 fb1c 	bl	8005434 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e02:	e011      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	3328      	adds	r3, #40	@ 0x28
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fbc3 	bl	8005598 <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e20:	e002      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e22:	bf00      	nop
 8003e24:	e000      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10b      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e30:	4b8e      	ldr	r3, [pc, #568]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e40:	4a8a      	ldr	r2, [pc, #552]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e46:	e003      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d03a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e76:	2b30      	cmp	r3, #48	@ 0x30
 8003e78:	d01f      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e7a:	2b30      	cmp	r3, #48	@ 0x30
 8003e7c:	d819      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d00c      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d815      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d019      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d111      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8e:	4b77      	ldr	r3, [pc, #476]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e92:	4a76      	ldr	r2, [pc, #472]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e9a:	e011      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 fac5 	bl	8005434 <RCCEx_PLL2_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ec8:	4b68      	ldr	r3, [pc, #416]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ecc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed6:	4a65      	ldr	r2, [pc, #404]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003efc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d051      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f10:	d035      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003f12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f16:	d82e      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f1c:	d031      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f22:	d828      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f28:	d01a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f2e:	d822      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f38:	d007      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f3a:	e01c      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	4a4a      	ldr	r2, [pc, #296]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f48:	e01c      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4e:	3308      	adds	r3, #8
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 fa6e 	bl	8005434 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f5e:	e011      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	3328      	adds	r3, #40	@ 0x28
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fb15 	bl	8005598 <RCCEx_PLL3_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f8c:	4b37      	ldr	r3, [pc, #220]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	4a34      	ldr	r2, [pc, #208]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003fc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	d056      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fd4:	d033      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003fd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fda:	d82c      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fe0:	d02f      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fe2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fe6:	d826      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fe8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fec:	d02b      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003fee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ff2:	d820      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ff8:	d012      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ffe:	d81a      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d022      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004008:	d115      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400e:	3308      	adds	r3, #8
 8004010:	2101      	movs	r1, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f001 fa0e 	bl	8005434 <RCCEx_PLL2_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800401e:	e015      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004024:	3328      	adds	r3, #40	@ 0x28
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fab5 	bl	8005598 <RCCEx_PLL3_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004034:	e00a      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800403c:	e006      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800403e:	bf00      	nop
 8004040:	e004      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800404a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004054:	4b05      	ldr	r3, [pc, #20]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004062:	4a02      	ldr	r2, [pc, #8]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004064:	430b      	orrs	r3, r1
 8004066:	6513      	str	r3, [r2, #80]	@ 0x50
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800406a:	bf00      	nop
 800406c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800408e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004092:	460b      	mov	r3, r1
 8004094:	4313      	orrs	r3, r2
 8004096:	d055      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040a4:	d033      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80040a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040aa:	d82c      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b0:	d02f      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b6:	d826      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040bc:	d02b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80040be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040c2:	d820      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040c8:	d012      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80040ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ce:	d81a      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d022      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80040d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040d8:	d115      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	3308      	adds	r3, #8
 80040e0:	2101      	movs	r1, #1
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 f9a6 	bl	8005434 <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040ee:	e015      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f4:	3328      	adds	r3, #40	@ 0x28
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 fa4d 	bl	8005598 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004104:	e00a      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800410e:	bf00      	nop
 8004110:	e004      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800411a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004124:	4ba3      	ldr	r3, [pc, #652]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004134:	4a9f      	ldr	r2, [pc, #636]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004136:	430b      	orrs	r3, r1
 8004138:	6593      	str	r3, [r2, #88]	@ 0x58
 800413a:	e003      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800415a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d037      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800416e:	d00e      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004174:	d816      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d018      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800417a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800417e:	d111      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004180:	4b8c      	ldr	r3, [pc, #560]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	4a8b      	ldr	r2, [pc, #556]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800418a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800418c:	e00f      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800418e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004192:	3308      	adds	r3, #8
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f001 f94c 	bl	8005434 <RCCEx_PLL2_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041a2:	e004      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80041ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041b6:	4b7f      	ldr	r3, [pc, #508]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c4:	4a7b      	ldr	r2, [pc, #492]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c6:	430b      	orrs	r3, r1
 80041c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80041ca:	e003      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4313      	orrs	r3, r2
 80041f2:	d039      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d81c      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80041fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004241 	.word	0x08004241
 8004208:	08004215 	.word	0x08004215
 800420c:	08004223 	.word	0x08004223
 8004210:	08004241 	.word	0x08004241
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004214:	4b67      	ldr	r3, [pc, #412]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4a66      	ldr	r2, [pc, #408]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800421e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004220:	e00f      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004226:	3308      	adds	r3, #8
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f902 	bl	8005434 <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004236:	e004      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800423e:	e000      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800424a:	4b5a      	ldr	r3, [pc, #360]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424e:	f023 0103 	bic.w	r1, r3, #3
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004258:	4a56      	ldr	r2, [pc, #344]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425a:	430b      	orrs	r3, r1
 800425c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800425e:	e003      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004274:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004278:	2300      	movs	r3, #0
 800427a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800427e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004282:	460b      	mov	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	f000 809f 	beq.w	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800428a:	4b4b      	ldr	r3, [pc, #300]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4a      	ldr	r2, [pc, #296]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004294:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004296:	f7fe f857 	bl	8002348 <HAL_GetTick>
 800429a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429e:	e00b      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a0:	f7fe f852 	bl	8002348 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b64      	cmp	r3, #100	@ 0x64
 80042ae:	d903      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042b6:	e005      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b8:	4b3f      	ldr	r3, [pc, #252]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ed      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80042c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d179      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042cc:	4b39      	ldr	r3, [pc, #228]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042d8:	4053      	eors	r3, r2
 80042da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d015      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e2:	4b34      	ldr	r3, [pc, #208]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ee:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	4a30      	ldr	r2, [pc, #192]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042fa:	4b2e      	ldr	r3, [pc, #184]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	4a2d      	ldr	r2, [pc, #180]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004304:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004306:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800430c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800431a:	d118      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fe f814 	bl	8002348 <HAL_GetTick>
 8004320:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004324:	e00d      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fe f80f 	bl	8002348 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004330:	1ad2      	subs	r2, r2, r3
 8004332:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004336:	429a      	cmp	r2, r3
 8004338:	d903      	bls.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004340:	e005      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004342:	4b1c      	ldr	r3, [pc, #112]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0eb      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800434e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004352:	2b00      	cmp	r3, #0
 8004354:	d129      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800435e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004366:	d10e      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004368:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004378:	091a      	lsrs	r2, r3, #4
 800437a:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800437c:	4013      	ands	r3, r2
 800437e:	4a0d      	ldr	r2, [pc, #52]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6113      	str	r3, [r2, #16]
 8004384:	e005      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004386:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4a0a      	ldr	r2, [pc, #40]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800438c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004390:	6113      	str	r3, [r2, #16]
 8004392:	4b08      	ldr	r3, [pc, #32]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004394:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800439e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a2:	4a04      	ldr	r2, [pc, #16]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a8:	e00e      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80043b2:	e009      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80043b4:	58024400 	.word	0x58024400
 80043b8:	58024800 	.word	0x58024800
 80043bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f002 0301 	and.w	r3, r2, #1
 80043d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f000 8089 	beq.w	80044fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f0:	2b28      	cmp	r3, #40	@ 0x28
 80043f2:	d86b      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80043f4:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	080044d5 	.word	0x080044d5
 8004400:	080044cd 	.word	0x080044cd
 8004404:	080044cd 	.word	0x080044cd
 8004408:	080044cd 	.word	0x080044cd
 800440c:	080044cd 	.word	0x080044cd
 8004410:	080044cd 	.word	0x080044cd
 8004414:	080044cd 	.word	0x080044cd
 8004418:	080044cd 	.word	0x080044cd
 800441c:	080044a1 	.word	0x080044a1
 8004420:	080044cd 	.word	0x080044cd
 8004424:	080044cd 	.word	0x080044cd
 8004428:	080044cd 	.word	0x080044cd
 800442c:	080044cd 	.word	0x080044cd
 8004430:	080044cd 	.word	0x080044cd
 8004434:	080044cd 	.word	0x080044cd
 8004438:	080044cd 	.word	0x080044cd
 800443c:	080044b7 	.word	0x080044b7
 8004440:	080044cd 	.word	0x080044cd
 8004444:	080044cd 	.word	0x080044cd
 8004448:	080044cd 	.word	0x080044cd
 800444c:	080044cd 	.word	0x080044cd
 8004450:	080044cd 	.word	0x080044cd
 8004454:	080044cd 	.word	0x080044cd
 8004458:	080044cd 	.word	0x080044cd
 800445c:	080044d5 	.word	0x080044d5
 8004460:	080044cd 	.word	0x080044cd
 8004464:	080044cd 	.word	0x080044cd
 8004468:	080044cd 	.word	0x080044cd
 800446c:	080044cd 	.word	0x080044cd
 8004470:	080044cd 	.word	0x080044cd
 8004474:	080044cd 	.word	0x080044cd
 8004478:	080044cd 	.word	0x080044cd
 800447c:	080044d5 	.word	0x080044d5
 8004480:	080044cd 	.word	0x080044cd
 8004484:	080044cd 	.word	0x080044cd
 8004488:	080044cd 	.word	0x080044cd
 800448c:	080044cd 	.word	0x080044cd
 8004490:	080044cd 	.word	0x080044cd
 8004494:	080044cd 	.word	0x080044cd
 8004498:	080044cd 	.word	0x080044cd
 800449c:	080044d5 	.word	0x080044d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	3308      	adds	r3, #8
 80044a6:	2101      	movs	r1, #1
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 ffc3 	bl	8005434 <RCCEx_PLL2_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044b4:	e00f      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	3328      	adds	r3, #40	@ 0x28
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 f86a 	bl	8005598 <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044ca:	e004      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80044d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044de:	4bbf      	ldr	r3, [pc, #764]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ec:	4abb      	ldr	r2, [pc, #748]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ee:	430b      	orrs	r3, r1
 80044f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80044f2:	e003      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f002 0302 	and.w	r3, r2, #2
 8004508:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004512:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d041      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004522:	2b05      	cmp	r3, #5
 8004524:	d824      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004526:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004579 	.word	0x08004579
 8004530:	08004545 	.word	0x08004545
 8004534:	0800455b 	.word	0x0800455b
 8004538:	08004579 	.word	0x08004579
 800453c:	08004579 	.word	0x08004579
 8004540:	08004579 	.word	0x08004579
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	3308      	adds	r3, #8
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f000 ff71 	bl	8005434 <RCCEx_PLL2_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004558:	e00f      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	3328      	adds	r3, #40	@ 0x28
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f001 f818 	bl	8005598 <RCCEx_PLL3_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800456e:	e004      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004582:	4b96      	ldr	r3, [pc, #600]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004586:	f023 0107 	bic.w	r1, r3, #7
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004590:	4a92      	ldr	r2, [pc, #584]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004592:	430b      	orrs	r3, r1
 8004594:	6553      	str	r3, [r2, #84]	@ 0x54
 8004596:	e003      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f002 0304 	and.w	r3, r2, #4
 80045ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045b0:	2300      	movs	r3, #0
 80045b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4313      	orrs	r3, r2
 80045be:	d044      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d825      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80045cc:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	08004621 	.word	0x08004621
 80045d8:	080045ed 	.word	0x080045ed
 80045dc:	08004603 	.word	0x08004603
 80045e0:	08004621 	.word	0x08004621
 80045e4:	08004621 	.word	0x08004621
 80045e8:	08004621 	.word	0x08004621
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f0:	3308      	adds	r3, #8
 80045f2:	2101      	movs	r1, #1
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 ff1d 	bl	8005434 <RCCEx_PLL2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004600:	e00f      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004606:	3328      	adds	r3, #40	@ 0x28
 8004608:	2101      	movs	r1, #1
 800460a:	4618      	mov	r0, r3
 800460c:	f000 ffc4 	bl	8005598 <RCCEx_PLL3_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004616:	e004      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800461e:	e000      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800462a:	4b6c      	ldr	r3, [pc, #432]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	f023 0107 	bic.w	r1, r3, #7
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800463a:	4a68      	ldr	r2, [pc, #416]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800463c:	430b      	orrs	r3, r1
 800463e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004640:	e003      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f002 0320 	and.w	r3, r2, #32
 8004656:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004664:	460b      	mov	r3, r1
 8004666:	4313      	orrs	r3, r2
 8004668:	d055      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004676:	d033      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800467c:	d82c      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004682:	d02f      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d826      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800468a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800468e:	d02b      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004690:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004694:	d820      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800469a:	d012      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800469c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046a0:	d81a      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d022      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80046a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046aa:	d115      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	3308      	adds	r3, #8
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 febd 	bl	8005434 <RCCEx_PLL2_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046c0:	e015      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c6:	3328      	adds	r3, #40	@ 0x28
 80046c8:	2102      	movs	r1, #2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 ff64 	bl	8005598 <RCCEx_PLL3_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046d6:	e00a      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046de:	e006      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046e0:	bf00      	nop
 80046e2:	e004      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046e4:	bf00      	nop
 80046e6:	e002      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046e8:	bf00      	nop
 80046ea:	e000      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046f6:	4b39      	ldr	r3, [pc, #228]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004706:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004708:	430b      	orrs	r3, r1
 800470a:	6553      	str	r3, [r2, #84]	@ 0x54
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004726:	2300      	movs	r3, #0
 8004728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800472c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004730:	460b      	mov	r3, r1
 8004732:	4313      	orrs	r3, r2
 8004734:	d058      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800473e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004742:	d033      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004744:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004748:	d82c      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474e:	d02f      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004754:	d826      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004756:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800475a:	d02b      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800475c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004760:	d820      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004766:	d012      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476c:	d81a      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d022      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004776:	d115      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477c:	3308      	adds	r3, #8
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fe57 	bl	8005434 <RCCEx_PLL2_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800478c:	e015      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004792:	3328      	adds	r3, #40	@ 0x28
 8004794:	2102      	movs	r1, #2
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fefe 	bl	8005598 <RCCEx_PLL3_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047a2:	e00a      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047aa:	e006      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047ac:	bf00      	nop
 80047ae:	e004      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047b0:	bf00      	nop
 80047b2:	e002      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10e      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047c2:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047d2:	4a02      	ldr	r2, [pc, #8]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d8:	e006      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004802:	460b      	mov	r3, r1
 8004804:	4313      	orrs	r3, r2
 8004806:	d055      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004810:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004814:	d033      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004816:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800481a:	d82c      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004820:	d02f      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004826:	d826      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004828:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800482c:	d02b      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800482e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004832:	d820      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004838:	d012      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800483a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800483e:	d81a      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d022      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004848:	d115      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	3308      	adds	r3, #8
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fdee 	bl	8005434 <RCCEx_PLL2_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800485e:	e015      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004864:	3328      	adds	r3, #40	@ 0x28
 8004866:	2102      	movs	r1, #2
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fe95 	bl	8005598 <RCCEx_PLL3_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004874:	e00a      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800487c:	e006      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800487e:	bf00      	nop
 8004880:	e004      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004882:	bf00      	nop
 8004884:	e002      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800488a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10b      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004894:	4ba1      	ldr	r3, [pc, #644]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004898:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048a4:	4a9d      	ldr	r2, [pc, #628]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a6:	430b      	orrs	r3, r1
 80048a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048aa:	e003      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f002 0308 	and.w	r3, r2, #8
 80048c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048ce:	460b      	mov	r3, r1
 80048d0:	4313      	orrs	r3, r2
 80048d2:	d01e      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	3328      	adds	r3, #40	@ 0x28
 80048e8:	2102      	movs	r1, #2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fe54 	bl	8005598 <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048fc:	4b87      	ldr	r3, [pc, #540]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004900:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490c:	4a83      	ldr	r2, [pc, #524]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800490e:	430b      	orrs	r3, r1
 8004910:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f002 0310 	and.w	r3, r2, #16
 800491e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004922:	2300      	movs	r3, #0
 8004924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004928:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d01e      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800493a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800493e:	d10c      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	3328      	adds	r3, #40	@ 0x28
 8004946:	2102      	movs	r1, #2
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fe25 	bl	8005598 <RCCEx_PLL3_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800495a:	4b70      	ldr	r3, [pc, #448]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496a:	4a6c      	ldr	r2, [pc, #432]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800496c:	430b      	orrs	r3, r1
 800496e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800497c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004980:	2300      	movs	r3, #0
 8004982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004986:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800498a:	460b      	mov	r3, r1
 800498c:	4313      	orrs	r3, r2
 800498e:	d03e      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800499c:	d022      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800499e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049a2:	d81b      	bhi.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80049ae:	e015      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b4:	3308      	adds	r3, #8
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fd3b 	bl	8005434 <RCCEx_PLL2_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049c4:	e00f      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ca:	3328      	adds	r3, #40	@ 0x28
 80049cc:	2102      	movs	r1, #2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fde2 	bl	8005598 <RCCEx_PLL3_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049da:	e004      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049e2:	e000      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80049e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049ee:	4b4b      	ldr	r3, [pc, #300]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049fe:	4a47      	ldr	r2, [pc, #284]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a04:	e003      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a24:	460b      	mov	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d03b      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a36:	d01f      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a3c:	d818      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a42:	d003      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a48:	d007      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a4a:	e011      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a4c:	4b33      	ldr	r3, [pc, #204]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	4a32      	ldr	r2, [pc, #200]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a58:	e00f      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	3328      	adds	r3, #40	@ 0x28
 8004a60:	2101      	movs	r1, #1
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fd98 	bl	8005598 <RCCEx_PLL3_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a6e:	e004      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a82:	4b26      	ldr	r3, [pc, #152]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	4a22      	ldr	r2, [pc, #136]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a98:	e003      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004aae:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ab4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d034      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004acc:	d007      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ace:	e011      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad0:	4b12      	ldr	r3, [pc, #72]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	4a11      	ldr	r2, [pc, #68]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004adc:	e00e      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fca4 	bl	8005434 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004af2:	e003      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10d      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b04:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b12:	4a02      	ldr	r2, [pc, #8]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b14:	430b      	orrs	r3, r1
 8004b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b18:	e006      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004b1a:	bf00      	nop
 8004b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b36:	2300      	movs	r3, #0
 8004b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4313      	orrs	r3, r2
 8004b42:	d00c      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	3328      	adds	r3, #40	@ 0x28
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fd23 	bl	8005598 <RCCEx_PLL3_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b74:	460b      	mov	r3, r1
 8004b76:	4313      	orrs	r3, r2
 8004b78:	d038      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b86:	d018      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8c:	d811      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b92:	d014      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b98:	d80b      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d011      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba4:	4bc3      	ldr	r3, [pc, #780]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	4ac2      	ldr	r2, [pc, #776]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bcc:	4bb9      	ldr	r3, [pc, #740]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bdc:	4ab5      	ldr	r2, [pc, #724]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bde:	430b      	orrs	r3, r1
 8004be0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004be2:	e003      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004bf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bfe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c08:	4baa      	ldr	r3, [pc, #680]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c16:	4aa7      	ldr	r2, [pc, #668]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004c28:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c32:	460b      	mov	r3, r1
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c38:	4b9e      	ldr	r3, [pc, #632]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c48:	4a9a      	ldr	r2, [pc, #616]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c64:	460b      	mov	r3, r1
 8004c66:	4313      	orrs	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c6a:	4b92      	ldr	r3, [pc, #584]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c78:	4a8e      	ldr	r2, [pc, #568]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d00e      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c9a:	4b86      	ldr	r3, [pc, #536]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	4a85      	ldr	r2, [pc, #532]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ca4:	6113      	str	r3, [r2, #16]
 8004ca6:	4b83      	ldr	r3, [pc, #524]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca8:	6919      	ldr	r1, [r3, #16]
 8004caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004cb2:	4a80      	ldr	r2, [pc, #512]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cd4:	4b77      	ldr	r3, [pc, #476]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	4a74      	ldr	r2, [pc, #464]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4313      	orrs	r3, r2
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d04:	4b6b      	ldr	r3, [pc, #428]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d08:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d14:	4a67      	ldr	r2, [pc, #412]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	2100      	movs	r1, #0
 8004d24:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d30:	460b      	mov	r3, r1
 8004d32:	4313      	orrs	r3, r2
 8004d34:	d011      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fb78 	bl	8005434 <RCCEx_PLL2_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	2100      	movs	r1, #0
 8004d64:	6239      	str	r1, [r7, #32]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d70:	460b      	mov	r3, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	d011      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fb58 	bl	8005434 <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	2100      	movs	r1, #0
 8004da4:	61b9      	str	r1, [r7, #24]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004db0:	460b      	mov	r3, r1
 8004db2:	4313      	orrs	r3, r2
 8004db4:	d011      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	3308      	adds	r3, #8
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fb38 	bl	8005434 <RCCEx_PLL2_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	2100      	movs	r1, #0
 8004de4:	6139      	str	r1, [r7, #16]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004df0:	460b      	mov	r3, r1
 8004df2:	4313      	orrs	r3, r2
 8004df4:	d011      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfa:	3328      	adds	r3, #40	@ 0x28
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fbca 	bl	8005598 <RCCEx_PLL3_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	2100      	movs	r1, #0
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e30:	460b      	mov	r3, r1
 8004e32:	4313      	orrs	r3, r2
 8004e34:	d011      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3a:	3328      	adds	r3, #40	@ 0x28
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fbaa 	bl	8005598 <RCCEx_PLL3_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	2100      	movs	r1, #0
 8004e64:	6039      	str	r1, [r7, #0]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e70:	460b      	mov	r3, r1
 8004e72:	4313      	orrs	r3, r2
 8004e74:	d011      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7a:	3328      	adds	r3, #40	@ 0x28
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fb8a 	bl	8005598 <RCCEx_PLL3_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e9a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb4:	58024400 	.word	0x58024400

08004eb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ebc:	f7fe fd96 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4904      	ldr	r1, [pc, #16]	@ (8004ee0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	0800ce34 	.word	0x0800ce34

08004ee4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	@ 0x24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004eec:	4ba1      	ldr	r3, [pc, #644]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ef6:	4b9f      	ldr	r3, [pc, #636]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	0b1b      	lsrs	r3, r3, #12
 8004efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f02:	4b9c      	ldr	r3, [pc, #624]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004f0e:	4b99      	ldr	r3, [pc, #612]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f12:	08db      	lsrs	r3, r3, #3
 8004f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8111 	beq.w	8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	f000 8083 	beq.w	8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	f200 80a1 	bhi.w	8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d056      	beq.n	8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f4e:	e099      	b.n	8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f50:	4b88      	ldr	r3, [pc, #544]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02d      	beq.n	8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f5c:	4b85      	ldr	r3, [pc, #532]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	4a84      	ldr	r2, [pc, #528]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f86:	4b7b      	ldr	r3, [pc, #492]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800517c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fb6:	e087      	b.n	80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fca:	4b6a      	ldr	r3, [pc, #424]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800517c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffa:	e065      	b.n	80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500e:	4b59      	ldr	r3, [pc, #356]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005022:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800517c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800503e:	e043      	b.n	80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005052:	4b48      	ldr	r3, [pc, #288]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	ed97 6a03 	vldr	s12, [r7, #12]
 8005066:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800517c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005082:	e021      	b.n	80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005096:	4b37      	ldr	r3, [pc, #220]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800517c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80050c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	0a5b      	lsrs	r3, r3, #9
 80050ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ee:	ee17 2a90 	vmov	r2, s15
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fa:	0c1b      	lsrs	r3, r3, #16
 80050fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005100:	ee07 3a90 	vmov	s15, r3
 8005104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800510c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005110:	edd7 6a07 	vldr	s13, [r7, #28]
 8005114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800511c:	ee17 2a90 	vmov	r2, s15
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005124:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005128:	0e1b      	lsrs	r3, r3, #24
 800512a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800513a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800513e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800514a:	ee17 2a90 	vmov	r2, s15
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005152:	e008      	b.n	8005166 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]
}
 8005166:	bf00      	nop
 8005168:	3724      	adds	r7, #36	@ 0x24
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	58024400 	.word	0x58024400
 8005178:	03d09000 	.word	0x03d09000
 800517c:	46000000 	.word	0x46000000
 8005180:	4c742400 	.word	0x4c742400
 8005184:	4a742400 	.word	0x4a742400
 8005188:	4bbebc20 	.word	0x4bbebc20

0800518c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	@ 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005194:	4ba1      	ldr	r3, [pc, #644]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800519e:	4b9f      	ldr	r3, [pc, #636]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	0d1b      	lsrs	r3, r3, #20
 80051a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051aa:	4b9c      	ldr	r3, [pc, #624]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	0a1b      	lsrs	r3, r3, #8
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80051b6:	4b99      	ldr	r3, [pc, #612]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	08db      	lsrs	r3, r3, #3
 80051bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8111 	beq.w	80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	f000 8083 	beq.w	80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f200 80a1 	bhi.w	800532c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d056      	beq.n	80052a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051f6:	e099      	b.n	800532c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051f8:	4b88      	ldr	r3, [pc, #544]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02d      	beq.n	8005260 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005204:	4b85      	ldr	r3, [pc, #532]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	4a84      	ldr	r2, [pc, #528]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
 8005214:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522e:	4b7b      	ldr	r3, [pc, #492]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005242:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800525e:	e087      	b.n	8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800526e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005272:	4b6a      	ldr	r3, [pc, #424]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005282:	ed97 6a03 	vldr	s12, [r7, #12]
 8005286:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800528a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052a2:	e065      	b.n	8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800542c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b6:	4b59      	ldr	r3, [pc, #356]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052e6:	e043      	b.n	8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fa:	4b48      	ldr	r3, [pc, #288]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530a:	ed97 6a03 	vldr	s12, [r7, #12]
 800530e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800532a:	e021      	b.n	8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800542c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b37      	ldr	r3, [pc, #220]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005352:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800536e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005370:	4b2a      	ldr	r3, [pc, #168]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	0a5b      	lsrs	r3, r3, #9
 8005376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538a:	edd7 6a07 	vldr	s13, [r7, #28]
 800538e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005396:	ee17 2a90 	vmov	r2, s15
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800539e:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c4:	ee17 2a90 	vmov	r2, s15
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053cc:	4b13      	ldr	r3, [pc, #76]	@ (800541c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	0e1b      	lsrs	r3, r3, #24
 80053d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f2:	ee17 2a90 	vmov	r2, s15
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053fa:	e008      	b.n	800540e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	609a      	str	r2, [r3, #8]
}
 800540e:	bf00      	nop
 8005410:	3724      	adds	r7, #36	@ 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	58024400 	.word	0x58024400
 8005420:	03d09000 	.word	0x03d09000
 8005424:	46000000 	.word	0x46000000
 8005428:	4c742400 	.word	0x4c742400
 800542c:	4a742400 	.word	0x4a742400
 8005430:	4bbebc20 	.word	0x4bbebc20

08005434 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005442:	4b53      	ldr	r3, [pc, #332]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b03      	cmp	r3, #3
 800544c:	d101      	bne.n	8005452 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e099      	b.n	8005586 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005452:	4b4f      	ldr	r3, [pc, #316]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a4e      	ldr	r2, [pc, #312]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005458:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800545c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545e:	f7fc ff73 	bl	8002348 <HAL_GetTick>
 8005462:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005464:	e008      	b.n	8005478 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005466:	f7fc ff6f 	bl	8002348 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e086      	b.n	8005586 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005478:	4b45      	ldr	r3, [pc, #276]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f0      	bne.n	8005466 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005484:	4b42      	ldr	r3, [pc, #264]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	493f      	ldr	r1, [pc, #252]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	628b      	str	r3, [r1, #40]	@ 0x28
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	3b01      	subs	r3, #1
 800549e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	025b      	lsls	r3, r3, #9
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054c8:	4931      	ldr	r1, [pc, #196]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054ce:	4b30      	ldr	r3, [pc, #192]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	492d      	ldr	r1, [pc, #180]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	f023 0220 	bic.w	r2, r3, #32
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	4928      	ldr	r1, [pc, #160]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054f2:	4b27      	ldr	r3, [pc, #156]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	4a26      	ldr	r2, [pc, #152]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054fe:	4b24      	ldr	r3, [pc, #144]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005502:	4b24      	ldr	r3, [pc, #144]	@ (8005594 <RCCEx_PLL2_Config+0x160>)
 8005504:	4013      	ands	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	69d2      	ldr	r2, [r2, #28]
 800550a:	00d2      	lsls	r2, r2, #3
 800550c:	4920      	ldr	r1, [pc, #128]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005512:	4b1f      	ldr	r3, [pc, #124]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005518:	f043 0310 	orr.w	r3, r3, #16
 800551c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005524:	4b1a      	ldr	r3, [pc, #104]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	4a19      	ldr	r2, [pc, #100]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 800552a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800552e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005530:	e00f      	b.n	8005552 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005538:	4b15      	ldr	r3, [pc, #84]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	4a14      	ldr	r2, [pc, #80]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 800553e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005542:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005544:	e005      	b.n	8005552 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005546:	4b12      	ldr	r3, [pc, #72]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	4a11      	ldr	r2, [pc, #68]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 800554c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005550:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005552:	4b0f      	ldr	r3, [pc, #60]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a0e      	ldr	r2, [pc, #56]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 8005558:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800555c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800555e:	f7fc fef3 	bl	8002348 <HAL_GetTick>
 8005562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005564:	e008      	b.n	8005578 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005566:	f7fc feef 	bl	8002348 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e006      	b.n	8005586 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005578:	4b05      	ldr	r3, [pc, #20]	@ (8005590 <RCCEx_PLL2_Config+0x15c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	58024400 	.word	0x58024400
 8005594:	ffff0007 	.word	0xffff0007

08005598 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055a6:	4b53      	ldr	r3, [pc, #332]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d101      	bne.n	80055b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e099      	b.n	80056ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055b6:	4b4f      	ldr	r3, [pc, #316]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a4e      	ldr	r2, [pc, #312]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c2:	f7fc fec1 	bl	8002348 <HAL_GetTick>
 80055c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055c8:	e008      	b.n	80055dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055ca:	f7fc febd 	bl	8002348 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e086      	b.n	80056ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055dc:	4b45      	ldr	r3, [pc, #276]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f0      	bne.n	80055ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055e8:	4b42      	ldr	r3, [pc, #264]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	051b      	lsls	r3, r3, #20
 80055f6:	493f      	ldr	r1, [pc, #252]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	3b01      	subs	r3, #1
 8005602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	3b01      	subs	r3, #1
 800560c:	025b      	lsls	r3, r3, #9
 800560e:	b29b      	uxth	r3, r3
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	3b01      	subs	r3, #1
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	3b01      	subs	r3, #1
 8005626:	061b      	lsls	r3, r3, #24
 8005628:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800562c:	4931      	ldr	r1, [pc, #196]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005632:	4b30      	ldr	r3, [pc, #192]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	492d      	ldr	r1, [pc, #180]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 8005640:	4313      	orrs	r3, r2
 8005642:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005644:	4b2b      	ldr	r3, [pc, #172]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	4928      	ldr	r1, [pc, #160]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 8005652:	4313      	orrs	r3, r2
 8005654:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005656:	4b27      	ldr	r3, [pc, #156]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	4a26      	ldr	r2, [pc, #152]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 800565c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005660:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005662:	4b24      	ldr	r3, [pc, #144]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 8005664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005666:	4b24      	ldr	r3, [pc, #144]	@ (80056f8 <RCCEx_PLL3_Config+0x160>)
 8005668:	4013      	ands	r3, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	69d2      	ldr	r2, [r2, #28]
 800566e:	00d2      	lsls	r2, r2, #3
 8005670:	4920      	ldr	r1, [pc, #128]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005676:	4b1f      	ldr	r3, [pc, #124]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	4a1e      	ldr	r2, [pc, #120]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005680:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005688:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 800568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568c:	4a19      	ldr	r2, [pc, #100]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 800568e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005692:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005694:	e00f      	b.n	80056b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d106      	bne.n	80056aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800569c:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	4a14      	ldr	r2, [pc, #80]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80056a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056a8:	e005      	b.n	80056b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056aa:	4b12      	ldr	r3, [pc, #72]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80056ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ae:	4a11      	ldr	r2, [pc, #68]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80056b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056b6:	4b0f      	ldr	r3, [pc, #60]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a0e      	ldr	r2, [pc, #56]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c2:	f7fc fe41 	bl	8002348 <HAL_GetTick>
 80056c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056c8:	e008      	b.n	80056dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056ca:	f7fc fe3d 	bl	8002348 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e006      	b.n	80056ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056dc:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <RCCEx_PLL3_Config+0x15c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	58024400 	.word	0x58024400
 80056f8:	ffff0007 	.word	0xffff0007

080056fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e10f      	b.n	800592e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a87      	ldr	r2, [pc, #540]	@ (8005938 <HAL_SPI_Init+0x23c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00f      	beq.n	800573e <HAL_SPI_Init+0x42>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a86      	ldr	r2, [pc, #536]	@ (800593c <HAL_SPI_Init+0x240>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00a      	beq.n	800573e <HAL_SPI_Init+0x42>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a84      	ldr	r2, [pc, #528]	@ (8005940 <HAL_SPI_Init+0x244>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d005      	beq.n	800573e <HAL_SPI_Init+0x42>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b0f      	cmp	r3, #15
 8005738:	d901      	bls.n	800573e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e0f7      	b.n	800592e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fe2e 	bl	80063a0 <SPI_GetPacketSize>
 8005744:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a7b      	ldr	r2, [pc, #492]	@ (8005938 <HAL_SPI_Init+0x23c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00c      	beq.n	800576a <HAL_SPI_Init+0x6e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a79      	ldr	r2, [pc, #484]	@ (800593c <HAL_SPI_Init+0x240>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <HAL_SPI_Init+0x6e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a78      	ldr	r2, [pc, #480]	@ (8005940 <HAL_SPI_Init+0x244>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d002      	beq.n	800576a <HAL_SPI_Init+0x6e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b08      	cmp	r3, #8
 8005768:	d811      	bhi.n	800578e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800576e:	4a72      	ldr	r2, [pc, #456]	@ (8005938 <HAL_SPI_Init+0x23c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a70      	ldr	r2, [pc, #448]	@ (800593c <HAL_SPI_Init+0x240>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_SPI_Init+0x8c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a6f      	ldr	r2, [pc, #444]	@ (8005940 <HAL_SPI_Init+0x244>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d104      	bne.n	8005792 <HAL_SPI_Init+0x96>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b10      	cmp	r3, #16
 800578c:	d901      	bls.n	8005792 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0cd      	b.n	800592e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fa22 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0201 	bic.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80057ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057d8:	d119      	bne.n	800580e <HAL_SPI_Init+0x112>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057e2:	d103      	bne.n	80057ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10c      	bne.n	800580e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057fc:	d107      	bne.n	800580e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800580c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00f      	beq.n	800583a <HAL_SPI_Init+0x13e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b06      	cmp	r3, #6
 8005820:	d90b      	bls.n	800583a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e007      	b.n	800584a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69da      	ldr	r2, [r3, #28]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005852:	431a      	orrs	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	ea42 0103 	orr.w	r1, r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058aa:	ea42 0103 	orr.w	r1, r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d113      	bne.n	80058ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40013000 	.word	0x40013000
 800593c:	40003800 	.word	0x40003800
 8005940:	40003c00 	.word	0x40003c00

08005944 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	4613      	mov	r3, r2
 8005952:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3320      	adds	r3, #32
 800595a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800595c:	f7fc fcf4 	bl	8002348 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	d001      	beq.n	8005972 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800596e:	2302      	movs	r3, #2
 8005970:	e1d1      	b.n	8005d16 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_SPI_Transmit+0x3a>
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e1c9      	b.n	8005d16 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_SPI_Transmit+0x4c>
 800598c:	2302      	movs	r3, #2
 800598e:	e1c2      	b.n	8005d16 <HAL_SPI_Transmit+0x3d2>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2203      	movs	r2, #3
 800599c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	88fa      	ldrh	r2, [r7, #6]
 80059b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80059e8:	d108      	bne.n	80059fc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	e009      	b.n	8005a10 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005a0e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	4b96      	ldr	r3, [pc, #600]	@ (8005c70 <HAL_SPI_Transmit+0x32c>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	88f9      	ldrh	r1, [r7, #6]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a3c:	d107      	bne.n	8005a4e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b0f      	cmp	r3, #15
 8005a54:	d947      	bls.n	8005ae6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005a56:	e03f      	b.n	8005ad8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d114      	bne.n	8005a90 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	1d1a      	adds	r2, r3, #4
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005a8e:	e023      	b.n	8005ad8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a90:	f7fc fc5a 	bl	8002348 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d803      	bhi.n	8005aa8 <HAL_SPI_Transmit+0x164>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d102      	bne.n	8005aae <HAL_SPI_Transmit+0x16a>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d114      	bne.n	8005ad8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fba8 	bl	8006204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e11e      	b.n	8005d16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1b9      	bne.n	8005a58 <HAL_SPI_Transmit+0x114>
 8005ae4:	e0f1      	b.n	8005cca <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	f240 80e6 	bls.w	8005cbc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005af0:	e05d      	b.n	8005bae <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d132      	bne.n	8005b66 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d918      	bls.n	8005b3e <HAL_SPI_Transmit+0x1fa>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d014      	beq.n	8005b3e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b24:	1d1a      	adds	r2, r3, #4
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b02      	subs	r3, #2
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b3c:	e037      	b.n	8005bae <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b42:	881a      	ldrh	r2, [r3, #0]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b64:	e023      	b.n	8005bae <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b66:	f7fc fbef 	bl	8002348 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d803      	bhi.n	8005b7e <HAL_SPI_Transmit+0x23a>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d102      	bne.n	8005b84 <HAL_SPI_Transmit+0x240>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d114      	bne.n	8005bae <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fb3d 	bl	8006204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e0b3      	b.n	8005d16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d19b      	bne.n	8005af2 <HAL_SPI_Transmit+0x1ae>
 8005bba:	e086      	b.n	8005cca <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d154      	bne.n	8005c74 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d918      	bls.n	8005c08 <HAL_SPI_Transmit+0x2c4>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bda:	2b40      	cmp	r3, #64	@ 0x40
 8005bdc:	d914      	bls.n	8005c08 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bee:	1d1a      	adds	r2, r3, #4
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b04      	subs	r3, #4
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c06:	e059      	b.n	8005cbc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d917      	bls.n	8005c44 <HAL_SPI_Transmit+0x300>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d013      	beq.n	8005c44 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c20:	881a      	ldrh	r2, [r3, #0]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2a:	1c9a      	adds	r2, r3, #2
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b02      	subs	r3, #2
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c42:	e03b      	b.n	8005cbc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3320      	adds	r3, #32
 8005c4e:	7812      	ldrb	r2, [r2, #0]
 8005c50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c6e:	e025      	b.n	8005cbc <HAL_SPI_Transmit+0x378>
 8005c70:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c74:	f7fc fb68 	bl	8002348 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d803      	bhi.n	8005c8c <HAL_SPI_Transmit+0x348>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d102      	bne.n	8005c92 <HAL_SPI_Transmit+0x34e>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d114      	bne.n	8005cbc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fab6 	bl	8006204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e02c      	b.n	8005d16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f47f af79 	bne.w	8005bbc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2108      	movs	r1, #8
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fb35 	bl	8006344 <SPI_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce6:	f043 0220 	orr.w	r2, r3, #32
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fa87 	bl	8006204 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005d14:	2300      	movs	r3, #0
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop

08005d20 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3330      	adds	r3, #48	@ 0x30
 8005d42:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d44:	f7fc fb00 	bl	8002348 <HAL_GetTick>
 8005d48:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d001      	beq.n	8005d5a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
 8005d58:	e250      	b.n	80061fc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_Receive+0x46>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e248      	b.n	80061fc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_SPI_Receive+0x58>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e241      	b.n	80061fc <HAL_SPI_Receive+0x4dc>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2204      	movs	r2, #4
 8005d84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	88fa      	ldrh	r2, [r7, #6]
 8005d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	88fa      	ldrh	r2, [r7, #6]
 8005da2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005dd0:	d108      	bne.n	8005de4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	e009      	b.n	8005df8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005df6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	4b95      	ldr	r3, [pc, #596]	@ (8006054 <HAL_SPI_Receive+0x334>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	88f9      	ldrh	r1, [r7, #6]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e24:	d107      	bne.n	8005e36 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b0f      	cmp	r3, #15
 8005e3c:	d96c      	bls.n	8005f18 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005e3e:	e064      	b.n	8005f0a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d114      	bne.n	8005e80 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e60:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e66:	1d1a      	adds	r2, r3, #4
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005e7e:	e044      	b.n	8005f0a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	8bfa      	ldrh	r2, [r7, #30]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d919      	bls.n	8005ec2 <HAL_SPI_Receive+0x1a2>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d014      	beq.n	8005ec2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ea0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ea2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005ec0:	e023      	b.n	8005f0a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec2:	f7fc fa41 	bl	8002348 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d803      	bhi.n	8005eda <HAL_SPI_Receive+0x1ba>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_Receive+0x1c0>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d114      	bne.n	8005f0a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f98f 	bl	8006204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e178      	b.n	80061fc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d194      	bne.n	8005e40 <HAL_SPI_Receive+0x120>
 8005f16:	e15e      	b.n	80061d6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2b07      	cmp	r3, #7
 8005f1e:	f240 8153 	bls.w	80061c8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005f22:	e08f      	b.n	8006044 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d114      	bne.n	8005f64 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	8812      	ldrh	r2, [r2, #0]
 8005f42:	b292      	uxth	r2, r2
 8005f44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f4a:	1c9a      	adds	r2, r3, #2
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005f62:	e06f      	b.n	8006044 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8bfa      	ldrh	r2, [r7, #30]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d924      	bls.n	8005fbc <HAL_SPI_Receive+0x29c>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01f      	beq.n	8005fbc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	8812      	ldrh	r2, [r2, #0]
 8005f84:	b292      	uxth	r2, r2
 8005f86:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	8812      	ldrh	r2, [r2, #0]
 8005f9a:	b292      	uxth	r2, r2
 8005f9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa2:	1c9a      	adds	r2, r3, #2
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b02      	subs	r3, #2
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005fba:	e043      	b.n	8006044 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d119      	bne.n	8005ffc <HAL_SPI_Receive+0x2dc>
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	8812      	ldrh	r2, [r2, #0]
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe2:	1c9a      	adds	r2, r3, #2
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005ffa:	e023      	b.n	8006044 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ffc:	f7fc f9a4 	bl	8002348 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d803      	bhi.n	8006014 <HAL_SPI_Receive+0x2f4>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d102      	bne.n	800601a <HAL_SPI_Receive+0x2fa>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d114      	bne.n	8006044 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 f8f2 	bl	8006204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006026:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0db      	b.n	80061fc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	f47f af69 	bne.w	8005f24 <HAL_SPI_Receive+0x204>
 8006052:	e0c0      	b.n	80061d6 <HAL_SPI_Receive+0x4b6>
 8006054:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b01      	cmp	r3, #1
 800606c:	d117      	bne.n	800609e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800609c:	e094      	b.n	80061c8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	8bfa      	ldrh	r2, [r7, #30]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d946      	bls.n	800613a <HAL_SPI_Receive+0x41a>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d041      	beq.n	800613a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060fa:	7812      	ldrb	r2, [r2, #0]
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b04      	subs	r3, #4
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006138:	e046      	b.n	80061c8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b03      	cmp	r3, #3
 8006144:	d81c      	bhi.n	8006180 <HAL_SPI_Receive+0x460>
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d017      	beq.n	8006180 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800615c:	7812      	ldrb	r2, [r2, #0]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800617e:	e023      	b.n	80061c8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006180:	f7fc f8e2 	bl	8002348 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d803      	bhi.n	8006198 <HAL_SPI_Receive+0x478>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d102      	bne.n	800619e <HAL_SPI_Receive+0x47e>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d114      	bne.n	80061c8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f830 	bl	8006204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e019      	b.n	80061fc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f47f af41 	bne.w	8006058 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f814 	bl	8006204 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80061fa:	2300      	movs	r3, #0
  }
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0208 	orr.w	r2, r2, #8
 8006222:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0210 	orr.w	r2, r2, #16
 8006232:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6919      	ldr	r1, [r3, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b3c      	ldr	r3, [pc, #240]	@ (8006340 <SPI_CloseTransfer+0x13c>)
 8006250:	400b      	ands	r3, r1
 8006252:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006262:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b04      	cmp	r3, #4
 800626e:	d014      	beq.n	800629a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00f      	beq.n	800629a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006280:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0220 	orr.w	r2, r2, #32
 8006298:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d014      	beq.n	80062d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00f      	beq.n	80062d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062b6:	f043 0204 	orr.w	r2, r3, #4
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00f      	beq.n	80062fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00f      	beq.n	8006324 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800630a:	f043 0208 	orr.w	r2, r3, #8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006322:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	fffffc90 	.word	0xfffffc90

08006344 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006354:	e010      	b.n	8006378 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006356:	f7fb fff7 	bl	8002348 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d803      	bhi.n	800636e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d102      	bne.n	8006374 <SPI_WaitOnFlagUntilTimeout+0x30>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e00f      	b.n	8006398 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4013      	ands	r3, r2
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	429a      	cmp	r2, r3
 8006386:	bf0c      	ite	eq
 8006388:	2301      	moveq	r3, #1
 800638a:	2300      	movne	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	429a      	cmp	r2, r3
 8006394:	d0df      	beq.n	8006356 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	3307      	adds	r3, #7
 80063be:	08db      	lsrs	r3, r3, #3
 80063c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e049      	b.n	800647c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fb fcf9 	bl	8001df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3304      	adds	r3, #4
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f000 fad5 	bl	80069c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d001      	beq.n	800649c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e054      	b.n	8006546 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a26      	ldr	r2, [pc, #152]	@ (8006554 <HAL_TIM_Base_Start_IT+0xd0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c6:	d01d      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a22      	ldr	r2, [pc, #136]	@ (8006558 <HAL_TIM_Base_Start_IT+0xd4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a21      	ldr	r2, [pc, #132]	@ (800655c <HAL_TIM_Base_Start_IT+0xd8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006560 <HAL_TIM_Base_Start_IT+0xdc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006564 <HAL_TIM_Base_Start_IT+0xe0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <HAL_TIM_Base_Start_IT+0xe4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1b      	ldr	r2, [pc, #108]	@ (800656c <HAL_TIM_Base_Start_IT+0xe8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d115      	bne.n	8006530 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	4b19      	ldr	r3, [pc, #100]	@ (8006570 <HAL_TIM_Base_Start_IT+0xec>)
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b06      	cmp	r3, #6
 8006514:	d015      	beq.n	8006542 <HAL_TIM_Base_Start_IT+0xbe>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651c:	d011      	beq.n	8006542 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0201 	orr.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652e:	e008      	b.n	8006542 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e000      	b.n	8006544 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40010000 	.word	0x40010000
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40010400 	.word	0x40010400
 8006568:	40001800 	.word	0x40001800
 800656c:	40014000 	.word	0x40014000
 8006570:	00010007 	.word	0x00010007

08006574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d020      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0202 	mvn.w	r2, #2
 80065a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9e2 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f9d4 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f9e5 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01b      	beq.n	8006624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0204 	mvn.w	r2, #4
 80065f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f9bc 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9ae 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f9bf 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d020      	beq.n	8006670 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01b      	beq.n	8006670 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0208 	mvn.w	r2, #8
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2204      	movs	r2, #4
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f996 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f988 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f999 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b00      	cmp	r3, #0
 8006678:	d020      	beq.n	80066bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01b      	beq.n	80066bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0210 	mvn.w	r2, #16
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2208      	movs	r2, #8
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f970 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f962 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f973 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00c      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0201 	mvn.w	r2, #1
 80066d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fa ffe2 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00c      	beq.n	800670e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb31 	bl	8006d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00c      	beq.n	8006732 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800672a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fb29 	bl	8006d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00c      	beq.n	8006756 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f92d 	bl	80069b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00c      	beq.n	800677a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f06f 0220 	mvn.w	r2, #32
 8006772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 faf1 	bl	8006d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c>
 800679c:	2302      	movs	r3, #2
 800679e:	e0dc      	b.n	800695a <HAL_TIM_ConfigClockSource+0x1d6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006964 <HAL_TIM_ConfigClockSource+0x1e0>)
 80067bc:	4013      	ands	r3, r2
 80067be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a64      	ldr	r2, [pc, #400]	@ (8006968 <HAL_TIM_ConfigClockSource+0x1e4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	f000 80a9 	beq.w	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 80067dc:	4a62      	ldr	r2, [pc, #392]	@ (8006968 <HAL_TIM_ConfigClockSource+0x1e4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	f200 80ae 	bhi.w	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 80067e4:	4a61      	ldr	r2, [pc, #388]	@ (800696c <HAL_TIM_ConfigClockSource+0x1e8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	f000 80a1 	beq.w	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 80067ec:	4a5f      	ldr	r2, [pc, #380]	@ (800696c <HAL_TIM_ConfigClockSource+0x1e8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	f200 80a6 	bhi.w	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 80067f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006970 <HAL_TIM_ConfigClockSource+0x1ec>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	f000 8099 	beq.w	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 80067fc:	4a5c      	ldr	r2, [pc, #368]	@ (8006970 <HAL_TIM_ConfigClockSource+0x1ec>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	f200 809e 	bhi.w	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006804:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006808:	f000 8091 	beq.w	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 800680c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006810:	f200 8096 	bhi.w	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006818:	f000 8089 	beq.w	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 800681c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006820:	f200 808e 	bhi.w	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006828:	d03e      	beq.n	80068a8 <HAL_TIM_ConfigClockSource+0x124>
 800682a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800682e:	f200 8087 	bhi.w	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006836:	f000 8086 	beq.w	8006946 <HAL_TIM_ConfigClockSource+0x1c2>
 800683a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800683e:	d87f      	bhi.n	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006840:	2b70      	cmp	r3, #112	@ 0x70
 8006842:	d01a      	beq.n	800687a <HAL_TIM_ConfigClockSource+0xf6>
 8006844:	2b70      	cmp	r3, #112	@ 0x70
 8006846:	d87b      	bhi.n	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006848:	2b60      	cmp	r3, #96	@ 0x60
 800684a:	d050      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x16a>
 800684c:	2b60      	cmp	r3, #96	@ 0x60
 800684e:	d877      	bhi.n	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006850:	2b50      	cmp	r3, #80	@ 0x50
 8006852:	d03c      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x14a>
 8006854:	2b50      	cmp	r3, #80	@ 0x50
 8006856:	d873      	bhi.n	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006858:	2b40      	cmp	r3, #64	@ 0x40
 800685a:	d058      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x18a>
 800685c:	2b40      	cmp	r3, #64	@ 0x40
 800685e:	d86f      	bhi.n	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006860:	2b30      	cmp	r3, #48	@ 0x30
 8006862:	d064      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 8006864:	2b30      	cmp	r3, #48	@ 0x30
 8006866:	d86b      	bhi.n	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006868:	2b20      	cmp	r3, #32
 800686a:	d060      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 800686c:	2b20      	cmp	r3, #32
 800686e:	d867      	bhi.n	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d05c      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 8006874:	2b10      	cmp	r3, #16
 8006876:	d05a      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x1aa>
 8006878:	e062      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800688a:	f000 f9b9 	bl	8006c00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800689c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	609a      	str	r2, [r3, #8]
      break;
 80068a6:	e04f      	b.n	8006948 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068b8:	f000 f9a2 	bl	8006c00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068ca:	609a      	str	r2, [r3, #8]
      break;
 80068cc:	e03c      	b.n	8006948 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068da:	461a      	mov	r2, r3
 80068dc:	f000 f912 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2150      	movs	r1, #80	@ 0x50
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 f96c 	bl	8006bc4 <TIM_ITRx_SetConfig>
      break;
 80068ec:	e02c      	b.n	8006948 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068fa:	461a      	mov	r2, r3
 80068fc:	f000 f931 	bl	8006b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2160      	movs	r1, #96	@ 0x60
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f95c 	bl	8006bc4 <TIM_ITRx_SetConfig>
      break;
 800690c:	e01c      	b.n	8006948 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691a:	461a      	mov	r2, r3
 800691c:	f000 f8f2 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2140      	movs	r1, #64	@ 0x40
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f94c 	bl	8006bc4 <TIM_ITRx_SetConfig>
      break;
 800692c:	e00c      	b.n	8006948 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f000 f943 	bl	8006bc4 <TIM_ITRx_SetConfig>
      break;
 800693e:	e003      	b.n	8006948 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
      break;
 8006944:	e000      	b.n	8006948 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	ffceff88 	.word	0xffceff88
 8006968:	00100040 	.word	0x00100040
 800696c:	00100030 	.word	0x00100030
 8006970:	00100020 	.word	0x00100020

08006974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a43      	ldr	r2, [pc, #268]	@ (8006ae4 <TIM_Base_SetConfig+0x120>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e2:	d00f      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a40      	ldr	r2, [pc, #256]	@ (8006ae8 <TIM_Base_SetConfig+0x124>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3f      	ldr	r2, [pc, #252]	@ (8006aec <TIM_Base_SetConfig+0x128>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3e      	ldr	r2, [pc, #248]	@ (8006af0 <TIM_Base_SetConfig+0x12c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3d      	ldr	r2, [pc, #244]	@ (8006af4 <TIM_Base_SetConfig+0x130>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d108      	bne.n	8006a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a32      	ldr	r2, [pc, #200]	@ (8006ae4 <TIM_Base_SetConfig+0x120>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01f      	beq.n	8006a5e <TIM_Base_SetConfig+0x9a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a24:	d01b      	beq.n	8006a5e <TIM_Base_SetConfig+0x9a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2f      	ldr	r2, [pc, #188]	@ (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d017      	beq.n	8006a5e <TIM_Base_SetConfig+0x9a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2e      	ldr	r2, [pc, #184]	@ (8006aec <TIM_Base_SetConfig+0x128>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <TIM_Base_SetConfig+0x9a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2d      	ldr	r2, [pc, #180]	@ (8006af0 <TIM_Base_SetConfig+0x12c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00f      	beq.n	8006a5e <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2c      	ldr	r2, [pc, #176]	@ (8006af4 <TIM_Base_SetConfig+0x130>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_Base_SetConfig+0x9a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2b      	ldr	r2, [pc, #172]	@ (8006af8 <TIM_Base_SetConfig+0x134>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_Base_SetConfig+0x9a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2a      	ldr	r2, [pc, #168]	@ (8006afc <TIM_Base_SetConfig+0x138>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_Base_SetConfig+0x9a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a29      	ldr	r2, [pc, #164]	@ (8006b00 <TIM_Base_SetConfig+0x13c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d108      	bne.n	8006a70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a14      	ldr	r2, [pc, #80]	@ (8006ae4 <TIM_Base_SetConfig+0x120>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00f      	beq.n	8006ab6 <TIM_Base_SetConfig+0xf2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a16      	ldr	r2, [pc, #88]	@ (8006af4 <TIM_Base_SetConfig+0x130>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00b      	beq.n	8006ab6 <TIM_Base_SetConfig+0xf2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a15      	ldr	r2, [pc, #84]	@ (8006af8 <TIM_Base_SetConfig+0x134>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d007      	beq.n	8006ab6 <TIM_Base_SetConfig+0xf2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a14      	ldr	r2, [pc, #80]	@ (8006afc <TIM_Base_SetConfig+0x138>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d003      	beq.n	8006ab6 <TIM_Base_SetConfig+0xf2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a13      	ldr	r2, [pc, #76]	@ (8006b00 <TIM_Base_SetConfig+0x13c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d103      	bne.n	8006abe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f043 0204 	orr.w	r2, r3, #4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	601a      	str	r2, [r3, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800

08006b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0201 	bic.w	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f023 030a 	bic.w	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f023 0210 	bic.w	r2, r3, #16
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4b09      	ldr	r3, [pc, #36]	@ (8006bfc <TIM_ITRx_SetConfig+0x38>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f043 0307 	orr.w	r3, r3, #7
 8006be6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	609a      	str	r2, [r3, #8]
}
 8006bee:	bf00      	nop
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	ffcfff8f 	.word	0xffcfff8f

08006c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	021a      	lsls	r2, r3, #8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	609a      	str	r2, [r3, #8]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e06d      	b.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a30      	ldr	r2, [pc, #192]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a2f      	ldr	r2, [pc, #188]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d108      	bne.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a20      	ldr	r2, [pc, #128]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d022      	beq.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cca:	d01d      	beq.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d018      	beq.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1c      	ldr	r2, [pc, #112]	@ (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d013      	beq.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00e      	beq.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a15      	ldr	r2, [pc, #84]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d009      	beq.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a16      	ldr	r2, [pc, #88]	@ (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a15      	ldr	r2, [pc, #84]	@ (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10c      	bne.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40010400 	.word	0x40010400
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	40001800 	.word	0x40001800
 8006d58:	40014000 	.word	0x40014000

08006d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e042      	b.n	8006e30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fb f83f 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2224      	movs	r2, #36	@ 0x24
 8006dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fe1e 	bl	8007a24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8b3 	bl	8006f54 <UART_SetConfig>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e01b      	b.n	8006e30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fe9d 	bl	8007b68 <UART_CheckIdleState>
 8006e2e:	4603      	mov	r3, r0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08a      	sub	sp, #40	@ 0x28
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	4613      	mov	r3, r2
 8006e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d17b      	bne.n	8006f4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <HAL_UART_Transmit+0x26>
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e074      	b.n	8006f4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2221      	movs	r2, #33	@ 0x21
 8006e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e72:	f7fb fa69 	bl	8002348 <HAL_GetTick>
 8006e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e90:	d108      	bne.n	8006ea4 <HAL_UART_Transmit+0x6c>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	e003      	b.n	8006eac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006eac:	e030      	b.n	8006f10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2180      	movs	r1, #128	@ 0x80
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 feff 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e03d      	b.n	8006f4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10b      	bne.n	8006eee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ee4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3302      	adds	r3, #2
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	e007      	b.n	8006efe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	3301      	adds	r3, #1
 8006efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1c8      	bne.n	8006eae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2200      	movs	r2, #0
 8006f24:	2140      	movs	r1, #64	@ 0x40
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fec8 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e006      	b.n	8006f4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e000      	b.n	8006f4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f4a:	2302      	movs	r3, #2
  }
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f58:	b092      	sub	sp, #72	@ 0x48
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4bbe      	ldr	r3, [pc, #760]	@ (800727c <UART_SetConfig+0x328>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4ab3      	ldr	r2, [pc, #716]	@ (8007280 <UART_SetConfig+0x32c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	4baf      	ldr	r3, [pc, #700]	@ (8007284 <UART_SetConfig+0x330>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	f023 010f 	bic.w	r1, r3, #15
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4aa6      	ldr	r2, [pc, #664]	@ (8007288 <UART_SetConfig+0x334>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d177      	bne.n	80070e4 <UART_SetConfig+0x190>
 8006ff4:	4ba5      	ldr	r3, [pc, #660]	@ (800728c <UART_SetConfig+0x338>)
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ffc:	2b28      	cmp	r3, #40	@ 0x28
 8006ffe:	d86d      	bhi.n	80070dc <UART_SetConfig+0x188>
 8007000:	a201      	add	r2, pc, #4	@ (adr r2, 8007008 <UART_SetConfig+0xb4>)
 8007002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007006:	bf00      	nop
 8007008:	080070ad 	.word	0x080070ad
 800700c:	080070dd 	.word	0x080070dd
 8007010:	080070dd 	.word	0x080070dd
 8007014:	080070dd 	.word	0x080070dd
 8007018:	080070dd 	.word	0x080070dd
 800701c:	080070dd 	.word	0x080070dd
 8007020:	080070dd 	.word	0x080070dd
 8007024:	080070dd 	.word	0x080070dd
 8007028:	080070b5 	.word	0x080070b5
 800702c:	080070dd 	.word	0x080070dd
 8007030:	080070dd 	.word	0x080070dd
 8007034:	080070dd 	.word	0x080070dd
 8007038:	080070dd 	.word	0x080070dd
 800703c:	080070dd 	.word	0x080070dd
 8007040:	080070dd 	.word	0x080070dd
 8007044:	080070dd 	.word	0x080070dd
 8007048:	080070bd 	.word	0x080070bd
 800704c:	080070dd 	.word	0x080070dd
 8007050:	080070dd 	.word	0x080070dd
 8007054:	080070dd 	.word	0x080070dd
 8007058:	080070dd 	.word	0x080070dd
 800705c:	080070dd 	.word	0x080070dd
 8007060:	080070dd 	.word	0x080070dd
 8007064:	080070dd 	.word	0x080070dd
 8007068:	080070c5 	.word	0x080070c5
 800706c:	080070dd 	.word	0x080070dd
 8007070:	080070dd 	.word	0x080070dd
 8007074:	080070dd 	.word	0x080070dd
 8007078:	080070dd 	.word	0x080070dd
 800707c:	080070dd 	.word	0x080070dd
 8007080:	080070dd 	.word	0x080070dd
 8007084:	080070dd 	.word	0x080070dd
 8007088:	080070cd 	.word	0x080070cd
 800708c:	080070dd 	.word	0x080070dd
 8007090:	080070dd 	.word	0x080070dd
 8007094:	080070dd 	.word	0x080070dd
 8007098:	080070dd 	.word	0x080070dd
 800709c:	080070dd 	.word	0x080070dd
 80070a0:	080070dd 	.word	0x080070dd
 80070a4:	080070dd 	.word	0x080070dd
 80070a8:	080070d5 	.word	0x080070d5
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b2:	e222      	b.n	80074fa <UART_SetConfig+0x5a6>
 80070b4:	2304      	movs	r3, #4
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e21e      	b.n	80074fa <UART_SetConfig+0x5a6>
 80070bc:	2308      	movs	r3, #8
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e21a      	b.n	80074fa <UART_SetConfig+0x5a6>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ca:	e216      	b.n	80074fa <UART_SetConfig+0x5a6>
 80070cc:	2320      	movs	r3, #32
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d2:	e212      	b.n	80074fa <UART_SetConfig+0x5a6>
 80070d4:	2340      	movs	r3, #64	@ 0x40
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070da:	e20e      	b.n	80074fa <UART_SetConfig+0x5a6>
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e2:	e20a      	b.n	80074fa <UART_SetConfig+0x5a6>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a69      	ldr	r2, [pc, #420]	@ (8007290 <UART_SetConfig+0x33c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d130      	bne.n	8007150 <UART_SetConfig+0x1fc>
 80070ee:	4b67      	ldr	r3, [pc, #412]	@ (800728c <UART_SetConfig+0x338>)
 80070f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d826      	bhi.n	8007148 <UART_SetConfig+0x1f4>
 80070fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <UART_SetConfig+0x1ac>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007119 	.word	0x08007119
 8007104:	08007121 	.word	0x08007121
 8007108:	08007129 	.word	0x08007129
 800710c:	08007131 	.word	0x08007131
 8007110:	08007139 	.word	0x08007139
 8007114:	08007141 	.word	0x08007141
 8007118:	2300      	movs	r3, #0
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e1ec      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e1e8      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e1e4      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e1e0      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007138:	2320      	movs	r3, #32
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e1dc      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007140:	2340      	movs	r3, #64	@ 0x40
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007146:	e1d8      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007148:	2380      	movs	r3, #128	@ 0x80
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714e:	e1d4      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a4f      	ldr	r2, [pc, #316]	@ (8007294 <UART_SetConfig+0x340>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d130      	bne.n	80071bc <UART_SetConfig+0x268>
 800715a:	4b4c      	ldr	r3, [pc, #304]	@ (800728c <UART_SetConfig+0x338>)
 800715c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	2b05      	cmp	r3, #5
 8007164:	d826      	bhi.n	80071b4 <UART_SetConfig+0x260>
 8007166:	a201      	add	r2, pc, #4	@ (adr r2, 800716c <UART_SetConfig+0x218>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	08007185 	.word	0x08007185
 8007170:	0800718d 	.word	0x0800718d
 8007174:	08007195 	.word	0x08007195
 8007178:	0800719d 	.word	0x0800719d
 800717c:	080071a5 	.word	0x080071a5
 8007180:	080071ad 	.word	0x080071ad
 8007184:	2300      	movs	r3, #0
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718a:	e1b6      	b.n	80074fa <UART_SetConfig+0x5a6>
 800718c:	2304      	movs	r3, #4
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e1b2      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007194:	2308      	movs	r3, #8
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719a:	e1ae      	b.n	80074fa <UART_SetConfig+0x5a6>
 800719c:	2310      	movs	r3, #16
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e1aa      	b.n	80074fa <UART_SetConfig+0x5a6>
 80071a4:	2320      	movs	r3, #32
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071aa:	e1a6      	b.n	80074fa <UART_SetConfig+0x5a6>
 80071ac:	2340      	movs	r3, #64	@ 0x40
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b2:	e1a2      	b.n	80074fa <UART_SetConfig+0x5a6>
 80071b4:	2380      	movs	r3, #128	@ 0x80
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ba:	e19e      	b.n	80074fa <UART_SetConfig+0x5a6>
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a35      	ldr	r2, [pc, #212]	@ (8007298 <UART_SetConfig+0x344>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d130      	bne.n	8007228 <UART_SetConfig+0x2d4>
 80071c6:	4b31      	ldr	r3, [pc, #196]	@ (800728c <UART_SetConfig+0x338>)
 80071c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	2b05      	cmp	r3, #5
 80071d0:	d826      	bhi.n	8007220 <UART_SetConfig+0x2cc>
 80071d2:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <UART_SetConfig+0x284>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071f1 	.word	0x080071f1
 80071dc:	080071f9 	.word	0x080071f9
 80071e0:	08007201 	.word	0x08007201
 80071e4:	08007209 	.word	0x08007209
 80071e8:	08007211 	.word	0x08007211
 80071ec:	08007219 	.word	0x08007219
 80071f0:	2300      	movs	r3, #0
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f6:	e180      	b.n	80074fa <UART_SetConfig+0x5a6>
 80071f8:	2304      	movs	r3, #4
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fe:	e17c      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007200:	2308      	movs	r3, #8
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007206:	e178      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007208:	2310      	movs	r3, #16
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720e:	e174      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007210:	2320      	movs	r3, #32
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007216:	e170      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007218:	2340      	movs	r3, #64	@ 0x40
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721e:	e16c      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007220:	2380      	movs	r3, #128	@ 0x80
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007226:	e168      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1b      	ldr	r2, [pc, #108]	@ (800729c <UART_SetConfig+0x348>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d142      	bne.n	80072b8 <UART_SetConfig+0x364>
 8007232:	4b16      	ldr	r3, [pc, #88]	@ (800728c <UART_SetConfig+0x338>)
 8007234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b05      	cmp	r3, #5
 800723c:	d838      	bhi.n	80072b0 <UART_SetConfig+0x35c>
 800723e:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <UART_SetConfig+0x2f0>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	0800725d 	.word	0x0800725d
 8007248:	08007265 	.word	0x08007265
 800724c:	0800726d 	.word	0x0800726d
 8007250:	08007275 	.word	0x08007275
 8007254:	080072a1 	.word	0x080072a1
 8007258:	080072a9 	.word	0x080072a9
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007262:	e14a      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007264:	2304      	movs	r3, #4
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726a:	e146      	b.n	80074fa <UART_SetConfig+0x5a6>
 800726c:	2308      	movs	r3, #8
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007272:	e142      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007274:	2310      	movs	r3, #16
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727a:	e13e      	b.n	80074fa <UART_SetConfig+0x5a6>
 800727c:	cfff69f3 	.word	0xcfff69f3
 8007280:	58000c00 	.word	0x58000c00
 8007284:	11fff4ff 	.word	0x11fff4ff
 8007288:	40011000 	.word	0x40011000
 800728c:	58024400 	.word	0x58024400
 8007290:	40004400 	.word	0x40004400
 8007294:	40004800 	.word	0x40004800
 8007298:	40004c00 	.word	0x40004c00
 800729c:	40005000 	.word	0x40005000
 80072a0:	2320      	movs	r3, #32
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a6:	e128      	b.n	80074fa <UART_SetConfig+0x5a6>
 80072a8:	2340      	movs	r3, #64	@ 0x40
 80072aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ae:	e124      	b.n	80074fa <UART_SetConfig+0x5a6>
 80072b0:	2380      	movs	r3, #128	@ 0x80
 80072b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b6:	e120      	b.n	80074fa <UART_SetConfig+0x5a6>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4acb      	ldr	r2, [pc, #812]	@ (80075ec <UART_SetConfig+0x698>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d176      	bne.n	80073b0 <UART_SetConfig+0x45c>
 80072c2:	4bcb      	ldr	r3, [pc, #812]	@ (80075f0 <UART_SetConfig+0x69c>)
 80072c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072ca:	2b28      	cmp	r3, #40	@ 0x28
 80072cc:	d86c      	bhi.n	80073a8 <UART_SetConfig+0x454>
 80072ce:	a201      	add	r2, pc, #4	@ (adr r2, 80072d4 <UART_SetConfig+0x380>)
 80072d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d4:	08007379 	.word	0x08007379
 80072d8:	080073a9 	.word	0x080073a9
 80072dc:	080073a9 	.word	0x080073a9
 80072e0:	080073a9 	.word	0x080073a9
 80072e4:	080073a9 	.word	0x080073a9
 80072e8:	080073a9 	.word	0x080073a9
 80072ec:	080073a9 	.word	0x080073a9
 80072f0:	080073a9 	.word	0x080073a9
 80072f4:	08007381 	.word	0x08007381
 80072f8:	080073a9 	.word	0x080073a9
 80072fc:	080073a9 	.word	0x080073a9
 8007300:	080073a9 	.word	0x080073a9
 8007304:	080073a9 	.word	0x080073a9
 8007308:	080073a9 	.word	0x080073a9
 800730c:	080073a9 	.word	0x080073a9
 8007310:	080073a9 	.word	0x080073a9
 8007314:	08007389 	.word	0x08007389
 8007318:	080073a9 	.word	0x080073a9
 800731c:	080073a9 	.word	0x080073a9
 8007320:	080073a9 	.word	0x080073a9
 8007324:	080073a9 	.word	0x080073a9
 8007328:	080073a9 	.word	0x080073a9
 800732c:	080073a9 	.word	0x080073a9
 8007330:	080073a9 	.word	0x080073a9
 8007334:	08007391 	.word	0x08007391
 8007338:	080073a9 	.word	0x080073a9
 800733c:	080073a9 	.word	0x080073a9
 8007340:	080073a9 	.word	0x080073a9
 8007344:	080073a9 	.word	0x080073a9
 8007348:	080073a9 	.word	0x080073a9
 800734c:	080073a9 	.word	0x080073a9
 8007350:	080073a9 	.word	0x080073a9
 8007354:	08007399 	.word	0x08007399
 8007358:	080073a9 	.word	0x080073a9
 800735c:	080073a9 	.word	0x080073a9
 8007360:	080073a9 	.word	0x080073a9
 8007364:	080073a9 	.word	0x080073a9
 8007368:	080073a9 	.word	0x080073a9
 800736c:	080073a9 	.word	0x080073a9
 8007370:	080073a9 	.word	0x080073a9
 8007374:	080073a1 	.word	0x080073a1
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737e:	e0bc      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007380:	2304      	movs	r3, #4
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e0b8      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007388:	2308      	movs	r3, #8
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738e:	e0b4      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007390:	2310      	movs	r3, #16
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e0b0      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007398:	2320      	movs	r3, #32
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e0ac      	b.n	80074fa <UART_SetConfig+0x5a6>
 80073a0:	2340      	movs	r3, #64	@ 0x40
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a6:	e0a8      	b.n	80074fa <UART_SetConfig+0x5a6>
 80073a8:	2380      	movs	r3, #128	@ 0x80
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ae:	e0a4      	b.n	80074fa <UART_SetConfig+0x5a6>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a8f      	ldr	r2, [pc, #572]	@ (80075f4 <UART_SetConfig+0x6a0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d130      	bne.n	800741c <UART_SetConfig+0x4c8>
 80073ba:	4b8d      	ldr	r3, [pc, #564]	@ (80075f0 <UART_SetConfig+0x69c>)
 80073bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d826      	bhi.n	8007414 <UART_SetConfig+0x4c0>
 80073c6:	a201      	add	r2, pc, #4	@ (adr r2, 80073cc <UART_SetConfig+0x478>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	080073e5 	.word	0x080073e5
 80073d0:	080073ed 	.word	0x080073ed
 80073d4:	080073f5 	.word	0x080073f5
 80073d8:	080073fd 	.word	0x080073fd
 80073dc:	08007405 	.word	0x08007405
 80073e0:	0800740d 	.word	0x0800740d
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ea:	e086      	b.n	80074fa <UART_SetConfig+0x5a6>
 80073ec:	2304      	movs	r3, #4
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e082      	b.n	80074fa <UART_SetConfig+0x5a6>
 80073f4:	2308      	movs	r3, #8
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e07e      	b.n	80074fa <UART_SetConfig+0x5a6>
 80073fc:	2310      	movs	r3, #16
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e07a      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007404:	2320      	movs	r3, #32
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e076      	b.n	80074fa <UART_SetConfig+0x5a6>
 800740c:	2340      	movs	r3, #64	@ 0x40
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007412:	e072      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007414:	2380      	movs	r3, #128	@ 0x80
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741a:	e06e      	b.n	80074fa <UART_SetConfig+0x5a6>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a75      	ldr	r2, [pc, #468]	@ (80075f8 <UART_SetConfig+0x6a4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d130      	bne.n	8007488 <UART_SetConfig+0x534>
 8007426:	4b72      	ldr	r3, [pc, #456]	@ (80075f0 <UART_SetConfig+0x69c>)
 8007428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	2b05      	cmp	r3, #5
 8007430:	d826      	bhi.n	8007480 <UART_SetConfig+0x52c>
 8007432:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <UART_SetConfig+0x4e4>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	08007451 	.word	0x08007451
 800743c:	08007459 	.word	0x08007459
 8007440:	08007461 	.word	0x08007461
 8007444:	08007469 	.word	0x08007469
 8007448:	08007471 	.word	0x08007471
 800744c:	08007479 	.word	0x08007479
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007456:	e050      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007458:	2304      	movs	r3, #4
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745e:	e04c      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007460:	2308      	movs	r3, #8
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007466:	e048      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007468:	2310      	movs	r3, #16
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746e:	e044      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007470:	2320      	movs	r3, #32
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007476:	e040      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007478:	2340      	movs	r3, #64	@ 0x40
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747e:	e03c      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007480:	2380      	movs	r3, #128	@ 0x80
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007486:	e038      	b.n	80074fa <UART_SetConfig+0x5a6>
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a5b      	ldr	r2, [pc, #364]	@ (80075fc <UART_SetConfig+0x6a8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d130      	bne.n	80074f4 <UART_SetConfig+0x5a0>
 8007492:	4b57      	ldr	r3, [pc, #348]	@ (80075f0 <UART_SetConfig+0x69c>)
 8007494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	2b05      	cmp	r3, #5
 800749c:	d826      	bhi.n	80074ec <UART_SetConfig+0x598>
 800749e:	a201      	add	r2, pc, #4	@ (adr r2, 80074a4 <UART_SetConfig+0x550>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074bd 	.word	0x080074bd
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	080074cd 	.word	0x080074cd
 80074b0:	080074d5 	.word	0x080074d5
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074e5 	.word	0x080074e5
 80074bc:	2302      	movs	r3, #2
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c2:	e01a      	b.n	80074fa <UART_SetConfig+0x5a6>
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ca:	e016      	b.n	80074fa <UART_SetConfig+0x5a6>
 80074cc:	2308      	movs	r3, #8
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d2:	e012      	b.n	80074fa <UART_SetConfig+0x5a6>
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074da:	e00e      	b.n	80074fa <UART_SetConfig+0x5a6>
 80074dc:	2320      	movs	r3, #32
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e2:	e00a      	b.n	80074fa <UART_SetConfig+0x5a6>
 80074e4:	2340      	movs	r3, #64	@ 0x40
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ea:	e006      	b.n	80074fa <UART_SetConfig+0x5a6>
 80074ec:	2380      	movs	r3, #128	@ 0x80
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f2:	e002      	b.n	80074fa <UART_SetConfig+0x5a6>
 80074f4:	2380      	movs	r3, #128	@ 0x80
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a3f      	ldr	r2, [pc, #252]	@ (80075fc <UART_SetConfig+0x6a8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	f040 80f8 	bne.w	80076f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007506:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800750a:	2b20      	cmp	r3, #32
 800750c:	dc46      	bgt.n	800759c <UART_SetConfig+0x648>
 800750e:	2b02      	cmp	r3, #2
 8007510:	f2c0 8082 	blt.w	8007618 <UART_SetConfig+0x6c4>
 8007514:	3b02      	subs	r3, #2
 8007516:	2b1e      	cmp	r3, #30
 8007518:	d87e      	bhi.n	8007618 <UART_SetConfig+0x6c4>
 800751a:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <UART_SetConfig+0x5cc>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	080075a3 	.word	0x080075a3
 8007524:	08007619 	.word	0x08007619
 8007528:	080075ab 	.word	0x080075ab
 800752c:	08007619 	.word	0x08007619
 8007530:	08007619 	.word	0x08007619
 8007534:	08007619 	.word	0x08007619
 8007538:	080075bb 	.word	0x080075bb
 800753c:	08007619 	.word	0x08007619
 8007540:	08007619 	.word	0x08007619
 8007544:	08007619 	.word	0x08007619
 8007548:	08007619 	.word	0x08007619
 800754c:	08007619 	.word	0x08007619
 8007550:	08007619 	.word	0x08007619
 8007554:	08007619 	.word	0x08007619
 8007558:	080075cb 	.word	0x080075cb
 800755c:	08007619 	.word	0x08007619
 8007560:	08007619 	.word	0x08007619
 8007564:	08007619 	.word	0x08007619
 8007568:	08007619 	.word	0x08007619
 800756c:	08007619 	.word	0x08007619
 8007570:	08007619 	.word	0x08007619
 8007574:	08007619 	.word	0x08007619
 8007578:	08007619 	.word	0x08007619
 800757c:	08007619 	.word	0x08007619
 8007580:	08007619 	.word	0x08007619
 8007584:	08007619 	.word	0x08007619
 8007588:	08007619 	.word	0x08007619
 800758c:	08007619 	.word	0x08007619
 8007590:	08007619 	.word	0x08007619
 8007594:	08007619 	.word	0x08007619
 8007598:	0800760b 	.word	0x0800760b
 800759c:	2b40      	cmp	r3, #64	@ 0x40
 800759e:	d037      	beq.n	8007610 <UART_SetConfig+0x6bc>
 80075a0:	e03a      	b.n	8007618 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80075a2:	f7fd fc89 	bl	8004eb8 <HAL_RCCEx_GetD3PCLK1Freq>
 80075a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075a8:	e03c      	b.n	8007624 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fd fc98 	bl	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b8:	e034      	b.n	8007624 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ba:	f107 0318 	add.w	r3, r7, #24
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fd fde4 	bl	800518c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c8:	e02c      	b.n	8007624 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ca:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <UART_SetConfig+0x69c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d016      	beq.n	8007604 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075d6:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <UART_SetConfig+0x69c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	08db      	lsrs	r3, r3, #3
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	4a07      	ldr	r2, [pc, #28]	@ (8007600 <UART_SetConfig+0x6ac>)
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075e8:	e01c      	b.n	8007624 <UART_SetConfig+0x6d0>
 80075ea:	bf00      	nop
 80075ec:	40011400 	.word	0x40011400
 80075f0:	58024400 	.word	0x58024400
 80075f4:	40007800 	.word	0x40007800
 80075f8:	40007c00 	.word	0x40007c00
 80075fc:	58000c00 	.word	0x58000c00
 8007600:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007604:	4b9d      	ldr	r3, [pc, #628]	@ (800787c <UART_SetConfig+0x928>)
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007608:	e00c      	b.n	8007624 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800760a:	4b9d      	ldr	r3, [pc, #628]	@ (8007880 <UART_SetConfig+0x92c>)
 800760c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800760e:	e009      	b.n	8007624 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007610:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007616:	e005      	b.n	8007624 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007622:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 81de 	beq.w	80079e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007630:	4a94      	ldr	r2, [pc, #592]	@ (8007884 <UART_SetConfig+0x930>)
 8007632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007636:	461a      	mov	r2, r3
 8007638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763a:	fbb3 f3f2 	udiv	r3, r3, r2
 800763e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	4413      	add	r3, r2
 800764a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800764c:	429a      	cmp	r2, r3
 800764e:	d305      	bcc.n	800765c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007658:	429a      	cmp	r2, r3
 800765a:	d903      	bls.n	8007664 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007662:	e1c1      	b.n	80079e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007666:	2200      	movs	r2, #0
 8007668:	60bb      	str	r3, [r7, #8]
 800766a:	60fa      	str	r2, [r7, #12]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007670:	4a84      	ldr	r2, [pc, #528]	@ (8007884 <UART_SetConfig+0x930>)
 8007672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007676:	b29b      	uxth	r3, r3
 8007678:	2200      	movs	r2, #0
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	607a      	str	r2, [r7, #4]
 800767e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007686:	f7f9 f83f 	bl	8000708 <__aeabi_uldivmod>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4610      	mov	r0, r2
 8007690:	4619      	mov	r1, r3
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	020b      	lsls	r3, r1, #8
 800769c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076a0:	0202      	lsls	r2, r0, #8
 80076a2:	6979      	ldr	r1, [r7, #20]
 80076a4:	6849      	ldr	r1, [r1, #4]
 80076a6:	0849      	lsrs	r1, r1, #1
 80076a8:	2000      	movs	r0, #0
 80076aa:	460c      	mov	r4, r1
 80076ac:	4605      	mov	r5, r0
 80076ae:	eb12 0804 	adds.w	r8, r2, r4
 80076b2:	eb43 0905 	adc.w	r9, r3, r5
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	469a      	mov	sl, r3
 80076be:	4693      	mov	fp, r2
 80076c0:	4652      	mov	r2, sl
 80076c2:	465b      	mov	r3, fp
 80076c4:	4640      	mov	r0, r8
 80076c6:	4649      	mov	r1, r9
 80076c8:	f7f9 f81e 	bl	8000708 <__aeabi_uldivmod>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4613      	mov	r3, r2
 80076d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076da:	d308      	bcc.n	80076ee <UART_SetConfig+0x79a>
 80076dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e2:	d204      	bcs.n	80076ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	e17c      	b.n	80079e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80076f4:	e178      	b.n	80079e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076fe:	f040 80c5 	bne.w	800788c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007702:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007706:	2b20      	cmp	r3, #32
 8007708:	dc48      	bgt.n	800779c <UART_SetConfig+0x848>
 800770a:	2b00      	cmp	r3, #0
 800770c:	db7b      	blt.n	8007806 <UART_SetConfig+0x8b2>
 800770e:	2b20      	cmp	r3, #32
 8007710:	d879      	bhi.n	8007806 <UART_SetConfig+0x8b2>
 8007712:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <UART_SetConfig+0x7c4>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	080077a3 	.word	0x080077a3
 800771c:	080077ab 	.word	0x080077ab
 8007720:	08007807 	.word	0x08007807
 8007724:	08007807 	.word	0x08007807
 8007728:	080077b3 	.word	0x080077b3
 800772c:	08007807 	.word	0x08007807
 8007730:	08007807 	.word	0x08007807
 8007734:	08007807 	.word	0x08007807
 8007738:	080077c3 	.word	0x080077c3
 800773c:	08007807 	.word	0x08007807
 8007740:	08007807 	.word	0x08007807
 8007744:	08007807 	.word	0x08007807
 8007748:	08007807 	.word	0x08007807
 800774c:	08007807 	.word	0x08007807
 8007750:	08007807 	.word	0x08007807
 8007754:	08007807 	.word	0x08007807
 8007758:	080077d3 	.word	0x080077d3
 800775c:	08007807 	.word	0x08007807
 8007760:	08007807 	.word	0x08007807
 8007764:	08007807 	.word	0x08007807
 8007768:	08007807 	.word	0x08007807
 800776c:	08007807 	.word	0x08007807
 8007770:	08007807 	.word	0x08007807
 8007774:	08007807 	.word	0x08007807
 8007778:	08007807 	.word	0x08007807
 800777c:	08007807 	.word	0x08007807
 8007780:	08007807 	.word	0x08007807
 8007784:	08007807 	.word	0x08007807
 8007788:	08007807 	.word	0x08007807
 800778c:	08007807 	.word	0x08007807
 8007790:	08007807 	.word	0x08007807
 8007794:	08007807 	.word	0x08007807
 8007798:	080077f9 	.word	0x080077f9
 800779c:	2b40      	cmp	r3, #64	@ 0x40
 800779e:	d02e      	beq.n	80077fe <UART_SetConfig+0x8aa>
 80077a0:	e031      	b.n	8007806 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a2:	f7fc f953 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 80077a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077a8:	e033      	b.n	8007812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077aa:	f7fc f965 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 80077ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077b0:	e02f      	b.n	8007812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fd fb94 	bl	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c0:	e027      	b.n	8007812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c2:	f107 0318 	add.w	r3, r7, #24
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fd fce0 	bl	800518c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d0:	e01f      	b.n	8007812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007888 <UART_SetConfig+0x934>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077de:	4b2a      	ldr	r3, [pc, #168]	@ (8007888 <UART_SetConfig+0x934>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	08db      	lsrs	r3, r3, #3
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	4a24      	ldr	r2, [pc, #144]	@ (800787c <UART_SetConfig+0x928>)
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077f0:	e00f      	b.n	8007812 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80077f2:	4b22      	ldr	r3, [pc, #136]	@ (800787c <UART_SetConfig+0x928>)
 80077f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f6:	e00c      	b.n	8007812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077f8:	4b21      	ldr	r3, [pc, #132]	@ (8007880 <UART_SetConfig+0x92c>)
 80077fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fc:	e009      	b.n	8007812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007804:	e005      	b.n	8007812 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80e7 	beq.w	80079e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781e:	4a19      	ldr	r2, [pc, #100]	@ (8007884 <UART_SetConfig+0x930>)
 8007820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007824:	461a      	mov	r2, r3
 8007826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007828:	fbb3 f3f2 	udiv	r3, r3, r2
 800782c:	005a      	lsls	r2, r3, #1
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	441a      	add	r2, r3
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	fbb2 f3f3 	udiv	r3, r2, r3
 800783e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007842:	2b0f      	cmp	r3, #15
 8007844:	d916      	bls.n	8007874 <UART_SetConfig+0x920>
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800784c:	d212      	bcs.n	8007874 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800784e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007850:	b29b      	uxth	r3, r3
 8007852:	f023 030f 	bic.w	r3, r3, #15
 8007856:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	b29b      	uxth	r3, r3
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	b29a      	uxth	r2, r3
 8007864:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007866:	4313      	orrs	r3, r2
 8007868:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007870:	60da      	str	r2, [r3, #12]
 8007872:	e0b9      	b.n	80079e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800787a:	e0b5      	b.n	80079e8 <UART_SetConfig+0xa94>
 800787c:	03d09000 	.word	0x03d09000
 8007880:	003d0900 	.word	0x003d0900
 8007884:	0800ce44 	.word	0x0800ce44
 8007888:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800788c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007890:	2b20      	cmp	r3, #32
 8007892:	dc49      	bgt.n	8007928 <UART_SetConfig+0x9d4>
 8007894:	2b00      	cmp	r3, #0
 8007896:	db7c      	blt.n	8007992 <UART_SetConfig+0xa3e>
 8007898:	2b20      	cmp	r3, #32
 800789a:	d87a      	bhi.n	8007992 <UART_SetConfig+0xa3e>
 800789c:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <UART_SetConfig+0x950>)
 800789e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a2:	bf00      	nop
 80078a4:	0800792f 	.word	0x0800792f
 80078a8:	08007937 	.word	0x08007937
 80078ac:	08007993 	.word	0x08007993
 80078b0:	08007993 	.word	0x08007993
 80078b4:	0800793f 	.word	0x0800793f
 80078b8:	08007993 	.word	0x08007993
 80078bc:	08007993 	.word	0x08007993
 80078c0:	08007993 	.word	0x08007993
 80078c4:	0800794f 	.word	0x0800794f
 80078c8:	08007993 	.word	0x08007993
 80078cc:	08007993 	.word	0x08007993
 80078d0:	08007993 	.word	0x08007993
 80078d4:	08007993 	.word	0x08007993
 80078d8:	08007993 	.word	0x08007993
 80078dc:	08007993 	.word	0x08007993
 80078e0:	08007993 	.word	0x08007993
 80078e4:	0800795f 	.word	0x0800795f
 80078e8:	08007993 	.word	0x08007993
 80078ec:	08007993 	.word	0x08007993
 80078f0:	08007993 	.word	0x08007993
 80078f4:	08007993 	.word	0x08007993
 80078f8:	08007993 	.word	0x08007993
 80078fc:	08007993 	.word	0x08007993
 8007900:	08007993 	.word	0x08007993
 8007904:	08007993 	.word	0x08007993
 8007908:	08007993 	.word	0x08007993
 800790c:	08007993 	.word	0x08007993
 8007910:	08007993 	.word	0x08007993
 8007914:	08007993 	.word	0x08007993
 8007918:	08007993 	.word	0x08007993
 800791c:	08007993 	.word	0x08007993
 8007920:	08007993 	.word	0x08007993
 8007924:	08007985 	.word	0x08007985
 8007928:	2b40      	cmp	r3, #64	@ 0x40
 800792a:	d02e      	beq.n	800798a <UART_SetConfig+0xa36>
 800792c:	e031      	b.n	8007992 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800792e:	f7fc f88d 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8007932:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007934:	e033      	b.n	800799e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007936:	f7fc f89f 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 800793a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800793c:	e02f      	b.n	800799e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800793e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007942:	4618      	mov	r0, r3
 8007944:	f7fd face 	bl	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794c:	e027      	b.n	800799e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800794e:	f107 0318 	add.w	r3, r7, #24
 8007952:	4618      	mov	r0, r3
 8007954:	f7fd fc1a 	bl	800518c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800795c:	e01f      	b.n	800799e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800795e:	4b2d      	ldr	r3, [pc, #180]	@ (8007a14 <UART_SetConfig+0xac0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d009      	beq.n	800797e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800796a:	4b2a      	ldr	r3, [pc, #168]	@ (8007a14 <UART_SetConfig+0xac0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	08db      	lsrs	r3, r3, #3
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	4a28      	ldr	r2, [pc, #160]	@ (8007a18 <UART_SetConfig+0xac4>)
 8007976:	fa22 f303 	lsr.w	r3, r2, r3
 800797a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800797c:	e00f      	b.n	800799e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800797e:	4b26      	ldr	r3, [pc, #152]	@ (8007a18 <UART_SetConfig+0xac4>)
 8007980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007982:	e00c      	b.n	800799e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007984:	4b25      	ldr	r3, [pc, #148]	@ (8007a1c <UART_SetConfig+0xac8>)
 8007986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007988:	e009      	b.n	800799e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800798a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800798e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007990:	e005      	b.n	800799e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800799c:	bf00      	nop
    }

    if (pclk != 0U)
 800799e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d021      	beq.n	80079e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a20 <UART_SetConfig+0xacc>)
 80079aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	441a      	add	r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ca:	2b0f      	cmp	r3, #15
 80079cc:	d909      	bls.n	80079e2 <UART_SetConfig+0xa8e>
 80079ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079d4:	d205      	bcs.n	80079e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	b29a      	uxth	r2, r3
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60da      	str	r2, [r3, #12]
 80079e0:	e002      	b.n	80079e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2200      	movs	r2, #0
 80079fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2200      	movs	r2, #0
 8007a02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a04:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3748      	adds	r7, #72	@ 0x48
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a12:	bf00      	nop
 8007a14:	58024400 	.word	0x58024400
 8007a18:	03d09000 	.word	0x03d09000
 8007a1c:	003d0900 	.word	0x003d0900
 8007a20:	0800ce44 	.word	0x0800ce44

08007a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01a      	beq.n	8007b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b22:	d10a      	bne.n	8007b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	605a      	str	r2, [r3, #4]
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b098      	sub	sp, #96	@ 0x60
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b78:	f7fa fbe6 	bl	8002348 <HAL_GetTick>
 8007b7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d12f      	bne.n	8007bec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b94:	2200      	movs	r2, #0
 8007b96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f88e 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d022      	beq.n	8007bec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e063      	b.n	8007cb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0304 	and.w	r3, r3, #4
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d149      	bne.n	8007c8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bfa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c02:	2200      	movs	r2, #0
 8007c04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f857 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d03c      	beq.n	8007c8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	623b      	str	r3, [r7, #32]
   return(result);
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c32:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e6      	bne.n	8007c14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f023 0301 	bic.w	r3, r3, #1
 8007c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3308      	adds	r3, #8
 8007c64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c66:	61fa      	str	r2, [r7, #28]
 8007c68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	69b9      	ldr	r1, [r7, #24]
 8007c6c:	69fa      	ldr	r2, [r7, #28]
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	617b      	str	r3, [r7, #20]
   return(result);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e5      	bne.n	8007c46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e012      	b.n	8007cb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3758      	adds	r7, #88	@ 0x58
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ccc:	e04f      	b.n	8007d6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d04b      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd6:	f7fa fb37 	bl	8002348 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <UART_WaitOnFlagUntilTimeout+0x30>
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e04e      	b.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0304 	and.w	r3, r3, #4
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d037      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b80      	cmp	r3, #128	@ 0x80
 8007d02:	d034      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b40      	cmp	r3, #64	@ 0x40
 8007d08:	d031      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d110      	bne.n	8007d3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f839 	bl	8007d98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2208      	movs	r2, #8
 8007d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e029      	b.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d48:	d111      	bne.n	8007d6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f81f 	bl	8007d98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e00f      	b.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69da      	ldr	r2, [r3, #28]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4013      	ands	r3, r2
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d0a0      	beq.n	8007cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b095      	sub	sp, #84	@ 0x54
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e6      	bne.n	8007da0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	4b1e      	ldr	r3, [pc, #120]	@ (8007e60 <UART_EndRxTransfer+0xc8>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3308      	adds	r3, #8
 8007df0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e5      	bne.n	8007dd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d118      	bne.n	8007e40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0310 	bic.w	r3, r3, #16
 8007e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6979      	ldr	r1, [r7, #20]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e6      	bne.n	8007e0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e54:	bf00      	nop
 8007e56:	3754      	adds	r7, #84	@ 0x54
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	effffffe 	.word	0xeffffffe

08007e64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_UARTEx_DisableFifoMode+0x16>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e027      	b.n	8007eca <HAL_UARTEx_DisableFifoMode+0x66>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2224      	movs	r2, #36	@ 0x24
 8007e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0201 	bic.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ea8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e02d      	b.n	8007f4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2224      	movs	r2, #36	@ 0x24
 8007efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0201 	bic.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f850 	bl	8007fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e02d      	b.n	8007fc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2224      	movs	r2, #36	@ 0x24
 8007f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0201 	bic.w	r2, r2, #1
 8007f90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f812 	bl	8007fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d108      	bne.n	8007ff2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ff0:	e031      	b.n	8008056 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ff2:	2310      	movs	r3, #16
 8007ff4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ff6:	2310      	movs	r3, #16
 8007ff8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	0e5b      	lsrs	r3, r3, #25
 8008002:	b2db      	uxtb	r3, r3
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	0f5b      	lsrs	r3, r3, #29
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	7b3a      	ldrb	r2, [r7, #12]
 800801e:	4911      	ldr	r1, [pc, #68]	@ (8008064 <UARTEx_SetNbDataToProcess+0x94>)
 8008020:	5c8a      	ldrb	r2, [r1, r2]
 8008022:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008026:	7b3a      	ldrb	r2, [r7, #12]
 8008028:	490f      	ldr	r1, [pc, #60]	@ (8008068 <UARTEx_SetNbDataToProcess+0x98>)
 800802a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800802c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	7b7a      	ldrb	r2, [r7, #13]
 800803c:	4909      	ldr	r1, [pc, #36]	@ (8008064 <UARTEx_SetNbDataToProcess+0x94>)
 800803e:	5c8a      	ldrb	r2, [r1, r2]
 8008040:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008044:	7b7a      	ldrb	r2, [r7, #13]
 8008046:	4908      	ldr	r1, [pc, #32]	@ (8008068 <UARTEx_SetNbDataToProcess+0x98>)
 8008048:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800804a:	fb93 f3f2 	sdiv	r3, r3, r2
 800804e:	b29a      	uxth	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	0800ce5c 	.word	0x0800ce5c
 8008068:	0800ce64 	.word	0x0800ce64

0800806c <__cvt>:
 800806c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806e:	ed2d 8b02 	vpush	{d8}
 8008072:	eeb0 8b40 	vmov.f64	d8, d0
 8008076:	b085      	sub	sp, #20
 8008078:	4617      	mov	r7, r2
 800807a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800807c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800807e:	ee18 2a90 	vmov	r2, s17
 8008082:	f025 0520 	bic.w	r5, r5, #32
 8008086:	2a00      	cmp	r2, #0
 8008088:	bfb6      	itet	lt
 800808a:	222d      	movlt	r2, #45	@ 0x2d
 800808c:	2200      	movge	r2, #0
 800808e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008092:	2d46      	cmp	r5, #70	@ 0x46
 8008094:	460c      	mov	r4, r1
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	d004      	beq.n	80080a4 <__cvt+0x38>
 800809a:	2d45      	cmp	r5, #69	@ 0x45
 800809c:	d100      	bne.n	80080a0 <__cvt+0x34>
 800809e:	3401      	adds	r4, #1
 80080a0:	2102      	movs	r1, #2
 80080a2:	e000      	b.n	80080a6 <__cvt+0x3a>
 80080a4:	2103      	movs	r1, #3
 80080a6:	ab03      	add	r3, sp, #12
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	ab02      	add	r3, sp, #8
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4622      	mov	r2, r4
 80080b0:	4633      	mov	r3, r6
 80080b2:	eeb0 0b48 	vmov.f64	d0, d8
 80080b6:	f001 f883 	bl	80091c0 <_dtoa_r>
 80080ba:	2d47      	cmp	r5, #71	@ 0x47
 80080bc:	d114      	bne.n	80080e8 <__cvt+0x7c>
 80080be:	07fb      	lsls	r3, r7, #31
 80080c0:	d50a      	bpl.n	80080d8 <__cvt+0x6c>
 80080c2:	1902      	adds	r2, r0, r4
 80080c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080cc:	bf08      	it	eq
 80080ce:	9203      	streq	r2, [sp, #12]
 80080d0:	2130      	movs	r1, #48	@ 0x30
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d319      	bcc.n	800810c <__cvt+0xa0>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080dc:	1a1b      	subs	r3, r3, r0
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	b005      	add	sp, #20
 80080e2:	ecbd 8b02 	vpop	{d8}
 80080e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e8:	2d46      	cmp	r5, #70	@ 0x46
 80080ea:	eb00 0204 	add.w	r2, r0, r4
 80080ee:	d1e9      	bne.n	80080c4 <__cvt+0x58>
 80080f0:	7803      	ldrb	r3, [r0, #0]
 80080f2:	2b30      	cmp	r3, #48	@ 0x30
 80080f4:	d107      	bne.n	8008106 <__cvt+0x9a>
 80080f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fe:	bf1c      	itt	ne
 8008100:	f1c4 0401 	rsbne	r4, r4, #1
 8008104:	6034      	strne	r4, [r6, #0]
 8008106:	6833      	ldr	r3, [r6, #0]
 8008108:	441a      	add	r2, r3
 800810a:	e7db      	b.n	80080c4 <__cvt+0x58>
 800810c:	1c5c      	adds	r4, r3, #1
 800810e:	9403      	str	r4, [sp, #12]
 8008110:	7019      	strb	r1, [r3, #0]
 8008112:	e7de      	b.n	80080d2 <__cvt+0x66>

08008114 <__exponent>:
 8008114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008116:	2900      	cmp	r1, #0
 8008118:	bfba      	itte	lt
 800811a:	4249      	neglt	r1, r1
 800811c:	232d      	movlt	r3, #45	@ 0x2d
 800811e:	232b      	movge	r3, #43	@ 0x2b
 8008120:	2909      	cmp	r1, #9
 8008122:	7002      	strb	r2, [r0, #0]
 8008124:	7043      	strb	r3, [r0, #1]
 8008126:	dd29      	ble.n	800817c <__exponent+0x68>
 8008128:	f10d 0307 	add.w	r3, sp, #7
 800812c:	461d      	mov	r5, r3
 800812e:	270a      	movs	r7, #10
 8008130:	461a      	mov	r2, r3
 8008132:	fbb1 f6f7 	udiv	r6, r1, r7
 8008136:	fb07 1416 	mls	r4, r7, r6, r1
 800813a:	3430      	adds	r4, #48	@ 0x30
 800813c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008140:	460c      	mov	r4, r1
 8008142:	2c63      	cmp	r4, #99	@ 0x63
 8008144:	f103 33ff 	add.w	r3, r3, #4294967295
 8008148:	4631      	mov	r1, r6
 800814a:	dcf1      	bgt.n	8008130 <__exponent+0x1c>
 800814c:	3130      	adds	r1, #48	@ 0x30
 800814e:	1e94      	subs	r4, r2, #2
 8008150:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008154:	1c41      	adds	r1, r0, #1
 8008156:	4623      	mov	r3, r4
 8008158:	42ab      	cmp	r3, r5
 800815a:	d30a      	bcc.n	8008172 <__exponent+0x5e>
 800815c:	f10d 0309 	add.w	r3, sp, #9
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	42ac      	cmp	r4, r5
 8008164:	bf88      	it	hi
 8008166:	2300      	movhi	r3, #0
 8008168:	3302      	adds	r3, #2
 800816a:	4403      	add	r3, r0
 800816c:	1a18      	subs	r0, r3, r0
 800816e:	b003      	add	sp, #12
 8008170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008172:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008176:	f801 6f01 	strb.w	r6, [r1, #1]!
 800817a:	e7ed      	b.n	8008158 <__exponent+0x44>
 800817c:	2330      	movs	r3, #48	@ 0x30
 800817e:	3130      	adds	r1, #48	@ 0x30
 8008180:	7083      	strb	r3, [r0, #2]
 8008182:	70c1      	strb	r1, [r0, #3]
 8008184:	1d03      	adds	r3, r0, #4
 8008186:	e7f1      	b.n	800816c <__exponent+0x58>

08008188 <_printf_float>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	b08d      	sub	sp, #52	@ 0x34
 800818e:	460c      	mov	r4, r1
 8008190:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008194:	4616      	mov	r6, r2
 8008196:	461f      	mov	r7, r3
 8008198:	4605      	mov	r5, r0
 800819a:	f000 ff0b 	bl	8008fb4 <_localeconv_r>
 800819e:	f8d0 b000 	ldr.w	fp, [r0]
 80081a2:	4658      	mov	r0, fp
 80081a4:	f7f8 f8ec 	bl	8000380 <strlen>
 80081a8:	2300      	movs	r3, #0
 80081aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ac:	f8d8 3000 	ldr.w	r3, [r8]
 80081b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081b4:	6822      	ldr	r2, [r4, #0]
 80081b6:	9005      	str	r0, [sp, #20]
 80081b8:	3307      	adds	r3, #7
 80081ba:	f023 0307 	bic.w	r3, r3, #7
 80081be:	f103 0108 	add.w	r1, r3, #8
 80081c2:	f8c8 1000 	str.w	r1, [r8]
 80081c6:	ed93 0b00 	vldr	d0, [r3]
 80081ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008428 <_printf_float+0x2a0>
 80081ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80081d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80081d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80081de:	dd24      	ble.n	800822a <_printf_float+0xa2>
 80081e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80081e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e8:	d502      	bpl.n	80081f0 <_printf_float+0x68>
 80081ea:	232d      	movs	r3, #45	@ 0x2d
 80081ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081f0:	498f      	ldr	r1, [pc, #572]	@ (8008430 <_printf_float+0x2a8>)
 80081f2:	4b90      	ldr	r3, [pc, #576]	@ (8008434 <_printf_float+0x2ac>)
 80081f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80081f8:	bf94      	ite	ls
 80081fa:	4688      	movls	r8, r1
 80081fc:	4698      	movhi	r8, r3
 80081fe:	f022 0204 	bic.w	r2, r2, #4
 8008202:	2303      	movs	r3, #3
 8008204:	6123      	str	r3, [r4, #16]
 8008206:	6022      	str	r2, [r4, #0]
 8008208:	f04f 0a00 	mov.w	sl, #0
 800820c:	9700      	str	r7, [sp, #0]
 800820e:	4633      	mov	r3, r6
 8008210:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 f9d1 	bl	80085bc <_printf_common>
 800821a:	3001      	adds	r0, #1
 800821c:	f040 8089 	bne.w	8008332 <_printf_float+0x1aa>
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	b00d      	add	sp, #52	@ 0x34
 8008226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822a:	eeb4 0b40 	vcmp.f64	d0, d0
 800822e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008232:	d709      	bvc.n	8008248 <_printf_float+0xc0>
 8008234:	ee10 3a90 	vmov	r3, s1
 8008238:	2b00      	cmp	r3, #0
 800823a:	bfbc      	itt	lt
 800823c:	232d      	movlt	r3, #45	@ 0x2d
 800823e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008242:	497d      	ldr	r1, [pc, #500]	@ (8008438 <_printf_float+0x2b0>)
 8008244:	4b7d      	ldr	r3, [pc, #500]	@ (800843c <_printf_float+0x2b4>)
 8008246:	e7d5      	b.n	80081f4 <_printf_float+0x6c>
 8008248:	6863      	ldr	r3, [r4, #4]
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008250:	d139      	bne.n	80082c6 <_printf_float+0x13e>
 8008252:	2306      	movs	r3, #6
 8008254:	6063      	str	r3, [r4, #4]
 8008256:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800825a:	2300      	movs	r3, #0
 800825c:	6022      	str	r2, [r4, #0]
 800825e:	9303      	str	r3, [sp, #12]
 8008260:	ab0a      	add	r3, sp, #40	@ 0x28
 8008262:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008266:	ab09      	add	r3, sp, #36	@ 0x24
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	6861      	ldr	r1, [r4, #4]
 800826c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008270:	4628      	mov	r0, r5
 8008272:	f7ff fefb 	bl	800806c <__cvt>
 8008276:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800827a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800827c:	4680      	mov	r8, r0
 800827e:	d129      	bne.n	80082d4 <_printf_float+0x14c>
 8008280:	1cc8      	adds	r0, r1, #3
 8008282:	db02      	blt.n	800828a <_printf_float+0x102>
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	4299      	cmp	r1, r3
 8008288:	dd41      	ble.n	800830e <_printf_float+0x186>
 800828a:	f1a9 0902 	sub.w	r9, r9, #2
 800828e:	fa5f f989 	uxtb.w	r9, r9
 8008292:	3901      	subs	r1, #1
 8008294:	464a      	mov	r2, r9
 8008296:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800829a:	9109      	str	r1, [sp, #36]	@ 0x24
 800829c:	f7ff ff3a 	bl	8008114 <__exponent>
 80082a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082a2:	1813      	adds	r3, r2, r0
 80082a4:	2a01      	cmp	r2, #1
 80082a6:	4682      	mov	sl, r0
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	dc02      	bgt.n	80082b2 <_printf_float+0x12a>
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	07d2      	lsls	r2, r2, #31
 80082b0:	d501      	bpl.n	80082b6 <_printf_float+0x12e>
 80082b2:	3301      	adds	r3, #1
 80082b4:	6123      	str	r3, [r4, #16]
 80082b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0a6      	beq.n	800820c <_printf_float+0x84>
 80082be:	232d      	movs	r3, #45	@ 0x2d
 80082c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082c4:	e7a2      	b.n	800820c <_printf_float+0x84>
 80082c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082ca:	d1c4      	bne.n	8008256 <_printf_float+0xce>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1c2      	bne.n	8008256 <_printf_float+0xce>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7bf      	b.n	8008254 <_printf_float+0xcc>
 80082d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80082d8:	d9db      	bls.n	8008292 <_printf_float+0x10a>
 80082da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80082de:	d118      	bne.n	8008312 <_printf_float+0x18a>
 80082e0:	2900      	cmp	r1, #0
 80082e2:	6863      	ldr	r3, [r4, #4]
 80082e4:	dd0b      	ble.n	80082fe <_printf_float+0x176>
 80082e6:	6121      	str	r1, [r4, #16]
 80082e8:	b913      	cbnz	r3, 80082f0 <_printf_float+0x168>
 80082ea:	6822      	ldr	r2, [r4, #0]
 80082ec:	07d0      	lsls	r0, r2, #31
 80082ee:	d502      	bpl.n	80082f6 <_printf_float+0x16e>
 80082f0:	3301      	adds	r3, #1
 80082f2:	440b      	add	r3, r1
 80082f4:	6123      	str	r3, [r4, #16]
 80082f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80082f8:	f04f 0a00 	mov.w	sl, #0
 80082fc:	e7db      	b.n	80082b6 <_printf_float+0x12e>
 80082fe:	b913      	cbnz	r3, 8008306 <_printf_float+0x17e>
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	07d2      	lsls	r2, r2, #31
 8008304:	d501      	bpl.n	800830a <_printf_float+0x182>
 8008306:	3302      	adds	r3, #2
 8008308:	e7f4      	b.n	80082f4 <_printf_float+0x16c>
 800830a:	2301      	movs	r3, #1
 800830c:	e7f2      	b.n	80082f4 <_printf_float+0x16c>
 800830e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008314:	4299      	cmp	r1, r3
 8008316:	db05      	blt.n	8008324 <_printf_float+0x19c>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	6121      	str	r1, [r4, #16]
 800831c:	07d8      	lsls	r0, r3, #31
 800831e:	d5ea      	bpl.n	80082f6 <_printf_float+0x16e>
 8008320:	1c4b      	adds	r3, r1, #1
 8008322:	e7e7      	b.n	80082f4 <_printf_float+0x16c>
 8008324:	2900      	cmp	r1, #0
 8008326:	bfd4      	ite	le
 8008328:	f1c1 0202 	rsble	r2, r1, #2
 800832c:	2201      	movgt	r2, #1
 800832e:	4413      	add	r3, r2
 8008330:	e7e0      	b.n	80082f4 <_printf_float+0x16c>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	055a      	lsls	r2, r3, #21
 8008336:	d407      	bmi.n	8008348 <_printf_float+0x1c0>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	4642      	mov	r2, r8
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	d12a      	bne.n	800839c <_printf_float+0x214>
 8008346:	e76b      	b.n	8008220 <_printf_float+0x98>
 8008348:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800834c:	f240 80e0 	bls.w	8008510 <_printf_float+0x388>
 8008350:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008354:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835c:	d133      	bne.n	80083c6 <_printf_float+0x23e>
 800835e:	4a38      	ldr	r2, [pc, #224]	@ (8008440 <_printf_float+0x2b8>)
 8008360:	2301      	movs	r3, #1
 8008362:	4631      	mov	r1, r6
 8008364:	4628      	mov	r0, r5
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f af59 	beq.w	8008220 <_printf_float+0x98>
 800836e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008372:	4543      	cmp	r3, r8
 8008374:	db02      	blt.n	800837c <_printf_float+0x1f4>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	07d8      	lsls	r0, r3, #31
 800837a:	d50f      	bpl.n	800839c <_printf_float+0x214>
 800837c:	9b05      	ldr	r3, [sp, #20]
 800837e:	465a      	mov	r2, fp
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f af4a 	beq.w	8008220 <_printf_float+0x98>
 800838c:	f04f 0900 	mov.w	r9, #0
 8008390:	f108 38ff 	add.w	r8, r8, #4294967295
 8008394:	f104 0a1a 	add.w	sl, r4, #26
 8008398:	45c8      	cmp	r8, r9
 800839a:	dc09      	bgt.n	80083b0 <_printf_float+0x228>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	079b      	lsls	r3, r3, #30
 80083a0:	f100 8107 	bmi.w	80085b2 <_printf_float+0x42a>
 80083a4:	68e0      	ldr	r0, [r4, #12]
 80083a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a8:	4298      	cmp	r0, r3
 80083aa:	bfb8      	it	lt
 80083ac:	4618      	movlt	r0, r3
 80083ae:	e739      	b.n	8008224 <_printf_float+0x9c>
 80083b0:	2301      	movs	r3, #1
 80083b2:	4652      	mov	r2, sl
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	f43f af30 	beq.w	8008220 <_printf_float+0x98>
 80083c0:	f109 0901 	add.w	r9, r9, #1
 80083c4:	e7e8      	b.n	8008398 <_printf_float+0x210>
 80083c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dc3b      	bgt.n	8008444 <_printf_float+0x2bc>
 80083cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008440 <_printf_float+0x2b8>)
 80083ce:	2301      	movs	r3, #1
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	f43f af22 	beq.w	8008220 <_printf_float+0x98>
 80083dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80083e0:	ea59 0303 	orrs.w	r3, r9, r3
 80083e4:	d102      	bne.n	80083ec <_printf_float+0x264>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	07d9      	lsls	r1, r3, #31
 80083ea:	d5d7      	bpl.n	800839c <_printf_float+0x214>
 80083ec:	9b05      	ldr	r3, [sp, #20]
 80083ee:	465a      	mov	r2, fp
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f af12 	beq.w	8008220 <_printf_float+0x98>
 80083fc:	f04f 0a00 	mov.w	sl, #0
 8008400:	f104 0b1a 	add.w	fp, r4, #26
 8008404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008406:	425b      	negs	r3, r3
 8008408:	4553      	cmp	r3, sl
 800840a:	dc01      	bgt.n	8008410 <_printf_float+0x288>
 800840c:	464b      	mov	r3, r9
 800840e:	e794      	b.n	800833a <_printf_float+0x1b2>
 8008410:	2301      	movs	r3, #1
 8008412:	465a      	mov	r2, fp
 8008414:	4631      	mov	r1, r6
 8008416:	4628      	mov	r0, r5
 8008418:	47b8      	blx	r7
 800841a:	3001      	adds	r0, #1
 800841c:	f43f af00 	beq.w	8008220 <_printf_float+0x98>
 8008420:	f10a 0a01 	add.w	sl, sl, #1
 8008424:	e7ee      	b.n	8008404 <_printf_float+0x27c>
 8008426:	bf00      	nop
 8008428:	ffffffff 	.word	0xffffffff
 800842c:	7fefffff 	.word	0x7fefffff
 8008430:	0800ce6c 	.word	0x0800ce6c
 8008434:	0800ce70 	.word	0x0800ce70
 8008438:	0800ce74 	.word	0x0800ce74
 800843c:	0800ce78 	.word	0x0800ce78
 8008440:	0800ce7c 	.word	0x0800ce7c
 8008444:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008446:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800844a:	4553      	cmp	r3, sl
 800844c:	bfa8      	it	ge
 800844e:	4653      	movge	r3, sl
 8008450:	2b00      	cmp	r3, #0
 8008452:	4699      	mov	r9, r3
 8008454:	dc37      	bgt.n	80084c6 <_printf_float+0x33e>
 8008456:	2300      	movs	r3, #0
 8008458:	9307      	str	r3, [sp, #28]
 800845a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800845e:	f104 021a 	add.w	r2, r4, #26
 8008462:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008464:	9907      	ldr	r1, [sp, #28]
 8008466:	9306      	str	r3, [sp, #24]
 8008468:	eba3 0309 	sub.w	r3, r3, r9
 800846c:	428b      	cmp	r3, r1
 800846e:	dc31      	bgt.n	80084d4 <_printf_float+0x34c>
 8008470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008472:	459a      	cmp	sl, r3
 8008474:	dc3b      	bgt.n	80084ee <_printf_float+0x366>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	07da      	lsls	r2, r3, #31
 800847a:	d438      	bmi.n	80084ee <_printf_float+0x366>
 800847c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847e:	ebaa 0903 	sub.w	r9, sl, r3
 8008482:	9b06      	ldr	r3, [sp, #24]
 8008484:	ebaa 0303 	sub.w	r3, sl, r3
 8008488:	4599      	cmp	r9, r3
 800848a:	bfa8      	it	ge
 800848c:	4699      	movge	r9, r3
 800848e:	f1b9 0f00 	cmp.w	r9, #0
 8008492:	dc34      	bgt.n	80084fe <_printf_float+0x376>
 8008494:	f04f 0800 	mov.w	r8, #0
 8008498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800849c:	f104 0b1a 	add.w	fp, r4, #26
 80084a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a2:	ebaa 0303 	sub.w	r3, sl, r3
 80084a6:	eba3 0309 	sub.w	r3, r3, r9
 80084aa:	4543      	cmp	r3, r8
 80084ac:	f77f af76 	ble.w	800839c <_printf_float+0x214>
 80084b0:	2301      	movs	r3, #1
 80084b2:	465a      	mov	r2, fp
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f aeb0 	beq.w	8008220 <_printf_float+0x98>
 80084c0:	f108 0801 	add.w	r8, r8, #1
 80084c4:	e7ec      	b.n	80084a0 <_printf_float+0x318>
 80084c6:	4642      	mov	r2, r8
 80084c8:	4631      	mov	r1, r6
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	d1c1      	bne.n	8008456 <_printf_float+0x2ce>
 80084d2:	e6a5      	b.n	8008220 <_printf_float+0x98>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	9206      	str	r2, [sp, #24]
 80084dc:	47b8      	blx	r7
 80084de:	3001      	adds	r0, #1
 80084e0:	f43f ae9e 	beq.w	8008220 <_printf_float+0x98>
 80084e4:	9b07      	ldr	r3, [sp, #28]
 80084e6:	9a06      	ldr	r2, [sp, #24]
 80084e8:	3301      	adds	r3, #1
 80084ea:	9307      	str	r3, [sp, #28]
 80084ec:	e7b9      	b.n	8008462 <_printf_float+0x2da>
 80084ee:	9b05      	ldr	r3, [sp, #20]
 80084f0:	465a      	mov	r2, fp
 80084f2:	4631      	mov	r1, r6
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b8      	blx	r7
 80084f8:	3001      	adds	r0, #1
 80084fa:	d1bf      	bne.n	800847c <_printf_float+0x2f4>
 80084fc:	e690      	b.n	8008220 <_printf_float+0x98>
 80084fe:	9a06      	ldr	r2, [sp, #24]
 8008500:	464b      	mov	r3, r9
 8008502:	4442      	add	r2, r8
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	d1c2      	bne.n	8008494 <_printf_float+0x30c>
 800850e:	e687      	b.n	8008220 <_printf_float+0x98>
 8008510:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008514:	f1b9 0f01 	cmp.w	r9, #1
 8008518:	dc01      	bgt.n	800851e <_printf_float+0x396>
 800851a:	07db      	lsls	r3, r3, #31
 800851c:	d536      	bpl.n	800858c <_printf_float+0x404>
 800851e:	2301      	movs	r3, #1
 8008520:	4642      	mov	r2, r8
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	47b8      	blx	r7
 8008528:	3001      	adds	r0, #1
 800852a:	f43f ae79 	beq.w	8008220 <_printf_float+0x98>
 800852e:	9b05      	ldr	r3, [sp, #20]
 8008530:	465a      	mov	r2, fp
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	f43f ae71 	beq.w	8008220 <_printf_float+0x98>
 800853e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008542:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854a:	f109 39ff 	add.w	r9, r9, #4294967295
 800854e:	d018      	beq.n	8008582 <_printf_float+0x3fa>
 8008550:	464b      	mov	r3, r9
 8008552:	f108 0201 	add.w	r2, r8, #1
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	47b8      	blx	r7
 800855c:	3001      	adds	r0, #1
 800855e:	d10c      	bne.n	800857a <_printf_float+0x3f2>
 8008560:	e65e      	b.n	8008220 <_printf_float+0x98>
 8008562:	2301      	movs	r3, #1
 8008564:	465a      	mov	r2, fp
 8008566:	4631      	mov	r1, r6
 8008568:	4628      	mov	r0, r5
 800856a:	47b8      	blx	r7
 800856c:	3001      	adds	r0, #1
 800856e:	f43f ae57 	beq.w	8008220 <_printf_float+0x98>
 8008572:	f108 0801 	add.w	r8, r8, #1
 8008576:	45c8      	cmp	r8, r9
 8008578:	dbf3      	blt.n	8008562 <_printf_float+0x3da>
 800857a:	4653      	mov	r3, sl
 800857c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008580:	e6dc      	b.n	800833c <_printf_float+0x1b4>
 8008582:	f04f 0800 	mov.w	r8, #0
 8008586:	f104 0b1a 	add.w	fp, r4, #26
 800858a:	e7f4      	b.n	8008576 <_printf_float+0x3ee>
 800858c:	2301      	movs	r3, #1
 800858e:	4642      	mov	r2, r8
 8008590:	e7e1      	b.n	8008556 <_printf_float+0x3ce>
 8008592:	2301      	movs	r3, #1
 8008594:	464a      	mov	r2, r9
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	f43f ae3f 	beq.w	8008220 <_printf_float+0x98>
 80085a2:	f108 0801 	add.w	r8, r8, #1
 80085a6:	68e3      	ldr	r3, [r4, #12]
 80085a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085aa:	1a5b      	subs	r3, r3, r1
 80085ac:	4543      	cmp	r3, r8
 80085ae:	dcf0      	bgt.n	8008592 <_printf_float+0x40a>
 80085b0:	e6f8      	b.n	80083a4 <_printf_float+0x21c>
 80085b2:	f04f 0800 	mov.w	r8, #0
 80085b6:	f104 0919 	add.w	r9, r4, #25
 80085ba:	e7f4      	b.n	80085a6 <_printf_float+0x41e>

080085bc <_printf_common>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	4616      	mov	r6, r2
 80085c2:	4698      	mov	r8, r3
 80085c4:	688a      	ldr	r2, [r1, #8]
 80085c6:	690b      	ldr	r3, [r1, #16]
 80085c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	bfb8      	it	lt
 80085d0:	4613      	movlt	r3, r2
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085d8:	4607      	mov	r7, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b10a      	cbz	r2, 80085e2 <_printf_common+0x26>
 80085de:	3301      	adds	r3, #1
 80085e0:	6033      	str	r3, [r6, #0]
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	0699      	lsls	r1, r3, #26
 80085e6:	bf42      	ittt	mi
 80085e8:	6833      	ldrmi	r3, [r6, #0]
 80085ea:	3302      	addmi	r3, #2
 80085ec:	6033      	strmi	r3, [r6, #0]
 80085ee:	6825      	ldr	r5, [r4, #0]
 80085f0:	f015 0506 	ands.w	r5, r5, #6
 80085f4:	d106      	bne.n	8008604 <_printf_common+0x48>
 80085f6:	f104 0a19 	add.w	sl, r4, #25
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	6832      	ldr	r2, [r6, #0]
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	42ab      	cmp	r3, r5
 8008602:	dc26      	bgt.n	8008652 <_printf_common+0x96>
 8008604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008608:	6822      	ldr	r2, [r4, #0]
 800860a:	3b00      	subs	r3, #0
 800860c:	bf18      	it	ne
 800860e:	2301      	movne	r3, #1
 8008610:	0692      	lsls	r2, r2, #26
 8008612:	d42b      	bmi.n	800866c <_printf_common+0xb0>
 8008614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008618:	4641      	mov	r1, r8
 800861a:	4638      	mov	r0, r7
 800861c:	47c8      	blx	r9
 800861e:	3001      	adds	r0, #1
 8008620:	d01e      	beq.n	8008660 <_printf_common+0xa4>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	6922      	ldr	r2, [r4, #16]
 8008626:	f003 0306 	and.w	r3, r3, #6
 800862a:	2b04      	cmp	r3, #4
 800862c:	bf02      	ittt	eq
 800862e:	68e5      	ldreq	r5, [r4, #12]
 8008630:	6833      	ldreq	r3, [r6, #0]
 8008632:	1aed      	subeq	r5, r5, r3
 8008634:	68a3      	ldr	r3, [r4, #8]
 8008636:	bf0c      	ite	eq
 8008638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800863c:	2500      	movne	r5, #0
 800863e:	4293      	cmp	r3, r2
 8008640:	bfc4      	itt	gt
 8008642:	1a9b      	subgt	r3, r3, r2
 8008644:	18ed      	addgt	r5, r5, r3
 8008646:	2600      	movs	r6, #0
 8008648:	341a      	adds	r4, #26
 800864a:	42b5      	cmp	r5, r6
 800864c:	d11a      	bne.n	8008684 <_printf_common+0xc8>
 800864e:	2000      	movs	r0, #0
 8008650:	e008      	b.n	8008664 <_printf_common+0xa8>
 8008652:	2301      	movs	r3, #1
 8008654:	4652      	mov	r2, sl
 8008656:	4641      	mov	r1, r8
 8008658:	4638      	mov	r0, r7
 800865a:	47c8      	blx	r9
 800865c:	3001      	adds	r0, #1
 800865e:	d103      	bne.n	8008668 <_printf_common+0xac>
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	3501      	adds	r5, #1
 800866a:	e7c6      	b.n	80085fa <_printf_common+0x3e>
 800866c:	18e1      	adds	r1, r4, r3
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	2030      	movs	r0, #48	@ 0x30
 8008672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008676:	4422      	add	r2, r4
 8008678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800867c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008680:	3302      	adds	r3, #2
 8008682:	e7c7      	b.n	8008614 <_printf_common+0x58>
 8008684:	2301      	movs	r3, #1
 8008686:	4622      	mov	r2, r4
 8008688:	4641      	mov	r1, r8
 800868a:	4638      	mov	r0, r7
 800868c:	47c8      	blx	r9
 800868e:	3001      	adds	r0, #1
 8008690:	d0e6      	beq.n	8008660 <_printf_common+0xa4>
 8008692:	3601      	adds	r6, #1
 8008694:	e7d9      	b.n	800864a <_printf_common+0x8e>
	...

08008698 <_printf_i>:
 8008698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	7e0f      	ldrb	r7, [r1, #24]
 800869e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086a0:	2f78      	cmp	r7, #120	@ 0x78
 80086a2:	4691      	mov	r9, r2
 80086a4:	4680      	mov	r8, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	469a      	mov	sl, r3
 80086aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086ae:	d807      	bhi.n	80086c0 <_printf_i+0x28>
 80086b0:	2f62      	cmp	r7, #98	@ 0x62
 80086b2:	d80a      	bhi.n	80086ca <_printf_i+0x32>
 80086b4:	2f00      	cmp	r7, #0
 80086b6:	f000 80d2 	beq.w	800885e <_printf_i+0x1c6>
 80086ba:	2f58      	cmp	r7, #88	@ 0x58
 80086bc:	f000 80b9 	beq.w	8008832 <_printf_i+0x19a>
 80086c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086c8:	e03a      	b.n	8008740 <_printf_i+0xa8>
 80086ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086ce:	2b15      	cmp	r3, #21
 80086d0:	d8f6      	bhi.n	80086c0 <_printf_i+0x28>
 80086d2:	a101      	add	r1, pc, #4	@ (adr r1, 80086d8 <_printf_i+0x40>)
 80086d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d8:	08008731 	.word	0x08008731
 80086dc:	08008745 	.word	0x08008745
 80086e0:	080086c1 	.word	0x080086c1
 80086e4:	080086c1 	.word	0x080086c1
 80086e8:	080086c1 	.word	0x080086c1
 80086ec:	080086c1 	.word	0x080086c1
 80086f0:	08008745 	.word	0x08008745
 80086f4:	080086c1 	.word	0x080086c1
 80086f8:	080086c1 	.word	0x080086c1
 80086fc:	080086c1 	.word	0x080086c1
 8008700:	080086c1 	.word	0x080086c1
 8008704:	08008845 	.word	0x08008845
 8008708:	0800876f 	.word	0x0800876f
 800870c:	080087ff 	.word	0x080087ff
 8008710:	080086c1 	.word	0x080086c1
 8008714:	080086c1 	.word	0x080086c1
 8008718:	08008867 	.word	0x08008867
 800871c:	080086c1 	.word	0x080086c1
 8008720:	0800876f 	.word	0x0800876f
 8008724:	080086c1 	.word	0x080086c1
 8008728:	080086c1 	.word	0x080086c1
 800872c:	08008807 	.word	0x08008807
 8008730:	6833      	ldr	r3, [r6, #0]
 8008732:	1d1a      	adds	r2, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6032      	str	r2, [r6, #0]
 8008738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800873c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008740:	2301      	movs	r3, #1
 8008742:	e09d      	b.n	8008880 <_printf_i+0x1e8>
 8008744:	6833      	ldr	r3, [r6, #0]
 8008746:	6820      	ldr	r0, [r4, #0]
 8008748:	1d19      	adds	r1, r3, #4
 800874a:	6031      	str	r1, [r6, #0]
 800874c:	0606      	lsls	r6, r0, #24
 800874e:	d501      	bpl.n	8008754 <_printf_i+0xbc>
 8008750:	681d      	ldr	r5, [r3, #0]
 8008752:	e003      	b.n	800875c <_printf_i+0xc4>
 8008754:	0645      	lsls	r5, r0, #25
 8008756:	d5fb      	bpl.n	8008750 <_printf_i+0xb8>
 8008758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800875c:	2d00      	cmp	r5, #0
 800875e:	da03      	bge.n	8008768 <_printf_i+0xd0>
 8008760:	232d      	movs	r3, #45	@ 0x2d
 8008762:	426d      	negs	r5, r5
 8008764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008768:	4859      	ldr	r0, [pc, #356]	@ (80088d0 <_printf_i+0x238>)
 800876a:	230a      	movs	r3, #10
 800876c:	e011      	b.n	8008792 <_printf_i+0xfa>
 800876e:	6821      	ldr	r1, [r4, #0]
 8008770:	6833      	ldr	r3, [r6, #0]
 8008772:	0608      	lsls	r0, r1, #24
 8008774:	f853 5b04 	ldr.w	r5, [r3], #4
 8008778:	d402      	bmi.n	8008780 <_printf_i+0xe8>
 800877a:	0649      	lsls	r1, r1, #25
 800877c:	bf48      	it	mi
 800877e:	b2ad      	uxthmi	r5, r5
 8008780:	2f6f      	cmp	r7, #111	@ 0x6f
 8008782:	4853      	ldr	r0, [pc, #332]	@ (80088d0 <_printf_i+0x238>)
 8008784:	6033      	str	r3, [r6, #0]
 8008786:	bf14      	ite	ne
 8008788:	230a      	movne	r3, #10
 800878a:	2308      	moveq	r3, #8
 800878c:	2100      	movs	r1, #0
 800878e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008792:	6866      	ldr	r6, [r4, #4]
 8008794:	60a6      	str	r6, [r4, #8]
 8008796:	2e00      	cmp	r6, #0
 8008798:	bfa2      	ittt	ge
 800879a:	6821      	ldrge	r1, [r4, #0]
 800879c:	f021 0104 	bicge.w	r1, r1, #4
 80087a0:	6021      	strge	r1, [r4, #0]
 80087a2:	b90d      	cbnz	r5, 80087a8 <_printf_i+0x110>
 80087a4:	2e00      	cmp	r6, #0
 80087a6:	d04b      	beq.n	8008840 <_printf_i+0x1a8>
 80087a8:	4616      	mov	r6, r2
 80087aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80087ae:	fb03 5711 	mls	r7, r3, r1, r5
 80087b2:	5dc7      	ldrb	r7, [r0, r7]
 80087b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087b8:	462f      	mov	r7, r5
 80087ba:	42bb      	cmp	r3, r7
 80087bc:	460d      	mov	r5, r1
 80087be:	d9f4      	bls.n	80087aa <_printf_i+0x112>
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d10b      	bne.n	80087dc <_printf_i+0x144>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	07df      	lsls	r7, r3, #31
 80087c8:	d508      	bpl.n	80087dc <_printf_i+0x144>
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	6861      	ldr	r1, [r4, #4]
 80087ce:	4299      	cmp	r1, r3
 80087d0:	bfde      	ittt	le
 80087d2:	2330      	movle	r3, #48	@ 0x30
 80087d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087dc:	1b92      	subs	r2, r2, r6
 80087de:	6122      	str	r2, [r4, #16]
 80087e0:	f8cd a000 	str.w	sl, [sp]
 80087e4:	464b      	mov	r3, r9
 80087e6:	aa03      	add	r2, sp, #12
 80087e8:	4621      	mov	r1, r4
 80087ea:	4640      	mov	r0, r8
 80087ec:	f7ff fee6 	bl	80085bc <_printf_common>
 80087f0:	3001      	adds	r0, #1
 80087f2:	d14a      	bne.n	800888a <_printf_i+0x1f2>
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	b004      	add	sp, #16
 80087fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	f043 0320 	orr.w	r3, r3, #32
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	4833      	ldr	r0, [pc, #204]	@ (80088d4 <_printf_i+0x23c>)
 8008808:	2778      	movs	r7, #120	@ 0x78
 800880a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	6831      	ldr	r1, [r6, #0]
 8008812:	061f      	lsls	r7, r3, #24
 8008814:	f851 5b04 	ldr.w	r5, [r1], #4
 8008818:	d402      	bmi.n	8008820 <_printf_i+0x188>
 800881a:	065f      	lsls	r7, r3, #25
 800881c:	bf48      	it	mi
 800881e:	b2ad      	uxthmi	r5, r5
 8008820:	6031      	str	r1, [r6, #0]
 8008822:	07d9      	lsls	r1, r3, #31
 8008824:	bf44      	itt	mi
 8008826:	f043 0320 	orrmi.w	r3, r3, #32
 800882a:	6023      	strmi	r3, [r4, #0]
 800882c:	b11d      	cbz	r5, 8008836 <_printf_i+0x19e>
 800882e:	2310      	movs	r3, #16
 8008830:	e7ac      	b.n	800878c <_printf_i+0xf4>
 8008832:	4827      	ldr	r0, [pc, #156]	@ (80088d0 <_printf_i+0x238>)
 8008834:	e7e9      	b.n	800880a <_printf_i+0x172>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	f023 0320 	bic.w	r3, r3, #32
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	e7f6      	b.n	800882e <_printf_i+0x196>
 8008840:	4616      	mov	r6, r2
 8008842:	e7bd      	b.n	80087c0 <_printf_i+0x128>
 8008844:	6833      	ldr	r3, [r6, #0]
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	6961      	ldr	r1, [r4, #20]
 800884a:	1d18      	adds	r0, r3, #4
 800884c:	6030      	str	r0, [r6, #0]
 800884e:	062e      	lsls	r6, r5, #24
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	d501      	bpl.n	8008858 <_printf_i+0x1c0>
 8008854:	6019      	str	r1, [r3, #0]
 8008856:	e002      	b.n	800885e <_printf_i+0x1c6>
 8008858:	0668      	lsls	r0, r5, #25
 800885a:	d5fb      	bpl.n	8008854 <_printf_i+0x1bc>
 800885c:	8019      	strh	r1, [r3, #0]
 800885e:	2300      	movs	r3, #0
 8008860:	6123      	str	r3, [r4, #16]
 8008862:	4616      	mov	r6, r2
 8008864:	e7bc      	b.n	80087e0 <_printf_i+0x148>
 8008866:	6833      	ldr	r3, [r6, #0]
 8008868:	1d1a      	adds	r2, r3, #4
 800886a:	6032      	str	r2, [r6, #0]
 800886c:	681e      	ldr	r6, [r3, #0]
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	2100      	movs	r1, #0
 8008872:	4630      	mov	r0, r6
 8008874:	f7f7 fd34 	bl	80002e0 <memchr>
 8008878:	b108      	cbz	r0, 800887e <_printf_i+0x1e6>
 800887a:	1b80      	subs	r0, r0, r6
 800887c:	6060      	str	r0, [r4, #4]
 800887e:	6863      	ldr	r3, [r4, #4]
 8008880:	6123      	str	r3, [r4, #16]
 8008882:	2300      	movs	r3, #0
 8008884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008888:	e7aa      	b.n	80087e0 <_printf_i+0x148>
 800888a:	6923      	ldr	r3, [r4, #16]
 800888c:	4632      	mov	r2, r6
 800888e:	4649      	mov	r1, r9
 8008890:	4640      	mov	r0, r8
 8008892:	47d0      	blx	sl
 8008894:	3001      	adds	r0, #1
 8008896:	d0ad      	beq.n	80087f4 <_printf_i+0x15c>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	079b      	lsls	r3, r3, #30
 800889c:	d413      	bmi.n	80088c6 <_printf_i+0x22e>
 800889e:	68e0      	ldr	r0, [r4, #12]
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	4298      	cmp	r0, r3
 80088a4:	bfb8      	it	lt
 80088a6:	4618      	movlt	r0, r3
 80088a8:	e7a6      	b.n	80087f8 <_printf_i+0x160>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4632      	mov	r2, r6
 80088ae:	4649      	mov	r1, r9
 80088b0:	4640      	mov	r0, r8
 80088b2:	47d0      	blx	sl
 80088b4:	3001      	adds	r0, #1
 80088b6:	d09d      	beq.n	80087f4 <_printf_i+0x15c>
 80088b8:	3501      	adds	r5, #1
 80088ba:	68e3      	ldr	r3, [r4, #12]
 80088bc:	9903      	ldr	r1, [sp, #12]
 80088be:	1a5b      	subs	r3, r3, r1
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	dcf2      	bgt.n	80088aa <_printf_i+0x212>
 80088c4:	e7eb      	b.n	800889e <_printf_i+0x206>
 80088c6:	2500      	movs	r5, #0
 80088c8:	f104 0619 	add.w	r6, r4, #25
 80088cc:	e7f5      	b.n	80088ba <_printf_i+0x222>
 80088ce:	bf00      	nop
 80088d0:	0800ce7e 	.word	0x0800ce7e
 80088d4:	0800ce8f 	.word	0x0800ce8f

080088d8 <_scanf_float>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	b087      	sub	sp, #28
 80088de:	4617      	mov	r7, r2
 80088e0:	9303      	str	r3, [sp, #12]
 80088e2:	688b      	ldr	r3, [r1, #8]
 80088e4:	1e5a      	subs	r2, r3, #1
 80088e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80088ea:	bf81      	itttt	hi
 80088ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80088f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80088f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80088f8:	608b      	strhi	r3, [r1, #8]
 80088fa:	680b      	ldr	r3, [r1, #0]
 80088fc:	460a      	mov	r2, r1
 80088fe:	f04f 0500 	mov.w	r5, #0
 8008902:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008906:	f842 3b1c 	str.w	r3, [r2], #28
 800890a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800890e:	4680      	mov	r8, r0
 8008910:	460c      	mov	r4, r1
 8008912:	bf98      	it	ls
 8008914:	f04f 0b00 	movls.w	fp, #0
 8008918:	9201      	str	r2, [sp, #4]
 800891a:	4616      	mov	r6, r2
 800891c:	46aa      	mov	sl, r5
 800891e:	46a9      	mov	r9, r5
 8008920:	9502      	str	r5, [sp, #8]
 8008922:	68a2      	ldr	r2, [r4, #8]
 8008924:	b152      	cbz	r2, 800893c <_scanf_float+0x64>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b4e      	cmp	r3, #78	@ 0x4e
 800892c:	d864      	bhi.n	80089f8 <_scanf_float+0x120>
 800892e:	2b40      	cmp	r3, #64	@ 0x40
 8008930:	d83c      	bhi.n	80089ac <_scanf_float+0xd4>
 8008932:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008936:	b2c8      	uxtb	r0, r1
 8008938:	280e      	cmp	r0, #14
 800893a:	d93a      	bls.n	80089b2 <_scanf_float+0xda>
 800893c:	f1b9 0f00 	cmp.w	r9, #0
 8008940:	d003      	beq.n	800894a <_scanf_float+0x72>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800894e:	f1ba 0f01 	cmp.w	sl, #1
 8008952:	f200 8117 	bhi.w	8008b84 <_scanf_float+0x2ac>
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	429e      	cmp	r6, r3
 800895a:	f200 8108 	bhi.w	8008b6e <_scanf_float+0x296>
 800895e:	2001      	movs	r0, #1
 8008960:	b007      	add	sp, #28
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800896a:	2a0d      	cmp	r2, #13
 800896c:	d8e6      	bhi.n	800893c <_scanf_float+0x64>
 800896e:	a101      	add	r1, pc, #4	@ (adr r1, 8008974 <_scanf_float+0x9c>)
 8008970:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008974:	08008abb 	.word	0x08008abb
 8008978:	0800893d 	.word	0x0800893d
 800897c:	0800893d 	.word	0x0800893d
 8008980:	0800893d 	.word	0x0800893d
 8008984:	08008b1b 	.word	0x08008b1b
 8008988:	08008af3 	.word	0x08008af3
 800898c:	0800893d 	.word	0x0800893d
 8008990:	0800893d 	.word	0x0800893d
 8008994:	08008ac9 	.word	0x08008ac9
 8008998:	0800893d 	.word	0x0800893d
 800899c:	0800893d 	.word	0x0800893d
 80089a0:	0800893d 	.word	0x0800893d
 80089a4:	0800893d 	.word	0x0800893d
 80089a8:	08008a81 	.word	0x08008a81
 80089ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80089b0:	e7db      	b.n	800896a <_scanf_float+0x92>
 80089b2:	290e      	cmp	r1, #14
 80089b4:	d8c2      	bhi.n	800893c <_scanf_float+0x64>
 80089b6:	a001      	add	r0, pc, #4	@ (adr r0, 80089bc <_scanf_float+0xe4>)
 80089b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80089bc:	08008a71 	.word	0x08008a71
 80089c0:	0800893d 	.word	0x0800893d
 80089c4:	08008a71 	.word	0x08008a71
 80089c8:	08008b07 	.word	0x08008b07
 80089cc:	0800893d 	.word	0x0800893d
 80089d0:	08008a19 	.word	0x08008a19
 80089d4:	08008a57 	.word	0x08008a57
 80089d8:	08008a57 	.word	0x08008a57
 80089dc:	08008a57 	.word	0x08008a57
 80089e0:	08008a57 	.word	0x08008a57
 80089e4:	08008a57 	.word	0x08008a57
 80089e8:	08008a57 	.word	0x08008a57
 80089ec:	08008a57 	.word	0x08008a57
 80089f0:	08008a57 	.word	0x08008a57
 80089f4:	08008a57 	.word	0x08008a57
 80089f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80089fa:	d809      	bhi.n	8008a10 <_scanf_float+0x138>
 80089fc:	2b60      	cmp	r3, #96	@ 0x60
 80089fe:	d8b2      	bhi.n	8008966 <_scanf_float+0x8e>
 8008a00:	2b54      	cmp	r3, #84	@ 0x54
 8008a02:	d07b      	beq.n	8008afc <_scanf_float+0x224>
 8008a04:	2b59      	cmp	r3, #89	@ 0x59
 8008a06:	d199      	bne.n	800893c <_scanf_float+0x64>
 8008a08:	2d07      	cmp	r5, #7
 8008a0a:	d197      	bne.n	800893c <_scanf_float+0x64>
 8008a0c:	2508      	movs	r5, #8
 8008a0e:	e02c      	b.n	8008a6a <_scanf_float+0x192>
 8008a10:	2b74      	cmp	r3, #116	@ 0x74
 8008a12:	d073      	beq.n	8008afc <_scanf_float+0x224>
 8008a14:	2b79      	cmp	r3, #121	@ 0x79
 8008a16:	e7f6      	b.n	8008a06 <_scanf_float+0x12e>
 8008a18:	6821      	ldr	r1, [r4, #0]
 8008a1a:	05c8      	lsls	r0, r1, #23
 8008a1c:	d51b      	bpl.n	8008a56 <_scanf_float+0x17e>
 8008a1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008a22:	6021      	str	r1, [r4, #0]
 8008a24:	f109 0901 	add.w	r9, r9, #1
 8008a28:	f1bb 0f00 	cmp.w	fp, #0
 8008a2c:	d003      	beq.n	8008a36 <_scanf_float+0x15e>
 8008a2e:	3201      	adds	r2, #1
 8008a30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a34:	60a2      	str	r2, [r4, #8]
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	f340 8087 	ble.w	8008b5c <_scanf_float+0x284>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	e765      	b.n	8008922 <_scanf_float+0x4a>
 8008a56:	eb1a 0105 	adds.w	r1, sl, r5
 8008a5a:	f47f af6f 	bne.w	800893c <_scanf_float+0x64>
 8008a5e:	6822      	ldr	r2, [r4, #0]
 8008a60:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008a64:	6022      	str	r2, [r4, #0]
 8008a66:	460d      	mov	r5, r1
 8008a68:	468a      	mov	sl, r1
 8008a6a:	f806 3b01 	strb.w	r3, [r6], #1
 8008a6e:	e7e2      	b.n	8008a36 <_scanf_float+0x15e>
 8008a70:	6822      	ldr	r2, [r4, #0]
 8008a72:	0610      	lsls	r0, r2, #24
 8008a74:	f57f af62 	bpl.w	800893c <_scanf_float+0x64>
 8008a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a7c:	6022      	str	r2, [r4, #0]
 8008a7e:	e7f4      	b.n	8008a6a <_scanf_float+0x192>
 8008a80:	f1ba 0f00 	cmp.w	sl, #0
 8008a84:	d10e      	bne.n	8008aa4 <_scanf_float+0x1cc>
 8008a86:	f1b9 0f00 	cmp.w	r9, #0
 8008a8a:	d10e      	bne.n	8008aaa <_scanf_float+0x1d2>
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008a92:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008a96:	d108      	bne.n	8008aaa <_scanf_float+0x1d2>
 8008a98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a9c:	6022      	str	r2, [r4, #0]
 8008a9e:	f04f 0a01 	mov.w	sl, #1
 8008aa2:	e7e2      	b.n	8008a6a <_scanf_float+0x192>
 8008aa4:	f1ba 0f02 	cmp.w	sl, #2
 8008aa8:	d055      	beq.n	8008b56 <_scanf_float+0x27e>
 8008aaa:	2d01      	cmp	r5, #1
 8008aac:	d002      	beq.n	8008ab4 <_scanf_float+0x1dc>
 8008aae:	2d04      	cmp	r5, #4
 8008ab0:	f47f af44 	bne.w	800893c <_scanf_float+0x64>
 8008ab4:	3501      	adds	r5, #1
 8008ab6:	b2ed      	uxtb	r5, r5
 8008ab8:	e7d7      	b.n	8008a6a <_scanf_float+0x192>
 8008aba:	f1ba 0f01 	cmp.w	sl, #1
 8008abe:	f47f af3d 	bne.w	800893c <_scanf_float+0x64>
 8008ac2:	f04f 0a02 	mov.w	sl, #2
 8008ac6:	e7d0      	b.n	8008a6a <_scanf_float+0x192>
 8008ac8:	b97d      	cbnz	r5, 8008aea <_scanf_float+0x212>
 8008aca:	f1b9 0f00 	cmp.w	r9, #0
 8008ace:	f47f af38 	bne.w	8008942 <_scanf_float+0x6a>
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008ad8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008adc:	f040 8101 	bne.w	8008ce2 <_scanf_float+0x40a>
 8008ae0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ae4:	6022      	str	r2, [r4, #0]
 8008ae6:	2501      	movs	r5, #1
 8008ae8:	e7bf      	b.n	8008a6a <_scanf_float+0x192>
 8008aea:	2d03      	cmp	r5, #3
 8008aec:	d0e2      	beq.n	8008ab4 <_scanf_float+0x1dc>
 8008aee:	2d05      	cmp	r5, #5
 8008af0:	e7de      	b.n	8008ab0 <_scanf_float+0x1d8>
 8008af2:	2d02      	cmp	r5, #2
 8008af4:	f47f af22 	bne.w	800893c <_scanf_float+0x64>
 8008af8:	2503      	movs	r5, #3
 8008afa:	e7b6      	b.n	8008a6a <_scanf_float+0x192>
 8008afc:	2d06      	cmp	r5, #6
 8008afe:	f47f af1d 	bne.w	800893c <_scanf_float+0x64>
 8008b02:	2507      	movs	r5, #7
 8008b04:	e7b1      	b.n	8008a6a <_scanf_float+0x192>
 8008b06:	6822      	ldr	r2, [r4, #0]
 8008b08:	0591      	lsls	r1, r2, #22
 8008b0a:	f57f af17 	bpl.w	800893c <_scanf_float+0x64>
 8008b0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008b12:	6022      	str	r2, [r4, #0]
 8008b14:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b18:	e7a7      	b.n	8008a6a <_scanf_float+0x192>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008b20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008b24:	d006      	beq.n	8008b34 <_scanf_float+0x25c>
 8008b26:	0550      	lsls	r0, r2, #21
 8008b28:	f57f af08 	bpl.w	800893c <_scanf_float+0x64>
 8008b2c:	f1b9 0f00 	cmp.w	r9, #0
 8008b30:	f000 80d7 	beq.w	8008ce2 <_scanf_float+0x40a>
 8008b34:	0591      	lsls	r1, r2, #22
 8008b36:	bf58      	it	pl
 8008b38:	9902      	ldrpl	r1, [sp, #8]
 8008b3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008b3e:	bf58      	it	pl
 8008b40:	eba9 0101 	subpl.w	r1, r9, r1
 8008b44:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008b48:	bf58      	it	pl
 8008b4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b4e:	6022      	str	r2, [r4, #0]
 8008b50:	f04f 0900 	mov.w	r9, #0
 8008b54:	e789      	b.n	8008a6a <_scanf_float+0x192>
 8008b56:	f04f 0a03 	mov.w	sl, #3
 8008b5a:	e786      	b.n	8008a6a <_scanf_float+0x192>
 8008b5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008b60:	4639      	mov	r1, r7
 8008b62:	4640      	mov	r0, r8
 8008b64:	4798      	blx	r3
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f aedb 	beq.w	8008922 <_scanf_float+0x4a>
 8008b6c:	e6e6      	b.n	800893c <_scanf_float+0x64>
 8008b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b76:	463a      	mov	r2, r7
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4798      	blx	r3
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	6123      	str	r3, [r4, #16]
 8008b82:	e6e8      	b.n	8008956 <_scanf_float+0x7e>
 8008b84:	1e6b      	subs	r3, r5, #1
 8008b86:	2b06      	cmp	r3, #6
 8008b88:	d824      	bhi.n	8008bd4 <_scanf_float+0x2fc>
 8008b8a:	2d02      	cmp	r5, #2
 8008b8c:	d836      	bhi.n	8008bfc <_scanf_float+0x324>
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	429e      	cmp	r6, r3
 8008b92:	f67f aee4 	bls.w	800895e <_scanf_float+0x86>
 8008b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b9e:	463a      	mov	r2, r7
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	4798      	blx	r3
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	6123      	str	r3, [r4, #16]
 8008baa:	e7f0      	b.n	8008b8e <_scanf_float+0x2b6>
 8008bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008bb0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008bb4:	463a      	mov	r2, r7
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4798      	blx	r3
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bc4:	fa5f fa8a 	uxtb.w	sl, sl
 8008bc8:	f1ba 0f02 	cmp.w	sl, #2
 8008bcc:	d1ee      	bne.n	8008bac <_scanf_float+0x2d4>
 8008bce:	3d03      	subs	r5, #3
 8008bd0:	b2ed      	uxtb	r5, r5
 8008bd2:	1b76      	subs	r6, r6, r5
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	05da      	lsls	r2, r3, #23
 8008bd8:	d530      	bpl.n	8008c3c <_scanf_float+0x364>
 8008bda:	055b      	lsls	r3, r3, #21
 8008bdc:	d511      	bpl.n	8008c02 <_scanf_float+0x32a>
 8008bde:	9b01      	ldr	r3, [sp, #4]
 8008be0:	429e      	cmp	r6, r3
 8008be2:	f67f aebc 	bls.w	800895e <_scanf_float+0x86>
 8008be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008bea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bee:	463a      	mov	r2, r7
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4798      	blx	r3
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	e7f0      	b.n	8008bde <_scanf_float+0x306>
 8008bfc:	46aa      	mov	sl, r5
 8008bfe:	46b3      	mov	fp, r6
 8008c00:	e7de      	b.n	8008bc0 <_scanf_float+0x2e8>
 8008c02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	2965      	cmp	r1, #101	@ 0x65
 8008c0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	d00c      	beq.n	8008c30 <_scanf_float+0x358>
 8008c16:	2945      	cmp	r1, #69	@ 0x45
 8008c18:	d00a      	beq.n	8008c30 <_scanf_float+0x358>
 8008c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c1e:	463a      	mov	r2, r7
 8008c20:	4640      	mov	r0, r8
 8008c22:	4798      	blx	r3
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	1eb5      	subs	r5, r6, #2
 8008c2e:	6123      	str	r3, [r4, #16]
 8008c30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c34:	463a      	mov	r2, r7
 8008c36:	4640      	mov	r0, r8
 8008c38:	4798      	blx	r3
 8008c3a:	462e      	mov	r6, r5
 8008c3c:	6822      	ldr	r2, [r4, #0]
 8008c3e:	f012 0210 	ands.w	r2, r2, #16
 8008c42:	d001      	beq.n	8008c48 <_scanf_float+0x370>
 8008c44:	2000      	movs	r0, #0
 8008c46:	e68b      	b.n	8008960 <_scanf_float+0x88>
 8008c48:	7032      	strb	r2, [r6, #0]
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c54:	d11a      	bne.n	8008c8c <_scanf_float+0x3b4>
 8008c56:	9b02      	ldr	r3, [sp, #8]
 8008c58:	454b      	cmp	r3, r9
 8008c5a:	eba3 0209 	sub.w	r2, r3, r9
 8008c5e:	d121      	bne.n	8008ca4 <_scanf_float+0x3cc>
 8008c60:	9901      	ldr	r1, [sp, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	4640      	mov	r0, r8
 8008c66:	f002 fb61 	bl	800b32c <_strtod_r>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	6821      	ldr	r1, [r4, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f011 0f02 	tst.w	r1, #2
 8008c74:	f103 0204 	add.w	r2, r3, #4
 8008c78:	d01f      	beq.n	8008cba <_scanf_float+0x3e2>
 8008c7a:	9903      	ldr	r1, [sp, #12]
 8008c7c:	600a      	str	r2, [r1, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	ed83 0b00 	vstr	d0, [r3]
 8008c84:	68e3      	ldr	r3, [r4, #12]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60e3      	str	r3, [r4, #12]
 8008c8a:	e7db      	b.n	8008c44 <_scanf_float+0x36c>
 8008c8c:	9b04      	ldr	r3, [sp, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0e6      	beq.n	8008c60 <_scanf_float+0x388>
 8008c92:	9905      	ldr	r1, [sp, #20]
 8008c94:	230a      	movs	r3, #10
 8008c96:	3101      	adds	r1, #1
 8008c98:	4640      	mov	r0, r8
 8008c9a:	f002 fbc7 	bl	800b42c <_strtol_r>
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	9e05      	ldr	r6, [sp, #20]
 8008ca2:	1ac2      	subs	r2, r0, r3
 8008ca4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008ca8:	429e      	cmp	r6, r3
 8008caa:	bf28      	it	cs
 8008cac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008cb0:	490d      	ldr	r1, [pc, #52]	@ (8008ce8 <_scanf_float+0x410>)
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f000 f912 	bl	8008edc <siprintf>
 8008cb8:	e7d2      	b.n	8008c60 <_scanf_float+0x388>
 8008cba:	f011 0f04 	tst.w	r1, #4
 8008cbe:	9903      	ldr	r1, [sp, #12]
 8008cc0:	600a      	str	r2, [r1, #0]
 8008cc2:	d1dc      	bne.n	8008c7e <_scanf_float+0x3a6>
 8008cc4:	eeb4 0b40 	vcmp.f64	d0, d0
 8008cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ccc:	681d      	ldr	r5, [r3, #0]
 8008cce:	d705      	bvc.n	8008cdc <_scanf_float+0x404>
 8008cd0:	4806      	ldr	r0, [pc, #24]	@ (8008cec <_scanf_float+0x414>)
 8008cd2:	f000 f9e7 	bl	80090a4 <nanf>
 8008cd6:	ed85 0a00 	vstr	s0, [r5]
 8008cda:	e7d3      	b.n	8008c84 <_scanf_float+0x3ac>
 8008cdc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008ce0:	e7f9      	b.n	8008cd6 <_scanf_float+0x3fe>
 8008ce2:	f04f 0900 	mov.w	r9, #0
 8008ce6:	e630      	b.n	800894a <_scanf_float+0x72>
 8008ce8:	0800cea0 	.word	0x0800cea0
 8008cec:	0800d235 	.word	0x0800d235

08008cf0 <std>:
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8008cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cfe:	6083      	str	r3, [r0, #8]
 8008d00:	8181      	strh	r1, [r0, #12]
 8008d02:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d04:	81c2      	strh	r2, [r0, #14]
 8008d06:	6183      	str	r3, [r0, #24]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	305c      	adds	r0, #92	@ 0x5c
 8008d0e:	f000 f948 	bl	8008fa2 <memset>
 8008d12:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <std+0x58>)
 8008d14:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d16:	4b0d      	ldr	r3, [pc, #52]	@ (8008d4c <std+0x5c>)
 8008d18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d50 <std+0x60>)
 8008d1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d54 <std+0x64>)
 8008d20:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d22:	4b0d      	ldr	r3, [pc, #52]	@ (8008d58 <std+0x68>)
 8008d24:	6224      	str	r4, [r4, #32]
 8008d26:	429c      	cmp	r4, r3
 8008d28:	d006      	beq.n	8008d38 <std+0x48>
 8008d2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d2e:	4294      	cmp	r4, r2
 8008d30:	d002      	beq.n	8008d38 <std+0x48>
 8008d32:	33d0      	adds	r3, #208	@ 0xd0
 8008d34:	429c      	cmp	r4, r3
 8008d36:	d105      	bne.n	8008d44 <std+0x54>
 8008d38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d40:	f000 b9ac 	b.w	800909c <__retarget_lock_init_recursive>
 8008d44:	bd10      	pop	{r4, pc}
 8008d46:	bf00      	nop
 8008d48:	08008f1d 	.word	0x08008f1d
 8008d4c:	08008f3f 	.word	0x08008f3f
 8008d50:	08008f77 	.word	0x08008f77
 8008d54:	08008f9b 	.word	0x08008f9b
 8008d58:	240004f0 	.word	0x240004f0

08008d5c <stdio_exit_handler>:
 8008d5c:	4a02      	ldr	r2, [pc, #8]	@ (8008d68 <stdio_exit_handler+0xc>)
 8008d5e:	4903      	ldr	r1, [pc, #12]	@ (8008d6c <stdio_exit_handler+0x10>)
 8008d60:	4803      	ldr	r0, [pc, #12]	@ (8008d70 <stdio_exit_handler+0x14>)
 8008d62:	f000 b869 	b.w	8008e38 <_fwalk_sglue>
 8008d66:	bf00      	nop
 8008d68:	24000010 	.word	0x24000010
 8008d6c:	0800b7e9 	.word	0x0800b7e9
 8008d70:	24000020 	.word	0x24000020

08008d74 <cleanup_stdio>:
 8008d74:	6841      	ldr	r1, [r0, #4]
 8008d76:	4b0c      	ldr	r3, [pc, #48]	@ (8008da8 <cleanup_stdio+0x34>)
 8008d78:	4299      	cmp	r1, r3
 8008d7a:	b510      	push	{r4, lr}
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	d001      	beq.n	8008d84 <cleanup_stdio+0x10>
 8008d80:	f002 fd32 	bl	800b7e8 <_fflush_r>
 8008d84:	68a1      	ldr	r1, [r4, #8]
 8008d86:	4b09      	ldr	r3, [pc, #36]	@ (8008dac <cleanup_stdio+0x38>)
 8008d88:	4299      	cmp	r1, r3
 8008d8a:	d002      	beq.n	8008d92 <cleanup_stdio+0x1e>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f002 fd2b 	bl	800b7e8 <_fflush_r>
 8008d92:	68e1      	ldr	r1, [r4, #12]
 8008d94:	4b06      	ldr	r3, [pc, #24]	@ (8008db0 <cleanup_stdio+0x3c>)
 8008d96:	4299      	cmp	r1, r3
 8008d98:	d004      	beq.n	8008da4 <cleanup_stdio+0x30>
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da0:	f002 bd22 	b.w	800b7e8 <_fflush_r>
 8008da4:	bd10      	pop	{r4, pc}
 8008da6:	bf00      	nop
 8008da8:	240004f0 	.word	0x240004f0
 8008dac:	24000558 	.word	0x24000558
 8008db0:	240005c0 	.word	0x240005c0

08008db4 <global_stdio_init.part.0>:
 8008db4:	b510      	push	{r4, lr}
 8008db6:	4b0b      	ldr	r3, [pc, #44]	@ (8008de4 <global_stdio_init.part.0+0x30>)
 8008db8:	4c0b      	ldr	r4, [pc, #44]	@ (8008de8 <global_stdio_init.part.0+0x34>)
 8008dba:	4a0c      	ldr	r2, [pc, #48]	@ (8008dec <global_stdio_init.part.0+0x38>)
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2104      	movs	r1, #4
 8008dc4:	f7ff ff94 	bl	8008cf0 <std>
 8008dc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008dcc:	2201      	movs	r2, #1
 8008dce:	2109      	movs	r1, #9
 8008dd0:	f7ff ff8e 	bl	8008cf0 <std>
 8008dd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008dd8:	2202      	movs	r2, #2
 8008dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dde:	2112      	movs	r1, #18
 8008de0:	f7ff bf86 	b.w	8008cf0 <std>
 8008de4:	24000628 	.word	0x24000628
 8008de8:	240004f0 	.word	0x240004f0
 8008dec:	08008d5d 	.word	0x08008d5d

08008df0 <__sfp_lock_acquire>:
 8008df0:	4801      	ldr	r0, [pc, #4]	@ (8008df8 <__sfp_lock_acquire+0x8>)
 8008df2:	f000 b954 	b.w	800909e <__retarget_lock_acquire_recursive>
 8008df6:	bf00      	nop
 8008df8:	24000631 	.word	0x24000631

08008dfc <__sfp_lock_release>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	@ (8008e04 <__sfp_lock_release+0x8>)
 8008dfe:	f000 b94f 	b.w	80090a0 <__retarget_lock_release_recursive>
 8008e02:	bf00      	nop
 8008e04:	24000631 	.word	0x24000631

08008e08 <__sinit>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	f7ff fff0 	bl	8008df0 <__sfp_lock_acquire>
 8008e10:	6a23      	ldr	r3, [r4, #32]
 8008e12:	b11b      	cbz	r3, 8008e1c <__sinit+0x14>
 8008e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e18:	f7ff bff0 	b.w	8008dfc <__sfp_lock_release>
 8008e1c:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <__sinit+0x28>)
 8008e1e:	6223      	str	r3, [r4, #32]
 8008e20:	4b04      	ldr	r3, [pc, #16]	@ (8008e34 <__sinit+0x2c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f5      	bne.n	8008e14 <__sinit+0xc>
 8008e28:	f7ff ffc4 	bl	8008db4 <global_stdio_init.part.0>
 8008e2c:	e7f2      	b.n	8008e14 <__sinit+0xc>
 8008e2e:	bf00      	nop
 8008e30:	08008d75 	.word	0x08008d75
 8008e34:	24000628 	.word	0x24000628

08008e38 <_fwalk_sglue>:
 8008e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	4688      	mov	r8, r1
 8008e40:	4614      	mov	r4, r2
 8008e42:	2600      	movs	r6, #0
 8008e44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e48:	f1b9 0901 	subs.w	r9, r9, #1
 8008e4c:	d505      	bpl.n	8008e5a <_fwalk_sglue+0x22>
 8008e4e:	6824      	ldr	r4, [r4, #0]
 8008e50:	2c00      	cmp	r4, #0
 8008e52:	d1f7      	bne.n	8008e44 <_fwalk_sglue+0xc>
 8008e54:	4630      	mov	r0, r6
 8008e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d907      	bls.n	8008e70 <_fwalk_sglue+0x38>
 8008e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e64:	3301      	adds	r3, #1
 8008e66:	d003      	beq.n	8008e70 <_fwalk_sglue+0x38>
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	47c0      	blx	r8
 8008e6e:	4306      	orrs	r6, r0
 8008e70:	3568      	adds	r5, #104	@ 0x68
 8008e72:	e7e9      	b.n	8008e48 <_fwalk_sglue+0x10>

08008e74 <sniprintf>:
 8008e74:	b40c      	push	{r2, r3}
 8008e76:	b530      	push	{r4, r5, lr}
 8008e78:	4b17      	ldr	r3, [pc, #92]	@ (8008ed8 <sniprintf+0x64>)
 8008e7a:	1e0c      	subs	r4, r1, #0
 8008e7c:	681d      	ldr	r5, [r3, #0]
 8008e7e:	b09d      	sub	sp, #116	@ 0x74
 8008e80:	da08      	bge.n	8008e94 <sniprintf+0x20>
 8008e82:	238b      	movs	r3, #139	@ 0x8b
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8a:	b01d      	add	sp, #116	@ 0x74
 8008e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e90:	b002      	add	sp, #8
 8008e92:	4770      	bx	lr
 8008e94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e9c:	bf14      	ite	ne
 8008e9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ea2:	4623      	moveq	r3, r4
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	9307      	str	r3, [sp, #28]
 8008ea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008eac:	9002      	str	r0, [sp, #8]
 8008eae:	9006      	str	r0, [sp, #24]
 8008eb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008eb4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008eb6:	ab21      	add	r3, sp, #132	@ 0x84
 8008eb8:	a902      	add	r1, sp, #8
 8008eba:	4628      	mov	r0, r5
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	f002 fb13 	bl	800b4e8 <_svfiprintf_r>
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	bfbc      	itt	lt
 8008ec6:	238b      	movlt	r3, #139	@ 0x8b
 8008ec8:	602b      	strlt	r3, [r5, #0]
 8008eca:	2c00      	cmp	r4, #0
 8008ecc:	d0dd      	beq.n	8008e8a <sniprintf+0x16>
 8008ece:	9b02      	ldr	r3, [sp, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
 8008ed4:	e7d9      	b.n	8008e8a <sniprintf+0x16>
 8008ed6:	bf00      	nop
 8008ed8:	2400001c 	.word	0x2400001c

08008edc <siprintf>:
 8008edc:	b40e      	push	{r1, r2, r3}
 8008ede:	b500      	push	{lr}
 8008ee0:	b09c      	sub	sp, #112	@ 0x70
 8008ee2:	ab1d      	add	r3, sp, #116	@ 0x74
 8008ee4:	9002      	str	r0, [sp, #8]
 8008ee6:	9006      	str	r0, [sp, #24]
 8008ee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008eec:	4809      	ldr	r0, [pc, #36]	@ (8008f14 <siprintf+0x38>)
 8008eee:	9107      	str	r1, [sp, #28]
 8008ef0:	9104      	str	r1, [sp, #16]
 8008ef2:	4909      	ldr	r1, [pc, #36]	@ (8008f18 <siprintf+0x3c>)
 8008ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef8:	9105      	str	r1, [sp, #20]
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	a902      	add	r1, sp, #8
 8008f00:	f002 faf2 	bl	800b4e8 <_svfiprintf_r>
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	b01c      	add	sp, #112	@ 0x70
 8008f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f10:	b003      	add	sp, #12
 8008f12:	4770      	bx	lr
 8008f14:	2400001c 	.word	0x2400001c
 8008f18:	ffff0208 	.word	0xffff0208

08008f1c <__sread>:
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	460c      	mov	r4, r1
 8008f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f24:	f000 f86c 	bl	8009000 <_read_r>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	bfab      	itete	ge
 8008f2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f30:	181b      	addge	r3, r3, r0
 8008f32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f36:	bfac      	ite	ge
 8008f38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f3a:	81a3      	strhlt	r3, [r4, #12]
 8008f3c:	bd10      	pop	{r4, pc}

08008f3e <__swrite>:
 8008f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f42:	461f      	mov	r7, r3
 8008f44:	898b      	ldrh	r3, [r1, #12]
 8008f46:	05db      	lsls	r3, r3, #23
 8008f48:	4605      	mov	r5, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	4616      	mov	r6, r2
 8008f4e:	d505      	bpl.n	8008f5c <__swrite+0x1e>
 8008f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f54:	2302      	movs	r3, #2
 8008f56:	2200      	movs	r2, #0
 8008f58:	f000 f840 	bl	8008fdc <_lseek_r>
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	4632      	mov	r2, r6
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f72:	f000 b857 	b.w	8009024 <_write_r>

08008f76 <__sseek>:
 8008f76:	b510      	push	{r4, lr}
 8008f78:	460c      	mov	r4, r1
 8008f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7e:	f000 f82d 	bl	8008fdc <_lseek_r>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	bf15      	itete	ne
 8008f88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f92:	81a3      	strheq	r3, [r4, #12]
 8008f94:	bf18      	it	ne
 8008f96:	81a3      	strhne	r3, [r4, #12]
 8008f98:	bd10      	pop	{r4, pc}

08008f9a <__sclose>:
 8008f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9e:	f000 b80d 	b.w	8008fbc <_close_r>

08008fa2 <memset>:
 8008fa2:	4402      	add	r2, r0
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d100      	bne.n	8008fac <memset+0xa>
 8008faa:	4770      	bx	lr
 8008fac:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb0:	e7f9      	b.n	8008fa6 <memset+0x4>
	...

08008fb4 <_localeconv_r>:
 8008fb4:	4800      	ldr	r0, [pc, #0]	@ (8008fb8 <_localeconv_r+0x4>)
 8008fb6:	4770      	bx	lr
 8008fb8:	2400015c 	.word	0x2400015c

08008fbc <_close_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d06      	ldr	r5, [pc, #24]	@ (8008fd8 <_close_r+0x1c>)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	f7f9 f81c 	bl	8002004 <_close>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_close_r+0x1a>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_close_r+0x1a>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	2400062c 	.word	0x2400062c

08008fdc <_lseek_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	@ (8008ffc <_lseek_r+0x20>)
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	602a      	str	r2, [r5, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	f7f9 f831 	bl	8002052 <_lseek>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_lseek_r+0x1e>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_lseek_r+0x1e>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	2400062c 	.word	0x2400062c

08009000 <_read_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d07      	ldr	r5, [pc, #28]	@ (8009020 <_read_r+0x20>)
 8009004:	4604      	mov	r4, r0
 8009006:	4608      	mov	r0, r1
 8009008:	4611      	mov	r1, r2
 800900a:	2200      	movs	r2, #0
 800900c:	602a      	str	r2, [r5, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	f7f8 ffdb 	bl	8001fca <_read>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_read_r+0x1e>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	b103      	cbz	r3, 800901e <_read_r+0x1e>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	2400062c 	.word	0x2400062c

08009024 <_write_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d07      	ldr	r5, [pc, #28]	@ (8009044 <_write_r+0x20>)
 8009028:	4604      	mov	r4, r0
 800902a:	4608      	mov	r0, r1
 800902c:	4611      	mov	r1, r2
 800902e:	2200      	movs	r2, #0
 8009030:	602a      	str	r2, [r5, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	f7f8 fb4c 	bl	80016d0 <_write>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_write_r+0x1e>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_write_r+0x1e>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	2400062c 	.word	0x2400062c

08009048 <__errno>:
 8009048:	4b01      	ldr	r3, [pc, #4]	@ (8009050 <__errno+0x8>)
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	2400001c 	.word	0x2400001c

08009054 <__libc_init_array>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4d0d      	ldr	r5, [pc, #52]	@ (800908c <__libc_init_array+0x38>)
 8009058:	4c0d      	ldr	r4, [pc, #52]	@ (8009090 <__libc_init_array+0x3c>)
 800905a:	1b64      	subs	r4, r4, r5
 800905c:	10a4      	asrs	r4, r4, #2
 800905e:	2600      	movs	r6, #0
 8009060:	42a6      	cmp	r6, r4
 8009062:	d109      	bne.n	8009078 <__libc_init_array+0x24>
 8009064:	4d0b      	ldr	r5, [pc, #44]	@ (8009094 <__libc_init_array+0x40>)
 8009066:	4c0c      	ldr	r4, [pc, #48]	@ (8009098 <__libc_init_array+0x44>)
 8009068:	f003 fed2 	bl	800ce10 <_init>
 800906c:	1b64      	subs	r4, r4, r5
 800906e:	10a4      	asrs	r4, r4, #2
 8009070:	2600      	movs	r6, #0
 8009072:	42a6      	cmp	r6, r4
 8009074:	d105      	bne.n	8009082 <__libc_init_array+0x2e>
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	f855 3b04 	ldr.w	r3, [r5], #4
 800907c:	4798      	blx	r3
 800907e:	3601      	adds	r6, #1
 8009080:	e7ee      	b.n	8009060 <__libc_init_array+0xc>
 8009082:	f855 3b04 	ldr.w	r3, [r5], #4
 8009086:	4798      	blx	r3
 8009088:	3601      	adds	r6, #1
 800908a:	e7f2      	b.n	8009072 <__libc_init_array+0x1e>
 800908c:	0800eb98 	.word	0x0800eb98
 8009090:	0800eb98 	.word	0x0800eb98
 8009094:	0800eb98 	.word	0x0800eb98
 8009098:	0800eb9c 	.word	0x0800eb9c

0800909c <__retarget_lock_init_recursive>:
 800909c:	4770      	bx	lr

0800909e <__retarget_lock_acquire_recursive>:
 800909e:	4770      	bx	lr

080090a0 <__retarget_lock_release_recursive>:
 80090a0:	4770      	bx	lr
	...

080090a4 <nanf>:
 80090a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80090ac <nanf+0x8>
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	7fc00000 	.word	0x7fc00000

080090b0 <quorem>:
 80090b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	6903      	ldr	r3, [r0, #16]
 80090b6:	690c      	ldr	r4, [r1, #16]
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	4607      	mov	r7, r0
 80090bc:	db7e      	blt.n	80091bc <quorem+0x10c>
 80090be:	3c01      	subs	r4, #1
 80090c0:	f101 0814 	add.w	r8, r1, #20
 80090c4:	00a3      	lsls	r3, r4, #2
 80090c6:	f100 0514 	add.w	r5, r0, #20
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090da:	3301      	adds	r3, #1
 80090dc:	429a      	cmp	r2, r3
 80090de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80090e6:	d32e      	bcc.n	8009146 <quorem+0x96>
 80090e8:	f04f 0a00 	mov.w	sl, #0
 80090ec:	46c4      	mov	ip, r8
 80090ee:	46ae      	mov	lr, r5
 80090f0:	46d3      	mov	fp, sl
 80090f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090f6:	b298      	uxth	r0, r3
 80090f8:	fb06 a000 	mla	r0, r6, r0, sl
 80090fc:	0c02      	lsrs	r2, r0, #16
 80090fe:	0c1b      	lsrs	r3, r3, #16
 8009100:	fb06 2303 	mla	r3, r6, r3, r2
 8009104:	f8de 2000 	ldr.w	r2, [lr]
 8009108:	b280      	uxth	r0, r0
 800910a:	b292      	uxth	r2, r2
 800910c:	1a12      	subs	r2, r2, r0
 800910e:	445a      	add	r2, fp
 8009110:	f8de 0000 	ldr.w	r0, [lr]
 8009114:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009118:	b29b      	uxth	r3, r3
 800911a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800911e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009122:	b292      	uxth	r2, r2
 8009124:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009128:	45e1      	cmp	r9, ip
 800912a:	f84e 2b04 	str.w	r2, [lr], #4
 800912e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009132:	d2de      	bcs.n	80090f2 <quorem+0x42>
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	58eb      	ldr	r3, [r5, r3]
 8009138:	b92b      	cbnz	r3, 8009146 <quorem+0x96>
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	3b04      	subs	r3, #4
 800913e:	429d      	cmp	r5, r3
 8009140:	461a      	mov	r2, r3
 8009142:	d32f      	bcc.n	80091a4 <quorem+0xf4>
 8009144:	613c      	str	r4, [r7, #16]
 8009146:	4638      	mov	r0, r7
 8009148:	f001 f954 	bl	800a3f4 <__mcmp>
 800914c:	2800      	cmp	r0, #0
 800914e:	db25      	blt.n	800919c <quorem+0xec>
 8009150:	4629      	mov	r1, r5
 8009152:	2000      	movs	r0, #0
 8009154:	f858 2b04 	ldr.w	r2, [r8], #4
 8009158:	f8d1 c000 	ldr.w	ip, [r1]
 800915c:	fa1f fe82 	uxth.w	lr, r2
 8009160:	fa1f f38c 	uxth.w	r3, ip
 8009164:	eba3 030e 	sub.w	r3, r3, lr
 8009168:	4403      	add	r3, r0
 800916a:	0c12      	lsrs	r2, r2, #16
 800916c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009170:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009174:	b29b      	uxth	r3, r3
 8009176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800917a:	45c1      	cmp	r9, r8
 800917c:	f841 3b04 	str.w	r3, [r1], #4
 8009180:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009184:	d2e6      	bcs.n	8009154 <quorem+0xa4>
 8009186:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800918a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800918e:	b922      	cbnz	r2, 800919a <quorem+0xea>
 8009190:	3b04      	subs	r3, #4
 8009192:	429d      	cmp	r5, r3
 8009194:	461a      	mov	r2, r3
 8009196:	d30b      	bcc.n	80091b0 <quorem+0x100>
 8009198:	613c      	str	r4, [r7, #16]
 800919a:	3601      	adds	r6, #1
 800919c:	4630      	mov	r0, r6
 800919e:	b003      	add	sp, #12
 80091a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a4:	6812      	ldr	r2, [r2, #0]
 80091a6:	3b04      	subs	r3, #4
 80091a8:	2a00      	cmp	r2, #0
 80091aa:	d1cb      	bne.n	8009144 <quorem+0x94>
 80091ac:	3c01      	subs	r4, #1
 80091ae:	e7c6      	b.n	800913e <quorem+0x8e>
 80091b0:	6812      	ldr	r2, [r2, #0]
 80091b2:	3b04      	subs	r3, #4
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	d1ef      	bne.n	8009198 <quorem+0xe8>
 80091b8:	3c01      	subs	r4, #1
 80091ba:	e7ea      	b.n	8009192 <quorem+0xe2>
 80091bc:	2000      	movs	r0, #0
 80091be:	e7ee      	b.n	800919e <quorem+0xee>

080091c0 <_dtoa_r>:
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	ed2d 8b02 	vpush	{d8}
 80091c8:	69c7      	ldr	r7, [r0, #28]
 80091ca:	b091      	sub	sp, #68	@ 0x44
 80091cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091d0:	ec55 4b10 	vmov	r4, r5, d0
 80091d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80091d6:	9107      	str	r1, [sp, #28]
 80091d8:	4681      	mov	r9, r0
 80091da:	9209      	str	r2, [sp, #36]	@ 0x24
 80091dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80091de:	b97f      	cbnz	r7, 8009200 <_dtoa_r+0x40>
 80091e0:	2010      	movs	r0, #16
 80091e2:	f000 fd8d 	bl	8009d00 <malloc>
 80091e6:	4602      	mov	r2, r0
 80091e8:	f8c9 001c 	str.w	r0, [r9, #28]
 80091ec:	b920      	cbnz	r0, 80091f8 <_dtoa_r+0x38>
 80091ee:	4ba0      	ldr	r3, [pc, #640]	@ (8009470 <_dtoa_r+0x2b0>)
 80091f0:	21ef      	movs	r1, #239	@ 0xef
 80091f2:	48a0      	ldr	r0, [pc, #640]	@ (8009474 <_dtoa_r+0x2b4>)
 80091f4:	f002 fb74 	bl	800b8e0 <__assert_func>
 80091f8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80091fc:	6007      	str	r7, [r0, #0]
 80091fe:	60c7      	str	r7, [r0, #12]
 8009200:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009204:	6819      	ldr	r1, [r3, #0]
 8009206:	b159      	cbz	r1, 8009220 <_dtoa_r+0x60>
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	604a      	str	r2, [r1, #4]
 800920c:	2301      	movs	r3, #1
 800920e:	4093      	lsls	r3, r2
 8009210:	608b      	str	r3, [r1, #8]
 8009212:	4648      	mov	r0, r9
 8009214:	f000 fe6a 	bl	8009eec <_Bfree>
 8009218:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800921c:	2200      	movs	r2, #0
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	1e2b      	subs	r3, r5, #0
 8009222:	bfbb      	ittet	lt
 8009224:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009228:	9303      	strlt	r3, [sp, #12]
 800922a:	2300      	movge	r3, #0
 800922c:	2201      	movlt	r2, #1
 800922e:	bfac      	ite	ge
 8009230:	6033      	strge	r3, [r6, #0]
 8009232:	6032      	strlt	r2, [r6, #0]
 8009234:	4b90      	ldr	r3, [pc, #576]	@ (8009478 <_dtoa_r+0x2b8>)
 8009236:	9e03      	ldr	r6, [sp, #12]
 8009238:	43b3      	bics	r3, r6
 800923a:	d110      	bne.n	800925e <_dtoa_r+0x9e>
 800923c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800923e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009248:	4323      	orrs	r3, r4
 800924a:	f000 84de 	beq.w	8009c0a <_dtoa_r+0xa4a>
 800924e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009250:	4f8a      	ldr	r7, [pc, #552]	@ (800947c <_dtoa_r+0x2bc>)
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 84e0 	beq.w	8009c18 <_dtoa_r+0xa58>
 8009258:	1cfb      	adds	r3, r7, #3
 800925a:	f000 bcdb 	b.w	8009c14 <_dtoa_r+0xa54>
 800925e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009262:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926a:	d10a      	bne.n	8009282 <_dtoa_r+0xc2>
 800926c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800926e:	2301      	movs	r3, #1
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009274:	b113      	cbz	r3, 800927c <_dtoa_r+0xbc>
 8009276:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009278:	4b81      	ldr	r3, [pc, #516]	@ (8009480 <_dtoa_r+0x2c0>)
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	4f81      	ldr	r7, [pc, #516]	@ (8009484 <_dtoa_r+0x2c4>)
 800927e:	f000 bccb 	b.w	8009c18 <_dtoa_r+0xa58>
 8009282:	aa0e      	add	r2, sp, #56	@ 0x38
 8009284:	a90f      	add	r1, sp, #60	@ 0x3c
 8009286:	4648      	mov	r0, r9
 8009288:	eeb0 0b48 	vmov.f64	d0, d8
 800928c:	f001 f9d2 	bl	800a634 <__d2b>
 8009290:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009296:	9001      	str	r0, [sp, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d045      	beq.n	8009328 <_dtoa_r+0x168>
 800929c:	eeb0 7b48 	vmov.f64	d7, d8
 80092a0:	ee18 1a90 	vmov	r1, s17
 80092a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80092a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80092ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80092b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80092b4:	2500      	movs	r5, #0
 80092b6:	ee07 1a90 	vmov	s15, r1
 80092ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80092be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009458 <_dtoa_r+0x298>
 80092c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80092c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009460 <_dtoa_r+0x2a0>
 80092ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80092ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009468 <_dtoa_r+0x2a8>
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80092da:	eeb0 7b46 	vmov.f64	d7, d6
 80092de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80092e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80092e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80092ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ee:	ee16 8a90 	vmov	r8, s13
 80092f2:	d508      	bpl.n	8009306 <_dtoa_r+0x146>
 80092f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80092f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80092fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009300:	bf18      	it	ne
 8009302:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009306:	f1b8 0f16 	cmp.w	r8, #22
 800930a:	d82b      	bhi.n	8009364 <_dtoa_r+0x1a4>
 800930c:	495e      	ldr	r1, [pc, #376]	@ (8009488 <_dtoa_r+0x2c8>)
 800930e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009312:	ed91 7b00 	vldr	d7, [r1]
 8009316:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931e:	d501      	bpl.n	8009324 <_dtoa_r+0x164>
 8009320:	f108 38ff 	add.w	r8, r8, #4294967295
 8009324:	2100      	movs	r1, #0
 8009326:	e01e      	b.n	8009366 <_dtoa_r+0x1a6>
 8009328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932a:	4413      	add	r3, r2
 800932c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009330:	2920      	cmp	r1, #32
 8009332:	bfc1      	itttt	gt
 8009334:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009338:	408e      	lslgt	r6, r1
 800933a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800933e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009342:	bfd6      	itet	le
 8009344:	f1c1 0120 	rsble	r1, r1, #32
 8009348:	4331      	orrgt	r1, r6
 800934a:	fa04 f101 	lslle.w	r1, r4, r1
 800934e:	ee07 1a90 	vmov	s15, r1
 8009352:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009356:	3b01      	subs	r3, #1
 8009358:	ee17 1a90 	vmov	r1, s15
 800935c:	2501      	movs	r5, #1
 800935e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009362:	e7a8      	b.n	80092b6 <_dtoa_r+0xf6>
 8009364:	2101      	movs	r1, #1
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	1e53      	subs	r3, r2, #1
 800936a:	9306      	str	r3, [sp, #24]
 800936c:	bf45      	ittet	mi
 800936e:	f1c2 0301 	rsbmi	r3, r2, #1
 8009372:	9305      	strmi	r3, [sp, #20]
 8009374:	2300      	movpl	r3, #0
 8009376:	2300      	movmi	r3, #0
 8009378:	bf4c      	ite	mi
 800937a:	9306      	strmi	r3, [sp, #24]
 800937c:	9305      	strpl	r3, [sp, #20]
 800937e:	f1b8 0f00 	cmp.w	r8, #0
 8009382:	910c      	str	r1, [sp, #48]	@ 0x30
 8009384:	db18      	blt.n	80093b8 <_dtoa_r+0x1f8>
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800938c:	4443      	add	r3, r8
 800938e:	9306      	str	r3, [sp, #24]
 8009390:	2300      	movs	r3, #0
 8009392:	9a07      	ldr	r2, [sp, #28]
 8009394:	2a09      	cmp	r2, #9
 8009396:	d849      	bhi.n	800942c <_dtoa_r+0x26c>
 8009398:	2a05      	cmp	r2, #5
 800939a:	bfc4      	itt	gt
 800939c:	3a04      	subgt	r2, #4
 800939e:	9207      	strgt	r2, [sp, #28]
 80093a0:	9a07      	ldr	r2, [sp, #28]
 80093a2:	f1a2 0202 	sub.w	r2, r2, #2
 80093a6:	bfcc      	ite	gt
 80093a8:	2400      	movgt	r4, #0
 80093aa:	2401      	movle	r4, #1
 80093ac:	2a03      	cmp	r2, #3
 80093ae:	d848      	bhi.n	8009442 <_dtoa_r+0x282>
 80093b0:	e8df f002 	tbb	[pc, r2]
 80093b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80093b8:	9b05      	ldr	r3, [sp, #20]
 80093ba:	2200      	movs	r2, #0
 80093bc:	eba3 0308 	sub.w	r3, r3, r8
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80093c4:	f1c8 0300 	rsb	r3, r8, #0
 80093c8:	e7e3      	b.n	8009392 <_dtoa_r+0x1d2>
 80093ca:	2200      	movs	r2, #0
 80093cc:	9208      	str	r2, [sp, #32]
 80093ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d0:	2a00      	cmp	r2, #0
 80093d2:	dc39      	bgt.n	8009448 <_dtoa_r+0x288>
 80093d4:	f04f 0b01 	mov.w	fp, #1
 80093d8:	46da      	mov	sl, fp
 80093da:	465a      	mov	r2, fp
 80093dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80093e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80093e4:	2100      	movs	r1, #0
 80093e6:	2004      	movs	r0, #4
 80093e8:	f100 0614 	add.w	r6, r0, #20
 80093ec:	4296      	cmp	r6, r2
 80093ee:	d930      	bls.n	8009452 <_dtoa_r+0x292>
 80093f0:	6079      	str	r1, [r7, #4]
 80093f2:	4648      	mov	r0, r9
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	f000 fd39 	bl	8009e6c <_Balloc>
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	4607      	mov	r7, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	d146      	bne.n	8009490 <_dtoa_r+0x2d0>
 8009402:	4b22      	ldr	r3, [pc, #136]	@ (800948c <_dtoa_r+0x2cc>)
 8009404:	4602      	mov	r2, r0
 8009406:	f240 11af 	movw	r1, #431	@ 0x1af
 800940a:	e6f2      	b.n	80091f2 <_dtoa_r+0x32>
 800940c:	2201      	movs	r2, #1
 800940e:	e7dd      	b.n	80093cc <_dtoa_r+0x20c>
 8009410:	2200      	movs	r2, #0
 8009412:	9208      	str	r2, [sp, #32]
 8009414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009416:	eb08 0b02 	add.w	fp, r8, r2
 800941a:	f10b 0a01 	add.w	sl, fp, #1
 800941e:	4652      	mov	r2, sl
 8009420:	2a01      	cmp	r2, #1
 8009422:	bfb8      	it	lt
 8009424:	2201      	movlt	r2, #1
 8009426:	e7db      	b.n	80093e0 <_dtoa_r+0x220>
 8009428:	2201      	movs	r2, #1
 800942a:	e7f2      	b.n	8009412 <_dtoa_r+0x252>
 800942c:	2401      	movs	r4, #1
 800942e:	2200      	movs	r2, #0
 8009430:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009434:	f04f 3bff 	mov.w	fp, #4294967295
 8009438:	2100      	movs	r1, #0
 800943a:	46da      	mov	sl, fp
 800943c:	2212      	movs	r2, #18
 800943e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009440:	e7ce      	b.n	80093e0 <_dtoa_r+0x220>
 8009442:	2201      	movs	r2, #1
 8009444:	9208      	str	r2, [sp, #32]
 8009446:	e7f5      	b.n	8009434 <_dtoa_r+0x274>
 8009448:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800944c:	46da      	mov	sl, fp
 800944e:	465a      	mov	r2, fp
 8009450:	e7c6      	b.n	80093e0 <_dtoa_r+0x220>
 8009452:	3101      	adds	r1, #1
 8009454:	0040      	lsls	r0, r0, #1
 8009456:	e7c7      	b.n	80093e8 <_dtoa_r+0x228>
 8009458:	636f4361 	.word	0x636f4361
 800945c:	3fd287a7 	.word	0x3fd287a7
 8009460:	8b60c8b3 	.word	0x8b60c8b3
 8009464:	3fc68a28 	.word	0x3fc68a28
 8009468:	509f79fb 	.word	0x509f79fb
 800946c:	3fd34413 	.word	0x3fd34413
 8009470:	0800ceb2 	.word	0x0800ceb2
 8009474:	0800cec9 	.word	0x0800cec9
 8009478:	7ff00000 	.word	0x7ff00000
 800947c:	0800ceae 	.word	0x0800ceae
 8009480:	0800ce7d 	.word	0x0800ce7d
 8009484:	0800ce7c 	.word	0x0800ce7c
 8009488:	0800cfc0 	.word	0x0800cfc0
 800948c:	0800cf21 	.word	0x0800cf21
 8009490:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009494:	f1ba 0f0e 	cmp.w	sl, #14
 8009498:	6010      	str	r0, [r2, #0]
 800949a:	d86f      	bhi.n	800957c <_dtoa_r+0x3bc>
 800949c:	2c00      	cmp	r4, #0
 800949e:	d06d      	beq.n	800957c <_dtoa_r+0x3bc>
 80094a0:	f1b8 0f00 	cmp.w	r8, #0
 80094a4:	f340 80c2 	ble.w	800962c <_dtoa_r+0x46c>
 80094a8:	4aca      	ldr	r2, [pc, #808]	@ (80097d4 <_dtoa_r+0x614>)
 80094aa:	f008 010f 	and.w	r1, r8, #15
 80094ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80094b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80094b6:	ed92 7b00 	vldr	d7, [r2]
 80094ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 80094be:	f000 80a9 	beq.w	8009614 <_dtoa_r+0x454>
 80094c2:	4ac5      	ldr	r2, [pc, #788]	@ (80097d8 <_dtoa_r+0x618>)
 80094c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80094c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80094cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80094d0:	f001 010f 	and.w	r1, r1, #15
 80094d4:	2203      	movs	r2, #3
 80094d6:	48c0      	ldr	r0, [pc, #768]	@ (80097d8 <_dtoa_r+0x618>)
 80094d8:	2900      	cmp	r1, #0
 80094da:	f040 809d 	bne.w	8009618 <_dtoa_r+0x458>
 80094de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80094e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80094e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80094ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094f0:	2900      	cmp	r1, #0
 80094f2:	f000 80c1 	beq.w	8009678 <_dtoa_r+0x4b8>
 80094f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80094fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80094fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009502:	f140 80b9 	bpl.w	8009678 <_dtoa_r+0x4b8>
 8009506:	f1ba 0f00 	cmp.w	sl, #0
 800950a:	f000 80b5 	beq.w	8009678 <_dtoa_r+0x4b8>
 800950e:	f1bb 0f00 	cmp.w	fp, #0
 8009512:	dd31      	ble.n	8009578 <_dtoa_r+0x3b8>
 8009514:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009518:	ee27 7b06 	vmul.f64	d7, d7, d6
 800951c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009520:	f108 31ff 	add.w	r1, r8, #4294967295
 8009524:	9104      	str	r1, [sp, #16]
 8009526:	3201      	adds	r2, #1
 8009528:	465c      	mov	r4, fp
 800952a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800952e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009532:	ee07 2a90 	vmov	s15, r2
 8009536:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800953a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800953e:	ee15 2a90 	vmov	r2, s11
 8009542:	ec51 0b15 	vmov	r0, r1, d5
 8009546:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800954a:	2c00      	cmp	r4, #0
 800954c:	f040 8098 	bne.w	8009680 <_dtoa_r+0x4c0>
 8009550:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009554:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009558:	ec41 0b17 	vmov	d7, r0, r1
 800955c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009564:	f300 8261 	bgt.w	8009a2a <_dtoa_r+0x86a>
 8009568:	eeb1 7b47 	vneg.f64	d7, d7
 800956c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009574:	f100 80f5 	bmi.w	8009762 <_dtoa_r+0x5a2>
 8009578:	ed8d 8b02 	vstr	d8, [sp, #8]
 800957c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800957e:	2a00      	cmp	r2, #0
 8009580:	f2c0 812c 	blt.w	80097dc <_dtoa_r+0x61c>
 8009584:	f1b8 0f0e 	cmp.w	r8, #14
 8009588:	f300 8128 	bgt.w	80097dc <_dtoa_r+0x61c>
 800958c:	4b91      	ldr	r3, [pc, #580]	@ (80097d4 <_dtoa_r+0x614>)
 800958e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009592:	ed93 6b00 	vldr	d6, [r3]
 8009596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	da03      	bge.n	80095a4 <_dtoa_r+0x3e4>
 800959c:	f1ba 0f00 	cmp.w	sl, #0
 80095a0:	f340 80d2 	ble.w	8009748 <_dtoa_r+0x588>
 80095a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80095a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095ac:	463e      	mov	r6, r7
 80095ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80095b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80095b6:	ee15 3a10 	vmov	r3, s10
 80095ba:	3330      	adds	r3, #48	@ 0x30
 80095bc:	f806 3b01 	strb.w	r3, [r6], #1
 80095c0:	1bf3      	subs	r3, r6, r7
 80095c2:	459a      	cmp	sl, r3
 80095c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80095c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80095cc:	f040 80f8 	bne.w	80097c0 <_dtoa_r+0x600>
 80095d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80095d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80095d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095dc:	f300 80dd 	bgt.w	800979a <_dtoa_r+0x5da>
 80095e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80095e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e8:	d104      	bne.n	80095f4 <_dtoa_r+0x434>
 80095ea:	ee15 3a10 	vmov	r3, s10
 80095ee:	07db      	lsls	r3, r3, #31
 80095f0:	f100 80d3 	bmi.w	800979a <_dtoa_r+0x5da>
 80095f4:	9901      	ldr	r1, [sp, #4]
 80095f6:	4648      	mov	r0, r9
 80095f8:	f000 fc78 	bl	8009eec <_Bfree>
 80095fc:	2300      	movs	r3, #0
 80095fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009600:	7033      	strb	r3, [r6, #0]
 8009602:	f108 0301 	add.w	r3, r8, #1
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 8304 	beq.w	8009c18 <_dtoa_r+0xa58>
 8009610:	601e      	str	r6, [r3, #0]
 8009612:	e301      	b.n	8009c18 <_dtoa_r+0xa58>
 8009614:	2202      	movs	r2, #2
 8009616:	e75e      	b.n	80094d6 <_dtoa_r+0x316>
 8009618:	07cc      	lsls	r4, r1, #31
 800961a:	d504      	bpl.n	8009626 <_dtoa_r+0x466>
 800961c:	ed90 6b00 	vldr	d6, [r0]
 8009620:	3201      	adds	r2, #1
 8009622:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009626:	1049      	asrs	r1, r1, #1
 8009628:	3008      	adds	r0, #8
 800962a:	e755      	b.n	80094d8 <_dtoa_r+0x318>
 800962c:	d022      	beq.n	8009674 <_dtoa_r+0x4b4>
 800962e:	f1c8 0100 	rsb	r1, r8, #0
 8009632:	4a68      	ldr	r2, [pc, #416]	@ (80097d4 <_dtoa_r+0x614>)
 8009634:	f001 000f 	and.w	r0, r1, #15
 8009638:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800963c:	ed92 7b00 	vldr	d7, [r2]
 8009640:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009644:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009648:	4863      	ldr	r0, [pc, #396]	@ (80097d8 <_dtoa_r+0x618>)
 800964a:	1109      	asrs	r1, r1, #4
 800964c:	2400      	movs	r4, #0
 800964e:	2202      	movs	r2, #2
 8009650:	b929      	cbnz	r1, 800965e <_dtoa_r+0x49e>
 8009652:	2c00      	cmp	r4, #0
 8009654:	f43f af49 	beq.w	80094ea <_dtoa_r+0x32a>
 8009658:	ed8d 7b02 	vstr	d7, [sp, #8]
 800965c:	e745      	b.n	80094ea <_dtoa_r+0x32a>
 800965e:	07ce      	lsls	r6, r1, #31
 8009660:	d505      	bpl.n	800966e <_dtoa_r+0x4ae>
 8009662:	ed90 6b00 	vldr	d6, [r0]
 8009666:	3201      	adds	r2, #1
 8009668:	2401      	movs	r4, #1
 800966a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800966e:	1049      	asrs	r1, r1, #1
 8009670:	3008      	adds	r0, #8
 8009672:	e7ed      	b.n	8009650 <_dtoa_r+0x490>
 8009674:	2202      	movs	r2, #2
 8009676:	e738      	b.n	80094ea <_dtoa_r+0x32a>
 8009678:	f8cd 8010 	str.w	r8, [sp, #16]
 800967c:	4654      	mov	r4, sl
 800967e:	e754      	b.n	800952a <_dtoa_r+0x36a>
 8009680:	4a54      	ldr	r2, [pc, #336]	@ (80097d4 <_dtoa_r+0x614>)
 8009682:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009686:	ed12 4b02 	vldr	d4, [r2, #-8]
 800968a:	9a08      	ldr	r2, [sp, #32]
 800968c:	ec41 0b17 	vmov	d7, r0, r1
 8009690:	443c      	add	r4, r7
 8009692:	b34a      	cbz	r2, 80096e8 <_dtoa_r+0x528>
 8009694:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009698:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800969c:	463e      	mov	r6, r7
 800969e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80096a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80096a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80096aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096ae:	ee14 2a90 	vmov	r2, s9
 80096b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80096b6:	3230      	adds	r2, #48	@ 0x30
 80096b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80096bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c4:	f806 2b01 	strb.w	r2, [r6], #1
 80096c8:	d438      	bmi.n	800973c <_dtoa_r+0x57c>
 80096ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 80096ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d6:	d462      	bmi.n	800979e <_dtoa_r+0x5de>
 80096d8:	42a6      	cmp	r6, r4
 80096da:	f43f af4d 	beq.w	8009578 <_dtoa_r+0x3b8>
 80096de:	ee27 7b03 	vmul.f64	d7, d7, d3
 80096e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80096e6:	e7e0      	b.n	80096aa <_dtoa_r+0x4ea>
 80096e8:	4621      	mov	r1, r4
 80096ea:	463e      	mov	r6, r7
 80096ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80096f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096f8:	ee14 2a90 	vmov	r2, s9
 80096fc:	3230      	adds	r2, #48	@ 0x30
 80096fe:	f806 2b01 	strb.w	r2, [r6], #1
 8009702:	42a6      	cmp	r6, r4
 8009704:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009708:	ee36 6b45 	vsub.f64	d6, d6, d5
 800970c:	d119      	bne.n	8009742 <_dtoa_r+0x582>
 800970e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009712:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009716:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	dc3e      	bgt.n	800979e <_dtoa_r+0x5de>
 8009720:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009724:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972c:	f57f af24 	bpl.w	8009578 <_dtoa_r+0x3b8>
 8009730:	460e      	mov	r6, r1
 8009732:	3901      	subs	r1, #1
 8009734:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009738:	2b30      	cmp	r3, #48	@ 0x30
 800973a:	d0f9      	beq.n	8009730 <_dtoa_r+0x570>
 800973c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009740:	e758      	b.n	80095f4 <_dtoa_r+0x434>
 8009742:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009746:	e7d5      	b.n	80096f4 <_dtoa_r+0x534>
 8009748:	d10b      	bne.n	8009762 <_dtoa_r+0x5a2>
 800974a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800974e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009752:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009756:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975e:	f2c0 8161 	blt.w	8009a24 <_dtoa_r+0x864>
 8009762:	2400      	movs	r4, #0
 8009764:	4625      	mov	r5, r4
 8009766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009768:	43db      	mvns	r3, r3
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	463e      	mov	r6, r7
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	4621      	mov	r1, r4
 8009774:	4648      	mov	r0, r9
 8009776:	f000 fbb9 	bl	8009eec <_Bfree>
 800977a:	2d00      	cmp	r5, #0
 800977c:	d0de      	beq.n	800973c <_dtoa_r+0x57c>
 800977e:	f1b8 0f00 	cmp.w	r8, #0
 8009782:	d005      	beq.n	8009790 <_dtoa_r+0x5d0>
 8009784:	45a8      	cmp	r8, r5
 8009786:	d003      	beq.n	8009790 <_dtoa_r+0x5d0>
 8009788:	4641      	mov	r1, r8
 800978a:	4648      	mov	r0, r9
 800978c:	f000 fbae 	bl	8009eec <_Bfree>
 8009790:	4629      	mov	r1, r5
 8009792:	4648      	mov	r0, r9
 8009794:	f000 fbaa 	bl	8009eec <_Bfree>
 8009798:	e7d0      	b.n	800973c <_dtoa_r+0x57c>
 800979a:	f8cd 8010 	str.w	r8, [sp, #16]
 800979e:	4633      	mov	r3, r6
 80097a0:	461e      	mov	r6, r3
 80097a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097a6:	2a39      	cmp	r2, #57	@ 0x39
 80097a8:	d106      	bne.n	80097b8 <_dtoa_r+0x5f8>
 80097aa:	429f      	cmp	r7, r3
 80097ac:	d1f8      	bne.n	80097a0 <_dtoa_r+0x5e0>
 80097ae:	9a04      	ldr	r2, [sp, #16]
 80097b0:	3201      	adds	r2, #1
 80097b2:	9204      	str	r2, [sp, #16]
 80097b4:	2230      	movs	r2, #48	@ 0x30
 80097b6:	703a      	strb	r2, [r7, #0]
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	3201      	adds	r2, #1
 80097bc:	701a      	strb	r2, [r3, #0]
 80097be:	e7bd      	b.n	800973c <_dtoa_r+0x57c>
 80097c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80097c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097cc:	f47f aeef 	bne.w	80095ae <_dtoa_r+0x3ee>
 80097d0:	e710      	b.n	80095f4 <_dtoa_r+0x434>
 80097d2:	bf00      	nop
 80097d4:	0800cfc0 	.word	0x0800cfc0
 80097d8:	0800cf98 	.word	0x0800cf98
 80097dc:	9908      	ldr	r1, [sp, #32]
 80097de:	2900      	cmp	r1, #0
 80097e0:	f000 80e3 	beq.w	80099aa <_dtoa_r+0x7ea>
 80097e4:	9907      	ldr	r1, [sp, #28]
 80097e6:	2901      	cmp	r1, #1
 80097e8:	f300 80c8 	bgt.w	800997c <_dtoa_r+0x7bc>
 80097ec:	2d00      	cmp	r5, #0
 80097ee:	f000 80c1 	beq.w	8009974 <_dtoa_r+0x7b4>
 80097f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80097f6:	9e05      	ldr	r6, [sp, #20]
 80097f8:	461c      	mov	r4, r3
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	9b05      	ldr	r3, [sp, #20]
 80097fe:	4413      	add	r3, r2
 8009800:	9305      	str	r3, [sp, #20]
 8009802:	9b06      	ldr	r3, [sp, #24]
 8009804:	2101      	movs	r1, #1
 8009806:	4413      	add	r3, r2
 8009808:	4648      	mov	r0, r9
 800980a:	9306      	str	r3, [sp, #24]
 800980c:	f000 fc6c 	bl	800a0e8 <__i2b>
 8009810:	9b04      	ldr	r3, [sp, #16]
 8009812:	4605      	mov	r5, r0
 8009814:	b166      	cbz	r6, 8009830 <_dtoa_r+0x670>
 8009816:	9a06      	ldr	r2, [sp, #24]
 8009818:	2a00      	cmp	r2, #0
 800981a:	dd09      	ble.n	8009830 <_dtoa_r+0x670>
 800981c:	42b2      	cmp	r2, r6
 800981e:	9905      	ldr	r1, [sp, #20]
 8009820:	bfa8      	it	ge
 8009822:	4632      	movge	r2, r6
 8009824:	1a89      	subs	r1, r1, r2
 8009826:	9105      	str	r1, [sp, #20]
 8009828:	9906      	ldr	r1, [sp, #24]
 800982a:	1ab6      	subs	r6, r6, r2
 800982c:	1a8a      	subs	r2, r1, r2
 800982e:	9206      	str	r2, [sp, #24]
 8009830:	b1fb      	cbz	r3, 8009872 <_dtoa_r+0x6b2>
 8009832:	9a08      	ldr	r2, [sp, #32]
 8009834:	2a00      	cmp	r2, #0
 8009836:	f000 80bc 	beq.w	80099b2 <_dtoa_r+0x7f2>
 800983a:	b19c      	cbz	r4, 8009864 <_dtoa_r+0x6a4>
 800983c:	4629      	mov	r1, r5
 800983e:	4622      	mov	r2, r4
 8009840:	4648      	mov	r0, r9
 8009842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009844:	f000 fd10 	bl	800a268 <__pow5mult>
 8009848:	9a01      	ldr	r2, [sp, #4]
 800984a:	4601      	mov	r1, r0
 800984c:	4605      	mov	r5, r0
 800984e:	4648      	mov	r0, r9
 8009850:	f000 fc60 	bl	800a114 <__multiply>
 8009854:	9901      	ldr	r1, [sp, #4]
 8009856:	9004      	str	r0, [sp, #16]
 8009858:	4648      	mov	r0, r9
 800985a:	f000 fb47 	bl	8009eec <_Bfree>
 800985e:	9a04      	ldr	r2, [sp, #16]
 8009860:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009862:	9201      	str	r2, [sp, #4]
 8009864:	1b1a      	subs	r2, r3, r4
 8009866:	d004      	beq.n	8009872 <_dtoa_r+0x6b2>
 8009868:	9901      	ldr	r1, [sp, #4]
 800986a:	4648      	mov	r0, r9
 800986c:	f000 fcfc 	bl	800a268 <__pow5mult>
 8009870:	9001      	str	r0, [sp, #4]
 8009872:	2101      	movs	r1, #1
 8009874:	4648      	mov	r0, r9
 8009876:	f000 fc37 	bl	800a0e8 <__i2b>
 800987a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800987c:	4604      	mov	r4, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 81d0 	beq.w	8009c24 <_dtoa_r+0xa64>
 8009884:	461a      	mov	r2, r3
 8009886:	4601      	mov	r1, r0
 8009888:	4648      	mov	r0, r9
 800988a:	f000 fced 	bl	800a268 <__pow5mult>
 800988e:	9b07      	ldr	r3, [sp, #28]
 8009890:	2b01      	cmp	r3, #1
 8009892:	4604      	mov	r4, r0
 8009894:	f300 8095 	bgt.w	80099c2 <_dtoa_r+0x802>
 8009898:	9b02      	ldr	r3, [sp, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 808b 	bne.w	80099b6 <_dtoa_r+0x7f6>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80098a6:	2a00      	cmp	r2, #0
 80098a8:	f040 8087 	bne.w	80099ba <_dtoa_r+0x7fa>
 80098ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80098b0:	0d12      	lsrs	r2, r2, #20
 80098b2:	0512      	lsls	r2, r2, #20
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	f000 8082 	beq.w	80099be <_dtoa_r+0x7fe>
 80098ba:	9b05      	ldr	r3, [sp, #20]
 80098bc:	3301      	adds	r3, #1
 80098be:	9305      	str	r3, [sp, #20]
 80098c0:	9b06      	ldr	r3, [sp, #24]
 80098c2:	3301      	adds	r3, #1
 80098c4:	9306      	str	r3, [sp, #24]
 80098c6:	2301      	movs	r3, #1
 80098c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 81af 	beq.w	8009c30 <_dtoa_r+0xa70>
 80098d2:	6922      	ldr	r2, [r4, #16]
 80098d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80098d8:	6910      	ldr	r0, [r2, #16]
 80098da:	f000 fbb9 	bl	800a050 <__hi0bits>
 80098de:	f1c0 0020 	rsb	r0, r0, #32
 80098e2:	9b06      	ldr	r3, [sp, #24]
 80098e4:	4418      	add	r0, r3
 80098e6:	f010 001f 	ands.w	r0, r0, #31
 80098ea:	d076      	beq.n	80099da <_dtoa_r+0x81a>
 80098ec:	f1c0 0220 	rsb	r2, r0, #32
 80098f0:	2a04      	cmp	r2, #4
 80098f2:	dd69      	ble.n	80099c8 <_dtoa_r+0x808>
 80098f4:	9b05      	ldr	r3, [sp, #20]
 80098f6:	f1c0 001c 	rsb	r0, r0, #28
 80098fa:	4403      	add	r3, r0
 80098fc:	9305      	str	r3, [sp, #20]
 80098fe:	9b06      	ldr	r3, [sp, #24]
 8009900:	4406      	add	r6, r0
 8009902:	4403      	add	r3, r0
 8009904:	9306      	str	r3, [sp, #24]
 8009906:	9b05      	ldr	r3, [sp, #20]
 8009908:	2b00      	cmp	r3, #0
 800990a:	dd05      	ble.n	8009918 <_dtoa_r+0x758>
 800990c:	9901      	ldr	r1, [sp, #4]
 800990e:	461a      	mov	r2, r3
 8009910:	4648      	mov	r0, r9
 8009912:	f000 fd03 	bl	800a31c <__lshift>
 8009916:	9001      	str	r0, [sp, #4]
 8009918:	9b06      	ldr	r3, [sp, #24]
 800991a:	2b00      	cmp	r3, #0
 800991c:	dd05      	ble.n	800992a <_dtoa_r+0x76a>
 800991e:	4621      	mov	r1, r4
 8009920:	461a      	mov	r2, r3
 8009922:	4648      	mov	r0, r9
 8009924:	f000 fcfa 	bl	800a31c <__lshift>
 8009928:	4604      	mov	r4, r0
 800992a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800992c:	2b00      	cmp	r3, #0
 800992e:	d056      	beq.n	80099de <_dtoa_r+0x81e>
 8009930:	9801      	ldr	r0, [sp, #4]
 8009932:	4621      	mov	r1, r4
 8009934:	f000 fd5e 	bl	800a3f4 <__mcmp>
 8009938:	2800      	cmp	r0, #0
 800993a:	da50      	bge.n	80099de <_dtoa_r+0x81e>
 800993c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	9901      	ldr	r1, [sp, #4]
 8009944:	2300      	movs	r3, #0
 8009946:	220a      	movs	r2, #10
 8009948:	4648      	mov	r0, r9
 800994a:	f000 faf1 	bl	8009f30 <__multadd>
 800994e:	9b08      	ldr	r3, [sp, #32]
 8009950:	9001      	str	r0, [sp, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 816e 	beq.w	8009c34 <_dtoa_r+0xa74>
 8009958:	4629      	mov	r1, r5
 800995a:	2300      	movs	r3, #0
 800995c:	220a      	movs	r2, #10
 800995e:	4648      	mov	r0, r9
 8009960:	f000 fae6 	bl	8009f30 <__multadd>
 8009964:	f1bb 0f00 	cmp.w	fp, #0
 8009968:	4605      	mov	r5, r0
 800996a:	dc64      	bgt.n	8009a36 <_dtoa_r+0x876>
 800996c:	9b07      	ldr	r3, [sp, #28]
 800996e:	2b02      	cmp	r3, #2
 8009970:	dc3e      	bgt.n	80099f0 <_dtoa_r+0x830>
 8009972:	e060      	b.n	8009a36 <_dtoa_r+0x876>
 8009974:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009976:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800997a:	e73c      	b.n	80097f6 <_dtoa_r+0x636>
 800997c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009980:	42a3      	cmp	r3, r4
 8009982:	bfbf      	itttt	lt
 8009984:	1ae2      	sublt	r2, r4, r3
 8009986:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009988:	189b      	addlt	r3, r3, r2
 800998a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800998c:	bfae      	itee	ge
 800998e:	1b1c      	subge	r4, r3, r4
 8009990:	4623      	movlt	r3, r4
 8009992:	2400      	movlt	r4, #0
 8009994:	f1ba 0f00 	cmp.w	sl, #0
 8009998:	bfb5      	itete	lt
 800999a:	9a05      	ldrlt	r2, [sp, #20]
 800999c:	9e05      	ldrge	r6, [sp, #20]
 800999e:	eba2 060a 	sublt.w	r6, r2, sl
 80099a2:	4652      	movge	r2, sl
 80099a4:	bfb8      	it	lt
 80099a6:	2200      	movlt	r2, #0
 80099a8:	e727      	b.n	80097fa <_dtoa_r+0x63a>
 80099aa:	9e05      	ldr	r6, [sp, #20]
 80099ac:	9d08      	ldr	r5, [sp, #32]
 80099ae:	461c      	mov	r4, r3
 80099b0:	e730      	b.n	8009814 <_dtoa_r+0x654>
 80099b2:	461a      	mov	r2, r3
 80099b4:	e758      	b.n	8009868 <_dtoa_r+0x6a8>
 80099b6:	2300      	movs	r3, #0
 80099b8:	e786      	b.n	80098c8 <_dtoa_r+0x708>
 80099ba:	9b02      	ldr	r3, [sp, #8]
 80099bc:	e784      	b.n	80098c8 <_dtoa_r+0x708>
 80099be:	920b      	str	r2, [sp, #44]	@ 0x2c
 80099c0:	e783      	b.n	80098ca <_dtoa_r+0x70a>
 80099c2:	2300      	movs	r3, #0
 80099c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099c6:	e784      	b.n	80098d2 <_dtoa_r+0x712>
 80099c8:	d09d      	beq.n	8009906 <_dtoa_r+0x746>
 80099ca:	9b05      	ldr	r3, [sp, #20]
 80099cc:	321c      	adds	r2, #28
 80099ce:	4413      	add	r3, r2
 80099d0:	9305      	str	r3, [sp, #20]
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	4416      	add	r6, r2
 80099d6:	4413      	add	r3, r2
 80099d8:	e794      	b.n	8009904 <_dtoa_r+0x744>
 80099da:	4602      	mov	r2, r0
 80099dc:	e7f5      	b.n	80099ca <_dtoa_r+0x80a>
 80099de:	f1ba 0f00 	cmp.w	sl, #0
 80099e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80099e6:	46d3      	mov	fp, sl
 80099e8:	dc21      	bgt.n	8009a2e <_dtoa_r+0x86e>
 80099ea:	9b07      	ldr	r3, [sp, #28]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	dd1e      	ble.n	8009a2e <_dtoa_r+0x86e>
 80099f0:	f1bb 0f00 	cmp.w	fp, #0
 80099f4:	f47f aeb7 	bne.w	8009766 <_dtoa_r+0x5a6>
 80099f8:	4621      	mov	r1, r4
 80099fa:	465b      	mov	r3, fp
 80099fc:	2205      	movs	r2, #5
 80099fe:	4648      	mov	r0, r9
 8009a00:	f000 fa96 	bl	8009f30 <__multadd>
 8009a04:	4601      	mov	r1, r0
 8009a06:	4604      	mov	r4, r0
 8009a08:	9801      	ldr	r0, [sp, #4]
 8009a0a:	f000 fcf3 	bl	800a3f4 <__mcmp>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f77f aea9 	ble.w	8009766 <_dtoa_r+0x5a6>
 8009a14:	463e      	mov	r6, r7
 8009a16:	2331      	movs	r3, #49	@ 0x31
 8009a18:	f806 3b01 	strb.w	r3, [r6], #1
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	9304      	str	r3, [sp, #16]
 8009a22:	e6a4      	b.n	800976e <_dtoa_r+0x5ae>
 8009a24:	f8cd 8010 	str.w	r8, [sp, #16]
 8009a28:	4654      	mov	r4, sl
 8009a2a:	4625      	mov	r5, r4
 8009a2c:	e7f2      	b.n	8009a14 <_dtoa_r+0x854>
 8009a2e:	9b08      	ldr	r3, [sp, #32]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8103 	beq.w	8009c3c <_dtoa_r+0xa7c>
 8009a36:	2e00      	cmp	r6, #0
 8009a38:	dd05      	ble.n	8009a46 <_dtoa_r+0x886>
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4648      	mov	r0, r9
 8009a40:	f000 fc6c 	bl	800a31c <__lshift>
 8009a44:	4605      	mov	r5, r0
 8009a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d058      	beq.n	8009afe <_dtoa_r+0x93e>
 8009a4c:	6869      	ldr	r1, [r5, #4]
 8009a4e:	4648      	mov	r0, r9
 8009a50:	f000 fa0c 	bl	8009e6c <_Balloc>
 8009a54:	4606      	mov	r6, r0
 8009a56:	b928      	cbnz	r0, 8009a64 <_dtoa_r+0x8a4>
 8009a58:	4b82      	ldr	r3, [pc, #520]	@ (8009c64 <_dtoa_r+0xaa4>)
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a60:	f7ff bbc7 	b.w	80091f2 <_dtoa_r+0x32>
 8009a64:	692a      	ldr	r2, [r5, #16]
 8009a66:	3202      	adds	r2, #2
 8009a68:	0092      	lsls	r2, r2, #2
 8009a6a:	f105 010c 	add.w	r1, r5, #12
 8009a6e:	300c      	adds	r0, #12
 8009a70:	f001 ff1e 	bl	800b8b0 <memcpy>
 8009a74:	2201      	movs	r2, #1
 8009a76:	4631      	mov	r1, r6
 8009a78:	4648      	mov	r0, r9
 8009a7a:	f000 fc4f 	bl	800a31c <__lshift>
 8009a7e:	1c7b      	adds	r3, r7, #1
 8009a80:	9305      	str	r3, [sp, #20]
 8009a82:	eb07 030b 	add.w	r3, r7, fp
 8009a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	46a8      	mov	r8, r5
 8009a90:	9308      	str	r3, [sp, #32]
 8009a92:	4605      	mov	r5, r0
 8009a94:	9b05      	ldr	r3, [sp, #20]
 8009a96:	9801      	ldr	r0, [sp, #4]
 8009a98:	4621      	mov	r1, r4
 8009a9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009a9e:	f7ff fb07 	bl	80090b0 <quorem>
 8009aa2:	4641      	mov	r1, r8
 8009aa4:	9002      	str	r0, [sp, #8]
 8009aa6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009aaa:	9801      	ldr	r0, [sp, #4]
 8009aac:	f000 fca2 	bl	800a3f4 <__mcmp>
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	9006      	str	r0, [sp, #24]
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4648      	mov	r0, r9
 8009ab8:	f000 fcb8 	bl	800a42c <__mdiff>
 8009abc:	68c2      	ldr	r2, [r0, #12]
 8009abe:	4606      	mov	r6, r0
 8009ac0:	b9fa      	cbnz	r2, 8009b02 <_dtoa_r+0x942>
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	9801      	ldr	r0, [sp, #4]
 8009ac6:	f000 fc95 	bl	800a3f4 <__mcmp>
 8009aca:	4602      	mov	r2, r0
 8009acc:	4631      	mov	r1, r6
 8009ace:	4648      	mov	r0, r9
 8009ad0:	920a      	str	r2, [sp, #40]	@ 0x28
 8009ad2:	f000 fa0b 	bl	8009eec <_Bfree>
 8009ad6:	9b07      	ldr	r3, [sp, #28]
 8009ad8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ada:	9e05      	ldr	r6, [sp, #20]
 8009adc:	ea43 0102 	orr.w	r1, r3, r2
 8009ae0:	9b08      	ldr	r3, [sp, #32]
 8009ae2:	4319      	orrs	r1, r3
 8009ae4:	d10f      	bne.n	8009b06 <_dtoa_r+0x946>
 8009ae6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009aea:	d028      	beq.n	8009b3e <_dtoa_r+0x97e>
 8009aec:	9b06      	ldr	r3, [sp, #24]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	dd02      	ble.n	8009af8 <_dtoa_r+0x938>
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009af8:	f88b a000 	strb.w	sl, [fp]
 8009afc:	e639      	b.n	8009772 <_dtoa_r+0x5b2>
 8009afe:	4628      	mov	r0, r5
 8009b00:	e7bd      	b.n	8009a7e <_dtoa_r+0x8be>
 8009b02:	2201      	movs	r2, #1
 8009b04:	e7e2      	b.n	8009acc <_dtoa_r+0x90c>
 8009b06:	9b06      	ldr	r3, [sp, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	db04      	blt.n	8009b16 <_dtoa_r+0x956>
 8009b0c:	9907      	ldr	r1, [sp, #28]
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	9908      	ldr	r1, [sp, #32]
 8009b12:	430b      	orrs	r3, r1
 8009b14:	d120      	bne.n	8009b58 <_dtoa_r+0x998>
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	ddee      	ble.n	8009af8 <_dtoa_r+0x938>
 8009b1a:	9901      	ldr	r1, [sp, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	4648      	mov	r0, r9
 8009b20:	f000 fbfc 	bl	800a31c <__lshift>
 8009b24:	4621      	mov	r1, r4
 8009b26:	9001      	str	r0, [sp, #4]
 8009b28:	f000 fc64 	bl	800a3f4 <__mcmp>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	dc03      	bgt.n	8009b38 <_dtoa_r+0x978>
 8009b30:	d1e2      	bne.n	8009af8 <_dtoa_r+0x938>
 8009b32:	f01a 0f01 	tst.w	sl, #1
 8009b36:	d0df      	beq.n	8009af8 <_dtoa_r+0x938>
 8009b38:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009b3c:	d1d9      	bne.n	8009af2 <_dtoa_r+0x932>
 8009b3e:	2339      	movs	r3, #57	@ 0x39
 8009b40:	f88b 3000 	strb.w	r3, [fp]
 8009b44:	4633      	mov	r3, r6
 8009b46:	461e      	mov	r6, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b4e:	2a39      	cmp	r2, #57	@ 0x39
 8009b50:	d053      	beq.n	8009bfa <_dtoa_r+0xa3a>
 8009b52:	3201      	adds	r2, #1
 8009b54:	701a      	strb	r2, [r3, #0]
 8009b56:	e60c      	b.n	8009772 <_dtoa_r+0x5b2>
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	dd07      	ble.n	8009b6c <_dtoa_r+0x9ac>
 8009b5c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009b60:	d0ed      	beq.n	8009b3e <_dtoa_r+0x97e>
 8009b62:	f10a 0301 	add.w	r3, sl, #1
 8009b66:	f88b 3000 	strb.w	r3, [fp]
 8009b6a:	e602      	b.n	8009772 <_dtoa_r+0x5b2>
 8009b6c:	9b05      	ldr	r3, [sp, #20]
 8009b6e:	9a05      	ldr	r2, [sp, #20]
 8009b70:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d029      	beq.n	8009bce <_dtoa_r+0xa0e>
 8009b7a:	9901      	ldr	r1, [sp, #4]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	220a      	movs	r2, #10
 8009b80:	4648      	mov	r0, r9
 8009b82:	f000 f9d5 	bl	8009f30 <__multadd>
 8009b86:	45a8      	cmp	r8, r5
 8009b88:	9001      	str	r0, [sp, #4]
 8009b8a:	f04f 0300 	mov.w	r3, #0
 8009b8e:	f04f 020a 	mov.w	r2, #10
 8009b92:	4641      	mov	r1, r8
 8009b94:	4648      	mov	r0, r9
 8009b96:	d107      	bne.n	8009ba8 <_dtoa_r+0x9e8>
 8009b98:	f000 f9ca 	bl	8009f30 <__multadd>
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	9b05      	ldr	r3, [sp, #20]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	9305      	str	r3, [sp, #20]
 8009ba6:	e775      	b.n	8009a94 <_dtoa_r+0x8d4>
 8009ba8:	f000 f9c2 	bl	8009f30 <__multadd>
 8009bac:	4629      	mov	r1, r5
 8009bae:	4680      	mov	r8, r0
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	220a      	movs	r2, #10
 8009bb4:	4648      	mov	r0, r9
 8009bb6:	f000 f9bb 	bl	8009f30 <__multadd>
 8009bba:	4605      	mov	r5, r0
 8009bbc:	e7f0      	b.n	8009ba0 <_dtoa_r+0x9e0>
 8009bbe:	f1bb 0f00 	cmp.w	fp, #0
 8009bc2:	bfcc      	ite	gt
 8009bc4:	465e      	movgt	r6, fp
 8009bc6:	2601      	movle	r6, #1
 8009bc8:	443e      	add	r6, r7
 8009bca:	f04f 0800 	mov.w	r8, #0
 8009bce:	9901      	ldr	r1, [sp, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	4648      	mov	r0, r9
 8009bd4:	f000 fba2 	bl	800a31c <__lshift>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	9001      	str	r0, [sp, #4]
 8009bdc:	f000 fc0a 	bl	800a3f4 <__mcmp>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	dcaf      	bgt.n	8009b44 <_dtoa_r+0x984>
 8009be4:	d102      	bne.n	8009bec <_dtoa_r+0xa2c>
 8009be6:	f01a 0f01 	tst.w	sl, #1
 8009bea:	d1ab      	bne.n	8009b44 <_dtoa_r+0x984>
 8009bec:	4633      	mov	r3, r6
 8009bee:	461e      	mov	r6, r3
 8009bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bf4:	2a30      	cmp	r2, #48	@ 0x30
 8009bf6:	d0fa      	beq.n	8009bee <_dtoa_r+0xa2e>
 8009bf8:	e5bb      	b.n	8009772 <_dtoa_r+0x5b2>
 8009bfa:	429f      	cmp	r7, r3
 8009bfc:	d1a3      	bne.n	8009b46 <_dtoa_r+0x986>
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	3301      	adds	r3, #1
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	2331      	movs	r3, #49	@ 0x31
 8009c06:	703b      	strb	r3, [r7, #0]
 8009c08:	e5b3      	b.n	8009772 <_dtoa_r+0x5b2>
 8009c0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c0c:	4f16      	ldr	r7, [pc, #88]	@ (8009c68 <_dtoa_r+0xaa8>)
 8009c0e:	b11b      	cbz	r3, 8009c18 <_dtoa_r+0xa58>
 8009c10:	f107 0308 	add.w	r3, r7, #8
 8009c14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	4638      	mov	r0, r7
 8009c1a:	b011      	add	sp, #68	@ 0x44
 8009c1c:	ecbd 8b02 	vpop	{d8}
 8009c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	f77f ae36 	ble.w	8009898 <_dtoa_r+0x6d8>
 8009c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c30:	2001      	movs	r0, #1
 8009c32:	e656      	b.n	80098e2 <_dtoa_r+0x722>
 8009c34:	f1bb 0f00 	cmp.w	fp, #0
 8009c38:	f77f aed7 	ble.w	80099ea <_dtoa_r+0x82a>
 8009c3c:	463e      	mov	r6, r7
 8009c3e:	9801      	ldr	r0, [sp, #4]
 8009c40:	4621      	mov	r1, r4
 8009c42:	f7ff fa35 	bl	80090b0 <quorem>
 8009c46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009c4a:	f806 ab01 	strb.w	sl, [r6], #1
 8009c4e:	1bf2      	subs	r2, r6, r7
 8009c50:	4593      	cmp	fp, r2
 8009c52:	ddb4      	ble.n	8009bbe <_dtoa_r+0x9fe>
 8009c54:	9901      	ldr	r1, [sp, #4]
 8009c56:	2300      	movs	r3, #0
 8009c58:	220a      	movs	r2, #10
 8009c5a:	4648      	mov	r0, r9
 8009c5c:	f000 f968 	bl	8009f30 <__multadd>
 8009c60:	9001      	str	r0, [sp, #4]
 8009c62:	e7ec      	b.n	8009c3e <_dtoa_r+0xa7e>
 8009c64:	0800cf21 	.word	0x0800cf21
 8009c68:	0800cea5 	.word	0x0800cea5

08009c6c <_free_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4605      	mov	r5, r0
 8009c70:	2900      	cmp	r1, #0
 8009c72:	d041      	beq.n	8009cf8 <_free_r+0x8c>
 8009c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c78:	1f0c      	subs	r4, r1, #4
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	bfb8      	it	lt
 8009c7e:	18e4      	addlt	r4, r4, r3
 8009c80:	f000 f8e8 	bl	8009e54 <__malloc_lock>
 8009c84:	4a1d      	ldr	r2, [pc, #116]	@ (8009cfc <_free_r+0x90>)
 8009c86:	6813      	ldr	r3, [r2, #0]
 8009c88:	b933      	cbnz	r3, 8009c98 <_free_r+0x2c>
 8009c8a:	6063      	str	r3, [r4, #4]
 8009c8c:	6014      	str	r4, [r2, #0]
 8009c8e:	4628      	mov	r0, r5
 8009c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c94:	f000 b8e4 	b.w	8009e60 <__malloc_unlock>
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	d908      	bls.n	8009cae <_free_r+0x42>
 8009c9c:	6820      	ldr	r0, [r4, #0]
 8009c9e:	1821      	adds	r1, r4, r0
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	bf01      	itttt	eq
 8009ca4:	6819      	ldreq	r1, [r3, #0]
 8009ca6:	685b      	ldreq	r3, [r3, #4]
 8009ca8:	1809      	addeq	r1, r1, r0
 8009caa:	6021      	streq	r1, [r4, #0]
 8009cac:	e7ed      	b.n	8009c8a <_free_r+0x1e>
 8009cae:	461a      	mov	r2, r3
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	b10b      	cbz	r3, 8009cb8 <_free_r+0x4c>
 8009cb4:	42a3      	cmp	r3, r4
 8009cb6:	d9fa      	bls.n	8009cae <_free_r+0x42>
 8009cb8:	6811      	ldr	r1, [r2, #0]
 8009cba:	1850      	adds	r0, r2, r1
 8009cbc:	42a0      	cmp	r0, r4
 8009cbe:	d10b      	bne.n	8009cd8 <_free_r+0x6c>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	4401      	add	r1, r0
 8009cc4:	1850      	adds	r0, r2, r1
 8009cc6:	4283      	cmp	r3, r0
 8009cc8:	6011      	str	r1, [r2, #0]
 8009cca:	d1e0      	bne.n	8009c8e <_free_r+0x22>
 8009ccc:	6818      	ldr	r0, [r3, #0]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	6053      	str	r3, [r2, #4]
 8009cd2:	4408      	add	r0, r1
 8009cd4:	6010      	str	r0, [r2, #0]
 8009cd6:	e7da      	b.n	8009c8e <_free_r+0x22>
 8009cd8:	d902      	bls.n	8009ce0 <_free_r+0x74>
 8009cda:	230c      	movs	r3, #12
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	e7d6      	b.n	8009c8e <_free_r+0x22>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	1821      	adds	r1, r4, r0
 8009ce4:	428b      	cmp	r3, r1
 8009ce6:	bf04      	itt	eq
 8009ce8:	6819      	ldreq	r1, [r3, #0]
 8009cea:	685b      	ldreq	r3, [r3, #4]
 8009cec:	6063      	str	r3, [r4, #4]
 8009cee:	bf04      	itt	eq
 8009cf0:	1809      	addeq	r1, r1, r0
 8009cf2:	6021      	streq	r1, [r4, #0]
 8009cf4:	6054      	str	r4, [r2, #4]
 8009cf6:	e7ca      	b.n	8009c8e <_free_r+0x22>
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
 8009cfa:	bf00      	nop
 8009cfc:	24000638 	.word	0x24000638

08009d00 <malloc>:
 8009d00:	4b02      	ldr	r3, [pc, #8]	@ (8009d0c <malloc+0xc>)
 8009d02:	4601      	mov	r1, r0
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	f000 b825 	b.w	8009d54 <_malloc_r>
 8009d0a:	bf00      	nop
 8009d0c:	2400001c 	.word	0x2400001c

08009d10 <sbrk_aligned>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4e0f      	ldr	r6, [pc, #60]	@ (8009d50 <sbrk_aligned+0x40>)
 8009d14:	460c      	mov	r4, r1
 8009d16:	6831      	ldr	r1, [r6, #0]
 8009d18:	4605      	mov	r5, r0
 8009d1a:	b911      	cbnz	r1, 8009d22 <sbrk_aligned+0x12>
 8009d1c:	f001 fdb8 	bl	800b890 <_sbrk_r>
 8009d20:	6030      	str	r0, [r6, #0]
 8009d22:	4621      	mov	r1, r4
 8009d24:	4628      	mov	r0, r5
 8009d26:	f001 fdb3 	bl	800b890 <_sbrk_r>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	d103      	bne.n	8009d36 <sbrk_aligned+0x26>
 8009d2e:	f04f 34ff 	mov.w	r4, #4294967295
 8009d32:	4620      	mov	r0, r4
 8009d34:	bd70      	pop	{r4, r5, r6, pc}
 8009d36:	1cc4      	adds	r4, r0, #3
 8009d38:	f024 0403 	bic.w	r4, r4, #3
 8009d3c:	42a0      	cmp	r0, r4
 8009d3e:	d0f8      	beq.n	8009d32 <sbrk_aligned+0x22>
 8009d40:	1a21      	subs	r1, r4, r0
 8009d42:	4628      	mov	r0, r5
 8009d44:	f001 fda4 	bl	800b890 <_sbrk_r>
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d1f2      	bne.n	8009d32 <sbrk_aligned+0x22>
 8009d4c:	e7ef      	b.n	8009d2e <sbrk_aligned+0x1e>
 8009d4e:	bf00      	nop
 8009d50:	24000634 	.word	0x24000634

08009d54 <_malloc_r>:
 8009d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d58:	1ccd      	adds	r5, r1, #3
 8009d5a:	f025 0503 	bic.w	r5, r5, #3
 8009d5e:	3508      	adds	r5, #8
 8009d60:	2d0c      	cmp	r5, #12
 8009d62:	bf38      	it	cc
 8009d64:	250c      	movcc	r5, #12
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	4606      	mov	r6, r0
 8009d6a:	db01      	blt.n	8009d70 <_malloc_r+0x1c>
 8009d6c:	42a9      	cmp	r1, r5
 8009d6e:	d904      	bls.n	8009d7a <_malloc_r+0x26>
 8009d70:	230c      	movs	r3, #12
 8009d72:	6033      	str	r3, [r6, #0]
 8009d74:	2000      	movs	r0, #0
 8009d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e50 <_malloc_r+0xfc>
 8009d7e:	f000 f869 	bl	8009e54 <__malloc_lock>
 8009d82:	f8d8 3000 	ldr.w	r3, [r8]
 8009d86:	461c      	mov	r4, r3
 8009d88:	bb44      	cbnz	r4, 8009ddc <_malloc_r+0x88>
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f7ff ffbf 	bl	8009d10 <sbrk_aligned>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	4604      	mov	r4, r0
 8009d96:	d158      	bne.n	8009e4a <_malloc_r+0xf6>
 8009d98:	f8d8 4000 	ldr.w	r4, [r8]
 8009d9c:	4627      	mov	r7, r4
 8009d9e:	2f00      	cmp	r7, #0
 8009da0:	d143      	bne.n	8009e2a <_malloc_r+0xd6>
 8009da2:	2c00      	cmp	r4, #0
 8009da4:	d04b      	beq.n	8009e3e <_malloc_r+0xea>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	4639      	mov	r1, r7
 8009daa:	4630      	mov	r0, r6
 8009dac:	eb04 0903 	add.w	r9, r4, r3
 8009db0:	f001 fd6e 	bl	800b890 <_sbrk_r>
 8009db4:	4581      	cmp	r9, r0
 8009db6:	d142      	bne.n	8009e3e <_malloc_r+0xea>
 8009db8:	6821      	ldr	r1, [r4, #0]
 8009dba:	1a6d      	subs	r5, r5, r1
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f7ff ffa6 	bl	8009d10 <sbrk_aligned>
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d03a      	beq.n	8009e3e <_malloc_r+0xea>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	442b      	add	r3, r5
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	bb62      	cbnz	r2, 8009e30 <_malloc_r+0xdc>
 8009dd6:	f8c8 7000 	str.w	r7, [r8]
 8009dda:	e00f      	b.n	8009dfc <_malloc_r+0xa8>
 8009ddc:	6822      	ldr	r2, [r4, #0]
 8009dde:	1b52      	subs	r2, r2, r5
 8009de0:	d420      	bmi.n	8009e24 <_malloc_r+0xd0>
 8009de2:	2a0b      	cmp	r2, #11
 8009de4:	d917      	bls.n	8009e16 <_malloc_r+0xc2>
 8009de6:	1961      	adds	r1, r4, r5
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	6025      	str	r5, [r4, #0]
 8009dec:	bf18      	it	ne
 8009dee:	6059      	strne	r1, [r3, #4]
 8009df0:	6863      	ldr	r3, [r4, #4]
 8009df2:	bf08      	it	eq
 8009df4:	f8c8 1000 	streq.w	r1, [r8]
 8009df8:	5162      	str	r2, [r4, r5]
 8009dfa:	604b      	str	r3, [r1, #4]
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f000 f82f 	bl	8009e60 <__malloc_unlock>
 8009e02:	f104 000b 	add.w	r0, r4, #11
 8009e06:	1d23      	adds	r3, r4, #4
 8009e08:	f020 0007 	bic.w	r0, r0, #7
 8009e0c:	1ac2      	subs	r2, r0, r3
 8009e0e:	bf1c      	itt	ne
 8009e10:	1a1b      	subne	r3, r3, r0
 8009e12:	50a3      	strne	r3, [r4, r2]
 8009e14:	e7af      	b.n	8009d76 <_malloc_r+0x22>
 8009e16:	6862      	ldr	r2, [r4, #4]
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	bf0c      	ite	eq
 8009e1c:	f8c8 2000 	streq.w	r2, [r8]
 8009e20:	605a      	strne	r2, [r3, #4]
 8009e22:	e7eb      	b.n	8009dfc <_malloc_r+0xa8>
 8009e24:	4623      	mov	r3, r4
 8009e26:	6864      	ldr	r4, [r4, #4]
 8009e28:	e7ae      	b.n	8009d88 <_malloc_r+0x34>
 8009e2a:	463c      	mov	r4, r7
 8009e2c:	687f      	ldr	r7, [r7, #4]
 8009e2e:	e7b6      	b.n	8009d9e <_malloc_r+0x4a>
 8009e30:	461a      	mov	r2, r3
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	42a3      	cmp	r3, r4
 8009e36:	d1fb      	bne.n	8009e30 <_malloc_r+0xdc>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	6053      	str	r3, [r2, #4]
 8009e3c:	e7de      	b.n	8009dfc <_malloc_r+0xa8>
 8009e3e:	230c      	movs	r3, #12
 8009e40:	6033      	str	r3, [r6, #0]
 8009e42:	4630      	mov	r0, r6
 8009e44:	f000 f80c 	bl	8009e60 <__malloc_unlock>
 8009e48:	e794      	b.n	8009d74 <_malloc_r+0x20>
 8009e4a:	6005      	str	r5, [r0, #0]
 8009e4c:	e7d6      	b.n	8009dfc <_malloc_r+0xa8>
 8009e4e:	bf00      	nop
 8009e50:	24000638 	.word	0x24000638

08009e54 <__malloc_lock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	@ (8009e5c <__malloc_lock+0x8>)
 8009e56:	f7ff b922 	b.w	800909e <__retarget_lock_acquire_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	24000630 	.word	0x24000630

08009e60 <__malloc_unlock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	@ (8009e68 <__malloc_unlock+0x8>)
 8009e62:	f7ff b91d 	b.w	80090a0 <__retarget_lock_release_recursive>
 8009e66:	bf00      	nop
 8009e68:	24000630 	.word	0x24000630

08009e6c <_Balloc>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	69c6      	ldr	r6, [r0, #28]
 8009e70:	4604      	mov	r4, r0
 8009e72:	460d      	mov	r5, r1
 8009e74:	b976      	cbnz	r6, 8009e94 <_Balloc+0x28>
 8009e76:	2010      	movs	r0, #16
 8009e78:	f7ff ff42 	bl	8009d00 <malloc>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	61e0      	str	r0, [r4, #28]
 8009e80:	b920      	cbnz	r0, 8009e8c <_Balloc+0x20>
 8009e82:	4b18      	ldr	r3, [pc, #96]	@ (8009ee4 <_Balloc+0x78>)
 8009e84:	4818      	ldr	r0, [pc, #96]	@ (8009ee8 <_Balloc+0x7c>)
 8009e86:	216b      	movs	r1, #107	@ 0x6b
 8009e88:	f001 fd2a 	bl	800b8e0 <__assert_func>
 8009e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e90:	6006      	str	r6, [r0, #0]
 8009e92:	60c6      	str	r6, [r0, #12]
 8009e94:	69e6      	ldr	r6, [r4, #28]
 8009e96:	68f3      	ldr	r3, [r6, #12]
 8009e98:	b183      	cbz	r3, 8009ebc <_Balloc+0x50>
 8009e9a:	69e3      	ldr	r3, [r4, #28]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ea2:	b9b8      	cbnz	r0, 8009ed4 <_Balloc+0x68>
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	fa01 f605 	lsl.w	r6, r1, r5
 8009eaa:	1d72      	adds	r2, r6, #5
 8009eac:	0092      	lsls	r2, r2, #2
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f001 fd34 	bl	800b91c <_calloc_r>
 8009eb4:	b160      	cbz	r0, 8009ed0 <_Balloc+0x64>
 8009eb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eba:	e00e      	b.n	8009eda <_Balloc+0x6e>
 8009ebc:	2221      	movs	r2, #33	@ 0x21
 8009ebe:	2104      	movs	r1, #4
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f001 fd2b 	bl	800b91c <_calloc_r>
 8009ec6:	69e3      	ldr	r3, [r4, #28]
 8009ec8:	60f0      	str	r0, [r6, #12]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e4      	bne.n	8009e9a <_Balloc+0x2e>
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	6802      	ldr	r2, [r0, #0]
 8009ed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eda:	2300      	movs	r3, #0
 8009edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ee0:	e7f7      	b.n	8009ed2 <_Balloc+0x66>
 8009ee2:	bf00      	nop
 8009ee4:	0800ceb2 	.word	0x0800ceb2
 8009ee8:	0800cf32 	.word	0x0800cf32

08009eec <_Bfree>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	69c6      	ldr	r6, [r0, #28]
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	b976      	cbnz	r6, 8009f14 <_Bfree+0x28>
 8009ef6:	2010      	movs	r0, #16
 8009ef8:	f7ff ff02 	bl	8009d00 <malloc>
 8009efc:	4602      	mov	r2, r0
 8009efe:	61e8      	str	r0, [r5, #28]
 8009f00:	b920      	cbnz	r0, 8009f0c <_Bfree+0x20>
 8009f02:	4b09      	ldr	r3, [pc, #36]	@ (8009f28 <_Bfree+0x3c>)
 8009f04:	4809      	ldr	r0, [pc, #36]	@ (8009f2c <_Bfree+0x40>)
 8009f06:	218f      	movs	r1, #143	@ 0x8f
 8009f08:	f001 fcea 	bl	800b8e0 <__assert_func>
 8009f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f10:	6006      	str	r6, [r0, #0]
 8009f12:	60c6      	str	r6, [r0, #12]
 8009f14:	b13c      	cbz	r4, 8009f26 <_Bfree+0x3a>
 8009f16:	69eb      	ldr	r3, [r5, #28]
 8009f18:	6862      	ldr	r2, [r4, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f20:	6021      	str	r1, [r4, #0]
 8009f22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	0800ceb2 	.word	0x0800ceb2
 8009f2c:	0800cf32 	.word	0x0800cf32

08009f30 <__multadd>:
 8009f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f34:	690d      	ldr	r5, [r1, #16]
 8009f36:	4607      	mov	r7, r0
 8009f38:	460c      	mov	r4, r1
 8009f3a:	461e      	mov	r6, r3
 8009f3c:	f101 0c14 	add.w	ip, r1, #20
 8009f40:	2000      	movs	r0, #0
 8009f42:	f8dc 3000 	ldr.w	r3, [ip]
 8009f46:	b299      	uxth	r1, r3
 8009f48:	fb02 6101 	mla	r1, r2, r1, r6
 8009f4c:	0c1e      	lsrs	r6, r3, #16
 8009f4e:	0c0b      	lsrs	r3, r1, #16
 8009f50:	fb02 3306 	mla	r3, r2, r6, r3
 8009f54:	b289      	uxth	r1, r1
 8009f56:	3001      	adds	r0, #1
 8009f58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f5c:	4285      	cmp	r5, r0
 8009f5e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f66:	dcec      	bgt.n	8009f42 <__multadd+0x12>
 8009f68:	b30e      	cbz	r6, 8009fae <__multadd+0x7e>
 8009f6a:	68a3      	ldr	r3, [r4, #8]
 8009f6c:	42ab      	cmp	r3, r5
 8009f6e:	dc19      	bgt.n	8009fa4 <__multadd+0x74>
 8009f70:	6861      	ldr	r1, [r4, #4]
 8009f72:	4638      	mov	r0, r7
 8009f74:	3101      	adds	r1, #1
 8009f76:	f7ff ff79 	bl	8009e6c <_Balloc>
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	b928      	cbnz	r0, 8009f8a <__multadd+0x5a>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb4 <__multadd+0x84>)
 8009f82:	480d      	ldr	r0, [pc, #52]	@ (8009fb8 <__multadd+0x88>)
 8009f84:	21ba      	movs	r1, #186	@ 0xba
 8009f86:	f001 fcab 	bl	800b8e0 <__assert_func>
 8009f8a:	6922      	ldr	r2, [r4, #16]
 8009f8c:	3202      	adds	r2, #2
 8009f8e:	f104 010c 	add.w	r1, r4, #12
 8009f92:	0092      	lsls	r2, r2, #2
 8009f94:	300c      	adds	r0, #12
 8009f96:	f001 fc8b 	bl	800b8b0 <memcpy>
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f7ff ffa5 	bl	8009eec <_Bfree>
 8009fa2:	4644      	mov	r4, r8
 8009fa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fa8:	3501      	adds	r5, #1
 8009faa:	615e      	str	r6, [r3, #20]
 8009fac:	6125      	str	r5, [r4, #16]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb4:	0800cf21 	.word	0x0800cf21
 8009fb8:	0800cf32 	.word	0x0800cf32

08009fbc <__s2b>:
 8009fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	4615      	mov	r5, r2
 8009fc4:	461f      	mov	r7, r3
 8009fc6:	2209      	movs	r2, #9
 8009fc8:	3308      	adds	r3, #8
 8009fca:	4606      	mov	r6, r0
 8009fcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	db09      	blt.n	8009fec <__s2b+0x30>
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f7ff ff47 	bl	8009e6c <_Balloc>
 8009fde:	b940      	cbnz	r0, 8009ff2 <__s2b+0x36>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	4b19      	ldr	r3, [pc, #100]	@ (800a048 <__s2b+0x8c>)
 8009fe4:	4819      	ldr	r0, [pc, #100]	@ (800a04c <__s2b+0x90>)
 8009fe6:	21d3      	movs	r1, #211	@ 0xd3
 8009fe8:	f001 fc7a 	bl	800b8e0 <__assert_func>
 8009fec:	0052      	lsls	r2, r2, #1
 8009fee:	3101      	adds	r1, #1
 8009ff0:	e7f0      	b.n	8009fd4 <__s2b+0x18>
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	6143      	str	r3, [r0, #20]
 8009ff6:	2d09      	cmp	r5, #9
 8009ff8:	f04f 0301 	mov.w	r3, #1
 8009ffc:	6103      	str	r3, [r0, #16]
 8009ffe:	dd16      	ble.n	800a02e <__s2b+0x72>
 800a000:	f104 0909 	add.w	r9, r4, #9
 800a004:	46c8      	mov	r8, r9
 800a006:	442c      	add	r4, r5
 800a008:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a00c:	4601      	mov	r1, r0
 800a00e:	3b30      	subs	r3, #48	@ 0x30
 800a010:	220a      	movs	r2, #10
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff ff8c 	bl	8009f30 <__multadd>
 800a018:	45a0      	cmp	r8, r4
 800a01a:	d1f5      	bne.n	800a008 <__s2b+0x4c>
 800a01c:	f1a5 0408 	sub.w	r4, r5, #8
 800a020:	444c      	add	r4, r9
 800a022:	1b2d      	subs	r5, r5, r4
 800a024:	1963      	adds	r3, r4, r5
 800a026:	42bb      	cmp	r3, r7
 800a028:	db04      	blt.n	800a034 <__s2b+0x78>
 800a02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a02e:	340a      	adds	r4, #10
 800a030:	2509      	movs	r5, #9
 800a032:	e7f6      	b.n	800a022 <__s2b+0x66>
 800a034:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a038:	4601      	mov	r1, r0
 800a03a:	3b30      	subs	r3, #48	@ 0x30
 800a03c:	220a      	movs	r2, #10
 800a03e:	4630      	mov	r0, r6
 800a040:	f7ff ff76 	bl	8009f30 <__multadd>
 800a044:	e7ee      	b.n	800a024 <__s2b+0x68>
 800a046:	bf00      	nop
 800a048:	0800cf21 	.word	0x0800cf21
 800a04c:	0800cf32 	.word	0x0800cf32

0800a050 <__hi0bits>:
 800a050:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a054:	4603      	mov	r3, r0
 800a056:	bf36      	itet	cc
 800a058:	0403      	lslcc	r3, r0, #16
 800a05a:	2000      	movcs	r0, #0
 800a05c:	2010      	movcc	r0, #16
 800a05e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a062:	bf3c      	itt	cc
 800a064:	021b      	lslcc	r3, r3, #8
 800a066:	3008      	addcc	r0, #8
 800a068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a06c:	bf3c      	itt	cc
 800a06e:	011b      	lslcc	r3, r3, #4
 800a070:	3004      	addcc	r0, #4
 800a072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a076:	bf3c      	itt	cc
 800a078:	009b      	lslcc	r3, r3, #2
 800a07a:	3002      	addcc	r0, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	db05      	blt.n	800a08c <__hi0bits+0x3c>
 800a080:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a084:	f100 0001 	add.w	r0, r0, #1
 800a088:	bf08      	it	eq
 800a08a:	2020      	moveq	r0, #32
 800a08c:	4770      	bx	lr

0800a08e <__lo0bits>:
 800a08e:	6803      	ldr	r3, [r0, #0]
 800a090:	4602      	mov	r2, r0
 800a092:	f013 0007 	ands.w	r0, r3, #7
 800a096:	d00b      	beq.n	800a0b0 <__lo0bits+0x22>
 800a098:	07d9      	lsls	r1, r3, #31
 800a09a:	d421      	bmi.n	800a0e0 <__lo0bits+0x52>
 800a09c:	0798      	lsls	r0, r3, #30
 800a09e:	bf49      	itett	mi
 800a0a0:	085b      	lsrmi	r3, r3, #1
 800a0a2:	089b      	lsrpl	r3, r3, #2
 800a0a4:	2001      	movmi	r0, #1
 800a0a6:	6013      	strmi	r3, [r2, #0]
 800a0a8:	bf5c      	itt	pl
 800a0aa:	6013      	strpl	r3, [r2, #0]
 800a0ac:	2002      	movpl	r0, #2
 800a0ae:	4770      	bx	lr
 800a0b0:	b299      	uxth	r1, r3
 800a0b2:	b909      	cbnz	r1, 800a0b8 <__lo0bits+0x2a>
 800a0b4:	0c1b      	lsrs	r3, r3, #16
 800a0b6:	2010      	movs	r0, #16
 800a0b8:	b2d9      	uxtb	r1, r3
 800a0ba:	b909      	cbnz	r1, 800a0c0 <__lo0bits+0x32>
 800a0bc:	3008      	adds	r0, #8
 800a0be:	0a1b      	lsrs	r3, r3, #8
 800a0c0:	0719      	lsls	r1, r3, #28
 800a0c2:	bf04      	itt	eq
 800a0c4:	091b      	lsreq	r3, r3, #4
 800a0c6:	3004      	addeq	r0, #4
 800a0c8:	0799      	lsls	r1, r3, #30
 800a0ca:	bf04      	itt	eq
 800a0cc:	089b      	lsreq	r3, r3, #2
 800a0ce:	3002      	addeq	r0, #2
 800a0d0:	07d9      	lsls	r1, r3, #31
 800a0d2:	d403      	bmi.n	800a0dc <__lo0bits+0x4e>
 800a0d4:	085b      	lsrs	r3, r3, #1
 800a0d6:	f100 0001 	add.w	r0, r0, #1
 800a0da:	d003      	beq.n	800a0e4 <__lo0bits+0x56>
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	4770      	bx	lr
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	4770      	bx	lr
 800a0e4:	2020      	movs	r0, #32
 800a0e6:	4770      	bx	lr

0800a0e8 <__i2b>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	f7ff febd 	bl	8009e6c <_Balloc>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	b928      	cbnz	r0, 800a102 <__i2b+0x1a>
 800a0f6:	4b05      	ldr	r3, [pc, #20]	@ (800a10c <__i2b+0x24>)
 800a0f8:	4805      	ldr	r0, [pc, #20]	@ (800a110 <__i2b+0x28>)
 800a0fa:	f240 1145 	movw	r1, #325	@ 0x145
 800a0fe:	f001 fbef 	bl	800b8e0 <__assert_func>
 800a102:	2301      	movs	r3, #1
 800a104:	6144      	str	r4, [r0, #20]
 800a106:	6103      	str	r3, [r0, #16]
 800a108:	bd10      	pop	{r4, pc}
 800a10a:	bf00      	nop
 800a10c:	0800cf21 	.word	0x0800cf21
 800a110:	0800cf32 	.word	0x0800cf32

0800a114 <__multiply>:
 800a114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	4614      	mov	r4, r2
 800a11a:	690a      	ldr	r2, [r1, #16]
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	429a      	cmp	r2, r3
 800a120:	bfa8      	it	ge
 800a122:	4623      	movge	r3, r4
 800a124:	460f      	mov	r7, r1
 800a126:	bfa4      	itt	ge
 800a128:	460c      	movge	r4, r1
 800a12a:	461f      	movge	r7, r3
 800a12c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a130:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a134:	68a3      	ldr	r3, [r4, #8]
 800a136:	6861      	ldr	r1, [r4, #4]
 800a138:	eb0a 0609 	add.w	r6, sl, r9
 800a13c:	42b3      	cmp	r3, r6
 800a13e:	b085      	sub	sp, #20
 800a140:	bfb8      	it	lt
 800a142:	3101      	addlt	r1, #1
 800a144:	f7ff fe92 	bl	8009e6c <_Balloc>
 800a148:	b930      	cbnz	r0, 800a158 <__multiply+0x44>
 800a14a:	4602      	mov	r2, r0
 800a14c:	4b44      	ldr	r3, [pc, #272]	@ (800a260 <__multiply+0x14c>)
 800a14e:	4845      	ldr	r0, [pc, #276]	@ (800a264 <__multiply+0x150>)
 800a150:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a154:	f001 fbc4 	bl	800b8e0 <__assert_func>
 800a158:	f100 0514 	add.w	r5, r0, #20
 800a15c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a160:	462b      	mov	r3, r5
 800a162:	2200      	movs	r2, #0
 800a164:	4543      	cmp	r3, r8
 800a166:	d321      	bcc.n	800a1ac <__multiply+0x98>
 800a168:	f107 0114 	add.w	r1, r7, #20
 800a16c:	f104 0214 	add.w	r2, r4, #20
 800a170:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a174:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a178:	9302      	str	r3, [sp, #8]
 800a17a:	1b13      	subs	r3, r2, r4
 800a17c:	3b15      	subs	r3, #21
 800a17e:	f023 0303 	bic.w	r3, r3, #3
 800a182:	3304      	adds	r3, #4
 800a184:	f104 0715 	add.w	r7, r4, #21
 800a188:	42ba      	cmp	r2, r7
 800a18a:	bf38      	it	cc
 800a18c:	2304      	movcc	r3, #4
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	9103      	str	r1, [sp, #12]
 800a194:	428b      	cmp	r3, r1
 800a196:	d80c      	bhi.n	800a1b2 <__multiply+0x9e>
 800a198:	2e00      	cmp	r6, #0
 800a19a:	dd03      	ble.n	800a1a4 <__multiply+0x90>
 800a19c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d05b      	beq.n	800a25c <__multiply+0x148>
 800a1a4:	6106      	str	r6, [r0, #16]
 800a1a6:	b005      	add	sp, #20
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ac:	f843 2b04 	str.w	r2, [r3], #4
 800a1b0:	e7d8      	b.n	800a164 <__multiply+0x50>
 800a1b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1b6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ba:	d024      	beq.n	800a206 <__multiply+0xf2>
 800a1bc:	f104 0e14 	add.w	lr, r4, #20
 800a1c0:	46a9      	mov	r9, r5
 800a1c2:	f04f 0c00 	mov.w	ip, #0
 800a1c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1ca:	f8d9 3000 	ldr.w	r3, [r9]
 800a1ce:	fa1f fb87 	uxth.w	fp, r7
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a1dc:	f8d9 7000 	ldr.w	r7, [r9]
 800a1e0:	4463      	add	r3, ip
 800a1e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1f4:	4572      	cmp	r2, lr
 800a1f6:	f849 3b04 	str.w	r3, [r9], #4
 800a1fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1fe:	d8e2      	bhi.n	800a1c6 <__multiply+0xb2>
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	f845 c003 	str.w	ip, [r5, r3]
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a20c:	3104      	adds	r1, #4
 800a20e:	f1b9 0f00 	cmp.w	r9, #0
 800a212:	d021      	beq.n	800a258 <__multiply+0x144>
 800a214:	682b      	ldr	r3, [r5, #0]
 800a216:	f104 0c14 	add.w	ip, r4, #20
 800a21a:	46ae      	mov	lr, r5
 800a21c:	f04f 0a00 	mov.w	sl, #0
 800a220:	f8bc b000 	ldrh.w	fp, [ip]
 800a224:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a228:	fb09 770b 	mla	r7, r9, fp, r7
 800a22c:	4457      	add	r7, sl
 800a22e:	b29b      	uxth	r3, r3
 800a230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a234:	f84e 3b04 	str.w	r3, [lr], #4
 800a238:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a23c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a240:	f8be 3000 	ldrh.w	r3, [lr]
 800a244:	fb09 330a 	mla	r3, r9, sl, r3
 800a248:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a24c:	4562      	cmp	r2, ip
 800a24e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a252:	d8e5      	bhi.n	800a220 <__multiply+0x10c>
 800a254:	9f01      	ldr	r7, [sp, #4]
 800a256:	51eb      	str	r3, [r5, r7]
 800a258:	3504      	adds	r5, #4
 800a25a:	e799      	b.n	800a190 <__multiply+0x7c>
 800a25c:	3e01      	subs	r6, #1
 800a25e:	e79b      	b.n	800a198 <__multiply+0x84>
 800a260:	0800cf21 	.word	0x0800cf21
 800a264:	0800cf32 	.word	0x0800cf32

0800a268 <__pow5mult>:
 800a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a26c:	4615      	mov	r5, r2
 800a26e:	f012 0203 	ands.w	r2, r2, #3
 800a272:	4607      	mov	r7, r0
 800a274:	460e      	mov	r6, r1
 800a276:	d007      	beq.n	800a288 <__pow5mult+0x20>
 800a278:	4c25      	ldr	r4, [pc, #148]	@ (800a310 <__pow5mult+0xa8>)
 800a27a:	3a01      	subs	r2, #1
 800a27c:	2300      	movs	r3, #0
 800a27e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a282:	f7ff fe55 	bl	8009f30 <__multadd>
 800a286:	4606      	mov	r6, r0
 800a288:	10ad      	asrs	r5, r5, #2
 800a28a:	d03d      	beq.n	800a308 <__pow5mult+0xa0>
 800a28c:	69fc      	ldr	r4, [r7, #28]
 800a28e:	b97c      	cbnz	r4, 800a2b0 <__pow5mult+0x48>
 800a290:	2010      	movs	r0, #16
 800a292:	f7ff fd35 	bl	8009d00 <malloc>
 800a296:	4602      	mov	r2, r0
 800a298:	61f8      	str	r0, [r7, #28]
 800a29a:	b928      	cbnz	r0, 800a2a8 <__pow5mult+0x40>
 800a29c:	4b1d      	ldr	r3, [pc, #116]	@ (800a314 <__pow5mult+0xac>)
 800a29e:	481e      	ldr	r0, [pc, #120]	@ (800a318 <__pow5mult+0xb0>)
 800a2a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2a4:	f001 fb1c 	bl	800b8e0 <__assert_func>
 800a2a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2ac:	6004      	str	r4, [r0, #0]
 800a2ae:	60c4      	str	r4, [r0, #12]
 800a2b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2b8:	b94c      	cbnz	r4, 800a2ce <__pow5mult+0x66>
 800a2ba:	f240 2171 	movw	r1, #625	@ 0x271
 800a2be:	4638      	mov	r0, r7
 800a2c0:	f7ff ff12 	bl	800a0e8 <__i2b>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	6003      	str	r3, [r0, #0]
 800a2ce:	f04f 0900 	mov.w	r9, #0
 800a2d2:	07eb      	lsls	r3, r5, #31
 800a2d4:	d50a      	bpl.n	800a2ec <__pow5mult+0x84>
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4622      	mov	r2, r4
 800a2da:	4638      	mov	r0, r7
 800a2dc:	f7ff ff1a 	bl	800a114 <__multiply>
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff fe01 	bl	8009eec <_Bfree>
 800a2ea:	4646      	mov	r6, r8
 800a2ec:	106d      	asrs	r5, r5, #1
 800a2ee:	d00b      	beq.n	800a308 <__pow5mult+0xa0>
 800a2f0:	6820      	ldr	r0, [r4, #0]
 800a2f2:	b938      	cbnz	r0, 800a304 <__pow5mult+0x9c>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7ff ff0b 	bl	800a114 <__multiply>
 800a2fe:	6020      	str	r0, [r4, #0]
 800a300:	f8c0 9000 	str.w	r9, [r0]
 800a304:	4604      	mov	r4, r0
 800a306:	e7e4      	b.n	800a2d2 <__pow5mult+0x6a>
 800a308:	4630      	mov	r0, r6
 800a30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30e:	bf00      	nop
 800a310:	0800cf8c 	.word	0x0800cf8c
 800a314:	0800ceb2 	.word	0x0800ceb2
 800a318:	0800cf32 	.word	0x0800cf32

0800a31c <__lshift>:
 800a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	460c      	mov	r4, r1
 800a322:	6849      	ldr	r1, [r1, #4]
 800a324:	6923      	ldr	r3, [r4, #16]
 800a326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a32a:	68a3      	ldr	r3, [r4, #8]
 800a32c:	4607      	mov	r7, r0
 800a32e:	4691      	mov	r9, r2
 800a330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a334:	f108 0601 	add.w	r6, r8, #1
 800a338:	42b3      	cmp	r3, r6
 800a33a:	db0b      	blt.n	800a354 <__lshift+0x38>
 800a33c:	4638      	mov	r0, r7
 800a33e:	f7ff fd95 	bl	8009e6c <_Balloc>
 800a342:	4605      	mov	r5, r0
 800a344:	b948      	cbnz	r0, 800a35a <__lshift+0x3e>
 800a346:	4602      	mov	r2, r0
 800a348:	4b28      	ldr	r3, [pc, #160]	@ (800a3ec <__lshift+0xd0>)
 800a34a:	4829      	ldr	r0, [pc, #164]	@ (800a3f0 <__lshift+0xd4>)
 800a34c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a350:	f001 fac6 	bl	800b8e0 <__assert_func>
 800a354:	3101      	adds	r1, #1
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	e7ee      	b.n	800a338 <__lshift+0x1c>
 800a35a:	2300      	movs	r3, #0
 800a35c:	f100 0114 	add.w	r1, r0, #20
 800a360:	f100 0210 	add.w	r2, r0, #16
 800a364:	4618      	mov	r0, r3
 800a366:	4553      	cmp	r3, sl
 800a368:	db33      	blt.n	800a3d2 <__lshift+0xb6>
 800a36a:	6920      	ldr	r0, [r4, #16]
 800a36c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a370:	f104 0314 	add.w	r3, r4, #20
 800a374:	f019 091f 	ands.w	r9, r9, #31
 800a378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a37c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a380:	d02b      	beq.n	800a3da <__lshift+0xbe>
 800a382:	f1c9 0e20 	rsb	lr, r9, #32
 800a386:	468a      	mov	sl, r1
 800a388:	2200      	movs	r2, #0
 800a38a:	6818      	ldr	r0, [r3, #0]
 800a38c:	fa00 f009 	lsl.w	r0, r0, r9
 800a390:	4310      	orrs	r0, r2
 800a392:	f84a 0b04 	str.w	r0, [sl], #4
 800a396:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39a:	459c      	cmp	ip, r3
 800a39c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3a0:	d8f3      	bhi.n	800a38a <__lshift+0x6e>
 800a3a2:	ebac 0304 	sub.w	r3, ip, r4
 800a3a6:	3b15      	subs	r3, #21
 800a3a8:	f023 0303 	bic.w	r3, r3, #3
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	f104 0015 	add.w	r0, r4, #21
 800a3b2:	4584      	cmp	ip, r0
 800a3b4:	bf38      	it	cc
 800a3b6:	2304      	movcc	r3, #4
 800a3b8:	50ca      	str	r2, [r1, r3]
 800a3ba:	b10a      	cbz	r2, 800a3c0 <__lshift+0xa4>
 800a3bc:	f108 0602 	add.w	r6, r8, #2
 800a3c0:	3e01      	subs	r6, #1
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	612e      	str	r6, [r5, #16]
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f7ff fd90 	bl	8009eec <_Bfree>
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	e7c5      	b.n	800a366 <__lshift+0x4a>
 800a3da:	3904      	subs	r1, #4
 800a3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3e4:	459c      	cmp	ip, r3
 800a3e6:	d8f9      	bhi.n	800a3dc <__lshift+0xc0>
 800a3e8:	e7ea      	b.n	800a3c0 <__lshift+0xa4>
 800a3ea:	bf00      	nop
 800a3ec:	0800cf21 	.word	0x0800cf21
 800a3f0:	0800cf32 	.word	0x0800cf32

0800a3f4 <__mcmp>:
 800a3f4:	690a      	ldr	r2, [r1, #16]
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	6900      	ldr	r0, [r0, #16]
 800a3fa:	1a80      	subs	r0, r0, r2
 800a3fc:	b530      	push	{r4, r5, lr}
 800a3fe:	d10e      	bne.n	800a41e <__mcmp+0x2a>
 800a400:	3314      	adds	r3, #20
 800a402:	3114      	adds	r1, #20
 800a404:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a40c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a410:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a414:	4295      	cmp	r5, r2
 800a416:	d003      	beq.n	800a420 <__mcmp+0x2c>
 800a418:	d205      	bcs.n	800a426 <__mcmp+0x32>
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295
 800a41e:	bd30      	pop	{r4, r5, pc}
 800a420:	42a3      	cmp	r3, r4
 800a422:	d3f3      	bcc.n	800a40c <__mcmp+0x18>
 800a424:	e7fb      	b.n	800a41e <__mcmp+0x2a>
 800a426:	2001      	movs	r0, #1
 800a428:	e7f9      	b.n	800a41e <__mcmp+0x2a>
	...

0800a42c <__mdiff>:
 800a42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	4689      	mov	r9, r1
 800a432:	4606      	mov	r6, r0
 800a434:	4611      	mov	r1, r2
 800a436:	4648      	mov	r0, r9
 800a438:	4614      	mov	r4, r2
 800a43a:	f7ff ffdb 	bl	800a3f4 <__mcmp>
 800a43e:	1e05      	subs	r5, r0, #0
 800a440:	d112      	bne.n	800a468 <__mdiff+0x3c>
 800a442:	4629      	mov	r1, r5
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff fd11 	bl	8009e6c <_Balloc>
 800a44a:	4602      	mov	r2, r0
 800a44c:	b928      	cbnz	r0, 800a45a <__mdiff+0x2e>
 800a44e:	4b3f      	ldr	r3, [pc, #252]	@ (800a54c <__mdiff+0x120>)
 800a450:	f240 2137 	movw	r1, #567	@ 0x237
 800a454:	483e      	ldr	r0, [pc, #248]	@ (800a550 <__mdiff+0x124>)
 800a456:	f001 fa43 	bl	800b8e0 <__assert_func>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a460:	4610      	mov	r0, r2
 800a462:	b003      	add	sp, #12
 800a464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a468:	bfbc      	itt	lt
 800a46a:	464b      	movlt	r3, r9
 800a46c:	46a1      	movlt	r9, r4
 800a46e:	4630      	mov	r0, r6
 800a470:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a474:	bfba      	itte	lt
 800a476:	461c      	movlt	r4, r3
 800a478:	2501      	movlt	r5, #1
 800a47a:	2500      	movge	r5, #0
 800a47c:	f7ff fcf6 	bl	8009e6c <_Balloc>
 800a480:	4602      	mov	r2, r0
 800a482:	b918      	cbnz	r0, 800a48c <__mdiff+0x60>
 800a484:	4b31      	ldr	r3, [pc, #196]	@ (800a54c <__mdiff+0x120>)
 800a486:	f240 2145 	movw	r1, #581	@ 0x245
 800a48a:	e7e3      	b.n	800a454 <__mdiff+0x28>
 800a48c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a490:	6926      	ldr	r6, [r4, #16]
 800a492:	60c5      	str	r5, [r0, #12]
 800a494:	f109 0310 	add.w	r3, r9, #16
 800a498:	f109 0514 	add.w	r5, r9, #20
 800a49c:	f104 0e14 	add.w	lr, r4, #20
 800a4a0:	f100 0b14 	add.w	fp, r0, #20
 800a4a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	46d9      	mov	r9, fp
 800a4b0:	f04f 0c00 	mov.w	ip, #0
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	fa1f f38a 	uxth.w	r3, sl
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	b283      	uxth	r3, r0
 800a4c8:	1acb      	subs	r3, r1, r3
 800a4ca:	0c00      	lsrs	r0, r0, #16
 800a4cc:	4463      	add	r3, ip
 800a4ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4dc:	4576      	cmp	r6, lr
 800a4de:	f849 3b04 	str.w	r3, [r9], #4
 800a4e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4e6:	d8e5      	bhi.n	800a4b4 <__mdiff+0x88>
 800a4e8:	1b33      	subs	r3, r6, r4
 800a4ea:	3b15      	subs	r3, #21
 800a4ec:	f023 0303 	bic.w	r3, r3, #3
 800a4f0:	3415      	adds	r4, #21
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	42a6      	cmp	r6, r4
 800a4f6:	bf38      	it	cc
 800a4f8:	2304      	movcc	r3, #4
 800a4fa:	441d      	add	r5, r3
 800a4fc:	445b      	add	r3, fp
 800a4fe:	461e      	mov	r6, r3
 800a500:	462c      	mov	r4, r5
 800a502:	4544      	cmp	r4, r8
 800a504:	d30e      	bcc.n	800a524 <__mdiff+0xf8>
 800a506:	f108 0103 	add.w	r1, r8, #3
 800a50a:	1b49      	subs	r1, r1, r5
 800a50c:	f021 0103 	bic.w	r1, r1, #3
 800a510:	3d03      	subs	r5, #3
 800a512:	45a8      	cmp	r8, r5
 800a514:	bf38      	it	cc
 800a516:	2100      	movcc	r1, #0
 800a518:	440b      	add	r3, r1
 800a51a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a51e:	b191      	cbz	r1, 800a546 <__mdiff+0x11a>
 800a520:	6117      	str	r7, [r2, #16]
 800a522:	e79d      	b.n	800a460 <__mdiff+0x34>
 800a524:	f854 1b04 	ldr.w	r1, [r4], #4
 800a528:	46e6      	mov	lr, ip
 800a52a:	0c08      	lsrs	r0, r1, #16
 800a52c:	fa1c fc81 	uxtah	ip, ip, r1
 800a530:	4471      	add	r1, lr
 800a532:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a536:	b289      	uxth	r1, r1
 800a538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a53c:	f846 1b04 	str.w	r1, [r6], #4
 800a540:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a544:	e7dd      	b.n	800a502 <__mdiff+0xd6>
 800a546:	3f01      	subs	r7, #1
 800a548:	e7e7      	b.n	800a51a <__mdiff+0xee>
 800a54a:	bf00      	nop
 800a54c:	0800cf21 	.word	0x0800cf21
 800a550:	0800cf32 	.word	0x0800cf32

0800a554 <__ulp>:
 800a554:	b082      	sub	sp, #8
 800a556:	ed8d 0b00 	vstr	d0, [sp]
 800a55a:	9a01      	ldr	r2, [sp, #4]
 800a55c:	4b0f      	ldr	r3, [pc, #60]	@ (800a59c <__ulp+0x48>)
 800a55e:	4013      	ands	r3, r2
 800a560:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a564:	2b00      	cmp	r3, #0
 800a566:	dc08      	bgt.n	800a57a <__ulp+0x26>
 800a568:	425b      	negs	r3, r3
 800a56a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a56e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a572:	da04      	bge.n	800a57e <__ulp+0x2a>
 800a574:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a578:	4113      	asrs	r3, r2
 800a57a:	2200      	movs	r2, #0
 800a57c:	e008      	b.n	800a590 <__ulp+0x3c>
 800a57e:	f1a2 0314 	sub.w	r3, r2, #20
 800a582:	2b1e      	cmp	r3, #30
 800a584:	bfda      	itte	le
 800a586:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a58a:	40da      	lsrle	r2, r3
 800a58c:	2201      	movgt	r2, #1
 800a58e:	2300      	movs	r3, #0
 800a590:	4619      	mov	r1, r3
 800a592:	4610      	mov	r0, r2
 800a594:	ec41 0b10 	vmov	d0, r0, r1
 800a598:	b002      	add	sp, #8
 800a59a:	4770      	bx	lr
 800a59c:	7ff00000 	.word	0x7ff00000

0800a5a0 <__b2d>:
 800a5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a4:	6906      	ldr	r6, [r0, #16]
 800a5a6:	f100 0814 	add.w	r8, r0, #20
 800a5aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5ae:	1f37      	subs	r7, r6, #4
 800a5b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	f7ff fd4b 	bl	800a050 <__hi0bits>
 800a5ba:	f1c0 0320 	rsb	r3, r0, #32
 800a5be:	280a      	cmp	r0, #10
 800a5c0:	600b      	str	r3, [r1, #0]
 800a5c2:	491b      	ldr	r1, [pc, #108]	@ (800a630 <__b2d+0x90>)
 800a5c4:	dc15      	bgt.n	800a5f2 <__b2d+0x52>
 800a5c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5ce:	45b8      	cmp	r8, r7
 800a5d0:	ea43 0501 	orr.w	r5, r3, r1
 800a5d4:	bf34      	ite	cc
 800a5d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5da:	2300      	movcs	r3, #0
 800a5dc:	3015      	adds	r0, #21
 800a5de:	fa02 f000 	lsl.w	r0, r2, r0
 800a5e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5e6:	4303      	orrs	r3, r0
 800a5e8:	461c      	mov	r4, r3
 800a5ea:	ec45 4b10 	vmov	d0, r4, r5
 800a5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f2:	45b8      	cmp	r8, r7
 800a5f4:	bf3a      	itte	cc
 800a5f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5fe:	2300      	movcs	r3, #0
 800a600:	380b      	subs	r0, #11
 800a602:	d012      	beq.n	800a62a <__b2d+0x8a>
 800a604:	f1c0 0120 	rsb	r1, r0, #32
 800a608:	fa23 f401 	lsr.w	r4, r3, r1
 800a60c:	4082      	lsls	r2, r0
 800a60e:	4322      	orrs	r2, r4
 800a610:	4547      	cmp	r7, r8
 800a612:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a616:	bf8c      	ite	hi
 800a618:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a61c:	2200      	movls	r2, #0
 800a61e:	4083      	lsls	r3, r0
 800a620:	40ca      	lsrs	r2, r1
 800a622:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a626:	4313      	orrs	r3, r2
 800a628:	e7de      	b.n	800a5e8 <__b2d+0x48>
 800a62a:	ea42 0501 	orr.w	r5, r2, r1
 800a62e:	e7db      	b.n	800a5e8 <__b2d+0x48>
 800a630:	3ff00000 	.word	0x3ff00000

0800a634 <__d2b>:
 800a634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a638:	460f      	mov	r7, r1
 800a63a:	2101      	movs	r1, #1
 800a63c:	ec59 8b10 	vmov	r8, r9, d0
 800a640:	4616      	mov	r6, r2
 800a642:	f7ff fc13 	bl	8009e6c <_Balloc>
 800a646:	4604      	mov	r4, r0
 800a648:	b930      	cbnz	r0, 800a658 <__d2b+0x24>
 800a64a:	4602      	mov	r2, r0
 800a64c:	4b23      	ldr	r3, [pc, #140]	@ (800a6dc <__d2b+0xa8>)
 800a64e:	4824      	ldr	r0, [pc, #144]	@ (800a6e0 <__d2b+0xac>)
 800a650:	f240 310f 	movw	r1, #783	@ 0x30f
 800a654:	f001 f944 	bl	800b8e0 <__assert_func>
 800a658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a660:	b10d      	cbz	r5, 800a666 <__d2b+0x32>
 800a662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	f1b8 0300 	subs.w	r3, r8, #0
 800a66c:	d023      	beq.n	800a6b6 <__d2b+0x82>
 800a66e:	4668      	mov	r0, sp
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	f7ff fd0c 	bl	800a08e <__lo0bits>
 800a676:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a67a:	b1d0      	cbz	r0, 800a6b2 <__d2b+0x7e>
 800a67c:	f1c0 0320 	rsb	r3, r0, #32
 800a680:	fa02 f303 	lsl.w	r3, r2, r3
 800a684:	430b      	orrs	r3, r1
 800a686:	40c2      	lsrs	r2, r0
 800a688:	6163      	str	r3, [r4, #20]
 800a68a:	9201      	str	r2, [sp, #4]
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	61a3      	str	r3, [r4, #24]
 800a690:	2b00      	cmp	r3, #0
 800a692:	bf0c      	ite	eq
 800a694:	2201      	moveq	r2, #1
 800a696:	2202      	movne	r2, #2
 800a698:	6122      	str	r2, [r4, #16]
 800a69a:	b1a5      	cbz	r5, 800a6c6 <__d2b+0x92>
 800a69c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a6a0:	4405      	add	r5, r0
 800a6a2:	603d      	str	r5, [r7, #0]
 800a6a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a6a8:	6030      	str	r0, [r6, #0]
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	b003      	add	sp, #12
 800a6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6b2:	6161      	str	r1, [r4, #20]
 800a6b4:	e7ea      	b.n	800a68c <__d2b+0x58>
 800a6b6:	a801      	add	r0, sp, #4
 800a6b8:	f7ff fce9 	bl	800a08e <__lo0bits>
 800a6bc:	9b01      	ldr	r3, [sp, #4]
 800a6be:	6163      	str	r3, [r4, #20]
 800a6c0:	3020      	adds	r0, #32
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	e7e8      	b.n	800a698 <__d2b+0x64>
 800a6c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a6ce:	6038      	str	r0, [r7, #0]
 800a6d0:	6918      	ldr	r0, [r3, #16]
 800a6d2:	f7ff fcbd 	bl	800a050 <__hi0bits>
 800a6d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6da:	e7e5      	b.n	800a6a8 <__d2b+0x74>
 800a6dc:	0800cf21 	.word	0x0800cf21
 800a6e0:	0800cf32 	.word	0x0800cf32

0800a6e4 <__ratio>:
 800a6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	4688      	mov	r8, r1
 800a6ea:	4669      	mov	r1, sp
 800a6ec:	4681      	mov	r9, r0
 800a6ee:	f7ff ff57 	bl	800a5a0 <__b2d>
 800a6f2:	a901      	add	r1, sp, #4
 800a6f4:	4640      	mov	r0, r8
 800a6f6:	ec55 4b10 	vmov	r4, r5, d0
 800a6fa:	f7ff ff51 	bl	800a5a0 <__b2d>
 800a6fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a702:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a706:	1ad2      	subs	r2, r2, r3
 800a708:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a70c:	1a5b      	subs	r3, r3, r1
 800a70e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a712:	ec57 6b10 	vmov	r6, r7, d0
 800a716:	2b00      	cmp	r3, #0
 800a718:	bfd6      	itet	le
 800a71a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a71e:	462a      	movgt	r2, r5
 800a720:	463a      	movle	r2, r7
 800a722:	46ab      	mov	fp, r5
 800a724:	46a2      	mov	sl, r4
 800a726:	bfce      	itee	gt
 800a728:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a72c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a730:	ee00 3a90 	vmovle	s1, r3
 800a734:	ec4b ab17 	vmov	d7, sl, fp
 800a738:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a73c:	b003      	add	sp, #12
 800a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a742 <__copybits>:
 800a742:	3901      	subs	r1, #1
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	1149      	asrs	r1, r1, #5
 800a748:	6914      	ldr	r4, [r2, #16]
 800a74a:	3101      	adds	r1, #1
 800a74c:	f102 0314 	add.w	r3, r2, #20
 800a750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a754:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a758:	1f05      	subs	r5, r0, #4
 800a75a:	42a3      	cmp	r3, r4
 800a75c:	d30c      	bcc.n	800a778 <__copybits+0x36>
 800a75e:	1aa3      	subs	r3, r4, r2
 800a760:	3b11      	subs	r3, #17
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	3211      	adds	r2, #17
 800a768:	42a2      	cmp	r2, r4
 800a76a:	bf88      	it	hi
 800a76c:	2300      	movhi	r3, #0
 800a76e:	4418      	add	r0, r3
 800a770:	2300      	movs	r3, #0
 800a772:	4288      	cmp	r0, r1
 800a774:	d305      	bcc.n	800a782 <__copybits+0x40>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f853 6b04 	ldr.w	r6, [r3], #4
 800a77c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a780:	e7eb      	b.n	800a75a <__copybits+0x18>
 800a782:	f840 3b04 	str.w	r3, [r0], #4
 800a786:	e7f4      	b.n	800a772 <__copybits+0x30>

0800a788 <__any_on>:
 800a788:	f100 0214 	add.w	r2, r0, #20
 800a78c:	6900      	ldr	r0, [r0, #16]
 800a78e:	114b      	asrs	r3, r1, #5
 800a790:	4298      	cmp	r0, r3
 800a792:	b510      	push	{r4, lr}
 800a794:	db11      	blt.n	800a7ba <__any_on+0x32>
 800a796:	dd0a      	ble.n	800a7ae <__any_on+0x26>
 800a798:	f011 011f 	ands.w	r1, r1, #31
 800a79c:	d007      	beq.n	800a7ae <__any_on+0x26>
 800a79e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7a2:	fa24 f001 	lsr.w	r0, r4, r1
 800a7a6:	fa00 f101 	lsl.w	r1, r0, r1
 800a7aa:	428c      	cmp	r4, r1
 800a7ac:	d10b      	bne.n	800a7c6 <__any_on+0x3e>
 800a7ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d803      	bhi.n	800a7be <__any_on+0x36>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	e7f7      	b.n	800a7ae <__any_on+0x26>
 800a7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7c2:	2900      	cmp	r1, #0
 800a7c4:	d0f5      	beq.n	800a7b2 <__any_on+0x2a>
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	e7f6      	b.n	800a7b8 <__any_on+0x30>

0800a7ca <sulp>:
 800a7ca:	b570      	push	{r4, r5, r6, lr}
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	4616      	mov	r6, r2
 800a7d2:	ec45 4b10 	vmov	d0, r4, r5
 800a7d6:	f7ff febd 	bl	800a554 <__ulp>
 800a7da:	b17e      	cbz	r6, 800a7fc <sulp+0x32>
 800a7dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a7e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	dd09      	ble.n	800a7fc <sulp+0x32>
 800a7e8:	051b      	lsls	r3, r3, #20
 800a7ea:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a7f4:	ec41 0b17 	vmov	d7, r0, r1
 800a7f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a7fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a800 <_strtod_l>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	ed2d 8b0a 	vpush	{d8-d12}
 800a808:	b097      	sub	sp, #92	@ 0x5c
 800a80a:	4688      	mov	r8, r1
 800a80c:	920e      	str	r2, [sp, #56]	@ 0x38
 800a80e:	2200      	movs	r2, #0
 800a810:	9212      	str	r2, [sp, #72]	@ 0x48
 800a812:	9005      	str	r0, [sp, #20]
 800a814:	f04f 0a00 	mov.w	sl, #0
 800a818:	f04f 0b00 	mov.w	fp, #0
 800a81c:	460a      	mov	r2, r1
 800a81e:	9211      	str	r2, [sp, #68]	@ 0x44
 800a820:	7811      	ldrb	r1, [r2, #0]
 800a822:	292b      	cmp	r1, #43	@ 0x2b
 800a824:	d04c      	beq.n	800a8c0 <_strtod_l+0xc0>
 800a826:	d839      	bhi.n	800a89c <_strtod_l+0x9c>
 800a828:	290d      	cmp	r1, #13
 800a82a:	d833      	bhi.n	800a894 <_strtod_l+0x94>
 800a82c:	2908      	cmp	r1, #8
 800a82e:	d833      	bhi.n	800a898 <_strtod_l+0x98>
 800a830:	2900      	cmp	r1, #0
 800a832:	d03c      	beq.n	800a8ae <_strtod_l+0xae>
 800a834:	2200      	movs	r2, #0
 800a836:	9208      	str	r2, [sp, #32]
 800a838:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a83a:	782a      	ldrb	r2, [r5, #0]
 800a83c:	2a30      	cmp	r2, #48	@ 0x30
 800a83e:	f040 80b5 	bne.w	800a9ac <_strtod_l+0x1ac>
 800a842:	786a      	ldrb	r2, [r5, #1]
 800a844:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a848:	2a58      	cmp	r2, #88	@ 0x58
 800a84a:	d170      	bne.n	800a92e <_strtod_l+0x12e>
 800a84c:	9302      	str	r3, [sp, #8]
 800a84e:	9b08      	ldr	r3, [sp, #32]
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	ab12      	add	r3, sp, #72	@ 0x48
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	4a8b      	ldr	r2, [pc, #556]	@ (800aa84 <_strtod_l+0x284>)
 800a858:	9805      	ldr	r0, [sp, #20]
 800a85a:	ab13      	add	r3, sp, #76	@ 0x4c
 800a85c:	a911      	add	r1, sp, #68	@ 0x44
 800a85e:	f001 f8d9 	bl	800ba14 <__gethex>
 800a862:	f010 060f 	ands.w	r6, r0, #15
 800a866:	4604      	mov	r4, r0
 800a868:	d005      	beq.n	800a876 <_strtod_l+0x76>
 800a86a:	2e06      	cmp	r6, #6
 800a86c:	d12a      	bne.n	800a8c4 <_strtod_l+0xc4>
 800a86e:	3501      	adds	r5, #1
 800a870:	2300      	movs	r3, #0
 800a872:	9511      	str	r5, [sp, #68]	@ 0x44
 800a874:	9308      	str	r3, [sp, #32]
 800a876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f040 852f 	bne.w	800b2dc <_strtod_l+0xadc>
 800a87e:	9b08      	ldr	r3, [sp, #32]
 800a880:	ec4b ab10 	vmov	d0, sl, fp
 800a884:	b1cb      	cbz	r3, 800a8ba <_strtod_l+0xba>
 800a886:	eeb1 0b40 	vneg.f64	d0, d0
 800a88a:	b017      	add	sp, #92	@ 0x5c
 800a88c:	ecbd 8b0a 	vpop	{d8-d12}
 800a890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a894:	2920      	cmp	r1, #32
 800a896:	d1cd      	bne.n	800a834 <_strtod_l+0x34>
 800a898:	3201      	adds	r2, #1
 800a89a:	e7c0      	b.n	800a81e <_strtod_l+0x1e>
 800a89c:	292d      	cmp	r1, #45	@ 0x2d
 800a89e:	d1c9      	bne.n	800a834 <_strtod_l+0x34>
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	9108      	str	r1, [sp, #32]
 800a8a4:	1c51      	adds	r1, r2, #1
 800a8a6:	9111      	str	r1, [sp, #68]	@ 0x44
 800a8a8:	7852      	ldrb	r2, [r2, #1]
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	d1c4      	bne.n	800a838 <_strtod_l+0x38>
 800a8ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8b0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f040 850f 	bne.w	800b2d8 <_strtod_l+0xad8>
 800a8ba:	ec4b ab10 	vmov	d0, sl, fp
 800a8be:	e7e4      	b.n	800a88a <_strtod_l+0x8a>
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	e7ee      	b.n	800a8a2 <_strtod_l+0xa2>
 800a8c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a8c6:	b13a      	cbz	r2, 800a8d8 <_strtod_l+0xd8>
 800a8c8:	2135      	movs	r1, #53	@ 0x35
 800a8ca:	a814      	add	r0, sp, #80	@ 0x50
 800a8cc:	f7ff ff39 	bl	800a742 <__copybits>
 800a8d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a8d2:	9805      	ldr	r0, [sp, #20]
 800a8d4:	f7ff fb0a 	bl	8009eec <_Bfree>
 800a8d8:	1e73      	subs	r3, r6, #1
 800a8da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d806      	bhi.n	800a8ee <_strtod_l+0xee>
 800a8e0:	e8df f003 	tbb	[pc, r3]
 800a8e4:	201d0314 	.word	0x201d0314
 800a8e8:	14          	.byte	0x14
 800a8e9:	00          	.byte	0x00
 800a8ea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a8ee:	05e3      	lsls	r3, r4, #23
 800a8f0:	bf48      	it	mi
 800a8f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a8f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8fa:	0d1b      	lsrs	r3, r3, #20
 800a8fc:	051b      	lsls	r3, r3, #20
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1b9      	bne.n	800a876 <_strtod_l+0x76>
 800a902:	f7fe fba1 	bl	8009048 <__errno>
 800a906:	2322      	movs	r3, #34	@ 0x22
 800a908:	6003      	str	r3, [r0, #0]
 800a90a:	e7b4      	b.n	800a876 <_strtod_l+0x76>
 800a90c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a910:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a914:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a918:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a91c:	e7e7      	b.n	800a8ee <_strtod_l+0xee>
 800a91e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800aa8c <_strtod_l+0x28c>
 800a922:	e7e4      	b.n	800a8ee <_strtod_l+0xee>
 800a924:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a928:	f04f 3aff 	mov.w	sl, #4294967295
 800a92c:	e7df      	b.n	800a8ee <_strtod_l+0xee>
 800a92e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	9211      	str	r2, [sp, #68]	@ 0x44
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	2b30      	cmp	r3, #48	@ 0x30
 800a938:	d0f9      	beq.n	800a92e <_strtod_l+0x12e>
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d09b      	beq.n	800a876 <_strtod_l+0x76>
 800a93e:	2301      	movs	r3, #1
 800a940:	2600      	movs	r6, #0
 800a942:	9307      	str	r3, [sp, #28]
 800a944:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a946:	930a      	str	r3, [sp, #40]	@ 0x28
 800a948:	46b1      	mov	r9, r6
 800a94a:	4635      	mov	r5, r6
 800a94c:	220a      	movs	r2, #10
 800a94e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a950:	7804      	ldrb	r4, [r0, #0]
 800a952:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a956:	b2d9      	uxtb	r1, r3
 800a958:	2909      	cmp	r1, #9
 800a95a:	d929      	bls.n	800a9b0 <_strtod_l+0x1b0>
 800a95c:	494a      	ldr	r1, [pc, #296]	@ (800aa88 <_strtod_l+0x288>)
 800a95e:	2201      	movs	r2, #1
 800a960:	f000 ff84 	bl	800b86c <strncmp>
 800a964:	b378      	cbz	r0, 800a9c6 <_strtod_l+0x1c6>
 800a966:	2000      	movs	r0, #0
 800a968:	4622      	mov	r2, r4
 800a96a:	462b      	mov	r3, r5
 800a96c:	4607      	mov	r7, r0
 800a96e:	9006      	str	r0, [sp, #24]
 800a970:	2a65      	cmp	r2, #101	@ 0x65
 800a972:	d001      	beq.n	800a978 <_strtod_l+0x178>
 800a974:	2a45      	cmp	r2, #69	@ 0x45
 800a976:	d117      	bne.n	800a9a8 <_strtod_l+0x1a8>
 800a978:	b91b      	cbnz	r3, 800a982 <_strtod_l+0x182>
 800a97a:	9b07      	ldr	r3, [sp, #28]
 800a97c:	4303      	orrs	r3, r0
 800a97e:	d096      	beq.n	800a8ae <_strtod_l+0xae>
 800a980:	2300      	movs	r3, #0
 800a982:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a986:	f108 0201 	add.w	r2, r8, #1
 800a98a:	9211      	str	r2, [sp, #68]	@ 0x44
 800a98c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a990:	2a2b      	cmp	r2, #43	@ 0x2b
 800a992:	d06b      	beq.n	800aa6c <_strtod_l+0x26c>
 800a994:	2a2d      	cmp	r2, #45	@ 0x2d
 800a996:	d071      	beq.n	800aa7c <_strtod_l+0x27c>
 800a998:	f04f 0e00 	mov.w	lr, #0
 800a99c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a9a0:	2c09      	cmp	r4, #9
 800a9a2:	d979      	bls.n	800aa98 <_strtod_l+0x298>
 800a9a4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a9a8:	2400      	movs	r4, #0
 800a9aa:	e094      	b.n	800aad6 <_strtod_l+0x2d6>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e7c7      	b.n	800a940 <_strtod_l+0x140>
 800a9b0:	2d08      	cmp	r5, #8
 800a9b2:	f100 0001 	add.w	r0, r0, #1
 800a9b6:	bfd4      	ite	le
 800a9b8:	fb02 3909 	mlale	r9, r2, r9, r3
 800a9bc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	9011      	str	r0, [sp, #68]	@ 0x44
 800a9c4:	e7c3      	b.n	800a94e <_strtod_l+0x14e>
 800a9c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	9211      	str	r2, [sp, #68]	@ 0x44
 800a9cc:	785a      	ldrb	r2, [r3, #1]
 800a9ce:	b375      	cbz	r5, 800aa2e <_strtod_l+0x22e>
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	462b      	mov	r3, r5
 800a9d4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a9d8:	2909      	cmp	r1, #9
 800a9da:	d913      	bls.n	800aa04 <_strtod_l+0x204>
 800a9dc:	2101      	movs	r1, #1
 800a9de:	9106      	str	r1, [sp, #24]
 800a9e0:	e7c6      	b.n	800a970 <_strtod_l+0x170>
 800a9e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9e4:	1c5a      	adds	r2, r3, #1
 800a9e6:	9211      	str	r2, [sp, #68]	@ 0x44
 800a9e8:	785a      	ldrb	r2, [r3, #1]
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	2a30      	cmp	r2, #48	@ 0x30
 800a9ee:	d0f8      	beq.n	800a9e2 <_strtod_l+0x1e2>
 800a9f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a9f4:	2b08      	cmp	r3, #8
 800a9f6:	f200 8476 	bhi.w	800b2e6 <_strtod_l+0xae6>
 800a9fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9fe:	4607      	mov	r7, r0
 800aa00:	2000      	movs	r0, #0
 800aa02:	4603      	mov	r3, r0
 800aa04:	3a30      	subs	r2, #48	@ 0x30
 800aa06:	f100 0101 	add.w	r1, r0, #1
 800aa0a:	d023      	beq.n	800aa54 <_strtod_l+0x254>
 800aa0c:	440f      	add	r7, r1
 800aa0e:	eb00 0c03 	add.w	ip, r0, r3
 800aa12:	4619      	mov	r1, r3
 800aa14:	240a      	movs	r4, #10
 800aa16:	4561      	cmp	r1, ip
 800aa18:	d10b      	bne.n	800aa32 <_strtod_l+0x232>
 800aa1a:	1c5c      	adds	r4, r3, #1
 800aa1c:	4403      	add	r3, r0
 800aa1e:	2b08      	cmp	r3, #8
 800aa20:	4404      	add	r4, r0
 800aa22:	dc11      	bgt.n	800aa48 <_strtod_l+0x248>
 800aa24:	230a      	movs	r3, #10
 800aa26:	fb03 2909 	mla	r9, r3, r9, r2
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	e013      	b.n	800aa56 <_strtod_l+0x256>
 800aa2e:	4628      	mov	r0, r5
 800aa30:	e7dc      	b.n	800a9ec <_strtod_l+0x1ec>
 800aa32:	2908      	cmp	r1, #8
 800aa34:	f101 0101 	add.w	r1, r1, #1
 800aa38:	dc02      	bgt.n	800aa40 <_strtod_l+0x240>
 800aa3a:	fb04 f909 	mul.w	r9, r4, r9
 800aa3e:	e7ea      	b.n	800aa16 <_strtod_l+0x216>
 800aa40:	2910      	cmp	r1, #16
 800aa42:	bfd8      	it	le
 800aa44:	4366      	mulle	r6, r4
 800aa46:	e7e6      	b.n	800aa16 <_strtod_l+0x216>
 800aa48:	2b0f      	cmp	r3, #15
 800aa4a:	dcee      	bgt.n	800aa2a <_strtod_l+0x22a>
 800aa4c:	230a      	movs	r3, #10
 800aa4e:	fb03 2606 	mla	r6, r3, r6, r2
 800aa52:	e7ea      	b.n	800aa2a <_strtod_l+0x22a>
 800aa54:	461c      	mov	r4, r3
 800aa56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	9211      	str	r2, [sp, #68]	@ 0x44
 800aa5c:	785a      	ldrb	r2, [r3, #1]
 800aa5e:	4608      	mov	r0, r1
 800aa60:	4623      	mov	r3, r4
 800aa62:	e7b7      	b.n	800a9d4 <_strtod_l+0x1d4>
 800aa64:	2301      	movs	r3, #1
 800aa66:	2700      	movs	r7, #0
 800aa68:	9306      	str	r3, [sp, #24]
 800aa6a:	e786      	b.n	800a97a <_strtod_l+0x17a>
 800aa6c:	f04f 0e00 	mov.w	lr, #0
 800aa70:	f108 0202 	add.w	r2, r8, #2
 800aa74:	9211      	str	r2, [sp, #68]	@ 0x44
 800aa76:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aa7a:	e78f      	b.n	800a99c <_strtod_l+0x19c>
 800aa7c:	f04f 0e01 	mov.w	lr, #1
 800aa80:	e7f6      	b.n	800aa70 <_strtod_l+0x270>
 800aa82:	bf00      	nop
 800aa84:	0800d0a0 	.word	0x0800d0a0
 800aa88:	0800d088 	.word	0x0800d088
 800aa8c:	7ff00000 	.word	0x7ff00000
 800aa90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aa92:	1c54      	adds	r4, r2, #1
 800aa94:	9411      	str	r4, [sp, #68]	@ 0x44
 800aa96:	7852      	ldrb	r2, [r2, #1]
 800aa98:	2a30      	cmp	r2, #48	@ 0x30
 800aa9a:	d0f9      	beq.n	800aa90 <_strtod_l+0x290>
 800aa9c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800aaa0:	2c08      	cmp	r4, #8
 800aaa2:	d881      	bhi.n	800a9a8 <_strtod_l+0x1a8>
 800aaa4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800aaa8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aaaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800aaac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aaae:	1c51      	adds	r1, r2, #1
 800aab0:	9111      	str	r1, [sp, #68]	@ 0x44
 800aab2:	7852      	ldrb	r2, [r2, #1]
 800aab4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800aab8:	2c09      	cmp	r4, #9
 800aaba:	d938      	bls.n	800ab2e <_strtod_l+0x32e>
 800aabc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800aabe:	1b0c      	subs	r4, r1, r4
 800aac0:	2c08      	cmp	r4, #8
 800aac2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800aac6:	dc02      	bgt.n	800aace <_strtod_l+0x2ce>
 800aac8:	4564      	cmp	r4, ip
 800aaca:	bfa8      	it	ge
 800aacc:	4664      	movge	r4, ip
 800aace:	f1be 0f00 	cmp.w	lr, #0
 800aad2:	d000      	beq.n	800aad6 <_strtod_l+0x2d6>
 800aad4:	4264      	negs	r4, r4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d14e      	bne.n	800ab78 <_strtod_l+0x378>
 800aada:	9b07      	ldr	r3, [sp, #28]
 800aadc:	4318      	orrs	r0, r3
 800aade:	f47f aeca 	bne.w	800a876 <_strtod_l+0x76>
 800aae2:	9b06      	ldr	r3, [sp, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f47f aee2 	bne.w	800a8ae <_strtod_l+0xae>
 800aaea:	2a69      	cmp	r2, #105	@ 0x69
 800aaec:	d027      	beq.n	800ab3e <_strtod_l+0x33e>
 800aaee:	dc24      	bgt.n	800ab3a <_strtod_l+0x33a>
 800aaf0:	2a49      	cmp	r2, #73	@ 0x49
 800aaf2:	d024      	beq.n	800ab3e <_strtod_l+0x33e>
 800aaf4:	2a4e      	cmp	r2, #78	@ 0x4e
 800aaf6:	f47f aeda 	bne.w	800a8ae <_strtod_l+0xae>
 800aafa:	4997      	ldr	r1, [pc, #604]	@ (800ad58 <_strtod_l+0x558>)
 800aafc:	a811      	add	r0, sp, #68	@ 0x44
 800aafe:	f001 f9ab 	bl	800be58 <__match>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	f43f aed3 	beq.w	800a8ae <_strtod_l+0xae>
 800ab08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b28      	cmp	r3, #40	@ 0x28
 800ab0e:	d12d      	bne.n	800ab6c <_strtod_l+0x36c>
 800ab10:	4992      	ldr	r1, [pc, #584]	@ (800ad5c <_strtod_l+0x55c>)
 800ab12:	aa14      	add	r2, sp, #80	@ 0x50
 800ab14:	a811      	add	r0, sp, #68	@ 0x44
 800ab16:	f001 f9b3 	bl	800be80 <__hexnan>
 800ab1a:	2805      	cmp	r0, #5
 800ab1c:	d126      	bne.n	800ab6c <_strtod_l+0x36c>
 800ab1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ab20:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800ab24:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ab28:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ab2c:	e6a3      	b.n	800a876 <_strtod_l+0x76>
 800ab2e:	240a      	movs	r4, #10
 800ab30:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ab34:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ab38:	e7b8      	b.n	800aaac <_strtod_l+0x2ac>
 800ab3a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ab3c:	e7db      	b.n	800aaf6 <_strtod_l+0x2f6>
 800ab3e:	4988      	ldr	r1, [pc, #544]	@ (800ad60 <_strtod_l+0x560>)
 800ab40:	a811      	add	r0, sp, #68	@ 0x44
 800ab42:	f001 f989 	bl	800be58 <__match>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	f43f aeb1 	beq.w	800a8ae <_strtod_l+0xae>
 800ab4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab4e:	4985      	ldr	r1, [pc, #532]	@ (800ad64 <_strtod_l+0x564>)
 800ab50:	3b01      	subs	r3, #1
 800ab52:	a811      	add	r0, sp, #68	@ 0x44
 800ab54:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab56:	f001 f97f 	bl	800be58 <__match>
 800ab5a:	b910      	cbnz	r0, 800ab62 <_strtod_l+0x362>
 800ab5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab5e:	3301      	adds	r3, #1
 800ab60:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab62:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800ad78 <_strtod_l+0x578>
 800ab66:	f04f 0a00 	mov.w	sl, #0
 800ab6a:	e684      	b.n	800a876 <_strtod_l+0x76>
 800ab6c:	487e      	ldr	r0, [pc, #504]	@ (800ad68 <_strtod_l+0x568>)
 800ab6e:	f000 feaf 	bl	800b8d0 <nan>
 800ab72:	ec5b ab10 	vmov	sl, fp, d0
 800ab76:	e67e      	b.n	800a876 <_strtod_l+0x76>
 800ab78:	ee07 9a90 	vmov	s15, r9
 800ab7c:	1be2      	subs	r2, r4, r7
 800ab7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ab82:	2d00      	cmp	r5, #0
 800ab84:	bf08      	it	eq
 800ab86:	461d      	moveq	r5, r3
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	bfa8      	it	ge
 800ab90:	2210      	movge	r2, #16
 800ab92:	2b09      	cmp	r3, #9
 800ab94:	ec5b ab17 	vmov	sl, fp, d7
 800ab98:	dc15      	bgt.n	800abc6 <_strtod_l+0x3c6>
 800ab9a:	1be1      	subs	r1, r4, r7
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	f43f ae6a 	beq.w	800a876 <_strtod_l+0x76>
 800aba2:	eba4 0107 	sub.w	r1, r4, r7
 800aba6:	dd72      	ble.n	800ac8e <_strtod_l+0x48e>
 800aba8:	2916      	cmp	r1, #22
 800abaa:	dc59      	bgt.n	800ac60 <_strtod_l+0x460>
 800abac:	4b6f      	ldr	r3, [pc, #444]	@ (800ad6c <_strtod_l+0x56c>)
 800abae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abb4:	ed93 7b00 	vldr	d7, [r3]
 800abb8:	ec4b ab16 	vmov	d6, sl, fp
 800abbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abc0:	ec5b ab17 	vmov	sl, fp, d7
 800abc4:	e657      	b.n	800a876 <_strtod_l+0x76>
 800abc6:	4969      	ldr	r1, [pc, #420]	@ (800ad6c <_strtod_l+0x56c>)
 800abc8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800abcc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800abd0:	ee06 6a90 	vmov	s13, r6
 800abd4:	2b0f      	cmp	r3, #15
 800abd6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800abda:	eea7 6b05 	vfma.f64	d6, d7, d5
 800abde:	ec5b ab16 	vmov	sl, fp, d6
 800abe2:	ddda      	ble.n	800ab9a <_strtod_l+0x39a>
 800abe4:	1a9a      	subs	r2, r3, r2
 800abe6:	1be1      	subs	r1, r4, r7
 800abe8:	440a      	add	r2, r1
 800abea:	2a00      	cmp	r2, #0
 800abec:	f340 8094 	ble.w	800ad18 <_strtod_l+0x518>
 800abf0:	f012 000f 	ands.w	r0, r2, #15
 800abf4:	d00a      	beq.n	800ac0c <_strtod_l+0x40c>
 800abf6:	495d      	ldr	r1, [pc, #372]	@ (800ad6c <_strtod_l+0x56c>)
 800abf8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800abfc:	ed91 7b00 	vldr	d7, [r1]
 800ac00:	ec4b ab16 	vmov	d6, sl, fp
 800ac04:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac08:	ec5b ab17 	vmov	sl, fp, d7
 800ac0c:	f032 020f 	bics.w	r2, r2, #15
 800ac10:	d073      	beq.n	800acfa <_strtod_l+0x4fa>
 800ac12:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800ac16:	dd47      	ble.n	800aca8 <_strtod_l+0x4a8>
 800ac18:	2400      	movs	r4, #0
 800ac1a:	4625      	mov	r5, r4
 800ac1c:	9407      	str	r4, [sp, #28]
 800ac1e:	4626      	mov	r6, r4
 800ac20:	9a05      	ldr	r2, [sp, #20]
 800ac22:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ad78 <_strtod_l+0x578>
 800ac26:	2322      	movs	r3, #34	@ 0x22
 800ac28:	6013      	str	r3, [r2, #0]
 800ac2a:	f04f 0a00 	mov.w	sl, #0
 800ac2e:	9b07      	ldr	r3, [sp, #28]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f43f ae20 	beq.w	800a876 <_strtod_l+0x76>
 800ac36:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ac38:	9805      	ldr	r0, [sp, #20]
 800ac3a:	f7ff f957 	bl	8009eec <_Bfree>
 800ac3e:	9805      	ldr	r0, [sp, #20]
 800ac40:	4631      	mov	r1, r6
 800ac42:	f7ff f953 	bl	8009eec <_Bfree>
 800ac46:	9805      	ldr	r0, [sp, #20]
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f7ff f94f 	bl	8009eec <_Bfree>
 800ac4e:	9907      	ldr	r1, [sp, #28]
 800ac50:	9805      	ldr	r0, [sp, #20]
 800ac52:	f7ff f94b 	bl	8009eec <_Bfree>
 800ac56:	9805      	ldr	r0, [sp, #20]
 800ac58:	4621      	mov	r1, r4
 800ac5a:	f7ff f947 	bl	8009eec <_Bfree>
 800ac5e:	e60a      	b.n	800a876 <_strtod_l+0x76>
 800ac60:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ac64:	1be0      	subs	r0, r4, r7
 800ac66:	4281      	cmp	r1, r0
 800ac68:	dbbc      	blt.n	800abe4 <_strtod_l+0x3e4>
 800ac6a:	4a40      	ldr	r2, [pc, #256]	@ (800ad6c <_strtod_l+0x56c>)
 800ac6c:	f1c3 030f 	rsb	r3, r3, #15
 800ac70:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ac74:	ed91 7b00 	vldr	d7, [r1]
 800ac78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac7a:	ec4b ab16 	vmov	d6, sl, fp
 800ac7e:	1acb      	subs	r3, r1, r3
 800ac80:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ac84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac88:	ed92 6b00 	vldr	d6, [r2]
 800ac8c:	e796      	b.n	800abbc <_strtod_l+0x3bc>
 800ac8e:	3116      	adds	r1, #22
 800ac90:	dba8      	blt.n	800abe4 <_strtod_l+0x3e4>
 800ac92:	4b36      	ldr	r3, [pc, #216]	@ (800ad6c <_strtod_l+0x56c>)
 800ac94:	1b3c      	subs	r4, r7, r4
 800ac96:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ac9a:	ed94 7b00 	vldr	d7, [r4]
 800ac9e:	ec4b ab16 	vmov	d6, sl, fp
 800aca2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aca6:	e78b      	b.n	800abc0 <_strtod_l+0x3c0>
 800aca8:	2000      	movs	r0, #0
 800acaa:	ec4b ab17 	vmov	d7, sl, fp
 800acae:	4e30      	ldr	r6, [pc, #192]	@ (800ad70 <_strtod_l+0x570>)
 800acb0:	1112      	asrs	r2, r2, #4
 800acb2:	4601      	mov	r1, r0
 800acb4:	2a01      	cmp	r2, #1
 800acb6:	dc23      	bgt.n	800ad00 <_strtod_l+0x500>
 800acb8:	b108      	cbz	r0, 800acbe <_strtod_l+0x4be>
 800acba:	ec5b ab17 	vmov	sl, fp, d7
 800acbe:	4a2c      	ldr	r2, [pc, #176]	@ (800ad70 <_strtod_l+0x570>)
 800acc0:	482c      	ldr	r0, [pc, #176]	@ (800ad74 <_strtod_l+0x574>)
 800acc2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800acc6:	ed92 7b00 	vldr	d7, [r2]
 800acca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800acce:	ec4b ab16 	vmov	d6, sl, fp
 800acd2:	4a29      	ldr	r2, [pc, #164]	@ (800ad78 <_strtod_l+0x578>)
 800acd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acd8:	ee17 1a90 	vmov	r1, s15
 800acdc:	400a      	ands	r2, r1
 800acde:	4282      	cmp	r2, r0
 800ace0:	ec5b ab17 	vmov	sl, fp, d7
 800ace4:	d898      	bhi.n	800ac18 <_strtod_l+0x418>
 800ace6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800acea:	4282      	cmp	r2, r0
 800acec:	bf86      	itte	hi
 800acee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ad7c <_strtod_l+0x57c>
 800acf2:	f04f 3aff 	movhi.w	sl, #4294967295
 800acf6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800acfa:	2200      	movs	r2, #0
 800acfc:	9206      	str	r2, [sp, #24]
 800acfe:	e076      	b.n	800adee <_strtod_l+0x5ee>
 800ad00:	f012 0f01 	tst.w	r2, #1
 800ad04:	d004      	beq.n	800ad10 <_strtod_l+0x510>
 800ad06:	ed96 6b00 	vldr	d6, [r6]
 800ad0a:	2001      	movs	r0, #1
 800ad0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad10:	3101      	adds	r1, #1
 800ad12:	1052      	asrs	r2, r2, #1
 800ad14:	3608      	adds	r6, #8
 800ad16:	e7cd      	b.n	800acb4 <_strtod_l+0x4b4>
 800ad18:	d0ef      	beq.n	800acfa <_strtod_l+0x4fa>
 800ad1a:	4252      	negs	r2, r2
 800ad1c:	f012 000f 	ands.w	r0, r2, #15
 800ad20:	d00a      	beq.n	800ad38 <_strtod_l+0x538>
 800ad22:	4912      	ldr	r1, [pc, #72]	@ (800ad6c <_strtod_l+0x56c>)
 800ad24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ad28:	ed91 7b00 	vldr	d7, [r1]
 800ad2c:	ec4b ab16 	vmov	d6, sl, fp
 800ad30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ad34:	ec5b ab17 	vmov	sl, fp, d7
 800ad38:	1112      	asrs	r2, r2, #4
 800ad3a:	d0de      	beq.n	800acfa <_strtod_l+0x4fa>
 800ad3c:	2a1f      	cmp	r2, #31
 800ad3e:	dd1f      	ble.n	800ad80 <_strtod_l+0x580>
 800ad40:	2400      	movs	r4, #0
 800ad42:	4625      	mov	r5, r4
 800ad44:	9407      	str	r4, [sp, #28]
 800ad46:	4626      	mov	r6, r4
 800ad48:	9a05      	ldr	r2, [sp, #20]
 800ad4a:	2322      	movs	r3, #34	@ 0x22
 800ad4c:	f04f 0a00 	mov.w	sl, #0
 800ad50:	f04f 0b00 	mov.w	fp, #0
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	e76a      	b.n	800ac2e <_strtod_l+0x42e>
 800ad58:	0800ce79 	.word	0x0800ce79
 800ad5c:	0800d08c 	.word	0x0800d08c
 800ad60:	0800ce71 	.word	0x0800ce71
 800ad64:	0800cea8 	.word	0x0800cea8
 800ad68:	0800d235 	.word	0x0800d235
 800ad6c:	0800cfc0 	.word	0x0800cfc0
 800ad70:	0800cf98 	.word	0x0800cf98
 800ad74:	7ca00000 	.word	0x7ca00000
 800ad78:	7ff00000 	.word	0x7ff00000
 800ad7c:	7fefffff 	.word	0x7fefffff
 800ad80:	f012 0110 	ands.w	r1, r2, #16
 800ad84:	bf18      	it	ne
 800ad86:	216a      	movne	r1, #106	@ 0x6a
 800ad88:	9106      	str	r1, [sp, #24]
 800ad8a:	ec4b ab17 	vmov	d7, sl, fp
 800ad8e:	49b0      	ldr	r1, [pc, #704]	@ (800b050 <_strtod_l+0x850>)
 800ad90:	2000      	movs	r0, #0
 800ad92:	07d6      	lsls	r6, r2, #31
 800ad94:	d504      	bpl.n	800ada0 <_strtod_l+0x5a0>
 800ad96:	ed91 6b00 	vldr	d6, [r1]
 800ad9a:	2001      	movs	r0, #1
 800ad9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ada0:	1052      	asrs	r2, r2, #1
 800ada2:	f101 0108 	add.w	r1, r1, #8
 800ada6:	d1f4      	bne.n	800ad92 <_strtod_l+0x592>
 800ada8:	b108      	cbz	r0, 800adae <_strtod_l+0x5ae>
 800adaa:	ec5b ab17 	vmov	sl, fp, d7
 800adae:	9a06      	ldr	r2, [sp, #24]
 800adb0:	b1b2      	cbz	r2, 800ade0 <_strtod_l+0x5e0>
 800adb2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800adb6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800adba:	2a00      	cmp	r2, #0
 800adbc:	4658      	mov	r0, fp
 800adbe:	dd0f      	ble.n	800ade0 <_strtod_l+0x5e0>
 800adc0:	2a1f      	cmp	r2, #31
 800adc2:	dd55      	ble.n	800ae70 <_strtod_l+0x670>
 800adc4:	2a34      	cmp	r2, #52	@ 0x34
 800adc6:	bfde      	ittt	le
 800adc8:	f04f 32ff 	movle.w	r2, #4294967295
 800adcc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800add0:	408a      	lslle	r2, r1
 800add2:	f04f 0a00 	mov.w	sl, #0
 800add6:	bfcc      	ite	gt
 800add8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800addc:	ea02 0b00 	andle.w	fp, r2, r0
 800ade0:	ec4b ab17 	vmov	d7, sl, fp
 800ade4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ade8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adec:	d0a8      	beq.n	800ad40 <_strtod_l+0x540>
 800adee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adf0:	9805      	ldr	r0, [sp, #20]
 800adf2:	f8cd 9000 	str.w	r9, [sp]
 800adf6:	462a      	mov	r2, r5
 800adf8:	f7ff f8e0 	bl	8009fbc <__s2b>
 800adfc:	9007      	str	r0, [sp, #28]
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f af0a 	beq.w	800ac18 <_strtod_l+0x418>
 800ae04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae06:	1b3f      	subs	r7, r7, r4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfb4      	ite	lt
 800ae0c:	463b      	movlt	r3, r7
 800ae0e:	2300      	movge	r3, #0
 800ae10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae14:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800b040 <_strtod_l+0x840>
 800ae18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae1c:	2400      	movs	r4, #0
 800ae1e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae20:	4625      	mov	r5, r4
 800ae22:	9b07      	ldr	r3, [sp, #28]
 800ae24:	9805      	ldr	r0, [sp, #20]
 800ae26:	6859      	ldr	r1, [r3, #4]
 800ae28:	f7ff f820 	bl	8009e6c <_Balloc>
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	f43f aef6 	beq.w	800ac20 <_strtod_l+0x420>
 800ae34:	9b07      	ldr	r3, [sp, #28]
 800ae36:	691a      	ldr	r2, [r3, #16]
 800ae38:	ec4b ab19 	vmov	d9, sl, fp
 800ae3c:	3202      	adds	r2, #2
 800ae3e:	f103 010c 	add.w	r1, r3, #12
 800ae42:	0092      	lsls	r2, r2, #2
 800ae44:	300c      	adds	r0, #12
 800ae46:	f000 fd33 	bl	800b8b0 <memcpy>
 800ae4a:	eeb0 0b49 	vmov.f64	d0, d9
 800ae4e:	9805      	ldr	r0, [sp, #20]
 800ae50:	aa14      	add	r2, sp, #80	@ 0x50
 800ae52:	a913      	add	r1, sp, #76	@ 0x4c
 800ae54:	f7ff fbee 	bl	800a634 <__d2b>
 800ae58:	9012      	str	r0, [sp, #72]	@ 0x48
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	f43f aee0 	beq.w	800ac20 <_strtod_l+0x420>
 800ae60:	9805      	ldr	r0, [sp, #20]
 800ae62:	2101      	movs	r1, #1
 800ae64:	f7ff f940 	bl	800a0e8 <__i2b>
 800ae68:	4605      	mov	r5, r0
 800ae6a:	b940      	cbnz	r0, 800ae7e <_strtod_l+0x67e>
 800ae6c:	2500      	movs	r5, #0
 800ae6e:	e6d7      	b.n	800ac20 <_strtod_l+0x420>
 800ae70:	f04f 31ff 	mov.w	r1, #4294967295
 800ae74:	fa01 f202 	lsl.w	r2, r1, r2
 800ae78:	ea02 0a0a 	and.w	sl, r2, sl
 800ae7c:	e7b0      	b.n	800ade0 <_strtod_l+0x5e0>
 800ae7e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ae80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ae82:	2f00      	cmp	r7, #0
 800ae84:	bfab      	itete	ge
 800ae86:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ae88:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ae8a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ae8e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ae92:	bfac      	ite	ge
 800ae94:	eb07 0903 	addge.w	r9, r7, r3
 800ae98:	eba3 0807 	sublt.w	r8, r3, r7
 800ae9c:	9b06      	ldr	r3, [sp, #24]
 800ae9e:	1aff      	subs	r7, r7, r3
 800aea0:	4417      	add	r7, r2
 800aea2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800aea6:	4a6b      	ldr	r2, [pc, #428]	@ (800b054 <_strtod_l+0x854>)
 800aea8:	3f01      	subs	r7, #1
 800aeaa:	4297      	cmp	r7, r2
 800aeac:	da51      	bge.n	800af52 <_strtod_l+0x752>
 800aeae:	1bd1      	subs	r1, r2, r7
 800aeb0:	291f      	cmp	r1, #31
 800aeb2:	eba3 0301 	sub.w	r3, r3, r1
 800aeb6:	f04f 0201 	mov.w	r2, #1
 800aeba:	dc3e      	bgt.n	800af3a <_strtod_l+0x73a>
 800aebc:	408a      	lsls	r2, r1
 800aebe:	920c      	str	r2, [sp, #48]	@ 0x30
 800aec0:	2200      	movs	r2, #0
 800aec2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aec4:	eb09 0703 	add.w	r7, r9, r3
 800aec8:	4498      	add	r8, r3
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	45b9      	cmp	r9, r7
 800aece:	4498      	add	r8, r3
 800aed0:	464b      	mov	r3, r9
 800aed2:	bfa8      	it	ge
 800aed4:	463b      	movge	r3, r7
 800aed6:	4543      	cmp	r3, r8
 800aed8:	bfa8      	it	ge
 800aeda:	4643      	movge	r3, r8
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bfc2      	ittt	gt
 800aee0:	1aff      	subgt	r7, r7, r3
 800aee2:	eba8 0803 	subgt.w	r8, r8, r3
 800aee6:	eba9 0903 	subgt.w	r9, r9, r3
 800aeea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	dd16      	ble.n	800af1e <_strtod_l+0x71e>
 800aef0:	4629      	mov	r1, r5
 800aef2:	9805      	ldr	r0, [sp, #20]
 800aef4:	461a      	mov	r2, r3
 800aef6:	f7ff f9b7 	bl	800a268 <__pow5mult>
 800aefa:	4605      	mov	r5, r0
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d0b5      	beq.n	800ae6c <_strtod_l+0x66c>
 800af00:	4601      	mov	r1, r0
 800af02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af04:	9805      	ldr	r0, [sp, #20]
 800af06:	f7ff f905 	bl	800a114 <__multiply>
 800af0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800af0c:	2800      	cmp	r0, #0
 800af0e:	f43f ae87 	beq.w	800ac20 <_strtod_l+0x420>
 800af12:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800af14:	9805      	ldr	r0, [sp, #20]
 800af16:	f7fe ffe9 	bl	8009eec <_Bfree>
 800af1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af1c:	9312      	str	r3, [sp, #72]	@ 0x48
 800af1e:	2f00      	cmp	r7, #0
 800af20:	dc1b      	bgt.n	800af5a <_strtod_l+0x75a>
 800af22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	dd21      	ble.n	800af6c <_strtod_l+0x76c>
 800af28:	4631      	mov	r1, r6
 800af2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af2c:	9805      	ldr	r0, [sp, #20]
 800af2e:	f7ff f99b 	bl	800a268 <__pow5mult>
 800af32:	4606      	mov	r6, r0
 800af34:	b9d0      	cbnz	r0, 800af6c <_strtod_l+0x76c>
 800af36:	2600      	movs	r6, #0
 800af38:	e672      	b.n	800ac20 <_strtod_l+0x420>
 800af3a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800af3e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800af42:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800af46:	37e2      	adds	r7, #226	@ 0xe2
 800af48:	fa02 f107 	lsl.w	r1, r2, r7
 800af4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800af4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800af50:	e7b8      	b.n	800aec4 <_strtod_l+0x6c4>
 800af52:	2200      	movs	r2, #0
 800af54:	920b      	str	r2, [sp, #44]	@ 0x2c
 800af56:	2201      	movs	r2, #1
 800af58:	e7f9      	b.n	800af4e <_strtod_l+0x74e>
 800af5a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800af5c:	9805      	ldr	r0, [sp, #20]
 800af5e:	463a      	mov	r2, r7
 800af60:	f7ff f9dc 	bl	800a31c <__lshift>
 800af64:	9012      	str	r0, [sp, #72]	@ 0x48
 800af66:	2800      	cmp	r0, #0
 800af68:	d1db      	bne.n	800af22 <_strtod_l+0x722>
 800af6a:	e659      	b.n	800ac20 <_strtod_l+0x420>
 800af6c:	f1b8 0f00 	cmp.w	r8, #0
 800af70:	dd07      	ble.n	800af82 <_strtod_l+0x782>
 800af72:	4631      	mov	r1, r6
 800af74:	9805      	ldr	r0, [sp, #20]
 800af76:	4642      	mov	r2, r8
 800af78:	f7ff f9d0 	bl	800a31c <__lshift>
 800af7c:	4606      	mov	r6, r0
 800af7e:	2800      	cmp	r0, #0
 800af80:	d0d9      	beq.n	800af36 <_strtod_l+0x736>
 800af82:	f1b9 0f00 	cmp.w	r9, #0
 800af86:	dd08      	ble.n	800af9a <_strtod_l+0x79a>
 800af88:	4629      	mov	r1, r5
 800af8a:	9805      	ldr	r0, [sp, #20]
 800af8c:	464a      	mov	r2, r9
 800af8e:	f7ff f9c5 	bl	800a31c <__lshift>
 800af92:	4605      	mov	r5, r0
 800af94:	2800      	cmp	r0, #0
 800af96:	f43f ae43 	beq.w	800ac20 <_strtod_l+0x420>
 800af9a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800af9c:	9805      	ldr	r0, [sp, #20]
 800af9e:	4632      	mov	r2, r6
 800afa0:	f7ff fa44 	bl	800a42c <__mdiff>
 800afa4:	4604      	mov	r4, r0
 800afa6:	2800      	cmp	r0, #0
 800afa8:	f43f ae3a 	beq.w	800ac20 <_strtod_l+0x420>
 800afac:	2300      	movs	r3, #0
 800afae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800afb2:	60c3      	str	r3, [r0, #12]
 800afb4:	4629      	mov	r1, r5
 800afb6:	f7ff fa1d 	bl	800a3f4 <__mcmp>
 800afba:	2800      	cmp	r0, #0
 800afbc:	da4e      	bge.n	800b05c <_strtod_l+0x85c>
 800afbe:	ea58 080a 	orrs.w	r8, r8, sl
 800afc2:	d174      	bne.n	800b0ae <_strtod_l+0x8ae>
 800afc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d170      	bne.n	800b0ae <_strtod_l+0x8ae>
 800afcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800afd0:	0d1b      	lsrs	r3, r3, #20
 800afd2:	051b      	lsls	r3, r3, #20
 800afd4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800afd8:	d969      	bls.n	800b0ae <_strtod_l+0x8ae>
 800afda:	6963      	ldr	r3, [r4, #20]
 800afdc:	b913      	cbnz	r3, 800afe4 <_strtod_l+0x7e4>
 800afde:	6923      	ldr	r3, [r4, #16]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	dd64      	ble.n	800b0ae <_strtod_l+0x8ae>
 800afe4:	4621      	mov	r1, r4
 800afe6:	2201      	movs	r2, #1
 800afe8:	9805      	ldr	r0, [sp, #20]
 800afea:	f7ff f997 	bl	800a31c <__lshift>
 800afee:	4629      	mov	r1, r5
 800aff0:	4604      	mov	r4, r0
 800aff2:	f7ff f9ff 	bl	800a3f4 <__mcmp>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	dd59      	ble.n	800b0ae <_strtod_l+0x8ae>
 800affa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800affe:	9a06      	ldr	r2, [sp, #24]
 800b000:	0d1b      	lsrs	r3, r3, #20
 800b002:	051b      	lsls	r3, r3, #20
 800b004:	2a00      	cmp	r2, #0
 800b006:	d070      	beq.n	800b0ea <_strtod_l+0x8ea>
 800b008:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b00c:	d86d      	bhi.n	800b0ea <_strtod_l+0x8ea>
 800b00e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b012:	f67f ae99 	bls.w	800ad48 <_strtod_l+0x548>
 800b016:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800b048 <_strtod_l+0x848>
 800b01a:	ec4b ab16 	vmov	d6, sl, fp
 800b01e:	4b0e      	ldr	r3, [pc, #56]	@ (800b058 <_strtod_l+0x858>)
 800b020:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b024:	ee17 2a90 	vmov	r2, s15
 800b028:	4013      	ands	r3, r2
 800b02a:	ec5b ab17 	vmov	sl, fp, d7
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f47f ae01 	bne.w	800ac36 <_strtod_l+0x436>
 800b034:	9a05      	ldr	r2, [sp, #20]
 800b036:	2322      	movs	r3, #34	@ 0x22
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	e5fc      	b.n	800ac36 <_strtod_l+0x436>
 800b03c:	f3af 8000 	nop.w
 800b040:	ffc00000 	.word	0xffc00000
 800b044:	41dfffff 	.word	0x41dfffff
 800b048:	00000000 	.word	0x00000000
 800b04c:	39500000 	.word	0x39500000
 800b050:	0800d0b8 	.word	0x0800d0b8
 800b054:	fffffc02 	.word	0xfffffc02
 800b058:	7ff00000 	.word	0x7ff00000
 800b05c:	46d9      	mov	r9, fp
 800b05e:	d15d      	bne.n	800b11c <_strtod_l+0x91c>
 800b060:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b064:	f1b8 0f00 	cmp.w	r8, #0
 800b068:	d02a      	beq.n	800b0c0 <_strtod_l+0x8c0>
 800b06a:	4aab      	ldr	r2, [pc, #684]	@ (800b318 <_strtod_l+0xb18>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d12a      	bne.n	800b0c6 <_strtod_l+0x8c6>
 800b070:	9b06      	ldr	r3, [sp, #24]
 800b072:	4652      	mov	r2, sl
 800b074:	b1fb      	cbz	r3, 800b0b6 <_strtod_l+0x8b6>
 800b076:	4ba9      	ldr	r3, [pc, #676]	@ (800b31c <_strtod_l+0xb1c>)
 800b078:	ea0b 0303 	and.w	r3, fp, r3
 800b07c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b080:	f04f 31ff 	mov.w	r1, #4294967295
 800b084:	d81a      	bhi.n	800b0bc <_strtod_l+0x8bc>
 800b086:	0d1b      	lsrs	r3, r3, #20
 800b088:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b08c:	fa01 f303 	lsl.w	r3, r1, r3
 800b090:	429a      	cmp	r2, r3
 800b092:	d118      	bne.n	800b0c6 <_strtod_l+0x8c6>
 800b094:	4ba2      	ldr	r3, [pc, #648]	@ (800b320 <_strtod_l+0xb20>)
 800b096:	4599      	cmp	r9, r3
 800b098:	d102      	bne.n	800b0a0 <_strtod_l+0x8a0>
 800b09a:	3201      	adds	r2, #1
 800b09c:	f43f adc0 	beq.w	800ac20 <_strtod_l+0x420>
 800b0a0:	4b9e      	ldr	r3, [pc, #632]	@ (800b31c <_strtod_l+0xb1c>)
 800b0a2:	ea09 0303 	and.w	r3, r9, r3
 800b0a6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800b0aa:	f04f 0a00 	mov.w	sl, #0
 800b0ae:	9b06      	ldr	r3, [sp, #24]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1b0      	bne.n	800b016 <_strtod_l+0x816>
 800b0b4:	e5bf      	b.n	800ac36 <_strtod_l+0x436>
 800b0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ba:	e7e9      	b.n	800b090 <_strtod_l+0x890>
 800b0bc:	460b      	mov	r3, r1
 800b0be:	e7e7      	b.n	800b090 <_strtod_l+0x890>
 800b0c0:	ea53 030a 	orrs.w	r3, r3, sl
 800b0c4:	d099      	beq.n	800affa <_strtod_l+0x7fa>
 800b0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c8:	b1c3      	cbz	r3, 800b0fc <_strtod_l+0x8fc>
 800b0ca:	ea13 0f09 	tst.w	r3, r9
 800b0ce:	d0ee      	beq.n	800b0ae <_strtod_l+0x8ae>
 800b0d0:	9a06      	ldr	r2, [sp, #24]
 800b0d2:	4650      	mov	r0, sl
 800b0d4:	4659      	mov	r1, fp
 800b0d6:	f1b8 0f00 	cmp.w	r8, #0
 800b0da:	d013      	beq.n	800b104 <_strtod_l+0x904>
 800b0dc:	f7ff fb75 	bl	800a7ca <sulp>
 800b0e0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800b0e4:	ec5b ab17 	vmov	sl, fp, d7
 800b0e8:	e7e1      	b.n	800b0ae <_strtod_l+0x8ae>
 800b0ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b0ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b0f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b0f6:	f04f 3aff 	mov.w	sl, #4294967295
 800b0fa:	e7d8      	b.n	800b0ae <_strtod_l+0x8ae>
 800b0fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0fe:	ea13 0f0a 	tst.w	r3, sl
 800b102:	e7e4      	b.n	800b0ce <_strtod_l+0x8ce>
 800b104:	f7ff fb61 	bl	800a7ca <sulp>
 800b108:	ee39 0b40 	vsub.f64	d0, d9, d0
 800b10c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b114:	ec5b ab10 	vmov	sl, fp, d0
 800b118:	d1c9      	bne.n	800b0ae <_strtod_l+0x8ae>
 800b11a:	e615      	b.n	800ad48 <_strtod_l+0x548>
 800b11c:	4629      	mov	r1, r5
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff fae0 	bl	800a6e4 <__ratio>
 800b124:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b128:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b130:	d85d      	bhi.n	800b1ee <_strtod_l+0x9ee>
 800b132:	f1b8 0f00 	cmp.w	r8, #0
 800b136:	d164      	bne.n	800b202 <_strtod_l+0xa02>
 800b138:	f1ba 0f00 	cmp.w	sl, #0
 800b13c:	d14b      	bne.n	800b1d6 <_strtod_l+0x9d6>
 800b13e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b142:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d160      	bne.n	800b20c <_strtod_l+0xa0c>
 800b14a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800b14e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b156:	d401      	bmi.n	800b15c <_strtod_l+0x95c>
 800b158:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b15c:	eeb1 ab48 	vneg.f64	d10, d8
 800b160:	486e      	ldr	r0, [pc, #440]	@ (800b31c <_strtod_l+0xb1c>)
 800b162:	4970      	ldr	r1, [pc, #448]	@ (800b324 <_strtod_l+0xb24>)
 800b164:	ea09 0700 	and.w	r7, r9, r0
 800b168:	428f      	cmp	r7, r1
 800b16a:	ec53 2b1a 	vmov	r2, r3, d10
 800b16e:	d17d      	bne.n	800b26c <_strtod_l+0xa6c>
 800b170:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b174:	ec4b ab1c 	vmov	d12, sl, fp
 800b178:	eeb0 0b4c 	vmov.f64	d0, d12
 800b17c:	f7ff f9ea 	bl	800a554 <__ulp>
 800b180:	4866      	ldr	r0, [pc, #408]	@ (800b31c <_strtod_l+0xb1c>)
 800b182:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b186:	ee1c 3a90 	vmov	r3, s25
 800b18a:	4a67      	ldr	r2, [pc, #412]	@ (800b328 <_strtod_l+0xb28>)
 800b18c:	ea03 0100 	and.w	r1, r3, r0
 800b190:	4291      	cmp	r1, r2
 800b192:	ec5b ab1c 	vmov	sl, fp, d12
 800b196:	d93c      	bls.n	800b212 <_strtod_l+0xa12>
 800b198:	ee19 2a90 	vmov	r2, s19
 800b19c:	4b60      	ldr	r3, [pc, #384]	@ (800b320 <_strtod_l+0xb20>)
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d104      	bne.n	800b1ac <_strtod_l+0x9ac>
 800b1a2:	ee19 3a10 	vmov	r3, s18
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	f43f ad3a 	beq.w	800ac20 <_strtod_l+0x420>
 800b1ac:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800b320 <_strtod_l+0xb20>
 800b1b0:	f04f 3aff 	mov.w	sl, #4294967295
 800b1b4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b1b6:	9805      	ldr	r0, [sp, #20]
 800b1b8:	f7fe fe98 	bl	8009eec <_Bfree>
 800b1bc:	9805      	ldr	r0, [sp, #20]
 800b1be:	4631      	mov	r1, r6
 800b1c0:	f7fe fe94 	bl	8009eec <_Bfree>
 800b1c4:	9805      	ldr	r0, [sp, #20]
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7fe fe90 	bl	8009eec <_Bfree>
 800b1cc:	9805      	ldr	r0, [sp, #20]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	f7fe fe8c 	bl	8009eec <_Bfree>
 800b1d4:	e625      	b.n	800ae22 <_strtod_l+0x622>
 800b1d6:	f1ba 0f01 	cmp.w	sl, #1
 800b1da:	d103      	bne.n	800b1e4 <_strtod_l+0x9e4>
 800b1dc:	f1bb 0f00 	cmp.w	fp, #0
 800b1e0:	f43f adb2 	beq.w	800ad48 <_strtod_l+0x548>
 800b1e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b1e8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b1ec:	e7b8      	b.n	800b160 <_strtod_l+0x960>
 800b1ee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b1f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b1f6:	f1b8 0f00 	cmp.w	r8, #0
 800b1fa:	d0af      	beq.n	800b15c <_strtod_l+0x95c>
 800b1fc:	eeb0 ab48 	vmov.f64	d10, d8
 800b200:	e7ae      	b.n	800b160 <_strtod_l+0x960>
 800b202:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800b206:	eeb0 8b4a 	vmov.f64	d8, d10
 800b20a:	e7a9      	b.n	800b160 <_strtod_l+0x960>
 800b20c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b210:	e7a6      	b.n	800b160 <_strtod_l+0x960>
 800b212:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	46d9      	mov	r9, fp
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1ca      	bne.n	800b1b4 <_strtod_l+0x9b4>
 800b21e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b222:	0d1b      	lsrs	r3, r3, #20
 800b224:	051b      	lsls	r3, r3, #20
 800b226:	429f      	cmp	r7, r3
 800b228:	d1c4      	bne.n	800b1b4 <_strtod_l+0x9b4>
 800b22a:	ec51 0b18 	vmov	r0, r1, d8
 800b22e:	f7f5 fa83 	bl	8000738 <__aeabi_d2lz>
 800b232:	f7f5 fa3b 	bl	80006ac <__aeabi_l2d>
 800b236:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800b23a:	ec41 0b17 	vmov	d7, r0, r1
 800b23e:	ea49 090a 	orr.w	r9, r9, sl
 800b242:	ea59 0908 	orrs.w	r9, r9, r8
 800b246:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b24a:	d03c      	beq.n	800b2c6 <_strtod_l+0xac6>
 800b24c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b300 <_strtod_l+0xb00>
 800b250:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b258:	f53f aced 	bmi.w	800ac36 <_strtod_l+0x436>
 800b25c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b308 <_strtod_l+0xb08>
 800b260:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b268:	dda4      	ble.n	800b1b4 <_strtod_l+0x9b4>
 800b26a:	e4e4      	b.n	800ac36 <_strtod_l+0x436>
 800b26c:	9906      	ldr	r1, [sp, #24]
 800b26e:	b1e1      	cbz	r1, 800b2aa <_strtod_l+0xaaa>
 800b270:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800b274:	d819      	bhi.n	800b2aa <_strtod_l+0xaaa>
 800b276:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27e:	d811      	bhi.n	800b2a4 <_strtod_l+0xaa4>
 800b280:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b284:	ee18 3a10 	vmov	r3, s16
 800b288:	2b01      	cmp	r3, #1
 800b28a:	bf38      	it	cc
 800b28c:	2301      	movcc	r3, #1
 800b28e:	ee08 3a10 	vmov	s16, r3
 800b292:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b296:	f1b8 0f00 	cmp.w	r8, #0
 800b29a:	d111      	bne.n	800b2c0 <_strtod_l+0xac0>
 800b29c:	eeb1 7b48 	vneg.f64	d7, d8
 800b2a0:	ec53 2b17 	vmov	r2, r3, d7
 800b2a4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800b2a8:	1bcb      	subs	r3, r1, r7
 800b2aa:	eeb0 0b49 	vmov.f64	d0, d9
 800b2ae:	ec43 2b1a 	vmov	d10, r2, r3
 800b2b2:	f7ff f94f 	bl	800a554 <__ulp>
 800b2b6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800b2ba:	ec5b ab19 	vmov	sl, fp, d9
 800b2be:	e7aa      	b.n	800b216 <_strtod_l+0xa16>
 800b2c0:	eeb0 7b48 	vmov.f64	d7, d8
 800b2c4:	e7ec      	b.n	800b2a0 <_strtod_l+0xaa0>
 800b2c6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800b310 <_strtod_l+0xb10>
 800b2ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d2:	f57f af6f 	bpl.w	800b1b4 <_strtod_l+0x9b4>
 800b2d6:	e4ae      	b.n	800ac36 <_strtod_l+0x436>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	9308      	str	r3, [sp, #32]
 800b2dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	f7ff bacc 	b.w	800a87e <_strtod_l+0x7e>
 800b2e6:	2a65      	cmp	r2, #101	@ 0x65
 800b2e8:	f43f abbc 	beq.w	800aa64 <_strtod_l+0x264>
 800b2ec:	2a45      	cmp	r2, #69	@ 0x45
 800b2ee:	f43f abb9 	beq.w	800aa64 <_strtod_l+0x264>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	9306      	str	r3, [sp, #24]
 800b2f6:	f7ff bbf0 	b.w	800aada <_strtod_l+0x2da>
 800b2fa:	bf00      	nop
 800b2fc:	f3af 8000 	nop.w
 800b300:	94a03595 	.word	0x94a03595
 800b304:	3fdfffff 	.word	0x3fdfffff
 800b308:	35afe535 	.word	0x35afe535
 800b30c:	3fe00000 	.word	0x3fe00000
 800b310:	94a03595 	.word	0x94a03595
 800b314:	3fcfffff 	.word	0x3fcfffff
 800b318:	000fffff 	.word	0x000fffff
 800b31c:	7ff00000 	.word	0x7ff00000
 800b320:	7fefffff 	.word	0x7fefffff
 800b324:	7fe00000 	.word	0x7fe00000
 800b328:	7c9fffff 	.word	0x7c9fffff

0800b32c <_strtod_r>:
 800b32c:	4b01      	ldr	r3, [pc, #4]	@ (800b334 <_strtod_r+0x8>)
 800b32e:	f7ff ba67 	b.w	800a800 <_strtod_l>
 800b332:	bf00      	nop
 800b334:	2400006c 	.word	0x2400006c

0800b338 <_strtol_l.constprop.0>:
 800b338:	2b24      	cmp	r3, #36	@ 0x24
 800b33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33e:	4686      	mov	lr, r0
 800b340:	4690      	mov	r8, r2
 800b342:	d801      	bhi.n	800b348 <_strtol_l.constprop.0+0x10>
 800b344:	2b01      	cmp	r3, #1
 800b346:	d106      	bne.n	800b356 <_strtol_l.constprop.0+0x1e>
 800b348:	f7fd fe7e 	bl	8009048 <__errno>
 800b34c:	2316      	movs	r3, #22
 800b34e:	6003      	str	r3, [r0, #0]
 800b350:	2000      	movs	r0, #0
 800b352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b356:	4834      	ldr	r0, [pc, #208]	@ (800b428 <_strtol_l.constprop.0+0xf0>)
 800b358:	460d      	mov	r5, r1
 800b35a:	462a      	mov	r2, r5
 800b35c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b360:	5d06      	ldrb	r6, [r0, r4]
 800b362:	f016 0608 	ands.w	r6, r6, #8
 800b366:	d1f8      	bne.n	800b35a <_strtol_l.constprop.0+0x22>
 800b368:	2c2d      	cmp	r4, #45	@ 0x2d
 800b36a:	d12d      	bne.n	800b3c8 <_strtol_l.constprop.0+0x90>
 800b36c:	782c      	ldrb	r4, [r5, #0]
 800b36e:	2601      	movs	r6, #1
 800b370:	1c95      	adds	r5, r2, #2
 800b372:	f033 0210 	bics.w	r2, r3, #16
 800b376:	d109      	bne.n	800b38c <_strtol_l.constprop.0+0x54>
 800b378:	2c30      	cmp	r4, #48	@ 0x30
 800b37a:	d12a      	bne.n	800b3d2 <_strtol_l.constprop.0+0x9a>
 800b37c:	782a      	ldrb	r2, [r5, #0]
 800b37e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b382:	2a58      	cmp	r2, #88	@ 0x58
 800b384:	d125      	bne.n	800b3d2 <_strtol_l.constprop.0+0x9a>
 800b386:	786c      	ldrb	r4, [r5, #1]
 800b388:	2310      	movs	r3, #16
 800b38a:	3502      	adds	r5, #2
 800b38c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b390:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b394:	2200      	movs	r2, #0
 800b396:	fbbc f9f3 	udiv	r9, ip, r3
 800b39a:	4610      	mov	r0, r2
 800b39c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b3a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b3a4:	2f09      	cmp	r7, #9
 800b3a6:	d81b      	bhi.n	800b3e0 <_strtol_l.constprop.0+0xa8>
 800b3a8:	463c      	mov	r4, r7
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	dd27      	ble.n	800b3fe <_strtol_l.constprop.0+0xc6>
 800b3ae:	1c57      	adds	r7, r2, #1
 800b3b0:	d007      	beq.n	800b3c2 <_strtol_l.constprop.0+0x8a>
 800b3b2:	4581      	cmp	r9, r0
 800b3b4:	d320      	bcc.n	800b3f8 <_strtol_l.constprop.0+0xc0>
 800b3b6:	d101      	bne.n	800b3bc <_strtol_l.constprop.0+0x84>
 800b3b8:	45a2      	cmp	sl, r4
 800b3ba:	db1d      	blt.n	800b3f8 <_strtol_l.constprop.0+0xc0>
 800b3bc:	fb00 4003 	mla	r0, r0, r3, r4
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3c6:	e7eb      	b.n	800b3a0 <_strtol_l.constprop.0+0x68>
 800b3c8:	2c2b      	cmp	r4, #43	@ 0x2b
 800b3ca:	bf04      	itt	eq
 800b3cc:	782c      	ldrbeq	r4, [r5, #0]
 800b3ce:	1c95      	addeq	r5, r2, #2
 800b3d0:	e7cf      	b.n	800b372 <_strtol_l.constprop.0+0x3a>
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1da      	bne.n	800b38c <_strtol_l.constprop.0+0x54>
 800b3d6:	2c30      	cmp	r4, #48	@ 0x30
 800b3d8:	bf0c      	ite	eq
 800b3da:	2308      	moveq	r3, #8
 800b3dc:	230a      	movne	r3, #10
 800b3de:	e7d5      	b.n	800b38c <_strtol_l.constprop.0+0x54>
 800b3e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b3e4:	2f19      	cmp	r7, #25
 800b3e6:	d801      	bhi.n	800b3ec <_strtol_l.constprop.0+0xb4>
 800b3e8:	3c37      	subs	r4, #55	@ 0x37
 800b3ea:	e7de      	b.n	800b3aa <_strtol_l.constprop.0+0x72>
 800b3ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b3f0:	2f19      	cmp	r7, #25
 800b3f2:	d804      	bhi.n	800b3fe <_strtol_l.constprop.0+0xc6>
 800b3f4:	3c57      	subs	r4, #87	@ 0x57
 800b3f6:	e7d8      	b.n	800b3aa <_strtol_l.constprop.0+0x72>
 800b3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fc:	e7e1      	b.n	800b3c2 <_strtol_l.constprop.0+0x8a>
 800b3fe:	1c53      	adds	r3, r2, #1
 800b400:	d108      	bne.n	800b414 <_strtol_l.constprop.0+0xdc>
 800b402:	2322      	movs	r3, #34	@ 0x22
 800b404:	f8ce 3000 	str.w	r3, [lr]
 800b408:	4660      	mov	r0, ip
 800b40a:	f1b8 0f00 	cmp.w	r8, #0
 800b40e:	d0a0      	beq.n	800b352 <_strtol_l.constprop.0+0x1a>
 800b410:	1e69      	subs	r1, r5, #1
 800b412:	e006      	b.n	800b422 <_strtol_l.constprop.0+0xea>
 800b414:	b106      	cbz	r6, 800b418 <_strtol_l.constprop.0+0xe0>
 800b416:	4240      	negs	r0, r0
 800b418:	f1b8 0f00 	cmp.w	r8, #0
 800b41c:	d099      	beq.n	800b352 <_strtol_l.constprop.0+0x1a>
 800b41e:	2a00      	cmp	r2, #0
 800b420:	d1f6      	bne.n	800b410 <_strtol_l.constprop.0+0xd8>
 800b422:	f8c8 1000 	str.w	r1, [r8]
 800b426:	e794      	b.n	800b352 <_strtol_l.constprop.0+0x1a>
 800b428:	0800d0e1 	.word	0x0800d0e1

0800b42c <_strtol_r>:
 800b42c:	f7ff bf84 	b.w	800b338 <_strtol_l.constprop.0>

0800b430 <__ssputs_r>:
 800b430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b434:	688e      	ldr	r6, [r1, #8]
 800b436:	461f      	mov	r7, r3
 800b438:	42be      	cmp	r6, r7
 800b43a:	680b      	ldr	r3, [r1, #0]
 800b43c:	4682      	mov	sl, r0
 800b43e:	460c      	mov	r4, r1
 800b440:	4690      	mov	r8, r2
 800b442:	d82d      	bhi.n	800b4a0 <__ssputs_r+0x70>
 800b444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b448:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b44c:	d026      	beq.n	800b49c <__ssputs_r+0x6c>
 800b44e:	6965      	ldr	r5, [r4, #20]
 800b450:	6909      	ldr	r1, [r1, #16]
 800b452:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b456:	eba3 0901 	sub.w	r9, r3, r1
 800b45a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b45e:	1c7b      	adds	r3, r7, #1
 800b460:	444b      	add	r3, r9
 800b462:	106d      	asrs	r5, r5, #1
 800b464:	429d      	cmp	r5, r3
 800b466:	bf38      	it	cc
 800b468:	461d      	movcc	r5, r3
 800b46a:	0553      	lsls	r3, r2, #21
 800b46c:	d527      	bpl.n	800b4be <__ssputs_r+0x8e>
 800b46e:	4629      	mov	r1, r5
 800b470:	f7fe fc70 	bl	8009d54 <_malloc_r>
 800b474:	4606      	mov	r6, r0
 800b476:	b360      	cbz	r0, 800b4d2 <__ssputs_r+0xa2>
 800b478:	6921      	ldr	r1, [r4, #16]
 800b47a:	464a      	mov	r2, r9
 800b47c:	f000 fa18 	bl	800b8b0 <memcpy>
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b48a:	81a3      	strh	r3, [r4, #12]
 800b48c:	6126      	str	r6, [r4, #16]
 800b48e:	6165      	str	r5, [r4, #20]
 800b490:	444e      	add	r6, r9
 800b492:	eba5 0509 	sub.w	r5, r5, r9
 800b496:	6026      	str	r6, [r4, #0]
 800b498:	60a5      	str	r5, [r4, #8]
 800b49a:	463e      	mov	r6, r7
 800b49c:	42be      	cmp	r6, r7
 800b49e:	d900      	bls.n	800b4a2 <__ssputs_r+0x72>
 800b4a0:	463e      	mov	r6, r7
 800b4a2:	6820      	ldr	r0, [r4, #0]
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	f000 f9c6 	bl	800b838 <memmove>
 800b4ac:	68a3      	ldr	r3, [r4, #8]
 800b4ae:	1b9b      	subs	r3, r3, r6
 800b4b0:	60a3      	str	r3, [r4, #8]
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	4433      	add	r3, r6
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4be:	462a      	mov	r2, r5
 800b4c0:	f000 fd8b 	bl	800bfda <_realloc_r>
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d1e0      	bne.n	800b48c <__ssputs_r+0x5c>
 800b4ca:	6921      	ldr	r1, [r4, #16]
 800b4cc:	4650      	mov	r0, sl
 800b4ce:	f7fe fbcd 	bl	8009c6c <_free_r>
 800b4d2:	230c      	movs	r3, #12
 800b4d4:	f8ca 3000 	str.w	r3, [sl]
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4de:	81a3      	strh	r3, [r4, #12]
 800b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e4:	e7e9      	b.n	800b4ba <__ssputs_r+0x8a>
	...

0800b4e8 <_svfiprintf_r>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	4698      	mov	r8, r3
 800b4ee:	898b      	ldrh	r3, [r1, #12]
 800b4f0:	061b      	lsls	r3, r3, #24
 800b4f2:	b09d      	sub	sp, #116	@ 0x74
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	d510      	bpl.n	800b51e <_svfiprintf_r+0x36>
 800b4fc:	690b      	ldr	r3, [r1, #16]
 800b4fe:	b973      	cbnz	r3, 800b51e <_svfiprintf_r+0x36>
 800b500:	2140      	movs	r1, #64	@ 0x40
 800b502:	f7fe fc27 	bl	8009d54 <_malloc_r>
 800b506:	6028      	str	r0, [r5, #0]
 800b508:	6128      	str	r0, [r5, #16]
 800b50a:	b930      	cbnz	r0, 800b51a <_svfiprintf_r+0x32>
 800b50c:	230c      	movs	r3, #12
 800b50e:	603b      	str	r3, [r7, #0]
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	b01d      	add	sp, #116	@ 0x74
 800b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51a:	2340      	movs	r3, #64	@ 0x40
 800b51c:	616b      	str	r3, [r5, #20]
 800b51e:	2300      	movs	r3, #0
 800b520:	9309      	str	r3, [sp, #36]	@ 0x24
 800b522:	2320      	movs	r3, #32
 800b524:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b528:	f8cd 800c 	str.w	r8, [sp, #12]
 800b52c:	2330      	movs	r3, #48	@ 0x30
 800b52e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6cc <_svfiprintf_r+0x1e4>
 800b532:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b536:	f04f 0901 	mov.w	r9, #1
 800b53a:	4623      	mov	r3, r4
 800b53c:	469a      	mov	sl, r3
 800b53e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b542:	b10a      	cbz	r2, 800b548 <_svfiprintf_r+0x60>
 800b544:	2a25      	cmp	r2, #37	@ 0x25
 800b546:	d1f9      	bne.n	800b53c <_svfiprintf_r+0x54>
 800b548:	ebba 0b04 	subs.w	fp, sl, r4
 800b54c:	d00b      	beq.n	800b566 <_svfiprintf_r+0x7e>
 800b54e:	465b      	mov	r3, fp
 800b550:	4622      	mov	r2, r4
 800b552:	4629      	mov	r1, r5
 800b554:	4638      	mov	r0, r7
 800b556:	f7ff ff6b 	bl	800b430 <__ssputs_r>
 800b55a:	3001      	adds	r0, #1
 800b55c:	f000 80a7 	beq.w	800b6ae <_svfiprintf_r+0x1c6>
 800b560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b562:	445a      	add	r2, fp
 800b564:	9209      	str	r2, [sp, #36]	@ 0x24
 800b566:	f89a 3000 	ldrb.w	r3, [sl]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f000 809f 	beq.w	800b6ae <_svfiprintf_r+0x1c6>
 800b570:	2300      	movs	r3, #0
 800b572:	f04f 32ff 	mov.w	r2, #4294967295
 800b576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b57a:	f10a 0a01 	add.w	sl, sl, #1
 800b57e:	9304      	str	r3, [sp, #16]
 800b580:	9307      	str	r3, [sp, #28]
 800b582:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b586:	931a      	str	r3, [sp, #104]	@ 0x68
 800b588:	4654      	mov	r4, sl
 800b58a:	2205      	movs	r2, #5
 800b58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b590:	484e      	ldr	r0, [pc, #312]	@ (800b6cc <_svfiprintf_r+0x1e4>)
 800b592:	f7f4 fea5 	bl	80002e0 <memchr>
 800b596:	9a04      	ldr	r2, [sp, #16]
 800b598:	b9d8      	cbnz	r0, 800b5d2 <_svfiprintf_r+0xea>
 800b59a:	06d0      	lsls	r0, r2, #27
 800b59c:	bf44      	itt	mi
 800b59e:	2320      	movmi	r3, #32
 800b5a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5a4:	0711      	lsls	r1, r2, #28
 800b5a6:	bf44      	itt	mi
 800b5a8:	232b      	movmi	r3, #43	@ 0x2b
 800b5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5b4:	d015      	beq.n	800b5e2 <_svfiprintf_r+0xfa>
 800b5b6:	9a07      	ldr	r2, [sp, #28]
 800b5b8:	4654      	mov	r4, sl
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	f04f 0c0a 	mov.w	ip, #10
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5c6:	3b30      	subs	r3, #48	@ 0x30
 800b5c8:	2b09      	cmp	r3, #9
 800b5ca:	d94b      	bls.n	800b664 <_svfiprintf_r+0x17c>
 800b5cc:	b1b0      	cbz	r0, 800b5fc <_svfiprintf_r+0x114>
 800b5ce:	9207      	str	r2, [sp, #28]
 800b5d0:	e014      	b.n	800b5fc <_svfiprintf_r+0x114>
 800b5d2:	eba0 0308 	sub.w	r3, r0, r8
 800b5d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	9304      	str	r3, [sp, #16]
 800b5de:	46a2      	mov	sl, r4
 800b5e0:	e7d2      	b.n	800b588 <_svfiprintf_r+0xa0>
 800b5e2:	9b03      	ldr	r3, [sp, #12]
 800b5e4:	1d19      	adds	r1, r3, #4
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	9103      	str	r1, [sp, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	bfbb      	ittet	lt
 800b5ee:	425b      	neglt	r3, r3
 800b5f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b5f4:	9307      	strge	r3, [sp, #28]
 800b5f6:	9307      	strlt	r3, [sp, #28]
 800b5f8:	bfb8      	it	lt
 800b5fa:	9204      	strlt	r2, [sp, #16]
 800b5fc:	7823      	ldrb	r3, [r4, #0]
 800b5fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800b600:	d10a      	bne.n	800b618 <_svfiprintf_r+0x130>
 800b602:	7863      	ldrb	r3, [r4, #1]
 800b604:	2b2a      	cmp	r3, #42	@ 0x2a
 800b606:	d132      	bne.n	800b66e <_svfiprintf_r+0x186>
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	1d1a      	adds	r2, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	9203      	str	r2, [sp, #12]
 800b610:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b614:	3402      	adds	r4, #2
 800b616:	9305      	str	r3, [sp, #20]
 800b618:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6dc <_svfiprintf_r+0x1f4>
 800b61c:	7821      	ldrb	r1, [r4, #0]
 800b61e:	2203      	movs	r2, #3
 800b620:	4650      	mov	r0, sl
 800b622:	f7f4 fe5d 	bl	80002e0 <memchr>
 800b626:	b138      	cbz	r0, 800b638 <_svfiprintf_r+0x150>
 800b628:	9b04      	ldr	r3, [sp, #16]
 800b62a:	eba0 000a 	sub.w	r0, r0, sl
 800b62e:	2240      	movs	r2, #64	@ 0x40
 800b630:	4082      	lsls	r2, r0
 800b632:	4313      	orrs	r3, r2
 800b634:	3401      	adds	r4, #1
 800b636:	9304      	str	r3, [sp, #16]
 800b638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b63c:	4824      	ldr	r0, [pc, #144]	@ (800b6d0 <_svfiprintf_r+0x1e8>)
 800b63e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b642:	2206      	movs	r2, #6
 800b644:	f7f4 fe4c 	bl	80002e0 <memchr>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d036      	beq.n	800b6ba <_svfiprintf_r+0x1d2>
 800b64c:	4b21      	ldr	r3, [pc, #132]	@ (800b6d4 <_svfiprintf_r+0x1ec>)
 800b64e:	bb1b      	cbnz	r3, 800b698 <_svfiprintf_r+0x1b0>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	3307      	adds	r3, #7
 800b654:	f023 0307 	bic.w	r3, r3, #7
 800b658:	3308      	adds	r3, #8
 800b65a:	9303      	str	r3, [sp, #12]
 800b65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b65e:	4433      	add	r3, r6
 800b660:	9309      	str	r3, [sp, #36]	@ 0x24
 800b662:	e76a      	b.n	800b53a <_svfiprintf_r+0x52>
 800b664:	fb0c 3202 	mla	r2, ip, r2, r3
 800b668:	460c      	mov	r4, r1
 800b66a:	2001      	movs	r0, #1
 800b66c:	e7a8      	b.n	800b5c0 <_svfiprintf_r+0xd8>
 800b66e:	2300      	movs	r3, #0
 800b670:	3401      	adds	r4, #1
 800b672:	9305      	str	r3, [sp, #20]
 800b674:	4619      	mov	r1, r3
 800b676:	f04f 0c0a 	mov.w	ip, #10
 800b67a:	4620      	mov	r0, r4
 800b67c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b680:	3a30      	subs	r2, #48	@ 0x30
 800b682:	2a09      	cmp	r2, #9
 800b684:	d903      	bls.n	800b68e <_svfiprintf_r+0x1a6>
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0c6      	beq.n	800b618 <_svfiprintf_r+0x130>
 800b68a:	9105      	str	r1, [sp, #20]
 800b68c:	e7c4      	b.n	800b618 <_svfiprintf_r+0x130>
 800b68e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b692:	4604      	mov	r4, r0
 800b694:	2301      	movs	r3, #1
 800b696:	e7f0      	b.n	800b67a <_svfiprintf_r+0x192>
 800b698:	ab03      	add	r3, sp, #12
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	462a      	mov	r2, r5
 800b69e:	4b0e      	ldr	r3, [pc, #56]	@ (800b6d8 <_svfiprintf_r+0x1f0>)
 800b6a0:	a904      	add	r1, sp, #16
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	f7fc fd70 	bl	8008188 <_printf_float>
 800b6a8:	1c42      	adds	r2, r0, #1
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	d1d6      	bne.n	800b65c <_svfiprintf_r+0x174>
 800b6ae:	89ab      	ldrh	r3, [r5, #12]
 800b6b0:	065b      	lsls	r3, r3, #25
 800b6b2:	f53f af2d 	bmi.w	800b510 <_svfiprintf_r+0x28>
 800b6b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6b8:	e72c      	b.n	800b514 <_svfiprintf_r+0x2c>
 800b6ba:	ab03      	add	r3, sp, #12
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4b05      	ldr	r3, [pc, #20]	@ (800b6d8 <_svfiprintf_r+0x1f0>)
 800b6c2:	a904      	add	r1, sp, #16
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f7fc ffe7 	bl	8008698 <_printf_i>
 800b6ca:	e7ed      	b.n	800b6a8 <_svfiprintf_r+0x1c0>
 800b6cc:	0800d1e1 	.word	0x0800d1e1
 800b6d0:	0800d1eb 	.word	0x0800d1eb
 800b6d4:	08008189 	.word	0x08008189
 800b6d8:	0800b431 	.word	0x0800b431
 800b6dc:	0800d1e7 	.word	0x0800d1e7

0800b6e0 <__sflush_r>:
 800b6e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e8:	0716      	lsls	r6, r2, #28
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	d454      	bmi.n	800b79a <__sflush_r+0xba>
 800b6f0:	684b      	ldr	r3, [r1, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	dc02      	bgt.n	800b6fc <__sflush_r+0x1c>
 800b6f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	dd48      	ble.n	800b78e <__sflush_r+0xae>
 800b6fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6fe:	2e00      	cmp	r6, #0
 800b700:	d045      	beq.n	800b78e <__sflush_r+0xae>
 800b702:	2300      	movs	r3, #0
 800b704:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b708:	682f      	ldr	r7, [r5, #0]
 800b70a:	6a21      	ldr	r1, [r4, #32]
 800b70c:	602b      	str	r3, [r5, #0]
 800b70e:	d030      	beq.n	800b772 <__sflush_r+0x92>
 800b710:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	0759      	lsls	r1, r3, #29
 800b716:	d505      	bpl.n	800b724 <__sflush_r+0x44>
 800b718:	6863      	ldr	r3, [r4, #4]
 800b71a:	1ad2      	subs	r2, r2, r3
 800b71c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b71e:	b10b      	cbz	r3, 800b724 <__sflush_r+0x44>
 800b720:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b722:	1ad2      	subs	r2, r2, r3
 800b724:	2300      	movs	r3, #0
 800b726:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b728:	6a21      	ldr	r1, [r4, #32]
 800b72a:	4628      	mov	r0, r5
 800b72c:	47b0      	blx	r6
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	d106      	bne.n	800b742 <__sflush_r+0x62>
 800b734:	6829      	ldr	r1, [r5, #0]
 800b736:	291d      	cmp	r1, #29
 800b738:	d82b      	bhi.n	800b792 <__sflush_r+0xb2>
 800b73a:	4a2a      	ldr	r2, [pc, #168]	@ (800b7e4 <__sflush_r+0x104>)
 800b73c:	410a      	asrs	r2, r1
 800b73e:	07d6      	lsls	r6, r2, #31
 800b740:	d427      	bmi.n	800b792 <__sflush_r+0xb2>
 800b742:	2200      	movs	r2, #0
 800b744:	6062      	str	r2, [r4, #4]
 800b746:	04d9      	lsls	r1, r3, #19
 800b748:	6922      	ldr	r2, [r4, #16]
 800b74a:	6022      	str	r2, [r4, #0]
 800b74c:	d504      	bpl.n	800b758 <__sflush_r+0x78>
 800b74e:	1c42      	adds	r2, r0, #1
 800b750:	d101      	bne.n	800b756 <__sflush_r+0x76>
 800b752:	682b      	ldr	r3, [r5, #0]
 800b754:	b903      	cbnz	r3, 800b758 <__sflush_r+0x78>
 800b756:	6560      	str	r0, [r4, #84]	@ 0x54
 800b758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b75a:	602f      	str	r7, [r5, #0]
 800b75c:	b1b9      	cbz	r1, 800b78e <__sflush_r+0xae>
 800b75e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b762:	4299      	cmp	r1, r3
 800b764:	d002      	beq.n	800b76c <__sflush_r+0x8c>
 800b766:	4628      	mov	r0, r5
 800b768:	f7fe fa80 	bl	8009c6c <_free_r>
 800b76c:	2300      	movs	r3, #0
 800b76e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b770:	e00d      	b.n	800b78e <__sflush_r+0xae>
 800b772:	2301      	movs	r3, #1
 800b774:	4628      	mov	r0, r5
 800b776:	47b0      	blx	r6
 800b778:	4602      	mov	r2, r0
 800b77a:	1c50      	adds	r0, r2, #1
 800b77c:	d1c9      	bne.n	800b712 <__sflush_r+0x32>
 800b77e:	682b      	ldr	r3, [r5, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d0c6      	beq.n	800b712 <__sflush_r+0x32>
 800b784:	2b1d      	cmp	r3, #29
 800b786:	d001      	beq.n	800b78c <__sflush_r+0xac>
 800b788:	2b16      	cmp	r3, #22
 800b78a:	d11e      	bne.n	800b7ca <__sflush_r+0xea>
 800b78c:	602f      	str	r7, [r5, #0]
 800b78e:	2000      	movs	r0, #0
 800b790:	e022      	b.n	800b7d8 <__sflush_r+0xf8>
 800b792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b796:	b21b      	sxth	r3, r3
 800b798:	e01b      	b.n	800b7d2 <__sflush_r+0xf2>
 800b79a:	690f      	ldr	r7, [r1, #16]
 800b79c:	2f00      	cmp	r7, #0
 800b79e:	d0f6      	beq.n	800b78e <__sflush_r+0xae>
 800b7a0:	0793      	lsls	r3, r2, #30
 800b7a2:	680e      	ldr	r6, [r1, #0]
 800b7a4:	bf08      	it	eq
 800b7a6:	694b      	ldreq	r3, [r1, #20]
 800b7a8:	600f      	str	r7, [r1, #0]
 800b7aa:	bf18      	it	ne
 800b7ac:	2300      	movne	r3, #0
 800b7ae:	eba6 0807 	sub.w	r8, r6, r7
 800b7b2:	608b      	str	r3, [r1, #8]
 800b7b4:	f1b8 0f00 	cmp.w	r8, #0
 800b7b8:	dde9      	ble.n	800b78e <__sflush_r+0xae>
 800b7ba:	6a21      	ldr	r1, [r4, #32]
 800b7bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7be:	4643      	mov	r3, r8
 800b7c0:	463a      	mov	r2, r7
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	47b0      	blx	r6
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	dc08      	bgt.n	800b7dc <__sflush_r+0xfc>
 800b7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d2:	81a3      	strh	r3, [r4, #12]
 800b7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7dc:	4407      	add	r7, r0
 800b7de:	eba8 0800 	sub.w	r8, r8, r0
 800b7e2:	e7e7      	b.n	800b7b4 <__sflush_r+0xd4>
 800b7e4:	dfbffffe 	.word	0xdfbffffe

0800b7e8 <_fflush_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	690b      	ldr	r3, [r1, #16]
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	b913      	cbnz	r3, 800b7f8 <_fflush_r+0x10>
 800b7f2:	2500      	movs	r5, #0
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	bd38      	pop	{r3, r4, r5, pc}
 800b7f8:	b118      	cbz	r0, 800b802 <_fflush_r+0x1a>
 800b7fa:	6a03      	ldr	r3, [r0, #32]
 800b7fc:	b90b      	cbnz	r3, 800b802 <_fflush_r+0x1a>
 800b7fe:	f7fd fb03 	bl	8008e08 <__sinit>
 800b802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0f3      	beq.n	800b7f2 <_fflush_r+0xa>
 800b80a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b80c:	07d0      	lsls	r0, r2, #31
 800b80e:	d404      	bmi.n	800b81a <_fflush_r+0x32>
 800b810:	0599      	lsls	r1, r3, #22
 800b812:	d402      	bmi.n	800b81a <_fflush_r+0x32>
 800b814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b816:	f7fd fc42 	bl	800909e <__retarget_lock_acquire_recursive>
 800b81a:	4628      	mov	r0, r5
 800b81c:	4621      	mov	r1, r4
 800b81e:	f7ff ff5f 	bl	800b6e0 <__sflush_r>
 800b822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b824:	07da      	lsls	r2, r3, #31
 800b826:	4605      	mov	r5, r0
 800b828:	d4e4      	bmi.n	800b7f4 <_fflush_r+0xc>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	059b      	lsls	r3, r3, #22
 800b82e:	d4e1      	bmi.n	800b7f4 <_fflush_r+0xc>
 800b830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b832:	f7fd fc35 	bl	80090a0 <__retarget_lock_release_recursive>
 800b836:	e7dd      	b.n	800b7f4 <_fflush_r+0xc>

0800b838 <memmove>:
 800b838:	4288      	cmp	r0, r1
 800b83a:	b510      	push	{r4, lr}
 800b83c:	eb01 0402 	add.w	r4, r1, r2
 800b840:	d902      	bls.n	800b848 <memmove+0x10>
 800b842:	4284      	cmp	r4, r0
 800b844:	4623      	mov	r3, r4
 800b846:	d807      	bhi.n	800b858 <memmove+0x20>
 800b848:	1e43      	subs	r3, r0, #1
 800b84a:	42a1      	cmp	r1, r4
 800b84c:	d008      	beq.n	800b860 <memmove+0x28>
 800b84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b852:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b856:	e7f8      	b.n	800b84a <memmove+0x12>
 800b858:	4402      	add	r2, r0
 800b85a:	4601      	mov	r1, r0
 800b85c:	428a      	cmp	r2, r1
 800b85e:	d100      	bne.n	800b862 <memmove+0x2a>
 800b860:	bd10      	pop	{r4, pc}
 800b862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b86a:	e7f7      	b.n	800b85c <memmove+0x24>

0800b86c <strncmp>:
 800b86c:	b510      	push	{r4, lr}
 800b86e:	b16a      	cbz	r2, 800b88c <strncmp+0x20>
 800b870:	3901      	subs	r1, #1
 800b872:	1884      	adds	r4, r0, r2
 800b874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b878:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d103      	bne.n	800b888 <strncmp+0x1c>
 800b880:	42a0      	cmp	r0, r4
 800b882:	d001      	beq.n	800b888 <strncmp+0x1c>
 800b884:	2a00      	cmp	r2, #0
 800b886:	d1f5      	bne.n	800b874 <strncmp+0x8>
 800b888:	1ad0      	subs	r0, r2, r3
 800b88a:	bd10      	pop	{r4, pc}
 800b88c:	4610      	mov	r0, r2
 800b88e:	e7fc      	b.n	800b88a <strncmp+0x1e>

0800b890 <_sbrk_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4d06      	ldr	r5, [pc, #24]	@ (800b8ac <_sbrk_r+0x1c>)
 800b894:	2300      	movs	r3, #0
 800b896:	4604      	mov	r4, r0
 800b898:	4608      	mov	r0, r1
 800b89a:	602b      	str	r3, [r5, #0]
 800b89c:	f7f6 fbe6 	bl	800206c <_sbrk>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_sbrk_r+0x1a>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_sbrk_r+0x1a>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	2400062c 	.word	0x2400062c

0800b8b0 <memcpy>:
 800b8b0:	440a      	add	r2, r1
 800b8b2:	4291      	cmp	r1, r2
 800b8b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8b8:	d100      	bne.n	800b8bc <memcpy+0xc>
 800b8ba:	4770      	bx	lr
 800b8bc:	b510      	push	{r4, lr}
 800b8be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8c6:	4291      	cmp	r1, r2
 800b8c8:	d1f9      	bne.n	800b8be <memcpy+0xe>
 800b8ca:	bd10      	pop	{r4, pc}
 800b8cc:	0000      	movs	r0, r0
	...

0800b8d0 <nan>:
 800b8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b8d8 <nan+0x8>
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	00000000 	.word	0x00000000
 800b8dc:	7ff80000 	.word	0x7ff80000

0800b8e0 <__assert_func>:
 800b8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8e2:	4614      	mov	r4, r2
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	4b09      	ldr	r3, [pc, #36]	@ (800b90c <__assert_func+0x2c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	68d8      	ldr	r0, [r3, #12]
 800b8ee:	b954      	cbnz	r4, 800b906 <__assert_func+0x26>
 800b8f0:	4b07      	ldr	r3, [pc, #28]	@ (800b910 <__assert_func+0x30>)
 800b8f2:	461c      	mov	r4, r3
 800b8f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8f8:	9100      	str	r1, [sp, #0]
 800b8fa:	462b      	mov	r3, r5
 800b8fc:	4905      	ldr	r1, [pc, #20]	@ (800b914 <__assert_func+0x34>)
 800b8fe:	f000 fba7 	bl	800c050 <fiprintf>
 800b902:	f000 fbb7 	bl	800c074 <abort>
 800b906:	4b04      	ldr	r3, [pc, #16]	@ (800b918 <__assert_func+0x38>)
 800b908:	e7f4      	b.n	800b8f4 <__assert_func+0x14>
 800b90a:	bf00      	nop
 800b90c:	2400001c 	.word	0x2400001c
 800b910:	0800d235 	.word	0x0800d235
 800b914:	0800d207 	.word	0x0800d207
 800b918:	0800d1fa 	.word	0x0800d1fa

0800b91c <_calloc_r>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	fba1 5402 	umull	r5, r4, r1, r2
 800b922:	b93c      	cbnz	r4, 800b934 <_calloc_r+0x18>
 800b924:	4629      	mov	r1, r5
 800b926:	f7fe fa15 	bl	8009d54 <_malloc_r>
 800b92a:	4606      	mov	r6, r0
 800b92c:	b928      	cbnz	r0, 800b93a <_calloc_r+0x1e>
 800b92e:	2600      	movs	r6, #0
 800b930:	4630      	mov	r0, r6
 800b932:	bd70      	pop	{r4, r5, r6, pc}
 800b934:	220c      	movs	r2, #12
 800b936:	6002      	str	r2, [r0, #0]
 800b938:	e7f9      	b.n	800b92e <_calloc_r+0x12>
 800b93a:	462a      	mov	r2, r5
 800b93c:	4621      	mov	r1, r4
 800b93e:	f7fd fb30 	bl	8008fa2 <memset>
 800b942:	e7f5      	b.n	800b930 <_calloc_r+0x14>

0800b944 <rshift>:
 800b944:	6903      	ldr	r3, [r0, #16]
 800b946:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b94a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b94e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b952:	f100 0414 	add.w	r4, r0, #20
 800b956:	dd45      	ble.n	800b9e4 <rshift+0xa0>
 800b958:	f011 011f 	ands.w	r1, r1, #31
 800b95c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b960:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b964:	d10c      	bne.n	800b980 <rshift+0x3c>
 800b966:	f100 0710 	add.w	r7, r0, #16
 800b96a:	4629      	mov	r1, r5
 800b96c:	42b1      	cmp	r1, r6
 800b96e:	d334      	bcc.n	800b9da <rshift+0x96>
 800b970:	1a9b      	subs	r3, r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	1eea      	subs	r2, r5, #3
 800b976:	4296      	cmp	r6, r2
 800b978:	bf38      	it	cc
 800b97a:	2300      	movcc	r3, #0
 800b97c:	4423      	add	r3, r4
 800b97e:	e015      	b.n	800b9ac <rshift+0x68>
 800b980:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b984:	f1c1 0820 	rsb	r8, r1, #32
 800b988:	40cf      	lsrs	r7, r1
 800b98a:	f105 0e04 	add.w	lr, r5, #4
 800b98e:	46a1      	mov	r9, r4
 800b990:	4576      	cmp	r6, lr
 800b992:	46f4      	mov	ip, lr
 800b994:	d815      	bhi.n	800b9c2 <rshift+0x7e>
 800b996:	1a9a      	subs	r2, r3, r2
 800b998:	0092      	lsls	r2, r2, #2
 800b99a:	3a04      	subs	r2, #4
 800b99c:	3501      	adds	r5, #1
 800b99e:	42ae      	cmp	r6, r5
 800b9a0:	bf38      	it	cc
 800b9a2:	2200      	movcc	r2, #0
 800b9a4:	18a3      	adds	r3, r4, r2
 800b9a6:	50a7      	str	r7, [r4, r2]
 800b9a8:	b107      	cbz	r7, 800b9ac <rshift+0x68>
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	1b1a      	subs	r2, r3, r4
 800b9ae:	42a3      	cmp	r3, r4
 800b9b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b9b4:	bf08      	it	eq
 800b9b6:	2300      	moveq	r3, #0
 800b9b8:	6102      	str	r2, [r0, #16]
 800b9ba:	bf08      	it	eq
 800b9bc:	6143      	streq	r3, [r0, #20]
 800b9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9c2:	f8dc c000 	ldr.w	ip, [ip]
 800b9c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b9ca:	ea4c 0707 	orr.w	r7, ip, r7
 800b9ce:	f849 7b04 	str.w	r7, [r9], #4
 800b9d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9d6:	40cf      	lsrs	r7, r1
 800b9d8:	e7da      	b.n	800b990 <rshift+0x4c>
 800b9da:	f851 cb04 	ldr.w	ip, [r1], #4
 800b9de:	f847 cf04 	str.w	ip, [r7, #4]!
 800b9e2:	e7c3      	b.n	800b96c <rshift+0x28>
 800b9e4:	4623      	mov	r3, r4
 800b9e6:	e7e1      	b.n	800b9ac <rshift+0x68>

0800b9e8 <__hexdig_fun>:
 800b9e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b9ec:	2b09      	cmp	r3, #9
 800b9ee:	d802      	bhi.n	800b9f6 <__hexdig_fun+0xe>
 800b9f0:	3820      	subs	r0, #32
 800b9f2:	b2c0      	uxtb	r0, r0
 800b9f4:	4770      	bx	lr
 800b9f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b9fa:	2b05      	cmp	r3, #5
 800b9fc:	d801      	bhi.n	800ba02 <__hexdig_fun+0x1a>
 800b9fe:	3847      	subs	r0, #71	@ 0x47
 800ba00:	e7f7      	b.n	800b9f2 <__hexdig_fun+0xa>
 800ba02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ba06:	2b05      	cmp	r3, #5
 800ba08:	d801      	bhi.n	800ba0e <__hexdig_fun+0x26>
 800ba0a:	3827      	subs	r0, #39	@ 0x27
 800ba0c:	e7f1      	b.n	800b9f2 <__hexdig_fun+0xa>
 800ba0e:	2000      	movs	r0, #0
 800ba10:	4770      	bx	lr
	...

0800ba14 <__gethex>:
 800ba14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba18:	b085      	sub	sp, #20
 800ba1a:	468a      	mov	sl, r1
 800ba1c:	9302      	str	r3, [sp, #8]
 800ba1e:	680b      	ldr	r3, [r1, #0]
 800ba20:	9001      	str	r0, [sp, #4]
 800ba22:	4690      	mov	r8, r2
 800ba24:	1c9c      	adds	r4, r3, #2
 800ba26:	46a1      	mov	r9, r4
 800ba28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ba2c:	2830      	cmp	r0, #48	@ 0x30
 800ba2e:	d0fa      	beq.n	800ba26 <__gethex+0x12>
 800ba30:	eba9 0303 	sub.w	r3, r9, r3
 800ba34:	f1a3 0b02 	sub.w	fp, r3, #2
 800ba38:	f7ff ffd6 	bl	800b9e8 <__hexdig_fun>
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d168      	bne.n	800bb14 <__gethex+0x100>
 800ba42:	49a0      	ldr	r1, [pc, #640]	@ (800bcc4 <__gethex+0x2b0>)
 800ba44:	2201      	movs	r2, #1
 800ba46:	4648      	mov	r0, r9
 800ba48:	f7ff ff10 	bl	800b86c <strncmp>
 800ba4c:	4607      	mov	r7, r0
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d167      	bne.n	800bb22 <__gethex+0x10e>
 800ba52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ba56:	4626      	mov	r6, r4
 800ba58:	f7ff ffc6 	bl	800b9e8 <__hexdig_fun>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d062      	beq.n	800bb26 <__gethex+0x112>
 800ba60:	4623      	mov	r3, r4
 800ba62:	7818      	ldrb	r0, [r3, #0]
 800ba64:	2830      	cmp	r0, #48	@ 0x30
 800ba66:	4699      	mov	r9, r3
 800ba68:	f103 0301 	add.w	r3, r3, #1
 800ba6c:	d0f9      	beq.n	800ba62 <__gethex+0x4e>
 800ba6e:	f7ff ffbb 	bl	800b9e8 <__hexdig_fun>
 800ba72:	fab0 f580 	clz	r5, r0
 800ba76:	096d      	lsrs	r5, r5, #5
 800ba78:	f04f 0b01 	mov.w	fp, #1
 800ba7c:	464a      	mov	r2, r9
 800ba7e:	4616      	mov	r6, r2
 800ba80:	3201      	adds	r2, #1
 800ba82:	7830      	ldrb	r0, [r6, #0]
 800ba84:	f7ff ffb0 	bl	800b9e8 <__hexdig_fun>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d1f8      	bne.n	800ba7e <__gethex+0x6a>
 800ba8c:	498d      	ldr	r1, [pc, #564]	@ (800bcc4 <__gethex+0x2b0>)
 800ba8e:	2201      	movs	r2, #1
 800ba90:	4630      	mov	r0, r6
 800ba92:	f7ff feeb 	bl	800b86c <strncmp>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d13f      	bne.n	800bb1a <__gethex+0x106>
 800ba9a:	b944      	cbnz	r4, 800baae <__gethex+0x9a>
 800ba9c:	1c74      	adds	r4, r6, #1
 800ba9e:	4622      	mov	r2, r4
 800baa0:	4616      	mov	r6, r2
 800baa2:	3201      	adds	r2, #1
 800baa4:	7830      	ldrb	r0, [r6, #0]
 800baa6:	f7ff ff9f 	bl	800b9e8 <__hexdig_fun>
 800baaa:	2800      	cmp	r0, #0
 800baac:	d1f8      	bne.n	800baa0 <__gethex+0x8c>
 800baae:	1ba4      	subs	r4, r4, r6
 800bab0:	00a7      	lsls	r7, r4, #2
 800bab2:	7833      	ldrb	r3, [r6, #0]
 800bab4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bab8:	2b50      	cmp	r3, #80	@ 0x50
 800baba:	d13e      	bne.n	800bb3a <__gethex+0x126>
 800babc:	7873      	ldrb	r3, [r6, #1]
 800babe:	2b2b      	cmp	r3, #43	@ 0x2b
 800bac0:	d033      	beq.n	800bb2a <__gethex+0x116>
 800bac2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bac4:	d034      	beq.n	800bb30 <__gethex+0x11c>
 800bac6:	1c71      	adds	r1, r6, #1
 800bac8:	2400      	movs	r4, #0
 800baca:	7808      	ldrb	r0, [r1, #0]
 800bacc:	f7ff ff8c 	bl	800b9e8 <__hexdig_fun>
 800bad0:	1e43      	subs	r3, r0, #1
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b18      	cmp	r3, #24
 800bad6:	d830      	bhi.n	800bb3a <__gethex+0x126>
 800bad8:	f1a0 0210 	sub.w	r2, r0, #16
 800badc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bae0:	f7ff ff82 	bl	800b9e8 <__hexdig_fun>
 800bae4:	f100 3cff 	add.w	ip, r0, #4294967295
 800bae8:	fa5f fc8c 	uxtb.w	ip, ip
 800baec:	f1bc 0f18 	cmp.w	ip, #24
 800baf0:	f04f 030a 	mov.w	r3, #10
 800baf4:	d91e      	bls.n	800bb34 <__gethex+0x120>
 800baf6:	b104      	cbz	r4, 800bafa <__gethex+0xe6>
 800baf8:	4252      	negs	r2, r2
 800bafa:	4417      	add	r7, r2
 800bafc:	f8ca 1000 	str.w	r1, [sl]
 800bb00:	b1ed      	cbz	r5, 800bb3e <__gethex+0x12a>
 800bb02:	f1bb 0f00 	cmp.w	fp, #0
 800bb06:	bf0c      	ite	eq
 800bb08:	2506      	moveq	r5, #6
 800bb0a:	2500      	movne	r5, #0
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	b005      	add	sp, #20
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	2500      	movs	r5, #0
 800bb16:	462c      	mov	r4, r5
 800bb18:	e7b0      	b.n	800ba7c <__gethex+0x68>
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	d1c7      	bne.n	800baae <__gethex+0x9a>
 800bb1e:	4627      	mov	r7, r4
 800bb20:	e7c7      	b.n	800bab2 <__gethex+0x9e>
 800bb22:	464e      	mov	r6, r9
 800bb24:	462f      	mov	r7, r5
 800bb26:	2501      	movs	r5, #1
 800bb28:	e7c3      	b.n	800bab2 <__gethex+0x9e>
 800bb2a:	2400      	movs	r4, #0
 800bb2c:	1cb1      	adds	r1, r6, #2
 800bb2e:	e7cc      	b.n	800baca <__gethex+0xb6>
 800bb30:	2401      	movs	r4, #1
 800bb32:	e7fb      	b.n	800bb2c <__gethex+0x118>
 800bb34:	fb03 0002 	mla	r0, r3, r2, r0
 800bb38:	e7ce      	b.n	800bad8 <__gethex+0xc4>
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	e7de      	b.n	800bafc <__gethex+0xe8>
 800bb3e:	eba6 0309 	sub.w	r3, r6, r9
 800bb42:	3b01      	subs	r3, #1
 800bb44:	4629      	mov	r1, r5
 800bb46:	2b07      	cmp	r3, #7
 800bb48:	dc0a      	bgt.n	800bb60 <__gethex+0x14c>
 800bb4a:	9801      	ldr	r0, [sp, #4]
 800bb4c:	f7fe f98e 	bl	8009e6c <_Balloc>
 800bb50:	4604      	mov	r4, r0
 800bb52:	b940      	cbnz	r0, 800bb66 <__gethex+0x152>
 800bb54:	4b5c      	ldr	r3, [pc, #368]	@ (800bcc8 <__gethex+0x2b4>)
 800bb56:	4602      	mov	r2, r0
 800bb58:	21e4      	movs	r1, #228	@ 0xe4
 800bb5a:	485c      	ldr	r0, [pc, #368]	@ (800bccc <__gethex+0x2b8>)
 800bb5c:	f7ff fec0 	bl	800b8e0 <__assert_func>
 800bb60:	3101      	adds	r1, #1
 800bb62:	105b      	asrs	r3, r3, #1
 800bb64:	e7ef      	b.n	800bb46 <__gethex+0x132>
 800bb66:	f100 0a14 	add.w	sl, r0, #20
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	4655      	mov	r5, sl
 800bb6e:	469b      	mov	fp, r3
 800bb70:	45b1      	cmp	r9, r6
 800bb72:	d337      	bcc.n	800bbe4 <__gethex+0x1d0>
 800bb74:	f845 bb04 	str.w	fp, [r5], #4
 800bb78:	eba5 050a 	sub.w	r5, r5, sl
 800bb7c:	10ad      	asrs	r5, r5, #2
 800bb7e:	6125      	str	r5, [r4, #16]
 800bb80:	4658      	mov	r0, fp
 800bb82:	f7fe fa65 	bl	800a050 <__hi0bits>
 800bb86:	016d      	lsls	r5, r5, #5
 800bb88:	f8d8 6000 	ldr.w	r6, [r8]
 800bb8c:	1a2d      	subs	r5, r5, r0
 800bb8e:	42b5      	cmp	r5, r6
 800bb90:	dd54      	ble.n	800bc3c <__gethex+0x228>
 800bb92:	1bad      	subs	r5, r5, r6
 800bb94:	4629      	mov	r1, r5
 800bb96:	4620      	mov	r0, r4
 800bb98:	f7fe fdf6 	bl	800a788 <__any_on>
 800bb9c:	4681      	mov	r9, r0
 800bb9e:	b178      	cbz	r0, 800bbc0 <__gethex+0x1ac>
 800bba0:	1e6b      	subs	r3, r5, #1
 800bba2:	1159      	asrs	r1, r3, #5
 800bba4:	f003 021f 	and.w	r2, r3, #31
 800bba8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bbac:	f04f 0901 	mov.w	r9, #1
 800bbb0:	fa09 f202 	lsl.w	r2, r9, r2
 800bbb4:	420a      	tst	r2, r1
 800bbb6:	d003      	beq.n	800bbc0 <__gethex+0x1ac>
 800bbb8:	454b      	cmp	r3, r9
 800bbba:	dc36      	bgt.n	800bc2a <__gethex+0x216>
 800bbbc:	f04f 0902 	mov.w	r9, #2
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f7ff febe 	bl	800b944 <rshift>
 800bbc8:	442f      	add	r7, r5
 800bbca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbce:	42bb      	cmp	r3, r7
 800bbd0:	da42      	bge.n	800bc58 <__gethex+0x244>
 800bbd2:	9801      	ldr	r0, [sp, #4]
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	f7fe f989 	bl	8009eec <_Bfree>
 800bbda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbdc:	2300      	movs	r3, #0
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	25a3      	movs	r5, #163	@ 0xa3
 800bbe2:	e793      	b.n	800bb0c <__gethex+0xf8>
 800bbe4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bbe8:	2a2e      	cmp	r2, #46	@ 0x2e
 800bbea:	d012      	beq.n	800bc12 <__gethex+0x1fe>
 800bbec:	2b20      	cmp	r3, #32
 800bbee:	d104      	bne.n	800bbfa <__gethex+0x1e6>
 800bbf0:	f845 bb04 	str.w	fp, [r5], #4
 800bbf4:	f04f 0b00 	mov.w	fp, #0
 800bbf8:	465b      	mov	r3, fp
 800bbfa:	7830      	ldrb	r0, [r6, #0]
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	f7ff fef3 	bl	800b9e8 <__hexdig_fun>
 800bc02:	9b03      	ldr	r3, [sp, #12]
 800bc04:	f000 000f 	and.w	r0, r0, #15
 800bc08:	4098      	lsls	r0, r3
 800bc0a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bc0e:	3304      	adds	r3, #4
 800bc10:	e7ae      	b.n	800bb70 <__gethex+0x15c>
 800bc12:	45b1      	cmp	r9, r6
 800bc14:	d8ea      	bhi.n	800bbec <__gethex+0x1d8>
 800bc16:	492b      	ldr	r1, [pc, #172]	@ (800bcc4 <__gethex+0x2b0>)
 800bc18:	9303      	str	r3, [sp, #12]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff fe25 	bl	800b86c <strncmp>
 800bc22:	9b03      	ldr	r3, [sp, #12]
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d1e1      	bne.n	800bbec <__gethex+0x1d8>
 800bc28:	e7a2      	b.n	800bb70 <__gethex+0x15c>
 800bc2a:	1ea9      	subs	r1, r5, #2
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f7fe fdab 	bl	800a788 <__any_on>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d0c2      	beq.n	800bbbc <__gethex+0x1a8>
 800bc36:	f04f 0903 	mov.w	r9, #3
 800bc3a:	e7c1      	b.n	800bbc0 <__gethex+0x1ac>
 800bc3c:	da09      	bge.n	800bc52 <__gethex+0x23e>
 800bc3e:	1b75      	subs	r5, r6, r5
 800bc40:	4621      	mov	r1, r4
 800bc42:	9801      	ldr	r0, [sp, #4]
 800bc44:	462a      	mov	r2, r5
 800bc46:	f7fe fb69 	bl	800a31c <__lshift>
 800bc4a:	1b7f      	subs	r7, r7, r5
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	f100 0a14 	add.w	sl, r0, #20
 800bc52:	f04f 0900 	mov.w	r9, #0
 800bc56:	e7b8      	b.n	800bbca <__gethex+0x1b6>
 800bc58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc5c:	42bd      	cmp	r5, r7
 800bc5e:	dd6f      	ble.n	800bd40 <__gethex+0x32c>
 800bc60:	1bed      	subs	r5, r5, r7
 800bc62:	42ae      	cmp	r6, r5
 800bc64:	dc34      	bgt.n	800bcd0 <__gethex+0x2bc>
 800bc66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d022      	beq.n	800bcb4 <__gethex+0x2a0>
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d024      	beq.n	800bcbc <__gethex+0x2a8>
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d115      	bne.n	800bca2 <__gethex+0x28e>
 800bc76:	42ae      	cmp	r6, r5
 800bc78:	d113      	bne.n	800bca2 <__gethex+0x28e>
 800bc7a:	2e01      	cmp	r6, #1
 800bc7c:	d10b      	bne.n	800bc96 <__gethex+0x282>
 800bc7e:	9a02      	ldr	r2, [sp, #8]
 800bc80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	2301      	movs	r3, #1
 800bc88:	6123      	str	r3, [r4, #16]
 800bc8a:	f8ca 3000 	str.w	r3, [sl]
 800bc8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc90:	2562      	movs	r5, #98	@ 0x62
 800bc92:	601c      	str	r4, [r3, #0]
 800bc94:	e73a      	b.n	800bb0c <__gethex+0xf8>
 800bc96:	1e71      	subs	r1, r6, #1
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f7fe fd75 	bl	800a788 <__any_on>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d1ed      	bne.n	800bc7e <__gethex+0x26a>
 800bca2:	9801      	ldr	r0, [sp, #4]
 800bca4:	4621      	mov	r1, r4
 800bca6:	f7fe f921 	bl	8009eec <_Bfree>
 800bcaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcac:	2300      	movs	r3, #0
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	2550      	movs	r5, #80	@ 0x50
 800bcb2:	e72b      	b.n	800bb0c <__gethex+0xf8>
 800bcb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1f3      	bne.n	800bca2 <__gethex+0x28e>
 800bcba:	e7e0      	b.n	800bc7e <__gethex+0x26a>
 800bcbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1dd      	bne.n	800bc7e <__gethex+0x26a>
 800bcc2:	e7ee      	b.n	800bca2 <__gethex+0x28e>
 800bcc4:	0800d088 	.word	0x0800d088
 800bcc8:	0800cf21 	.word	0x0800cf21
 800bccc:	0800d236 	.word	0x0800d236
 800bcd0:	1e6f      	subs	r7, r5, #1
 800bcd2:	f1b9 0f00 	cmp.w	r9, #0
 800bcd6:	d130      	bne.n	800bd3a <__gethex+0x326>
 800bcd8:	b127      	cbz	r7, 800bce4 <__gethex+0x2d0>
 800bcda:	4639      	mov	r1, r7
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f7fe fd53 	bl	800a788 <__any_on>
 800bce2:	4681      	mov	r9, r0
 800bce4:	117a      	asrs	r2, r7, #5
 800bce6:	2301      	movs	r3, #1
 800bce8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bcec:	f007 071f 	and.w	r7, r7, #31
 800bcf0:	40bb      	lsls	r3, r7
 800bcf2:	4213      	tst	r3, r2
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	bf18      	it	ne
 800bcfa:	f049 0902 	orrne.w	r9, r9, #2
 800bcfe:	f7ff fe21 	bl	800b944 <rshift>
 800bd02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bd06:	1b76      	subs	r6, r6, r5
 800bd08:	2502      	movs	r5, #2
 800bd0a:	f1b9 0f00 	cmp.w	r9, #0
 800bd0e:	d047      	beq.n	800bda0 <__gethex+0x38c>
 800bd10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d015      	beq.n	800bd44 <__gethex+0x330>
 800bd18:	2b03      	cmp	r3, #3
 800bd1a:	d017      	beq.n	800bd4c <__gethex+0x338>
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d109      	bne.n	800bd34 <__gethex+0x320>
 800bd20:	f019 0f02 	tst.w	r9, #2
 800bd24:	d006      	beq.n	800bd34 <__gethex+0x320>
 800bd26:	f8da 3000 	ldr.w	r3, [sl]
 800bd2a:	ea49 0903 	orr.w	r9, r9, r3
 800bd2e:	f019 0f01 	tst.w	r9, #1
 800bd32:	d10e      	bne.n	800bd52 <__gethex+0x33e>
 800bd34:	f045 0510 	orr.w	r5, r5, #16
 800bd38:	e032      	b.n	800bda0 <__gethex+0x38c>
 800bd3a:	f04f 0901 	mov.w	r9, #1
 800bd3e:	e7d1      	b.n	800bce4 <__gethex+0x2d0>
 800bd40:	2501      	movs	r5, #1
 800bd42:	e7e2      	b.n	800bd0a <__gethex+0x2f6>
 800bd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd46:	f1c3 0301 	rsb	r3, r3, #1
 800bd4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0f0      	beq.n	800bd34 <__gethex+0x320>
 800bd52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd56:	f104 0314 	add.w	r3, r4, #20
 800bd5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bd5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bd62:	f04f 0c00 	mov.w	ip, #0
 800bd66:	4618      	mov	r0, r3
 800bd68:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bd70:	d01b      	beq.n	800bdaa <__gethex+0x396>
 800bd72:	3201      	adds	r2, #1
 800bd74:	6002      	str	r2, [r0, #0]
 800bd76:	2d02      	cmp	r5, #2
 800bd78:	f104 0314 	add.w	r3, r4, #20
 800bd7c:	d13c      	bne.n	800bdf8 <__gethex+0x3e4>
 800bd7e:	f8d8 2000 	ldr.w	r2, [r8]
 800bd82:	3a01      	subs	r2, #1
 800bd84:	42b2      	cmp	r2, r6
 800bd86:	d109      	bne.n	800bd9c <__gethex+0x388>
 800bd88:	1171      	asrs	r1, r6, #5
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd90:	f006 061f 	and.w	r6, r6, #31
 800bd94:	fa02 f606 	lsl.w	r6, r2, r6
 800bd98:	421e      	tst	r6, r3
 800bd9a:	d13a      	bne.n	800be12 <__gethex+0x3fe>
 800bd9c:	f045 0520 	orr.w	r5, r5, #32
 800bda0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bda2:	601c      	str	r4, [r3, #0]
 800bda4:	9b02      	ldr	r3, [sp, #8]
 800bda6:	601f      	str	r7, [r3, #0]
 800bda8:	e6b0      	b.n	800bb0c <__gethex+0xf8>
 800bdaa:	4299      	cmp	r1, r3
 800bdac:	f843 cc04 	str.w	ip, [r3, #-4]
 800bdb0:	d8d9      	bhi.n	800bd66 <__gethex+0x352>
 800bdb2:	68a3      	ldr	r3, [r4, #8]
 800bdb4:	459b      	cmp	fp, r3
 800bdb6:	db17      	blt.n	800bde8 <__gethex+0x3d4>
 800bdb8:	6861      	ldr	r1, [r4, #4]
 800bdba:	9801      	ldr	r0, [sp, #4]
 800bdbc:	3101      	adds	r1, #1
 800bdbe:	f7fe f855 	bl	8009e6c <_Balloc>
 800bdc2:	4681      	mov	r9, r0
 800bdc4:	b918      	cbnz	r0, 800bdce <__gethex+0x3ba>
 800bdc6:	4b1a      	ldr	r3, [pc, #104]	@ (800be30 <__gethex+0x41c>)
 800bdc8:	4602      	mov	r2, r0
 800bdca:	2184      	movs	r1, #132	@ 0x84
 800bdcc:	e6c5      	b.n	800bb5a <__gethex+0x146>
 800bdce:	6922      	ldr	r2, [r4, #16]
 800bdd0:	3202      	adds	r2, #2
 800bdd2:	f104 010c 	add.w	r1, r4, #12
 800bdd6:	0092      	lsls	r2, r2, #2
 800bdd8:	300c      	adds	r0, #12
 800bdda:	f7ff fd69 	bl	800b8b0 <memcpy>
 800bdde:	4621      	mov	r1, r4
 800bde0:	9801      	ldr	r0, [sp, #4]
 800bde2:	f7fe f883 	bl	8009eec <_Bfree>
 800bde6:	464c      	mov	r4, r9
 800bde8:	6923      	ldr	r3, [r4, #16]
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdf0:	6122      	str	r2, [r4, #16]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	615a      	str	r2, [r3, #20]
 800bdf6:	e7be      	b.n	800bd76 <__gethex+0x362>
 800bdf8:	6922      	ldr	r2, [r4, #16]
 800bdfa:	455a      	cmp	r2, fp
 800bdfc:	dd0b      	ble.n	800be16 <__gethex+0x402>
 800bdfe:	2101      	movs	r1, #1
 800be00:	4620      	mov	r0, r4
 800be02:	f7ff fd9f 	bl	800b944 <rshift>
 800be06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be0a:	3701      	adds	r7, #1
 800be0c:	42bb      	cmp	r3, r7
 800be0e:	f6ff aee0 	blt.w	800bbd2 <__gethex+0x1be>
 800be12:	2501      	movs	r5, #1
 800be14:	e7c2      	b.n	800bd9c <__gethex+0x388>
 800be16:	f016 061f 	ands.w	r6, r6, #31
 800be1a:	d0fa      	beq.n	800be12 <__gethex+0x3fe>
 800be1c:	4453      	add	r3, sl
 800be1e:	f1c6 0620 	rsb	r6, r6, #32
 800be22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be26:	f7fe f913 	bl	800a050 <__hi0bits>
 800be2a:	42b0      	cmp	r0, r6
 800be2c:	dbe7      	blt.n	800bdfe <__gethex+0x3ea>
 800be2e:	e7f0      	b.n	800be12 <__gethex+0x3fe>
 800be30:	0800cf21 	.word	0x0800cf21

0800be34 <L_shift>:
 800be34:	f1c2 0208 	rsb	r2, r2, #8
 800be38:	0092      	lsls	r2, r2, #2
 800be3a:	b570      	push	{r4, r5, r6, lr}
 800be3c:	f1c2 0620 	rsb	r6, r2, #32
 800be40:	6843      	ldr	r3, [r0, #4]
 800be42:	6804      	ldr	r4, [r0, #0]
 800be44:	fa03 f506 	lsl.w	r5, r3, r6
 800be48:	432c      	orrs	r4, r5
 800be4a:	40d3      	lsrs	r3, r2
 800be4c:	6004      	str	r4, [r0, #0]
 800be4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800be52:	4288      	cmp	r0, r1
 800be54:	d3f4      	bcc.n	800be40 <L_shift+0xc>
 800be56:	bd70      	pop	{r4, r5, r6, pc}

0800be58 <__match>:
 800be58:	b530      	push	{r4, r5, lr}
 800be5a:	6803      	ldr	r3, [r0, #0]
 800be5c:	3301      	adds	r3, #1
 800be5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be62:	b914      	cbnz	r4, 800be6a <__match+0x12>
 800be64:	6003      	str	r3, [r0, #0]
 800be66:	2001      	movs	r0, #1
 800be68:	bd30      	pop	{r4, r5, pc}
 800be6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800be72:	2d19      	cmp	r5, #25
 800be74:	bf98      	it	ls
 800be76:	3220      	addls	r2, #32
 800be78:	42a2      	cmp	r2, r4
 800be7a:	d0f0      	beq.n	800be5e <__match+0x6>
 800be7c:	2000      	movs	r0, #0
 800be7e:	e7f3      	b.n	800be68 <__match+0x10>

0800be80 <__hexnan>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	680b      	ldr	r3, [r1, #0]
 800be86:	6801      	ldr	r1, [r0, #0]
 800be88:	115e      	asrs	r6, r3, #5
 800be8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be8e:	f013 031f 	ands.w	r3, r3, #31
 800be92:	b087      	sub	sp, #28
 800be94:	bf18      	it	ne
 800be96:	3604      	addne	r6, #4
 800be98:	2500      	movs	r5, #0
 800be9a:	1f37      	subs	r7, r6, #4
 800be9c:	4682      	mov	sl, r0
 800be9e:	4690      	mov	r8, r2
 800bea0:	9301      	str	r3, [sp, #4]
 800bea2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bea6:	46b9      	mov	r9, r7
 800bea8:	463c      	mov	r4, r7
 800beaa:	9502      	str	r5, [sp, #8]
 800beac:	46ab      	mov	fp, r5
 800beae:	784a      	ldrb	r2, [r1, #1]
 800beb0:	1c4b      	adds	r3, r1, #1
 800beb2:	9303      	str	r3, [sp, #12]
 800beb4:	b342      	cbz	r2, 800bf08 <__hexnan+0x88>
 800beb6:	4610      	mov	r0, r2
 800beb8:	9105      	str	r1, [sp, #20]
 800beba:	9204      	str	r2, [sp, #16]
 800bebc:	f7ff fd94 	bl	800b9e8 <__hexdig_fun>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d151      	bne.n	800bf68 <__hexnan+0xe8>
 800bec4:	9a04      	ldr	r2, [sp, #16]
 800bec6:	9905      	ldr	r1, [sp, #20]
 800bec8:	2a20      	cmp	r2, #32
 800beca:	d818      	bhi.n	800befe <__hexnan+0x7e>
 800becc:	9b02      	ldr	r3, [sp, #8]
 800bece:	459b      	cmp	fp, r3
 800bed0:	dd13      	ble.n	800befa <__hexnan+0x7a>
 800bed2:	454c      	cmp	r4, r9
 800bed4:	d206      	bcs.n	800bee4 <__hexnan+0x64>
 800bed6:	2d07      	cmp	r5, #7
 800bed8:	dc04      	bgt.n	800bee4 <__hexnan+0x64>
 800beda:	462a      	mov	r2, r5
 800bedc:	4649      	mov	r1, r9
 800bede:	4620      	mov	r0, r4
 800bee0:	f7ff ffa8 	bl	800be34 <L_shift>
 800bee4:	4544      	cmp	r4, r8
 800bee6:	d952      	bls.n	800bf8e <__hexnan+0x10e>
 800bee8:	2300      	movs	r3, #0
 800beea:	f1a4 0904 	sub.w	r9, r4, #4
 800beee:	f844 3c04 	str.w	r3, [r4, #-4]
 800bef2:	f8cd b008 	str.w	fp, [sp, #8]
 800bef6:	464c      	mov	r4, r9
 800bef8:	461d      	mov	r5, r3
 800befa:	9903      	ldr	r1, [sp, #12]
 800befc:	e7d7      	b.n	800beae <__hexnan+0x2e>
 800befe:	2a29      	cmp	r2, #41	@ 0x29
 800bf00:	d157      	bne.n	800bfb2 <__hexnan+0x132>
 800bf02:	3102      	adds	r1, #2
 800bf04:	f8ca 1000 	str.w	r1, [sl]
 800bf08:	f1bb 0f00 	cmp.w	fp, #0
 800bf0c:	d051      	beq.n	800bfb2 <__hexnan+0x132>
 800bf0e:	454c      	cmp	r4, r9
 800bf10:	d206      	bcs.n	800bf20 <__hexnan+0xa0>
 800bf12:	2d07      	cmp	r5, #7
 800bf14:	dc04      	bgt.n	800bf20 <__hexnan+0xa0>
 800bf16:	462a      	mov	r2, r5
 800bf18:	4649      	mov	r1, r9
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f7ff ff8a 	bl	800be34 <L_shift>
 800bf20:	4544      	cmp	r4, r8
 800bf22:	d936      	bls.n	800bf92 <__hexnan+0x112>
 800bf24:	f1a8 0204 	sub.w	r2, r8, #4
 800bf28:	4623      	mov	r3, r4
 800bf2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf32:	429f      	cmp	r7, r3
 800bf34:	d2f9      	bcs.n	800bf2a <__hexnan+0xaa>
 800bf36:	1b3b      	subs	r3, r7, r4
 800bf38:	f023 0303 	bic.w	r3, r3, #3
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	3401      	adds	r4, #1
 800bf40:	3e03      	subs	r6, #3
 800bf42:	42b4      	cmp	r4, r6
 800bf44:	bf88      	it	hi
 800bf46:	2304      	movhi	r3, #4
 800bf48:	4443      	add	r3, r8
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f843 2b04 	str.w	r2, [r3], #4
 800bf50:	429f      	cmp	r7, r3
 800bf52:	d2fb      	bcs.n	800bf4c <__hexnan+0xcc>
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	b91b      	cbnz	r3, 800bf60 <__hexnan+0xe0>
 800bf58:	4547      	cmp	r7, r8
 800bf5a:	d128      	bne.n	800bfae <__hexnan+0x12e>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	603b      	str	r3, [r7, #0]
 800bf60:	2005      	movs	r0, #5
 800bf62:	b007      	add	sp, #28
 800bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf68:	3501      	adds	r5, #1
 800bf6a:	2d08      	cmp	r5, #8
 800bf6c:	f10b 0b01 	add.w	fp, fp, #1
 800bf70:	dd06      	ble.n	800bf80 <__hexnan+0x100>
 800bf72:	4544      	cmp	r4, r8
 800bf74:	d9c1      	bls.n	800befa <__hexnan+0x7a>
 800bf76:	2300      	movs	r3, #0
 800bf78:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf7c:	2501      	movs	r5, #1
 800bf7e:	3c04      	subs	r4, #4
 800bf80:	6822      	ldr	r2, [r4, #0]
 800bf82:	f000 000f 	and.w	r0, r0, #15
 800bf86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bf8a:	6020      	str	r0, [r4, #0]
 800bf8c:	e7b5      	b.n	800befa <__hexnan+0x7a>
 800bf8e:	2508      	movs	r5, #8
 800bf90:	e7b3      	b.n	800befa <__hexnan+0x7a>
 800bf92:	9b01      	ldr	r3, [sp, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d0dd      	beq.n	800bf54 <__hexnan+0xd4>
 800bf98:	f1c3 0320 	rsb	r3, r3, #32
 800bf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa0:	40da      	lsrs	r2, r3
 800bfa2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bfac:	e7d2      	b.n	800bf54 <__hexnan+0xd4>
 800bfae:	3f04      	subs	r7, #4
 800bfb0:	e7d0      	b.n	800bf54 <__hexnan+0xd4>
 800bfb2:	2004      	movs	r0, #4
 800bfb4:	e7d5      	b.n	800bf62 <__hexnan+0xe2>

0800bfb6 <__ascii_mbtowc>:
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	b901      	cbnz	r1, 800bfbc <__ascii_mbtowc+0x6>
 800bfba:	a901      	add	r1, sp, #4
 800bfbc:	b142      	cbz	r2, 800bfd0 <__ascii_mbtowc+0x1a>
 800bfbe:	b14b      	cbz	r3, 800bfd4 <__ascii_mbtowc+0x1e>
 800bfc0:	7813      	ldrb	r3, [r2, #0]
 800bfc2:	600b      	str	r3, [r1, #0]
 800bfc4:	7812      	ldrb	r2, [r2, #0]
 800bfc6:	1e10      	subs	r0, r2, #0
 800bfc8:	bf18      	it	ne
 800bfca:	2001      	movne	r0, #1
 800bfcc:	b002      	add	sp, #8
 800bfce:	4770      	bx	lr
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	e7fb      	b.n	800bfcc <__ascii_mbtowc+0x16>
 800bfd4:	f06f 0001 	mvn.w	r0, #1
 800bfd8:	e7f8      	b.n	800bfcc <__ascii_mbtowc+0x16>

0800bfda <_realloc_r>:
 800bfda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfde:	4680      	mov	r8, r0
 800bfe0:	4615      	mov	r5, r2
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	b921      	cbnz	r1, 800bff0 <_realloc_r+0x16>
 800bfe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfea:	4611      	mov	r1, r2
 800bfec:	f7fd beb2 	b.w	8009d54 <_malloc_r>
 800bff0:	b92a      	cbnz	r2, 800bffe <_realloc_r+0x24>
 800bff2:	f7fd fe3b 	bl	8009c6c <_free_r>
 800bff6:	2400      	movs	r4, #0
 800bff8:	4620      	mov	r0, r4
 800bffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffe:	f000 f840 	bl	800c082 <_malloc_usable_size_r>
 800c002:	4285      	cmp	r5, r0
 800c004:	4606      	mov	r6, r0
 800c006:	d802      	bhi.n	800c00e <_realloc_r+0x34>
 800c008:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c00c:	d8f4      	bhi.n	800bff8 <_realloc_r+0x1e>
 800c00e:	4629      	mov	r1, r5
 800c010:	4640      	mov	r0, r8
 800c012:	f7fd fe9f 	bl	8009d54 <_malloc_r>
 800c016:	4607      	mov	r7, r0
 800c018:	2800      	cmp	r0, #0
 800c01a:	d0ec      	beq.n	800bff6 <_realloc_r+0x1c>
 800c01c:	42b5      	cmp	r5, r6
 800c01e:	462a      	mov	r2, r5
 800c020:	4621      	mov	r1, r4
 800c022:	bf28      	it	cs
 800c024:	4632      	movcs	r2, r6
 800c026:	f7ff fc43 	bl	800b8b0 <memcpy>
 800c02a:	4621      	mov	r1, r4
 800c02c:	4640      	mov	r0, r8
 800c02e:	f7fd fe1d 	bl	8009c6c <_free_r>
 800c032:	463c      	mov	r4, r7
 800c034:	e7e0      	b.n	800bff8 <_realloc_r+0x1e>

0800c036 <__ascii_wctomb>:
 800c036:	4603      	mov	r3, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	b141      	cbz	r1, 800c04e <__ascii_wctomb+0x18>
 800c03c:	2aff      	cmp	r2, #255	@ 0xff
 800c03e:	d904      	bls.n	800c04a <__ascii_wctomb+0x14>
 800c040:	228a      	movs	r2, #138	@ 0x8a
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	4770      	bx	lr
 800c04a:	700a      	strb	r2, [r1, #0]
 800c04c:	2001      	movs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <fiprintf>:
 800c050:	b40e      	push	{r1, r2, r3}
 800c052:	b503      	push	{r0, r1, lr}
 800c054:	4601      	mov	r1, r0
 800c056:	ab03      	add	r3, sp, #12
 800c058:	4805      	ldr	r0, [pc, #20]	@ (800c070 <fiprintf+0x20>)
 800c05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c05e:	6800      	ldr	r0, [r0, #0]
 800c060:	9301      	str	r3, [sp, #4]
 800c062:	f000 f83f 	bl	800c0e4 <_vfiprintf_r>
 800c066:	b002      	add	sp, #8
 800c068:	f85d eb04 	ldr.w	lr, [sp], #4
 800c06c:	b003      	add	sp, #12
 800c06e:	4770      	bx	lr
 800c070:	2400001c 	.word	0x2400001c

0800c074 <abort>:
 800c074:	b508      	push	{r3, lr}
 800c076:	2006      	movs	r0, #6
 800c078:	f000 fa08 	bl	800c48c <raise>
 800c07c:	2001      	movs	r0, #1
 800c07e:	f7f5 ff99 	bl	8001fb4 <_exit>

0800c082 <_malloc_usable_size_r>:
 800c082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c086:	1f18      	subs	r0, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	bfbc      	itt	lt
 800c08c:	580b      	ldrlt	r3, [r1, r0]
 800c08e:	18c0      	addlt	r0, r0, r3
 800c090:	4770      	bx	lr

0800c092 <__sfputc_r>:
 800c092:	6893      	ldr	r3, [r2, #8]
 800c094:	3b01      	subs	r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	b410      	push	{r4}
 800c09a:	6093      	str	r3, [r2, #8]
 800c09c:	da08      	bge.n	800c0b0 <__sfputc_r+0x1e>
 800c09e:	6994      	ldr	r4, [r2, #24]
 800c0a0:	42a3      	cmp	r3, r4
 800c0a2:	db01      	blt.n	800c0a8 <__sfputc_r+0x16>
 800c0a4:	290a      	cmp	r1, #10
 800c0a6:	d103      	bne.n	800c0b0 <__sfputc_r+0x1e>
 800c0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0ac:	f000 b932 	b.w	800c314 <__swbuf_r>
 800c0b0:	6813      	ldr	r3, [r2, #0]
 800c0b2:	1c58      	adds	r0, r3, #1
 800c0b4:	6010      	str	r0, [r2, #0]
 800c0b6:	7019      	strb	r1, [r3, #0]
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <__sfputs_r>:
 800c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	460f      	mov	r7, r1
 800c0c6:	4614      	mov	r4, r2
 800c0c8:	18d5      	adds	r5, r2, r3
 800c0ca:	42ac      	cmp	r4, r5
 800c0cc:	d101      	bne.n	800c0d2 <__sfputs_r+0x12>
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	e007      	b.n	800c0e2 <__sfputs_r+0x22>
 800c0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d6:	463a      	mov	r2, r7
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f7ff ffda 	bl	800c092 <__sfputc_r>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d1f3      	bne.n	800c0ca <__sfputs_r+0xa>
 800c0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c0e4 <_vfiprintf_r>:
 800c0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	460d      	mov	r5, r1
 800c0ea:	b09d      	sub	sp, #116	@ 0x74
 800c0ec:	4614      	mov	r4, r2
 800c0ee:	4698      	mov	r8, r3
 800c0f0:	4606      	mov	r6, r0
 800c0f2:	b118      	cbz	r0, 800c0fc <_vfiprintf_r+0x18>
 800c0f4:	6a03      	ldr	r3, [r0, #32]
 800c0f6:	b90b      	cbnz	r3, 800c0fc <_vfiprintf_r+0x18>
 800c0f8:	f7fc fe86 	bl	8008e08 <__sinit>
 800c0fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0fe:	07d9      	lsls	r1, r3, #31
 800c100:	d405      	bmi.n	800c10e <_vfiprintf_r+0x2a>
 800c102:	89ab      	ldrh	r3, [r5, #12]
 800c104:	059a      	lsls	r2, r3, #22
 800c106:	d402      	bmi.n	800c10e <_vfiprintf_r+0x2a>
 800c108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c10a:	f7fc ffc8 	bl	800909e <__retarget_lock_acquire_recursive>
 800c10e:	89ab      	ldrh	r3, [r5, #12]
 800c110:	071b      	lsls	r3, r3, #28
 800c112:	d501      	bpl.n	800c118 <_vfiprintf_r+0x34>
 800c114:	692b      	ldr	r3, [r5, #16]
 800c116:	b99b      	cbnz	r3, 800c140 <_vfiprintf_r+0x5c>
 800c118:	4629      	mov	r1, r5
 800c11a:	4630      	mov	r0, r6
 800c11c:	f000 f938 	bl	800c390 <__swsetup_r>
 800c120:	b170      	cbz	r0, 800c140 <_vfiprintf_r+0x5c>
 800c122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c124:	07dc      	lsls	r4, r3, #31
 800c126:	d504      	bpl.n	800c132 <_vfiprintf_r+0x4e>
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	b01d      	add	sp, #116	@ 0x74
 800c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c132:	89ab      	ldrh	r3, [r5, #12]
 800c134:	0598      	lsls	r0, r3, #22
 800c136:	d4f7      	bmi.n	800c128 <_vfiprintf_r+0x44>
 800c138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c13a:	f7fc ffb1 	bl	80090a0 <__retarget_lock_release_recursive>
 800c13e:	e7f3      	b.n	800c128 <_vfiprintf_r+0x44>
 800c140:	2300      	movs	r3, #0
 800c142:	9309      	str	r3, [sp, #36]	@ 0x24
 800c144:	2320      	movs	r3, #32
 800c146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c14a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c14e:	2330      	movs	r3, #48	@ 0x30
 800c150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c300 <_vfiprintf_r+0x21c>
 800c154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c158:	f04f 0901 	mov.w	r9, #1
 800c15c:	4623      	mov	r3, r4
 800c15e:	469a      	mov	sl, r3
 800c160:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c164:	b10a      	cbz	r2, 800c16a <_vfiprintf_r+0x86>
 800c166:	2a25      	cmp	r2, #37	@ 0x25
 800c168:	d1f9      	bne.n	800c15e <_vfiprintf_r+0x7a>
 800c16a:	ebba 0b04 	subs.w	fp, sl, r4
 800c16e:	d00b      	beq.n	800c188 <_vfiprintf_r+0xa4>
 800c170:	465b      	mov	r3, fp
 800c172:	4622      	mov	r2, r4
 800c174:	4629      	mov	r1, r5
 800c176:	4630      	mov	r0, r6
 800c178:	f7ff ffa2 	bl	800c0c0 <__sfputs_r>
 800c17c:	3001      	adds	r0, #1
 800c17e:	f000 80a7 	beq.w	800c2d0 <_vfiprintf_r+0x1ec>
 800c182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c184:	445a      	add	r2, fp
 800c186:	9209      	str	r2, [sp, #36]	@ 0x24
 800c188:	f89a 3000 	ldrb.w	r3, [sl]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f000 809f 	beq.w	800c2d0 <_vfiprintf_r+0x1ec>
 800c192:	2300      	movs	r3, #0
 800c194:	f04f 32ff 	mov.w	r2, #4294967295
 800c198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c19c:	f10a 0a01 	add.w	sl, sl, #1
 800c1a0:	9304      	str	r3, [sp, #16]
 800c1a2:	9307      	str	r3, [sp, #28]
 800c1a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1aa:	4654      	mov	r4, sl
 800c1ac:	2205      	movs	r2, #5
 800c1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b2:	4853      	ldr	r0, [pc, #332]	@ (800c300 <_vfiprintf_r+0x21c>)
 800c1b4:	f7f4 f894 	bl	80002e0 <memchr>
 800c1b8:	9a04      	ldr	r2, [sp, #16]
 800c1ba:	b9d8      	cbnz	r0, 800c1f4 <_vfiprintf_r+0x110>
 800c1bc:	06d1      	lsls	r1, r2, #27
 800c1be:	bf44      	itt	mi
 800c1c0:	2320      	movmi	r3, #32
 800c1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1c6:	0713      	lsls	r3, r2, #28
 800c1c8:	bf44      	itt	mi
 800c1ca:	232b      	movmi	r3, #43	@ 0x2b
 800c1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1d6:	d015      	beq.n	800c204 <_vfiprintf_r+0x120>
 800c1d8:	9a07      	ldr	r2, [sp, #28]
 800c1da:	4654      	mov	r4, sl
 800c1dc:	2000      	movs	r0, #0
 800c1de:	f04f 0c0a 	mov.w	ip, #10
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1e8:	3b30      	subs	r3, #48	@ 0x30
 800c1ea:	2b09      	cmp	r3, #9
 800c1ec:	d94b      	bls.n	800c286 <_vfiprintf_r+0x1a2>
 800c1ee:	b1b0      	cbz	r0, 800c21e <_vfiprintf_r+0x13a>
 800c1f0:	9207      	str	r2, [sp, #28]
 800c1f2:	e014      	b.n	800c21e <_vfiprintf_r+0x13a>
 800c1f4:	eba0 0308 	sub.w	r3, r0, r8
 800c1f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	9304      	str	r3, [sp, #16]
 800c200:	46a2      	mov	sl, r4
 800c202:	e7d2      	b.n	800c1aa <_vfiprintf_r+0xc6>
 800c204:	9b03      	ldr	r3, [sp, #12]
 800c206:	1d19      	adds	r1, r3, #4
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	9103      	str	r1, [sp, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	bfbb      	ittet	lt
 800c210:	425b      	neglt	r3, r3
 800c212:	f042 0202 	orrlt.w	r2, r2, #2
 800c216:	9307      	strge	r3, [sp, #28]
 800c218:	9307      	strlt	r3, [sp, #28]
 800c21a:	bfb8      	it	lt
 800c21c:	9204      	strlt	r2, [sp, #16]
 800c21e:	7823      	ldrb	r3, [r4, #0]
 800c220:	2b2e      	cmp	r3, #46	@ 0x2e
 800c222:	d10a      	bne.n	800c23a <_vfiprintf_r+0x156>
 800c224:	7863      	ldrb	r3, [r4, #1]
 800c226:	2b2a      	cmp	r3, #42	@ 0x2a
 800c228:	d132      	bne.n	800c290 <_vfiprintf_r+0x1ac>
 800c22a:	9b03      	ldr	r3, [sp, #12]
 800c22c:	1d1a      	adds	r2, r3, #4
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	9203      	str	r2, [sp, #12]
 800c232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c236:	3402      	adds	r4, #2
 800c238:	9305      	str	r3, [sp, #20]
 800c23a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c310 <_vfiprintf_r+0x22c>
 800c23e:	7821      	ldrb	r1, [r4, #0]
 800c240:	2203      	movs	r2, #3
 800c242:	4650      	mov	r0, sl
 800c244:	f7f4 f84c 	bl	80002e0 <memchr>
 800c248:	b138      	cbz	r0, 800c25a <_vfiprintf_r+0x176>
 800c24a:	9b04      	ldr	r3, [sp, #16]
 800c24c:	eba0 000a 	sub.w	r0, r0, sl
 800c250:	2240      	movs	r2, #64	@ 0x40
 800c252:	4082      	lsls	r2, r0
 800c254:	4313      	orrs	r3, r2
 800c256:	3401      	adds	r4, #1
 800c258:	9304      	str	r3, [sp, #16]
 800c25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25e:	4829      	ldr	r0, [pc, #164]	@ (800c304 <_vfiprintf_r+0x220>)
 800c260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c264:	2206      	movs	r2, #6
 800c266:	f7f4 f83b 	bl	80002e0 <memchr>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d03f      	beq.n	800c2ee <_vfiprintf_r+0x20a>
 800c26e:	4b26      	ldr	r3, [pc, #152]	@ (800c308 <_vfiprintf_r+0x224>)
 800c270:	bb1b      	cbnz	r3, 800c2ba <_vfiprintf_r+0x1d6>
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	3307      	adds	r3, #7
 800c276:	f023 0307 	bic.w	r3, r3, #7
 800c27a:	3308      	adds	r3, #8
 800c27c:	9303      	str	r3, [sp, #12]
 800c27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c280:	443b      	add	r3, r7
 800c282:	9309      	str	r3, [sp, #36]	@ 0x24
 800c284:	e76a      	b.n	800c15c <_vfiprintf_r+0x78>
 800c286:	fb0c 3202 	mla	r2, ip, r2, r3
 800c28a:	460c      	mov	r4, r1
 800c28c:	2001      	movs	r0, #1
 800c28e:	e7a8      	b.n	800c1e2 <_vfiprintf_r+0xfe>
 800c290:	2300      	movs	r3, #0
 800c292:	3401      	adds	r4, #1
 800c294:	9305      	str	r3, [sp, #20]
 800c296:	4619      	mov	r1, r3
 800c298:	f04f 0c0a 	mov.w	ip, #10
 800c29c:	4620      	mov	r0, r4
 800c29e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2a2:	3a30      	subs	r2, #48	@ 0x30
 800c2a4:	2a09      	cmp	r2, #9
 800c2a6:	d903      	bls.n	800c2b0 <_vfiprintf_r+0x1cc>
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d0c6      	beq.n	800c23a <_vfiprintf_r+0x156>
 800c2ac:	9105      	str	r1, [sp, #20]
 800c2ae:	e7c4      	b.n	800c23a <_vfiprintf_r+0x156>
 800c2b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e7f0      	b.n	800c29c <_vfiprintf_r+0x1b8>
 800c2ba:	ab03      	add	r3, sp, #12
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	462a      	mov	r2, r5
 800c2c0:	4b12      	ldr	r3, [pc, #72]	@ (800c30c <_vfiprintf_r+0x228>)
 800c2c2:	a904      	add	r1, sp, #16
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f7fb ff5f 	bl	8008188 <_printf_float>
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	1c78      	adds	r0, r7, #1
 800c2ce:	d1d6      	bne.n	800c27e <_vfiprintf_r+0x19a>
 800c2d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2d2:	07d9      	lsls	r1, r3, #31
 800c2d4:	d405      	bmi.n	800c2e2 <_vfiprintf_r+0x1fe>
 800c2d6:	89ab      	ldrh	r3, [r5, #12]
 800c2d8:	059a      	lsls	r2, r3, #22
 800c2da:	d402      	bmi.n	800c2e2 <_vfiprintf_r+0x1fe>
 800c2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2de:	f7fc fedf 	bl	80090a0 <__retarget_lock_release_recursive>
 800c2e2:	89ab      	ldrh	r3, [r5, #12]
 800c2e4:	065b      	lsls	r3, r3, #25
 800c2e6:	f53f af1f 	bmi.w	800c128 <_vfiprintf_r+0x44>
 800c2ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2ec:	e71e      	b.n	800c12c <_vfiprintf_r+0x48>
 800c2ee:	ab03      	add	r3, sp, #12
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	462a      	mov	r2, r5
 800c2f4:	4b05      	ldr	r3, [pc, #20]	@ (800c30c <_vfiprintf_r+0x228>)
 800c2f6:	a904      	add	r1, sp, #16
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f7fc f9cd 	bl	8008698 <_printf_i>
 800c2fe:	e7e4      	b.n	800c2ca <_vfiprintf_r+0x1e6>
 800c300:	0800d1e1 	.word	0x0800d1e1
 800c304:	0800d1eb 	.word	0x0800d1eb
 800c308:	08008189 	.word	0x08008189
 800c30c:	0800c0c1 	.word	0x0800c0c1
 800c310:	0800d1e7 	.word	0x0800d1e7

0800c314 <__swbuf_r>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	460e      	mov	r6, r1
 800c318:	4614      	mov	r4, r2
 800c31a:	4605      	mov	r5, r0
 800c31c:	b118      	cbz	r0, 800c326 <__swbuf_r+0x12>
 800c31e:	6a03      	ldr	r3, [r0, #32]
 800c320:	b90b      	cbnz	r3, 800c326 <__swbuf_r+0x12>
 800c322:	f7fc fd71 	bl	8008e08 <__sinit>
 800c326:	69a3      	ldr	r3, [r4, #24]
 800c328:	60a3      	str	r3, [r4, #8]
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	071a      	lsls	r2, r3, #28
 800c32e:	d501      	bpl.n	800c334 <__swbuf_r+0x20>
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	b943      	cbnz	r3, 800c346 <__swbuf_r+0x32>
 800c334:	4621      	mov	r1, r4
 800c336:	4628      	mov	r0, r5
 800c338:	f000 f82a 	bl	800c390 <__swsetup_r>
 800c33c:	b118      	cbz	r0, 800c346 <__swbuf_r+0x32>
 800c33e:	f04f 37ff 	mov.w	r7, #4294967295
 800c342:	4638      	mov	r0, r7
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	6922      	ldr	r2, [r4, #16]
 800c34a:	1a98      	subs	r0, r3, r2
 800c34c:	6963      	ldr	r3, [r4, #20]
 800c34e:	b2f6      	uxtb	r6, r6
 800c350:	4283      	cmp	r3, r0
 800c352:	4637      	mov	r7, r6
 800c354:	dc05      	bgt.n	800c362 <__swbuf_r+0x4e>
 800c356:	4621      	mov	r1, r4
 800c358:	4628      	mov	r0, r5
 800c35a:	f7ff fa45 	bl	800b7e8 <_fflush_r>
 800c35e:	2800      	cmp	r0, #0
 800c360:	d1ed      	bne.n	800c33e <__swbuf_r+0x2a>
 800c362:	68a3      	ldr	r3, [r4, #8]
 800c364:	3b01      	subs	r3, #1
 800c366:	60a3      	str	r3, [r4, #8]
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	6022      	str	r2, [r4, #0]
 800c36e:	701e      	strb	r6, [r3, #0]
 800c370:	6962      	ldr	r2, [r4, #20]
 800c372:	1c43      	adds	r3, r0, #1
 800c374:	429a      	cmp	r2, r3
 800c376:	d004      	beq.n	800c382 <__swbuf_r+0x6e>
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	07db      	lsls	r3, r3, #31
 800c37c:	d5e1      	bpl.n	800c342 <__swbuf_r+0x2e>
 800c37e:	2e0a      	cmp	r6, #10
 800c380:	d1df      	bne.n	800c342 <__swbuf_r+0x2e>
 800c382:	4621      	mov	r1, r4
 800c384:	4628      	mov	r0, r5
 800c386:	f7ff fa2f 	bl	800b7e8 <_fflush_r>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d0d9      	beq.n	800c342 <__swbuf_r+0x2e>
 800c38e:	e7d6      	b.n	800c33e <__swbuf_r+0x2a>

0800c390 <__swsetup_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4b29      	ldr	r3, [pc, #164]	@ (800c438 <__swsetup_r+0xa8>)
 800c394:	4605      	mov	r5, r0
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	460c      	mov	r4, r1
 800c39a:	b118      	cbz	r0, 800c3a4 <__swsetup_r+0x14>
 800c39c:	6a03      	ldr	r3, [r0, #32]
 800c39e:	b90b      	cbnz	r3, 800c3a4 <__swsetup_r+0x14>
 800c3a0:	f7fc fd32 	bl	8008e08 <__sinit>
 800c3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3a8:	0719      	lsls	r1, r3, #28
 800c3aa:	d422      	bmi.n	800c3f2 <__swsetup_r+0x62>
 800c3ac:	06da      	lsls	r2, r3, #27
 800c3ae:	d407      	bmi.n	800c3c0 <__swsetup_r+0x30>
 800c3b0:	2209      	movs	r2, #9
 800c3b2:	602a      	str	r2, [r5, #0]
 800c3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3b8:	81a3      	strh	r3, [r4, #12]
 800c3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c3be:	e033      	b.n	800c428 <__swsetup_r+0x98>
 800c3c0:	0758      	lsls	r0, r3, #29
 800c3c2:	d512      	bpl.n	800c3ea <__swsetup_r+0x5a>
 800c3c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3c6:	b141      	cbz	r1, 800c3da <__swsetup_r+0x4a>
 800c3c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	d002      	beq.n	800c3d6 <__swsetup_r+0x46>
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f7fd fc4b 	bl	8009c6c <_free_r>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	6063      	str	r3, [r4, #4]
 800c3e6:	6923      	ldr	r3, [r4, #16]
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	89a3      	ldrh	r3, [r4, #12]
 800c3ec:	f043 0308 	orr.w	r3, r3, #8
 800c3f0:	81a3      	strh	r3, [r4, #12]
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	b94b      	cbnz	r3, 800c40a <__swsetup_r+0x7a>
 800c3f6:	89a3      	ldrh	r3, [r4, #12]
 800c3f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c3fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c400:	d003      	beq.n	800c40a <__swsetup_r+0x7a>
 800c402:	4621      	mov	r1, r4
 800c404:	4628      	mov	r0, r5
 800c406:	f000 f883 	bl	800c510 <__smakebuf_r>
 800c40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c40e:	f013 0201 	ands.w	r2, r3, #1
 800c412:	d00a      	beq.n	800c42a <__swsetup_r+0x9a>
 800c414:	2200      	movs	r2, #0
 800c416:	60a2      	str	r2, [r4, #8]
 800c418:	6962      	ldr	r2, [r4, #20]
 800c41a:	4252      	negs	r2, r2
 800c41c:	61a2      	str	r2, [r4, #24]
 800c41e:	6922      	ldr	r2, [r4, #16]
 800c420:	b942      	cbnz	r2, 800c434 <__swsetup_r+0xa4>
 800c422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c426:	d1c5      	bne.n	800c3b4 <__swsetup_r+0x24>
 800c428:	bd38      	pop	{r3, r4, r5, pc}
 800c42a:	0799      	lsls	r1, r3, #30
 800c42c:	bf58      	it	pl
 800c42e:	6962      	ldrpl	r2, [r4, #20]
 800c430:	60a2      	str	r2, [r4, #8]
 800c432:	e7f4      	b.n	800c41e <__swsetup_r+0x8e>
 800c434:	2000      	movs	r0, #0
 800c436:	e7f7      	b.n	800c428 <__swsetup_r+0x98>
 800c438:	2400001c 	.word	0x2400001c

0800c43c <_raise_r>:
 800c43c:	291f      	cmp	r1, #31
 800c43e:	b538      	push	{r3, r4, r5, lr}
 800c440:	4605      	mov	r5, r0
 800c442:	460c      	mov	r4, r1
 800c444:	d904      	bls.n	800c450 <_raise_r+0x14>
 800c446:	2316      	movs	r3, #22
 800c448:	6003      	str	r3, [r0, #0]
 800c44a:	f04f 30ff 	mov.w	r0, #4294967295
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c452:	b112      	cbz	r2, 800c45a <_raise_r+0x1e>
 800c454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c458:	b94b      	cbnz	r3, 800c46e <_raise_r+0x32>
 800c45a:	4628      	mov	r0, r5
 800c45c:	f000 f830 	bl	800c4c0 <_getpid_r>
 800c460:	4622      	mov	r2, r4
 800c462:	4601      	mov	r1, r0
 800c464:	4628      	mov	r0, r5
 800c466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c46a:	f000 b817 	b.w	800c49c <_kill_r>
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d00a      	beq.n	800c488 <_raise_r+0x4c>
 800c472:	1c59      	adds	r1, r3, #1
 800c474:	d103      	bne.n	800c47e <_raise_r+0x42>
 800c476:	2316      	movs	r3, #22
 800c478:	6003      	str	r3, [r0, #0]
 800c47a:	2001      	movs	r0, #1
 800c47c:	e7e7      	b.n	800c44e <_raise_r+0x12>
 800c47e:	2100      	movs	r1, #0
 800c480:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c484:	4620      	mov	r0, r4
 800c486:	4798      	blx	r3
 800c488:	2000      	movs	r0, #0
 800c48a:	e7e0      	b.n	800c44e <_raise_r+0x12>

0800c48c <raise>:
 800c48c:	4b02      	ldr	r3, [pc, #8]	@ (800c498 <raise+0xc>)
 800c48e:	4601      	mov	r1, r0
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	f7ff bfd3 	b.w	800c43c <_raise_r>
 800c496:	bf00      	nop
 800c498:	2400001c 	.word	0x2400001c

0800c49c <_kill_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4d07      	ldr	r5, [pc, #28]	@ (800c4bc <_kill_r+0x20>)
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	f7f5 fd73 	bl	8001f94 <_kill>
 800c4ae:	1c43      	adds	r3, r0, #1
 800c4b0:	d102      	bne.n	800c4b8 <_kill_r+0x1c>
 800c4b2:	682b      	ldr	r3, [r5, #0]
 800c4b4:	b103      	cbz	r3, 800c4b8 <_kill_r+0x1c>
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ba:	bf00      	nop
 800c4bc:	2400062c 	.word	0x2400062c

0800c4c0 <_getpid_r>:
 800c4c0:	f7f5 bd60 	b.w	8001f84 <_getpid>

0800c4c4 <__swhatbuf_r>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4cc:	2900      	cmp	r1, #0
 800c4ce:	b096      	sub	sp, #88	@ 0x58
 800c4d0:	4615      	mov	r5, r2
 800c4d2:	461e      	mov	r6, r3
 800c4d4:	da0d      	bge.n	800c4f2 <__swhatbuf_r+0x2e>
 800c4d6:	89a3      	ldrh	r3, [r4, #12]
 800c4d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c4dc:	f04f 0100 	mov.w	r1, #0
 800c4e0:	bf14      	ite	ne
 800c4e2:	2340      	movne	r3, #64	@ 0x40
 800c4e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	6031      	str	r1, [r6, #0]
 800c4ec:	602b      	str	r3, [r5, #0]
 800c4ee:	b016      	add	sp, #88	@ 0x58
 800c4f0:	bd70      	pop	{r4, r5, r6, pc}
 800c4f2:	466a      	mov	r2, sp
 800c4f4:	f000 f848 	bl	800c588 <_fstat_r>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	dbec      	blt.n	800c4d6 <__swhatbuf_r+0x12>
 800c4fc:	9901      	ldr	r1, [sp, #4]
 800c4fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c502:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c506:	4259      	negs	r1, r3
 800c508:	4159      	adcs	r1, r3
 800c50a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c50e:	e7eb      	b.n	800c4e8 <__swhatbuf_r+0x24>

0800c510 <__smakebuf_r>:
 800c510:	898b      	ldrh	r3, [r1, #12]
 800c512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c514:	079d      	lsls	r5, r3, #30
 800c516:	4606      	mov	r6, r0
 800c518:	460c      	mov	r4, r1
 800c51a:	d507      	bpl.n	800c52c <__smakebuf_r+0x1c>
 800c51c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	6123      	str	r3, [r4, #16]
 800c524:	2301      	movs	r3, #1
 800c526:	6163      	str	r3, [r4, #20]
 800c528:	b003      	add	sp, #12
 800c52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c52c:	ab01      	add	r3, sp, #4
 800c52e:	466a      	mov	r2, sp
 800c530:	f7ff ffc8 	bl	800c4c4 <__swhatbuf_r>
 800c534:	9f00      	ldr	r7, [sp, #0]
 800c536:	4605      	mov	r5, r0
 800c538:	4639      	mov	r1, r7
 800c53a:	4630      	mov	r0, r6
 800c53c:	f7fd fc0a 	bl	8009d54 <_malloc_r>
 800c540:	b948      	cbnz	r0, 800c556 <__smakebuf_r+0x46>
 800c542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c546:	059a      	lsls	r2, r3, #22
 800c548:	d4ee      	bmi.n	800c528 <__smakebuf_r+0x18>
 800c54a:	f023 0303 	bic.w	r3, r3, #3
 800c54e:	f043 0302 	orr.w	r3, r3, #2
 800c552:	81a3      	strh	r3, [r4, #12]
 800c554:	e7e2      	b.n	800c51c <__smakebuf_r+0xc>
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	6020      	str	r0, [r4, #0]
 800c55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	9b01      	ldr	r3, [sp, #4]
 800c562:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c566:	b15b      	cbz	r3, 800c580 <__smakebuf_r+0x70>
 800c568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c56c:	4630      	mov	r0, r6
 800c56e:	f000 f81d 	bl	800c5ac <_isatty_r>
 800c572:	b128      	cbz	r0, 800c580 <__smakebuf_r+0x70>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	f023 0303 	bic.w	r3, r3, #3
 800c57a:	f043 0301 	orr.w	r3, r3, #1
 800c57e:	81a3      	strh	r3, [r4, #12]
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	431d      	orrs	r5, r3
 800c584:	81a5      	strh	r5, [r4, #12]
 800c586:	e7cf      	b.n	800c528 <__smakebuf_r+0x18>

0800c588 <_fstat_r>:
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4d07      	ldr	r5, [pc, #28]	@ (800c5a8 <_fstat_r+0x20>)
 800c58c:	2300      	movs	r3, #0
 800c58e:	4604      	mov	r4, r0
 800c590:	4608      	mov	r0, r1
 800c592:	4611      	mov	r1, r2
 800c594:	602b      	str	r3, [r5, #0]
 800c596:	f7f5 fd41 	bl	800201c <_fstat>
 800c59a:	1c43      	adds	r3, r0, #1
 800c59c:	d102      	bne.n	800c5a4 <_fstat_r+0x1c>
 800c59e:	682b      	ldr	r3, [r5, #0]
 800c5a0:	b103      	cbz	r3, 800c5a4 <_fstat_r+0x1c>
 800c5a2:	6023      	str	r3, [r4, #0]
 800c5a4:	bd38      	pop	{r3, r4, r5, pc}
 800c5a6:	bf00      	nop
 800c5a8:	2400062c 	.word	0x2400062c

0800c5ac <_isatty_r>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	4d06      	ldr	r5, [pc, #24]	@ (800c5c8 <_isatty_r+0x1c>)
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	4608      	mov	r0, r1
 800c5b6:	602b      	str	r3, [r5, #0]
 800c5b8:	f7f5 fd40 	bl	800203c <_isatty>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d102      	bne.n	800c5c6 <_isatty_r+0x1a>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	b103      	cbz	r3, 800c5c6 <_isatty_r+0x1a>
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	2400062c 	.word	0x2400062c
 800c5cc:	00000000 	.word	0x00000000

0800c5d0 <sqrt>:
 800c5d0:	b508      	push	{r3, lr}
 800c5d2:	ed2d 8b04 	vpush	{d8-d9}
 800c5d6:	eeb0 8b40 	vmov.f64	d8, d0
 800c5da:	f000 fba1 	bl	800cd20 <__ieee754_sqrt>
 800c5de:	eeb4 8b48 	vcmp.f64	d8, d8
 800c5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e6:	d60c      	bvs.n	800c602 <sqrt+0x32>
 800c5e8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800c608 <sqrt+0x38>
 800c5ec:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800c5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f4:	d505      	bpl.n	800c602 <sqrt+0x32>
 800c5f6:	f7fc fd27 	bl	8009048 <__errno>
 800c5fa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800c5fe:	2321      	movs	r3, #33	@ 0x21
 800c600:	6003      	str	r3, [r0, #0]
 800c602:	ecbd 8b04 	vpop	{d8-d9}
 800c606:	bd08      	pop	{r3, pc}
	...

0800c610 <atan>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	eeb0 7b40 	vmov.f64	d7, d0
 800c616:	ee17 5a90 	vmov	r5, s15
 800c61a:	4b73      	ldr	r3, [pc, #460]	@ (800c7e8 <atan+0x1d8>)
 800c61c:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c620:	429c      	cmp	r4, r3
 800c622:	d913      	bls.n	800c64c <atan+0x3c>
 800c624:	4b71      	ldr	r3, [pc, #452]	@ (800c7ec <atan+0x1dc>)
 800c626:	429c      	cmp	r4, r3
 800c628:	d803      	bhi.n	800c632 <atan+0x22>
 800c62a:	d107      	bne.n	800c63c <atan+0x2c>
 800c62c:	ee10 3a10 	vmov	r3, s0
 800c630:	b123      	cbz	r3, 800c63c <atan+0x2c>
 800c632:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c636:	eeb0 0b47 	vmov.f64	d0, d7
 800c63a:	bd38      	pop	{r3, r4, r5, pc}
 800c63c:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800c778 <atan+0x168>
 800c640:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800c780 <atan+0x170>
 800c644:	2d00      	cmp	r5, #0
 800c646:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800c64a:	e7f4      	b.n	800c636 <atan+0x26>
 800c64c:	4b68      	ldr	r3, [pc, #416]	@ (800c7f0 <atan+0x1e0>)
 800c64e:	429c      	cmp	r4, r3
 800c650:	d811      	bhi.n	800c676 <atan+0x66>
 800c652:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c656:	429c      	cmp	r4, r3
 800c658:	d80a      	bhi.n	800c670 <atan+0x60>
 800c65a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800c65e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800c788 <atan+0x178>
 800c662:	ee30 6b06 	vadd.f64	d6, d0, d6
 800c666:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66e:	dce2      	bgt.n	800c636 <atan+0x26>
 800c670:	f04f 33ff 	mov.w	r3, #4294967295
 800c674:	e013      	b.n	800c69e <atan+0x8e>
 800c676:	f000 f8c5 	bl	800c804 <fabs>
 800c67a:	4b5e      	ldr	r3, [pc, #376]	@ (800c7f4 <atan+0x1e4>)
 800c67c:	429c      	cmp	r4, r3
 800c67e:	d84f      	bhi.n	800c720 <atan+0x110>
 800c680:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c684:	429c      	cmp	r4, r3
 800c686:	d841      	bhi.n	800c70c <atan+0xfc>
 800c688:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c68c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800c690:	2300      	movs	r3, #0
 800c692:	eea0 5b07 	vfma.f64	d5, d0, d7
 800c696:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c69a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c69e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c790 <atan+0x180>
 800c6a2:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c6a6:	ee24 5b04 	vmul.f64	d5, d4, d4
 800c6aa:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c798 <atan+0x188>
 800c6ae:	eea5 3b06 	vfma.f64	d3, d5, d6
 800c6b2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800c7a0 <atan+0x190>
 800c6b6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c6ba:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c7a8 <atan+0x198>
 800c6be:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c6c2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800c7b0 <atan+0x1a0>
 800c6c6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c6ca:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c7b8 <atan+0x1a8>
 800c6ce:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800c7c0 <atan+0x1b0>
 800c6d2:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c6d6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c7c8 <atan+0x1b8>
 800c6da:	eea5 2b06 	vfma.f64	d2, d5, d6
 800c6de:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c7d0 <atan+0x1c0>
 800c6e2:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c6e6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800c7d8 <atan+0x1c8>
 800c6ea:	eea6 2b05 	vfma.f64	d2, d6, d5
 800c6ee:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c7e0 <atan+0x1d0>
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c6f8:	ee26 6b05 	vmul.f64	d6, d6, d5
 800c6fc:	eea3 6b04 	vfma.f64	d6, d3, d4
 800c700:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c704:	d121      	bne.n	800c74a <atan+0x13a>
 800c706:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c70a:	e794      	b.n	800c636 <atan+0x26>
 800c70c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800c710:	2301      	movs	r3, #1
 800c712:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c716:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c71a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c71e:	e7be      	b.n	800c69e <atan+0x8e>
 800c720:	4b35      	ldr	r3, [pc, #212]	@ (800c7f8 <atan+0x1e8>)
 800c722:	429c      	cmp	r4, r3
 800c724:	d20b      	bcs.n	800c73e <atan+0x12e>
 800c726:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800c72a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c72e:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c732:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c736:	2302      	movs	r3, #2
 800c738:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c73c:	e7af      	b.n	800c69e <atan+0x8e>
 800c73e:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800c742:	2303      	movs	r3, #3
 800c744:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c748:	e7a9      	b.n	800c69e <atan+0x8e>
 800c74a:	4a2c      	ldr	r2, [pc, #176]	@ (800c7fc <atan+0x1ec>)
 800c74c:	492c      	ldr	r1, [pc, #176]	@ (800c800 <atan+0x1f0>)
 800c74e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c752:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c756:	ed93 5b00 	vldr	d5, [r3]
 800c75a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c75e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c762:	ed92 7b00 	vldr	d7, [r2]
 800c766:	2d00      	cmp	r5, #0
 800c768:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c76c:	bfb8      	it	lt
 800c76e:	eeb1 7b47 	vneglt.f64	d7, d7
 800c772:	e760      	b.n	800c636 <atan+0x26>
 800c774:	f3af 8000 	nop.w
 800c778:	54442d18 	.word	0x54442d18
 800c77c:	bff921fb 	.word	0xbff921fb
 800c780:	54442d18 	.word	0x54442d18
 800c784:	3ff921fb 	.word	0x3ff921fb
 800c788:	8800759c 	.word	0x8800759c
 800c78c:	7e37e43c 	.word	0x7e37e43c
 800c790:	e322da11 	.word	0xe322da11
 800c794:	3f90ad3a 	.word	0x3f90ad3a
 800c798:	24760deb 	.word	0x24760deb
 800c79c:	3fa97b4b 	.word	0x3fa97b4b
 800c7a0:	a0d03d51 	.word	0xa0d03d51
 800c7a4:	3fb10d66 	.word	0x3fb10d66
 800c7a8:	c54c206e 	.word	0xc54c206e
 800c7ac:	3fb745cd 	.word	0x3fb745cd
 800c7b0:	920083ff 	.word	0x920083ff
 800c7b4:	3fc24924 	.word	0x3fc24924
 800c7b8:	5555550d 	.word	0x5555550d
 800c7bc:	3fd55555 	.word	0x3fd55555
 800c7c0:	52defd9a 	.word	0x52defd9a
 800c7c4:	bfadde2d 	.word	0xbfadde2d
 800c7c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c7cc:	bfa2b444 	.word	0xbfa2b444
 800c7d0:	af749a6d 	.word	0xaf749a6d
 800c7d4:	bfb3b0f2 	.word	0xbfb3b0f2
 800c7d8:	fe231671 	.word	0xfe231671
 800c7dc:	bfbc71c6 	.word	0xbfbc71c6
 800c7e0:	9998ebc4 	.word	0x9998ebc4
 800c7e4:	bfc99999 	.word	0xbfc99999
 800c7e8:	440fffff 	.word	0x440fffff
 800c7ec:	7ff00000 	.word	0x7ff00000
 800c7f0:	3fdbffff 	.word	0x3fdbffff
 800c7f4:	3ff2ffff 	.word	0x3ff2ffff
 800c7f8:	40038000 	.word	0x40038000
 800c7fc:	0800d2b8 	.word	0x0800d2b8
 800c800:	0800d298 	.word	0x0800d298

0800c804 <fabs>:
 800c804:	ec51 0b10 	vmov	r0, r1, d0
 800c808:	4602      	mov	r2, r0
 800c80a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c80e:	ec43 2b10 	vmov	d0, r2, r3
 800c812:	4770      	bx	lr

0800c814 <checkint>:
 800c814:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c818:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800c81c:	429a      	cmp	r2, r3
 800c81e:	b570      	push	{r4, r5, r6, lr}
 800c820:	dd2a      	ble.n	800c878 <checkint+0x64>
 800c822:	f240 4333 	movw	r3, #1075	@ 0x433
 800c826:	429a      	cmp	r2, r3
 800c828:	dc24      	bgt.n	800c874 <checkint+0x60>
 800c82a:	1a9b      	subs	r3, r3, r2
 800c82c:	f1a3 0620 	sub.w	r6, r3, #32
 800c830:	f04f 32ff 	mov.w	r2, #4294967295
 800c834:	fa02 f403 	lsl.w	r4, r2, r3
 800c838:	fa02 f606 	lsl.w	r6, r2, r6
 800c83c:	f1c3 0520 	rsb	r5, r3, #32
 800c840:	fa22 f505 	lsr.w	r5, r2, r5
 800c844:	4334      	orrs	r4, r6
 800c846:	432c      	orrs	r4, r5
 800c848:	409a      	lsls	r2, r3
 800c84a:	ea20 0202 	bic.w	r2, r0, r2
 800c84e:	ea21 0404 	bic.w	r4, r1, r4
 800c852:	4322      	orrs	r2, r4
 800c854:	f1a3 0420 	sub.w	r4, r3, #32
 800c858:	f1c3 0220 	rsb	r2, r3, #32
 800c85c:	d10c      	bne.n	800c878 <checkint+0x64>
 800c85e:	40d8      	lsrs	r0, r3
 800c860:	fa01 f302 	lsl.w	r3, r1, r2
 800c864:	4318      	orrs	r0, r3
 800c866:	40e1      	lsrs	r1, r4
 800c868:	4308      	orrs	r0, r1
 800c86a:	f000 0001 	and.w	r0, r0, #1
 800c86e:	f1d0 0002 	rsbs	r0, r0, #2
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	2002      	movs	r0, #2
 800c876:	e7fc      	b.n	800c872 <checkint+0x5e>
 800c878:	2000      	movs	r0, #0
 800c87a:	e7fa      	b.n	800c872 <checkint+0x5e>
 800c87c:	0000      	movs	r0, r0
	...

0800c880 <pow>:
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	ee10 4a90 	vmov	r4, s1
 800c888:	ed2d 8b0a 	vpush	{d8-d12}
 800c88c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800c890:	ee11 aa90 	vmov	sl, s3
 800c894:	f108 32ff 	add.w	r2, r8, #4294967295
 800c898:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800c89c:	429a      	cmp	r2, r3
 800c89e:	ee10 5a10 	vmov	r5, s0
 800c8a2:	ee11 0a10 	vmov	r0, s2
 800c8a6:	b087      	sub	sp, #28
 800c8a8:	46c4      	mov	ip, r8
 800c8aa:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800c8ae:	d806      	bhi.n	800c8be <pow+0x3e>
 800c8b0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800c8b4:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800c8b8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8ba:	f240 8157 	bls.w	800cb6c <pow+0x2ec>
 800c8be:	1802      	adds	r2, r0, r0
 800c8c0:	eb4a 010a 	adc.w	r1, sl, sl
 800c8c4:	f06f 0b01 	mvn.w	fp, #1
 800c8c8:	1e57      	subs	r7, r2, #1
 800c8ca:	f141 33ff 	adc.w	r3, r1, #4294967295
 800c8ce:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800c8d2:	45bb      	cmp	fp, r7
 800c8d4:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c8d8:	d242      	bcs.n	800c960 <pow+0xe0>
 800c8da:	ea52 0301 	orrs.w	r3, r2, r1
 800c8de:	f04f 0300 	mov.w	r3, #0
 800c8e2:	d10c      	bne.n	800c8fe <pow+0x7e>
 800c8e4:	196d      	adds	r5, r5, r5
 800c8e6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800c8ea:	4164      	adcs	r4, r4
 800c8ec:	42ab      	cmp	r3, r5
 800c8ee:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c8f2:	41a3      	sbcs	r3, r4
 800c8f4:	f0c0 808f 	bcc.w	800ca16 <pow+0x196>
 800c8f8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c8fc:	e02b      	b.n	800c956 <pow+0xd6>
 800c8fe:	4ed4      	ldr	r6, [pc, #848]	@ (800cc50 <pow+0x3d0>)
 800c900:	42b4      	cmp	r4, r6
 800c902:	bf08      	it	eq
 800c904:	429d      	cmpeq	r5, r3
 800c906:	d109      	bne.n	800c91c <pow+0x9c>
 800c908:	1800      	adds	r0, r0, r0
 800c90a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800c90e:	eb4a 0a0a 	adc.w	sl, sl, sl
 800c912:	4283      	cmp	r3, r0
 800c914:	4bcf      	ldr	r3, [pc, #828]	@ (800cc54 <pow+0x3d4>)
 800c916:	eb73 030a 	sbcs.w	r3, r3, sl
 800c91a:	e7eb      	b.n	800c8f4 <pow+0x74>
 800c91c:	196d      	adds	r5, r5, r5
 800c91e:	48ce      	ldr	r0, [pc, #824]	@ (800cc58 <pow+0x3d8>)
 800c920:	4164      	adcs	r4, r4
 800c922:	42ab      	cmp	r3, r5
 800c924:	eb70 0604 	sbcs.w	r6, r0, r4
 800c928:	d375      	bcc.n	800ca16 <pow+0x196>
 800c92a:	4281      	cmp	r1, r0
 800c92c:	bf08      	it	eq
 800c92e:	429a      	cmpeq	r2, r3
 800c930:	d171      	bne.n	800ca16 <pow+0x196>
 800c932:	4aca      	ldr	r2, [pc, #808]	@ (800cc5c <pow+0x3dc>)
 800c934:	4294      	cmp	r4, r2
 800c936:	bf08      	it	eq
 800c938:	429d      	cmpeq	r5, r3
 800c93a:	d0dd      	beq.n	800c8f8 <pow+0x78>
 800c93c:	4294      	cmp	r4, r2
 800c93e:	ea6f 0a0a 	mvn.w	sl, sl
 800c942:	bf34      	ite	cc
 800c944:	2400      	movcc	r4, #0
 800c946:	2401      	movcs	r4, #1
 800c948:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800c94c:	4554      	cmp	r4, sl
 800c94e:	f040 81dc 	bne.w	800cd0a <pow+0x48a>
 800c952:	ee21 0b01 	vmul.f64	d0, d1, d1
 800c956:	b007      	add	sp, #28
 800c958:	ecbd 8b0a 	vpop	{d8-d12}
 800c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c960:	196f      	adds	r7, r5, r5
 800c962:	eb44 0904 	adc.w	r9, r4, r4
 800c966:	1e7a      	subs	r2, r7, #1
 800c968:	f169 0300 	sbc.w	r3, r9, #0
 800c96c:	4593      	cmp	fp, r2
 800c96e:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c972:	d225      	bcs.n	800c9c0 <pow+0x140>
 800c974:	ee20 0b00 	vmul.f64	d0, d0, d0
 800c978:	2c00      	cmp	r4, #0
 800c97a:	da13      	bge.n	800c9a4 <pow+0x124>
 800c97c:	4651      	mov	r1, sl
 800c97e:	f7ff ff49 	bl	800c814 <checkint>
 800c982:	2801      	cmp	r0, #1
 800c984:	d10e      	bne.n	800c9a4 <pow+0x124>
 800c986:	eeb1 0b40 	vneg.f64	d0, d0
 800c98a:	ea57 0909 	orrs.w	r9, r7, r9
 800c98e:	d10b      	bne.n	800c9a8 <pow+0x128>
 800c990:	f1ba 0f00 	cmp.w	sl, #0
 800c994:	dadf      	bge.n	800c956 <pow+0xd6>
 800c996:	b007      	add	sp, #28
 800c998:	ecbd 8b0a 	vpop	{d8-d12}
 800c99c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a0:	f000 b9f2 	b.w	800cd88 <__math_divzero>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e7f0      	b.n	800c98a <pow+0x10a>
 800c9a8:	f1ba 0f00 	cmp.w	sl, #0
 800c9ac:	dad3      	bge.n	800c956 <pow+0xd6>
 800c9ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c9b2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c9b6:	ed8d 7b00 	vstr	d7, [sp]
 800c9ba:	ed9d 0b00 	vldr	d0, [sp]
 800c9be:	e7ca      	b.n	800c956 <pow+0xd6>
 800c9c0:	2c00      	cmp	r4, #0
 800c9c2:	da2b      	bge.n	800ca1c <pow+0x19c>
 800c9c4:	4651      	mov	r1, sl
 800c9c6:	f7ff ff25 	bl	800c814 <checkint>
 800c9ca:	b930      	cbnz	r0, 800c9da <pow+0x15a>
 800c9cc:	b007      	add	sp, #28
 800c9ce:	ecbd 8b0a 	vpop	{d8-d12}
 800c9d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d6:	f000 b9ef 	b.w	800cdb8 <__math_invalid>
 800c9da:	1e41      	subs	r1, r0, #1
 800c9dc:	4248      	negs	r0, r1
 800c9de:	4148      	adcs	r0, r1
 800c9e0:	0480      	lsls	r0, r0, #18
 800c9e2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c9e6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800c9ea:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800c9ee:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800c9f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9f4:	d92d      	bls.n	800ca52 <pow+0x1d2>
 800c9f6:	4b96      	ldr	r3, [pc, #600]	@ (800cc50 <pow+0x3d0>)
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	429c      	cmp	r4, r3
 800c9fc:	bf08      	it	eq
 800c9fe:	4285      	cmpeq	r5, r0
 800ca00:	f43f af7a 	beq.w	800c8f8 <pow+0x78>
 800ca04:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800ca08:	428a      	cmp	r2, r1
 800ca0a:	d80c      	bhi.n	800ca26 <pow+0x1a6>
 800ca0c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ca10:	42a8      	cmp	r0, r5
 800ca12:	41a3      	sbcs	r3, r4
 800ca14:	d204      	bcs.n	800ca20 <pow+0x1a0>
 800ca16:	ee31 0b00 	vadd.f64	d0, d1, d0
 800ca1a:	e79c      	b.n	800c956 <pow+0xd6>
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e7e4      	b.n	800c9ea <pow+0x16a>
 800ca20:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ca24:	e797      	b.n	800c956 <pow+0xd6>
 800ca26:	2d01      	cmp	r5, #1
 800ca28:	eb74 0303 	sbcs.w	r3, r4, r3
 800ca2c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ca30:	bf34      	ite	cc
 800ca32:	2301      	movcc	r3, #1
 800ca34:	2300      	movcs	r3, #0
 800ca36:	4296      	cmp	r6, r2
 800ca38:	bf8c      	ite	hi
 800ca3a:	2600      	movhi	r6, #0
 800ca3c:	2601      	movls	r6, #1
 800ca3e:	42b3      	cmp	r3, r6
 800ca40:	f000 809c 	beq.w	800cb7c <pow+0x2fc>
 800ca44:	b007      	add	sp, #28
 800ca46:	ecbd 8b0a 	vpop	{d8-d12}
 800ca4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4e:	f000 b993 	b.w	800cd78 <__math_oflow>
 800ca52:	f1bc 0f00 	cmp.w	ip, #0
 800ca56:	d10a      	bne.n	800ca6e <pow+0x1ee>
 800ca58:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800cc40 <pow+0x3c0>
 800ca5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ca60:	ec53 2b17 	vmov	r2, r3, d7
 800ca64:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800ca68:	4615      	mov	r5, r2
 800ca6a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800ca6e:	4a7c      	ldr	r2, [pc, #496]	@ (800cc60 <pow+0x3e0>)
 800ca70:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800ca74:	4422      	add	r2, r4
 800ca76:	1513      	asrs	r3, r2, #20
 800ca78:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800ca7c:	ee03 3a10 	vmov	s6, r3
 800ca80:	0d12      	lsrs	r2, r2, #20
 800ca82:	4b78      	ldr	r3, [pc, #480]	@ (800cc64 <pow+0x3e4>)
 800ca84:	0512      	lsls	r2, r2, #20
 800ca86:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800ca8a:	1aa7      	subs	r7, r4, r2
 800ca8c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800ca90:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800ca94:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800ca98:	1e2e      	subs	r6, r5, #0
 800ca9a:	ec47 6b14 	vmov	d4, r6, r7
 800ca9e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800caa2:	eea4 6b05 	vfma.f64	d6, d4, d5
 800caa6:	ed93 5b00 	vldr	d5, [r3]
 800caaa:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800caae:	eea3 2b05 	vfma.f64	d2, d3, d5
 800cab2:	ed93 5b02 	vldr	d5, [r3, #8]
 800cab6:	ee36 4b02 	vadd.f64	d4, d6, d2
 800caba:	ee32 2b44 	vsub.f64	d2, d2, d4
 800cabe:	eea3 7b05 	vfma.f64	d7, d3, d5
 800cac2:	ed93 5b04 	vldr	d5, [r3, #16]
 800cac6:	ee32 2b06 	vadd.f64	d2, d2, d6
 800caca:	ee37 7b02 	vadd.f64	d7, d7, d2
 800cace:	ee26 5b05 	vmul.f64	d5, d6, d5
 800cad2:	ee26 0b05 	vmul.f64	d0, d6, d5
 800cad6:	ee34 8b00 	vadd.f64	d8, d4, d0
 800cada:	eeb0 9b40 	vmov.f64	d9, d0
 800cade:	ee34 4b48 	vsub.f64	d4, d4, d8
 800cae2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800cae6:	ee34 ab00 	vadd.f64	d10, d4, d0
 800caea:	ed93 5b06 	vldr	d5, [r3, #24]
 800caee:	ee26 bb00 	vmul.f64	d11, d6, d0
 800caf2:	ee37 7b09 	vadd.f64	d7, d7, d9
 800caf6:	ed93 4b08 	vldr	d4, [r3, #32]
 800cafa:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800cafe:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800cb02:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cb06:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800cb0a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800cb0e:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cb12:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800cb16:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800cb1a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800cb1e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800cb22:	eeab 7b05 	vfma.f64	d7, d11, d5
 800cb26:	ee38 4b07 	vadd.f64	d4, d8, d7
 800cb2a:	ee21 6b04 	vmul.f64	d6, d1, d4
 800cb2e:	ee16 3a90 	vmov	r3, s13
 800cb32:	eeb0 5b46 	vmov.f64	d5, d6
 800cb36:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800cb3a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800cb3e:	18b2      	adds	r2, r6, r2
 800cb40:	2a3e      	cmp	r2, #62	@ 0x3e
 800cb42:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800cb46:	ee38 8b44 	vsub.f64	d8, d8, d4
 800cb4a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800cb4e:	eea1 5b08 	vfma.f64	d5, d1, d8
 800cb52:	d91b      	bls.n	800cb8c <pow+0x30c>
 800cb54:	2a00      	cmp	r2, #0
 800cb56:	da0b      	bge.n	800cb70 <pow+0x2f0>
 800cb58:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cb5c:	ee36 0b00 	vadd.f64	d0, d6, d0
 800cb60:	2800      	cmp	r0, #0
 800cb62:	f43f aef8 	beq.w	800c956 <pow+0xd6>
 800cb66:	eeb1 0b40 	vneg.f64	d0, d0
 800cb6a:	e6f4      	b.n	800c956 <pow+0xd6>
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e77e      	b.n	800ca6e <pow+0x1ee>
 800cb70:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800cb74:	d909      	bls.n	800cb8a <pow+0x30a>
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f6bf af64 	bge.w	800ca44 <pow+0x1c4>
 800cb7c:	b007      	add	sp, #28
 800cb7e:	ecbd 8b0a 	vpop	{d8-d12}
 800cb82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb86:	f000 b8ef 	b.w	800cd68 <__math_uflow>
 800cb8a:	2600      	movs	r6, #0
 800cb8c:	4936      	ldr	r1, [pc, #216]	@ (800cc68 <pow+0x3e8>)
 800cb8e:	ed91 4b02 	vldr	d4, [r1, #8]
 800cb92:	ed91 3b00 	vldr	d3, [r1]
 800cb96:	eeb0 7b44 	vmov.f64	d7, d4
 800cb9a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cb9e:	ee17 5a10 	vmov	r5, s14
 800cba2:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cba6:	ed91 4b04 	vldr	d4, [r1, #16]
 800cbaa:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800cbae:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cbb2:	ed91 4b06 	vldr	d4, [r1, #24]
 800cbb6:	18dc      	adds	r4, r3, r3
 800cbb8:	f104 030f 	add.w	r3, r4, #15
 800cbbc:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800cbc0:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cbc4:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800cbc8:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cbcc:	ee25 6b05 	vmul.f64	d6, d5, d5
 800cbd0:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800cbd4:	ed91 4b08 	vldr	d4, [r1, #32]
 800cbd8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cbdc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800cbe0:	eea5 4b03 	vfma.f64	d4, d5, d3
 800cbe4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800cbe8:	eea6 7b04 	vfma.f64	d7, d6, d4
 800cbec:	ee26 6b06 	vmul.f64	d6, d6, d6
 800cbf0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800cbf4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800cbf8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800cbfc:	eea5 4b03 	vfma.f64	d4, d5, d3
 800cc00:	1940      	adds	r0, r0, r5
 800cc02:	2700      	movs	r7, #0
 800cc04:	eb17 020c 	adds.w	r2, r7, ip
 800cc08:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800cc0c:	eea6 7b04 	vfma.f64	d7, d6, d4
 800cc10:	2e00      	cmp	r6, #0
 800cc12:	d175      	bne.n	800cd00 <pow+0x480>
 800cc14:	42bd      	cmp	r5, r7
 800cc16:	db29      	blt.n	800cc6c <pow+0x3ec>
 800cc18:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800cc1c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800cc20:	4610      	mov	r0, r2
 800cc22:	ec41 0b10 	vmov	d0, r0, r1
 800cc26:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cc2a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cc48 <pow+0x3c8>
 800cc2e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cc32:	b007      	add	sp, #28
 800cc34:	ecbd 8b0a 	vpop	{d8-d12}
 800cc38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	f000 b8d4 	b.w	800cde8 <__math_check_oflow>
 800cc40:	00000000 	.word	0x00000000
 800cc44:	43300000 	.word	0x43300000
 800cc48:	00000000 	.word	0x00000000
 800cc4c:	7f000000 	.word	0x7f000000
 800cc50:	3ff00000 	.word	0x3ff00000
 800cc54:	fff00000 	.word	0xfff00000
 800cc58:	ffe00000 	.word	0xffe00000
 800cc5c:	7fe00000 	.word	0x7fe00000
 800cc60:	c0196aab 	.word	0xc0196aab
 800cc64:	0800d2d8 	.word	0x0800d2d8
 800cc68:	0800e320 	.word	0x0800e320
 800cc6c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cc70:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800cc74:	4610      	mov	r0, r2
 800cc76:	ec41 0b15 	vmov	d5, r0, r1
 800cc7a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800cc7e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800cc82:	ee35 7b06 	vadd.f64	d7, d5, d6
 800cc86:	eeb0 4bc7 	vabs.f64	d4, d7
 800cc8a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800cc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc92:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800cd10 <pow+0x490>
 800cc96:	d52a      	bpl.n	800ccee <pow+0x46e>
 800cc98:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cc9c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca4:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cca8:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800ccac:	bf58      	it	pl
 800ccae:	eeb0 4b43 	vmovpl.f64	d4, d3
 800ccb2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800ccb6:	ee34 6b43 	vsub.f64	d6, d4, d3
 800ccba:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ccbe:	ee36 6b05 	vadd.f64	d6, d6, d5
 800ccc2:	ee36 6b03 	vadd.f64	d6, d6, d3
 800ccc6:	ee36 7b44 	vsub.f64	d7, d6, d4
 800ccca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd2:	d104      	bne.n	800ccde <pow+0x45e>
 800ccd4:	4632      	mov	r2, r6
 800ccd6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ccda:	ec43 2b17 	vmov	d7, r2, r3
 800ccde:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cce2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cce6:	ee26 6b00 	vmul.f64	d6, d6, d0
 800ccea:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ccee:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ccf2:	b007      	add	sp, #28
 800ccf4:	ecbd 8b0a 	vpop	{d8-d12}
 800ccf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	f000 b86b 	b.w	800cdd6 <__math_check_uflow>
 800cd00:	ec43 2b10 	vmov	d0, r2, r3
 800cd04:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cd08:	e625      	b.n	800c956 <pow+0xd6>
 800cd0a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800cd18 <pow+0x498>
 800cd0e:	e622      	b.n	800c956 <pow+0xd6>
 800cd10:	00000000 	.word	0x00000000
 800cd14:	00100000 	.word	0x00100000
	...

0800cd20 <__ieee754_sqrt>:
 800cd20:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800cd24:	4770      	bx	lr

0800cd26 <with_errno>:
 800cd26:	b510      	push	{r4, lr}
 800cd28:	ed2d 8b02 	vpush	{d8}
 800cd2c:	eeb0 8b40 	vmov.f64	d8, d0
 800cd30:	4604      	mov	r4, r0
 800cd32:	f7fc f989 	bl	8009048 <__errno>
 800cd36:	eeb0 0b48 	vmov.f64	d0, d8
 800cd3a:	ecbd 8b02 	vpop	{d8}
 800cd3e:	6004      	str	r4, [r0, #0]
 800cd40:	bd10      	pop	{r4, pc}

0800cd42 <xflow>:
 800cd42:	b082      	sub	sp, #8
 800cd44:	b158      	cbz	r0, 800cd5e <xflow+0x1c>
 800cd46:	eeb1 7b40 	vneg.f64	d7, d0
 800cd4a:	ed8d 7b00 	vstr	d7, [sp]
 800cd4e:	ed9d 7b00 	vldr	d7, [sp]
 800cd52:	2022      	movs	r0, #34	@ 0x22
 800cd54:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd58:	b002      	add	sp, #8
 800cd5a:	f7ff bfe4 	b.w	800cd26 <with_errno>
 800cd5e:	eeb0 7b40 	vmov.f64	d7, d0
 800cd62:	e7f2      	b.n	800cd4a <xflow+0x8>
 800cd64:	0000      	movs	r0, r0
	...

0800cd68 <__math_uflow>:
 800cd68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cd70 <__math_uflow+0x8>
 800cd6c:	f7ff bfe9 	b.w	800cd42 <xflow>
 800cd70:	00000000 	.word	0x00000000
 800cd74:	10000000 	.word	0x10000000

0800cd78 <__math_oflow>:
 800cd78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cd80 <__math_oflow+0x8>
 800cd7c:	f7ff bfe1 	b.w	800cd42 <xflow>
 800cd80:	00000000 	.word	0x00000000
 800cd84:	70000000 	.word	0x70000000

0800cd88 <__math_divzero>:
 800cd88:	b082      	sub	sp, #8
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800cd90:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800cd94:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800cd98:	ed8d 7b00 	vstr	d7, [sp]
 800cd9c:	ed9d 0b00 	vldr	d0, [sp]
 800cda0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800cdb0 <__math_divzero+0x28>
 800cda4:	2022      	movs	r0, #34	@ 0x22
 800cda6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800cdaa:	b002      	add	sp, #8
 800cdac:	f7ff bfbb 	b.w	800cd26 <with_errno>
	...

0800cdb8 <__math_invalid>:
 800cdb8:	eeb0 7b40 	vmov.f64	d7, d0
 800cdbc:	eeb4 7b47 	vcmp.f64	d7, d7
 800cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800cdc8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800cdcc:	d602      	bvs.n	800cdd4 <__math_invalid+0x1c>
 800cdce:	2021      	movs	r0, #33	@ 0x21
 800cdd0:	f7ff bfa9 	b.w	800cd26 <with_errno>
 800cdd4:	4770      	bx	lr

0800cdd6 <__math_check_uflow>:
 800cdd6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdde:	d102      	bne.n	800cde6 <__math_check_uflow+0x10>
 800cde0:	2022      	movs	r0, #34	@ 0x22
 800cde2:	f7ff bfa0 	b.w	800cd26 <with_errno>
 800cde6:	4770      	bx	lr

0800cde8 <__math_check_oflow>:
 800cde8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800ce08 <__math_check_oflow+0x20>
 800cdec:	eeb0 7bc0 	vabs.f64	d7, d0
 800cdf0:	eeb4 7b46 	vcmp.f64	d7, d6
 800cdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf8:	dd02      	ble.n	800ce00 <__math_check_oflow+0x18>
 800cdfa:	2022      	movs	r0, #34	@ 0x22
 800cdfc:	f7ff bf93 	b.w	800cd26 <with_errno>
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	f3af 8000 	nop.w
 800ce08:	ffffffff 	.word	0xffffffff
 800ce0c:	7fefffff 	.word	0x7fefffff

0800ce10 <_init>:
 800ce10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce12:	bf00      	nop
 800ce14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce16:	bc08      	pop	{r3}
 800ce18:	469e      	mov	lr, r3
 800ce1a:	4770      	bx	lr

0800ce1c <_fini>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	bf00      	nop
 800ce20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce22:	bc08      	pop	{r3}
 800ce24:	469e      	mov	lr, r3
 800ce26:	4770      	bx	lr
