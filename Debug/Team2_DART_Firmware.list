
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007844  08007844  00008844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080078bc  080078bc  000088bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080078c4  080078c4  000088c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080078c8  080078c8  000088c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  080078cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d8  24000060  0800792c  00009060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000338  0800792c  00009338  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016a22  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000272a  00000000  00000000  0001fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a8  00000000  00000000  000221e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dd3  00000000  00000000  00023388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000378ae  00000000  00000000  0002415b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017183  00000000  00000000  0005ba09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001667a7  00000000  00000000  00072b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d9333  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005100  00000000  00000000  001d9378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001de478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800782c 	.word	0x0800782c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800782c 	.word	0x0800782c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b092      	sub	sp, #72	@ 0x48
 8000684:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000686:	f000 faed 	bl	8000c64 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fd75 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f8b9 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 fa25 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000696:	f000 f9d7 	bl	8000a48 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800069a:	f000 f92f 	bl	80008fc <MX_SPI1_Init>
  MX_TIM2_Init();
 800069e:	f000 f985 	bl	80009ac <MX_TIM2_Init>
  int16_t accel_z;
  int16_t gyro_x;
  int16_t gyro_y;
  int16_t gyro_z;
  uint8_t imu_data[6];
  char buffer[40] = {'\0'};
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2224      	movs	r2, #36	@ 0x24
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 fc3c 	bl	8006f2c <memset>

  mpu9250_config();
 80006b4:	f000 fa58 	bl	8000b68 <mpu9250_config>
//		  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
//		  accel_data = ((int16_t)imu_data[0]<<8) + imu_data[1];
//		  timer_flag = 0;
//	  }

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 80006b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006bc:	2206      	movs	r2, #6
 80006be:	4619      	mov	r1, r3
 80006c0:	203b      	movs	r0, #59	@ 0x3b
 80006c2:	f000 fa87 	bl	8000bd4 <mpu9250_read_reg>
	  accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 80006c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	  accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 80006d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	b21a      	sxth	r2, r3
 80006e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	  accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 80006ea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	877b      	strh	r3, [r7, #58]	@ 0x3a

//	  accel_x = (float)accel_x/4096.0;
//	  accel_y = (float)accel_y/4096.0;
//	  accel_z = (float)accel_z/4096.0;

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 80006fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000700:	2206      	movs	r2, #6
 8000702:	4619      	mov	r1, r3
 8000704:	2043      	movs	r0, #67	@ 0x43
 8000706:	f000 fa65 	bl	8000bd4 <mpu9250_read_reg>
	  gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 800070a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000716:	b21b      	sxth	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	873b      	strh	r3, [r7, #56]	@ 0x38
	  gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 800071c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	b21a      	sxth	r2, r3
 8000724:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000728:	b21b      	sxth	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	86fb      	strh	r3, [r7, #54]	@ 0x36
	  gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 800072e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800073a:	b21b      	sxth	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	  gyro_x = (float)gyro_x/65.5;
 8000740:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000750:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 80007f0 <main+0x170>
 8000754:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000758:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800075c:	ee17 3a90 	vmov	r3, s15
 8000760:	873b      	strh	r3, [r7, #56]	@ 0x38
	  gyro_y = (float)gyro_y/65.5;
 8000762:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000766:	ee07 3a90 	vmov	s15, r3
 800076a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800076e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000772:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 80007f0 <main+0x170>
 8000776:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800077a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800077e:	ee17 3a90 	vmov	r3, s15
 8000782:	86fb      	strh	r3, [r7, #54]	@ 0x36
	  gyro_z = (float)gyro_z/65.5;
 8000784:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000788:	ee07 3a90 	vmov	s15, r3
 800078c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000790:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000794:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 80007f0 <main+0x170>
 8000798:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800079c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007a0:	ee17 3a90 	vmov	r3, s15
 80007a4:	86bb      	strh	r3, [r7, #52]	@ 0x34


	  timer_flag = 0;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <main+0x178>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]

	  //send data through UART
	  snprintf(buffer, sizeof(buffer), "%d,%d,%d\n", accel_x, accel_y, accel_z);
 80007ac:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	@ 0x3e
 80007b0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80007b4:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 80007b8:	1d38      	adds	r0, r7, #4
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	460b      	mov	r3, r1
 80007c0:	4a0e      	ldr	r2, [pc, #56]	@ (80007fc <main+0x17c>)
 80007c2:	2128      	movs	r1, #40	@ 0x28
 80007c4:	f006 fb7e 	bl	8006ec4 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd88 	bl	80002e0 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	4809      	ldr	r0, [pc, #36]	@ (8000800 <main+0x180>)
 80007dc:	f005 fa58 	bl	8005c90 <HAL_UART_Transmit>
	  HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 fd5b 	bl	800129c <HAL_Delay>
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 80007e6:	bf00      	nop
 80007e8:	e766      	b.n	80006b8 <main+0x38>
 80007ea:	bf00      	nop
 80007ec:	f3af 8000 	nop.w
 80007f0:	00000000 	.word	0x00000000
 80007f4:	40506000 	.word	0x40506000
 80007f8:	240001e4 	.word	0x240001e4
 80007fc:	08007844 	.word	0x08007844
 8000800:	24000150 	.word	0x24000150

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09c      	sub	sp, #112	@ 0x70
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080e:	224c      	movs	r2, #76	@ 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f006 fb8a 	bl	8006f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2220      	movs	r2, #32
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fb84 	bl	8006f2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000824:	2002      	movs	r0, #2
 8000826:	f001 f8bb 	bl	80019a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b31      	ldr	r3, [pc, #196]	@ (80008f4 <SystemClock_Config+0xf0>)
 8000830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000832:	4a30      	ldr	r2, [pc, #192]	@ (80008f4 <SystemClock_Config+0xf0>)
 8000834:	f023 0301 	bic.w	r3, r3, #1
 8000838:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800083a:	4b2e      	ldr	r3, [pc, #184]	@ (80008f4 <SystemClock_Config+0xf0>)
 800083c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	4b2c      	ldr	r3, [pc, #176]	@ (80008f8 <SystemClock_Config+0xf4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800084c:	4a2a      	ldr	r2, [pc, #168]	@ (80008f8 <SystemClock_Config+0xf4>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b28      	ldr	r3, [pc, #160]	@ (80008f8 <SystemClock_Config+0xf4>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000860:	bf00      	nop
 8000862:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <SystemClock_Config+0xf4>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800086a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800086e:	d1f8      	bne.n	8000862 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000874:	2301      	movs	r3, #1
 8000876:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2340      	movs	r3, #64	@ 0x40
 800087a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000888:	230a      	movs	r3, #10
 800088a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000898:	230c      	movs	r3, #12
 800089a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800089c:	2302      	movs	r3, #2
 800089e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 f8b3 	bl	8001a14 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008b4:	f000 fa02 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	233f      	movs	r3, #63	@ 0x3f
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2303      	movs	r3, #3
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008cc:	2340      	movs	r3, #64	@ 0x40
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2101      	movs	r1, #1
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fcf3 	bl	80022c8 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008e8:	f000 f9e8 	bl	8000cbc <Error_Handler>
  }
}
 80008ec:	bf00      	nop
 80008ee:	3770      	adds	r7, #112	@ 0x70
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58000400 	.word	0x58000400
 80008f8:	58024800 	.word	0x58024800

080008fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000900:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000902:	4a29      	ldr	r2, [pc, #164]	@ (80009a8 <MX_SPI1_Init+0xac>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000908:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800090c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090e:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000916:	2207      	movs	r2, #7
 8000918:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 800091c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000922:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000924:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 800092c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000934:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000938:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000954:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800095a:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 800095c:	2200      	movs	r2, #0
 800095e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000960:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000962:	2200      	movs	r2, #0
 8000964:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000968:	2200      	movs	r2, #0
 800096a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 800096e:	2200      	movs	r2, #0
 8000970:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000974:	2200      	movs	r2, #0
 8000976:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 800097a:	2200      	movs	r2, #0
 800097c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000980:	2200      	movs	r2, #0
 8000982:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000986:	2200      	movs	r2, #0
 8000988:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 800098c:	2200      	movs	r2, #0
 800098e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_SPI1_Init+0xa8>)
 8000992:	f003 fe51 	bl	8004638 <HAL_SPI_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800099c:	f000 f98e 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2400007c 	.word	0x2400007c
 80009a8:	40013000 	.word	0x40013000

080009ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009d4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80009d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f4:	4813      	ldr	r0, [pc, #76]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009f6:	f004 fc8c 	bl	8005312 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a00:	f000 f95c 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <MX_TIM2_Init+0x98>)
 8000a12:	f004 fddd 	bl	80055d0 <HAL_TIM_ConfigClockSource>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a1c:	f000 f94e 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_TIM2_Init+0x98>)
 8000a2e:	f005 f833 	bl	8005a98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 f940 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24000104 	.word	0x24000104

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a4e:	4a23      	ldr	r2, [pc, #140]	@ (8000adc <MX_USART2_UART_Init+0x94>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a90:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a92:	f005 f8ad 	bl	8005bf0 <HAL_UART_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f000 f90e 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000aa4:	f006 f943 	bl	8006d2e <HAL_UARTEx_SetTxFifoThreshold>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 f905 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4808      	ldr	r0, [pc, #32]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000ab6:	f006 f978 	bl	8006daa <HAL_UARTEx_SetRxFifoThreshold>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac0:	f000 f8fc 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000ac6:	f006 f8f9 	bl	8006cbc <HAL_UARTEx_DisableFifoMode>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f8f4 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000150 	.word	0x24000150
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_GPIO_Init+0x80>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	4a18      	ldr	r2, [pc, #96]	@ (8000b60 <MX_GPIO_Init+0x80>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <MX_GPIO_Init+0x80>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_GPIO_Init+0x80>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	4a11      	ldr	r2, [pc, #68]	@ (8000b60 <MX_GPIO_Init+0x80>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_GPIO_Init+0x80>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	480b      	ldr	r0, [pc, #44]	@ (8000b64 <MX_GPIO_Init+0x84>)
 8000b38:	f000 ff18 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_GPIO_Init+0x84>)
 8000b54:	f000 fd5a 	bl	800160c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024400 	.word	0x58024400
 8000b64:	58020000 	.word	0x58020000

08000b68 <mpu9250_config>:

/* USER CODE BEGIN 4 */
void mpu9250_config()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	201a      	movs	r0, #26
 8000b70:	f000 f80a 	bl	8000b88 <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-4g
 8000b74:	2110      	movs	r1, #16
 8000b76:	201c      	movs	r0, #28
 8000b78:	f000 f806 	bl	8000b88 <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale
 8000b7c:	2108      	movs	r1, #8
 8000b7e:	201b      	movs	r0, #27
 8000b80:	f000 f802 	bl	8000b88 <mpu9250_write_reg>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <mpu9250_write_reg>:

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <mpu9250_write_reg+0x44>)
 8000b9e:	f000 fee5 	bl	800196c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8000ba2:	1df9      	adds	r1, r7, #7
 8000ba4:	2364      	movs	r3, #100	@ 0x64
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <mpu9250_write_reg+0x48>)
 8000baa:	f003 fe69 	bl	8004880 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000bae:	1db9      	adds	r1, r7, #6
 8000bb0:	2364      	movs	r3, #100	@ 0x64
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <mpu9250_write_reg+0x48>)
 8000bb6:	f003 fe63 	bl	8004880 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <mpu9250_write_reg+0x44>)
 8000bc0:	f000 fed4 	bl	800196c <HAL_GPIO_WritePin>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58020000 	.word	0x58020000
 8000bd0:	2400007c 	.word	0x2400007c

08000bd4 <mpu9250_read_reg>:
void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <mpu9250_read_reg+0x5c>)
 8000bf4:	f000 feba 	bl	800196c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8000bf8:	f107 010e 	add.w	r1, r7, #14
 8000bfc:	2364      	movs	r3, #100	@ 0x64
 8000bfe:	2201      	movs	r2, #1
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <mpu9250_read_reg+0x60>)
 8000c02:	f003 fe3d 	bl	8004880 <HAL_SPI_Transmit>
 8000c06:	4603      	mov	r3, r0
 8000c08:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 8000c0a:	79bb      	ldrb	r3, [r7, #6]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	6839      	ldr	r1, [r7, #0]
 8000c12:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <mpu9250_read_reg+0x60>)
 8000c14:	f004 f822 	bl	8004c5c <HAL_SPI_Receive>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2120      	movs	r1, #32
 8000c20:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <mpu9250_read_reg+0x5c>)
 8000c22:	f000 fea3 	bl	800196c <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	58020000 	.word	0x58020000
 8000c34:	2400007c 	.word	0x2400007c

08000c38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d102      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
	}
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	24000104 	.word	0x24000104
 8000c60:	240001e4 	.word	0x240001e4

08000c64 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c76:	f000 fc51 	bl	800151c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c86:	231f      	movs	r3, #31
 8000c88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c8a:	2387      	movs	r3, #135	@ 0x87
 8000c8c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c92:	2300      	movs	r3, #0
 8000c94:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fc6f 	bl	800158c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cae:	2004      	movs	r0, #4
 8000cb0:	f000 fc4c 	bl	800154c <HAL_MPU_Enable>

}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <Error_Handler+0x8>

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cd4:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	58024400 	.word	0x58024400

08000cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0bc      	sub	sp, #240	@ 0xf0
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0318 	add.w	r3, r7, #24
 8000d18:	22c0      	movs	r2, #192	@ 0xc0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f006 f905 	bl	8006f2c <memset>
  if(hspi->Instance==SPI1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a38      	ldr	r2, [pc, #224]	@ (8000e08 <HAL_SPI_MspInit+0x10c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d168      	bne.n	8000dfe <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fe4d 	bl	80029e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000d4c:	f7ff ffb6 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d50:	4b2e      	ldr	r3, [pc, #184]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d56:	4a2d      	ldr	r2, [pc, #180]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d60:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d74:	4a25      	ldr	r2, [pc, #148]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7e:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d92:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <HAL_SPI_MspInit+0x110>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000daa:	2380      	movs	r3, #128	@ 0x80
 8000dac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4810      	ldr	r0, [pc, #64]	@ (8000e10 <HAL_SPI_MspInit+0x114>)
 8000dd0:	f000 fc1c 	bl	800160c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000dd4:	2318      	movs	r3, #24
 8000dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dec:	2305      	movs	r3, #5
 8000dee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000df6:	4619      	mov	r1, r3
 8000df8:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <HAL_SPI_MspInit+0x118>)
 8000dfa:	f000 fc07 	bl	800160c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dfe:	bf00      	nop
 8000e00:	37f0      	adds	r7, #240	@ 0xf0
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	58020000 	.word	0x58020000
 8000e14:	58020400 	.word	0x58020400

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e28:	d116      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <HAL_TIM_Base_MspInit+0x48>)
 8000e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e30:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <HAL_TIM_Base_MspInit+0x48>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_TIM_Base_MspInit+0x48>)
 8000e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	201c      	movs	r0, #28
 8000e4e:	f000 fb30 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e52:	201c      	movs	r0, #28
 8000e54:	f000 fb47 	bl	80014e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ba      	sub	sp, #232	@ 0xe8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	22c0      	movs	r2, #192	@ 0xc0
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 f851 	bl	8006f2c <memset>
  if(huart->Instance==USART2)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <HAL_UART_MspInit+0xc4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d145      	bne.n	8000f20 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e94:	f04f 0202 	mov.w	r2, #2
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fd98 	bl	80029e0 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eb6:	f7ff ff01 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <HAL_UART_MspInit+0xc8>)
 8000ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f2c <HAL_UART_MspInit+0xc8>)
 8000ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <HAL_UART_MspInit+0xc8>)
 8000ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_UART_MspInit+0xc8>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <HAL_UART_MspInit+0xc8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <HAL_UART_MspInit+0xc8>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000f1c:	f000 fb76 	bl	800160c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f20:	bf00      	nop
 8000f22:	37e8      	adds	r7, #232	@ 0xe8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020000 	.word	0x58020000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f967 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <TIM2_IRQHandler+0x10>)
 8000f9a:	f004 fa11 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24000104 	.word	0x24000104

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f005 ffb0 	bl	8006f3c <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	@ (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	24080000 	.word	0x24080000
 8001008:	00000400 	.word	0x00000400
 800100c:	240001e8 	.word	0x240001e8
 8001010:	24000338 	.word	0x24000338

08001014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001018:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <SystemInit+0xe4>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800101e:	4a36      	ldr	r2, [pc, #216]	@ (80010f8 <SystemInit+0xe4>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001028:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <SystemInit+0xe8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	2b06      	cmp	r3, #6
 8001032:	d807      	bhi.n	8001044 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001034:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <SystemInit+0xe8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	4a2f      	ldr	r2, [pc, #188]	@ (80010fc <SystemInit+0xe8>)
 800103e:	f043 0307 	orr.w	r3, r3, #7
 8001042:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001044:	4b2e      	ldr	r3, [pc, #184]	@ (8001100 <SystemInit+0xec>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2d      	ldr	r2, [pc, #180]	@ (8001100 <SystemInit+0xec>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001050:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <SystemInit+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <SystemInit+0xec>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4929      	ldr	r1, [pc, #164]	@ (8001100 <SystemInit+0xec>)
 800105c:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <SystemInit+0xf0>)
 800105e:	4013      	ands	r3, r2
 8001060:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001062:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <SystemInit+0xe8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800106e:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <SystemInit+0xe8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 030f 	bic.w	r3, r3, #15
 8001076:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <SystemInit+0xe8>)
 8001078:	f043 0307 	orr.w	r3, r3, #7
 800107c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <SystemInit+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <SystemInit+0xec>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <SystemInit+0xec>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <SystemInit+0xec>)
 8001092:	4a1d      	ldr	r2, [pc, #116]	@ (8001108 <SystemInit+0xf4>)
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <SystemInit+0xec>)
 8001098:	4a1c      	ldr	r2, [pc, #112]	@ (800110c <SystemInit+0xf8>)
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <SystemInit+0xec>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <SystemInit+0xfc>)
 80010a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <SystemInit+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <SystemInit+0xec>)
 80010aa:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <SystemInit+0xfc>)
 80010ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <SystemInit+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <SystemInit+0xec>)
 80010b6:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <SystemInit+0xfc>)
 80010b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <SystemInit+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <SystemInit+0xec>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <SystemInit+0xec>)
 80010c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <SystemInit+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <SystemInit+0x100>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <SystemInit+0x104>)
 80010d8:	4013      	ands	r3, r2
 80010da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010de:	d202      	bcs.n	80010e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <SystemInit+0x108>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <SystemInit+0x10c>)
 80010e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	52002000 	.word	0x52002000
 8001100:	58024400 	.word	0x58024400
 8001104:	eaf6ed7f 	.word	0xeaf6ed7f
 8001108:	02020200 	.word	0x02020200
 800110c:	01ff0000 	.word	0x01ff0000
 8001110:	01010280 	.word	0x01010280
 8001114:	5c001000 	.word	0x5c001000
 8001118:	ffff0000 	.word	0xffff0000
 800111c:	51008108 	.word	0x51008108
 8001120:	52004000 	.word	0x52004000

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800115c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001128:	f7ff ff74 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	@ (8001164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	@ (8001170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f005 fef9 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fa93 	bl	8000680 <main>
  bx  lr
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001160:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001164:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001168:	080078cc 	.word	0x080078cc
  ldr r2, =_sbss
 800116c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001170:	24000338 	.word	0x24000338

08001174 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC3_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
 8001180:	f000 f98c 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001184:	f001 fa56 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 8001188:	4602      	mov	r2, r0
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_Init+0x68>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	4913      	ldr	r1, [pc, #76]	@ (80011e4 <HAL_Init+0x6c>)
 8001196:	5ccb      	ldrb	r3, [r1, r3]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_Init+0x68>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	4a0e      	ldr	r2, [pc, #56]	@ (80011e4 <HAL_Init+0x6c>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <HAL_Init+0x70>)
 80011ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_Init+0x74>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f814 	bl	80011f0 <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e002      	b.n	80011d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011d2:	f7ff fd79 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	58024400 	.word	0x58024400
 80011e4:	08007850 	.word	0x08007850
 80011e8:	24000004 	.word	0x24000004
 80011ec:	24000000 	.word	0x24000000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_InitTick+0x60>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e021      	b.n	8001248 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001204:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <HAL_InitTick+0x64>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <HAL_InitTick+0x60>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f971 	bl	8001502 <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f93b 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	@ (8001258 <HAL_InitTick+0x68>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2400000c 	.word	0x2400000c
 8001254:	24000000 	.word	0x24000000
 8001258:	24000008 	.word	0x24000008

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2400000c 	.word	0x2400000c
 8001280:	240001ec 	.word	0x240001ec

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	240001ec 	.word	0x240001ec

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2400000c 	.word	0x2400000c

080012e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <HAL_GetREVID+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0c1b      	lsrs	r3, r3, #16
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	5c001000 	.word	0x5c001000

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <__NVIC_SetPriorityGrouping+0x40>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	4313      	orrs	r3, r2
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x40>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	05fa0000 	.word	0x05fa0000

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	@ (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	@ (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	@ 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff29 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff40 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff90 	bl	80013f0 <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5f 	bl	800139c <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff33 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa4 	bl	8001458 <SysTick_Config>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001520:	f3bf 8f5f 	dmb	sy
}
 8001524:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <HAL_MPU_Disable+0x28>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_MPU_Disable+0x28>)
 800152c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001530:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_MPU_Disable+0x2c>)
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	e000ed90 	.word	0xe000ed90

0800154c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001554:	4a0b      	ldr	r2, [pc, #44]	@ (8001584 <HAL_MPU_Enable+0x38>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_MPU_Enable+0x3c>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001562:	4a09      	ldr	r2, [pc, #36]	@ (8001588 <HAL_MPU_Enable+0x3c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001568:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800156a:	f3bf 8f4f 	dsb	sy
}
 800156e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001570:	f3bf 8f6f 	isb	sy
}
 8001574:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed90 	.word	0xe000ed90
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785a      	ldrb	r2, [r3, #1]
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_MPU_ConfigRegion+0x7c>)
 800159a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_MPU_ConfigRegion+0x7c>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	4a19      	ldr	r2, [pc, #100]	@ (8001608 <HAL_MPU_ConfigRegion+0x7c>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015a8:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <HAL_MPU_ConfigRegion+0x7c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7b1b      	ldrb	r3, [r3, #12]
 80015b4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7adb      	ldrb	r3, [r3, #11]
 80015ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7a9b      	ldrb	r3, [r3, #10]
 80015c2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7b5b      	ldrb	r3, [r3, #13]
 80015ca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7b9b      	ldrb	r3, [r3, #14]
 80015d2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7bdb      	ldrb	r3, [r3, #15]
 80015da:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7a5b      	ldrb	r3, [r3, #9]
 80015e2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7a1b      	ldrb	r3, [r3, #8]
 80015ea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015ec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f4:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015f6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f8:	6113      	str	r3, [r2, #16]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed90 	.word	0xe000ed90

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800161a:	4b89      	ldr	r3, [pc, #548]	@ (8001840 <HAL_GPIO_Init+0x234>)
 800161c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800161e:	e194      	b.n	800194a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8186 	beq.w	8001944 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d005      	beq.n	8001650 <HAL_GPIO_Init+0x44>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d130      	bne.n	80016b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001686:	2201      	movs	r2, #1
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 0201 	and.w	r2, r3, #1
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d017      	beq.n	80016ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d123      	bne.n	8001742 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	69b9      	ldr	r1, [r7, #24]
 800173e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0203 	and.w	r2, r3, #3
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80e0 	beq.w	8001944 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001784:	4b2f      	ldr	r3, [pc, #188]	@ (8001844 <HAL_GPIO_Init+0x238>)
 8001786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800178a:	4a2e      	ldr	r2, [pc, #184]	@ (8001844 <HAL_GPIO_Init+0x238>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001794:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <HAL_GPIO_Init+0x238>)
 8001796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a2:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <HAL_GPIO_Init+0x23c>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a20      	ldr	r2, [pc, #128]	@ (800184c <HAL_GPIO_Init+0x240>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d052      	beq.n	8001874 <HAL_GPIO_Init+0x268>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001850 <HAL_GPIO_Init+0x244>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d031      	beq.n	800183a <HAL_GPIO_Init+0x22e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001854 <HAL_GPIO_Init+0x248>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d02b      	beq.n	8001836 <HAL_GPIO_Init+0x22a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_GPIO_Init+0x24c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d025      	beq.n	8001832 <HAL_GPIO_Init+0x226>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <HAL_GPIO_Init+0x250>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01f      	beq.n	800182e <HAL_GPIO_Init+0x222>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <HAL_GPIO_Init+0x254>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x21e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <HAL_GPIO_Init+0x258>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x21a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <HAL_GPIO_Init+0x25c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x216>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a18      	ldr	r2, [pc, #96]	@ (800186c <HAL_GPIO_Init+0x260>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x212>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a17      	ldr	r2, [pc, #92]	@ (8001870 <HAL_GPIO_Init+0x264>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x20e>
 8001816:	2309      	movs	r3, #9
 8001818:	e02d      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800181a:	230a      	movs	r3, #10
 800181c:	e02b      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800181e:	2308      	movs	r3, #8
 8001820:	e029      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 8001822:	2307      	movs	r3, #7
 8001824:	e027      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 8001826:	2306      	movs	r3, #6
 8001828:	e025      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800182a:	2305      	movs	r3, #5
 800182c:	e023      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800182e:	2304      	movs	r3, #4
 8001830:	e021      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 8001832:	2303      	movs	r3, #3
 8001834:	e01f      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 8001836:	2302      	movs	r3, #2
 8001838:	e01d      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800183a:	2301      	movs	r3, #1
 800183c:	e01b      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800183e:	bf00      	nop
 8001840:	58000080 	.word	0x58000080
 8001844:	58024400 	.word	0x58024400
 8001848:	58000400 	.word	0x58000400
 800184c:	58020000 	.word	0x58020000
 8001850:	58020400 	.word	0x58020400
 8001854:	58020800 	.word	0x58020800
 8001858:	58020c00 	.word	0x58020c00
 800185c:	58021000 	.word	0x58021000
 8001860:	58021400 	.word	0x58021400
 8001864:	58021800 	.word	0x58021800
 8001868:	58021c00 	.word	0x58021c00
 800186c:	58022000 	.word	0x58022000
 8001870:	58022400 	.word	0x58022400
 8001874:	2300      	movs	r3, #0
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	f002 0203 	and.w	r2, r2, #3
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	4093      	lsls	r3, r2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001886:	4938      	ldr	r1, [pc, #224]	@ (8001968 <HAL_GPIO_Init+0x35c>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3301      	adds	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f ae63 	bne.w	8001620 <HAL_GPIO_Init+0x14>
  }
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	3724      	adds	r7, #36	@ 0x24
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	58000400 	.word	0x58000400

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001988:	e003      	b.n	8001992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019a8:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_PWREx_ConfigSupply+0x70>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00a      	beq.n	80019ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019b4:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <HAL_PWREx_ConfigSupply+0x70>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e01f      	b.n	8001a06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e01d      	b.n	8001a06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_PWREx_ConfigSupply+0x70>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	490f      	ldr	r1, [pc, #60]	@ (8001a10 <HAL_PWREx_ConfigSupply+0x70>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019da:	f7ff fc53 	bl	8001284 <HAL_GetTick>
 80019de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019e0:	e009      	b.n	80019f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019e2:	f7ff fc4f 	bl	8001284 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019f0:	d901      	bls.n	80019f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e007      	b.n	8001a06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_PWREx_ConfigSupply+0x70>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a02:	d1ee      	bne.n	80019e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	58024800 	.word	0x58024800

08001a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	@ 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f000 bc48 	b.w	80022b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8088 	beq.w	8001b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b99      	ldr	r3, [pc, #612]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a40:	4b96      	ldr	r3, [pc, #600]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d007      	beq.n	8001a5c <HAL_RCC_OscConfig+0x48>
 8001a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4e:	2b18      	cmp	r3, #24
 8001a50:	d111      	bne.n	8001a76 <HAL_RCC_OscConfig+0x62>
 8001a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d10c      	bne.n	8001a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	4b8f      	ldr	r3, [pc, #572]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d06d      	beq.n	8001b44 <HAL_RCC_OscConfig+0x130>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d169      	bne.n	8001b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f000 bc21 	b.w	80022b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x7a>
 8001a80:	4b86      	ldr	r3, [pc, #536]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a85      	ldr	r2, [pc, #532]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e02e      	b.n	8001aec <HAL_RCC_OscConfig+0xd8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x9c>
 8001a96:	4b81      	ldr	r3, [pc, #516]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a80      	ldr	r2, [pc, #512]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b7e      	ldr	r3, [pc, #504]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7d      	ldr	r2, [pc, #500]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xd8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xc0>
 8001aba:	4b78      	ldr	r3, [pc, #480]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a77      	ldr	r2, [pc, #476]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b75      	ldr	r3, [pc, #468]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a74      	ldr	r2, [pc, #464]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xd8>
 8001ad4:	4b71      	ldr	r3, [pc, #452]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a70      	ldr	r2, [pc, #448]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b6e      	ldr	r3, [pc, #440]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a6d      	ldr	r2, [pc, #436]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fbc6 	bl	8001284 <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fbc2 	bl	8001284 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e3d4      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b0e:	4b63      	ldr	r3, [pc, #396]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xe8>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbb2 	bl	8001284 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fbae 	bl	8001284 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e3c0      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b36:	4b59      	ldr	r3, [pc, #356]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x110>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80ca 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b54:	4b51      	ldr	r3, [pc, #324]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_RCC_OscConfig+0x166>
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	2b18      	cmp	r3, #24
 8001b6e:	d156      	bne.n	8001c1e <HAL_RCC_OscConfig+0x20a>
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d151      	bne.n	8001c1e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7a:	4b48      	ldr	r3, [pc, #288]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x17e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e392      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b92:	4b42      	ldr	r3, [pc, #264]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0219 	bic.w	r2, r3, #25
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	493f      	ldr	r1, [pc, #252]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb6e 	bl	8001284 <HAL_GetTick>
 8001ba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fb6a 	bl	8001284 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e37c      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbe:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	f7ff fb8b 	bl	80012e4 <HAL_GetREVID>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d817      	bhi.n	8001c08 <HAL_RCC_OscConfig+0x1f4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	2b40      	cmp	r3, #64	@ 0x40
 8001bde:	d108      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x1de>
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001be8:	4a2c      	ldr	r2, [pc, #176]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf0:	e07a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	031b      	lsls	r3, r3, #12
 8001c00:	4926      	ldr	r1, [pc, #152]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c06:	e06f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	4921      	ldr	r1, [pc, #132]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1c:	e064      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d047      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0219 	bic.w	r2, r3, #25
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	491a      	ldr	r1, [pc, #104]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff fb24 	bl	8001284 <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff fb20 	bl	8001284 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e332      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	f7ff fb41 	bl	80012e4 <HAL_GetREVID>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d819      	bhi.n	8001ca0 <HAL_RCC_OscConfig+0x28c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b40      	cmp	r3, #64	@ 0x40
 8001c72:	d108      	bne.n	8001c86 <HAL_RCC_OscConfig+0x272>
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c7c:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c82:	6053      	str	r3, [r2, #4]
 8001c84:	e030      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2d4>
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	031b      	lsls	r3, r3, #12
 8001c94:	4901      	ldr	r1, [pc, #4]	@ (8001c9c <HAL_RCC_OscConfig+0x288>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
 8001c9a:	e025      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2d4>
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	4b9a      	ldr	r3, [pc, #616]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	4997      	ldr	r1, [pc, #604]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e018      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	4b95      	ldr	r3, [pc, #596]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a94      	ldr	r2, [pc, #592]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fadf 	bl	8001284 <HAL_GetTick>
 8001cc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff fadb 	bl	8001284 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e2ed      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cdc:	4b8b      	ldr	r3, [pc, #556]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a9 	beq.w	8001e48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4b85      	ldr	r3, [pc, #532]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cfe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d00:	4b82      	ldr	r3, [pc, #520]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d007      	beq.n	8001d1c <HAL_RCC_OscConfig+0x308>
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b18      	cmp	r3, #24
 8001d10:	d13a      	bne.n	8001d88 <HAL_RCC_OscConfig+0x374>
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d135      	bne.n	8001d88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_OscConfig+0x320>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b80      	cmp	r3, #128	@ 0x80
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e2c1      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d34:	f7ff fad6 	bl	80012e4 <HAL_GetREVID>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d817      	bhi.n	8001d72 <HAL_RCC_OscConfig+0x35e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_OscConfig+0x348>
 8001d4a:	4b70      	ldr	r3, [pc, #448]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d52:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d5a:	e075      	b.n	8001e48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	069b      	lsls	r3, r3, #26
 8001d6a:	4968      	ldr	r1, [pc, #416]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d70:	e06a      	b.n	8001e48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d72:	4b66      	ldr	r3, [pc, #408]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	061b      	lsls	r3, r3, #24
 8001d80:	4962      	ldr	r1, [pc, #392]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d86:	e05f      	b.n	8001e48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d042      	beq.n	8001e16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d90:	4b5e      	ldr	r3, [pc, #376]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a5d      	ldr	r2, [pc, #372]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fa72 	bl	8001284 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001da4:	f7ff fa6e 	bl	8001284 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e280      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001db6:	4b55      	ldr	r3, [pc, #340]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dc2:	f7ff fa8f 	bl	80012e4 <HAL_GetREVID>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d817      	bhi.n	8001e00 <HAL_RCC_OscConfig+0x3ec>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d108      	bne.n	8001dea <HAL_RCC_OscConfig+0x3d6>
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001de0:	4a4a      	ldr	r2, [pc, #296]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001de6:	6053      	str	r3, [r2, #4]
 8001de8:	e02e      	b.n	8001e48 <HAL_RCC_OscConfig+0x434>
 8001dea:	4b48      	ldr	r3, [pc, #288]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	069b      	lsls	r3, r3, #26
 8001df8:	4944      	ldr	r1, [pc, #272]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
 8001dfe:	e023      	b.n	8001e48 <HAL_RCC_OscConfig+0x434>
 8001e00:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	493f      	ldr	r1, [pc, #252]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff fa2f 	bl	8001284 <HAL_GetTick>
 8001e26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fa2b 	bl	8001284 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e23d      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e3c:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d036      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d019      	beq.n	8001e90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e60:	4a2a      	ldr	r2, [pc, #168]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7ff fa0c 	bl	8001284 <HAL_GetTick>
 8001e6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7ff fa08 	bl	8001284 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e21a      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e82:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x45c>
 8001e8e:	e018      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e94:	4a1d      	ldr	r2, [pc, #116]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff f9f2 	bl	8001284 <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff f9ee 	bl	8001284 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e200      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d039      	beq.n	8001f42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a0c      	ldr	r2, [pc, #48]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ee0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f9cf 	bl	8001284 <HAL_GetTick>
 8001ee6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eea:	f7ff f9cb 	bl	8001284 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1dd      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x4d6>
 8001f08:	e01b      	b.n	8001f42 <HAL_RCC_OscConfig+0x52e>
 8001f0a:	bf00      	nop
 8001f0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f10:	4b9b      	ldr	r3, [pc, #620]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a9a      	ldr	r2, [pc, #616]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f9b2 	bl	8001284 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f24:	f7ff f9ae 	bl	8001284 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1c0      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f36:	4b92      	ldr	r3, [pc, #584]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8081 	beq.w	8002052 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f50:	4b8c      	ldr	r3, [pc, #560]	@ (8002184 <HAL_RCC_OscConfig+0x770>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a8b      	ldr	r2, [pc, #556]	@ (8002184 <HAL_RCC_OscConfig+0x770>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f5c:	f7ff f992 	bl	8001284 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7ff f98e 	bl	8001284 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	@ 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1a0      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f76:	4b83      	ldr	r3, [pc, #524]	@ (8002184 <HAL_RCC_OscConfig+0x770>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d106      	bne.n	8001f98 <HAL_RCC_OscConfig+0x584>
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f96:	e02d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x5e0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10c      	bne.n	8001fba <HAL_RCC_OscConfig+0x5a6>
 8001fa0:	4b77      	ldr	r3, [pc, #476]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa4:	4a76      	ldr	r2, [pc, #472]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fac:	4b74      	ldr	r3, [pc, #464]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb0:	4a73      	ldr	r2, [pc, #460]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fb2:	f023 0304 	bic.w	r3, r3, #4
 8001fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x5e0>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5c8>
 8001fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fce:	4b6c      	ldr	r3, [pc, #432]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd2:	4a6b      	ldr	r2, [pc, #428]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x5e0>
 8001fdc:	4b68      	ldr	r3, [pc, #416]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe0:	4a67      	ldr	r2, [pc, #412]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe8:	4b65      	ldr	r3, [pc, #404]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fec:	4a64      	ldr	r2, [pc, #400]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8001fee:	f023 0304 	bic.w	r3, r3, #4
 8001ff2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d015      	beq.n	8002028 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f942 	bl	8001284 <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7ff f93e 	bl	8001284 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e14e      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800201a:	4b59      	ldr	r3, [pc, #356]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ee      	beq.n	8002004 <HAL_RCC_OscConfig+0x5f0>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff f92c 	bl	8001284 <HAL_GetTick>
 800202c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff f928 	bl	8001284 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e138      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002046:	4b4e      	ldr	r3, [pc, #312]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ee      	bne.n	8002030 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 812d 	beq.w	80022b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800205c:	4b48      	ldr	r3, [pc, #288]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002064:	2b18      	cmp	r3, #24
 8002066:	f000 80bd 	beq.w	80021e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	2b02      	cmp	r3, #2
 8002070:	f040 809e 	bne.w	80021b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002074:	4b42      	ldr	r3, [pc, #264]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a41      	ldr	r2, [pc, #260]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 800207a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800207e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff f900 	bl	8001284 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff f8fc 	bl	8001284 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e10e      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800209a:	4b39      	ldr	r3, [pc, #228]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a6:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 80020a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020aa:	4b37      	ldr	r3, [pc, #220]	@ (8002188 <HAL_RCC_OscConfig+0x774>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	430a      	orrs	r2, r1
 80020ba:	4931      	ldr	r1, [pc, #196]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	628b      	str	r3, [r1, #40]	@ 0x28
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	3b01      	subs	r3, #1
 80020c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ce:	3b01      	subs	r3, #1
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020da:	3b01      	subs	r3, #1
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	3b01      	subs	r3, #1
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020f0:	4923      	ldr	r1, [pc, #140]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020f6:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	4a21      	ldr	r2, [pc, #132]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002102:	4b1f      	ldr	r3, [pc, #124]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002106:	4b21      	ldr	r3, [pc, #132]	@ (800218c <HAL_RCC_OscConfig+0x778>)
 8002108:	4013      	ands	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800210e:	00d2      	lsls	r2, r2, #3
 8002110:	491b      	ldr	r1, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211a:	f023 020c 	bic.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	4917      	ldr	r1, [pc, #92]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002124:	4313      	orrs	r3, r2
 8002126:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002128:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	f023 0202 	bic.w	r2, r3, #2
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002134:	4912      	ldr	r1, [pc, #72]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 800213c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213e:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	4a0d      	ldr	r2, [pc, #52]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 800214c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002152:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800215c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216a:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <HAL_RCC_OscConfig+0x76c>)
 8002170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff f885 	bl	8001284 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800217c:	e011      	b.n	80021a2 <HAL_RCC_OscConfig+0x78e>
 800217e:	bf00      	nop
 8002180:	58024400 	.word	0x58024400
 8002184:	58024800 	.word	0x58024800
 8002188:	fffffc0c 	.word	0xfffffc0c
 800218c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff f878 	bl	8001284 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e08a      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021a2:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x77c>
 80021ae:	e082      	b.n	80022b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	4b43      	ldr	r3, [pc, #268]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a42      	ldr	r2, [pc, #264]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80021b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff f862 	bl	8001284 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f85e 	bl	8001284 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e070      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021d6:	4b3a      	ldr	r3, [pc, #232]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x7b0>
 80021e2:	e068      	b.n	80022b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021e4:	4b36      	ldr	r3, [pc, #216]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021ea:	4b35      	ldr	r3, [pc, #212]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d031      	beq.n	800225c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f003 0203 	and.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d12a      	bne.n	800225c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d122      	bne.n	800225c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d11a      	bne.n	800225c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	0a5b      	lsrs	r3, r3, #9
 800222a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002232:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d111      	bne.n	800225c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d108      	bne.n	800225c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0e1b      	lsrs	r3, r3, #24
 800224e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002256:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e02b      	b.n	80022b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002260:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 8002262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800226a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	429a      	cmp	r2, r3
 8002274:	d01f      	beq.n	80022b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	4a11      	ldr	r2, [pc, #68]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002282:	f7fe ffff 	bl	8001284 <HAL_GetTick>
 8002286:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002288:	bf00      	nop
 800228a:	f7fe fffb 	bl	8001284 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	4293      	cmp	r3, r2
 8002294:	d0f9      	beq.n	800228a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 8002298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229a:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_RCC_OscConfig+0x8b0>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022a2:	00d2      	lsls	r2, r2, #3
 80022a4:	4906      	ldr	r1, [pc, #24]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80022aa:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <HAL_RCC_OscConfig+0x8ac>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3730      	adds	r7, #48	@ 0x30
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	58024400 	.word	0x58024400
 80022c4:	ffff0007 	.word	0xffff0007

080022c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e19c      	b.n	8002616 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002508 <HAL_RCC_ClockConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d910      	bls.n	800230c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b87      	ldr	r3, [pc, #540]	@ (8002508 <HAL_RCC_ClockConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 020f 	bic.w	r2, r3, #15
 80022f2:	4985      	ldr	r1, [pc, #532]	@ (8002508 <HAL_RCC_ClockConfig+0x240>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b83      	ldr	r3, [pc, #524]	@ (8002508 <HAL_RCC_ClockConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e184      	b.n	8002616 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	4b7b      	ldr	r3, [pc, #492]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002324:	429a      	cmp	r2, r3
 8002326:	d908      	bls.n	800233a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002328:	4b78      	ldr	r3, [pc, #480]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4975      	ldr	r1, [pc, #468]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 8002336:	4313      	orrs	r3, r2
 8002338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	4b70      	ldr	r3, [pc, #448]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002352:	429a      	cmp	r2, r3
 8002354:	d908      	bls.n	8002368 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002356:	4b6d      	ldr	r3, [pc, #436]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	496a      	ldr	r1, [pc, #424]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 8002364:	4313      	orrs	r3, r2
 8002366:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d010      	beq.n	8002396 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	4b64      	ldr	r3, [pc, #400]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002380:	429a      	cmp	r2, r3
 8002382:	d908      	bls.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002384:	4b61      	ldr	r3, [pc, #388]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	495e      	ldr	r1, [pc, #376]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 8002392:	4313      	orrs	r3, r2
 8002394:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d010      	beq.n	80023c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	4b59      	ldr	r3, [pc, #356]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d908      	bls.n	80023c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023b2:	4b56      	ldr	r3, [pc, #344]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4953      	ldr	r1, [pc, #332]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d010      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	4b4d      	ldr	r3, [pc, #308]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	429a      	cmp	r2, r3
 80023de:	d908      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4b4a      	ldr	r3, [pc, #296]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f023 020f 	bic.w	r2, r3, #15
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4947      	ldr	r1, [pc, #284]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d055      	beq.n	80024aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023fe:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4940      	ldr	r1, [pc, #256]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800240c:	4313      	orrs	r3, r2
 800240e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d107      	bne.n	8002428 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002418:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d121      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0f6      	b.n	8002616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d107      	bne.n	8002440 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002430:	4b36      	ldr	r3, [pc, #216]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d115      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0ea      	b.n	8002616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d107      	bne.n	8002458 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002448:	4b30      	ldr	r3, [pc, #192]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0de      	b.n	8002616 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002458:	4b2c      	ldr	r3, [pc, #176]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d6      	b.n	8002616 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002468:	4b28      	ldr	r3, [pc, #160]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f023 0207 	bic.w	r2, r3, #7
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4925      	ldr	r1, [pc, #148]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 8002476:	4313      	orrs	r3, r2
 8002478:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247a:	f7fe ff03 	bl	8001284 <HAL_GetTick>
 800247e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002480:	e00a      	b.n	8002498 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002482:	f7fe feff 	bl	8001284 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0be      	b.n	8002616 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002498:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d1eb      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d010      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d208      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f023 020f 	bic.w	r2, r3, #15
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	490e      	ldr	r1, [pc, #56]	@ (800250c <HAL_RCC_ClockConfig+0x244>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_ClockConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d214      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <HAL_RCC_ClockConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 020f 	bic.w	r2, r3, #15
 80024ee:	4906      	ldr	r1, [pc, #24]	@ (8002508 <HAL_RCC_ClockConfig+0x240>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <HAL_RCC_ClockConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e086      	b.n	8002616 <HAL_RCC_ClockConfig+0x34e>
 8002508:	52002000 	.word	0x52002000
 800250c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d010      	beq.n	800253e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	4b3f      	ldr	r3, [pc, #252]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002528:	429a      	cmp	r2, r3
 800252a:	d208      	bcs.n	800253e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800252c:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	4939      	ldr	r1, [pc, #228]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 800253a:	4313      	orrs	r3, r2
 800253c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d010      	beq.n	800256c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	4b34      	ldr	r3, [pc, #208]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002556:	429a      	cmp	r2, r3
 8002558:	d208      	bcs.n	800256c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800255a:	4b31      	ldr	r3, [pc, #196]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	492e      	ldr	r1, [pc, #184]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 8002568:	4313      	orrs	r3, r2
 800256a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002584:	429a      	cmp	r2, r3
 8002586:	d208      	bcs.n	800259a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002588:	4b25      	ldr	r3, [pc, #148]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4922      	ldr	r1, [pc, #136]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 8002596:	4313      	orrs	r3, r2
 8002598:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d208      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4917      	ldr	r1, [pc, #92]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025c8:	f000 f834 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	4912      	ldr	r1, [pc, #72]	@ (8002624 <HAL_RCC_ClockConfig+0x35c>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_RCC_ClockConfig+0x358>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <HAL_RCC_ClockConfig+0x35c>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
 80025fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <HAL_RCC_ClockConfig+0x360>)
 80025fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002600:	4a0a      	ldr	r2, [pc, #40]	@ (800262c <HAL_RCC_ClockConfig+0x364>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002606:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_RCC_ClockConfig+0x368>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fdf0 	bl	80011f0 <HAL_InitTick>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	58024400 	.word	0x58024400
 8002624:	08007850 	.word	0x08007850
 8002628:	24000004 	.word	0x24000004
 800262c:	24000000 	.word	0x24000000
 8002630:	24000008 	.word	0x24000008

08002634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	@ 0x24
 8002638:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800263a:	4bb3      	ldr	r3, [pc, #716]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002642:	2b18      	cmp	r3, #24
 8002644:	f200 8155 	bhi.w	80028f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002648:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <HAL_RCC_GetSysClockFreq+0x1c>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	080026b5 	.word	0x080026b5
 8002654:	080028f3 	.word	0x080028f3
 8002658:	080028f3 	.word	0x080028f3
 800265c:	080028f3 	.word	0x080028f3
 8002660:	080028f3 	.word	0x080028f3
 8002664:	080028f3 	.word	0x080028f3
 8002668:	080028f3 	.word	0x080028f3
 800266c:	080028f3 	.word	0x080028f3
 8002670:	080026db 	.word	0x080026db
 8002674:	080028f3 	.word	0x080028f3
 8002678:	080028f3 	.word	0x080028f3
 800267c:	080028f3 	.word	0x080028f3
 8002680:	080028f3 	.word	0x080028f3
 8002684:	080028f3 	.word	0x080028f3
 8002688:	080028f3 	.word	0x080028f3
 800268c:	080028f3 	.word	0x080028f3
 8002690:	080026e1 	.word	0x080026e1
 8002694:	080028f3 	.word	0x080028f3
 8002698:	080028f3 	.word	0x080028f3
 800269c:	080028f3 	.word	0x080028f3
 80026a0:	080028f3 	.word	0x080028f3
 80026a4:	080028f3 	.word	0x080028f3
 80026a8:	080028f3 	.word	0x080028f3
 80026ac:	080028f3 	.word	0x080028f3
 80026b0:	080026e7 	.word	0x080026e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026b4:	4b94      	ldr	r3, [pc, #592]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026c0:	4b91      	ldr	r3, [pc, #580]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	4a90      	ldr	r2, [pc, #576]	@ (800290c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026d2:	e111      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026d4:	4b8d      	ldr	r3, [pc, #564]	@ (800290c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026d6:	61bb      	str	r3, [r7, #24]
      break;
 80026d8:	e10e      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026da:	4b8d      	ldr	r3, [pc, #564]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026dc:	61bb      	str	r3, [r7, #24]
      break;
 80026de:	e10b      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026e2:	61bb      	str	r3, [r7, #24]
      break;
 80026e4:	e108      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026e6:	4b88      	ldr	r3, [pc, #544]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026f0:	4b85      	ldr	r3, [pc, #532]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026fc:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002706:	4b80      	ldr	r3, [pc, #512]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80e1 	beq.w	80028ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b02      	cmp	r3, #2
 800272e:	f000 8083 	beq.w	8002838 <HAL_RCC_GetSysClockFreq+0x204>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b02      	cmp	r3, #2
 8002736:	f200 80a1 	bhi.w	800287c <HAL_RCC_GetSysClockFreq+0x248>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x114>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d056      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002746:	e099      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002748:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d02d      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002754:	4b6c      	ldr	r3, [pc, #432]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	4a6b      	ldr	r2, [pc, #428]	@ (800290c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
 8002764:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800277e:	4b62      	ldr	r3, [pc, #392]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800278e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002792:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800279a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800279e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80027ae:	e087      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800291c <HAL_RCC_GetSysClockFreq+0x2e8>
 80027be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c2:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027f2:	e065      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002920 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002806:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002816:	ed97 6a02 	vldr	s12, [r7, #8]
 800281a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x2e4>
 800281e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800282a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002836:	e043      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002924 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800284a:	4b2f      	ldr	r3, [pc, #188]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800285a:	ed97 6a02 	vldr	s12, [r7, #8]
 800285e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800286a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800286e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800287a:	e021      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002886:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002920 <HAL_RCC_GetSysClockFreq+0x2ec>
 800288a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800289e:	ed97 6a02 	vldr	s12, [r7, #8]
 80028a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	0a5b      	lsrs	r3, r3, #9
 80028c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ca:	3301      	adds	r3, #1
 80028cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e4:	ee17 3a90 	vmov	r3, s15
 80028e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028ea:	e005      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
      break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028f2:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028f4:	61bb      	str	r3, [r7, #24]
      break;
 80028f6:	bf00      	nop
  }

  return sysclockfreq;
 80028f8:	69bb      	ldr	r3, [r7, #24]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3724      	adds	r7, #36	@ 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	58024400 	.word	0x58024400
 800290c:	03d09000 	.word	0x03d09000
 8002910:	003d0900 	.word	0x003d0900
 8002914:	017d7840 	.word	0x017d7840
 8002918:	46000000 	.word	0x46000000
 800291c:	4c742400 	.word	0x4c742400
 8002920:	4a742400 	.word	0x4a742400
 8002924:	4bbebc20 	.word	0x4bbebc20

08002928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800292e:	f7ff fe81 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <HAL_RCC_GetHCLKFreq+0x50>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	490f      	ldr	r1, [pc, #60]	@ (800297c <HAL_RCC_GetHCLKFreq+0x54>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <HAL_RCC_GetHCLKFreq+0x50>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	4a09      	ldr	r2, [pc, #36]	@ (800297c <HAL_RCC_GetHCLKFreq+0x54>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	4a07      	ldr	r2, [pc, #28]	@ (8002980 <HAL_RCC_GetHCLKFreq+0x58>)
 8002964:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002966:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <HAL_RCC_GetHCLKFreq+0x58>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	58024400 	.word	0x58024400
 800297c:	08007850 	.word	0x08007850
 8002980:	24000004 	.word	0x24000004
 8002984:	24000000 	.word	0x24000000

08002988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800298c:	f7ff ffcc 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4904      	ldr	r1, [pc, #16]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	58024400 	.word	0x58024400
 80029b0:	08007850 	.word	0x08007850

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80029b8:	f7ff ffb6 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4904      	ldr	r1, [pc, #16]	@ (80029dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	58024400 	.word	0x58024400
 80029dc:	08007850 	.word	0x08007850

080029e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e4:	b0ca      	sub	sp, #296	@ 0x128
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002a04:	2500      	movs	r5, #0
 8002a06:	ea54 0305 	orrs.w	r3, r4, r5
 8002a0a:	d049      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a16:	d02f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a1c:	d828      	bhi.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a22:	d01a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a28:	d822      	bhi.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a32:	d007      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a34:	e01c      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a36:	4bb8      	ldr	r3, [pc, #736]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	4ab7      	ldr	r2, [pc, #732]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a42:	e01a      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a48:	3308      	adds	r3, #8
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f001 fc8f 	bl	8004370 <RCCEx_PLL2_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a58:	e00f      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5e:	3328      	adds	r3, #40	@ 0x28
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 fd36 	bl	80044d4 <RCCEx_PLL3_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a6e:	e004      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a76:	e000      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a82:	4ba5      	ldr	r3, [pc, #660]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a90:	4aa1      	ldr	r2, [pc, #644]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a92:	430b      	orrs	r3, r1
 8002a94:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a96:	e003      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002aac:	f04f 0900 	mov.w	r9, #0
 8002ab0:	ea58 0309 	orrs.w	r3, r8, r9
 8002ab4:	d047      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d82a      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002add 	.word	0x08002add
 8002acc:	08002aeb 	.word	0x08002aeb
 8002ad0:	08002b01 	.word	0x08002b01
 8002ad4:	08002b1f 	.word	0x08002b1f
 8002ad8:	08002b1f 	.word	0x08002b1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002adc:	4b8e      	ldr	r3, [pc, #568]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	4a8d      	ldr	r2, [pc, #564]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ae8:	e01a      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aee:	3308      	adds	r3, #8
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 fc3c 	bl	8004370 <RCCEx_PLL2_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002afe:	e00f      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b04:	3328      	adds	r3, #40	@ 0x28
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 fce3 	bl	80044d4 <RCCEx_PLL3_Config>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b14:	e004      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b1c:	e000      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b28:	4b7b      	ldr	r3, [pc, #492]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2c:	f023 0107 	bic.w	r1, r3, #7
 8002b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	4a78      	ldr	r2, [pc, #480]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b3c:	e003      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002b52:	f04f 0b00 	mov.w	fp, #0
 8002b56:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b5a:	d04c      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b66:	d030      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6c:	d829      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b70:	d02d      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b74:	d825      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b76:	2b80      	cmp	r3, #128	@ 0x80
 8002b78:	d018      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b7a:	2b80      	cmp	r3, #128	@ 0x80
 8002b7c:	d821      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b82:	2b40      	cmp	r3, #64	@ 0x40
 8002b84:	d007      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b86:	e01c      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b88:	4b63      	ldr	r3, [pc, #396]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	4a62      	ldr	r2, [pc, #392]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b94:	e01c      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fbe6 	bl	8004370 <RCCEx_PLL2_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002baa:	e011      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb0:	3328      	adds	r3, #40	@ 0x28
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 fc8d 	bl	80044d4 <RCCEx_PLL3_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bc0:	e006      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bc8:	e002      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bdc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be6:	4a4c      	ldr	r2, [pc, #304]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bec:	e003      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002c02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002c10:	460b      	mov	r3, r1
 8002c12:	4313      	orrs	r3, r2
 8002c14:	d053      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c22:	d035      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c28:	d82e      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c2e:	d031      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c34:	d828      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c3a:	d01a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c40:	d822      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c4a:	d007      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4e:	4b32      	ldr	r3, [pc, #200]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	4a31      	ldr	r2, [pc, #196]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c5a:	e01c      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c60:	3308      	adds	r3, #8
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 fb83 	bl	8004370 <RCCEx_PLL2_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c70:	e011      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c76:	3328      	adds	r3, #40	@ 0x28
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 fc2a 	bl	80044d4 <RCCEx_PLL3_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c86:	e006      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c8e:	e002      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002cae:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb4:	e003      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002cca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	d056      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ce6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cea:	d038      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002cec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cf0:	d831      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cf2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cf6:	d034      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002cf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cfc:	d82b      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d02:	d01d      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d08:	d825      	bhi.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002d0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002d14:	e01f      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d16:	bf00      	nop
 8002d18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d1c:	4ba2      	ldr	r3, [pc, #648]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	4aa1      	ldr	r2, [pc, #644]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d28:	e01c      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2e:	3308      	adds	r3, #8
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 fb1c 	bl	8004370 <RCCEx_PLL2_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d3e:	e011      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d44:	3328      	adds	r3, #40	@ 0x28
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fbc3 	bl	80044d4 <RCCEx_PLL3_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d5c:	e002      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d6c:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d7c:	4a8a      	ldr	r2, [pc, #552]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d82:	e003      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002da2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002da6:	460b      	mov	r3, r1
 8002da8:	4313      	orrs	r3, r2
 8002daa:	d03a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	2b30      	cmp	r3, #48	@ 0x30
 8002db4:	d01f      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002db6:	2b30      	cmp	r3, #48	@ 0x30
 8002db8:	d819      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d815      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d019      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d111      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dca:	4b77      	ldr	r3, [pc, #476]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	4a76      	ldr	r2, [pc, #472]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002dd6:	e011      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ddc:	3308      	adds	r3, #8
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fac5 	bl	8004370 <RCCEx_PLL2_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002dec:	e006      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002df4:	e002      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e04:	4b68      	ldr	r3, [pc, #416]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e12:	4a65      	ldr	r2, [pc, #404]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e14:	430b      	orrs	r3, r1
 8002e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e18:	e003      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002e38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	d051      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e4c:	d035      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e52:	d82e      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e58:	d031      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e5e:	d828      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e64:	d01a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6a:	d822      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e74:	d007      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e76:	e01c      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e78:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e84:	e01c      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 fa6e 	bl	8004370 <RCCEx_PLL2_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e9a:	e011      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea0:	3328      	adds	r3, #40	@ 0x28
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f001 fb15 	bl	80044d4 <RCCEx_PLL3_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002eb0:	e006      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eb8:	e002      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ec8:	4b37      	ldr	r3, [pc, #220]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ecc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed6:	4a34      	ldr	r2, [pc, #208]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002efc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002f00:	460b      	mov	r3, r1
 8002f02:	4313      	orrs	r3, r2
 8002f04:	d056      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f10:	d033      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f16:	d82c      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f1c:	d02f      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002f1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f22:	d826      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f28:	d02b      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f2e:	d820      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f34:	d012      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f3a:	d81a      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f44:	d115      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 fa0e 	bl	8004370 <RCCEx_PLL2_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f5a:	e015      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f60:	3328      	adds	r3, #40	@ 0x28
 8002f62:	2101      	movs	r1, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f001 fab5 	bl	80044d4 <RCCEx_PLL3_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f70:	e00a      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f78:	e006      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f7a:	bf00      	nop
 8002f7c:	e004      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e002      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f82:	bf00      	nop
 8002f84:	e000      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f9e:	4a02      	ldr	r2, [pc, #8]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fa4:	e006      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002fa6:	bf00      	nop
 8002fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	d055      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fe0:	d033      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fe6:	d82c      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fec:	d02f      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff2:	d826      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ff4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ff8:	d02b      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002ffa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ffe:	d820      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003004:	d012      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800300a:	d81a      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d022      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003014:	d115      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301a:	3308      	adds	r3, #8
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f9a6 	bl	8004370 <RCCEx_PLL2_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800302a:	e015      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003030:	3328      	adds	r3, #40	@ 0x28
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f001 fa4d 	bl	80044d4 <RCCEx_PLL3_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003040:	e00a      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003048:	e006      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800304a:	bf00      	nop
 800304c:	e004      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800304e:	bf00      	nop
 8003050:	e002      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003060:	4ba3      	ldr	r3, [pc, #652]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003070:	4a9f      	ldr	r2, [pc, #636]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003072:	430b      	orrs	r3, r1
 8003074:	6593      	str	r3, [r2, #88]	@ 0x58
 8003076:	e003      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800308c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800309a:	460b      	mov	r3, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	d037      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80030a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030aa:	d00e      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80030ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030b0:	d816      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d018      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80030b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030ba:	d111      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030bc:	4b8c      	ldr	r3, [pc, #560]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	4a8b      	ldr	r2, [pc, #556]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030c8:	e00f      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	3308      	adds	r3, #8
 80030d0:	2101      	movs	r1, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f94c 	bl	8004370 <RCCEx_PLL2_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030de:	e004      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80030e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030f2:	4b7f      	ldr	r3, [pc, #508]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003100:	4a7b      	ldr	r2, [pc, #492]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003102:	430b      	orrs	r3, r1
 8003104:	6513      	str	r3, [r2, #80]	@ 0x50
 8003106:	e003      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800310c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800311c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003126:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800312a:	460b      	mov	r3, r1
 800312c:	4313      	orrs	r3, r2
 800312e:	d039      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003136:	2b03      	cmp	r3, #3
 8003138:	d81c      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800313a:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	0800317d 	.word	0x0800317d
 8003144:	08003151 	.word	0x08003151
 8003148:	0800315f 	.word	0x0800315f
 800314c:	0800317d 	.word	0x0800317d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003150:	4b67      	ldr	r3, [pc, #412]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	4a66      	ldr	r2, [pc, #408]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800315a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800315c:	e00f      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003162:	3308      	adds	r3, #8
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f001 f902 	bl	8004370 <RCCEx_PLL2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003172:	e004      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800317c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800317e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003186:	4b5a      	ldr	r3, [pc, #360]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318a:	f023 0103 	bic.w	r1, r3, #3
 800318e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003194:	4a56      	ldr	r2, [pc, #344]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003196:	430b      	orrs	r3, r1
 8003198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800319a:	e003      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80031b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80031be:	460b      	mov	r3, r1
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f000 809f 	beq.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c6:	4b4b      	ldr	r3, [pc, #300]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4a      	ldr	r2, [pc, #296]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d2:	f7fe f857 	bl	8001284 <HAL_GetTick>
 80031d6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031da:	e00b      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031dc:	f7fe f852 	bl	8001284 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	@ 0x64
 80031ea:	d903      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031f2:	e005      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031f4:	4b3f      	ldr	r3, [pc, #252]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ed      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003204:	2b00      	cmp	r3, #0
 8003206:	d179      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003208:	4b39      	ldr	r3, [pc, #228]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003214:	4053      	eors	r3, r2
 8003216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800321e:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003226:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800322a:	4b31      	ldr	r3, [pc, #196]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322e:	4a30      	ldr	r2, [pc, #192]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003234:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003236:	4b2e      	ldr	r3, [pc, #184]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323a:	4a2d      	ldr	r2, [pc, #180]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003240:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003242:	4a2b      	ldr	r2, [pc, #172]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003248:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003256:	d118      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe f814 	bl	8001284 <HAL_GetTick>
 800325c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003260:	e00d      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe f80f 	bl	8001284 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800326c:	1ad2      	subs	r2, r2, r3
 800326e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003272:	429a      	cmp	r2, r3
 8003274:	d903      	bls.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800327c:	e005      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800327e:	4b1c      	ldr	r3, [pc, #112]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0eb      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800328a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328e:	2b00      	cmp	r3, #0
 8003290:	d129      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800329a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032a2:	d10e      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80032a4:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032b4:	091a      	lsrs	r2, r3, #4
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	6113      	str	r3, [r2, #16]
 80032c0:	e005      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032cc:	6113      	str	r3, [r2, #16]
 80032ce:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032de:	4a04      	ldr	r2, [pc, #16]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e4:	e00e      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80032ee:	e009      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80032f0:	58024400 	.word	0x58024400
 80032f4:	58024800 	.word	0x58024800
 80032f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f002 0301 	and.w	r3, r2, #1
 8003310:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800331a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800331e:	460b      	mov	r3, r1
 8003320:	4313      	orrs	r3, r2
 8003322:	f000 8089 	beq.w	8003438 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800332c:	2b28      	cmp	r3, #40	@ 0x28
 800332e:	d86b      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003330:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003411 	.word	0x08003411
 800333c:	08003409 	.word	0x08003409
 8003340:	08003409 	.word	0x08003409
 8003344:	08003409 	.word	0x08003409
 8003348:	08003409 	.word	0x08003409
 800334c:	08003409 	.word	0x08003409
 8003350:	08003409 	.word	0x08003409
 8003354:	08003409 	.word	0x08003409
 8003358:	080033dd 	.word	0x080033dd
 800335c:	08003409 	.word	0x08003409
 8003360:	08003409 	.word	0x08003409
 8003364:	08003409 	.word	0x08003409
 8003368:	08003409 	.word	0x08003409
 800336c:	08003409 	.word	0x08003409
 8003370:	08003409 	.word	0x08003409
 8003374:	08003409 	.word	0x08003409
 8003378:	080033f3 	.word	0x080033f3
 800337c:	08003409 	.word	0x08003409
 8003380:	08003409 	.word	0x08003409
 8003384:	08003409 	.word	0x08003409
 8003388:	08003409 	.word	0x08003409
 800338c:	08003409 	.word	0x08003409
 8003390:	08003409 	.word	0x08003409
 8003394:	08003409 	.word	0x08003409
 8003398:	08003411 	.word	0x08003411
 800339c:	08003409 	.word	0x08003409
 80033a0:	08003409 	.word	0x08003409
 80033a4:	08003409 	.word	0x08003409
 80033a8:	08003409 	.word	0x08003409
 80033ac:	08003409 	.word	0x08003409
 80033b0:	08003409 	.word	0x08003409
 80033b4:	08003409 	.word	0x08003409
 80033b8:	08003411 	.word	0x08003411
 80033bc:	08003409 	.word	0x08003409
 80033c0:	08003409 	.word	0x08003409
 80033c4:	08003409 	.word	0x08003409
 80033c8:	08003409 	.word	0x08003409
 80033cc:	08003409 	.word	0x08003409
 80033d0:	08003409 	.word	0x08003409
 80033d4:	08003409 	.word	0x08003409
 80033d8:	08003411 	.word	0x08003411
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e0:	3308      	adds	r3, #8
 80033e2:	2101      	movs	r1, #1
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 ffc3 	bl	8004370 <RCCEx_PLL2_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033f0:	e00f      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f6:	3328      	adds	r3, #40	@ 0x28
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 f86a 	bl	80044d4 <RCCEx_PLL3_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003406:	e004      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800340e:	e000      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800341a:	4bbf      	ldr	r3, [pc, #764]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003428:	4abb      	ldr	r2, [pc, #748]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800342a:	430b      	orrs	r3, r1
 800342c:	6553      	str	r3, [r2, #84]	@ 0x54
 800342e:	e003      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f002 0302 	and.w	r3, r2, #2
 8003444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800344e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003452:	460b      	mov	r3, r1
 8003454:	4313      	orrs	r3, r2
 8003456:	d041      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345e:	2b05      	cmp	r3, #5
 8003460:	d824      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003462:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	080034b5 	.word	0x080034b5
 800346c:	08003481 	.word	0x08003481
 8003470:	08003497 	.word	0x08003497
 8003474:	080034b5 	.word	0x080034b5
 8003478:	080034b5 	.word	0x080034b5
 800347c:	080034b5 	.word	0x080034b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003484:	3308      	adds	r3, #8
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f000 ff71 	bl	8004370 <RCCEx_PLL2_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003494:	e00f      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	3328      	adds	r3, #40	@ 0x28
 800349c:	2101      	movs	r1, #1
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 f818 	bl	80044d4 <RCCEx_PLL3_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034aa:	e004      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034b2:	e000      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80034b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034be:	4b96      	ldr	r3, [pc, #600]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c2:	f023 0107 	bic.w	r1, r3, #7
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034cc:	4a92      	ldr	r2, [pc, #584]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80034d2:	e003      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f002 0304 	and.w	r3, r2, #4
 80034e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4313      	orrs	r3, r2
 80034fa:	d044      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80034fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003504:	2b05      	cmp	r3, #5
 8003506:	d825      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003508:	a201      	add	r2, pc, #4	@ (adr r2, 8003510 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	0800355d 	.word	0x0800355d
 8003514:	08003529 	.word	0x08003529
 8003518:	0800353f 	.word	0x0800353f
 800351c:	0800355d 	.word	0x0800355d
 8003520:	0800355d 	.word	0x0800355d
 8003524:	0800355d 	.word	0x0800355d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352c:	3308      	adds	r3, #8
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f000 ff1d 	bl	8004370 <RCCEx_PLL2_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800353c:	e00f      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	3328      	adds	r3, #40	@ 0x28
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f000 ffc4 	bl	80044d4 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003552:	e004      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800355c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003566:	4b6c      	ldr	r3, [pc, #432]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	f023 0107 	bic.w	r1, r3, #7
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003576:	4a68      	ldr	r2, [pc, #416]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6593      	str	r3, [r2, #88]	@ 0x58
 800357c:	e003      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f002 0320 	and.w	r3, r2, #32
 8003592:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800359c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035a0:	460b      	mov	r3, r1
 80035a2:	4313      	orrs	r3, r2
 80035a4:	d055      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b2:	d033      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80035b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b8:	d82c      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035be:	d02f      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c4:	d826      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035ca:	d02b      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80035cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035d0:	d820      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035d6:	d012      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80035d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035dc:	d81a      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d022      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80035e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035e6:	d115      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ec:	3308      	adds	r3, #8
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 febd 	bl	8004370 <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035fc:	e015      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003602:	3328      	adds	r3, #40	@ 0x28
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f000 ff64 	bl	80044d4 <RCCEx_PLL3_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003612:	e00a      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800361a:	e006      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800361c:	bf00      	nop
 800361e:	e004      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003620:	bf00      	nop
 8003622:	e002      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003624:	bf00      	nop
 8003626:	e000      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003632:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003636:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	4a35      	ldr	r2, [pc, #212]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003644:	430b      	orrs	r3, r1
 8003646:	6553      	str	r3, [r2, #84]	@ 0x54
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800364e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800365e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003668:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800366c:	460b      	mov	r3, r1
 800366e:	4313      	orrs	r3, r2
 8003670:	d058      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800367a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800367e:	d033      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003680:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003684:	d82c      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800368a:	d02f      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003690:	d826      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003696:	d02b      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003698:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800369c:	d820      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036a2:	d012      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80036a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036a8:	d81a      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d022      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d115      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b8:	3308      	adds	r3, #8
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fe57 	bl	8004370 <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036c8:	e015      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ce:	3328      	adds	r3, #40	@ 0x28
 80036d0:	2102      	movs	r1, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fefe 	bl	80044d4 <RCCEx_PLL3_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036de:	e00a      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036e6:	e006      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036e8:	bf00      	nop
 80036ea:	e004      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036ec:	bf00      	nop
 80036ee:	e002      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036f0:	bf00      	nop
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10e      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036fe:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800370e:	4a02      	ldr	r2, [pc, #8]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003710:	430b      	orrs	r3, r1
 8003712:	6593      	str	r3, [r2, #88]	@ 0x58
 8003714:	e006      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003716:	bf00      	nop
 8003718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800373a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800373e:	460b      	mov	r3, r1
 8003740:	4313      	orrs	r3, r2
 8003742:	d055      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800374c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003750:	d033      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003752:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003756:	d82c      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375c:	d02f      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800375e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003762:	d826      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003764:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003768:	d02b      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800376a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800376e:	d820      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003774:	d012      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800377a:	d81a      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d022      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003784:	d115      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	3308      	adds	r3, #8
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fdee 	bl	8004370 <RCCEx_PLL2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800379a:	e015      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	3328      	adds	r3, #40	@ 0x28
 80037a2:	2102      	movs	r1, #2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fe95 	bl	80044d4 <RCCEx_PLL3_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037b0:	e00a      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037b8:	e006      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037ba:	bf00      	nop
 80037bc:	e004      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037d0:	4ba1      	ldr	r3, [pc, #644]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037e0:	4a9d      	ldr	r2, [pc, #628]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037e2:	430b      	orrs	r3, r1
 80037e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80037e6:	e003      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f002 0308 	and.w	r3, r2, #8
 80037fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003800:	2300      	movs	r3, #0
 8003802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003806:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d01e      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	3328      	adds	r3, #40	@ 0x28
 8003824:	2102      	movs	r1, #2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fe54 	bl	80044d4 <RCCEx_PLL3_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003838:	4b87      	ldr	r3, [pc, #540]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800383a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003848:	4a83      	ldr	r2, [pc, #524]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800384a:	430b      	orrs	r3, r1
 800384c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f002 0310 	and.w	r3, r2, #16
 800385a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800385e:	2300      	movs	r3, #0
 8003860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003864:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d01e      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800387a:	d10c      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	3328      	adds	r3, #40	@ 0x28
 8003882:	2102      	movs	r1, #2
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fe25 	bl	80044d4 <RCCEx_PLL3_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003896:	4b70      	ldr	r3, [pc, #448]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80038b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80038c6:	460b      	mov	r3, r1
 80038c8:	4313      	orrs	r3, r2
 80038ca:	d03e      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d8:	d022      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80038da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038de:	d81b      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e8:	d00b      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80038ea:	e015      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	3308      	adds	r3, #8
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fd3b 	bl	8004370 <RCCEx_PLL2_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003900:	e00f      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	3328      	adds	r3, #40	@ 0x28
 8003908:	2102      	movs	r1, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fde2 	bl	80044d4 <RCCEx_PLL3_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003916:	e004      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800392a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800393a:	4a47      	ldr	r2, [pc, #284]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003956:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003958:	2300      	movs	r3, #0
 800395a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800395c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003960:	460b      	mov	r3, r1
 8003962:	4313      	orrs	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003972:	d01f      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003974:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003978:	d818      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800397a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800397e:	d003      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003980:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003984:	d007      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003986:	e011      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003988:	4b33      	ldr	r3, [pc, #204]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	4a32      	ldr	r2, [pc, #200]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800398e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003994:	e00f      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399a:	3328      	adds	r3, #40	@ 0x28
 800399c:	2101      	movs	r1, #1
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fd98 	bl	80044d4 <RCCEx_PLL3_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80039aa:	e004      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039b2:	e000      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80039b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	4a22      	ldr	r2, [pc, #136]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80039ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80039ec:	2300      	movs	r3, #0
 80039ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80039f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80039f4:	460b      	mov	r3, r1
 80039f6:	4313      	orrs	r3, r2
 80039f8:	d034      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a08:	d007      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003a0a:	e011      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0c:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	4a11      	ldr	r2, [pc, #68]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a18:	e00e      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	3308      	adds	r3, #8
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fca4 	bl	8004370 <RCCEx_PLL2_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a2e:	e003      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4e:	4a02      	ldr	r2, [pc, #8]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a50:	430b      	orrs	r3, r1
 8003a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003a56:	bf00      	nop
 8003a58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a72:	2300      	movs	r3, #0
 8003a74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d00c      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a84:	3328      	adds	r3, #40	@ 0x28
 8003a86:	2102      	movs	r1, #2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fd23 	bl	80044d4 <RCCEx_PLL3_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003aa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003aac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	d038      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ac2:	d018      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003ac4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ac8:	d811      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ace:	d014      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad4:	d80b      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d011      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ade:	d106      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae0:	4bc3      	ldr	r3, [pc, #780]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	4ac2      	ldr	r2, [pc, #776]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003aec:	e008      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af4:	e004      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b08:	4bb9      	ldr	r3, [pc, #740]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b18:	4ab5      	ldr	r2, [pc, #724]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b1e:	e003      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b36:	2300      	movs	r3, #0
 8003b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4313      	orrs	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b44:	4baa      	ldr	r3, [pc, #680]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b52:	4aa7      	ldr	r2, [pc, #668]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003b64:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b66:	2300      	movs	r3, #0
 8003b68:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4313      	orrs	r3, r2
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b74:	4b9e      	ldr	r3, [pc, #632]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b84:	4a9a      	ldr	r2, [pc, #616]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b86:	430b      	orrs	r3, r1
 8003b88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b98:	2300      	movs	r3, #0
 8003b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d009      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ba6:	4b92      	ldr	r3, [pc, #584]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003baa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb4:	4a8e      	ldr	r2, [pc, #568]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc8:	2300      	movs	r3, #0
 8003bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bcc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bd6:	4b86      	ldr	r3, [pc, #536]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	4a85      	ldr	r2, [pc, #532]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003be0:	6113      	str	r3, [r2, #16]
 8003be2:	4b83      	ldr	r3, [pc, #524]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003be4:	6919      	ldr	r1, [r3, #16]
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003bee:	4a80      	ldr	r2, [pc, #512]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c02:	2300      	movs	r3, #0
 8003c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c10:	4b77      	ldr	r3, [pc, #476]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c14:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1e:	4a74      	ldr	r2, [pc, #464]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c20:	430b      	orrs	r3, r1
 8003c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c32:	2300      	movs	r3, #0
 8003c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c40:	4b6b      	ldr	r3, [pc, #428]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c44:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c50:	4a67      	ldr	r2, [pc, #412]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	2100      	movs	r1, #0
 8003c60:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	d011      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	3308      	adds	r3, #8
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fb78 	bl	8004370 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	6239      	str	r1, [r7, #32]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cac:	460b      	mov	r3, r1
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fb58 	bl	8004370 <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	61b9      	str	r1, [r7, #24]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cec:	460b      	mov	r3, r1
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	d011      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fb38 	bl	8004370 <RCCEx_PLL2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	2100      	movs	r1, #0
 8003d20:	6139      	str	r1, [r7, #16]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	d011      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d36:	3328      	adds	r3, #40	@ 0x28
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fbca 	bl	80044d4 <RCCEx_PLL3_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	d011      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	3328      	adds	r3, #40	@ 0x28
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fbaa 	bl	80044d4 <RCCEx_PLL3_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	2100      	movs	r1, #0
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d011      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	3328      	adds	r3, #40	@ 0x28
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fb8a 	bl	80044d4 <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003dd6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003dea:	46bd      	mov	sp, r7
 8003dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df0:	58024400 	.word	0x58024400

08003df4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003df8:	f7fe fd96 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4904      	ldr	r1, [pc, #16]	@ (8003e1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	08007850 	.word	0x08007850

08003e20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	@ 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e28:	4ba1      	ldr	r3, [pc, #644]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003e32:	4b9f      	ldr	r3, [pc, #636]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	0b1b      	lsrs	r3, r3, #12
 8003e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e3e:	4b9c      	ldr	r3, [pc, #624]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003e4a:	4b99      	ldr	r3, [pc, #612]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	08db      	lsrs	r3, r3, #3
 8003e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8111 	beq.w	8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	f000 8083 	beq.w	8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	f200 80a1 	bhi.w	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d056      	beq.n	8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e8a:	e099      	b.n	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e8c:	4b88      	ldr	r3, [pc, #544]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02d      	beq.n	8003ef4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e98:	4b85      	ldr	r3, [pc, #532]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	08db      	lsrs	r3, r3, #3
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	4a84      	ldr	r2, [pc, #528]	@ (80040b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ed6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ef2:	e087      	b.n	8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f06:	4b6a      	ldr	r3, [pc, #424]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f36:	e065      	b.n	8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80040c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4a:	4b59      	ldr	r3, [pc, #356]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f7a:	e043      	b.n	8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80040c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8e:	4b48      	ldr	r3, [pc, #288]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fa2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fbe:	e021      	b.n	8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80040c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd2:	4b37      	ldr	r3, [pc, #220]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fe6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004002:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004004:	4b2a      	ldr	r3, [pc, #168]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	0a5b      	lsrs	r3, r3, #9
 800400a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800401a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800401e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800402a:	ee17 2a90 	vmov	r2, s15
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004032:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	0c1b      	lsrs	r3, r3, #16
 8004038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004048:	ee37 7a87 	vadd.f32	s14, s15, s14
 800404c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004058:	ee17 2a90 	vmov	r2, s15
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004060:	4b13      	ldr	r3, [pc, #76]	@ (80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	0e1b      	lsrs	r3, r3, #24
 8004066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800407a:	edd7 6a07 	vldr	s13, [r7, #28]
 800407e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004086:	ee17 2a90 	vmov	r2, s15
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800408e:	e008      	b.n	80040a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
}
 80040a2:	bf00      	nop
 80040a4:	3724      	adds	r7, #36	@ 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	58024400 	.word	0x58024400
 80040b4:	03d09000 	.word	0x03d09000
 80040b8:	46000000 	.word	0x46000000
 80040bc:	4c742400 	.word	0x4c742400
 80040c0:	4a742400 	.word	0x4a742400
 80040c4:	4bbebc20 	.word	0x4bbebc20

080040c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	@ 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80040da:	4b9f      	ldr	r3, [pc, #636]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040de:	0d1b      	lsrs	r3, r3, #20
 80040e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80040e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80040f2:	4b99      	ldr	r3, [pc, #612]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8111 	beq.w	8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b02      	cmp	r3, #2
 800411a:	f000 8083 	beq.w	8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b02      	cmp	r3, #2
 8004122:	f200 80a1 	bhi.w	8004268 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d056      	beq.n	80041e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004132:	e099      	b.n	8004268 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004134:	4b88      	ldr	r3, [pc, #544]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02d      	beq.n	800419c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004140:	4b85      	ldr	r3, [pc, #532]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	08db      	lsrs	r3, r3, #3
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	4a84      	ldr	r2, [pc, #528]	@ (800435c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
 8004150:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416a:	4b7b      	ldr	r3, [pc, #492]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417a:	ed97 6a03 	vldr	s12, [r7, #12]
 800417e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800418e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004196:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800419a:	e087      	b.n	80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004364 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80041aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041be:	ed97 6a03 	vldr	s12, [r7, #12]
 80041c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041de:	e065      	b.n	80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f2:	4b59      	ldr	r3, [pc, #356]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004202:	ed97 6a03 	vldr	s12, [r7, #12]
 8004206:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800420a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800421a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004222:	e043      	b.n	80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800436c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004236:	4b48      	ldr	r3, [pc, #288]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004246:	ed97 6a03 	vldr	s12, [r7, #12]
 800424a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800424e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800425a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004266:	e021      	b.n	80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427a:	4b37      	ldr	r3, [pc, #220]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428a:	ed97 6a03 	vldr	s12, [r7, #12]
 800428e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800429e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80042ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	0a5b      	lsrs	r3, r3, #9
 80042b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d2:	ee17 2a90 	vmov	r2, s15
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80042da:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042e4:	ee07 3a90 	vmov	s15, r3
 80042e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80042f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004300:	ee17 2a90 	vmov	r2, s15
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004308:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	0e1b      	lsrs	r3, r3, #24
 800430e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800431e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004322:	edd7 6a07 	vldr	s13, [r7, #28]
 8004326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432e:	ee17 2a90 	vmov	r2, s15
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004336:	e008      	b.n	800434a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
}
 800434a:	bf00      	nop
 800434c:	3724      	adds	r7, #36	@ 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	58024400 	.word	0x58024400
 800435c:	03d09000 	.word	0x03d09000
 8004360:	46000000 	.word	0x46000000
 8004364:	4c742400 	.word	0x4c742400
 8004368:	4a742400 	.word	0x4a742400
 800436c:	4bbebc20 	.word	0x4bbebc20

08004370 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800437e:	4b53      	ldr	r3, [pc, #332]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b03      	cmp	r3, #3
 8004388:	d101      	bne.n	800438e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e099      	b.n	80044c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800438e:	4b4f      	ldr	r3, [pc, #316]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a4e      	ldr	r2, [pc, #312]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004394:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439a:	f7fc ff73 	bl	8001284 <HAL_GetTick>
 800439e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043a0:	e008      	b.n	80043b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043a2:	f7fc ff6f 	bl	8001284 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e086      	b.n	80044c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043b4:	4b45      	ldr	r3, [pc, #276]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043c0:	4b42      	ldr	r3, [pc, #264]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 80043c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	493f      	ldr	r1, [pc, #252]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	3b01      	subs	r3, #1
 80043da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	025b      	lsls	r3, r3, #9
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004404:	4931      	ldr	r1, [pc, #196]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800440a:	4b30      	ldr	r3, [pc, #192]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	492d      	ldr	r1, [pc, #180]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004418:	4313      	orrs	r3, r2
 800441a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800441c:	4b2b      	ldr	r3, [pc, #172]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	f023 0220 	bic.w	r2, r3, #32
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	4928      	ldr	r1, [pc, #160]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800442e:	4b27      	ldr	r3, [pc, #156]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004432:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800443a:	4b24      	ldr	r3, [pc, #144]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 800443c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800443e:	4b24      	ldr	r3, [pc, #144]	@ (80044d0 <RCCEx_PLL2_Config+0x160>)
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	69d2      	ldr	r2, [r2, #28]
 8004446:	00d2      	lsls	r2, r2, #3
 8004448:	4920      	ldr	r1, [pc, #128]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 800444a:	4313      	orrs	r3, r2
 800444c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800444e:	4b1f      	ldr	r3, [pc, #124]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	4a1e      	ldr	r2, [pc, #120]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004454:	f043 0310 	orr.w	r3, r3, #16
 8004458:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004460:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	4a19      	ldr	r2, [pc, #100]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004466:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800446a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800446c:	e00f      	b.n	800448e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d106      	bne.n	8004482 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004474:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004478:	4a14      	ldr	r2, [pc, #80]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800447e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004480:	e005      	b.n	800448e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004482:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	4a11      	ldr	r2, [pc, #68]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004488:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800448c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800448e:	4b0f      	ldr	r3, [pc, #60]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a0e      	ldr	r2, [pc, #56]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 8004494:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449a:	f7fc fef3 	bl	8001284 <HAL_GetTick>
 800449e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044a0:	e008      	b.n	80044b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044a2:	f7fc feef 	bl	8001284 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e006      	b.n	80044c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044b4:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <RCCEx_PLL2_Config+0x15c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	58024400 	.word	0x58024400
 80044d0:	ffff0007 	.word	0xffff0007

080044d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044e2:	4b53      	ldr	r3, [pc, #332]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80044e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d101      	bne.n	80044f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e099      	b.n	8004626 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80044f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fe:	f7fc fec1 	bl	8001284 <HAL_GetTick>
 8004502:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004504:	e008      	b.n	8004518 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004506:	f7fc febd 	bl	8001284 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e086      	b.n	8004626 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004518:	4b45      	ldr	r3, [pc, #276]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004524:	4b42      	ldr	r3, [pc, #264]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	051b      	lsls	r3, r3, #20
 8004532:	493f      	ldr	r1, [pc, #252]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	628b      	str	r3, [r1, #40]	@ 0x28
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	3b01      	subs	r3, #1
 800453e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	3b01      	subs	r3, #1
 8004548:	025b      	lsls	r3, r3, #9
 800454a:	b29b      	uxth	r3, r3
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	3b01      	subs	r3, #1
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004568:	4931      	ldr	r1, [pc, #196]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 800456a:	4313      	orrs	r3, r2
 800456c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800456e:	4b30      	ldr	r3, [pc, #192]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	492d      	ldr	r1, [pc, #180]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004580:	4b2b      	ldr	r3, [pc, #172]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	4928      	ldr	r1, [pc, #160]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004592:	4b27      	ldr	r3, [pc, #156]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	4a26      	ldr	r2, [pc, #152]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 8004598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800459c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800459e:	4b24      	ldr	r3, [pc, #144]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045a2:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <RCCEx_PLL3_Config+0x160>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	69d2      	ldr	r2, [r2, #28]
 80045aa:	00d2      	lsls	r2, r2, #3
 80045ac:	4920      	ldr	r1, [pc, #128]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	4a19      	ldr	r2, [pc, #100]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045d0:	e00f      	b.n	80045f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d106      	bne.n	80045e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045d8:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4a14      	ldr	r2, [pc, #80]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045e4:	e005      	b.n	80045f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045e6:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	4a11      	ldr	r2, [pc, #68]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fe:	f7fc fe41 	bl	8001284 <HAL_GetTick>
 8004602:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004604:	e008      	b.n	8004618 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004606:	f7fc fe3d 	bl	8001284 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e006      	b.n	8004626 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <RCCEx_PLL3_Config+0x15c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	58024400 	.word	0x58024400
 8004634:	ffff0007 	.word	0xffff0007

08004638 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e10f      	b.n	800486a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a87      	ldr	r2, [pc, #540]	@ (8004874 <HAL_SPI_Init+0x23c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00f      	beq.n	800467a <HAL_SPI_Init+0x42>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a86      	ldr	r2, [pc, #536]	@ (8004878 <HAL_SPI_Init+0x240>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00a      	beq.n	800467a <HAL_SPI_Init+0x42>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a84      	ldr	r2, [pc, #528]	@ (800487c <HAL_SPI_Init+0x244>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d005      	beq.n	800467a <HAL_SPI_Init+0x42>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	d901      	bls.n	800467a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0f7      	b.n	800486a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fe2e 	bl	80052dc <SPI_GetPacketSize>
 8004680:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a7b      	ldr	r2, [pc, #492]	@ (8004874 <HAL_SPI_Init+0x23c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00c      	beq.n	80046a6 <HAL_SPI_Init+0x6e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a79      	ldr	r2, [pc, #484]	@ (8004878 <HAL_SPI_Init+0x240>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_SPI_Init+0x6e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a78      	ldr	r2, [pc, #480]	@ (800487c <HAL_SPI_Init+0x244>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d002      	beq.n	80046a6 <HAL_SPI_Init+0x6e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d811      	bhi.n	80046ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80046aa:	4a72      	ldr	r2, [pc, #456]	@ (8004874 <HAL_SPI_Init+0x23c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a70      	ldr	r2, [pc, #448]	@ (8004878 <HAL_SPI_Init+0x240>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_SPI_Init+0x8c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a6f      	ldr	r2, [pc, #444]	@ (800487c <HAL_SPI_Init+0x244>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d104      	bne.n	80046ce <HAL_SPI_Init+0x96>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d901      	bls.n	80046ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e0cd      	b.n	800486a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fb0a 	bl	8000cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800470a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004714:	d119      	bne.n	800474a <HAL_SPI_Init+0x112>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800471e:	d103      	bne.n	8004728 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10c      	bne.n	800474a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004738:	d107      	bne.n	800474a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004748:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00f      	beq.n	8004776 <HAL_SPI_Init+0x13e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b06      	cmp	r3, #6
 800475c:	d90b      	bls.n	8004776 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e007      	b.n	8004786 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004784:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	431a      	orrs	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	ea42 0103 	orr.w	r1, r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e6:	ea42 0103 	orr.w	r1, r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d113      	bne.n	8004826 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004810:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004824:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40013000 	.word	0x40013000
 8004878:	40003800 	.word	0x40003800
 800487c:	40003c00 	.word	0x40003c00

08004880 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3320      	adds	r3, #32
 8004896:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004898:	f7fc fcf4 	bl	8001284 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d001      	beq.n	80048ae <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
 80048ac:	e1d1      	b.n	8004c52 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_Transmit+0x3a>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e1c9      	b.n	8004c52 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_SPI_Transmit+0x4c>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e1c2      	b.n	8004c52 <HAL_SPI_Transmit+0x3d2>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2203      	movs	r2, #3
 80048d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004924:	d108      	bne.n	8004938 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e009      	b.n	800494c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800494a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	4b96      	ldr	r3, [pc, #600]	@ (8004bac <HAL_SPI_Transmit+0x32c>)
 8004954:	4013      	ands	r3, r2
 8004956:	88f9      	ldrh	r1, [r7, #6]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	430b      	orrs	r3, r1
 800495e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004978:	d107      	bne.n	800498a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004988:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b0f      	cmp	r3, #15
 8004990:	d947      	bls.n	8004a22 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004992:	e03f      	b.n	8004a14 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d114      	bne.n	80049cc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80049ca:	e023      	b.n	8004a14 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049cc:	f7fc fc5a 	bl	8001284 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d803      	bhi.n	80049e4 <HAL_SPI_Transmit+0x164>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_Transmit+0x16a>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d114      	bne.n	8004a14 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fba8 	bl	8005140 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e11e      	b.n	8004c52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1b9      	bne.n	8004994 <HAL_SPI_Transmit+0x114>
 8004a20:	e0f1      	b.n	8004c06 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b07      	cmp	r3, #7
 8004a28:	f240 80e6 	bls.w	8004bf8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004a2c:	e05d      	b.n	8004aea <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d132      	bne.n	8004aa2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d918      	bls.n	8004a7a <HAL_SPI_Transmit+0x1fa>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d014      	beq.n	8004a7a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b02      	subs	r3, #2
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004a78:	e037      	b.n	8004aea <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a88:	1c9a      	adds	r2, r3, #2
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004aa0:	e023      	b.n	8004aea <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa2:	f7fc fbef 	bl	8001284 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d803      	bhi.n	8004aba <HAL_SPI_Transmit+0x23a>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d102      	bne.n	8004ac0 <HAL_SPI_Transmit+0x240>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d114      	bne.n	8004aea <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fb3d 	bl	8005140 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004acc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e0b3      	b.n	8004c52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d19b      	bne.n	8004a2e <HAL_SPI_Transmit+0x1ae>
 8004af6:	e086      	b.n	8004c06 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d154      	bne.n	8004bb0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d918      	bls.n	8004b44 <HAL_SPI_Transmit+0x2c4>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b16:	2b40      	cmp	r3, #64	@ 0x40
 8004b18:	d914      	bls.n	8004b44 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b04      	subs	r3, #4
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b42:	e059      	b.n	8004bf8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d917      	bls.n	8004b80 <HAL_SPI_Transmit+0x300>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5c:	881a      	ldrh	r2, [r3, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b66:	1c9a      	adds	r2, r3, #2
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b02      	subs	r3, #2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b7e:	e03b      	b.n	8004bf8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3320      	adds	r3, #32
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004baa:	e025      	b.n	8004bf8 <HAL_SPI_Transmit+0x378>
 8004bac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb0:	f7fc fb68 	bl	8001284 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d803      	bhi.n	8004bc8 <HAL_SPI_Transmit+0x348>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d102      	bne.n	8004bce <HAL_SPI_Transmit+0x34e>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d114      	bne.n	8004bf8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fab6 	bl	8005140 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e02c      	b.n	8004c52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f47f af79 	bne.w	8004af8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2108      	movs	r1, #8
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fb35 	bl	8005280 <SPI_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fa87 	bl	8005140 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004c50:	2300      	movs	r3, #0
  }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop

08004c5c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3330      	adds	r3, #48	@ 0x30
 8004c7e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c80:	f7fc fb00 	bl	8001284 <HAL_GetTick>
 8004c84:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d001      	beq.n	8004c96 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
 8004c94:	e250      	b.n	8005138 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_Receive+0x46>
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e248      	b.n	8005138 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_SPI_Receive+0x58>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e241      	b.n	8005138 <HAL_SPI_Receive+0x4dc>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	88fa      	ldrh	r2, [r7, #6]
 8004cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004d0c:	d108      	bne.n	8004d20 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e009      	b.n	8004d34 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004d32:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4b95      	ldr	r3, [pc, #596]	@ (8004f90 <HAL_SPI_Receive+0x334>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	88f9      	ldrh	r1, [r7, #6]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d60:	d107      	bne.n	8004d72 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	d96c      	bls.n	8004e54 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004d7a:	e064      	b.n	8004e46 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d114      	bne.n	8004dbc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004da2:	1d1a      	adds	r2, r3, #4
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004dba:	e044      	b.n	8004e46 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8bfa      	ldrh	r2, [r7, #30]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d919      	bls.n	8004dfe <HAL_SPI_Receive+0x1a2>
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d014      	beq.n	8004dfe <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ddc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dde:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004de4:	1d1a      	adds	r2, r3, #4
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004dfc:	e023      	b.n	8004e46 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dfe:	f7fc fa41 	bl	8001284 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d803      	bhi.n	8004e16 <HAL_SPI_Receive+0x1ba>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d102      	bne.n	8004e1c <HAL_SPI_Receive+0x1c0>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d114      	bne.n	8004e46 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f98f 	bl	8005140 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e178      	b.n	8005138 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d194      	bne.n	8004d7c <HAL_SPI_Receive+0x120>
 8004e52:	e15e      	b.n	8005112 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	2b07      	cmp	r3, #7
 8004e5a:	f240 8153 	bls.w	8005104 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004e5e:	e08f      	b.n	8004f80 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d114      	bne.n	8004ea0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	8812      	ldrh	r2, [r2, #0]
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e86:	1c9a      	adds	r2, r3, #2
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004e9e:	e06f      	b.n	8004f80 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	8bfa      	ldrh	r2, [r7, #30]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d924      	bls.n	8004ef8 <HAL_SPI_Receive+0x29c>
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01f      	beq.n	8004ef8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	8812      	ldrh	r2, [r2, #0]
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ec8:	1c9a      	adds	r2, r3, #2
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	8812      	ldrh	r2, [r2, #0]
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ede:	1c9a      	adds	r2, r3, #2
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b02      	subs	r3, #2
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004ef6:	e043      	b.n	8004f80 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d119      	bne.n	8004f38 <HAL_SPI_Receive+0x2dc>
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	8812      	ldrh	r2, [r2, #0]
 8004f16:	b292      	uxth	r2, r2
 8004f18:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f1e:	1c9a      	adds	r2, r3, #2
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004f36:	e023      	b.n	8004f80 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f38:	f7fc f9a4 	bl	8001284 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d803      	bhi.n	8004f50 <HAL_SPI_Receive+0x2f4>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d102      	bne.n	8004f56 <HAL_SPI_Receive+0x2fa>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d114      	bne.n	8004f80 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f8f2 	bl	8005140 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0db      	b.n	8005138 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f47f af69 	bne.w	8004e60 <HAL_SPI_Receive+0x204>
 8004f8e:	e0c0      	b.n	8005112 <HAL_SPI_Receive+0x4b6>
 8004f90:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d117      	bne.n	8004fda <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fb6:	7812      	ldrb	r2, [r2, #0]
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004fd8:	e094      	b.n	8005104 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8bfa      	ldrh	r2, [r7, #30]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d946      	bls.n	8005076 <HAL_SPI_Receive+0x41a>
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d041      	beq.n	8005076 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ffe:	7812      	ldrb	r2, [r2, #0]
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005036:	7812      	ldrb	r2, [r2, #0]
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005052:	7812      	ldrb	r2, [r2, #0]
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b04      	subs	r3, #4
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005074:	e046      	b.n	8005104 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b03      	cmp	r3, #3
 8005080:	d81c      	bhi.n	80050bc <HAL_SPI_Receive+0x460>
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80050ba:	e023      	b.n	8005104 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050bc:	f7fc f8e2 	bl	8001284 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d803      	bhi.n	80050d4 <HAL_SPI_Receive+0x478>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d102      	bne.n	80050da <HAL_SPI_Receive+0x47e>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d114      	bne.n	8005104 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f830 	bl	8005140 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e019      	b.n	8005138 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f af41 	bne.w	8004f94 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f814 	bl	8005140 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005136:	2300      	movs	r3, #0
  }
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0208 	orr.w	r2, r2, #8
 800515e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0210 	orr.w	r2, r2, #16
 800516e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6919      	ldr	r1, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b3c      	ldr	r3, [pc, #240]	@ (800527c <SPI_CloseTransfer+0x13c>)
 800518c:	400b      	ands	r3, r1
 800518e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800519e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d014      	beq.n	80051d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00f      	beq.n	80051d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0220 	orr.w	r2, r2, #32
 80051d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d014      	beq.n	800520c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00f      	beq.n	800520c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051f2:	f043 0204 	orr.w	r2, r3, #4
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800520a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00f      	beq.n	8005236 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800521c:	f043 0201 	orr.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005234:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00f      	beq.n	8005260 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005246:	f043 0208 	orr.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800525e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	fffffc90 	.word	0xfffffc90

08005280 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	4613      	mov	r3, r2
 800528e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005290:	e010      	b.n	80052b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005292:	f7fb fff7 	bl	8001284 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d803      	bhi.n	80052aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d102      	bne.n	80052b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e00f      	b.n	80052d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695a      	ldr	r2, [r3, #20]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d0df      	beq.n	8005292 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	3307      	adds	r3, #7
 80052fa:	08db      	lsrs	r3, r3, #3
 80052fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	fb02 f303 	mul.w	r3, r2, r3
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e049      	b.n	80053b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fb fd6d 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f000 fa5d 	bl	8005810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d020      	beq.n	8005424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01b      	beq.n	8005424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0202 	mvn.w	r2, #2
 80053f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9e2 	bl	80057d4 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9d4 	bl	80057c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f9e5 	bl	80057e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d020      	beq.n	8005470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01b      	beq.n	8005470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0204 	mvn.w	r2, #4
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f9bc 	bl	80057d4 <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9ae 	bl	80057c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f9bf 	bl	80057e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d020      	beq.n	80054bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01b      	beq.n	80054bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0208 	mvn.w	r2, #8
 800548c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2204      	movs	r2, #4
 8005492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f996 	bl	80057d4 <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f988 	bl	80057c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f999 	bl	80057e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0210 	mvn.w	r2, #16
 80054d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2208      	movs	r2, #8
 80054de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f970 	bl	80057d4 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f962 	bl	80057c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f973 	bl	80057e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0201 	mvn.w	r2, #1
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fb86 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb37 	bl	8005bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00c      	beq.n	800557e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fb2f 	bl	8005bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00c      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800559a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f92d 	bl	80057fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00c      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f06f 0220 	mvn.w	r2, #32
 80055be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 faf7 	bl	8005bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_ConfigClockSource+0x1c>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0dc      	b.n	80057a6 <HAL_TIM_ConfigClockSource+0x1d6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	4b6a      	ldr	r3, [pc, #424]	@ (80057b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005608:	4013      	ands	r3, r2
 800560a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a64      	ldr	r2, [pc, #400]	@ (80057b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	f000 80a9 	beq.w	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 8005628:	4a62      	ldr	r2, [pc, #392]	@ (80057b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	f200 80ae 	bhi.w	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 8005630:	4a61      	ldr	r2, [pc, #388]	@ (80057b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	f000 80a1 	beq.w	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 8005638:	4a5f      	ldr	r2, [pc, #380]	@ (80057b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	f200 80a6 	bhi.w	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 8005640:	4a5e      	ldr	r2, [pc, #376]	@ (80057bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f000 8099 	beq.w	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 8005648:	4a5c      	ldr	r2, [pc, #368]	@ (80057bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800564a:	4293      	cmp	r3, r2
 800564c:	f200 809e 	bhi.w	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 8005650:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005654:	f000 8091 	beq.w	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 8005658:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800565c:	f200 8096 	bhi.w	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 8005660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005664:	f000 8089 	beq.w	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 8005668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800566c:	f200 808e 	bhi.w	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 8005670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005674:	d03e      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x124>
 8005676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800567a:	f200 8087 	bhi.w	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005682:	f000 8086 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1c2>
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800568a:	d87f      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 800568c:	2b70      	cmp	r3, #112	@ 0x70
 800568e:	d01a      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0xf6>
 8005690:	2b70      	cmp	r3, #112	@ 0x70
 8005692:	d87b      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 8005694:	2b60      	cmp	r3, #96	@ 0x60
 8005696:	d050      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x16a>
 8005698:	2b60      	cmp	r3, #96	@ 0x60
 800569a:	d877      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 800569c:	2b50      	cmp	r3, #80	@ 0x50
 800569e:	d03c      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x14a>
 80056a0:	2b50      	cmp	r3, #80	@ 0x50
 80056a2:	d873      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 80056a4:	2b40      	cmp	r3, #64	@ 0x40
 80056a6:	d058      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x18a>
 80056a8:	2b40      	cmp	r3, #64	@ 0x40
 80056aa:	d86f      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 80056ac:	2b30      	cmp	r3, #48	@ 0x30
 80056ae:	d064      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 80056b0:	2b30      	cmp	r3, #48	@ 0x30
 80056b2:	d86b      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d060      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d867      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x1bc>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d05c      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d05a      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x1aa>
 80056c4:	e062      	b.n	800578c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056d6:	f000 f9bf 	bl	8005a58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	609a      	str	r2, [r3, #8]
      break;
 80056f2:	e04f      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005704:	f000 f9a8 	bl	8005a58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005716:	609a      	str	r2, [r3, #8]
      break;
 8005718:	e03c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005726:	461a      	mov	r2, r3
 8005728:	f000 f918 	bl	800595c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2150      	movs	r1, #80	@ 0x50
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f972 	bl	8005a1c <TIM_ITRx_SetConfig>
      break;
 8005738:	e02c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005746:	461a      	mov	r2, r3
 8005748:	f000 f937 	bl	80059ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2160      	movs	r1, #96	@ 0x60
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f962 	bl	8005a1c <TIM_ITRx_SetConfig>
      break;
 8005758:	e01c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005766:	461a      	mov	r2, r3
 8005768:	f000 f8f8 	bl	800595c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2140      	movs	r1, #64	@ 0x40
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f952 	bl	8005a1c <TIM_ITRx_SetConfig>
      break;
 8005778:	e00c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f000 f949 	bl	8005a1c <TIM_ITRx_SetConfig>
      break;
 800578a:	e003      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e000      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	ffceff88 	.word	0xffceff88
 80057b4:	00100040 	.word	0x00100040
 80057b8:	00100030 	.word	0x00100030
 80057bc:	00100020 	.word	0x00100020

080057c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a46      	ldr	r2, [pc, #280]	@ (800593c <TIM_Base_SetConfig+0x12c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582e:	d00f      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a43      	ldr	r2, [pc, #268]	@ (8005940 <TIM_Base_SetConfig+0x130>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a42      	ldr	r2, [pc, #264]	@ (8005944 <TIM_Base_SetConfig+0x134>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a41      	ldr	r2, [pc, #260]	@ (8005948 <TIM_Base_SetConfig+0x138>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a40      	ldr	r2, [pc, #256]	@ (800594c <TIM_Base_SetConfig+0x13c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d108      	bne.n	8005862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a35      	ldr	r2, [pc, #212]	@ (800593c <TIM_Base_SetConfig+0x12c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01f      	beq.n	80058aa <TIM_Base_SetConfig+0x9a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005870:	d01b      	beq.n	80058aa <TIM_Base_SetConfig+0x9a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a32      	ldr	r2, [pc, #200]	@ (8005940 <TIM_Base_SetConfig+0x130>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d017      	beq.n	80058aa <TIM_Base_SetConfig+0x9a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a31      	ldr	r2, [pc, #196]	@ (8005944 <TIM_Base_SetConfig+0x134>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <TIM_Base_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a30      	ldr	r2, [pc, #192]	@ (8005948 <TIM_Base_SetConfig+0x138>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00f      	beq.n	80058aa <TIM_Base_SetConfig+0x9a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2f      	ldr	r2, [pc, #188]	@ (800594c <TIM_Base_SetConfig+0x13c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00b      	beq.n	80058aa <TIM_Base_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2e      	ldr	r2, [pc, #184]	@ (8005950 <TIM_Base_SetConfig+0x140>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d007      	beq.n	80058aa <TIM_Base_SetConfig+0x9a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2d      	ldr	r2, [pc, #180]	@ (8005954 <TIM_Base_SetConfig+0x144>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_Base_SetConfig+0x9a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005958 <TIM_Base_SetConfig+0x148>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d108      	bne.n	80058bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a16      	ldr	r2, [pc, #88]	@ (800593c <TIM_Base_SetConfig+0x12c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00f      	beq.n	8005908 <TIM_Base_SetConfig+0xf8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a18      	ldr	r2, [pc, #96]	@ (800594c <TIM_Base_SetConfig+0x13c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00b      	beq.n	8005908 <TIM_Base_SetConfig+0xf8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a17      	ldr	r2, [pc, #92]	@ (8005950 <TIM_Base_SetConfig+0x140>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d007      	beq.n	8005908 <TIM_Base_SetConfig+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a16      	ldr	r2, [pc, #88]	@ (8005954 <TIM_Base_SetConfig+0x144>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_Base_SetConfig+0xf8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a15      	ldr	r2, [pc, #84]	@ (8005958 <TIM_Base_SetConfig+0x148>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d103      	bne.n	8005910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d105      	bne.n	800592e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	611a      	str	r2, [r3, #16]
  }
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40010400 	.word	0x40010400
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800

0800595c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f023 0201 	bic.w	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f023 030a 	bic.w	r3, r3, #10
 8005998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0210 	bic.w	r2, r3, #16
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
	...

08005a1c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <TIM_ITRx_SetConfig+0x38>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f043 0307 	orr.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	609a      	str	r2, [r3, #8]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	ffcfff8f 	.word	0xffcfff8f

08005a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	021a      	lsls	r2, r3, #8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	609a      	str	r2, [r3, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e06d      	b.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a30      	ldr	r2, [pc, #192]	@ (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2f      	ldr	r2, [pc, #188]	@ (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d108      	bne.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005aea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005afc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a20      	ldr	r2, [pc, #128]	@ (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d022      	beq.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b22:	d01d      	beq.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d018      	beq.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d013      	beq.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00e      	beq.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a15      	ldr	r2, [pc, #84]	@ (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10c      	bne.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40010400 	.word	0x40010400
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40000c00 	.word	0x40000c00
 8005bac:	40001800 	.word	0x40001800
 8005bb0:	40014000 	.word	0x40014000

08005bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e042      	b.n	8005c88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fb f925 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2224      	movs	r2, #36	@ 0x24
 8005c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fe1e 	bl	800687c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f8b3 	bl	8005dac <UART_SetConfig>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e01b      	b.n	8005c88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fe9d 	bl	80069c0 <UART_CheckIdleState>
 8005c86:	4603      	mov	r3, r0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	@ 0x28
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d17b      	bne.n	8005da2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_UART_Transmit+0x26>
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e074      	b.n	8005da4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2221      	movs	r2, #33	@ 0x21
 8005cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cca:	f7fb fadb 	bl	8001284 <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	88fa      	ldrh	r2, [r7, #6]
 8005cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	88fa      	ldrh	r2, [r7, #6]
 8005cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce8:	d108      	bne.n	8005cfc <HAL_UART_Transmit+0x6c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	e003      	b.n	8005d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d04:	e030      	b.n	8005d68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2180      	movs	r1, #128	@ 0x80
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 feff 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e03d      	b.n	8005da4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	3302      	adds	r3, #2
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	e007      	b.n	8005d56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	781a      	ldrb	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	3301      	adds	r3, #1
 8005d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1c8      	bne.n	8005d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2140      	movs	r1, #64	@ 0x40
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fec8 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e006      	b.n	8005da4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db0:	b092      	sub	sp, #72	@ 0x48
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4bbe      	ldr	r3, [pc, #760]	@ (80060d4 <UART_SetConfig+0x328>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4ab3      	ldr	r2, [pc, #716]	@ (80060d8 <UART_SetConfig+0x32c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e14:	4313      	orrs	r3, r2
 8005e16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	4baf      	ldr	r3, [pc, #700]	@ (80060dc <UART_SetConfig+0x330>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	f023 010f 	bic.w	r1, r3, #15
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4aa6      	ldr	r2, [pc, #664]	@ (80060e0 <UART_SetConfig+0x334>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d177      	bne.n	8005f3c <UART_SetConfig+0x190>
 8005e4c:	4ba5      	ldr	r3, [pc, #660]	@ (80060e4 <UART_SetConfig+0x338>)
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e54:	2b28      	cmp	r3, #40	@ 0x28
 8005e56:	d86d      	bhi.n	8005f34 <UART_SetConfig+0x188>
 8005e58:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0xb4>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005f05 	.word	0x08005f05
 8005e64:	08005f35 	.word	0x08005f35
 8005e68:	08005f35 	.word	0x08005f35
 8005e6c:	08005f35 	.word	0x08005f35
 8005e70:	08005f35 	.word	0x08005f35
 8005e74:	08005f35 	.word	0x08005f35
 8005e78:	08005f35 	.word	0x08005f35
 8005e7c:	08005f35 	.word	0x08005f35
 8005e80:	08005f0d 	.word	0x08005f0d
 8005e84:	08005f35 	.word	0x08005f35
 8005e88:	08005f35 	.word	0x08005f35
 8005e8c:	08005f35 	.word	0x08005f35
 8005e90:	08005f35 	.word	0x08005f35
 8005e94:	08005f35 	.word	0x08005f35
 8005e98:	08005f35 	.word	0x08005f35
 8005e9c:	08005f35 	.word	0x08005f35
 8005ea0:	08005f15 	.word	0x08005f15
 8005ea4:	08005f35 	.word	0x08005f35
 8005ea8:	08005f35 	.word	0x08005f35
 8005eac:	08005f35 	.word	0x08005f35
 8005eb0:	08005f35 	.word	0x08005f35
 8005eb4:	08005f35 	.word	0x08005f35
 8005eb8:	08005f35 	.word	0x08005f35
 8005ebc:	08005f35 	.word	0x08005f35
 8005ec0:	08005f1d 	.word	0x08005f1d
 8005ec4:	08005f35 	.word	0x08005f35
 8005ec8:	08005f35 	.word	0x08005f35
 8005ecc:	08005f35 	.word	0x08005f35
 8005ed0:	08005f35 	.word	0x08005f35
 8005ed4:	08005f35 	.word	0x08005f35
 8005ed8:	08005f35 	.word	0x08005f35
 8005edc:	08005f35 	.word	0x08005f35
 8005ee0:	08005f25 	.word	0x08005f25
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	08005f35 	.word	0x08005f35
 8005eec:	08005f35 	.word	0x08005f35
 8005ef0:	08005f35 	.word	0x08005f35
 8005ef4:	08005f35 	.word	0x08005f35
 8005ef8:	08005f35 	.word	0x08005f35
 8005efc:	08005f35 	.word	0x08005f35
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e222      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e21e      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f14:	2308      	movs	r3, #8
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e21a      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e216      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f24:	2320      	movs	r3, #32
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e212      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f2c:	2340      	movs	r3, #64	@ 0x40
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e20e      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f34:	2380      	movs	r3, #128	@ 0x80
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e20a      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a69      	ldr	r2, [pc, #420]	@ (80060e8 <UART_SetConfig+0x33c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d130      	bne.n	8005fa8 <UART_SetConfig+0x1fc>
 8005f46:	4b67      	ldr	r3, [pc, #412]	@ (80060e4 <UART_SetConfig+0x338>)
 8005f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d826      	bhi.n	8005fa0 <UART_SetConfig+0x1f4>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <UART_SetConfig+0x1ac>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f71 	.word	0x08005f71
 8005f5c:	08005f79 	.word	0x08005f79
 8005f60:	08005f81 	.word	0x08005f81
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f91 	.word	0x08005f91
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e1ec      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e1e8      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e1e4      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e1e0      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f90:	2320      	movs	r3, #32
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e1dc      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005f98:	2340      	movs	r3, #64	@ 0x40
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e1d8      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e1d4      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a4f      	ldr	r2, [pc, #316]	@ (80060ec <UART_SetConfig+0x340>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d130      	bne.n	8006014 <UART_SetConfig+0x268>
 8005fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80060e4 <UART_SetConfig+0x338>)
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d826      	bhi.n	800600c <UART_SetConfig+0x260>
 8005fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc4 <UART_SetConfig+0x218>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fdd 	.word	0x08005fdd
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08005fed 	.word	0x08005fed
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e1b6      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e1b2      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005fec:	2308      	movs	r3, #8
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e1ae      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e1aa      	b.n	8006352 <UART_SetConfig+0x5a6>
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e1a6      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006004:	2340      	movs	r3, #64	@ 0x40
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e1a2      	b.n	8006352 <UART_SetConfig+0x5a6>
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e19e      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a35      	ldr	r2, [pc, #212]	@ (80060f0 <UART_SetConfig+0x344>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d130      	bne.n	8006080 <UART_SetConfig+0x2d4>
 800601e:	4b31      	ldr	r3, [pc, #196]	@ (80060e4 <UART_SetConfig+0x338>)
 8006020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b05      	cmp	r3, #5
 8006028:	d826      	bhi.n	8006078 <UART_SetConfig+0x2cc>
 800602a:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <UART_SetConfig+0x284>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006049 	.word	0x08006049
 8006034:	08006051 	.word	0x08006051
 8006038:	08006059 	.word	0x08006059
 800603c:	08006061 	.word	0x08006061
 8006040:	08006069 	.word	0x08006069
 8006044:	08006071 	.word	0x08006071
 8006048:	2300      	movs	r3, #0
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e180      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e17c      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e178      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e174      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006068:	2320      	movs	r3, #32
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e170      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006070:	2340      	movs	r3, #64	@ 0x40
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e16c      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006078:	2380      	movs	r3, #128	@ 0x80
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e168      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1b      	ldr	r2, [pc, #108]	@ (80060f4 <UART_SetConfig+0x348>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d142      	bne.n	8006110 <UART_SetConfig+0x364>
 800608a:	4b16      	ldr	r3, [pc, #88]	@ (80060e4 <UART_SetConfig+0x338>)
 800608c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b05      	cmp	r3, #5
 8006094:	d838      	bhi.n	8006108 <UART_SetConfig+0x35c>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <UART_SetConfig+0x2f0>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060f9 	.word	0x080060f9
 80060b0:	08006101 	.word	0x08006101
 80060b4:	2300      	movs	r3, #0
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ba:	e14a      	b.n	8006352 <UART_SetConfig+0x5a6>
 80060bc:	2304      	movs	r3, #4
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e146      	b.n	8006352 <UART_SetConfig+0x5a6>
 80060c4:	2308      	movs	r3, #8
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e142      	b.n	8006352 <UART_SetConfig+0x5a6>
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e13e      	b.n	8006352 <UART_SetConfig+0x5a6>
 80060d4:	cfff69f3 	.word	0xcfff69f3
 80060d8:	58000c00 	.word	0x58000c00
 80060dc:	11fff4ff 	.word	0x11fff4ff
 80060e0:	40011000 	.word	0x40011000
 80060e4:	58024400 	.word	0x58024400
 80060e8:	40004400 	.word	0x40004400
 80060ec:	40004800 	.word	0x40004800
 80060f0:	40004c00 	.word	0x40004c00
 80060f4:	40005000 	.word	0x40005000
 80060f8:	2320      	movs	r3, #32
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fe:	e128      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006100:	2340      	movs	r3, #64	@ 0x40
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e124      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e120      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4acb      	ldr	r2, [pc, #812]	@ (8006444 <UART_SetConfig+0x698>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d176      	bne.n	8006208 <UART_SetConfig+0x45c>
 800611a:	4bcb      	ldr	r3, [pc, #812]	@ (8006448 <UART_SetConfig+0x69c>)
 800611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006122:	2b28      	cmp	r3, #40	@ 0x28
 8006124:	d86c      	bhi.n	8006200 <UART_SetConfig+0x454>
 8006126:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <UART_SetConfig+0x380>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	080061d1 	.word	0x080061d1
 8006130:	08006201 	.word	0x08006201
 8006134:	08006201 	.word	0x08006201
 8006138:	08006201 	.word	0x08006201
 800613c:	08006201 	.word	0x08006201
 8006140:	08006201 	.word	0x08006201
 8006144:	08006201 	.word	0x08006201
 8006148:	08006201 	.word	0x08006201
 800614c:	080061d9 	.word	0x080061d9
 8006150:	08006201 	.word	0x08006201
 8006154:	08006201 	.word	0x08006201
 8006158:	08006201 	.word	0x08006201
 800615c:	08006201 	.word	0x08006201
 8006160:	08006201 	.word	0x08006201
 8006164:	08006201 	.word	0x08006201
 8006168:	08006201 	.word	0x08006201
 800616c:	080061e1 	.word	0x080061e1
 8006170:	08006201 	.word	0x08006201
 8006174:	08006201 	.word	0x08006201
 8006178:	08006201 	.word	0x08006201
 800617c:	08006201 	.word	0x08006201
 8006180:	08006201 	.word	0x08006201
 8006184:	08006201 	.word	0x08006201
 8006188:	08006201 	.word	0x08006201
 800618c:	080061e9 	.word	0x080061e9
 8006190:	08006201 	.word	0x08006201
 8006194:	08006201 	.word	0x08006201
 8006198:	08006201 	.word	0x08006201
 800619c:	08006201 	.word	0x08006201
 80061a0:	08006201 	.word	0x08006201
 80061a4:	08006201 	.word	0x08006201
 80061a8:	08006201 	.word	0x08006201
 80061ac:	080061f1 	.word	0x080061f1
 80061b0:	08006201 	.word	0x08006201
 80061b4:	08006201 	.word	0x08006201
 80061b8:	08006201 	.word	0x08006201
 80061bc:	08006201 	.word	0x08006201
 80061c0:	08006201 	.word	0x08006201
 80061c4:	08006201 	.word	0x08006201
 80061c8:	08006201 	.word	0x08006201
 80061cc:	080061f9 	.word	0x080061f9
 80061d0:	2301      	movs	r3, #1
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d6:	e0bc      	b.n	8006352 <UART_SetConfig+0x5a6>
 80061d8:	2304      	movs	r3, #4
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061de:	e0b8      	b.n	8006352 <UART_SetConfig+0x5a6>
 80061e0:	2308      	movs	r3, #8
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e6:	e0b4      	b.n	8006352 <UART_SetConfig+0x5a6>
 80061e8:	2310      	movs	r3, #16
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e0b0      	b.n	8006352 <UART_SetConfig+0x5a6>
 80061f0:	2320      	movs	r3, #32
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e0ac      	b.n	8006352 <UART_SetConfig+0x5a6>
 80061f8:	2340      	movs	r3, #64	@ 0x40
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e0a8      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006200:	2380      	movs	r3, #128	@ 0x80
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e0a4      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a8f      	ldr	r2, [pc, #572]	@ (800644c <UART_SetConfig+0x6a0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d130      	bne.n	8006274 <UART_SetConfig+0x4c8>
 8006212:	4b8d      	ldr	r3, [pc, #564]	@ (8006448 <UART_SetConfig+0x69c>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	2b05      	cmp	r3, #5
 800621c:	d826      	bhi.n	800626c <UART_SetConfig+0x4c0>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <UART_SetConfig+0x478>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	0800623d 	.word	0x0800623d
 8006228:	08006245 	.word	0x08006245
 800622c:	0800624d 	.word	0x0800624d
 8006230:	08006255 	.word	0x08006255
 8006234:	0800625d 	.word	0x0800625d
 8006238:	08006265 	.word	0x08006265
 800623c:	2300      	movs	r3, #0
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006242:	e086      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006244:	2304      	movs	r3, #4
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e082      	b.n	8006352 <UART_SetConfig+0x5a6>
 800624c:	2308      	movs	r3, #8
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e07e      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006254:	2310      	movs	r3, #16
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e07a      	b.n	8006352 <UART_SetConfig+0x5a6>
 800625c:	2320      	movs	r3, #32
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e076      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006264:	2340      	movs	r3, #64	@ 0x40
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e072      	b.n	8006352 <UART_SetConfig+0x5a6>
 800626c:	2380      	movs	r3, #128	@ 0x80
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e06e      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a75      	ldr	r2, [pc, #468]	@ (8006450 <UART_SetConfig+0x6a4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d130      	bne.n	80062e0 <UART_SetConfig+0x534>
 800627e:	4b72      	ldr	r3, [pc, #456]	@ (8006448 <UART_SetConfig+0x69c>)
 8006280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	2b05      	cmp	r3, #5
 8006288:	d826      	bhi.n	80062d8 <UART_SetConfig+0x52c>
 800628a:	a201      	add	r2, pc, #4	@ (adr r2, 8006290 <UART_SetConfig+0x4e4>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062a9 	.word	0x080062a9
 8006294:	080062b1 	.word	0x080062b1
 8006298:	080062b9 	.word	0x080062b9
 800629c:	080062c1 	.word	0x080062c1
 80062a0:	080062c9 	.word	0x080062c9
 80062a4:	080062d1 	.word	0x080062d1
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ae:	e050      	b.n	8006352 <UART_SetConfig+0x5a6>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e04c      	b.n	8006352 <UART_SetConfig+0x5a6>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e048      	b.n	8006352 <UART_SetConfig+0x5a6>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e044      	b.n	8006352 <UART_SetConfig+0x5a6>
 80062c8:	2320      	movs	r3, #32
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e040      	b.n	8006352 <UART_SetConfig+0x5a6>
 80062d0:	2340      	movs	r3, #64	@ 0x40
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e03c      	b.n	8006352 <UART_SetConfig+0x5a6>
 80062d8:	2380      	movs	r3, #128	@ 0x80
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e038      	b.n	8006352 <UART_SetConfig+0x5a6>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a5b      	ldr	r2, [pc, #364]	@ (8006454 <UART_SetConfig+0x6a8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d130      	bne.n	800634c <UART_SetConfig+0x5a0>
 80062ea:	4b57      	ldr	r3, [pc, #348]	@ (8006448 <UART_SetConfig+0x69c>)
 80062ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	2b05      	cmp	r3, #5
 80062f4:	d826      	bhi.n	8006344 <UART_SetConfig+0x598>
 80062f6:	a201      	add	r2, pc, #4	@ (adr r2, 80062fc <UART_SetConfig+0x550>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	08006315 	.word	0x08006315
 8006300:	0800631d 	.word	0x0800631d
 8006304:	08006325 	.word	0x08006325
 8006308:	0800632d 	.word	0x0800632d
 800630c:	08006335 	.word	0x08006335
 8006310:	0800633d 	.word	0x0800633d
 8006314:	2302      	movs	r3, #2
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631a:	e01a      	b.n	8006352 <UART_SetConfig+0x5a6>
 800631c:	2304      	movs	r3, #4
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006322:	e016      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006324:	2308      	movs	r3, #8
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632a:	e012      	b.n	8006352 <UART_SetConfig+0x5a6>
 800632c:	2310      	movs	r3, #16
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006332:	e00e      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006334:	2320      	movs	r3, #32
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e00a      	b.n	8006352 <UART_SetConfig+0x5a6>
 800633c:	2340      	movs	r3, #64	@ 0x40
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e006      	b.n	8006352 <UART_SetConfig+0x5a6>
 8006344:	2380      	movs	r3, #128	@ 0x80
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e002      	b.n	8006352 <UART_SetConfig+0x5a6>
 800634c:	2380      	movs	r3, #128	@ 0x80
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a3f      	ldr	r2, [pc, #252]	@ (8006454 <UART_SetConfig+0x6a8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	f040 80f8 	bne.w	800654e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800635e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006362:	2b20      	cmp	r3, #32
 8006364:	dc46      	bgt.n	80063f4 <UART_SetConfig+0x648>
 8006366:	2b02      	cmp	r3, #2
 8006368:	f2c0 8082 	blt.w	8006470 <UART_SetConfig+0x6c4>
 800636c:	3b02      	subs	r3, #2
 800636e:	2b1e      	cmp	r3, #30
 8006370:	d87e      	bhi.n	8006470 <UART_SetConfig+0x6c4>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <UART_SetConfig+0x5cc>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063fb 	.word	0x080063fb
 800637c:	08006471 	.word	0x08006471
 8006380:	08006403 	.word	0x08006403
 8006384:	08006471 	.word	0x08006471
 8006388:	08006471 	.word	0x08006471
 800638c:	08006471 	.word	0x08006471
 8006390:	08006413 	.word	0x08006413
 8006394:	08006471 	.word	0x08006471
 8006398:	08006471 	.word	0x08006471
 800639c:	08006471 	.word	0x08006471
 80063a0:	08006471 	.word	0x08006471
 80063a4:	08006471 	.word	0x08006471
 80063a8:	08006471 	.word	0x08006471
 80063ac:	08006471 	.word	0x08006471
 80063b0:	08006423 	.word	0x08006423
 80063b4:	08006471 	.word	0x08006471
 80063b8:	08006471 	.word	0x08006471
 80063bc:	08006471 	.word	0x08006471
 80063c0:	08006471 	.word	0x08006471
 80063c4:	08006471 	.word	0x08006471
 80063c8:	08006471 	.word	0x08006471
 80063cc:	08006471 	.word	0x08006471
 80063d0:	08006471 	.word	0x08006471
 80063d4:	08006471 	.word	0x08006471
 80063d8:	08006471 	.word	0x08006471
 80063dc:	08006471 	.word	0x08006471
 80063e0:	08006471 	.word	0x08006471
 80063e4:	08006471 	.word	0x08006471
 80063e8:	08006471 	.word	0x08006471
 80063ec:	08006471 	.word	0x08006471
 80063f0:	08006463 	.word	0x08006463
 80063f4:	2b40      	cmp	r3, #64	@ 0x40
 80063f6:	d037      	beq.n	8006468 <UART_SetConfig+0x6bc>
 80063f8:	e03a      	b.n	8006470 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063fa:	f7fd fcfb 	bl	8003df4 <HAL_RCCEx_GetD3PCLK1Freq>
 80063fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006400:	e03c      	b.n	800647c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006406:	4618      	mov	r0, r3
 8006408:	f7fd fd0a 	bl	8003e20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006410:	e034      	b.n	800647c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006412:	f107 0318 	add.w	r3, r7, #24
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd fe56 	bl	80040c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006420:	e02c      	b.n	800647c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006422:	4b09      	ldr	r3, [pc, #36]	@ (8006448 <UART_SetConfig+0x69c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d016      	beq.n	800645c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800642e:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <UART_SetConfig+0x69c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	4a07      	ldr	r2, [pc, #28]	@ (8006458 <UART_SetConfig+0x6ac>)
 800643a:	fa22 f303 	lsr.w	r3, r2, r3
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006440:	e01c      	b.n	800647c <UART_SetConfig+0x6d0>
 8006442:	bf00      	nop
 8006444:	40011400 	.word	0x40011400
 8006448:	58024400 	.word	0x58024400
 800644c:	40007800 	.word	0x40007800
 8006450:	40007c00 	.word	0x40007c00
 8006454:	58000c00 	.word	0x58000c00
 8006458:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800645c:	4b9d      	ldr	r3, [pc, #628]	@ (80066d4 <UART_SetConfig+0x928>)
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006460:	e00c      	b.n	800647c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006462:	4b9d      	ldr	r3, [pc, #628]	@ (80066d8 <UART_SetConfig+0x92c>)
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006466:	e009      	b.n	800647c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800646c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646e:	e005      	b.n	800647c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800647a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800647c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 81de 	beq.w	8006840 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	4a94      	ldr	r2, [pc, #592]	@ (80066dc <UART_SetConfig+0x930>)
 800648a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648e:	461a      	mov	r2, r3
 8006490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006492:	fbb3 f3f2 	udiv	r3, r3, r2
 8006496:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4413      	add	r3, r2
 80064a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d305      	bcc.n	80064b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d903      	bls.n	80064bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064ba:	e1c1      	b.n	8006840 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064be:	2200      	movs	r2, #0
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	60fa      	str	r2, [r7, #12]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	4a84      	ldr	r2, [pc, #528]	@ (80066dc <UART_SetConfig+0x930>)
 80064ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2200      	movs	r2, #0
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	607a      	str	r2, [r7, #4]
 80064d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064de:	f7f9 ff57 	bl	8000390 <__aeabi_uldivmod>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4610      	mov	r0, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	020b      	lsls	r3, r1, #8
 80064f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064f8:	0202      	lsls	r2, r0, #8
 80064fa:	6979      	ldr	r1, [r7, #20]
 80064fc:	6849      	ldr	r1, [r1, #4]
 80064fe:	0849      	lsrs	r1, r1, #1
 8006500:	2000      	movs	r0, #0
 8006502:	460c      	mov	r4, r1
 8006504:	4605      	mov	r5, r0
 8006506:	eb12 0804 	adds.w	r8, r2, r4
 800650a:	eb43 0905 	adc.w	r9, r3, r5
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	469a      	mov	sl, r3
 8006516:	4693      	mov	fp, r2
 8006518:	4652      	mov	r2, sl
 800651a:	465b      	mov	r3, fp
 800651c:	4640      	mov	r0, r8
 800651e:	4649      	mov	r1, r9
 8006520:	f7f9 ff36 	bl	8000390 <__aeabi_uldivmod>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4613      	mov	r3, r2
 800652a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800652c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006532:	d308      	bcc.n	8006546 <UART_SetConfig+0x79a>
 8006534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800653a:	d204      	bcs.n	8006546 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006542:	60da      	str	r2, [r3, #12]
 8006544:	e17c      	b.n	8006840 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800654c:	e178      	b.n	8006840 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006556:	f040 80c5 	bne.w	80066e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800655a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800655e:	2b20      	cmp	r3, #32
 8006560:	dc48      	bgt.n	80065f4 <UART_SetConfig+0x848>
 8006562:	2b00      	cmp	r3, #0
 8006564:	db7b      	blt.n	800665e <UART_SetConfig+0x8b2>
 8006566:	2b20      	cmp	r3, #32
 8006568:	d879      	bhi.n	800665e <UART_SetConfig+0x8b2>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <UART_SetConfig+0x7c4>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065fb 	.word	0x080065fb
 8006574:	08006603 	.word	0x08006603
 8006578:	0800665f 	.word	0x0800665f
 800657c:	0800665f 	.word	0x0800665f
 8006580:	0800660b 	.word	0x0800660b
 8006584:	0800665f 	.word	0x0800665f
 8006588:	0800665f 	.word	0x0800665f
 800658c:	0800665f 	.word	0x0800665f
 8006590:	0800661b 	.word	0x0800661b
 8006594:	0800665f 	.word	0x0800665f
 8006598:	0800665f 	.word	0x0800665f
 800659c:	0800665f 	.word	0x0800665f
 80065a0:	0800665f 	.word	0x0800665f
 80065a4:	0800665f 	.word	0x0800665f
 80065a8:	0800665f 	.word	0x0800665f
 80065ac:	0800665f 	.word	0x0800665f
 80065b0:	0800662b 	.word	0x0800662b
 80065b4:	0800665f 	.word	0x0800665f
 80065b8:	0800665f 	.word	0x0800665f
 80065bc:	0800665f 	.word	0x0800665f
 80065c0:	0800665f 	.word	0x0800665f
 80065c4:	0800665f 	.word	0x0800665f
 80065c8:	0800665f 	.word	0x0800665f
 80065cc:	0800665f 	.word	0x0800665f
 80065d0:	0800665f 	.word	0x0800665f
 80065d4:	0800665f 	.word	0x0800665f
 80065d8:	0800665f 	.word	0x0800665f
 80065dc:	0800665f 	.word	0x0800665f
 80065e0:	0800665f 	.word	0x0800665f
 80065e4:	0800665f 	.word	0x0800665f
 80065e8:	0800665f 	.word	0x0800665f
 80065ec:	0800665f 	.word	0x0800665f
 80065f0:	08006651 	.word	0x08006651
 80065f4:	2b40      	cmp	r3, #64	@ 0x40
 80065f6:	d02e      	beq.n	8006656 <UART_SetConfig+0x8aa>
 80065f8:	e031      	b.n	800665e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065fa:	f7fc f9c5 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 80065fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006600:	e033      	b.n	800666a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006602:	f7fc f9d7 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8006606:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006608:	e02f      	b.n	800666a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800660a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800660e:	4618      	mov	r0, r3
 8006610:	f7fd fc06 	bl	8003e20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006618:	e027      	b.n	800666a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800661a:	f107 0318 	add.w	r3, r7, #24
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fd52 	bl	80040c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006628:	e01f      	b.n	800666a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800662a:	4b2d      	ldr	r3, [pc, #180]	@ (80066e0 <UART_SetConfig+0x934>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006636:	4b2a      	ldr	r3, [pc, #168]	@ (80066e0 <UART_SetConfig+0x934>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	08db      	lsrs	r3, r3, #3
 800663c:	f003 0303 	and.w	r3, r3, #3
 8006640:	4a24      	ldr	r2, [pc, #144]	@ (80066d4 <UART_SetConfig+0x928>)
 8006642:	fa22 f303 	lsr.w	r3, r2, r3
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006648:	e00f      	b.n	800666a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800664a:	4b22      	ldr	r3, [pc, #136]	@ (80066d4 <UART_SetConfig+0x928>)
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800664e:	e00c      	b.n	800666a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006650:	4b21      	ldr	r3, [pc, #132]	@ (80066d8 <UART_SetConfig+0x92c>)
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006654:	e009      	b.n	800666a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800665c:	e005      	b.n	800666a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800666a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80e7 	beq.w	8006840 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	4a19      	ldr	r2, [pc, #100]	@ (80066dc <UART_SetConfig+0x930>)
 8006678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800667c:	461a      	mov	r2, r3
 800667e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006680:	fbb3 f3f2 	udiv	r3, r3, r2
 8006684:	005a      	lsls	r2, r3, #1
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	441a      	add	r2, r3
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	fbb2 f3f3 	udiv	r3, r2, r3
 8006696:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	2b0f      	cmp	r3, #15
 800669c:	d916      	bls.n	80066cc <UART_SetConfig+0x920>
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a4:	d212      	bcs.n	80066cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f023 030f 	bic.w	r3, r3, #15
 80066ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066be:	4313      	orrs	r3, r2
 80066c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80066c8:	60da      	str	r2, [r3, #12]
 80066ca:	e0b9      	b.n	8006840 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066d2:	e0b5      	b.n	8006840 <UART_SetConfig+0xa94>
 80066d4:	03d09000 	.word	0x03d09000
 80066d8:	003d0900 	.word	0x003d0900
 80066dc:	08007860 	.word	0x08007860
 80066e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	dc49      	bgt.n	8006780 <UART_SetConfig+0x9d4>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	db7c      	blt.n	80067ea <UART_SetConfig+0xa3e>
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d87a      	bhi.n	80067ea <UART_SetConfig+0xa3e>
 80066f4:	a201      	add	r2, pc, #4	@ (adr r2, 80066fc <UART_SetConfig+0x950>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	08006787 	.word	0x08006787
 8006700:	0800678f 	.word	0x0800678f
 8006704:	080067eb 	.word	0x080067eb
 8006708:	080067eb 	.word	0x080067eb
 800670c:	08006797 	.word	0x08006797
 8006710:	080067eb 	.word	0x080067eb
 8006714:	080067eb 	.word	0x080067eb
 8006718:	080067eb 	.word	0x080067eb
 800671c:	080067a7 	.word	0x080067a7
 8006720:	080067eb 	.word	0x080067eb
 8006724:	080067eb 	.word	0x080067eb
 8006728:	080067eb 	.word	0x080067eb
 800672c:	080067eb 	.word	0x080067eb
 8006730:	080067eb 	.word	0x080067eb
 8006734:	080067eb 	.word	0x080067eb
 8006738:	080067eb 	.word	0x080067eb
 800673c:	080067b7 	.word	0x080067b7
 8006740:	080067eb 	.word	0x080067eb
 8006744:	080067eb 	.word	0x080067eb
 8006748:	080067eb 	.word	0x080067eb
 800674c:	080067eb 	.word	0x080067eb
 8006750:	080067eb 	.word	0x080067eb
 8006754:	080067eb 	.word	0x080067eb
 8006758:	080067eb 	.word	0x080067eb
 800675c:	080067eb 	.word	0x080067eb
 8006760:	080067eb 	.word	0x080067eb
 8006764:	080067eb 	.word	0x080067eb
 8006768:	080067eb 	.word	0x080067eb
 800676c:	080067eb 	.word	0x080067eb
 8006770:	080067eb 	.word	0x080067eb
 8006774:	080067eb 	.word	0x080067eb
 8006778:	080067eb 	.word	0x080067eb
 800677c:	080067dd 	.word	0x080067dd
 8006780:	2b40      	cmp	r3, #64	@ 0x40
 8006782:	d02e      	beq.n	80067e2 <UART_SetConfig+0xa36>
 8006784:	e031      	b.n	80067ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006786:	f7fc f8ff 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 800678a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800678c:	e033      	b.n	80067f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800678e:	f7fc f911 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8006792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006794:	e02f      	b.n	80067f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800679a:	4618      	mov	r0, r3
 800679c:	f7fd fb40 	bl	8003e20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a4:	e027      	b.n	80067f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a6:	f107 0318 	add.w	r3, r7, #24
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fd fc8c 	bl	80040c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b4:	e01f      	b.n	80067f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b6:	4b2d      	ldr	r3, [pc, #180]	@ (800686c <UART_SetConfig+0xac0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067c2:	4b2a      	ldr	r3, [pc, #168]	@ (800686c <UART_SetConfig+0xac0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	4a28      	ldr	r2, [pc, #160]	@ (8006870 <UART_SetConfig+0xac4>)
 80067ce:	fa22 f303 	lsr.w	r3, r2, r3
 80067d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067d4:	e00f      	b.n	80067f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067d6:	4b26      	ldr	r3, [pc, #152]	@ (8006870 <UART_SetConfig+0xac4>)
 80067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067da:	e00c      	b.n	80067f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067dc:	4b25      	ldr	r3, [pc, #148]	@ (8006874 <UART_SetConfig+0xac8>)
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e0:	e009      	b.n	80067f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e8:	e005      	b.n	80067f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067f4:	bf00      	nop
    }

    if (pclk != 0U)
 80067f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d021      	beq.n	8006840 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	4a1d      	ldr	r2, [pc, #116]	@ (8006878 <UART_SetConfig+0xacc>)
 8006802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006806:	461a      	mov	r2, r3
 8006808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800680a:	fbb3 f2f2 	udiv	r2, r3, r2
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	441a      	add	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006822:	2b0f      	cmp	r3, #15
 8006824:	d909      	bls.n	800683a <UART_SetConfig+0xa8e>
 8006826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800682c:	d205      	bcs.n	800683a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	b29a      	uxth	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60da      	str	r2, [r3, #12]
 8006838:	e002      	b.n	8006840 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2201      	movs	r2, #1
 8006844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2201      	movs	r2, #1
 800684c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2200      	movs	r2, #0
 8006854:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2200      	movs	r2, #0
 800685a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800685c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006860:	4618      	mov	r0, r3
 8006862:	3748      	adds	r7, #72	@ 0x48
 8006864:	46bd      	mov	sp, r7
 8006866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800686a:	bf00      	nop
 800686c:	58024400 	.word	0x58024400
 8006870:	03d09000 	.word	0x03d09000
 8006874:	003d0900 	.word	0x003d0900
 8006878:	08007860 	.word	0x08007860

0800687c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01a      	beq.n	8006992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800697a:	d10a      	bne.n	8006992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b098      	sub	sp, #96	@ 0x60
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d0:	f7fa fc58 	bl	8001284 <HAL_GetTick>
 80069d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d12f      	bne.n	8006a44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f88e 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d022      	beq.n	8006a44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e6      	bne.n	80069fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e063      	b.n	8006b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d149      	bne.n	8006ae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f857 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d03c      	beq.n	8006ae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	623b      	str	r3, [r7, #32]
   return(result);
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e6      	bne.n	8006a6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 0301 	bic.w	r3, r3, #1
 8006ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006abe:	61fa      	str	r2, [r7, #28]
 8006ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	69b9      	ldr	r1, [r7, #24]
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	617b      	str	r3, [r7, #20]
   return(result);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e5      	bne.n	8006a9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e012      	b.n	8006b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3758      	adds	r7, #88	@ 0x58
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b24:	e04f      	b.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d04b      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2e:	f7fa fba9 	bl	8001284 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d302      	bcc.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e04e      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d037      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b80      	cmp	r3, #128	@ 0x80
 8006b5a:	d034      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b40      	cmp	r3, #64	@ 0x40
 8006b60:	d031      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d110      	bne.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2208      	movs	r2, #8
 8006b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f839 	bl	8006bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2208      	movs	r2, #8
 8006b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e029      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba0:	d111      	bne.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f81f 	bl	8006bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e00f      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69da      	ldr	r2, [r3, #28]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	2300      	movne	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d0a0      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b095      	sub	sp, #84	@ 0x54
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c16:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e6      	bne.n	8006bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cb8 <UART_EndRxTransfer+0xc8>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d118      	bne.n	8006c98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f023 0310 	bic.w	r3, r3, #16
 8006c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6979      	ldr	r1, [r7, #20]
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	613b      	str	r3, [r7, #16]
   return(result);
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e6      	bne.n	8006c66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006cac:	bf00      	nop
 8006cae:	3754      	adds	r7, #84	@ 0x54
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	effffffe 	.word	0xeffffffe

08006cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e027      	b.n	8006d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2224      	movs	r2, #36	@ 0x24
 8006cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e02d      	b.n	8006da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	@ 0x24
 8006d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f850 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e02d      	b.n	8006e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2224      	movs	r2, #36	@ 0x24
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f812 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e48:	e031      	b.n	8006eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e4a:	2310      	movs	r3, #16
 8006e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e4e:	2310      	movs	r3, #16
 8006e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	0e5b      	lsrs	r3, r3, #25
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	0f5b      	lsrs	r3, r3, #29
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	7b3a      	ldrb	r2, [r7, #12]
 8006e76:	4911      	ldr	r1, [pc, #68]	@ (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e78:	5c8a      	ldrb	r2, [r1, r2]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e7e:	7b3a      	ldrb	r2, [r7, #12]
 8006e80:	490f      	ldr	r1, [pc, #60]	@ (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	7b7a      	ldrb	r2, [r7, #13]
 8006e94:	4909      	ldr	r1, [pc, #36]	@ (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e96:	5c8a      	ldrb	r2, [r1, r2]
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e9c:	7b7a      	ldrb	r2, [r7, #13]
 8006e9e:	4908      	ldr	r1, [pc, #32]	@ (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	08007878 	.word	0x08007878
 8006ec0:	08007880 	.word	0x08007880

08006ec4 <sniprintf>:
 8006ec4:	b40c      	push	{r2, r3}
 8006ec6:	b530      	push	{r4, r5, lr}
 8006ec8:	4b17      	ldr	r3, [pc, #92]	@ (8006f28 <sniprintf+0x64>)
 8006eca:	1e0c      	subs	r4, r1, #0
 8006ecc:	681d      	ldr	r5, [r3, #0]
 8006ece:	b09d      	sub	sp, #116	@ 0x74
 8006ed0:	da08      	bge.n	8006ee4 <sniprintf+0x20>
 8006ed2:	238b      	movs	r3, #139	@ 0x8b
 8006ed4:	602b      	str	r3, [r5, #0]
 8006ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eda:	b01d      	add	sp, #116	@ 0x74
 8006edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ee0:	b002      	add	sp, #8
 8006ee2:	4770      	bx	lr
 8006ee4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ee8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006eec:	bf14      	ite	ne
 8006eee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ef2:	4623      	moveq	r3, r4
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	9307      	str	r3, [sp, #28]
 8006ef8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006efc:	9002      	str	r0, [sp, #8]
 8006efe:	9006      	str	r0, [sp, #24]
 8006f00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f06:	ab21      	add	r3, sp, #132	@ 0x84
 8006f08:	a902      	add	r1, sp, #8
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	f000 f995 	bl	800723c <_svfiprintf_r>
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	bfbc      	itt	lt
 8006f16:	238b      	movlt	r3, #139	@ 0x8b
 8006f18:	602b      	strlt	r3, [r5, #0]
 8006f1a:	2c00      	cmp	r4, #0
 8006f1c:	d0dd      	beq.n	8006eda <sniprintf+0x16>
 8006f1e:	9b02      	ldr	r3, [sp, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	e7d9      	b.n	8006eda <sniprintf+0x16>
 8006f26:	bf00      	nop
 8006f28:	24000010 	.word	0x24000010

08006f2c <memset>:
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d100      	bne.n	8006f36 <memset+0xa>
 8006f34:	4770      	bx	lr
 8006f36:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3a:	e7f9      	b.n	8006f30 <memset+0x4>

08006f3c <__errno>:
 8006f3c:	4b01      	ldr	r3, [pc, #4]	@ (8006f44 <__errno+0x8>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	24000010 	.word	0x24000010

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f80 <__libc_init_array+0x38>)
 8006f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8006f84 <__libc_init_array+0x3c>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	2600      	movs	r6, #0
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	4d0b      	ldr	r5, [pc, #44]	@ (8006f88 <__libc_init_array+0x40>)
 8006f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f8c <__libc_init_array+0x44>)
 8006f5c:	f000 fc66 	bl	800782c <_init>
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	2600      	movs	r6, #0
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	080078c4 	.word	0x080078c4
 8006f84:	080078c4 	.word	0x080078c4
 8006f88:	080078c4 	.word	0x080078c4
 8006f8c:	080078c8 	.word	0x080078c8

08006f90 <__retarget_lock_acquire_recursive>:
 8006f90:	4770      	bx	lr

08006f92 <__retarget_lock_release_recursive>:
 8006f92:	4770      	bx	lr

08006f94 <_free_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4605      	mov	r5, r0
 8006f98:	2900      	cmp	r1, #0
 8006f9a:	d041      	beq.n	8007020 <_free_r+0x8c>
 8006f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa0:	1f0c      	subs	r4, r1, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bfb8      	it	lt
 8006fa6:	18e4      	addlt	r4, r4, r3
 8006fa8:	f000 f8e0 	bl	800716c <__malloc_lock>
 8006fac:	4a1d      	ldr	r2, [pc, #116]	@ (8007024 <_free_r+0x90>)
 8006fae:	6813      	ldr	r3, [r2, #0]
 8006fb0:	b933      	cbnz	r3, 8006fc0 <_free_r+0x2c>
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	6014      	str	r4, [r2, #0]
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fbc:	f000 b8dc 	b.w	8007178 <__malloc_unlock>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d908      	bls.n	8006fd6 <_free_r+0x42>
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	1821      	adds	r1, r4, r0
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	bf01      	itttt	eq
 8006fcc:	6819      	ldreq	r1, [r3, #0]
 8006fce:	685b      	ldreq	r3, [r3, #4]
 8006fd0:	1809      	addeq	r1, r1, r0
 8006fd2:	6021      	streq	r1, [r4, #0]
 8006fd4:	e7ed      	b.n	8006fb2 <_free_r+0x1e>
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	b10b      	cbz	r3, 8006fe0 <_free_r+0x4c>
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	d9fa      	bls.n	8006fd6 <_free_r+0x42>
 8006fe0:	6811      	ldr	r1, [r2, #0]
 8006fe2:	1850      	adds	r0, r2, r1
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d10b      	bne.n	8007000 <_free_r+0x6c>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	4401      	add	r1, r0
 8006fec:	1850      	adds	r0, r2, r1
 8006fee:	4283      	cmp	r3, r0
 8006ff0:	6011      	str	r1, [r2, #0]
 8006ff2:	d1e0      	bne.n	8006fb6 <_free_r+0x22>
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	6053      	str	r3, [r2, #4]
 8006ffa:	4408      	add	r0, r1
 8006ffc:	6010      	str	r0, [r2, #0]
 8006ffe:	e7da      	b.n	8006fb6 <_free_r+0x22>
 8007000:	d902      	bls.n	8007008 <_free_r+0x74>
 8007002:	230c      	movs	r3, #12
 8007004:	602b      	str	r3, [r5, #0]
 8007006:	e7d6      	b.n	8006fb6 <_free_r+0x22>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	1821      	adds	r1, r4, r0
 800700c:	428b      	cmp	r3, r1
 800700e:	bf04      	itt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	bf04      	itt	eq
 8007018:	1809      	addeq	r1, r1, r0
 800701a:	6021      	streq	r1, [r4, #0]
 800701c:	6054      	str	r4, [r2, #4]
 800701e:	e7ca      	b.n	8006fb6 <_free_r+0x22>
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	24000334 	.word	0x24000334

08007028 <sbrk_aligned>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	4e0f      	ldr	r6, [pc, #60]	@ (8007068 <sbrk_aligned+0x40>)
 800702c:	460c      	mov	r4, r1
 800702e:	6831      	ldr	r1, [r6, #0]
 8007030:	4605      	mov	r5, r0
 8007032:	b911      	cbnz	r1, 800703a <sbrk_aligned+0x12>
 8007034:	f000 fba6 	bl	8007784 <_sbrk_r>
 8007038:	6030      	str	r0, [r6, #0]
 800703a:	4621      	mov	r1, r4
 800703c:	4628      	mov	r0, r5
 800703e:	f000 fba1 	bl	8007784 <_sbrk_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	d103      	bne.n	800704e <sbrk_aligned+0x26>
 8007046:	f04f 34ff 	mov.w	r4, #4294967295
 800704a:	4620      	mov	r0, r4
 800704c:	bd70      	pop	{r4, r5, r6, pc}
 800704e:	1cc4      	adds	r4, r0, #3
 8007050:	f024 0403 	bic.w	r4, r4, #3
 8007054:	42a0      	cmp	r0, r4
 8007056:	d0f8      	beq.n	800704a <sbrk_aligned+0x22>
 8007058:	1a21      	subs	r1, r4, r0
 800705a:	4628      	mov	r0, r5
 800705c:	f000 fb92 	bl	8007784 <_sbrk_r>
 8007060:	3001      	adds	r0, #1
 8007062:	d1f2      	bne.n	800704a <sbrk_aligned+0x22>
 8007064:	e7ef      	b.n	8007046 <sbrk_aligned+0x1e>
 8007066:	bf00      	nop
 8007068:	24000330 	.word	0x24000330

0800706c <_malloc_r>:
 800706c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007070:	1ccd      	adds	r5, r1, #3
 8007072:	f025 0503 	bic.w	r5, r5, #3
 8007076:	3508      	adds	r5, #8
 8007078:	2d0c      	cmp	r5, #12
 800707a:	bf38      	it	cc
 800707c:	250c      	movcc	r5, #12
 800707e:	2d00      	cmp	r5, #0
 8007080:	4606      	mov	r6, r0
 8007082:	db01      	blt.n	8007088 <_malloc_r+0x1c>
 8007084:	42a9      	cmp	r1, r5
 8007086:	d904      	bls.n	8007092 <_malloc_r+0x26>
 8007088:	230c      	movs	r3, #12
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	2000      	movs	r0, #0
 800708e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007092:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007168 <_malloc_r+0xfc>
 8007096:	f000 f869 	bl	800716c <__malloc_lock>
 800709a:	f8d8 3000 	ldr.w	r3, [r8]
 800709e:	461c      	mov	r4, r3
 80070a0:	bb44      	cbnz	r4, 80070f4 <_malloc_r+0x88>
 80070a2:	4629      	mov	r1, r5
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff ffbf 	bl	8007028 <sbrk_aligned>
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	4604      	mov	r4, r0
 80070ae:	d158      	bne.n	8007162 <_malloc_r+0xf6>
 80070b0:	f8d8 4000 	ldr.w	r4, [r8]
 80070b4:	4627      	mov	r7, r4
 80070b6:	2f00      	cmp	r7, #0
 80070b8:	d143      	bne.n	8007142 <_malloc_r+0xd6>
 80070ba:	2c00      	cmp	r4, #0
 80070bc:	d04b      	beq.n	8007156 <_malloc_r+0xea>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	4639      	mov	r1, r7
 80070c2:	4630      	mov	r0, r6
 80070c4:	eb04 0903 	add.w	r9, r4, r3
 80070c8:	f000 fb5c 	bl	8007784 <_sbrk_r>
 80070cc:	4581      	cmp	r9, r0
 80070ce:	d142      	bne.n	8007156 <_malloc_r+0xea>
 80070d0:	6821      	ldr	r1, [r4, #0]
 80070d2:	1a6d      	subs	r5, r5, r1
 80070d4:	4629      	mov	r1, r5
 80070d6:	4630      	mov	r0, r6
 80070d8:	f7ff ffa6 	bl	8007028 <sbrk_aligned>
 80070dc:	3001      	adds	r0, #1
 80070de:	d03a      	beq.n	8007156 <_malloc_r+0xea>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	442b      	add	r3, r5
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	f8d8 3000 	ldr.w	r3, [r8]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	bb62      	cbnz	r2, 8007148 <_malloc_r+0xdc>
 80070ee:	f8c8 7000 	str.w	r7, [r8]
 80070f2:	e00f      	b.n	8007114 <_malloc_r+0xa8>
 80070f4:	6822      	ldr	r2, [r4, #0]
 80070f6:	1b52      	subs	r2, r2, r5
 80070f8:	d420      	bmi.n	800713c <_malloc_r+0xd0>
 80070fa:	2a0b      	cmp	r2, #11
 80070fc:	d917      	bls.n	800712e <_malloc_r+0xc2>
 80070fe:	1961      	adds	r1, r4, r5
 8007100:	42a3      	cmp	r3, r4
 8007102:	6025      	str	r5, [r4, #0]
 8007104:	bf18      	it	ne
 8007106:	6059      	strne	r1, [r3, #4]
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	bf08      	it	eq
 800710c:	f8c8 1000 	streq.w	r1, [r8]
 8007110:	5162      	str	r2, [r4, r5]
 8007112:	604b      	str	r3, [r1, #4]
 8007114:	4630      	mov	r0, r6
 8007116:	f000 f82f 	bl	8007178 <__malloc_unlock>
 800711a:	f104 000b 	add.w	r0, r4, #11
 800711e:	1d23      	adds	r3, r4, #4
 8007120:	f020 0007 	bic.w	r0, r0, #7
 8007124:	1ac2      	subs	r2, r0, r3
 8007126:	bf1c      	itt	ne
 8007128:	1a1b      	subne	r3, r3, r0
 800712a:	50a3      	strne	r3, [r4, r2]
 800712c:	e7af      	b.n	800708e <_malloc_r+0x22>
 800712e:	6862      	ldr	r2, [r4, #4]
 8007130:	42a3      	cmp	r3, r4
 8007132:	bf0c      	ite	eq
 8007134:	f8c8 2000 	streq.w	r2, [r8]
 8007138:	605a      	strne	r2, [r3, #4]
 800713a:	e7eb      	b.n	8007114 <_malloc_r+0xa8>
 800713c:	4623      	mov	r3, r4
 800713e:	6864      	ldr	r4, [r4, #4]
 8007140:	e7ae      	b.n	80070a0 <_malloc_r+0x34>
 8007142:	463c      	mov	r4, r7
 8007144:	687f      	ldr	r7, [r7, #4]
 8007146:	e7b6      	b.n	80070b6 <_malloc_r+0x4a>
 8007148:	461a      	mov	r2, r3
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	42a3      	cmp	r3, r4
 800714e:	d1fb      	bne.n	8007148 <_malloc_r+0xdc>
 8007150:	2300      	movs	r3, #0
 8007152:	6053      	str	r3, [r2, #4]
 8007154:	e7de      	b.n	8007114 <_malloc_r+0xa8>
 8007156:	230c      	movs	r3, #12
 8007158:	6033      	str	r3, [r6, #0]
 800715a:	4630      	mov	r0, r6
 800715c:	f000 f80c 	bl	8007178 <__malloc_unlock>
 8007160:	e794      	b.n	800708c <_malloc_r+0x20>
 8007162:	6005      	str	r5, [r0, #0]
 8007164:	e7d6      	b.n	8007114 <_malloc_r+0xa8>
 8007166:	bf00      	nop
 8007168:	24000334 	.word	0x24000334

0800716c <__malloc_lock>:
 800716c:	4801      	ldr	r0, [pc, #4]	@ (8007174 <__malloc_lock+0x8>)
 800716e:	f7ff bf0f 	b.w	8006f90 <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	2400032c 	.word	0x2400032c

08007178 <__malloc_unlock>:
 8007178:	4801      	ldr	r0, [pc, #4]	@ (8007180 <__malloc_unlock+0x8>)
 800717a:	f7ff bf0a 	b.w	8006f92 <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	2400032c 	.word	0x2400032c

08007184 <__ssputs_r>:
 8007184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	688e      	ldr	r6, [r1, #8]
 800718a:	461f      	mov	r7, r3
 800718c:	42be      	cmp	r6, r7
 800718e:	680b      	ldr	r3, [r1, #0]
 8007190:	4682      	mov	sl, r0
 8007192:	460c      	mov	r4, r1
 8007194:	4690      	mov	r8, r2
 8007196:	d82d      	bhi.n	80071f4 <__ssputs_r+0x70>
 8007198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800719c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071a0:	d026      	beq.n	80071f0 <__ssputs_r+0x6c>
 80071a2:	6965      	ldr	r5, [r4, #20]
 80071a4:	6909      	ldr	r1, [r1, #16]
 80071a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071aa:	eba3 0901 	sub.w	r9, r3, r1
 80071ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071b2:	1c7b      	adds	r3, r7, #1
 80071b4:	444b      	add	r3, r9
 80071b6:	106d      	asrs	r5, r5, #1
 80071b8:	429d      	cmp	r5, r3
 80071ba:	bf38      	it	cc
 80071bc:	461d      	movcc	r5, r3
 80071be:	0553      	lsls	r3, r2, #21
 80071c0:	d527      	bpl.n	8007212 <__ssputs_r+0x8e>
 80071c2:	4629      	mov	r1, r5
 80071c4:	f7ff ff52 	bl	800706c <_malloc_r>
 80071c8:	4606      	mov	r6, r0
 80071ca:	b360      	cbz	r0, 8007226 <__ssputs_r+0xa2>
 80071cc:	6921      	ldr	r1, [r4, #16]
 80071ce:	464a      	mov	r2, r9
 80071d0:	f000 fae8 	bl	80077a4 <memcpy>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	6126      	str	r6, [r4, #16]
 80071e2:	6165      	str	r5, [r4, #20]
 80071e4:	444e      	add	r6, r9
 80071e6:	eba5 0509 	sub.w	r5, r5, r9
 80071ea:	6026      	str	r6, [r4, #0]
 80071ec:	60a5      	str	r5, [r4, #8]
 80071ee:	463e      	mov	r6, r7
 80071f0:	42be      	cmp	r6, r7
 80071f2:	d900      	bls.n	80071f6 <__ssputs_r+0x72>
 80071f4:	463e      	mov	r6, r7
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	4632      	mov	r2, r6
 80071fa:	4641      	mov	r1, r8
 80071fc:	f000 faa8 	bl	8007750 <memmove>
 8007200:	68a3      	ldr	r3, [r4, #8]
 8007202:	1b9b      	subs	r3, r3, r6
 8007204:	60a3      	str	r3, [r4, #8]
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	4433      	add	r3, r6
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	2000      	movs	r0, #0
 800720e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007212:	462a      	mov	r2, r5
 8007214:	f000 fad4 	bl	80077c0 <_realloc_r>
 8007218:	4606      	mov	r6, r0
 800721a:	2800      	cmp	r0, #0
 800721c:	d1e0      	bne.n	80071e0 <__ssputs_r+0x5c>
 800721e:	6921      	ldr	r1, [r4, #16]
 8007220:	4650      	mov	r0, sl
 8007222:	f7ff feb7 	bl	8006f94 <_free_r>
 8007226:	230c      	movs	r3, #12
 8007228:	f8ca 3000 	str.w	r3, [sl]
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	e7e9      	b.n	800720e <__ssputs_r+0x8a>
	...

0800723c <_svfiprintf_r>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	4698      	mov	r8, r3
 8007242:	898b      	ldrh	r3, [r1, #12]
 8007244:	061b      	lsls	r3, r3, #24
 8007246:	b09d      	sub	sp, #116	@ 0x74
 8007248:	4607      	mov	r7, r0
 800724a:	460d      	mov	r5, r1
 800724c:	4614      	mov	r4, r2
 800724e:	d510      	bpl.n	8007272 <_svfiprintf_r+0x36>
 8007250:	690b      	ldr	r3, [r1, #16]
 8007252:	b973      	cbnz	r3, 8007272 <_svfiprintf_r+0x36>
 8007254:	2140      	movs	r1, #64	@ 0x40
 8007256:	f7ff ff09 	bl	800706c <_malloc_r>
 800725a:	6028      	str	r0, [r5, #0]
 800725c:	6128      	str	r0, [r5, #16]
 800725e:	b930      	cbnz	r0, 800726e <_svfiprintf_r+0x32>
 8007260:	230c      	movs	r3, #12
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	b01d      	add	sp, #116	@ 0x74
 800726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726e:	2340      	movs	r3, #64	@ 0x40
 8007270:	616b      	str	r3, [r5, #20]
 8007272:	2300      	movs	r3, #0
 8007274:	9309      	str	r3, [sp, #36]	@ 0x24
 8007276:	2320      	movs	r3, #32
 8007278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800727c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007280:	2330      	movs	r3, #48	@ 0x30
 8007282:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007420 <_svfiprintf_r+0x1e4>
 8007286:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800728a:	f04f 0901 	mov.w	r9, #1
 800728e:	4623      	mov	r3, r4
 8007290:	469a      	mov	sl, r3
 8007292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007296:	b10a      	cbz	r2, 800729c <_svfiprintf_r+0x60>
 8007298:	2a25      	cmp	r2, #37	@ 0x25
 800729a:	d1f9      	bne.n	8007290 <_svfiprintf_r+0x54>
 800729c:	ebba 0b04 	subs.w	fp, sl, r4
 80072a0:	d00b      	beq.n	80072ba <_svfiprintf_r+0x7e>
 80072a2:	465b      	mov	r3, fp
 80072a4:	4622      	mov	r2, r4
 80072a6:	4629      	mov	r1, r5
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ff6b 	bl	8007184 <__ssputs_r>
 80072ae:	3001      	adds	r0, #1
 80072b0:	f000 80a7 	beq.w	8007402 <_svfiprintf_r+0x1c6>
 80072b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072b6:	445a      	add	r2, fp
 80072b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80072ba:	f89a 3000 	ldrb.w	r3, [sl]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 809f 	beq.w	8007402 <_svfiprintf_r+0x1c6>
 80072c4:	2300      	movs	r3, #0
 80072c6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ce:	f10a 0a01 	add.w	sl, sl, #1
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	9307      	str	r3, [sp, #28]
 80072d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072da:	931a      	str	r3, [sp, #104]	@ 0x68
 80072dc:	4654      	mov	r4, sl
 80072de:	2205      	movs	r2, #5
 80072e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e4:	484e      	ldr	r0, [pc, #312]	@ (8007420 <_svfiprintf_r+0x1e4>)
 80072e6:	f7f9 f803 	bl	80002f0 <memchr>
 80072ea:	9a04      	ldr	r2, [sp, #16]
 80072ec:	b9d8      	cbnz	r0, 8007326 <_svfiprintf_r+0xea>
 80072ee:	06d0      	lsls	r0, r2, #27
 80072f0:	bf44      	itt	mi
 80072f2:	2320      	movmi	r3, #32
 80072f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f8:	0711      	lsls	r1, r2, #28
 80072fa:	bf44      	itt	mi
 80072fc:	232b      	movmi	r3, #43	@ 0x2b
 80072fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007302:	f89a 3000 	ldrb.w	r3, [sl]
 8007306:	2b2a      	cmp	r3, #42	@ 0x2a
 8007308:	d015      	beq.n	8007336 <_svfiprintf_r+0xfa>
 800730a:	9a07      	ldr	r2, [sp, #28]
 800730c:	4654      	mov	r4, sl
 800730e:	2000      	movs	r0, #0
 8007310:	f04f 0c0a 	mov.w	ip, #10
 8007314:	4621      	mov	r1, r4
 8007316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800731a:	3b30      	subs	r3, #48	@ 0x30
 800731c:	2b09      	cmp	r3, #9
 800731e:	d94b      	bls.n	80073b8 <_svfiprintf_r+0x17c>
 8007320:	b1b0      	cbz	r0, 8007350 <_svfiprintf_r+0x114>
 8007322:	9207      	str	r2, [sp, #28]
 8007324:	e014      	b.n	8007350 <_svfiprintf_r+0x114>
 8007326:	eba0 0308 	sub.w	r3, r0, r8
 800732a:	fa09 f303 	lsl.w	r3, r9, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	46a2      	mov	sl, r4
 8007334:	e7d2      	b.n	80072dc <_svfiprintf_r+0xa0>
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	1d19      	adds	r1, r3, #4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	9103      	str	r1, [sp, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfbb      	ittet	lt
 8007342:	425b      	neglt	r3, r3
 8007344:	f042 0202 	orrlt.w	r2, r2, #2
 8007348:	9307      	strge	r3, [sp, #28]
 800734a:	9307      	strlt	r3, [sp, #28]
 800734c:	bfb8      	it	lt
 800734e:	9204      	strlt	r2, [sp, #16]
 8007350:	7823      	ldrb	r3, [r4, #0]
 8007352:	2b2e      	cmp	r3, #46	@ 0x2e
 8007354:	d10a      	bne.n	800736c <_svfiprintf_r+0x130>
 8007356:	7863      	ldrb	r3, [r4, #1]
 8007358:	2b2a      	cmp	r3, #42	@ 0x2a
 800735a:	d132      	bne.n	80073c2 <_svfiprintf_r+0x186>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	9203      	str	r2, [sp, #12]
 8007364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007368:	3402      	adds	r4, #2
 800736a:	9305      	str	r3, [sp, #20]
 800736c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007430 <_svfiprintf_r+0x1f4>
 8007370:	7821      	ldrb	r1, [r4, #0]
 8007372:	2203      	movs	r2, #3
 8007374:	4650      	mov	r0, sl
 8007376:	f7f8 ffbb 	bl	80002f0 <memchr>
 800737a:	b138      	cbz	r0, 800738c <_svfiprintf_r+0x150>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	eba0 000a 	sub.w	r0, r0, sl
 8007382:	2240      	movs	r2, #64	@ 0x40
 8007384:	4082      	lsls	r2, r0
 8007386:	4313      	orrs	r3, r2
 8007388:	3401      	adds	r4, #1
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007390:	4824      	ldr	r0, [pc, #144]	@ (8007424 <_svfiprintf_r+0x1e8>)
 8007392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007396:	2206      	movs	r2, #6
 8007398:	f7f8 ffaa 	bl	80002f0 <memchr>
 800739c:	2800      	cmp	r0, #0
 800739e:	d036      	beq.n	800740e <_svfiprintf_r+0x1d2>
 80073a0:	4b21      	ldr	r3, [pc, #132]	@ (8007428 <_svfiprintf_r+0x1ec>)
 80073a2:	bb1b      	cbnz	r3, 80073ec <_svfiprintf_r+0x1b0>
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	3307      	adds	r3, #7
 80073a8:	f023 0307 	bic.w	r3, r3, #7
 80073ac:	3308      	adds	r3, #8
 80073ae:	9303      	str	r3, [sp, #12]
 80073b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b2:	4433      	add	r3, r6
 80073b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073b6:	e76a      	b.n	800728e <_svfiprintf_r+0x52>
 80073b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073bc:	460c      	mov	r4, r1
 80073be:	2001      	movs	r0, #1
 80073c0:	e7a8      	b.n	8007314 <_svfiprintf_r+0xd8>
 80073c2:	2300      	movs	r3, #0
 80073c4:	3401      	adds	r4, #1
 80073c6:	9305      	str	r3, [sp, #20]
 80073c8:	4619      	mov	r1, r3
 80073ca:	f04f 0c0a 	mov.w	ip, #10
 80073ce:	4620      	mov	r0, r4
 80073d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d4:	3a30      	subs	r2, #48	@ 0x30
 80073d6:	2a09      	cmp	r2, #9
 80073d8:	d903      	bls.n	80073e2 <_svfiprintf_r+0x1a6>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0c6      	beq.n	800736c <_svfiprintf_r+0x130>
 80073de:	9105      	str	r1, [sp, #20]
 80073e0:	e7c4      	b.n	800736c <_svfiprintf_r+0x130>
 80073e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80073e6:	4604      	mov	r4, r0
 80073e8:	2301      	movs	r3, #1
 80073ea:	e7f0      	b.n	80073ce <_svfiprintf_r+0x192>
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4b0e      	ldr	r3, [pc, #56]	@ (800742c <_svfiprintf_r+0x1f0>)
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	4638      	mov	r0, r7
 80073f8:	f3af 8000 	nop.w
 80073fc:	1c42      	adds	r2, r0, #1
 80073fe:	4606      	mov	r6, r0
 8007400:	d1d6      	bne.n	80073b0 <_svfiprintf_r+0x174>
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	065b      	lsls	r3, r3, #25
 8007406:	f53f af2d 	bmi.w	8007264 <_svfiprintf_r+0x28>
 800740a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800740c:	e72c      	b.n	8007268 <_svfiprintf_r+0x2c>
 800740e:	ab03      	add	r3, sp, #12
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	462a      	mov	r2, r5
 8007414:	4b05      	ldr	r3, [pc, #20]	@ (800742c <_svfiprintf_r+0x1f0>)
 8007416:	a904      	add	r1, sp, #16
 8007418:	4638      	mov	r0, r7
 800741a:	f000 f879 	bl	8007510 <_printf_i>
 800741e:	e7ed      	b.n	80073fc <_svfiprintf_r+0x1c0>
 8007420:	08007888 	.word	0x08007888
 8007424:	08007892 	.word	0x08007892
 8007428:	00000000 	.word	0x00000000
 800742c:	08007185 	.word	0x08007185
 8007430:	0800788e 	.word	0x0800788e

08007434 <_printf_common>:
 8007434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007438:	4616      	mov	r6, r2
 800743a:	4698      	mov	r8, r3
 800743c:	688a      	ldr	r2, [r1, #8]
 800743e:	690b      	ldr	r3, [r1, #16]
 8007440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007444:	4293      	cmp	r3, r2
 8007446:	bfb8      	it	lt
 8007448:	4613      	movlt	r3, r2
 800744a:	6033      	str	r3, [r6, #0]
 800744c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007450:	4607      	mov	r7, r0
 8007452:	460c      	mov	r4, r1
 8007454:	b10a      	cbz	r2, 800745a <_printf_common+0x26>
 8007456:	3301      	adds	r3, #1
 8007458:	6033      	str	r3, [r6, #0]
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	0699      	lsls	r1, r3, #26
 800745e:	bf42      	ittt	mi
 8007460:	6833      	ldrmi	r3, [r6, #0]
 8007462:	3302      	addmi	r3, #2
 8007464:	6033      	strmi	r3, [r6, #0]
 8007466:	6825      	ldr	r5, [r4, #0]
 8007468:	f015 0506 	ands.w	r5, r5, #6
 800746c:	d106      	bne.n	800747c <_printf_common+0x48>
 800746e:	f104 0a19 	add.w	sl, r4, #25
 8007472:	68e3      	ldr	r3, [r4, #12]
 8007474:	6832      	ldr	r2, [r6, #0]
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	42ab      	cmp	r3, r5
 800747a:	dc26      	bgt.n	80074ca <_printf_common+0x96>
 800747c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	3b00      	subs	r3, #0
 8007484:	bf18      	it	ne
 8007486:	2301      	movne	r3, #1
 8007488:	0692      	lsls	r2, r2, #26
 800748a:	d42b      	bmi.n	80074e4 <_printf_common+0xb0>
 800748c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007490:	4641      	mov	r1, r8
 8007492:	4638      	mov	r0, r7
 8007494:	47c8      	blx	r9
 8007496:	3001      	adds	r0, #1
 8007498:	d01e      	beq.n	80074d8 <_printf_common+0xa4>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	6922      	ldr	r2, [r4, #16]
 800749e:	f003 0306 	and.w	r3, r3, #6
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	bf02      	ittt	eq
 80074a6:	68e5      	ldreq	r5, [r4, #12]
 80074a8:	6833      	ldreq	r3, [r6, #0]
 80074aa:	1aed      	subeq	r5, r5, r3
 80074ac:	68a3      	ldr	r3, [r4, #8]
 80074ae:	bf0c      	ite	eq
 80074b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074b4:	2500      	movne	r5, #0
 80074b6:	4293      	cmp	r3, r2
 80074b8:	bfc4      	itt	gt
 80074ba:	1a9b      	subgt	r3, r3, r2
 80074bc:	18ed      	addgt	r5, r5, r3
 80074be:	2600      	movs	r6, #0
 80074c0:	341a      	adds	r4, #26
 80074c2:	42b5      	cmp	r5, r6
 80074c4:	d11a      	bne.n	80074fc <_printf_common+0xc8>
 80074c6:	2000      	movs	r0, #0
 80074c8:	e008      	b.n	80074dc <_printf_common+0xa8>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4652      	mov	r2, sl
 80074ce:	4641      	mov	r1, r8
 80074d0:	4638      	mov	r0, r7
 80074d2:	47c8      	blx	r9
 80074d4:	3001      	adds	r0, #1
 80074d6:	d103      	bne.n	80074e0 <_printf_common+0xac>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e0:	3501      	adds	r5, #1
 80074e2:	e7c6      	b.n	8007472 <_printf_common+0x3e>
 80074e4:	18e1      	adds	r1, r4, r3
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	2030      	movs	r0, #48	@ 0x30
 80074ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074ee:	4422      	add	r2, r4
 80074f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074f8:	3302      	adds	r3, #2
 80074fa:	e7c7      	b.n	800748c <_printf_common+0x58>
 80074fc:	2301      	movs	r3, #1
 80074fe:	4622      	mov	r2, r4
 8007500:	4641      	mov	r1, r8
 8007502:	4638      	mov	r0, r7
 8007504:	47c8      	blx	r9
 8007506:	3001      	adds	r0, #1
 8007508:	d0e6      	beq.n	80074d8 <_printf_common+0xa4>
 800750a:	3601      	adds	r6, #1
 800750c:	e7d9      	b.n	80074c2 <_printf_common+0x8e>
	...

08007510 <_printf_i>:
 8007510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	7e0f      	ldrb	r7, [r1, #24]
 8007516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007518:	2f78      	cmp	r7, #120	@ 0x78
 800751a:	4691      	mov	r9, r2
 800751c:	4680      	mov	r8, r0
 800751e:	460c      	mov	r4, r1
 8007520:	469a      	mov	sl, r3
 8007522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007526:	d807      	bhi.n	8007538 <_printf_i+0x28>
 8007528:	2f62      	cmp	r7, #98	@ 0x62
 800752a:	d80a      	bhi.n	8007542 <_printf_i+0x32>
 800752c:	2f00      	cmp	r7, #0
 800752e:	f000 80d2 	beq.w	80076d6 <_printf_i+0x1c6>
 8007532:	2f58      	cmp	r7, #88	@ 0x58
 8007534:	f000 80b9 	beq.w	80076aa <_printf_i+0x19a>
 8007538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800753c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007540:	e03a      	b.n	80075b8 <_printf_i+0xa8>
 8007542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007546:	2b15      	cmp	r3, #21
 8007548:	d8f6      	bhi.n	8007538 <_printf_i+0x28>
 800754a:	a101      	add	r1, pc, #4	@ (adr r1, 8007550 <_printf_i+0x40>)
 800754c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007550:	080075a9 	.word	0x080075a9
 8007554:	080075bd 	.word	0x080075bd
 8007558:	08007539 	.word	0x08007539
 800755c:	08007539 	.word	0x08007539
 8007560:	08007539 	.word	0x08007539
 8007564:	08007539 	.word	0x08007539
 8007568:	080075bd 	.word	0x080075bd
 800756c:	08007539 	.word	0x08007539
 8007570:	08007539 	.word	0x08007539
 8007574:	08007539 	.word	0x08007539
 8007578:	08007539 	.word	0x08007539
 800757c:	080076bd 	.word	0x080076bd
 8007580:	080075e7 	.word	0x080075e7
 8007584:	08007677 	.word	0x08007677
 8007588:	08007539 	.word	0x08007539
 800758c:	08007539 	.word	0x08007539
 8007590:	080076df 	.word	0x080076df
 8007594:	08007539 	.word	0x08007539
 8007598:	080075e7 	.word	0x080075e7
 800759c:	08007539 	.word	0x08007539
 80075a0:	08007539 	.word	0x08007539
 80075a4:	0800767f 	.word	0x0800767f
 80075a8:	6833      	ldr	r3, [r6, #0]
 80075aa:	1d1a      	adds	r2, r3, #4
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6032      	str	r2, [r6, #0]
 80075b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075b8:	2301      	movs	r3, #1
 80075ba:	e09d      	b.n	80076f8 <_printf_i+0x1e8>
 80075bc:	6833      	ldr	r3, [r6, #0]
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	1d19      	adds	r1, r3, #4
 80075c2:	6031      	str	r1, [r6, #0]
 80075c4:	0606      	lsls	r6, r0, #24
 80075c6:	d501      	bpl.n	80075cc <_printf_i+0xbc>
 80075c8:	681d      	ldr	r5, [r3, #0]
 80075ca:	e003      	b.n	80075d4 <_printf_i+0xc4>
 80075cc:	0645      	lsls	r5, r0, #25
 80075ce:	d5fb      	bpl.n	80075c8 <_printf_i+0xb8>
 80075d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075d4:	2d00      	cmp	r5, #0
 80075d6:	da03      	bge.n	80075e0 <_printf_i+0xd0>
 80075d8:	232d      	movs	r3, #45	@ 0x2d
 80075da:	426d      	negs	r5, r5
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075e0:	4859      	ldr	r0, [pc, #356]	@ (8007748 <_printf_i+0x238>)
 80075e2:	230a      	movs	r3, #10
 80075e4:	e011      	b.n	800760a <_printf_i+0xfa>
 80075e6:	6821      	ldr	r1, [r4, #0]
 80075e8:	6833      	ldr	r3, [r6, #0]
 80075ea:	0608      	lsls	r0, r1, #24
 80075ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80075f0:	d402      	bmi.n	80075f8 <_printf_i+0xe8>
 80075f2:	0649      	lsls	r1, r1, #25
 80075f4:	bf48      	it	mi
 80075f6:	b2ad      	uxthmi	r5, r5
 80075f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80075fa:	4853      	ldr	r0, [pc, #332]	@ (8007748 <_printf_i+0x238>)
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	bf14      	ite	ne
 8007600:	230a      	movne	r3, #10
 8007602:	2308      	moveq	r3, #8
 8007604:	2100      	movs	r1, #0
 8007606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800760a:	6866      	ldr	r6, [r4, #4]
 800760c:	60a6      	str	r6, [r4, #8]
 800760e:	2e00      	cmp	r6, #0
 8007610:	bfa2      	ittt	ge
 8007612:	6821      	ldrge	r1, [r4, #0]
 8007614:	f021 0104 	bicge.w	r1, r1, #4
 8007618:	6021      	strge	r1, [r4, #0]
 800761a:	b90d      	cbnz	r5, 8007620 <_printf_i+0x110>
 800761c:	2e00      	cmp	r6, #0
 800761e:	d04b      	beq.n	80076b8 <_printf_i+0x1a8>
 8007620:	4616      	mov	r6, r2
 8007622:	fbb5 f1f3 	udiv	r1, r5, r3
 8007626:	fb03 5711 	mls	r7, r3, r1, r5
 800762a:	5dc7      	ldrb	r7, [r0, r7]
 800762c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007630:	462f      	mov	r7, r5
 8007632:	42bb      	cmp	r3, r7
 8007634:	460d      	mov	r5, r1
 8007636:	d9f4      	bls.n	8007622 <_printf_i+0x112>
 8007638:	2b08      	cmp	r3, #8
 800763a:	d10b      	bne.n	8007654 <_printf_i+0x144>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	07df      	lsls	r7, r3, #31
 8007640:	d508      	bpl.n	8007654 <_printf_i+0x144>
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	6861      	ldr	r1, [r4, #4]
 8007646:	4299      	cmp	r1, r3
 8007648:	bfde      	ittt	le
 800764a:	2330      	movle	r3, #48	@ 0x30
 800764c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007650:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007654:	1b92      	subs	r2, r2, r6
 8007656:	6122      	str	r2, [r4, #16]
 8007658:	f8cd a000 	str.w	sl, [sp]
 800765c:	464b      	mov	r3, r9
 800765e:	aa03      	add	r2, sp, #12
 8007660:	4621      	mov	r1, r4
 8007662:	4640      	mov	r0, r8
 8007664:	f7ff fee6 	bl	8007434 <_printf_common>
 8007668:	3001      	adds	r0, #1
 800766a:	d14a      	bne.n	8007702 <_printf_i+0x1f2>
 800766c:	f04f 30ff 	mov.w	r0, #4294967295
 8007670:	b004      	add	sp, #16
 8007672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	f043 0320 	orr.w	r3, r3, #32
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	4833      	ldr	r0, [pc, #204]	@ (800774c <_printf_i+0x23c>)
 8007680:	2778      	movs	r7, #120	@ 0x78
 8007682:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	6831      	ldr	r1, [r6, #0]
 800768a:	061f      	lsls	r7, r3, #24
 800768c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007690:	d402      	bmi.n	8007698 <_printf_i+0x188>
 8007692:	065f      	lsls	r7, r3, #25
 8007694:	bf48      	it	mi
 8007696:	b2ad      	uxthmi	r5, r5
 8007698:	6031      	str	r1, [r6, #0]
 800769a:	07d9      	lsls	r1, r3, #31
 800769c:	bf44      	itt	mi
 800769e:	f043 0320 	orrmi.w	r3, r3, #32
 80076a2:	6023      	strmi	r3, [r4, #0]
 80076a4:	b11d      	cbz	r5, 80076ae <_printf_i+0x19e>
 80076a6:	2310      	movs	r3, #16
 80076a8:	e7ac      	b.n	8007604 <_printf_i+0xf4>
 80076aa:	4827      	ldr	r0, [pc, #156]	@ (8007748 <_printf_i+0x238>)
 80076ac:	e7e9      	b.n	8007682 <_printf_i+0x172>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	f023 0320 	bic.w	r3, r3, #32
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	e7f6      	b.n	80076a6 <_printf_i+0x196>
 80076b8:	4616      	mov	r6, r2
 80076ba:	e7bd      	b.n	8007638 <_printf_i+0x128>
 80076bc:	6833      	ldr	r3, [r6, #0]
 80076be:	6825      	ldr	r5, [r4, #0]
 80076c0:	6961      	ldr	r1, [r4, #20]
 80076c2:	1d18      	adds	r0, r3, #4
 80076c4:	6030      	str	r0, [r6, #0]
 80076c6:	062e      	lsls	r6, r5, #24
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	d501      	bpl.n	80076d0 <_printf_i+0x1c0>
 80076cc:	6019      	str	r1, [r3, #0]
 80076ce:	e002      	b.n	80076d6 <_printf_i+0x1c6>
 80076d0:	0668      	lsls	r0, r5, #25
 80076d2:	d5fb      	bpl.n	80076cc <_printf_i+0x1bc>
 80076d4:	8019      	strh	r1, [r3, #0]
 80076d6:	2300      	movs	r3, #0
 80076d8:	6123      	str	r3, [r4, #16]
 80076da:	4616      	mov	r6, r2
 80076dc:	e7bc      	b.n	8007658 <_printf_i+0x148>
 80076de:	6833      	ldr	r3, [r6, #0]
 80076e0:	1d1a      	adds	r2, r3, #4
 80076e2:	6032      	str	r2, [r6, #0]
 80076e4:	681e      	ldr	r6, [r3, #0]
 80076e6:	6862      	ldr	r2, [r4, #4]
 80076e8:	2100      	movs	r1, #0
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7f8 fe00 	bl	80002f0 <memchr>
 80076f0:	b108      	cbz	r0, 80076f6 <_printf_i+0x1e6>
 80076f2:	1b80      	subs	r0, r0, r6
 80076f4:	6060      	str	r0, [r4, #4]
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	2300      	movs	r3, #0
 80076fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007700:	e7aa      	b.n	8007658 <_printf_i+0x148>
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	4632      	mov	r2, r6
 8007706:	4649      	mov	r1, r9
 8007708:	4640      	mov	r0, r8
 800770a:	47d0      	blx	sl
 800770c:	3001      	adds	r0, #1
 800770e:	d0ad      	beq.n	800766c <_printf_i+0x15c>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	079b      	lsls	r3, r3, #30
 8007714:	d413      	bmi.n	800773e <_printf_i+0x22e>
 8007716:	68e0      	ldr	r0, [r4, #12]
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	4298      	cmp	r0, r3
 800771c:	bfb8      	it	lt
 800771e:	4618      	movlt	r0, r3
 8007720:	e7a6      	b.n	8007670 <_printf_i+0x160>
 8007722:	2301      	movs	r3, #1
 8007724:	4632      	mov	r2, r6
 8007726:	4649      	mov	r1, r9
 8007728:	4640      	mov	r0, r8
 800772a:	47d0      	blx	sl
 800772c:	3001      	adds	r0, #1
 800772e:	d09d      	beq.n	800766c <_printf_i+0x15c>
 8007730:	3501      	adds	r5, #1
 8007732:	68e3      	ldr	r3, [r4, #12]
 8007734:	9903      	ldr	r1, [sp, #12]
 8007736:	1a5b      	subs	r3, r3, r1
 8007738:	42ab      	cmp	r3, r5
 800773a:	dcf2      	bgt.n	8007722 <_printf_i+0x212>
 800773c:	e7eb      	b.n	8007716 <_printf_i+0x206>
 800773e:	2500      	movs	r5, #0
 8007740:	f104 0619 	add.w	r6, r4, #25
 8007744:	e7f5      	b.n	8007732 <_printf_i+0x222>
 8007746:	bf00      	nop
 8007748:	08007899 	.word	0x08007899
 800774c:	080078aa 	.word	0x080078aa

08007750 <memmove>:
 8007750:	4288      	cmp	r0, r1
 8007752:	b510      	push	{r4, lr}
 8007754:	eb01 0402 	add.w	r4, r1, r2
 8007758:	d902      	bls.n	8007760 <memmove+0x10>
 800775a:	4284      	cmp	r4, r0
 800775c:	4623      	mov	r3, r4
 800775e:	d807      	bhi.n	8007770 <memmove+0x20>
 8007760:	1e43      	subs	r3, r0, #1
 8007762:	42a1      	cmp	r1, r4
 8007764:	d008      	beq.n	8007778 <memmove+0x28>
 8007766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800776a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800776e:	e7f8      	b.n	8007762 <memmove+0x12>
 8007770:	4402      	add	r2, r0
 8007772:	4601      	mov	r1, r0
 8007774:	428a      	cmp	r2, r1
 8007776:	d100      	bne.n	800777a <memmove+0x2a>
 8007778:	bd10      	pop	{r4, pc}
 800777a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800777e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007782:	e7f7      	b.n	8007774 <memmove+0x24>

08007784 <_sbrk_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d06      	ldr	r5, [pc, #24]	@ (80077a0 <_sbrk_r+0x1c>)
 8007788:	2300      	movs	r3, #0
 800778a:	4604      	mov	r4, r0
 800778c:	4608      	mov	r0, r1
 800778e:	602b      	str	r3, [r5, #0]
 8007790:	f7f9 fc0a 	bl	8000fa8 <_sbrk>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_sbrk_r+0x1a>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_sbrk_r+0x1a>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	24000328 	.word	0x24000328

080077a4 <memcpy>:
 80077a4:	440a      	add	r2, r1
 80077a6:	4291      	cmp	r1, r2
 80077a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ac:	d100      	bne.n	80077b0 <memcpy+0xc>
 80077ae:	4770      	bx	lr
 80077b0:	b510      	push	{r4, lr}
 80077b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ba:	4291      	cmp	r1, r2
 80077bc:	d1f9      	bne.n	80077b2 <memcpy+0xe>
 80077be:	bd10      	pop	{r4, pc}

080077c0 <_realloc_r>:
 80077c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c4:	4680      	mov	r8, r0
 80077c6:	4615      	mov	r5, r2
 80077c8:	460c      	mov	r4, r1
 80077ca:	b921      	cbnz	r1, 80077d6 <_realloc_r+0x16>
 80077cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077d0:	4611      	mov	r1, r2
 80077d2:	f7ff bc4b 	b.w	800706c <_malloc_r>
 80077d6:	b92a      	cbnz	r2, 80077e4 <_realloc_r+0x24>
 80077d8:	f7ff fbdc 	bl	8006f94 <_free_r>
 80077dc:	2400      	movs	r4, #0
 80077de:	4620      	mov	r0, r4
 80077e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e4:	f000 f81a 	bl	800781c <_malloc_usable_size_r>
 80077e8:	4285      	cmp	r5, r0
 80077ea:	4606      	mov	r6, r0
 80077ec:	d802      	bhi.n	80077f4 <_realloc_r+0x34>
 80077ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077f2:	d8f4      	bhi.n	80077de <_realloc_r+0x1e>
 80077f4:	4629      	mov	r1, r5
 80077f6:	4640      	mov	r0, r8
 80077f8:	f7ff fc38 	bl	800706c <_malloc_r>
 80077fc:	4607      	mov	r7, r0
 80077fe:	2800      	cmp	r0, #0
 8007800:	d0ec      	beq.n	80077dc <_realloc_r+0x1c>
 8007802:	42b5      	cmp	r5, r6
 8007804:	462a      	mov	r2, r5
 8007806:	4621      	mov	r1, r4
 8007808:	bf28      	it	cs
 800780a:	4632      	movcs	r2, r6
 800780c:	f7ff ffca 	bl	80077a4 <memcpy>
 8007810:	4621      	mov	r1, r4
 8007812:	4640      	mov	r0, r8
 8007814:	f7ff fbbe 	bl	8006f94 <_free_r>
 8007818:	463c      	mov	r4, r7
 800781a:	e7e0      	b.n	80077de <_realloc_r+0x1e>

0800781c <_malloc_usable_size_r>:
 800781c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007820:	1f18      	subs	r0, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	bfbc      	itt	lt
 8007826:	580b      	ldrlt	r3, [r1, r0]
 8007828:	18c0      	addlt	r0, r0, r3
 800782a:	4770      	bx	lr

0800782c <_init>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr

08007838 <_fini>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr
