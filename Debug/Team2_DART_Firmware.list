
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005314  08005314  00006314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005320  08005320  00006320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08005324  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  08005334  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  08005334  000070c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f00f  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c4b  00000000  00000000  0001604d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a10  00000000  00000000  00017c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007be  00000000  00000000  000186a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000354be  00000000  00000000  00018e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e0d8  00000000  00000000  0004e324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155624  00000000  00000000  0005c3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b1a20  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002920  00000000  00000000  001b1a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001b4384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080052b4 	.word	0x080052b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080052b4 	.word	0x080052b4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08b      	sub	sp, #44	@ 0x2c
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char message[40] = {'\0'};
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2224      	movs	r2, #36	@ 0x24
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 fe3f 	bl	800525c <memset>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005de:	f000 f909 	bl	80007f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fa9d 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f81b 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f8cf 	bl	800078c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f881 	bl	80006f4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  strcpy(message, "Hello World \n \r");
 80005f2:	463b      	mov	r3, r7
 80005f4:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <main+0x50>)
 80005f6:	461c      	mov	r4, r3
 80005f8:	4613      	mov	r3, r2
 80005fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 100);
 8000600:	4639      	mov	r1, r7
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	2228      	movs	r2, #40	@ 0x28
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <main+0x54>)
 8000608:	f003 fd0e 	bl	8004028 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800060c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000610:	f000 fb18 	bl	8000c44 <HAL_Delay>
	  strcpy(message, "Hello World \n \r");
 8000614:	bf00      	nop
 8000616:	e7ec      	b.n	80005f2 <main+0x2a>
 8000618:	080052cc 	.word	0x080052cc
 800061c:	2400002c 	.word	0x2400002c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	@ 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 fe14 	bl	800525c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fe0e 	bl	800525c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000640:	2002      	movs	r0, #2
 8000642:	f000 fe55 	bl	80012f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xcc>)
 800064c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800064e:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <SystemClock_Config+0xcc>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000656:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <SystemClock_Config+0xcc>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067c:	bf00      	nop
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068a:	d1f8      	bne.n	800067e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000690:	2301      	movs	r3, #1
 8000692:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2340      	movs	r3, #64	@ 0x40
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fe5f 	bl	8001364 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006ac:	f000 f8ce 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	233f      	movs	r3, #63	@ 0x3f
 80006b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2101      	movs	r1, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fa9f 	bl	8001c18 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e0:	f000 f8b4 	bl	800084c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3770      	adds	r7, #112	@ 0x70
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58000400 	.word	0x58000400
 80006f0:	58024800 	.word	0x58024800

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 80006fa:	4a23      	ldr	r2, [pc, #140]	@ (8000788 <MX_USART2_UART_Init+0x94>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073c:	4811      	ldr	r0, [pc, #68]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 800073e:	f003 fc23 	bl	8003f88 <HAL_UART_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000748:	f000 f880 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000750:	f004 fcb9 	bl	80050c6 <HAL_UARTEx_SetTxFifoThreshold>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800075a:	f000 f877 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4808      	ldr	r0, [pc, #32]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000762:	f004 fcee 	bl	8005142 <HAL_UARTEx_SetRxFifoThreshold>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800076c:	f000 f86e 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_USART2_UART_Init+0x90>)
 8000772:	f004 fc6f 	bl	8005054 <HAL_UARTEx_DisableFifoMode>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f866 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2400002c 	.word	0x2400002c
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_GPIO_Init+0x60>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a11      	ldr	r2, [pc, #68]	@ (80007ec <MX_GPIO_Init+0x60>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_GPIO_Init+0x60>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <MX_GPIO_Init+0x64>)
 80007c4:	f000 fd7a 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007c8:	2320      	movs	r3, #32
 80007ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_GPIO_Init+0x64>)
 80007de:	f000 fbbd 	bl	8000f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	58024400 	.word	0x58024400
 80007f0:	58020000 	.word	0x58020000

080007f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000806:	f000 fb31 	bl	8000e6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800080a:	2301      	movs	r3, #1
 800080c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800080e:	2300      	movs	r3, #0
 8000810:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000816:	231f      	movs	r3, #31
 8000818:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800081a:	2387      	movs	r3, #135	@ 0x87
 800081c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800081e:	2300      	movs	r3, #0
 8000820:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000822:	2300      	movs	r3, #0
 8000824:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000826:	2301      	movs	r3, #1
 8000828:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800082a:	2301      	movs	r3, #1
 800082c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000836:	463b      	mov	r3, r7
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fb4f 	bl	8000edc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800083e:	2004      	movs	r0, #4
 8000840:	f000 fb2c 	bl	8000e9c <HAL_MPU_Enable>

}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <HAL_MspInit+0x30>)
 8000860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000864:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x30>)
 8000866:	f043 0302 	orr.w	r3, r3, #2
 800086a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x30>)
 8000870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	58024400 	.word	0x58024400

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0ba      	sub	sp, #232	@ 0xe8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	22c0      	movs	r2, #192	@ 0xc0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fcd5 	bl	800525c <memset>
  if(huart->Instance==USART2)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a26      	ldr	r2, [pc, #152]	@ (8000950 <HAL_UART_MspInit+0xc4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d145      	bne.n	8000948 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008bc:	f04f 0202 	mov.w	r2, #2
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fd2c 	bl	8002330 <HAL_RCCEx_PeriphCLKConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80008de:	f7ff ffb5 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <HAL_UART_MspInit+0xc8>)
 80008e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <HAL_UART_MspInit+0xc8>)
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_UART_MspInit+0xc8>)
 80008f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_UART_MspInit+0xc8>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <HAL_UART_MspInit+0xc8>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <HAL_UART_MspInit+0xc8>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091e:	230c      	movs	r3, #12
 8000920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <HAL_UART_MspInit+0xcc>)
 8000944:	f000 fb0a 	bl	8000f5c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000948:	bf00      	nop
 800094a:	37e8      	adds	r7, #232	@ 0xe8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40004400 	.word	0x40004400
 8000954:	58024400 	.word	0x58024400
 8000958:	58020000 	.word	0x58020000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b2:	f000 f927 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c0:	4b37      	ldr	r3, [pc, #220]	@ (8000aa0 <SystemInit+0xe4>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c6:	4a36      	ldr	r2, [pc, #216]	@ (8000aa0 <SystemInit+0xe4>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d0:	4b34      	ldr	r3, [pc, #208]	@ (8000aa4 <SystemInit+0xe8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	2b06      	cmp	r3, #6
 80009da:	d807      	bhi.n	80009ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009dc:	4b31      	ldr	r3, [pc, #196]	@ (8000aa4 <SystemInit+0xe8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f023 030f 	bic.w	r3, r3, #15
 80009e4:	4a2f      	ldr	r2, [pc, #188]	@ (8000aa4 <SystemInit+0xe8>)
 80009e6:	f043 0307 	orr.w	r3, r3, #7
 80009ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009ec:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa8 <SystemInit+0xec>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa8 <SystemInit+0xec>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009f8:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa8 <SystemInit+0xec>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <SystemInit+0xec>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4929      	ldr	r1, [pc, #164]	@ (8000aa8 <SystemInit+0xec>)
 8000a04:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <SystemInit+0xf0>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <SystemInit+0xe8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d007      	beq.n	8000a26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a16:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <SystemInit+0xe8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f023 030f 	bic.w	r3, r3, #15
 8000a1e:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <SystemInit+0xe8>)
 8000a20:	f043 0307 	orr.w	r3, r3, #7
 8000a24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <SystemInit+0xec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <SystemInit+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <SystemInit+0xec>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <SystemInit+0xec>)
 8000a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab0 <SystemInit+0xf4>)
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <SystemInit+0xec>)
 8000a40:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab4 <SystemInit+0xf8>)
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a44:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <SystemInit+0xec>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <SystemInit+0xfc>)
 8000a48:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <SystemInit+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <SystemInit+0xec>)
 8000a52:	4a19      	ldr	r2, [pc, #100]	@ (8000ab8 <SystemInit+0xfc>)
 8000a54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <SystemInit+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <SystemInit+0xec>)
 8000a5e:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <SystemInit+0xfc>)
 8000a60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <SystemInit+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <SystemInit+0xec>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <SystemInit+0xec>)
 8000a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <SystemInit+0xec>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <SystemInit+0x100>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <SystemInit+0x104>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a86:	d202      	bcs.n	8000a8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <SystemInit+0x108>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <SystemInit+0x10c>)
 8000a90:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00
 8000aa4:	52002000 	.word	0x52002000
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ab0:	02020200 	.word	0x02020200
 8000ab4:	01ff0000 	.word	0x01ff0000
 8000ab8:	01010280 	.word	0x01010280
 8000abc:	5c001000 	.word	0x5c001000
 8000ac0:	ffff0000 	.word	0xffff0000
 8000ac4:	51008108 	.word	0x51008108
 8000ac8:	52004000 	.word	0x52004000

08000acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad0:	f7ff ff74 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad6:	490d      	ldr	r1, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aec:	4c0a      	ldr	r4, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afa:	f004 fbb7 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff fd63 	bl	80005c8 <main>
  bx  lr
 8000b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b0c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b10:	08005324 	.word	0x08005324
  ldr r2, =_sbss
 8000b14:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b18:	240000c4 	.word	0x240000c4

08000b1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC3_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 f96e 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b2c:	f001 fa2a 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8000b30:	4602      	mov	r2, r0
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_Init+0x68>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	f003 030f 	and.w	r3, r3, #15
 8000b3c:	4913      	ldr	r1, [pc, #76]	@ (8000b8c <HAL_Init+0x6c>)
 8000b3e:	5ccb      	ldrb	r3, [r1, r3]
 8000b40:	f003 031f 	and.w	r3, r3, #31
 8000b44:	fa22 f303 	lsr.w	r3, r2, r3
 8000b48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <HAL_Init+0x68>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <HAL_Init+0x6c>)
 8000b54:	5cd3      	ldrb	r3, [r2, r3]
 8000b56:	f003 031f 	and.w	r3, r3, #31
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <HAL_Init+0x70>)
 8000b62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b64:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <HAL_Init+0x74>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f814 	bl	8000b98 <HAL_InitTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e002      	b.n	8000b80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7a:	f7ff fe6d 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	080052dc 	.word	0x080052dc
 8000b90:	24000004 	.word	0x24000004
 8000b94:	24000000 	.word	0x24000000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <HAL_InitTick+0x60>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e021      	b.n	8000bf0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <HAL_InitTick+0x64>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <HAL_InitTick+0x60>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f945 	bl	8000e52 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f91d 	bl	8000e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <HAL_InitTick+0x68>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2400000c 	.word	0x2400000c
 8000bfc:	24000000 	.word	0x24000000
 8000c00:	24000008 	.word	0x24000008

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2400000c 	.word	0x2400000c
 8000c28:	240000c0 	.word	0x240000c0

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	240000c0 	.word	0x240000c0

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffde 	bl	8000c2c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2400000c 	.word	0x2400000c

08000c8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_GetREVID+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	0c1b      	lsrs	r3, r3, #16
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	5c001000 	.word	0x5c001000

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00
 8000ce8:	05fa0000 	.word	0x05fa0000

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	@ (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	@ 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff47 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff5e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffb2 	bl	8000dc4 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e70:	f3bf 8f5f 	dmb	sy
}
 8000e74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <HAL_MPU_Disable+0x28>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7a:	4a06      	ldr	r2, [pc, #24]	@ (8000e94 <HAL_MPU_Disable+0x28>)
 8000e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e80:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e82:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <HAL_MPU_Disable+0x2c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00
 8000e98:	e000ed90 	.word	0xe000ed90

08000e9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <HAL_MPU_Enable+0x38>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_MPU_Enable+0x3c>)
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb2:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <HAL_MPU_Enable+0x3c>)
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000eba:	f3bf 8f4f 	dsb	sy
}
 8000ebe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec0:	f3bf 8f6f 	isb	sy
}
 8000ec4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed90 	.word	0xe000ed90
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	785a      	ldrb	r2, [r3, #1]
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <HAL_MPU_ConfigRegion+0x7c>)
 8000eea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <HAL_MPU_ConfigRegion+0x7c>)
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <HAL_MPU_ConfigRegion+0x7c>)
 8000ef2:	f023 0301 	bic.w	r3, r3, #1
 8000ef6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ef8:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_MPU_ConfigRegion+0x7c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7b1b      	ldrb	r3, [r3, #12]
 8000f04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7adb      	ldrb	r3, [r3, #11]
 8000f0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7a9b      	ldrb	r3, [r3, #10]
 8000f12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7b5b      	ldrb	r3, [r3, #13]
 8000f1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7b9b      	ldrb	r3, [r3, #14]
 8000f22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7bdb      	ldrb	r3, [r3, #15]
 8000f2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7a5b      	ldrb	r3, [r3, #9]
 8000f32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7a1b      	ldrb	r3, [r3, #8]
 8000f3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f48:	6113      	str	r3, [r2, #16]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed90 	.word	0xe000ed90

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f6a:	4b89      	ldr	r3, [pc, #548]	@ (8001190 <HAL_GPIO_Init+0x234>)
 8000f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f6e:	e194      	b.n	800129a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8186 	beq.w	8001294 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <HAL_GPIO_Init+0x44>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d017      	beq.n	800103e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d123      	bne.n	8001092 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	69b9      	ldr	r1, [r7, #24]
 800108e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0203 	and.w	r2, r3, #3
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80e0 	beq.w	8001294 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001194 <HAL_GPIO_Init+0x238>)
 80010d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010da:	4a2e      	ldr	r2, [pc, #184]	@ (8001194 <HAL_GPIO_Init+0x238>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <HAL_GPIO_Init+0x238>)
 80010e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f2:	4a29      	ldr	r2, [pc, #164]	@ (8001198 <HAL_GPIO_Init+0x23c>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a20      	ldr	r2, [pc, #128]	@ (800119c <HAL_GPIO_Init+0x240>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d052      	beq.n	80011c4 <HAL_GPIO_Init+0x268>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <HAL_GPIO_Init+0x244>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d031      	beq.n	800118a <HAL_GPIO_Init+0x22e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1e      	ldr	r2, [pc, #120]	@ (80011a4 <HAL_GPIO_Init+0x248>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d02b      	beq.n	8001186 <HAL_GPIO_Init+0x22a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <HAL_GPIO_Init+0x24c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d025      	beq.n	8001182 <HAL_GPIO_Init+0x226>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <HAL_GPIO_Init+0x250>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01f      	beq.n	800117e <HAL_GPIO_Init+0x222>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <HAL_GPIO_Init+0x254>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x21e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1a      	ldr	r2, [pc, #104]	@ (80011b4 <HAL_GPIO_Init+0x258>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x21a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_GPIO_Init+0x25c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x216>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <HAL_GPIO_Init+0x260>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x212>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <HAL_GPIO_Init+0x264>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x20e>
 8001166:	2309      	movs	r3, #9
 8001168:	e02d      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800116a:	230a      	movs	r3, #10
 800116c:	e02b      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800116e:	2308      	movs	r3, #8
 8001170:	e029      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 8001172:	2307      	movs	r3, #7
 8001174:	e027      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 8001176:	2306      	movs	r3, #6
 8001178:	e025      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800117a:	2305      	movs	r3, #5
 800117c:	e023      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800117e:	2304      	movs	r3, #4
 8001180:	e021      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 8001182:	2303      	movs	r3, #3
 8001184:	e01f      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 8001186:	2302      	movs	r3, #2
 8001188:	e01d      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800118a:	2301      	movs	r3, #1
 800118c:	e01b      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800118e:	bf00      	nop
 8001190:	58000080 	.word	0x58000080
 8001194:	58024400 	.word	0x58024400
 8001198:	58000400 	.word	0x58000400
 800119c:	58020000 	.word	0x58020000
 80011a0:	58020400 	.word	0x58020400
 80011a4:	58020800 	.word	0x58020800
 80011a8:	58020c00 	.word	0x58020c00
 80011ac:	58021000 	.word	0x58021000
 80011b0:	58021400 	.word	0x58021400
 80011b4:	58021800 	.word	0x58021800
 80011b8:	58021c00 	.word	0x58021c00
 80011bc:	58022000 	.word	0x58022000
 80011c0:	58022400 	.word	0x58022400
 80011c4:	2300      	movs	r3, #0
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d6:	4938      	ldr	r1, [pc, #224]	@ (80012b8 <HAL_GPIO_Init+0x35c>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800120a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001238:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa22 f303 	lsr.w	r3, r2, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f47f ae63 	bne.w	8000f70 <HAL_GPIO_Init+0x14>
  }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3724      	adds	r7, #36	@ 0x24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	58000400 	.word	0x58000400

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <HAL_PWREx_ConfigSupply+0x70>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b04      	cmp	r3, #4
 8001302:	d00a      	beq.n	800131a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <HAL_PWREx_ConfigSupply+0x70>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e01f      	b.n	8001356 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e01d      	b.n	8001356 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <HAL_PWREx_ConfigSupply+0x70>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f023 0207 	bic.w	r2, r3, #7
 8001322:	490f      	ldr	r1, [pc, #60]	@ (8001360 <HAL_PWREx_ConfigSupply+0x70>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800132a:	f7ff fc7f 	bl	8000c2c <HAL_GetTick>
 800132e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001330:	e009      	b.n	8001346 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001332:	f7ff fc7b 	bl	8000c2c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001340:	d901      	bls.n	8001346 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e007      	b.n	8001356 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_PWREx_ConfigSupply+0x70>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001352:	d1ee      	bne.n	8001332 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	58024800 	.word	0x58024800

08001364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	@ 0x30
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 bc48 	b.w	8001c08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 8088 	beq.w	8001496 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001386:	4b99      	ldr	r3, [pc, #612]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001390:	4b96      	ldr	r3, [pc, #600]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001398:	2b10      	cmp	r3, #16
 800139a:	d007      	beq.n	80013ac <HAL_RCC_OscConfig+0x48>
 800139c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800139e:	2b18      	cmp	r3, #24
 80013a0:	d111      	bne.n	80013c6 <HAL_RCC_OscConfig+0x62>
 80013a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4b8f      	ldr	r3, [pc, #572]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d06d      	beq.n	8001494 <HAL_RCC_OscConfig+0x130>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d169      	bne.n	8001494 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f000 bc21 	b.w	8001c08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x7a>
 80013d0:	4b86      	ldr	r3, [pc, #536]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a85      	ldr	r2, [pc, #532]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e02e      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x9c>
 80013e6:	4b81      	ldr	r3, [pc, #516]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a80      	ldr	r2, [pc, #512]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b7e      	ldr	r3, [pc, #504]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7d      	ldr	r2, [pc, #500]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80013f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0xc0>
 800140a:	4b78      	ldr	r3, [pc, #480]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a77      	ldr	r2, [pc, #476]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b75      	ldr	r3, [pc, #468]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a74      	ldr	r2, [pc, #464]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 8001424:	4b71      	ldr	r3, [pc, #452]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a70      	ldr	r2, [pc, #448]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b6e      	ldr	r3, [pc, #440]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a6d      	ldr	r2, [pc, #436]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fbf2 	bl	8000c2c <HAL_GetTick>
 8001448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fbee 	bl	8000c2c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e3d4      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145e:	4b63      	ldr	r3, [pc, #396]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xe8>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fbde 	bl	8000c2c <HAL_GetTick>
 8001470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fbda 	bl	8000c2c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e3c0      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001486:	4b59      	ldr	r3, [pc, #356]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x110>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80ca 	beq.w	8001638 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a4:	4b51      	ldr	r3, [pc, #324]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ae:	4b4f      	ldr	r3, [pc, #316]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80014b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <HAL_RCC_OscConfig+0x166>
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	2b18      	cmp	r3, #24
 80014be:	d156      	bne.n	800156e <HAL_RCC_OscConfig+0x20a>
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d151      	bne.n	800156e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ca:	4b48      	ldr	r3, [pc, #288]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x17e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e392      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014e2:	4b42      	ldr	r3, [pc, #264]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 0219 	bic.w	r2, r3, #25
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	493f      	ldr	r1, [pc, #252]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb9a 	bl	8000c2c <HAL_GetTick>
 80014f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb96 	bl	8000c2c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e37c      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800150e:	4b37      	ldr	r3, [pc, #220]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	f7ff fbb7 	bl	8000c8c <HAL_GetREVID>
 800151e:	4603      	mov	r3, r0
 8001520:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001524:	4293      	cmp	r3, r2
 8001526:	d817      	bhi.n	8001558 <HAL_RCC_OscConfig+0x1f4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b40      	cmp	r3, #64	@ 0x40
 800152e:	d108      	bne.n	8001542 <HAL_RCC_OscConfig+0x1de>
 8001530:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001538:	4a2c      	ldr	r2, [pc, #176]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 800153a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	e07a      	b.n	8001638 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001542:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	031b      	lsls	r3, r3, #12
 8001550:	4926      	ldr	r1, [pc, #152]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001556:	e06f      	b.n	8001638 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	4921      	ldr	r1, [pc, #132]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156c:	e064      	b.n	8001638 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d047      	beq.n	8001606 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001576:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0219 	bic.w	r2, r3, #25
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	491a      	ldr	r1, [pc, #104]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fb50 	bl	8000c2c <HAL_GetTick>
 800158c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fb4c 	bl	8000c2c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e332      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	f7ff fb6d 	bl	8000c8c <HAL_GetREVID>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d819      	bhi.n	80015f0 <HAL_RCC_OscConfig+0x28c>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	2b40      	cmp	r3, #64	@ 0x40
 80015c2:	d108      	bne.n	80015d6 <HAL_RCC_OscConfig+0x272>
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80015cc:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80015ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d2:	6053      	str	r3, [r2, #4]
 80015d4:	e030      	b.n	8001638 <HAL_RCC_OscConfig+0x2d4>
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	031b      	lsls	r3, r3, #12
 80015e4:	4901      	ldr	r1, [pc, #4]	@ (80015ec <HAL_RCC_OscConfig+0x288>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
 80015ea:	e025      	b.n	8001638 <HAL_RCC_OscConfig+0x2d4>
 80015ec:	58024400 	.word	0x58024400
 80015f0:	4b9a      	ldr	r3, [pc, #616]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	4997      	ldr	r1, [pc, #604]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e018      	b.n	8001638 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b95      	ldr	r3, [pc, #596]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a94      	ldr	r2, [pc, #592]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fb0b 	bl	8000c2c <HAL_GetTick>
 8001616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fb07 	bl	8000c2c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e2ed      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800162c:	4b8b      	ldr	r3, [pc, #556]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a9 	beq.w	8001798 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001646:	4b85      	ldr	r3, [pc, #532]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800164e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001650:	4b82      	ldr	r3, [pc, #520]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d007      	beq.n	800166c <HAL_RCC_OscConfig+0x308>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b18      	cmp	r3, #24
 8001660:	d13a      	bne.n	80016d8 <HAL_RCC_OscConfig+0x374>
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d135      	bne.n	80016d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800166c:	4b7b      	ldr	r3, [pc, #492]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_OscConfig+0x320>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b80      	cmp	r3, #128	@ 0x80
 800167e:	d001      	beq.n	8001684 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e2c1      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001684:	f7ff fb02 	bl	8000c8c <HAL_GetREVID>
 8001688:	4603      	mov	r3, r0
 800168a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800168e:	4293      	cmp	r3, r2
 8001690:	d817      	bhi.n	80016c2 <HAL_RCC_OscConfig+0x35e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	2b20      	cmp	r3, #32
 8001698:	d108      	bne.n	80016ac <HAL_RCC_OscConfig+0x348>
 800169a:	4b70      	ldr	r3, [pc, #448]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80016a2:	4a6e      	ldr	r2, [pc, #440]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80016a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016aa:	e075      	b.n	8001798 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ac:	4b6b      	ldr	r3, [pc, #428]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	069b      	lsls	r3, r3, #26
 80016ba:	4968      	ldr	r1, [pc, #416]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016c0:	e06a      	b.n	8001798 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016c2:	4b66      	ldr	r3, [pc, #408]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	061b      	lsls	r3, r3, #24
 80016d0:	4962      	ldr	r1, [pc, #392]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016d6:	e05f      	b.n	8001798 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d042      	beq.n	8001766 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016e0:	4b5e      	ldr	r3, [pc, #376]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a5d      	ldr	r2, [pc, #372]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80016e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa9e 	bl	8000c2c <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016f4:	f7ff fa9a 	bl	8000c2c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e280      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001706:	4b55      	ldr	r3, [pc, #340]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001712:	f7ff fabb 	bl	8000c8c <HAL_GetREVID>
 8001716:	4603      	mov	r3, r0
 8001718:	f241 0203 	movw	r2, #4099	@ 0x1003
 800171c:	4293      	cmp	r3, r2
 800171e:	d817      	bhi.n	8001750 <HAL_RCC_OscConfig+0x3ec>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	2b20      	cmp	r3, #32
 8001726:	d108      	bne.n	800173a <HAL_RCC_OscConfig+0x3d6>
 8001728:	4b4c      	ldr	r3, [pc, #304]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001730:	4a4a      	ldr	r2, [pc, #296]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001732:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001736:	6053      	str	r3, [r2, #4]
 8001738:	e02e      	b.n	8001798 <HAL_RCC_OscConfig+0x434>
 800173a:	4b48      	ldr	r3, [pc, #288]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	069b      	lsls	r3, r3, #26
 8001748:	4944      	ldr	r1, [pc, #272]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
 800174e:	e023      	b.n	8001798 <HAL_RCC_OscConfig+0x434>
 8001750:	4b42      	ldr	r3, [pc, #264]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	493f      	ldr	r1, [pc, #252]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001760:	4313      	orrs	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
 8001764:	e018      	b.n	8001798 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001766:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a3c      	ldr	r2, [pc, #240]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800176c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fa5b 	bl	8000c2c <HAL_GetTick>
 8001776:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800177a:	f7ff fa57 	bl	8000c2c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e23d      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800178c:	4b33      	ldr	r3, [pc, #204]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d036      	beq.n	8001812 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d019      	beq.n	80017e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ac:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80017ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017b0:	4a2a      	ldr	r2, [pc, #168]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fa38 	bl	8000c2c <HAL_GetTick>
 80017bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fa34 	bl	8000c2c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e21a      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x45c>
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80017e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e4:	4a1d      	ldr	r2, [pc, #116]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fa1e 	bl	8000c2c <HAL_GetTick>
 80017f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff fa1a 	bl	8000c2c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e200      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b00      	cmp	r3, #0
 800181c:	d039      	beq.n	8001892 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01c      	beq.n	8001860 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a0c      	ldr	r2, [pc, #48]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800182c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001830:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001832:	f7ff f9fb 	bl	8000c2c <HAL_GetTick>
 8001836:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183a:	f7ff f9f7 	bl	8000c2c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1dd      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_RCC_OscConfig+0x4f8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x4d6>
 8001858:	e01b      	b.n	8001892 <HAL_RCC_OscConfig+0x52e>
 800185a:	bf00      	nop
 800185c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001860:	4b9b      	ldr	r3, [pc, #620]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a9a      	ldr	r2, [pc, #616]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800186a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800186c:	f7ff f9de 	bl	8000c2c <HAL_GetTick>
 8001870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001874:	f7ff f9da 	bl	8000c2c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1c0      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001886:	4b92      	ldr	r3, [pc, #584]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8081 	beq.w	80019a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018a0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ad4 <HAL_RCC_OscConfig+0x770>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a8b      	ldr	r2, [pc, #556]	@ (8001ad4 <HAL_RCC_OscConfig+0x770>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018ac:	f7ff f9be 	bl	8000c2c <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b4:	f7ff f9ba 	bl	8000c2c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	@ 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1a0      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018c6:	4b83      	ldr	r3, [pc, #524]	@ (8001ad4 <HAL_RCC_OscConfig+0x770>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d106      	bne.n	80018e8 <HAL_RCC_OscConfig+0x584>
 80018da:	4b7d      	ldr	r3, [pc, #500]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018de:	4a7c      	ldr	r2, [pc, #496]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e6:	e02d      	b.n	8001944 <HAL_RCC_OscConfig+0x5e0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_OscConfig+0x5a6>
 80018f0:	4b77      	ldr	r3, [pc, #476]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f4:	4a76      	ldr	r2, [pc, #472]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fc:	4b74      	ldr	r3, [pc, #464]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001900:	4a73      	ldr	r2, [pc, #460]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6713      	str	r3, [r2, #112]	@ 0x70
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x5e0>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x5c8>
 8001912:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001916:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	@ 0x70
 800191e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	4a6b      	ldr	r2, [pc, #428]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6713      	str	r3, [r2, #112]	@ 0x70
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0x5e0>
 800192c:	4b68      	ldr	r3, [pc, #416]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	4a67      	ldr	r2, [pc, #412]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	@ 0x70
 8001938:	4b65      	ldr	r3, [pc, #404]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193c:	4a64      	ldr	r2, [pc, #400]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 800193e:	f023 0304 	bic.w	r3, r3, #4
 8001942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d015      	beq.n	8001978 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f96e 	bl	8000c2c <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f96a 	bl	8000c2c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e14e      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800196a:	4b59      	ldr	r3, [pc, #356]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ee      	beq.n	8001954 <HAL_RCC_OscConfig+0x5f0>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff f958 	bl	8000c2c <HAL_GetTick>
 800197c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff f954 	bl	8000c2c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e138      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001996:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ee      	bne.n	8001980 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 812d 	beq.w	8001c06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019ac:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019b4:	2b18      	cmp	r3, #24
 80019b6:	f000 80bd 	beq.w	8001b34 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	2b02      	cmp	r3, #2
 80019c0:	f040 809e 	bne.w	8001b00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b42      	ldr	r3, [pc, #264]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a41      	ldr	r2, [pc, #260]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80019ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff f92c 	bl	8000c2c <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff f928 	bl	8000c2c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e10e      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ea:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f6:	4b36      	ldr	r3, [pc, #216]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 80019f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019fa:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <HAL_RCC_OscConfig+0x774>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	4931      	ldr	r1, [pc, #196]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	3b01      	subs	r3, #1
 8001a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	025b      	lsls	r3, r3, #9
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	061b      	lsls	r3, r3, #24
 8001a3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a40:	4923      	ldr	r1, [pc, #140]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4a:	4a21      	ldr	r2, [pc, #132]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a56:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <HAL_RCC_OscConfig+0x778>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a5e:	00d2      	lsls	r2, r2, #3
 8001a60:	491b      	ldr	r1, [pc, #108]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	f023 020c 	bic.w	r2, r3, #12
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4917      	ldr	r1, [pc, #92]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	f023 0202 	bic.w	r2, r3, #2
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a84:	4912      	ldr	r1, [pc, #72]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	4a10      	ldr	r2, [pc, #64]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <HAL_RCC_OscConfig+0x76c>)
 8001ac0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f8b1 	bl	8000c2c <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001acc:	e011      	b.n	8001af2 <HAL_RCC_OscConfig+0x78e>
 8001ace:	bf00      	nop
 8001ad0:	58024400 	.word	0x58024400
 8001ad4:	58024800 	.word	0x58024800
 8001ad8:	fffffc0c 	.word	0xfffffc0c
 8001adc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f8a4 	bl	8000c2c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e08a      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001af2:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x77c>
 8001afe:	e082      	b.n	8001c06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b43      	ldr	r3, [pc, #268]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a42      	ldr	r2, [pc, #264]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f88e 	bl	8000c2c <HAL_GetTick>
 8001b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff f88a 	bl	8000c2c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e070      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b26:	4b3a      	ldr	r3, [pc, #232]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x7b0>
 8001b32:	e068      	b.n	8001c06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b34:	4b36      	ldr	r3, [pc, #216]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b3a:	4b35      	ldr	r3, [pc, #212]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d031      	beq.n	8001bac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0203 	and.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d12a      	bne.n	8001bac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d122      	bne.n	8001bac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d11a      	bne.n	8001bac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0a5b      	lsrs	r3, r3, #9
 8001b7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d111      	bne.n	8001bac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	0e1b      	lsrs	r3, r3, #24
 8001b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e02b      	b.n	8001c08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d01f      	beq.n	8001c06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001bc6:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	4a11      	ldr	r2, [pc, #68]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd2:	f7ff f82b 	bl	8000c2c <HAL_GetTick>
 8001bd6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bd8:	bf00      	nop
 8001bda:	f7ff f827 	bl	8000c2c <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d0f9      	beq.n	8001bda <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_RCC_OscConfig+0x8b0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bf2:	00d2      	lsls	r2, r2, #3
 8001bf4:	4906      	ldr	r1, [pc, #24]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfe:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <HAL_RCC_OscConfig+0x8ac>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3730      	adds	r7, #48	@ 0x30
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	58024400 	.word	0x58024400
 8001c14:	ffff0007 	.word	0xffff0007

08001c18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e19c      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b8a      	ldr	r3, [pc, #552]	@ (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b87      	ldr	r3, [pc, #540]	@ (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 020f 	bic.w	r2, r3, #15
 8001c42:	4985      	ldr	r1, [pc, #532]	@ (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b83      	ldr	r3, [pc, #524]	@ (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e184      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d908      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c78:	4b78      	ldr	r3, [pc, #480]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	4975      	ldr	r1, [pc, #468]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	4b70      	ldr	r3, [pc, #448]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d908      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	496a      	ldr	r1, [pc, #424]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	4b64      	ldr	r3, [pc, #400]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d908      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cd4:	4b61      	ldr	r3, [pc, #388]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	495e      	ldr	r1, [pc, #376]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	4b59      	ldr	r3, [pc, #356]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d908      	bls.n	8001d14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d02:	4b56      	ldr	r3, [pc, #344]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4953      	ldr	r1, [pc, #332]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4b4d      	ldr	r3, [pc, #308]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d908      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f023 020f 	bic.w	r2, r3, #15
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4947      	ldr	r1, [pc, #284]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d055      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d4e:	4b43      	ldr	r3, [pc, #268]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4940      	ldr	r1, [pc, #256]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d68:	4b3c      	ldr	r3, [pc, #240]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d121      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0f6      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d80:	4b36      	ldr	r3, [pc, #216]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d115      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0ea      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d98:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0de      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0d6      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db8:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f023 0207 	bic.w	r2, r3, #7
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4925      	ldr	r1, [pc, #148]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dca:	f7fe ff2f 	bl	8000c2c <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd2:	f7fe ff2b 	bl	8000c2c <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0be      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d1eb      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d208      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e16:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	490e      	ldr	r1, [pc, #56]	@ (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d214      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 020f 	bic.w	r2, r3, #15
 8001e3e:	4906      	ldr	r1, [pc, #24]	@ (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e086      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
 8001e58:	52002000 	.word	0x52002000
 8001e5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d010      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	4b3f      	ldr	r3, [pc, #252]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d208      	bcs.n	8001e8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4939      	ldr	r1, [pc, #228]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d010      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	4b34      	ldr	r3, [pc, #208]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d208      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eaa:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	492e      	ldr	r1, [pc, #184]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d208      	bcs.n	8001eea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ed8:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4922      	ldr	r1, [pc, #136]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d208      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4917      	ldr	r1, [pc, #92]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f18:	f000 f834 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	4912      	ldr	r1, [pc, #72]	@ (8001f74 <HAL_RCC_ClockConfig+0x35c>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <HAL_RCC_ClockConfig+0x35c>)
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_RCC_ClockConfig+0x360>)
 8001f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f50:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_RCC_ClockConfig+0x364>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_RCC_ClockConfig+0x368>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fe1c 	bl	8000b98 <HAL_InitTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58024400 	.word	0x58024400
 8001f74:	080052dc 	.word	0x080052dc
 8001f78:	24000004 	.word	0x24000004
 8001f7c:	24000000 	.word	0x24000000
 8001f80:	24000008 	.word	0x24000008

08001f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8a:	4bb3      	ldr	r3, [pc, #716]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f92:	2b18      	cmp	r3, #24
 8001f94:	f200 8155 	bhi.w	8002242 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f98:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08002005 	.word	0x08002005
 8001fa4:	08002243 	.word	0x08002243
 8001fa8:	08002243 	.word	0x08002243
 8001fac:	08002243 	.word	0x08002243
 8001fb0:	08002243 	.word	0x08002243
 8001fb4:	08002243 	.word	0x08002243
 8001fb8:	08002243 	.word	0x08002243
 8001fbc:	08002243 	.word	0x08002243
 8001fc0:	0800202b 	.word	0x0800202b
 8001fc4:	08002243 	.word	0x08002243
 8001fc8:	08002243 	.word	0x08002243
 8001fcc:	08002243 	.word	0x08002243
 8001fd0:	08002243 	.word	0x08002243
 8001fd4:	08002243 	.word	0x08002243
 8001fd8:	08002243 	.word	0x08002243
 8001fdc:	08002243 	.word	0x08002243
 8001fe0:	08002031 	.word	0x08002031
 8001fe4:	08002243 	.word	0x08002243
 8001fe8:	08002243 	.word	0x08002243
 8001fec:	08002243 	.word	0x08002243
 8001ff0:	08002243 	.word	0x08002243
 8001ff4:	08002243 	.word	0x08002243
 8001ff8:	08002243 	.word	0x08002243
 8001ffc:	08002243 	.word	0x08002243
 8002000:	08002037 	.word	0x08002037
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002004:	4b94      	ldr	r3, [pc, #592]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002010:	4b91      	ldr	r3, [pc, #580]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	08db      	lsrs	r3, r3, #3
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	4a90      	ldr	r2, [pc, #576]	@ (800225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002022:	e111      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002024:	4b8d      	ldr	r3, [pc, #564]	@ (800225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002026:	61bb      	str	r3, [r7, #24]
      break;
 8002028:	e10e      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800202a:	4b8d      	ldr	r3, [pc, #564]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800202c:	61bb      	str	r3, [r7, #24]
      break;
 800202e:	e10b      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002030:	4b8c      	ldr	r3, [pc, #560]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002032:	61bb      	str	r3, [r7, #24]
      break;
 8002034:	e108      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002036:	4b88      	ldr	r3, [pc, #544]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002040:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800204a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800204c:	4b82      	ldr	r3, [pc, #520]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002056:	4b80      	ldr	r3, [pc, #512]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80e1 	beq.w	800223c <HAL_RCC_GetSysClockFreq+0x2b8>
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b02      	cmp	r3, #2
 800207e:	f000 8083 	beq.w	8002188 <HAL_RCC_GetSysClockFreq+0x204>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b02      	cmp	r3, #2
 8002086:	f200 80a1 	bhi.w	80021cc <HAL_RCC_GetSysClockFreq+0x248>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x114>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d056      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002096:	e099      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002098:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d02d      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	4a6b      	ldr	r2, [pc, #428]	@ (800225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ce:	4b62      	ldr	r3, [pc, #392]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020de:	ed97 6a02 	vldr	s12, [r7, #8]
 80020e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80020fe:	e087      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800226c <HAL_RCC_GetSysClockFreq+0x2e8>
 800210e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002112:	4b51      	ldr	r3, [pc, #324]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002122:	ed97 6a02 	vldr	s12, [r7, #8]
 8002126:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800212a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800212e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002142:	e065      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002270 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002156:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002166:	ed97 6a02 	vldr	s12, [r7, #8]
 800216a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800216e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800217a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002186:	e043      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800219a:	4b2f      	ldr	r3, [pc, #188]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021ca:	e021      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002270 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80021f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800220e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	0a5b      	lsrs	r3, r3, #9
 8002216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800221a:	3301      	adds	r3, #1
 800221c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002228:	edd7 6a07 	vldr	s13, [r7, #28]
 800222c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002234:	ee17 3a90 	vmov	r3, s15
 8002238:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800223a:	e005      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
      break;
 8002240:	e002      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002242:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002244:	61bb      	str	r3, [r7, #24]
      break;
 8002246:	bf00      	nop
  }

  return sysclockfreq;
 8002248:	69bb      	ldr	r3, [r7, #24]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	58024400 	.word	0x58024400
 800225c:	03d09000 	.word	0x03d09000
 8002260:	003d0900 	.word	0x003d0900
 8002264:	017d7840 	.word	0x017d7840
 8002268:	46000000 	.word	0x46000000
 800226c:	4c742400 	.word	0x4c742400
 8002270:	4a742400 	.word	0x4a742400
 8002274:	4bbebc20 	.word	0x4bbebc20

08002278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800227e:	f7ff fe81 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	490f      	ldr	r1, [pc, #60]	@ (80022cc <HAL_RCC_GetHCLKFreq+0x54>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800229c:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_RCC_GetHCLKFreq+0x54>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a07      	ldr	r2, [pc, #28]	@ (80022d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80022b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022b6:	4a07      	ldr	r2, [pc, #28]	@ (80022d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	58024400 	.word	0x58024400
 80022cc:	080052dc 	.word	0x080052dc
 80022d0:	24000004 	.word	0x24000004
 80022d4:	24000000 	.word	0x24000000

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80022dc:	f7ff ffcc 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4904      	ldr	r1, [pc, #16]	@ (8002300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	58024400 	.word	0x58024400
 8002300:	080052dc 	.word	0x080052dc

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002308:	f7ff ffb6 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4904      	ldr	r1, [pc, #16]	@ (800232c <HAL_RCC_GetPCLK2Freq+0x28>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	58024400 	.word	0x58024400
 800232c:	080052dc 	.word	0x080052dc

08002330 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002334:	b0ca      	sub	sp, #296	@ 0x128
 8002336:	af00      	add	r7, sp, #0
 8002338:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002342:	2300      	movs	r3, #0
 8002344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002354:	2500      	movs	r5, #0
 8002356:	ea54 0305 	orrs.w	r3, r4, r5
 800235a:	d049      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800235c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002360:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002362:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002366:	d02f      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002368:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800236c:	d828      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800236e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002372:	d01a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002374:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002378:	d822      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002382:	d007      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002384:	e01c      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002386:	4bb8      	ldr	r3, [pc, #736]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	4ab7      	ldr	r2, [pc, #732]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800238c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002392:	e01a      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002398:	3308      	adds	r3, #8
 800239a:	2102      	movs	r1, #2
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fc8f 	bl	8003cc0 <RCCEx_PLL2_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023a8:	e00f      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80023aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023ae:	3328      	adds	r3, #40	@ 0x28
 80023b0:	2102      	movs	r1, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f001 fd36 	bl	8003e24 <RCCEx_PLL3_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023be:	e004      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80023c6:	e000      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80023c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10a      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023d2:	4ba5      	ldr	r3, [pc, #660]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80023da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023e0:	4aa1      	ldr	r2, [pc, #644]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023e2:	430b      	orrs	r3, r1
 80023e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80023e6:	e003      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80023fc:	f04f 0900 	mov.w	r9, #0
 8002400:	ea58 0309 	orrs.w	r3, r8, r9
 8002404:	d047      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800240a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240c:	2b04      	cmp	r3, #4
 800240e:	d82a      	bhi.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002410:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	0800242d 	.word	0x0800242d
 800241c:	0800243b 	.word	0x0800243b
 8002420:	08002451 	.word	0x08002451
 8002424:	0800246f 	.word	0x0800246f
 8002428:	0800246f 	.word	0x0800246f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800242c:	4b8e      	ldr	r3, [pc, #568]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	4a8d      	ldr	r2, [pc, #564]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002438:	e01a      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800243a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800243e:	3308      	adds	r3, #8
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f001 fc3c 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800244e:	e00f      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002454:	3328      	adds	r3, #40	@ 0x28
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f001 fce3 	bl	8003e24 <RCCEx_PLL3_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002464:	e004      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800246c:	e000      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800246e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002478:	4b7b      	ldr	r3, [pc, #492]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800247a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247c:	f023 0107 	bic.w	r1, r3, #7
 8002480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	4a78      	ldr	r2, [pc, #480]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002488:	430b      	orrs	r3, r1
 800248a:	6513      	str	r3, [r2, #80]	@ 0x50
 800248c:	e003      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80024a2:	f04f 0b00 	mov.w	fp, #0
 80024a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80024aa:	d04c      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80024ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b6:	d030      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024bc:	d829      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024be:	2bc0      	cmp	r3, #192	@ 0xc0
 80024c0:	d02d      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80024c4:	d825      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024c6:	2b80      	cmp	r3, #128	@ 0x80
 80024c8:	d018      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80024ca:	2b80      	cmp	r3, #128	@ 0x80
 80024cc:	d821      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80024d2:	2b40      	cmp	r3, #64	@ 0x40
 80024d4:	d007      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80024d6:	e01c      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d8:	4b63      	ldr	r3, [pc, #396]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	4a62      	ldr	r2, [pc, #392]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024e4:	e01c      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024ea:	3308      	adds	r3, #8
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fbe6 	bl	8003cc0 <RCCEx_PLL2_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024fa:	e011      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002500:	3328      	adds	r3, #40	@ 0x28
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f001 fc8d 	bl	8003e24 <RCCEx_PLL3_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002510:	e006      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002518:	e002      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800251e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002528:	4b4f      	ldr	r3, [pc, #316]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800252a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	4a4c      	ldr	r2, [pc, #304]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002538:	430b      	orrs	r3, r1
 800253a:	6513      	str	r3, [r2, #80]	@ 0x50
 800253c:	e003      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002552:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800255c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002560:	460b      	mov	r3, r1
 8002562:	4313      	orrs	r3, r2
 8002564:	d053      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800256a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800256e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002572:	d035      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002574:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002578:	d82e      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800257a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800257e:	d031      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002580:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002584:	d828      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002586:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800258a:	d01a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800258c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002590:	d822      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002596:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800259a:	d007      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800259c:	e01c      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800259e:	4b32      	ldr	r3, [pc, #200]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	4a31      	ldr	r2, [pc, #196]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025aa:	e01c      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025b0:	3308      	adds	r3, #8
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fb83 	bl	8003cc0 <RCCEx_PLL2_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80025c0:	e011      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025c6:	3328      	adds	r3, #40	@ 0x28
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fc2a 	bl	8003e24 <RCCEx_PLL3_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025d6:	e006      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025de:	e002      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025e0:	bf00      	nop
 80025e2:	e000      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80025ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80025f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80025fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002600:	430b      	orrs	r3, r1
 8002602:	6593      	str	r3, [r2, #88]	@ 0x58
 8002604:	e003      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800260a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800260e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800261a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002624:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002628:	460b      	mov	r3, r1
 800262a:	4313      	orrs	r3, r2
 800262c:	d056      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800262e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002632:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002636:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800263a:	d038      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800263c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002640:	d831      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002642:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002646:	d034      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002648:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800264c:	d82b      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800264e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002652:	d01d      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002658:	d825      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800265e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002664:	e01f      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002666:	bf00      	nop
 8002668:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800266c:	4ba2      	ldr	r3, [pc, #648]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	4aa1      	ldr	r2, [pc, #644]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002678:	e01c      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800267a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800267e:	3308      	adds	r3, #8
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fb1c 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800268e:	e011      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002694:	3328      	adds	r3, #40	@ 0x28
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fbc3 	bl	8003e24 <RCCEx_PLL3_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026a4:	e006      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026ac:	e002      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80026b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026bc:	4b8e      	ldr	r3, [pc, #568]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80026c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80026cc:	4a8a      	ldr	r2, [pc, #552]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ce:	430b      	orrs	r3, r1
 80026d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d2:	e003      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80026e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80026f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80026f6:	460b      	mov	r3, r1
 80026f8:	4313      	orrs	r3, r2
 80026fa:	d03a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80026fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	2b30      	cmp	r3, #48	@ 0x30
 8002704:	d01f      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002706:	2b30      	cmp	r3, #48	@ 0x30
 8002708:	d819      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800270a:	2b20      	cmp	r3, #32
 800270c:	d00c      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800270e:	2b20      	cmp	r3, #32
 8002710:	d815      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d019      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002716:	2b10      	cmp	r3, #16
 8002718:	d111      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271a:	4b77      	ldr	r3, [pc, #476]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	4a76      	ldr	r2, [pc, #472]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002724:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002726:	e011      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800272c:	3308      	adds	r3, #8
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f001 fac5 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800273c:	e006      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002744:	e002      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800274a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800274c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002754:	4b68      	ldr	r3, [pc, #416]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002758:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800275c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002762:	4a65      	ldr	r2, [pc, #404]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002764:	430b      	orrs	r3, r1
 8002766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002768:	e003      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800276e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800277e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002788:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800278c:	460b      	mov	r3, r1
 800278e:	4313      	orrs	r3, r2
 8002790:	d051      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002798:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800279c:	d035      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800279e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027a2:	d82e      	bhi.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027a8:	d031      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80027aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027ae:	d828      	bhi.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b4:	d01a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ba:	d822      	bhi.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c4:	d007      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80027c6:	e01c      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c8:	4b4b      	ldr	r3, [pc, #300]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	4a4a      	ldr	r2, [pc, #296]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027d4:	e01c      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027da:	3308      	adds	r3, #8
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f001 fa6e 	bl	8003cc0 <RCCEx_PLL2_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027ea:	e011      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f0:	3328      	adds	r3, #40	@ 0x28
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fb15 	bl	8003e24 <RCCEx_PLL3_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002800:	e006      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002808:	e002      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800280e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002818:	4b37      	ldr	r3, [pc, #220]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800281a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002826:	4a34      	ldr	r2, [pc, #208]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002828:	430b      	orrs	r3, r1
 800282a:	6513      	str	r3, [r2, #80]	@ 0x50
 800282c:	e003      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002842:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800284c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002850:	460b      	mov	r3, r1
 8002852:	4313      	orrs	r3, r2
 8002854:	d056      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800285a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002860:	d033      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002862:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002866:	d82c      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002868:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800286c:	d02f      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800286e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002872:	d826      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002878:	d02b      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800287a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800287e:	d820      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002884:	d012      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800288a:	d81a      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d022      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002894:	d115      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289a:	3308      	adds	r3, #8
 800289c:	2101      	movs	r1, #1
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fa0e 	bl	8003cc0 <RCCEx_PLL2_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028aa:	e015      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b0:	3328      	adds	r3, #40	@ 0x28
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 fab5 	bl	8003e24 <RCCEx_PLL3_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028c0:	e00a      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028c8:	e006      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028ca:	bf00      	nop
 80028cc:	e004      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028ce:	bf00      	nop
 80028d0:	e002      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80028e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ee:	4a02      	ldr	r2, [pc, #8]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80028f4:	e006      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80028f6:	bf00      	nop
 80028f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800291a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800291e:	460b      	mov	r3, r1
 8002920:	4313      	orrs	r3, r2
 8002922:	d055      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002928:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800292c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002930:	d033      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002936:	d82c      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800293c:	d02f      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002942:	d826      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002944:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002948:	d02b      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800294a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800294e:	d820      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002954:	d012      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800295a:	d81a      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d022      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002964:	d115      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800296a:	3308      	adds	r3, #8
 800296c:	2101      	movs	r1, #1
 800296e:	4618      	mov	r0, r3
 8002970:	f001 f9a6 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800297a:	e015      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800297c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002980:	3328      	adds	r3, #40	@ 0x28
 8002982:	2101      	movs	r1, #1
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fa4d 	bl	8003e24 <RCCEx_PLL3_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002990:	e00a      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800299a:	bf00      	nop
 800299c:	e004      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029b0:	4ba3      	ldr	r3, [pc, #652]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80029b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80029c0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029c2:	430b      	orrs	r3, r1
 80029c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c6:	e003      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80029dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80029e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029ea:	460b      	mov	r3, r1
 80029ec:	4313      	orrs	r3, r2
 80029ee:	d037      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80029f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029fa:	d00e      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80029fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a00:	d816      	bhi.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d018      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a0a:	d111      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	4a8b      	ldr	r2, [pc, #556]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a18:	e00f      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1e:	3308      	adds	r3, #8
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f94c 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a2e:	e004      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a36:	e000      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a42:	4b7f      	ldr	r3, [pc, #508]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a7b      	ldr	r2, [pc, #492]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a52:	430b      	orrs	r3, r1
 8002a54:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a56:	e003      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002a76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	d039      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d81c      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002acd 	.word	0x08002acd
 8002a94:	08002aa1 	.word	0x08002aa1
 8002a98:	08002aaf 	.word	0x08002aaf
 8002a9c:	08002acd 	.word	0x08002acd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa0:	4b67      	ldr	r3, [pc, #412]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	4a66      	ldr	r2, [pc, #408]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002aac:	e00f      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f902 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ac2:	e004      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	f023 0103 	bic.w	r1, r3, #3
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae4:	4a56      	ldr	r2, [pc, #344]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aea:	e003      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002af0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002b00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f000 809f 	beq.w	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b16:	4b4b      	ldr	r3, [pc, #300]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b22:	f7fe f883 	bl	8000c2c <HAL_GetTick>
 8002b26:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2c:	f7fe f87e 	bl	8000c2c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b64      	cmp	r3, #100	@ 0x64
 8002b3a:	d903      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b42:	e005      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b44:	4b3f      	ldr	r3, [pc, #252]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ed      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d179      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b58:	4b39      	ldr	r3, [pc, #228]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b64:	4053      	eors	r3, r2
 8002b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b6e:	4b34      	ldr	r3, [pc, #208]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b7a:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7e:	4a30      	ldr	r2, [pc, #192]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b86:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b92:	4a2b      	ldr	r2, [pc, #172]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ba6:	d118      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f840 	bl	8000c2c <HAL_GetTick>
 8002bac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bb0:	e00d      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe f83b 	bl	8000c2c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002bbc:	1ad2      	subs	r2, r2, r3
 8002bbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d903      	bls.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002bcc:	e005      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bce:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0eb      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d129      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bf2:	d10e      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002c04:	091a      	lsrs	r2, r3, #4
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	6113      	str	r3, [r2, #16]
 8002c10:	e005      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c1c:	6113      	str	r3, [r2, #16]
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2e:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c34:	e00e      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002c3e:	e009      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002c40:	58024400 	.word	0x58024400
 8002c44:	58024800 	.word	0x58024800
 8002c48:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f002 0301 	and.w	r3, r2, #1
 8002c60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f000 8089 	beq.w	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7c:	2b28      	cmp	r3, #40	@ 0x28
 8002c7e:	d86b      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002c80:	a201      	add	r2, pc, #4	@ (adr r2, 8002c88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002d61 	.word	0x08002d61
 8002c8c:	08002d59 	.word	0x08002d59
 8002c90:	08002d59 	.word	0x08002d59
 8002c94:	08002d59 	.word	0x08002d59
 8002c98:	08002d59 	.word	0x08002d59
 8002c9c:	08002d59 	.word	0x08002d59
 8002ca0:	08002d59 	.word	0x08002d59
 8002ca4:	08002d59 	.word	0x08002d59
 8002ca8:	08002d2d 	.word	0x08002d2d
 8002cac:	08002d59 	.word	0x08002d59
 8002cb0:	08002d59 	.word	0x08002d59
 8002cb4:	08002d59 	.word	0x08002d59
 8002cb8:	08002d59 	.word	0x08002d59
 8002cbc:	08002d59 	.word	0x08002d59
 8002cc0:	08002d59 	.word	0x08002d59
 8002cc4:	08002d59 	.word	0x08002d59
 8002cc8:	08002d43 	.word	0x08002d43
 8002ccc:	08002d59 	.word	0x08002d59
 8002cd0:	08002d59 	.word	0x08002d59
 8002cd4:	08002d59 	.word	0x08002d59
 8002cd8:	08002d59 	.word	0x08002d59
 8002cdc:	08002d59 	.word	0x08002d59
 8002ce0:	08002d59 	.word	0x08002d59
 8002ce4:	08002d59 	.word	0x08002d59
 8002ce8:	08002d61 	.word	0x08002d61
 8002cec:	08002d59 	.word	0x08002d59
 8002cf0:	08002d59 	.word	0x08002d59
 8002cf4:	08002d59 	.word	0x08002d59
 8002cf8:	08002d59 	.word	0x08002d59
 8002cfc:	08002d59 	.word	0x08002d59
 8002d00:	08002d59 	.word	0x08002d59
 8002d04:	08002d59 	.word	0x08002d59
 8002d08:	08002d61 	.word	0x08002d61
 8002d0c:	08002d59 	.word	0x08002d59
 8002d10:	08002d59 	.word	0x08002d59
 8002d14:	08002d59 	.word	0x08002d59
 8002d18:	08002d59 	.word	0x08002d59
 8002d1c:	08002d59 	.word	0x08002d59
 8002d20:	08002d59 	.word	0x08002d59
 8002d24:	08002d59 	.word	0x08002d59
 8002d28:	08002d61 	.word	0x08002d61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d30:	3308      	adds	r3, #8
 8002d32:	2101      	movs	r1, #1
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 ffc3 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d40:	e00f      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d46:	3328      	adds	r3, #40	@ 0x28
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 f86a 	bl	8003e24 <RCCEx_PLL3_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d56:	e004      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d6a:	4bbf      	ldr	r3, [pc, #764]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d78:	4abb      	ldr	r2, [pc, #748]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002d7e:	e003      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f002 0302 	and.w	r3, r2, #2
 8002d94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002d9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002da2:	460b      	mov	r3, r1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	d041      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d824      	bhi.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002db2:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002e05 	.word	0x08002e05
 8002dbc:	08002dd1 	.word	0x08002dd1
 8002dc0:	08002de7 	.word	0x08002de7
 8002dc4:	08002e05 	.word	0x08002e05
 8002dc8:	08002e05 	.word	0x08002e05
 8002dcc:	08002e05 	.word	0x08002e05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 ff71 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002de4:	e00f      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dea:	3328      	adds	r3, #40	@ 0x28
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 f818 	bl	8003e24 <RCCEx_PLL3_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dfa:	e004      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e02:	e000      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e0e:	4b96      	ldr	r3, [pc, #600]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e12:	f023 0107 	bic.w	r1, r3, #7
 8002e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e1c:	4a92      	ldr	r2, [pc, #584]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e22:	e003      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f002 0304 	and.w	r3, r2, #4
 8002e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	d044      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d825      	bhi.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002e58:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002ead 	.word	0x08002ead
 8002e64:	08002e79 	.word	0x08002e79
 8002e68:	08002e8f 	.word	0x08002e8f
 8002e6c:	08002ead 	.word	0x08002ead
 8002e70:	08002ead 	.word	0x08002ead
 8002e74:	08002ead 	.word	0x08002ead
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 ff1d 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e8c:	e00f      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e92:	3328      	adds	r3, #40	@ 0x28
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 ffc4 	bl	8003e24 <RCCEx_PLL3_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ea2:	e004      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eaa:	e000      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	f023 0107 	bic.w	r1, r3, #7
 8002ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec6:	4a68      	ldr	r2, [pc, #416]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ecc:	e003      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f002 0320 	and.w	r3, r2, #32
 8002ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002eec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	d055      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f02:	d033      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f08:	d82c      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0e:	d02f      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f14:	d826      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f1a:	d02b      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002f1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f20:	d820      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f26:	d012      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f2c:	d81a      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d022      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f36:	d115      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 febd 	bl	8003cc0 <RCCEx_PLL2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f4c:	e015      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f52:	3328      	adds	r3, #40	@ 0x28
 8002f54:	2102      	movs	r1, #2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 ff64 	bl	8003e24 <RCCEx_PLL3_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f62:	e00a      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f6a:	e006      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f6c:	bf00      	nop
 8002f6e:	e004      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f70:	bf00      	nop
 8002f72:	e002      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f74:	bf00      	nop
 8002f76:	e000      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10b      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f82:	4b39      	ldr	r3, [pc, #228]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	4a35      	ldr	r2, [pc, #212]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f98:	e003      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002fb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	d058      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002fce:	d033      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002fd0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002fd4:	d82c      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fda:	d02f      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe0:	d826      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002fe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fe6:	d02b      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fec:	d820      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff2:	d012      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff8:	d81a      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d022      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003002:	d115      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003008:	3308      	adds	r3, #8
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fe57 	bl	8003cc0 <RCCEx_PLL2_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003018:	e015      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800301a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301e:	3328      	adds	r3, #40	@ 0x28
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fefe 	bl	8003e24 <RCCEx_PLL3_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800302e:	e00a      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003036:	e006      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003038:	bf00      	nop
 800303a:	e004      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800303c:	bf00      	nop
 800303e:	e002      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10e      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800305e:	4a02      	ldr	r2, [pc, #8]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003060:	430b      	orrs	r3, r1
 8003062:	6593      	str	r3, [r2, #88]	@ 0x58
 8003064:	e006      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800308a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800308e:	460b      	mov	r3, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	d055      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800309c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80030a0:	d033      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80030a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80030a6:	d82c      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ac:	d02f      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80030ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b2:	d826      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80030b8:	d02b      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80030ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80030be:	d820      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030c4:	d012      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80030c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030ca:	d81a      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d022      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80030d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d4:	d115      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030da:	3308      	adds	r3, #8
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fdee 	bl	8003cc0 <RCCEx_PLL2_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030ea:	e015      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f0:	3328      	adds	r3, #40	@ 0x28
 80030f2:	2102      	movs	r1, #2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fe95 	bl	8003e24 <RCCEx_PLL3_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003100:	e00a      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003108:	e006      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800310a:	bf00      	nop
 800310c:	e004      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800310e:	bf00      	nop
 8003110:	e002      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003120:	4ba1      	ldr	r3, [pc, #644]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003124:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003130:	4a9d      	ldr	r2, [pc, #628]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003132:	430b      	orrs	r3, r1
 8003134:	6593      	str	r3, [r2, #88]	@ 0x58
 8003136:	e003      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800313c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f002 0308 	and.w	r3, r2, #8
 800314c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003150:	2300      	movs	r3, #0
 8003152:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003156:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800315a:	460b      	mov	r3, r1
 800315c:	4313      	orrs	r3, r2
 800315e:	d01e      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800316c:	d10c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	3328      	adds	r3, #40	@ 0x28
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fe54 	bl	8003e24 <RCCEx_PLL3_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003188:	4b87      	ldr	r3, [pc, #540]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003198:	4a83      	ldr	r2, [pc, #524]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800319a:	430b      	orrs	r3, r1
 800319c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f002 0310 	and.w	r3, r2, #16
 80031aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80031b8:	460b      	mov	r3, r1
 80031ba:	4313      	orrs	r3, r2
 80031bc:	d01e      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ca:	d10c      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	3328      	adds	r3, #40	@ 0x28
 80031d2:	2102      	movs	r1, #2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fe25 	bl	8003e24 <RCCEx_PLL3_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031e6:	4b70      	ldr	r3, [pc, #448]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031f6:	4a6c      	ldr	r2, [pc, #432]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003208:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003212:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003216:	460b      	mov	r3, r1
 8003218:	4313      	orrs	r3, r2
 800321a:	d03e      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003228:	d022      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800322a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800322e:	d81b      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003238:	d00b      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800323a:	e015      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003240:	3308      	adds	r3, #8
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fd3b 	bl	8003cc0 <RCCEx_PLL2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003250:	e00f      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003256:	3328      	adds	r3, #40	@ 0x28
 8003258:	2102      	movs	r1, #2
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fde2 	bl	8003e24 <RCCEx_PLL3_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003266:	e004      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800326e:	e000      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327a:	4b4b      	ldr	r3, [pc, #300]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800328a:	4a47      	ldr	r2, [pc, #284]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800328c:	430b      	orrs	r3, r1
 800328e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003290:	e003      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80032a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032a8:	2300      	movs	r3, #0
 80032aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80032b0:	460b      	mov	r3, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	d03b      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032c2:	d01f      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80032c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032c8:	d818      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80032ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ce:	d003      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80032d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032d4:	d007      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80032d6:	e011      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d8:	4b33      	ldr	r3, [pc, #204]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	4a32      	ldr	r2, [pc, #200]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80032e4:	e00f      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ea:	3328      	adds	r3, #40	@ 0x28
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fd98 	bl	8003e24 <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80032fa:	e004      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800330e:	4b26      	ldr	r3, [pc, #152]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003312:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331e:	4a22      	ldr	r2, [pc, #136]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003320:	430b      	orrs	r3, r1
 8003322:	6553      	str	r3, [r2, #84]	@ 0x54
 8003324:	e003      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800332a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800333a:	673b      	str	r3, [r7, #112]	@ 0x70
 800333c:	2300      	movs	r3, #0
 800333e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003340:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003344:	460b      	mov	r3, r1
 8003346:	4313      	orrs	r3, r2
 8003348:	d034      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d007      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800335a:	e011      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335c:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	4a11      	ldr	r2, [pc, #68]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003368:	e00e      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336e:	3308      	adds	r3, #8
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fca4 	bl	8003cc0 <RCCEx_PLL2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800337e:	e003      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003394:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339e:	4a02      	ldr	r2, [pc, #8]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033a0:	430b      	orrs	r3, r1
 80033a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033a4:	e006      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80033a6:	bf00      	nop
 80033a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80033c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033c2:	2300      	movs	r3, #0
 80033c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d00c      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	3328      	adds	r3, #40	@ 0x28
 80033d6:	2102      	movs	r1, #2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fd23 	bl	8003e24 <RCCEx_PLL3_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80033f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80033f8:	2300      	movs	r3, #0
 80033fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80033fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003400:	460b      	mov	r3, r1
 8003402:	4313      	orrs	r3, r2
 8003404:	d038      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800340e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003412:	d018      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003418:	d811      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800341a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800341e:	d014      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003424:	d80b      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d011      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800342a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342e:	d106      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003430:	4bc3      	ldr	r3, [pc, #780]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	4ac2      	ldr	r2, [pc, #776]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800343a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800343c:	e008      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003444:	e004      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800344e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003458:	4bb9      	ldr	r3, [pc, #740]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003468:	4ab5      	ldr	r2, [pc, #724]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800346a:	430b      	orrs	r3, r1
 800346c:	6553      	str	r3, [r2, #84]	@ 0x54
 800346e:	e003      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003484:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003486:	2300      	movs	r3, #0
 8003488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800348a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800348e:	460b      	mov	r3, r1
 8003490:	4313      	orrs	r3, r2
 8003492:	d009      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003494:	4baa      	ldr	r3, [pc, #680]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	4aa7      	ldr	r2, [pc, #668]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80034b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80034b6:	2300      	movs	r3, #0
 80034b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80034c4:	4b9e      	ldr	r3, [pc, #632]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80034d4:	4a9a      	ldr	r2, [pc, #616]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034d6:	430b      	orrs	r3, r1
 80034d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80034e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e8:	2300      	movs	r3, #0
 80034ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80034f0:	460b      	mov	r3, r1
 80034f2:	4313      	orrs	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034f6:	4b92      	ldr	r3, [pc, #584]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003504:	4a8e      	ldr	r2, [pc, #568]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003506:	430b      	orrs	r3, r1
 8003508:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003516:	643b      	str	r3, [r7, #64]	@ 0x40
 8003518:	2300      	movs	r3, #0
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
 800351c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003526:	4b86      	ldr	r3, [pc, #536]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	4a85      	ldr	r2, [pc, #532]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800352c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003530:	6113      	str	r3, [r2, #16]
 8003532:	4b83      	ldr	r3, [pc, #524]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800353e:	4a80      	ldr	r2, [pc, #512]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003540:	430b      	orrs	r3, r1
 8003542:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003550:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003552:	2300      	movs	r3, #0
 8003554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003556:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800355a:	460b      	mov	r3, r1
 800355c:	4313      	orrs	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003560:	4b77      	ldr	r3, [pc, #476]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003564:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356e:	4a74      	ldr	r2, [pc, #464]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003570:	430b      	orrs	r3, r1
 8003572:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003580:	633b      	str	r3, [r7, #48]	@ 0x30
 8003582:	2300      	movs	r3, #0
 8003584:	637b      	str	r3, [r7, #52]	@ 0x34
 8003586:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800358a:	460b      	mov	r3, r1
 800358c:	4313      	orrs	r3, r2
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003590:	4b6b      	ldr	r3, [pc, #428]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003594:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a0:	4a67      	ldr	r2, [pc, #412]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	2100      	movs	r1, #0
 80035b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80035bc:	460b      	mov	r3, r1
 80035be:	4313      	orrs	r3, r2
 80035c0:	d011      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c6:	3308      	adds	r3, #8
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fb78 	bl	8003cc0 <RCCEx_PLL2_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	2100      	movs	r1, #0
 80035f0:	6239      	str	r1, [r7, #32]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035fc:	460b      	mov	r3, r1
 80035fe:	4313      	orrs	r3, r2
 8003600:	d011      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	3308      	adds	r3, #8
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fb58 	bl	8003cc0 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	2100      	movs	r1, #0
 8003630:	61b9      	str	r1, [r7, #24]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800363c:	460b      	mov	r3, r1
 800363e:	4313      	orrs	r3, r2
 8003640:	d011      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	3308      	adds	r3, #8
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fb38 	bl	8003cc0 <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	2100      	movs	r1, #0
 8003670:	6139      	str	r1, [r7, #16]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800367c:	460b      	mov	r3, r1
 800367e:	4313      	orrs	r3, r2
 8003680:	d011      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003686:	3328      	adds	r3, #40	@ 0x28
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fbca 	bl	8003e24 <RCCEx_PLL3_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	2100      	movs	r1, #0
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036bc:	460b      	mov	r3, r1
 80036be:	4313      	orrs	r3, r2
 80036c0:	d011      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c6:	3328      	adds	r3, #40	@ 0x28
 80036c8:	2101      	movs	r1, #1
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fbaa 	bl	8003e24 <RCCEx_PLL3_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80036d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	2100      	movs	r1, #0
 80036f0:	6039      	str	r1, [r7, #0]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036fc:	460b      	mov	r3, r1
 80036fe:	4313      	orrs	r3, r2
 8003700:	d011      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	3328      	adds	r3, #40	@ 0x28
 8003708:	2102      	movs	r1, #2
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fb8a 	bl	8003e24 <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003726:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
}
 8003734:	4618      	mov	r0, r3
 8003736:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800373a:	46bd      	mov	sp, r7
 800373c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003740:	58024400 	.word	0x58024400

08003744 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003748:	f7fe fd96 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4904      	ldr	r1, [pc, #16]	@ (800376c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	58024400 	.word	0x58024400
 800376c:	080052dc 	.word	0x080052dc

08003770 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003778:	4ba1      	ldr	r3, [pc, #644]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003782:	4b9f      	ldr	r3, [pc, #636]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003786:	0b1b      	lsrs	r3, r3, #12
 8003788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800378c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800378e:	4b9c      	ldr	r3, [pc, #624]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800379a:	4b99      	ldr	r3, [pc, #612]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800379c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379e:	08db      	lsrs	r3, r3, #3
 80037a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8111 	beq.w	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	f000 8083 	beq.w	80038cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	f200 80a1 	bhi.w	8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d056      	beq.n	8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037da:	e099      	b.n	8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037dc:	4b88      	ldr	r3, [pc, #544]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d02d      	beq.n	8003844 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037e8:	4b85      	ldr	r3, [pc, #532]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	08db      	lsrs	r3, r3, #3
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	4a84      	ldr	r2, [pc, #528]	@ (8003a04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
 80037f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003812:	4b7b      	ldr	r3, [pc, #492]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003822:	ed97 6a03 	vldr	s12, [r7, #12]
 8003826:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800382a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003842:	e087      	b.n	8003954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003a0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003856:	4b6a      	ldr	r3, [pc, #424]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003866:	ed97 6a03 	vldr	s12, [r7, #12]
 800386a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800386e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800387a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003886:	e065      	b.n	8003954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003892:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389a:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800389c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ca:	e043      	b.n	8003954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038de:	4b48      	ldr	r3, [pc, #288]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800390e:	e021      	b.n	8003954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800391e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003922:	4b37      	ldr	r3, [pc, #220]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003932:	ed97 6a03 	vldr	s12, [r7, #12]
 8003936:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800393a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800393e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003952:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003954:	4b2a      	ldr	r3, [pc, #168]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	0a5b      	lsrs	r3, r3, #9
 800395a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800396a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800396e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397a:	ee17 2a90 	vmov	r2, s15
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003982:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003998:	ee37 7a87 	vadd.f32	s14, s15, s14
 800399c:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a8:	ee17 2a90 	vmov	r2, s15
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80039b0:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	0e1b      	lsrs	r3, r3, #24
 80039b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d6:	ee17 2a90 	vmov	r2, s15
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039de:	e008      	b.n	80039f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
}
 80039f2:	bf00      	nop
 80039f4:	3724      	adds	r7, #36	@ 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	58024400 	.word	0x58024400
 8003a04:	03d09000 	.word	0x03d09000
 8003a08:	46000000 	.word	0x46000000
 8003a0c:	4c742400 	.word	0x4c742400
 8003a10:	4a742400 	.word	0x4a742400
 8003a14:	4bbebc20 	.word	0x4bbebc20

08003a18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a20:	4ba1      	ldr	r3, [pc, #644]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003a2a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	0d1b      	lsrs	r3, r3, #20
 8003a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a36:	4b9c      	ldr	r3, [pc, #624]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a42:	4b99      	ldr	r3, [pc, #612]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8111 	beq.w	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f000 8083 	beq.w	8003b74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f200 80a1 	bhi.w	8003bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d056      	beq.n	8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a82:	e099      	b.n	8003bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a84:	4b88      	ldr	r3, [pc, #544]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d02d      	beq.n	8003aec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a90:	4b85      	ldr	r3, [pc, #532]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	4a84      	ldr	r2, [pc, #528]	@ (8003cac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ace:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003aea:	e087      	b.n	8003bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b2e:	e065      	b.n	8003bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b59      	ldr	r3, [pc, #356]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b72:	e043      	b.n	8003bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b48      	ldr	r3, [pc, #288]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bb6:	e021      	b.n	8003bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b37      	ldr	r3, [pc, #220]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c00:	0a5b      	lsrs	r3, r3, #9
 8003c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c22:	ee17 2a90 	vmov	r2, s15
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c50:	ee17 2a90 	vmov	r2, s15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c58:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	0e1b      	lsrs	r3, r3, #24
 8003c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7e:	ee17 2a90 	vmov	r2, s15
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c86:	e008      	b.n	8003c9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	bf00      	nop
 8003c9c:	3724      	adds	r7, #36	@ 0x24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	03d09000 	.word	0x03d09000
 8003cb0:	46000000 	.word	0x46000000
 8003cb4:	4c742400 	.word	0x4c742400
 8003cb8:	4a742400 	.word	0x4a742400
 8003cbc:	4bbebc20 	.word	0x4bbebc20

08003cc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cce:	4b53      	ldr	r3, [pc, #332]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d101      	bne.n	8003cde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e099      	b.n	8003e12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cde:	4b4f      	ldr	r3, [pc, #316]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4e      	ldr	r2, [pc, #312]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003ce4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cea:	f7fc ff9f 	bl	8000c2c <HAL_GetTick>
 8003cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cf2:	f7fc ff9b 	bl	8000c2c <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e086      	b.n	8003e12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d04:	4b45      	ldr	r3, [pc, #276]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d10:	4b42      	ldr	r3, [pc, #264]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	493f      	ldr	r1, [pc, #252]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	025b      	lsls	r3, r3, #9
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	061b      	lsls	r3, r3, #24
 8003d50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d54:	4931      	ldr	r1, [pc, #196]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d5a:	4b30      	ldr	r3, [pc, #192]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	492d      	ldr	r1, [pc, #180]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	f023 0220 	bic.w	r2, r3, #32
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	4928      	ldr	r1, [pc, #160]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d7e:	4b27      	ldr	r3, [pc, #156]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	4a26      	ldr	r2, [pc, #152]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d84:	f023 0310 	bic.w	r3, r3, #16
 8003d88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d8a:	4b24      	ldr	r3, [pc, #144]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d8e:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <RCCEx_PLL2_Config+0x160>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	69d2      	ldr	r2, [r2, #28]
 8003d96:	00d2      	lsls	r2, r2, #3
 8003d98:	4920      	ldr	r1, [pc, #128]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003da4:	f043 0310 	orr.w	r3, r3, #16
 8003da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003db0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003db6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003dbc:	e00f      	b.n	8003dde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d106      	bne.n	8003dd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003dc4:	4b15      	ldr	r3, [pc, #84]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003dd0:	e005      	b.n	8003dde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003dd2:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	4a11      	ldr	r2, [pc, #68]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dde:	4b0f      	ldr	r3, [pc, #60]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a0e      	ldr	r2, [pc, #56]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003de4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dea:	f7fc ff1f 	bl	8000c2c <HAL_GetTick>
 8003dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003df0:	e008      	b.n	8003e04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003df2:	f7fc ff1b 	bl	8000c2c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e006      	b.n	8003e12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <RCCEx_PLL2_Config+0x15c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	58024400 	.word	0x58024400
 8003e20:	ffff0007 	.word	0xffff0007

08003e24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e32:	4b53      	ldr	r3, [pc, #332]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d101      	bne.n	8003e42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e099      	b.n	8003f76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e42:	4b4f      	ldr	r3, [pc, #316]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a4e      	ldr	r2, [pc, #312]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4e:	f7fc feed 	bl	8000c2c <HAL_GetTick>
 8003e52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e56:	f7fc fee9 	bl	8000c2c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e086      	b.n	8003f76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e68:	4b45      	ldr	r3, [pc, #276]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e74:	4b42      	ldr	r3, [pc, #264]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	051b      	lsls	r3, r3, #20
 8003e82:	493f      	ldr	r1, [pc, #252]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	025b      	lsls	r3, r3, #9
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003eb8:	4931      	ldr	r1, [pc, #196]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ebe:	4b30      	ldr	r3, [pc, #192]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	492d      	ldr	r1, [pc, #180]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4928      	ldr	r1, [pc, #160]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ee2:	4b27      	ldr	r3, [pc, #156]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	4a26      	ldr	r2, [pc, #152]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003eee:	4b24      	ldr	r3, [pc, #144]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef2:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <RCCEx_PLL3_Config+0x160>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	69d2      	ldr	r2, [r2, #28]
 8003efa:	00d2      	lsls	r2, r2, #3
 8003efc:	4920      	ldr	r1, [pc, #128]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f02:	4b1f      	ldr	r3, [pc, #124]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	4a1e      	ldr	r2, [pc, #120]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	4a19      	ldr	r2, [pc, #100]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f20:	e00f      	b.n	8003f42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f28:	4b15      	ldr	r3, [pc, #84]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	4a14      	ldr	r2, [pc, #80]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f34:	e005      	b.n	8003f42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f36:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	4a11      	ldr	r2, [pc, #68]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f42:	4b0f      	ldr	r3, [pc, #60]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a0e      	ldr	r2, [pc, #56]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4e:	f7fc fe6d 	bl	8000c2c <HAL_GetTick>
 8003f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f54:	e008      	b.n	8003f68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f56:	f7fc fe69 	bl	8000c2c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e006      	b.n	8003f76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <RCCEx_PLL3_Config+0x15c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	58024400 	.word	0x58024400
 8003f84:	ffff0007 	.word	0xffff0007

08003f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e042      	b.n	8004020 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fc fc6d 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2224      	movs	r2, #36	@ 0x24
 8003fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fe1e 	bl	8004c14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8b3 	bl	8004144 <UART_SetConfig>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e01b      	b.n	8004020 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fe9d 	bl	8004d58 <UART_CheckIdleState>
 800401e:	4603      	mov	r3, r0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403e:	2b20      	cmp	r3, #32
 8004040:	d17b      	bne.n	800413a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_UART_Transmit+0x26>
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e074      	b.n	800413c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2221      	movs	r2, #33	@ 0x21
 800405e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004062:	f7fc fde3 	bl	8000c2c <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004080:	d108      	bne.n	8004094 <HAL_UART_Transmit+0x6c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e003      	b.n	800409c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800409c:	e030      	b.n	8004100 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 feff 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e03d      	b.n	800413c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	3302      	adds	r3, #2
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	e007      	b.n	80040ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1c8      	bne.n	800409e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	2140      	movs	r1, #64	@ 0x40
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fec8 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e006      	b.n	800413c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b092      	sub	sp, #72	@ 0x48
 800414a:	af00      	add	r7, sp, #0
 800414c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	431a      	orrs	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	431a      	orrs	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4313      	orrs	r3, r2
 800416a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4bbe      	ldr	r3, [pc, #760]	@ (800446c <UART_SetConfig+0x328>)
 8004174:	4013      	ands	r3, r2
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800417c:	430b      	orrs	r3, r1
 800417e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4ab3      	ldr	r2, [pc, #716]	@ (8004470 <UART_SetConfig+0x32c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ac:	4313      	orrs	r3, r2
 80041ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	4baf      	ldr	r3, [pc, #700]	@ (8004474 <UART_SetConfig+0x330>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	f023 010f 	bic.w	r1, r3, #15
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4aa6      	ldr	r2, [pc, #664]	@ (8004478 <UART_SetConfig+0x334>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d177      	bne.n	80042d4 <UART_SetConfig+0x190>
 80041e4:	4ba5      	ldr	r3, [pc, #660]	@ (800447c <UART_SetConfig+0x338>)
 80041e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041ec:	2b28      	cmp	r3, #40	@ 0x28
 80041ee:	d86d      	bhi.n	80042cc <UART_SetConfig+0x188>
 80041f0:	a201      	add	r2, pc, #4	@ (adr r2, 80041f8 <UART_SetConfig+0xb4>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	0800429d 	.word	0x0800429d
 80041fc:	080042cd 	.word	0x080042cd
 8004200:	080042cd 	.word	0x080042cd
 8004204:	080042cd 	.word	0x080042cd
 8004208:	080042cd 	.word	0x080042cd
 800420c:	080042cd 	.word	0x080042cd
 8004210:	080042cd 	.word	0x080042cd
 8004214:	080042cd 	.word	0x080042cd
 8004218:	080042a5 	.word	0x080042a5
 800421c:	080042cd 	.word	0x080042cd
 8004220:	080042cd 	.word	0x080042cd
 8004224:	080042cd 	.word	0x080042cd
 8004228:	080042cd 	.word	0x080042cd
 800422c:	080042cd 	.word	0x080042cd
 8004230:	080042cd 	.word	0x080042cd
 8004234:	080042cd 	.word	0x080042cd
 8004238:	080042ad 	.word	0x080042ad
 800423c:	080042cd 	.word	0x080042cd
 8004240:	080042cd 	.word	0x080042cd
 8004244:	080042cd 	.word	0x080042cd
 8004248:	080042cd 	.word	0x080042cd
 800424c:	080042cd 	.word	0x080042cd
 8004250:	080042cd 	.word	0x080042cd
 8004254:	080042cd 	.word	0x080042cd
 8004258:	080042b5 	.word	0x080042b5
 800425c:	080042cd 	.word	0x080042cd
 8004260:	080042cd 	.word	0x080042cd
 8004264:	080042cd 	.word	0x080042cd
 8004268:	080042cd 	.word	0x080042cd
 800426c:	080042cd 	.word	0x080042cd
 8004270:	080042cd 	.word	0x080042cd
 8004274:	080042cd 	.word	0x080042cd
 8004278:	080042bd 	.word	0x080042bd
 800427c:	080042cd 	.word	0x080042cd
 8004280:	080042cd 	.word	0x080042cd
 8004284:	080042cd 	.word	0x080042cd
 8004288:	080042cd 	.word	0x080042cd
 800428c:	080042cd 	.word	0x080042cd
 8004290:	080042cd 	.word	0x080042cd
 8004294:	080042cd 	.word	0x080042cd
 8004298:	080042c5 	.word	0x080042c5
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042a2:	e222      	b.n	80046ea <UART_SetConfig+0x5a6>
 80042a4:	2304      	movs	r3, #4
 80042a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042aa:	e21e      	b.n	80046ea <UART_SetConfig+0x5a6>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042b2:	e21a      	b.n	80046ea <UART_SetConfig+0x5a6>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ba:	e216      	b.n	80046ea <UART_SetConfig+0x5a6>
 80042bc:	2320      	movs	r3, #32
 80042be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042c2:	e212      	b.n	80046ea <UART_SetConfig+0x5a6>
 80042c4:	2340      	movs	r3, #64	@ 0x40
 80042c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ca:	e20e      	b.n	80046ea <UART_SetConfig+0x5a6>
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042d2:	e20a      	b.n	80046ea <UART_SetConfig+0x5a6>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a69      	ldr	r2, [pc, #420]	@ (8004480 <UART_SetConfig+0x33c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d130      	bne.n	8004340 <UART_SetConfig+0x1fc>
 80042de:	4b67      	ldr	r3, [pc, #412]	@ (800447c <UART_SetConfig+0x338>)
 80042e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d826      	bhi.n	8004338 <UART_SetConfig+0x1f4>
 80042ea:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <UART_SetConfig+0x1ac>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004309 	.word	0x08004309
 80042f4:	08004311 	.word	0x08004311
 80042f8:	08004319 	.word	0x08004319
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004329 	.word	0x08004329
 8004304:	08004331 	.word	0x08004331
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800430e:	e1ec      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004310:	2304      	movs	r3, #4
 8004312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004316:	e1e8      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004318:	2308      	movs	r3, #8
 800431a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800431e:	e1e4      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004320:	2310      	movs	r3, #16
 8004322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004326:	e1e0      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004328:	2320      	movs	r3, #32
 800432a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800432e:	e1dc      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004330:	2340      	movs	r3, #64	@ 0x40
 8004332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004336:	e1d8      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004338:	2380      	movs	r3, #128	@ 0x80
 800433a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800433e:	e1d4      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a4f      	ldr	r2, [pc, #316]	@ (8004484 <UART_SetConfig+0x340>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d130      	bne.n	80043ac <UART_SetConfig+0x268>
 800434a:	4b4c      	ldr	r3, [pc, #304]	@ (800447c <UART_SetConfig+0x338>)
 800434c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	2b05      	cmp	r3, #5
 8004354:	d826      	bhi.n	80043a4 <UART_SetConfig+0x260>
 8004356:	a201      	add	r2, pc, #4	@ (adr r2, 800435c <UART_SetConfig+0x218>)
 8004358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435c:	08004375 	.word	0x08004375
 8004360:	0800437d 	.word	0x0800437d
 8004364:	08004385 	.word	0x08004385
 8004368:	0800438d 	.word	0x0800438d
 800436c:	08004395 	.word	0x08004395
 8004370:	0800439d 	.word	0x0800439d
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800437a:	e1b6      	b.n	80046ea <UART_SetConfig+0x5a6>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004382:	e1b2      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800438a:	e1ae      	b.n	80046ea <UART_SetConfig+0x5a6>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004392:	e1aa      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004394:	2320      	movs	r3, #32
 8004396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800439a:	e1a6      	b.n	80046ea <UART_SetConfig+0x5a6>
 800439c:	2340      	movs	r3, #64	@ 0x40
 800439e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043a2:	e1a2      	b.n	80046ea <UART_SetConfig+0x5a6>
 80043a4:	2380      	movs	r3, #128	@ 0x80
 80043a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043aa:	e19e      	b.n	80046ea <UART_SetConfig+0x5a6>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a35      	ldr	r2, [pc, #212]	@ (8004488 <UART_SetConfig+0x344>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d130      	bne.n	8004418 <UART_SetConfig+0x2d4>
 80043b6:	4b31      	ldr	r3, [pc, #196]	@ (800447c <UART_SetConfig+0x338>)
 80043b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d826      	bhi.n	8004410 <UART_SetConfig+0x2cc>
 80043c2:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <UART_SetConfig+0x284>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043e1 	.word	0x080043e1
 80043cc:	080043e9 	.word	0x080043e9
 80043d0:	080043f1 	.word	0x080043f1
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	08004401 	.word	0x08004401
 80043dc:	08004409 	.word	0x08004409
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043e6:	e180      	b.n	80046ea <UART_SetConfig+0x5a6>
 80043e8:	2304      	movs	r3, #4
 80043ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ee:	e17c      	b.n	80046ea <UART_SetConfig+0x5a6>
 80043f0:	2308      	movs	r3, #8
 80043f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043f6:	e178      	b.n	80046ea <UART_SetConfig+0x5a6>
 80043f8:	2310      	movs	r3, #16
 80043fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043fe:	e174      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004400:	2320      	movs	r3, #32
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004406:	e170      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004408:	2340      	movs	r3, #64	@ 0x40
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440e:	e16c      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004416:	e168      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1b      	ldr	r2, [pc, #108]	@ (800448c <UART_SetConfig+0x348>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d142      	bne.n	80044a8 <UART_SetConfig+0x364>
 8004422:	4b16      	ldr	r3, [pc, #88]	@ (800447c <UART_SetConfig+0x338>)
 8004424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	2b05      	cmp	r3, #5
 800442c:	d838      	bhi.n	80044a0 <UART_SetConfig+0x35c>
 800442e:	a201      	add	r2, pc, #4	@ (adr r2, 8004434 <UART_SetConfig+0x2f0>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	0800444d 	.word	0x0800444d
 8004438:	08004455 	.word	0x08004455
 800443c:	0800445d 	.word	0x0800445d
 8004440:	08004465 	.word	0x08004465
 8004444:	08004491 	.word	0x08004491
 8004448:	08004499 	.word	0x08004499
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004452:	e14a      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004454:	2304      	movs	r3, #4
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800445a:	e146      	b.n	80046ea <UART_SetConfig+0x5a6>
 800445c:	2308      	movs	r3, #8
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004462:	e142      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004464:	2310      	movs	r3, #16
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800446a:	e13e      	b.n	80046ea <UART_SetConfig+0x5a6>
 800446c:	cfff69f3 	.word	0xcfff69f3
 8004470:	58000c00 	.word	0x58000c00
 8004474:	11fff4ff 	.word	0x11fff4ff
 8004478:	40011000 	.word	0x40011000
 800447c:	58024400 	.word	0x58024400
 8004480:	40004400 	.word	0x40004400
 8004484:	40004800 	.word	0x40004800
 8004488:	40004c00 	.word	0x40004c00
 800448c:	40005000 	.word	0x40005000
 8004490:	2320      	movs	r3, #32
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004496:	e128      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004498:	2340      	movs	r3, #64	@ 0x40
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449e:	e124      	b.n	80046ea <UART_SetConfig+0x5a6>
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a6:	e120      	b.n	80046ea <UART_SetConfig+0x5a6>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4acb      	ldr	r2, [pc, #812]	@ (80047dc <UART_SetConfig+0x698>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d176      	bne.n	80045a0 <UART_SetConfig+0x45c>
 80044b2:	4bcb      	ldr	r3, [pc, #812]	@ (80047e0 <UART_SetConfig+0x69c>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ba:	2b28      	cmp	r3, #40	@ 0x28
 80044bc:	d86c      	bhi.n	8004598 <UART_SetConfig+0x454>
 80044be:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0x380>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	08004569 	.word	0x08004569
 80044c8:	08004599 	.word	0x08004599
 80044cc:	08004599 	.word	0x08004599
 80044d0:	08004599 	.word	0x08004599
 80044d4:	08004599 	.word	0x08004599
 80044d8:	08004599 	.word	0x08004599
 80044dc:	08004599 	.word	0x08004599
 80044e0:	08004599 	.word	0x08004599
 80044e4:	08004571 	.word	0x08004571
 80044e8:	08004599 	.word	0x08004599
 80044ec:	08004599 	.word	0x08004599
 80044f0:	08004599 	.word	0x08004599
 80044f4:	08004599 	.word	0x08004599
 80044f8:	08004599 	.word	0x08004599
 80044fc:	08004599 	.word	0x08004599
 8004500:	08004599 	.word	0x08004599
 8004504:	08004579 	.word	0x08004579
 8004508:	08004599 	.word	0x08004599
 800450c:	08004599 	.word	0x08004599
 8004510:	08004599 	.word	0x08004599
 8004514:	08004599 	.word	0x08004599
 8004518:	08004599 	.word	0x08004599
 800451c:	08004599 	.word	0x08004599
 8004520:	08004599 	.word	0x08004599
 8004524:	08004581 	.word	0x08004581
 8004528:	08004599 	.word	0x08004599
 800452c:	08004599 	.word	0x08004599
 8004530:	08004599 	.word	0x08004599
 8004534:	08004599 	.word	0x08004599
 8004538:	08004599 	.word	0x08004599
 800453c:	08004599 	.word	0x08004599
 8004540:	08004599 	.word	0x08004599
 8004544:	08004589 	.word	0x08004589
 8004548:	08004599 	.word	0x08004599
 800454c:	08004599 	.word	0x08004599
 8004550:	08004599 	.word	0x08004599
 8004554:	08004599 	.word	0x08004599
 8004558:	08004599 	.word	0x08004599
 800455c:	08004599 	.word	0x08004599
 8004560:	08004599 	.word	0x08004599
 8004564:	08004591 	.word	0x08004591
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800456e:	e0bc      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004570:	2304      	movs	r3, #4
 8004572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004576:	e0b8      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004578:	2308      	movs	r3, #8
 800457a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800457e:	e0b4      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004580:	2310      	movs	r3, #16
 8004582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004586:	e0b0      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004588:	2320      	movs	r3, #32
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800458e:	e0ac      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004590:	2340      	movs	r3, #64	@ 0x40
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004596:	e0a8      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004598:	2380      	movs	r3, #128	@ 0x80
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800459e:	e0a4      	b.n	80046ea <UART_SetConfig+0x5a6>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a8f      	ldr	r2, [pc, #572]	@ (80047e4 <UART_SetConfig+0x6a0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d130      	bne.n	800460c <UART_SetConfig+0x4c8>
 80045aa:	4b8d      	ldr	r3, [pc, #564]	@ (80047e0 <UART_SetConfig+0x69c>)
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d826      	bhi.n	8004604 <UART_SetConfig+0x4c0>
 80045b6:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <UART_SetConfig+0x478>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045d5 	.word	0x080045d5
 80045c0:	080045dd 	.word	0x080045dd
 80045c4:	080045e5 	.word	0x080045e5
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045da:	e086      	b.n	80046ea <UART_SetConfig+0x5a6>
 80045dc:	2304      	movs	r3, #4
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e2:	e082      	b.n	80046ea <UART_SetConfig+0x5a6>
 80045e4:	2308      	movs	r3, #8
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ea:	e07e      	b.n	80046ea <UART_SetConfig+0x5a6>
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045f2:	e07a      	b.n	80046ea <UART_SetConfig+0x5a6>
 80045f4:	2320      	movs	r3, #32
 80045f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045fa:	e076      	b.n	80046ea <UART_SetConfig+0x5a6>
 80045fc:	2340      	movs	r3, #64	@ 0x40
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004602:	e072      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004604:	2380      	movs	r3, #128	@ 0x80
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460a:	e06e      	b.n	80046ea <UART_SetConfig+0x5a6>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a75      	ldr	r2, [pc, #468]	@ (80047e8 <UART_SetConfig+0x6a4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d130      	bne.n	8004678 <UART_SetConfig+0x534>
 8004616:	4b72      	ldr	r3, [pc, #456]	@ (80047e0 <UART_SetConfig+0x69c>)
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	2b05      	cmp	r3, #5
 8004620:	d826      	bhi.n	8004670 <UART_SetConfig+0x52c>
 8004622:	a201      	add	r2, pc, #4	@ (adr r2, 8004628 <UART_SetConfig+0x4e4>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	08004641 	.word	0x08004641
 800462c:	08004649 	.word	0x08004649
 8004630:	08004651 	.word	0x08004651
 8004634:	08004659 	.word	0x08004659
 8004638:	08004661 	.word	0x08004661
 800463c:	08004669 	.word	0x08004669
 8004640:	2300      	movs	r3, #0
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004646:	e050      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004648:	2304      	movs	r3, #4
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800464e:	e04c      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004650:	2308      	movs	r3, #8
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004656:	e048      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004658:	2310      	movs	r3, #16
 800465a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800465e:	e044      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004660:	2320      	movs	r3, #32
 8004662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004666:	e040      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004668:	2340      	movs	r3, #64	@ 0x40
 800466a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800466e:	e03c      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004670:	2380      	movs	r3, #128	@ 0x80
 8004672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004676:	e038      	b.n	80046ea <UART_SetConfig+0x5a6>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5b      	ldr	r2, [pc, #364]	@ (80047ec <UART_SetConfig+0x6a8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d130      	bne.n	80046e4 <UART_SetConfig+0x5a0>
 8004682:	4b57      	ldr	r3, [pc, #348]	@ (80047e0 <UART_SetConfig+0x69c>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	2b05      	cmp	r3, #5
 800468c:	d826      	bhi.n	80046dc <UART_SetConfig+0x598>
 800468e:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <UART_SetConfig+0x550>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046ad 	.word	0x080046ad
 8004698:	080046b5 	.word	0x080046b5
 800469c:	080046bd 	.word	0x080046bd
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b2:	e01a      	b.n	80046ea <UART_SetConfig+0x5a6>
 80046b4:	2304      	movs	r3, #4
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ba:	e016      	b.n	80046ea <UART_SetConfig+0x5a6>
 80046bc:	2308      	movs	r3, #8
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c2:	e012      	b.n	80046ea <UART_SetConfig+0x5a6>
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ca:	e00e      	b.n	80046ea <UART_SetConfig+0x5a6>
 80046cc:	2320      	movs	r3, #32
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d2:	e00a      	b.n	80046ea <UART_SetConfig+0x5a6>
 80046d4:	2340      	movs	r3, #64	@ 0x40
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046da:	e006      	b.n	80046ea <UART_SetConfig+0x5a6>
 80046dc:	2380      	movs	r3, #128	@ 0x80
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e2:	e002      	b.n	80046ea <UART_SetConfig+0x5a6>
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3f      	ldr	r2, [pc, #252]	@ (80047ec <UART_SetConfig+0x6a8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	f040 80f8 	bne.w	80048e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	dc46      	bgt.n	800478c <UART_SetConfig+0x648>
 80046fe:	2b02      	cmp	r3, #2
 8004700:	f2c0 8082 	blt.w	8004808 <UART_SetConfig+0x6c4>
 8004704:	3b02      	subs	r3, #2
 8004706:	2b1e      	cmp	r3, #30
 8004708:	d87e      	bhi.n	8004808 <UART_SetConfig+0x6c4>
 800470a:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <UART_SetConfig+0x5cc>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004793 	.word	0x08004793
 8004714:	08004809 	.word	0x08004809
 8004718:	0800479b 	.word	0x0800479b
 800471c:	08004809 	.word	0x08004809
 8004720:	08004809 	.word	0x08004809
 8004724:	08004809 	.word	0x08004809
 8004728:	080047ab 	.word	0x080047ab
 800472c:	08004809 	.word	0x08004809
 8004730:	08004809 	.word	0x08004809
 8004734:	08004809 	.word	0x08004809
 8004738:	08004809 	.word	0x08004809
 800473c:	08004809 	.word	0x08004809
 8004740:	08004809 	.word	0x08004809
 8004744:	08004809 	.word	0x08004809
 8004748:	080047bb 	.word	0x080047bb
 800474c:	08004809 	.word	0x08004809
 8004750:	08004809 	.word	0x08004809
 8004754:	08004809 	.word	0x08004809
 8004758:	08004809 	.word	0x08004809
 800475c:	08004809 	.word	0x08004809
 8004760:	08004809 	.word	0x08004809
 8004764:	08004809 	.word	0x08004809
 8004768:	08004809 	.word	0x08004809
 800476c:	08004809 	.word	0x08004809
 8004770:	08004809 	.word	0x08004809
 8004774:	08004809 	.word	0x08004809
 8004778:	08004809 	.word	0x08004809
 800477c:	08004809 	.word	0x08004809
 8004780:	08004809 	.word	0x08004809
 8004784:	08004809 	.word	0x08004809
 8004788:	080047fb 	.word	0x080047fb
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d037      	beq.n	8004800 <UART_SetConfig+0x6bc>
 8004790:	e03a      	b.n	8004808 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004792:	f7fe ffd7 	bl	8003744 <HAL_RCCEx_GetD3PCLK1Freq>
 8004796:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004798:	e03c      	b.n	8004814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800479a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe ffe6 	bl	8003770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047a8:	e034      	b.n	8004814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047aa:	f107 0318 	add.w	r3, r7, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff f932 	bl	8003a18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047b8:	e02c      	b.n	8004814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ba:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <UART_SetConfig+0x69c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <UART_SetConfig+0x69c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	4a07      	ldr	r2, [pc, #28]	@ (80047f0 <UART_SetConfig+0x6ac>)
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047d8:	e01c      	b.n	8004814 <UART_SetConfig+0x6d0>
 80047da:	bf00      	nop
 80047dc:	40011400 	.word	0x40011400
 80047e0:	58024400 	.word	0x58024400
 80047e4:	40007800 	.word	0x40007800
 80047e8:	40007c00 	.word	0x40007c00
 80047ec:	58000c00 	.word	0x58000c00
 80047f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80047f4:	4b9d      	ldr	r3, [pc, #628]	@ (8004a6c <UART_SetConfig+0x928>)
 80047f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047f8:	e00c      	b.n	8004814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047fa:	4b9d      	ldr	r3, [pc, #628]	@ (8004a70 <UART_SetConfig+0x92c>)
 80047fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047fe:	e009      	b.n	8004814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004800:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004806:	e005      	b.n	8004814 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004812:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 81de 	beq.w	8004bd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	4a94      	ldr	r2, [pc, #592]	@ (8004a74 <UART_SetConfig+0x930>)
 8004822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004826:	461a      	mov	r2, r3
 8004828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800482a:	fbb3 f3f2 	udiv	r3, r3, r2
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800483c:	429a      	cmp	r2, r3
 800483e:	d305      	bcc.n	800484c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004848:	429a      	cmp	r2, r3
 800484a:	d903      	bls.n	8004854 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004852:	e1c1      	b.n	8004bd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004856:	2200      	movs	r2, #0
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	60fa      	str	r2, [r7, #12]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	4a84      	ldr	r2, [pc, #528]	@ (8004a74 <UART_SetConfig+0x930>)
 8004862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004866:	b29b      	uxth	r3, r3
 8004868:	2200      	movs	r2, #0
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004872:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004876:	f7fb fd2f 	bl	80002d8 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4610      	mov	r0, r2
 8004880:	4619      	mov	r1, r3
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	020b      	lsls	r3, r1, #8
 800488c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004890:	0202      	lsls	r2, r0, #8
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	6849      	ldr	r1, [r1, #4]
 8004896:	0849      	lsrs	r1, r1, #1
 8004898:	2000      	movs	r0, #0
 800489a:	460c      	mov	r4, r1
 800489c:	4605      	mov	r5, r0
 800489e:	eb12 0804 	adds.w	r8, r2, r4
 80048a2:	eb43 0905 	adc.w	r9, r3, r5
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	469a      	mov	sl, r3
 80048ae:	4693      	mov	fp, r2
 80048b0:	4652      	mov	r2, sl
 80048b2:	465b      	mov	r3, fp
 80048b4:	4640      	mov	r0, r8
 80048b6:	4649      	mov	r1, r9
 80048b8:	f7fb fd0e 	bl	80002d8 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4613      	mov	r3, r2
 80048c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ca:	d308      	bcc.n	80048de <UART_SetConfig+0x79a>
 80048cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d2:	d204      	bcs.n	80048de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048da:	60da      	str	r2, [r3, #12]
 80048dc:	e17c      	b.n	8004bd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80048e4:	e178      	b.n	8004bd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ee:	f040 80c5 	bne.w	8004a7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80048f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	dc48      	bgt.n	800498c <UART_SetConfig+0x848>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	db7b      	blt.n	80049f6 <UART_SetConfig+0x8b2>
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d879      	bhi.n	80049f6 <UART_SetConfig+0x8b2>
 8004902:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <UART_SetConfig+0x7c4>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	08004993 	.word	0x08004993
 800490c:	0800499b 	.word	0x0800499b
 8004910:	080049f7 	.word	0x080049f7
 8004914:	080049f7 	.word	0x080049f7
 8004918:	080049a3 	.word	0x080049a3
 800491c:	080049f7 	.word	0x080049f7
 8004920:	080049f7 	.word	0x080049f7
 8004924:	080049f7 	.word	0x080049f7
 8004928:	080049b3 	.word	0x080049b3
 800492c:	080049f7 	.word	0x080049f7
 8004930:	080049f7 	.word	0x080049f7
 8004934:	080049f7 	.word	0x080049f7
 8004938:	080049f7 	.word	0x080049f7
 800493c:	080049f7 	.word	0x080049f7
 8004940:	080049f7 	.word	0x080049f7
 8004944:	080049f7 	.word	0x080049f7
 8004948:	080049c3 	.word	0x080049c3
 800494c:	080049f7 	.word	0x080049f7
 8004950:	080049f7 	.word	0x080049f7
 8004954:	080049f7 	.word	0x080049f7
 8004958:	080049f7 	.word	0x080049f7
 800495c:	080049f7 	.word	0x080049f7
 8004960:	080049f7 	.word	0x080049f7
 8004964:	080049f7 	.word	0x080049f7
 8004968:	080049f7 	.word	0x080049f7
 800496c:	080049f7 	.word	0x080049f7
 8004970:	080049f7 	.word	0x080049f7
 8004974:	080049f7 	.word	0x080049f7
 8004978:	080049f7 	.word	0x080049f7
 800497c:	080049f7 	.word	0x080049f7
 8004980:	080049f7 	.word	0x080049f7
 8004984:	080049f7 	.word	0x080049f7
 8004988:	080049e9 	.word	0x080049e9
 800498c:	2b40      	cmp	r3, #64	@ 0x40
 800498e:	d02e      	beq.n	80049ee <UART_SetConfig+0x8aa>
 8004990:	e031      	b.n	80049f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004992:	f7fd fca1 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8004996:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004998:	e033      	b.n	8004a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800499a:	f7fd fcb3 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 800499e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80049a0:	e02f      	b.n	8004a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fee2 	bl	8003770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049b0:	e027      	b.n	8004a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049b2:	f107 0318 	add.w	r3, r7, #24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff f82e 	bl	8003a18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049c0:	e01f      	b.n	8004a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a78 <UART_SetConfig+0x934>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004a78 <UART_SetConfig+0x934>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	08db      	lsrs	r3, r3, #3
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	4a24      	ldr	r2, [pc, #144]	@ (8004a6c <UART_SetConfig+0x928>)
 80049da:	fa22 f303 	lsr.w	r3, r2, r3
 80049de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049e0:	e00f      	b.n	8004a02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80049e2:	4b22      	ldr	r3, [pc, #136]	@ (8004a6c <UART_SetConfig+0x928>)
 80049e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049e6:	e00c      	b.n	8004a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049e8:	4b21      	ldr	r3, [pc, #132]	@ (8004a70 <UART_SetConfig+0x92c>)
 80049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049ec:	e009      	b.n	8004a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049f4:	e005      	b.n	8004a02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80e7 	beq.w	8004bd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	4a19      	ldr	r2, [pc, #100]	@ (8004a74 <UART_SetConfig+0x930>)
 8004a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a14:	461a      	mov	r2, r3
 8004a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a1c:	005a      	lsls	r2, r3, #1
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	441a      	add	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a32:	2b0f      	cmp	r3, #15
 8004a34:	d916      	bls.n	8004a64 <UART_SetConfig+0x920>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3c:	d212      	bcs.n	8004a64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f023 030f 	bic.w	r3, r3, #15
 8004a46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a56:	4313      	orrs	r3, r2
 8004a58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004a60:	60da      	str	r2, [r3, #12]
 8004a62:	e0b9      	b.n	8004bd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004a6a:	e0b5      	b.n	8004bd8 <UART_SetConfig+0xa94>
 8004a6c:	03d09000 	.word	0x03d09000
 8004a70:	003d0900 	.word	0x003d0900
 8004a74:	080052ec 	.word	0x080052ec
 8004a78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	dc49      	bgt.n	8004b18 <UART_SetConfig+0x9d4>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	db7c      	blt.n	8004b82 <UART_SetConfig+0xa3e>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d87a      	bhi.n	8004b82 <UART_SetConfig+0xa3e>
 8004a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <UART_SetConfig+0x950>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004b1f 	.word	0x08004b1f
 8004a98:	08004b27 	.word	0x08004b27
 8004a9c:	08004b83 	.word	0x08004b83
 8004aa0:	08004b83 	.word	0x08004b83
 8004aa4:	08004b2f 	.word	0x08004b2f
 8004aa8:	08004b83 	.word	0x08004b83
 8004aac:	08004b83 	.word	0x08004b83
 8004ab0:	08004b83 	.word	0x08004b83
 8004ab4:	08004b3f 	.word	0x08004b3f
 8004ab8:	08004b83 	.word	0x08004b83
 8004abc:	08004b83 	.word	0x08004b83
 8004ac0:	08004b83 	.word	0x08004b83
 8004ac4:	08004b83 	.word	0x08004b83
 8004ac8:	08004b83 	.word	0x08004b83
 8004acc:	08004b83 	.word	0x08004b83
 8004ad0:	08004b83 	.word	0x08004b83
 8004ad4:	08004b4f 	.word	0x08004b4f
 8004ad8:	08004b83 	.word	0x08004b83
 8004adc:	08004b83 	.word	0x08004b83
 8004ae0:	08004b83 	.word	0x08004b83
 8004ae4:	08004b83 	.word	0x08004b83
 8004ae8:	08004b83 	.word	0x08004b83
 8004aec:	08004b83 	.word	0x08004b83
 8004af0:	08004b83 	.word	0x08004b83
 8004af4:	08004b83 	.word	0x08004b83
 8004af8:	08004b83 	.word	0x08004b83
 8004afc:	08004b83 	.word	0x08004b83
 8004b00:	08004b83 	.word	0x08004b83
 8004b04:	08004b83 	.word	0x08004b83
 8004b08:	08004b83 	.word	0x08004b83
 8004b0c:	08004b83 	.word	0x08004b83
 8004b10:	08004b83 	.word	0x08004b83
 8004b14:	08004b75 	.word	0x08004b75
 8004b18:	2b40      	cmp	r3, #64	@ 0x40
 8004b1a:	d02e      	beq.n	8004b7a <UART_SetConfig+0xa36>
 8004b1c:	e031      	b.n	8004b82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b1e:	f7fd fbdb 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8004b22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b24:	e033      	b.n	8004b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b26:	f7fd fbed 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8004b2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b2c:	e02f      	b.n	8004b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fe1c 	bl	8003770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b3c:	e027      	b.n	8004b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b3e:	f107 0318 	add.w	r3, r7, #24
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe ff68 	bl	8003a18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b4c:	e01f      	b.n	8004b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c04 <UART_SetConfig+0xac0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c04 <UART_SetConfig+0xac0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	4a28      	ldr	r2, [pc, #160]	@ (8004c08 <UART_SetConfig+0xac4>)
 8004b66:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b6c:	e00f      	b.n	8004b8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004b6e:	4b26      	ldr	r3, [pc, #152]	@ (8004c08 <UART_SetConfig+0xac4>)
 8004b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b72:	e00c      	b.n	8004b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <UART_SetConfig+0xac8>)
 8004b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b78:	e009      	b.n	8004b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b80:	e005      	b.n	8004b8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d021      	beq.n	8004bd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	4a1d      	ldr	r2, [pc, #116]	@ (8004c10 <UART_SetConfig+0xacc>)
 8004b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	441a      	add	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	2b0f      	cmp	r3, #15
 8004bbc:	d909      	bls.n	8004bd2 <UART_SetConfig+0xa8e>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bc4:	d205      	bcs.n	8004bd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60da      	str	r2, [r3, #12]
 8004bd0:	e002      	b.n	8004bd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2200      	movs	r2, #0
 8004bec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bf4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3748      	adds	r7, #72	@ 0x48
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c02:	bf00      	nop
 8004c04:	58024400 	.word	0x58024400
 8004c08:	03d09000 	.word	0x03d09000
 8004c0c:	003d0900 	.word	0x003d0900
 8004c10:	080052ec 	.word	0x080052ec

08004c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d12:	d10a      	bne.n	8004d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b098      	sub	sp, #96	@ 0x60
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d68:	f7fb ff60 	bl	8000c2c <HAL_GetTick>
 8004d6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d12f      	bne.n	8004ddc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d84:	2200      	movs	r2, #0
 8004d86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f88e 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d022      	beq.n	8004ddc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004daa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e6      	bne.n	8004d96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e063      	b.n	8004ea4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d149      	bne.n	8004e7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df2:	2200      	movs	r2, #0
 8004df4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f857 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d03c      	beq.n	8004e7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	623b      	str	r3, [r7, #32]
   return(result);
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e22:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e6      	bne.n	8004e04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3308      	adds	r3, #8
 8004e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e56:	61fa      	str	r2, [r7, #28]
 8004e58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	69b9      	ldr	r1, [r7, #24]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	617b      	str	r3, [r7, #20]
   return(result);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e5      	bne.n	8004e36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e012      	b.n	8004ea4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3758      	adds	r7, #88	@ 0x58
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebc:	e04f      	b.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d04b      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fb feb1 	bl	8000c2c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <UART_WaitOnFlagUntilTimeout+0x30>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e04e      	b.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d037      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b80      	cmp	r3, #128	@ 0x80
 8004ef2:	d034      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	d031      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d110      	bne.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f839 	bl	8004f88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e029      	b.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f38:	d111      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f81f 	bl	8004f88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e00f      	b.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4013      	ands	r3, r2
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d0a0      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b095      	sub	sp, #84	@ 0x54
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fae:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e6      	bne.n	8004f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <UART_EndRxTransfer+0xc8>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fe2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e5      	bne.n	8004fc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d118      	bne.n	8005030 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	60bb      	str	r3, [r7, #8]
   return(result);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f023 0310 	bic.w	r3, r3, #16
 8005012:	647b      	str	r3, [r7, #68]	@ 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6979      	ldr	r1, [r7, #20]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	613b      	str	r3, [r7, #16]
   return(result);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e6      	bne.n	8004ffe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005044:	bf00      	nop
 8005046:	3754      	adds	r7, #84	@ 0x54
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	effffffe 	.word	0xeffffffe

08005054 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_UARTEx_DisableFifoMode+0x16>
 8005066:	2302      	movs	r3, #2
 8005068:	e027      	b.n	80050ba <HAL_UARTEx_DisableFifoMode+0x66>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2224      	movs	r2, #36	@ 0x24
 8005076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005098:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050da:	2302      	movs	r3, #2
 80050dc:	e02d      	b.n	800513a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2224      	movs	r2, #36	@ 0x24
 80050ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f850 	bl	80051c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005156:	2302      	movs	r3, #2
 8005158:	e02d      	b.n	80051b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2224      	movs	r2, #36	@ 0x24
 8005166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f812 	bl	80051c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d108      	bne.n	80051e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051e0:	e031      	b.n	8005246 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051e2:	2310      	movs	r3, #16
 80051e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051e6:	2310      	movs	r3, #16
 80051e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	0e5b      	lsrs	r3, r3, #25
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	0f5b      	lsrs	r3, r3, #29
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800520a:	7bbb      	ldrb	r3, [r7, #14]
 800520c:	7b3a      	ldrb	r2, [r7, #12]
 800520e:	4911      	ldr	r1, [pc, #68]	@ (8005254 <UARTEx_SetNbDataToProcess+0x94>)
 8005210:	5c8a      	ldrb	r2, [r1, r2]
 8005212:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005216:	7b3a      	ldrb	r2, [r7, #12]
 8005218:	490f      	ldr	r1, [pc, #60]	@ (8005258 <UARTEx_SetNbDataToProcess+0x98>)
 800521a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800521c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005220:	b29a      	uxth	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	7b7a      	ldrb	r2, [r7, #13]
 800522c:	4909      	ldr	r1, [pc, #36]	@ (8005254 <UARTEx_SetNbDataToProcess+0x94>)
 800522e:	5c8a      	ldrb	r2, [r1, r2]
 8005230:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005234:	7b7a      	ldrb	r2, [r7, #13]
 8005236:	4908      	ldr	r1, [pc, #32]	@ (8005258 <UARTEx_SetNbDataToProcess+0x98>)
 8005238:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800523a:	fb93 f3f2 	sdiv	r3, r3, r2
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	08005304 	.word	0x08005304
 8005258:	0800530c 	.word	0x0800530c

0800525c <memset>:
 800525c:	4402      	add	r2, r0
 800525e:	4603      	mov	r3, r0
 8005260:	4293      	cmp	r3, r2
 8005262:	d100      	bne.n	8005266 <memset+0xa>
 8005264:	4770      	bx	lr
 8005266:	f803 1b01 	strb.w	r1, [r3], #1
 800526a:	e7f9      	b.n	8005260 <memset+0x4>

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	@ (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	@ (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	@ (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	@ (80052b0 <__libc_init_array+0x44>)
 8005280:	f000 f818 	bl	80052b4 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	0800531c 	.word	0x0800531c
 80052a8:	0800531c 	.word	0x0800531c
 80052ac:	0800531c 	.word	0x0800531c
 80052b0:	08005320 	.word	0x08005320

080052b4 <_init>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	bf00      	nop
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr

080052c0 <_fini>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr
