
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010370  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08010610  08010610  00011610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010ae8  08010ae8  00011ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010af0  08010af0  00011af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010af4  08010af4  00011af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08010af8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b8  240001e0  08010cd4  000121e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000798  08010cd4  00012798  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a87e  00000000  00000000  0001220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003176  00000000  00000000  0002ca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013e8  00000000  00000000  0002fc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f85  00000000  00000000  00030fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000391fb  00000000  00000000  00031f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c652  00000000  00000000  0006b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169ff6  00000000  00000000  000877ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f17b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006974  00000000  00000000  001f17f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000097  00000000  00000000  001f8168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080105f8 	.word	0x080105f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	080105f8 	.word	0x080105f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float q[4], float gx, float gy, float gz, float ax, float ay, float az) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b092      	sub	sp, #72	@ 0x48
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	61f8      	str	r0, [r7, #28]
 8000a70:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a74:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a78:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000a80:	ed87 2a02 	vstr	s4, [r7, #8]
 8000a84:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a94:	d10e      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa2:	d107      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab0:	f000 8136 	beq.w	8000d20 <MahonyAHRSupdateIMU+0x2b8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	f000 fa3c 	bl	8000f54 <invSqrt>
 8000adc:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8000ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ae4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aec:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8000af0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000af4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afc:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8000b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b04:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b0c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3304      	adds	r3, #4
 8000b14:	ed93 7a00 	vldr	s14, [r3]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	330c      	adds	r3, #12
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	edd3 6a00 	vldr	s13, [r3]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	ed93 7a00 	vldr	s14, [r3]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	3308      	adds	r3, #8
 8000b54:	edd3 6a00 	vldr	s13, [r3]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	330c      	adds	r3, #12
 8000b5c:	edd3 7a00 	vldr	s15, [r3]
 8000b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	ed93 7a00 	vldr	s14, [r3]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	330c      	adds	r3, #12
 8000b88:	edd3 6a00 	vldr	s13, [r3]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	330c      	adds	r3, #12
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8000ba0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ba4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bac:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bb0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 8000bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bcc:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bdc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8000be0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bec:	edd7 6a02 	vldr	s13, [r7, #8]
 8000bf0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bfc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8000c00:	4bcd      	ldr	r3, [pc, #820]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	dd54      	ble.n	8000cba <MahonyAHRSupdateIMU+0x252>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8000c10:	4bc9      	ldr	r3, [pc, #804]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c26:	4bc6      	ldr	r3, [pc, #792]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c30:	4bc3      	ldr	r3, [pc, #780]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c32:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8000c36:	4bc0      	ldr	r3, [pc, #768]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c38:	ed93 7a00 	vldr	s14, [r3]
 8000c3c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c44:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c4c:	4bbd      	ldr	r3, [pc, #756]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	4bbb      	ldr	r3, [pc, #748]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8000c5c:	4bb6      	ldr	r3, [pc, #728]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c72:	4bb5      	ldr	r3, [pc, #724]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	4bb2      	ldr	r3, [pc, #712]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8000c82:	4baf      	ldr	r3, [pc, #700]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c90:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8000c94:	4bab      	ldr	r3, [pc, #684]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca2:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8000ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a04 	vstr	s15, [r7, #16]
 8000cb8:	e00b      	b.n	8000cd2 <MahonyAHRSupdateIMU+0x26a>
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8000cba:	4ba1      	ldr	r3, [pc, #644]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8000cca:	4b9f      	ldr	r3, [pc, #636]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8000cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cd4:	ed93 7a00 	vldr	s14, [r3]
 8000cd8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8000cec:	4b97      	ldr	r3, [pc, #604]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cee:	ed93 7a00 	vldr	s14, [r3]
 8000cf2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d02:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8000d06:	4b91      	ldr	r3, [pc, #580]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000d08:	ed93 7a00 	vldr	s14, [r3]
 8000d0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d14:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1c:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8000d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d24:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2c:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * (1.0f / sampleFreq));
 8000d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d34:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * (1.0f / sampleFreq));
 8000d40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d44:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q[0];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	ed93 7a00 	vldr	s14, [r3]
 8000d68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d6c:	eef1 6a67 	vneg.f32	s13, s15
 8000d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d78:	ed97 6a08 	vldr	s12, [r7, #32]
 8000d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	330c      	adds	r3, #12
 8000d8c:	ed93 6a00 	vldr	s12, [r3]
 8000d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	ed93 7a00 	vldr	s14, [r3]
 8000dae:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dba:	ed97 6a08 	vldr	s12, [r7, #32]
 8000dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	ed93 6a00 	vldr	s12, [r3]
 8000dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3308      	adds	r3, #8
 8000dee:	ed93 7a00 	vldr	s14, [r3]
 8000df2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dfe:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	330c      	adds	r3, #12
 8000e12:	ed93 6a00 	vldr	s12, [r3]
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3308      	adds	r3, #8
 8000e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2a:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	330c      	adds	r3, #12
 8000e32:	ed93 7a00 	vldr	s14, [r3]
 8000e36:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e42:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e52:	ed97 6a08 	vldr	s12, [r7, #32]
 8000e56:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	330c      	adds	r3, #12
 8000e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6a:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	ed93 7a00 	vldr	s14, [r3]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	edd3 6a00 	vldr	s13, [r3]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3308      	adds	r3, #8
 8000e9a:	edd3 6a00 	vldr	s13, [r3]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	edd3 6a00 	vldr	s13, [r3]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f000 f843 	bl	8000f54 <invSqrt>
 8000ece:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efa:	edc3 7a00 	vstr	s15, [r3]
	q[2] *= recipNorm;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3308      	adds	r3, #8
 8000f02:	ed93 7a00 	vldr	s14, [r3]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f12:	edc3 7a00 	vstr	s15, [r3]
	q[3] *= recipNorm;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	ed93 7a00 	vldr	s14, [r3]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	330c      	adds	r3, #12
 8000f22:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f2e:	bf00      	nop
 8000f30:	3748      	adds	r7, #72	@ 0x48
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	240001fc 	.word	0x240001fc
 8000f3c:	3b5a740e 	.word	0x3b5a740e
 8000f40:	24000200 	.word	0x24000200
 8000f44:	24000204 	.word	0x24000204
 8000f48:	24000208 	.word	0x24000208
 8000f4c:	24000000 	.word	0x24000000
 8000f50:	3ada740e 	.word	0x3ada740e

08000f54 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	105a      	asrs	r2, r3, #1
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <invSqrt+0x74>)
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000f8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	ee07 3a90 	vmov	s15, r3
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	5f3759df 	.word	0x5f3759df
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <bmp388_quantize_calibration>:
volatile double altitude;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (double)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe0:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 8000fe4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fe8:	4b78      	ldr	r3, [pc, #480]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
  quantized_bmp388_calib.par_t2 = (double)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8000fee:	4b76      	ldr	r3, [pc, #472]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000ff0:	885b      	ldrh	r3, [r3, #2]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ffa:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 8001178 <bmp388_quantize_calibration+0x1a8>
 8000ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001002:	4b72      	ldr	r3, [pc, #456]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001004:	ed83 7b02 	vstr	d7, [r3, #8]
  quantized_bmp388_calib.par_t3 = (double)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8001008:	4b6f      	ldr	r3, [pc, #444]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800100a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001016:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800101a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800101e:	4b6b      	ldr	r3, [pc, #428]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001020:	ed83 7b04 	vstr	d7, [r3, #16]

  quantized_bmp388_calib.par_p1 = ((double)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 8001024:	4b68      	ldr	r3, [pc, #416]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001026:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001032:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 8001036:	ee37 6b46 	vsub.f64	d6, d7, d6
 800103a:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8001190 <bmp388_quantize_calibration+0x1c0>
 800103e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001044:	ed83 7b06 	vstr	d7, [r3, #24]
  quantized_bmp388_calib.par_p2 = ((double)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8001048:	4b5f      	ldr	r3, [pc, #380]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800104a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001056:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 800105a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800105e:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8001198 <bmp388_quantize_calibration+0x1c8>
 8001062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001066:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001068:	ed83 7b08 	vstr	d7, [r3, #32]
  quantized_bmp388_calib.par_p3 = (double)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 800106c:	4b56      	ldr	r3, [pc, #344]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800106e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800107a:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80011a0 <bmp388_quantize_calibration+0x1d0>
 800107e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001082:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001084:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p4 = (double)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 8001088:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800108a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001096:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80011a8 <bmp388_quantize_calibration+0x1d8>
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010a0:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p5 = (double)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 80010a4:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010a6:	899b      	ldrh	r3, [r3, #12]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010b0:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80010b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b8:	4b44      	ldr	r3, [pc, #272]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010ba:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  quantized_bmp388_calib.par_p6 = (double)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 80010be:	4b42      	ldr	r3, [pc, #264]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010c0:	89db      	ldrh	r3, [r3, #14]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010ca:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 80011b0 <bmp388_quantize_calibration+0x1e0>
 80010ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010d4:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
  quantized_bmp388_calib.par_p7 = (double)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 80010d8:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010da:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010e6:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 80010ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010f0:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  quantized_bmp388_calib.par_p8 = (double)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010f6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001102:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80011b8 <bmp388_quantize_calibration+0x1e8>
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 800110c:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
  quantized_bmp388_calib.par_p9 = (double)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001112:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800111e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 8001122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001128:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
  quantized_bmp388_calib.par_p10 = (double)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800112e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113a:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800113e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001142:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001144:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
  quantized_bmp388_calib.par_p11 = (double)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800114a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001156:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80011c0 <bmp388_quantize_calibration+0x1f0>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001160:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	00000000 	.word	0x00000000
 8001174:	40700000 	.word	0x40700000
 8001178:	00000000 	.word	0x00000000
 800117c:	41d00000 	.word	0x41d00000
 8001180:	00000000 	.word	0x00000000
 8001184:	42f00000 	.word	0x42f00000
 8001188:	00000000 	.word	0x00000000
 800118c:	40d00000 	.word	0x40d00000
 8001190:	00000000 	.word	0x00000000
 8001194:	41300000 	.word	0x41300000
 8001198:	00000000 	.word	0x00000000
 800119c:	41c00000 	.word	0x41c00000
 80011a0:	00000000 	.word	0x00000000
 80011a4:	41f00000 	.word	0x41f00000
 80011a8:	00000000 	.word	0x00000000
 80011ac:	42400000 	.word	0x42400000
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40500000 	.word	0x40500000
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40e00000 	.word	0x40e00000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	44000000 	.word	0x44000000
 80011c8:	2400020c 	.word	0x2400020c
 80011cc:	24000228 	.word	0x24000228

080011d0 <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	@ 0x40
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <bmp388_write_reg+0x44>)
 80011e6:	f004 fd73 	bl	8005cd0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	2201      	movs	r2, #1
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <bmp388_write_reg+0x48>)
 80011f2:	f007 fcf7 	bl	8008be4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80011f6:	1db9      	adds	r1, r7, #6
 80011f8:	2364      	movs	r3, #100	@ 0x64
 80011fa:	2201      	movs	r2, #1
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <bmp388_write_reg+0x48>)
 80011fe:	f007 fcf1 	bl	8008be4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	@ 0x40
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <bmp388_write_reg+0x44>)
 8001208:	f004 fd62 	bl	8005cd0 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58020000 	.word	0x58020000
 8001218:	24000328 	.word	0x24000328

0800121c <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint8_t dummy;
  uint8_t temp_data = 0x80 | reg;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001232:	b2db      	uxtb	r3, r3
 8001234:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	4817      	ldr	r0, [pc, #92]	@ (8001298 <bmp388_read_reg+0x7c>)
 800123c:	f004 fd48 	bl	8005cd0 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8001240:	f107 010d 	add.w	r1, r7, #13
 8001244:	2364      	movs	r3, #100	@ 0x64
 8001246:	2201      	movs	r2, #1
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <bmp388_read_reg+0x80>)
 800124a:	f007 fccb 	bl	8008be4 <HAL_SPI_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <bmp388_read_reg+0x40>
    Error_Handler();
 8001258:	f000 fde8 	bl	8001e2c <Error_Handler>
  HAL_SPI_Receive(&hspi2, &dummy, 1, 100);
 800125c:	f107 010e 	add.w	r1, r7, #14
 8001260:	2364      	movs	r3, #100	@ 0x64
 8001262:	2201      	movs	r2, #1
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <bmp388_read_reg+0x80>)
 8001266:	f007 feab 	bl	8008fc0 <HAL_SPI_Receive>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	b29a      	uxth	r2, r3
 800126e:	2364      	movs	r3, #100	@ 0x64
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	480a      	ldr	r0, [pc, #40]	@ (800129c <bmp388_read_reg+0x80>)
 8001274:	f007 fea4 	bl	8008fc0 <HAL_SPI_Receive>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <bmp388_read_reg+0x6a>
    Error_Handler();
 8001282:	f000 fdd3 	bl	8001e2c <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <bmp388_read_reg+0x7c>)
 800128c:	f004 fd20 	bl	8005cd0 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58020000 	.word	0x58020000
 800129c:	24000328 	.word	0x24000328

080012a0 <bmp388_setup>:
void bmp388_setup()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  bmp388_write_reg(0x7E, 0xB6); // Soft reset
 80012a6:	21b6      	movs	r1, #182	@ 0xb6
 80012a8:	207e      	movs	r0, #126	@ 0x7e
 80012aa:	f7ff ff91 	bl	80011d0 <bmp388_write_reg>
  HAL_Delay(10); // Wait for reset to complete
 80012ae:	200a      	movs	r0, #10
 80012b0:	f001 fb5e 	bl	8002970 <HAL_Delay>
  uint8_t calib_data[21];
  uint8_t chip[2];
  bmp388_read_reg(0x31, calib_data, 21);
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	2215      	movs	r2, #21
 80012ba:	4619      	mov	r1, r3
 80012bc:	2031      	movs	r0, #49	@ 0x31
 80012be:	f7ff ffad 	bl	800121c <bmp388_read_reg>
  bmp388_read_reg(0x00, chip, 2);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2202      	movs	r2, #2
 80012c6:	4619      	mov	r1, r3
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff ffa7 	bl	800121c <bmp388_read_reg>
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <bmp388_setup+0x120>)
 80012e0:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <bmp388_setup+0x120>)
 80012f4:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <bmp388_setup+0x120>)
 80012fc:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 80012fe:	7b7b      	ldrb	r3, [r7, #13]
 8001300:	b21a      	sxth	r2, r3
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <bmp388_setup+0x120>)
 800130e:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	b21a      	sxth	r2, r3
 8001314:	7c3b      	ldrb	r3, [r7, #16]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <bmp388_setup+0x120>)
 8001320:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8001322:	7c7b      	ldrb	r3, [r7, #17]
 8001324:	b25a      	sxtb	r2, r3
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <bmp388_setup+0x120>)
 8001328:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 800132a:	7cbb      	ldrb	r3, [r7, #18]
 800132c:	b25a      	sxtb	r2, r3
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <bmp388_setup+0x120>)
 8001330:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	b21a      	sxth	r2, r3
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <bmp388_setup+0x120>)
 8001344:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	b21a      	sxth	r2, r3
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <bmp388_setup+0x120>)
 8001358:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	b25a      	sxtb	r2, r3
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <bmp388_setup+0x120>)
 8001360:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 8001362:	7e3b      	ldrb	r3, [r7, #24]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <bmp388_setup+0x120>)
 8001368:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 800136a:	7e7b      	ldrb	r3, [r7, #25]
 800136c:	b21a      	sxth	r2, r3
 800136e:	7ebb      	ldrb	r3, [r7, #26]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <bmp388_setup+0x120>)
 800137a:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	b25a      	sxtb	r2, r3
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <bmp388_setup+0x120>)
 8001382:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 8001384:	7f3b      	ldrb	r3, [r7, #28]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <bmp388_setup+0x120>)
 800138a:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 800138c:	f7ff fe20 	bl	8000fd0 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1A, 0x00);
 8001390:	2100      	movs	r1, #0
 8001392:	201a      	movs	r0, #26
 8001394:	f7ff ff1c 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1B, 0x33);  // normal mode, temp pressure on by default with it
 8001398:	2133      	movs	r1, #51	@ 0x33
 800139a:	201b      	movs	r0, #27
 800139c:	f7ff ff18 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 80013a0:	2103      	movs	r1, #3
 80013a2:	201c      	movs	r0, #28
 80013a4:	f7ff ff14 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 80013a8:	2102      	movs	r1, #2
 80013aa:	201d      	movs	r0, #29
 80013ac:	f7ff ff10 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x04);  // coefficient for IIR filter, ideally low value for the dart
 80013b0:	2104      	movs	r1, #4
 80013b2:	201f      	movs	r0, #31
 80013b4:	f7ff ff0c 	bl	80011d0 <bmp388_write_reg>
}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2400020c 	.word	0x2400020c

080013c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d013      	beq.n	8001404 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80013e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013ec:	e000      	b.n	80013f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f9      	beq.n	80013ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	0000      	movs	r0, r0
 8001414:	0000      	movs	r0, r0
	...

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800141e:	f000 fcd9 	bl	8001dd4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001422:	f001 fa13 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001426:	f000 f92d 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142a:	f000 fb19 	bl	8001a60 <MX_GPIO_Init>
  MX_DMA_Init();
 800142e:	f000 faef 	bl	8001a10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001432:	f000 faa1 	bl	8001978 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001436:	f000 f9a1 	bl	800177c <MX_SPI1_Init>
  MX_TIM2_Init();
 800143a:	f000 fa4f 	bl	80018dc <MX_TIM2_Init>
  MX_SPI2_Init();
 800143e:	f000 f9f5 	bl	800182c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 8001442:	4887      	ldr	r0, [pc, #540]	@ (8001660 <main+0x248>)
 8001444:	f008 fda2 	bl	8009f8c <HAL_TIM_Base_Start_IT>
  mpu9250_setup();
 8001448:	f000 fd58 	bl	8001efc <mpu9250_setup>
  bmp388_setup();
 800144c:	f7ff ff28 	bl	80012a0 <bmp388_setup>

  Start_MPU9250_DMA_Read();
 8001450:	f000 fb4a 	bl	8001ae8 <Start_MPU9250_DMA_Read>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(timer_flag && dma_flag) {
 8001454:	4b83      	ldr	r3, [pc, #524]	@ (8001664 <main+0x24c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0fa      	beq.n	8001454 <main+0x3c>
 800145e:	4b82      	ldr	r3, [pc, #520]	@ (8001668 <main+0x250>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f5      	beq.n	8001454 <main+0x3c>
			  // Update the Mahony filter with the processed sensor data.
			// This updates your quaternion (quat) representing orientation.
			MahonyAHRSupdateIMU(quat,
								imu_processed_data.gyro_x,
 8001468:	4b80      	ldr	r3, [pc, #512]	@ (800166c <main+0x254>)
 800146a:	edd3 7a06 	vldr	s15, [r3, #24]
								imu_processed_data.gyro_y,
 800146e:	4b7f      	ldr	r3, [pc, #508]	@ (800166c <main+0x254>)
 8001470:	ed93 7a07 	vldr	s14, [r3, #28]
								imu_processed_data.gyro_z,
 8001474:	4b7d      	ldr	r3, [pc, #500]	@ (800166c <main+0x254>)
 8001476:	edd3 6a08 	vldr	s13, [r3, #32]
								imu_processed_data.accel_x,
 800147a:	4b7c      	ldr	r3, [pc, #496]	@ (800166c <main+0x254>)
 800147c:	ed93 6a03 	vldr	s12, [r3, #12]
								imu_processed_data.accel_y,
 8001480:	4b7a      	ldr	r3, [pc, #488]	@ (800166c <main+0x254>)
 8001482:	edd3 5a04 	vldr	s11, [r3, #16]
								imu_processed_data.accel_z);
 8001486:	4b79      	ldr	r3, [pc, #484]	@ (800166c <main+0x254>)
 8001488:	ed93 5a05 	vldr	s10, [r3, #20]
			MahonyAHRSupdateIMU(quat,
 800148c:	eef0 2a45 	vmov.f32	s5, s10
 8001490:	eeb0 2a65 	vmov.f32	s4, s11
 8001494:	eef0 1a46 	vmov.f32	s3, s12
 8001498:	eeb0 1a66 	vmov.f32	s2, s13
 800149c:	eef0 0a47 	vmov.f32	s1, s14
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	4872      	ldr	r0, [pc, #456]	@ (8001670 <main+0x258>)
 80014a6:	f7ff fadf 	bl	8000a68 <MahonyAHRSupdateIMU>

			// Convert quaternion to Euler angles (pitch, roll, yaw)
			float radPitch = asinf(-2.0f * (quat[1] * quat[3] - quat[0] * quat[2]));
 80014aa:	4b71      	ldr	r3, [pc, #452]	@ (8001670 <main+0x258>)
 80014ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80014b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001670 <main+0x258>)
 80014b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001670 <main+0x258>)
 80014bc:	edd3 6a00 	vldr	s13, [r3]
 80014c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001670 <main+0x258>)
 80014c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ce:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80014d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	f00e fdfb 	bl	80100d4 <asinf>
 80014de:	ed87 0a03 	vstr	s0, [r7, #12]
			float radRoll  = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]),
 80014e2:	4b63      	ldr	r3, [pc, #396]	@ (8001670 <main+0x258>)
 80014e4:	ed93 7a00 	vldr	s14, [r3]
 80014e8:	4b61      	ldr	r3, [pc, #388]	@ (8001670 <main+0x258>)
 80014ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001670 <main+0x258>)
 80014f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80014f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <main+0x258>)
 80014fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80014fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	ee37 6aa7 	vadd.f32	s12, s15, s15
									 2.0f * (quat[0] * quat[0] + quat[3] * quat[3]) - 1.0f);
 800150a:	4b59      	ldr	r3, [pc, #356]	@ (8001670 <main+0x258>)
 800150c:	ed93 7a00 	vldr	s14, [r3]
 8001510:	4b57      	ldr	r3, [pc, #348]	@ (8001670 <main+0x258>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151a:	4b55      	ldr	r3, [pc, #340]	@ (8001670 <main+0x258>)
 800151c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001520:	4b53      	ldr	r3, [pc, #332]	@ (8001670 <main+0x258>)
 8001522:	edd3 7a03 	vldr	s15, [r3, #12]
 8001526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152e:	ee77 7aa7 	vadd.f32	s15, s15, s15
			float radRoll  = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]),
 8001532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800153a:	eef0 0a67 	vmov.f32	s1, s15
 800153e:	eeb0 0a46 	vmov.f32	s0, s12
 8001542:	f00e fdf3 	bl	801012c <atan2f>
 8001546:	ed87 0a02 	vstr	s0, [r7, #8]
			float radYaw   = atan2f(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]),
 800154a:	4b49      	ldr	r3, [pc, #292]	@ (8001670 <main+0x258>)
 800154c:	ed93 7a00 	vldr	s14, [r3]
 8001550:	4b47      	ldr	r3, [pc, #284]	@ (8001670 <main+0x258>)
 8001552:	edd3 7a03 	vldr	s15, [r3, #12]
 8001556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155a:	4b45      	ldr	r3, [pc, #276]	@ (8001670 <main+0x258>)
 800155c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001560:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <main+0x258>)
 8001562:	edd3 7a02 	vldr	s15, [r3, #8]
 8001566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	ee37 6aa7 	vadd.f32	s12, s15, s15
									 2.0f * (quat[0] * quat[0] + quat[1] * quat[1]) - 1.0f);
 8001572:	4b3f      	ldr	r3, [pc, #252]	@ (8001670 <main+0x258>)
 8001574:	ed93 7a00 	vldr	s14, [r3]
 8001578:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <main+0x258>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001582:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <main+0x258>)
 8001584:	edd3 6a01 	vldr	s13, [r3, #4]
 8001588:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <main+0x258>)
 800158a:	edd3 7a01 	vldr	s15, [r3, #4]
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	ee77 7aa7 	vadd.f32	s15, s15, s15
			float radYaw   = atan2f(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]),
 800159a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800159e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015a2:	eef0 0a67 	vmov.f32	s1, s15
 80015a6:	eeb0 0a46 	vmov.f32	s0, s12
 80015aa:	f00e fdbf 	bl	801012c <atan2f>
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]

			imu_angles.pitch = radPitch * (180.0f / M_PI);
 80015b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ba:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8001658 <main+0x240>
 80015be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <main+0x25c>)
 80015c8:	edc3 7a01 	vstr	s15, [r3, #4]
			imu_angles.roll  = radRoll  * (180.0f / M_PI);
 80015cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d4:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001658 <main+0x240>
 80015d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015e0:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <main+0x25c>)
 80015e2:	edc3 7a00 	vstr	s15, [r3]
			imu_angles.yaw   = radYaw   * (180.0f / M_PI);
 80015e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ee:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001658 <main+0x240>
 80015f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <main+0x25c>)
 80015fc:	edc3 7a02 	vstr	s15, [r3, #8]

		  //send data through UART
		  snprintf(uart_buffer, sizeof(uart_buffer), "%.4f,%.4f,%.4f\n", imu_angles.pitch, imu_angles.roll, imu_angles.yaw);
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <main+0x25c>)
 8001602:	edd3 7a01 	vldr	s15, [r3, #4]
 8001606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800160a:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <main+0x25c>)
 800160c:	edd3 6a00 	vldr	s13, [r3]
 8001610:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <main+0x25c>)
 8001616:	edd3 5a02 	vldr	s11, [r3, #8]
 800161a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800161e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001622:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001626:	ed8d 7b00 	vstr	d7, [sp]
 800162a:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <main+0x260>)
 800162c:	2140      	movs	r1, #64	@ 0x40
 800162e:	4813      	ldr	r0, [pc, #76]	@ (800167c <main+0x264>)
 8001630:	f00b f9a4 	bl	800c97c <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001634:	4811      	ldr	r0, [pc, #68]	@ (800167c <main+0x264>)
 8001636:	f7fe fea3 	bl	8000380 <strlen>
 800163a:	4603      	mov	r3, r0
 800163c:	b29a      	uxth	r2, r3
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	490e      	ldr	r1, [pc, #56]	@ (800167c <main+0x264>)
 8001644:	480e      	ldr	r0, [pc, #56]	@ (8001680 <main+0x268>)
 8001646:	f009 f97b 	bl	800a940 <HAL_UART_Transmit>

		  timer_flag = 0;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <main+0x24c>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
		  dma_flag = 0;
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <main+0x250>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
	  if(timer_flag && dma_flag) {
 8001656:	e6fd      	b.n	8001454 <main+0x3c>
 8001658:	1a63c1f8 	.word	0x1a63c1f8
 800165c:	404ca5dc 	.word	0x404ca5dc
 8001660:	240004a0 	.word	0x240004a0
 8001664:	24000580 	.word	0x24000580
 8001668:	24000581 	.word	0x24000581
 800166c:	24000608 	.word	0x24000608
 8001670:	240005e4 	.word	0x240005e4
 8001674:	24000638 	.word	0x24000638
 8001678:	08010610 	.word	0x08010610
 800167c:	240005a4 	.word	0x240005a4
 8001680:	240004ec 	.word	0x240004ec

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b09c      	sub	sp, #112	@ 0x70
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168e:	224c      	movs	r2, #76	@ 0x4c
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f00b fa09 	bl	800caaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2220      	movs	r2, #32
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f00b fa03 	bl	800caaa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016a4:	2002      	movs	r0, #2
 80016a6:	f004 fb2d 	bl	8005d04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	4b31      	ldr	r3, [pc, #196]	@ (8001774 <SystemClock_Config+0xf0>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a30      	ldr	r2, [pc, #192]	@ (8001774 <SystemClock_Config+0xf0>)
 80016b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <SystemClock_Config+0xf0>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001778 <SystemClock_Config+0xf4>)
 80016c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001778 <SystemClock_Config+0xf4>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016d0:	4b29      	ldr	r3, [pc, #164]	@ (8001778 <SystemClock_Config+0xf4>)
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016dc:	bf00      	nop
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <SystemClock_Config+0xf0>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016ea:	d1f8      	bne.n	80016de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ec:	2302      	movs	r3, #2
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f4:	2340      	movs	r3, #64	@ 0x40
 80016f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016fc:	2300      	movs	r3, #0
 80016fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001700:	2304      	movs	r3, #4
 8001702:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001704:	233c      	movs	r3, #60	@ 0x3c
 8001706:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001708:	2302      	movs	r3, #2
 800170a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800170c:	2305      	movs	r3, #5
 800170e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001710:	2302      	movs	r3, #2
 8001712:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001714:	230c      	movs	r3, #12
 8001716:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001718:	2300      	movs	r3, #0
 800171a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001724:	4618      	mov	r0, r3
 8001726:	f004 fb27 	bl	8005d78 <HAL_RCC_OscConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001730:	f000 fb7c 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001734:	233f      	movs	r3, #63	@ 0x3f
 8001736:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001738:	2303      	movs	r3, #3
 800173a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001740:	2308      	movs	r3, #8
 8001742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001744:	2340      	movs	r3, #64	@ 0x40
 8001746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001748:	2340      	movs	r3, #64	@ 0x40
 800174a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800174c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001752:	2340      	movs	r3, #64	@ 0x40
 8001754:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2104      	movs	r1, #4
 800175a:	4618      	mov	r0, r3
 800175c:	f004 ff66 	bl	800662c <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001766:	f000 fb61 	bl	8001e2c <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3770      	adds	r7, #112	@ 0x70
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	58024800 	.word	0x58024800
 8001778:	58000400 	.word	0x58000400

0800177c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001780:	4b28      	ldr	r3, [pc, #160]	@ (8001824 <MX_SPI1_Init+0xa8>)
 8001782:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <MX_SPI1_Init+0xac>)
 8001784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001786:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <MX_SPI1_Init+0xa8>)
 8001788:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800178c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800178e:	4b25      	ldr	r3, [pc, #148]	@ (8001824 <MX_SPI1_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001794:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <MX_SPI1_Init+0xa8>)
 8001796:	2207      	movs	r2, #7
 8001798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <MX_SPI1_Init+0xa8>)
 800179c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c6:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017d2:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <MX_SPI1_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <MX_SPI1_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <MX_SPI1_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <MX_SPI1_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <MX_SPI1_Init+0xa8>)
 8001812:	f007 f8c3 	bl	800899c <HAL_SPI_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800181c:	f000 fb06 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	240002a0 	.word	0x240002a0
 8001828:	40013000 	.word	0x40013000

0800182c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001830:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001832:	4a29      	ldr	r2, [pc, #164]	@ (80018d8 <MX_SPI2_Init+0xac>)
 8001834:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001838:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800183c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800183e:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001844:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001846:	2207      	movs	r2, #7
 8001848:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 800184c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001850:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001854:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001858:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 800185c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001860:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001864:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001868:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001870:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001878:	2200      	movs	r2, #0
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 800187e:	2200      	movs	r2, #0
 8001880:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001884:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001888:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800189c:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <MX_SPI2_Init+0xa8>)
 80018c2:	f007 f86b 	bl	800899c <HAL_SPI_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80018cc:	f000 faae 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	24000328 	.word	0x24000328
 80018d8:	40003800 	.word	0x40003800

080018dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <MX_TIM2_Init+0x98>)
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001900:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001904:	f240 321f 	movw	r2, #799	@ 0x31f
 8001908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_TIM2_Init+0x98>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001912:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001916:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_TIM2_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001924:	4813      	ldr	r0, [pc, #76]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001926:	f008 fada 	bl	8009ede <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001930:	f000 fa7c 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001938:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001942:	f008 fca3 	bl	800a28c <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800194c:	f000 fa6e 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_TIM2_Init+0x98>)
 800195e:	f008 fef3 	bl	800a748 <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001968:	f000 fa60 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	240004a0 	.word	0x240004a0

08001978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800197c:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 800197e:	4a23      	ldr	r2, [pc, #140]	@ (8001a0c <MX_USART2_UART_Init+0x94>)
 8001980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001982:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ba:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c0:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019c2:	f008 ff6d 	bl	800a8a0 <HAL_UART_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019cc:	f000 fa2e 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d0:	2100      	movs	r1, #0
 80019d2:	480d      	ldr	r0, [pc, #52]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019d4:	f00a f803 	bl	800b9de <HAL_UARTEx_SetTxFifoThreshold>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019de:	f000 fa25 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e2:	2100      	movs	r1, #0
 80019e4:	4808      	ldr	r0, [pc, #32]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019e6:	f00a f838 	bl	800ba5a <HAL_UARTEx_SetRxFifoThreshold>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019f0:	f000 fa1c 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_USART2_UART_Init+0x90>)
 80019f6:	f009 ffb9 	bl	800b96c <HAL_UARTEx_DisableFifoMode>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a00:	f000 fa14 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	240004ec 	.word	0x240004ec
 8001a0c:	40004400 	.word	0x40004400

08001a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <MX_DMA_Init+0x4c>)
 8001a18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a5c <MX_DMA_Init+0x4c>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a26:	4b0d      	ldr	r3, [pc, #52]	@ (8001a5c <MX_DMA_Init+0x4c>)
 8001a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	200b      	movs	r0, #11
 8001a3a:	f001 f8a4 	bl	8002b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a3e:	200b      	movs	r0, #11
 8001a40:	f001 f8bb 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	200c      	movs	r0, #12
 8001a4a:	f001 f89c 	bl	8002b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a4e:	200c      	movs	r0, #12
 8001a50:	f001 f8b3 	bl	8002bba <HAL_NVIC_EnableIRQ>

}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	58024400 	.word	0x58024400

08001a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <MX_GPIO_Init+0x80>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ae0 <MX_GPIO_Init+0x80>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <MX_GPIO_Init+0x80>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <MX_GPIO_Init+0x80>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <MX_GPIO_Init+0x80>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <MX_GPIO_Init+0x80>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2160      	movs	r1, #96	@ 0x60
 8001ab6:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <MX_GPIO_Init+0x84>)
 8001ab8:	f004 f90a 	bl	8005cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 8001abc:	2360      	movs	r3, #96	@ 0x60
 8001abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <MX_GPIO_Init+0x84>)
 8001ad4:	f003 ff4c 	bl	8005970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	58020000 	.word	0x58020000

08001ae8 <Start_MPU9250_DMA_Read>:
 * Start_MPU9250_DMA_Read
 *
 * Prepares and starts a DMA-based SPI transaction to read 14 bytes of sensor data
 * (accelerometer, temperature, gyroscope) beginning at register 0x3B.
 */
static void Start_MPU9250_DMA_Read(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
    // First byte: starting register (0x3B) with read flag
    sensor_tx_buffer[0] = 0x3B | READ_FLAG;
 8001aee:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <Start_MPU9250_DMA_Read+0x54>)
 8001af0:	22bb      	movs	r2, #187	@ 0xbb
 8001af2:	701a      	strb	r2, [r3, #0]
    // Fill remaining bytes with dummy data
    for (int i = 1; i < SENSOR_DMA_LENGTH; i++) {
 8001af4:	2301      	movs	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	e007      	b.n	8001b0a <Start_MPU9250_DMA_Read+0x22>
        sensor_tx_buffer[i] = 0x00;
 8001afa:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <Start_MPU9250_DMA_Read+0x54>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < SENSOR_DMA_LENGTH; i++) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0e      	cmp	r3, #14
 8001b0e:	ddf4      	ble.n	8001afa <Start_MPU9250_DMA_Read+0x12>
    }

    // Assert CS low to begin the SPI transaction
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port , SPI1_CS_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2120      	movs	r1, #32
 8001b14:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <Start_MPU9250_DMA_Read+0x58>)
 8001b16:	f004 f8db 	bl	8005cd0 <HAL_GPIO_WritePin>

    // Start the SPI DMA transaction
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001b1a:	bf00      	nop
 8001b1c:	4809      	ldr	r0, [pc, #36]	@ (8001b44 <Start_MPU9250_DMA_Read+0x5c>)
 8001b1e:	f008 f879 	bl	8009c14 <HAL_SPI_GetState>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d1f9      	bne.n	8001b1c <Start_MPU9250_DMA_Read+0x34>

	HAL_SPI_TransmitReceive_DMA(&hspi1, sensor_tx_buffer, sensor_rx_buffer, SENSOR_DMA_LENGTH);
 8001b28:	230f      	movs	r3, #15
 8001b2a:	4a07      	ldr	r2, [pc, #28]	@ (8001b48 <Start_MPU9250_DMA_Read+0x60>)
 8001b2c:	4903      	ldr	r1, [pc, #12]	@ (8001b3c <Start_MPU9250_DMA_Read+0x54>)
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <Start_MPU9250_DMA_Read+0x5c>)
 8001b30:	f007 fcb8 	bl	80094a4 <HAL_SPI_TransmitReceive_DMA>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	24000584 	.word	0x24000584
 8001b40:	58020000 	.word	0x58020000
 8001b44:	240002a0 	.word	0x240002a0
 8001b48:	24000594 	.word	0x24000594
 8001b4c:	00000000 	.word	0x00000000

08001b50 <HAL_SPI_TxRxCpltCallback>:
 * updates the Mahony filter, computes Euler angles, and then restarts the DMA read.
 */

// ABHIRIT AND SAI TRIED IMPLEMENTING THIS BUT IT ONLY RUNS THROUGH HAL_SPI_TxRxCpltCallback() ONCE OR TWICE

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a78      	ldr	r2, [pc, #480]	@ (8001d40 <HAL_SPI_TxRxCpltCallback+0x1f0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	f040 80d4 	bne.w	8001d0c <HAL_SPI_TxRxCpltCallback+0x1bc>
		// Deassert CS high to end the SPI transaction
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port , SPI1_CS_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2120      	movs	r1, #32
 8001b68:	4876      	ldr	r0, [pc, #472]	@ (8001d44 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8001b6a:	f004 f8b1 	bl	8005cd0 <HAL_GPIO_WritePin>
		        // [0-1]: ACCEL_X, [2-3]: ACCEL_Y, [4-5]: ACCEL_Z,
		        // [6-7]: TEMP (ignored),
		        // [8-9]: GYRO_X, [10-11]: GYRO_Y, [12-13]: GYRO_Z

		// Accelerometer raw data
		imu_raw_data.accel_x = ((int16_t)sensor_rx_buffer[0] << 8) | sensor_rx_buffer[1];
 8001b6e:	4b76      	ldr	r3, [pc, #472]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	4b74      	ldr	r3, [pc, #464]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	4b72      	ldr	r3, [pc, #456]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001b82:	801a      	strh	r2, [r3, #0]
		imu_raw_data.accel_y = ((int16_t)sensor_rx_buffer[2] << 8) | sensor_rx_buffer[3];
 8001b84:	4b70      	ldr	r3, [pc, #448]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001b86:	789b      	ldrb	r3, [r3, #2]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001b8e:	78db      	ldrb	r3, [r3, #3]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	4b6d      	ldr	r3, [pc, #436]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001b98:	805a      	strh	r2, [r3, #2]
		imu_raw_data.accel_z = ((int16_t)sensor_rx_buffer[4] << 8) | sensor_rx_buffer[5];
 8001b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001b9c:	791b      	ldrb	r3, [r3, #4]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b69      	ldr	r3, [pc, #420]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001ba4:	795b      	ldrb	r3, [r3, #5]
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	4b67      	ldr	r3, [pc, #412]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001bae:	809a      	strh	r2, [r3, #4]

		// Gyroscope raw data (skip TEMP at indices 6-7)
		imu_raw_data.gyro_x  = ((int16_t)sensor_rx_buffer[8]  << 8) | sensor_rx_buffer[9];
 8001bb0:	4b65      	ldr	r3, [pc, #404]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001bb2:	7a1b      	ldrb	r3, [r3, #8]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001bba:	7a5b      	ldrb	r3, [r3, #9]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	4b62      	ldr	r3, [pc, #392]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001bc4:	80da      	strh	r2, [r3, #6]
		imu_raw_data.gyro_y  = ((int16_t)sensor_rx_buffer[10] << 8) | sensor_rx_buffer[11];
 8001bc6:	4b60      	ldr	r3, [pc, #384]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001bc8:	7a9b      	ldrb	r3, [r3, #10]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	4b5e      	ldr	r3, [pc, #376]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001bd0:	7adb      	ldrb	r3, [r3, #11]
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001bda:	811a      	strh	r2, [r3, #8]
		imu_raw_data.gyro_z  = ((int16_t)sensor_rx_buffer[12] << 8) | sensor_rx_buffer[13];
 8001bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	4b58      	ldr	r3, [pc, #352]	@ (8001d48 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8001be6:	7b5b      	ldrb	r3, [r3, #13]
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	4b57      	ldr	r3, [pc, #348]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001bf0:	815a      	strh	r2, [r3, #10]

		// Convert accelerometer values:
		// Assuming ±8g full scale and 4096 LSB/g, multiplied by 9.81 for m/s^2.
		imu_processed_data.accel_x = ((float)imu_raw_data.accel_x / 4096.0f) * 9.81f;
 8001bf2:	4b56      	ldr	r3, [pc, #344]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c00:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001d50 <HAL_SPI_TxRxCpltCallback+0x200>
 8001c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c08:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d54 <HAL_SPI_TxRxCpltCallback+0x204>
 8001c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c10:	4b51      	ldr	r3, [pc, #324]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001c12:	edc3 7a03 	vstr	s15, [r3, #12]
		imu_processed_data.accel_y = ((float)imu_raw_data.accel_y / 4096.0f) * 9.81f;
 8001c16:	4b4d      	ldr	r3, [pc, #308]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001c18:	885b      	ldrh	r3, [r3, #2]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8001d50 <HAL_SPI_TxRxCpltCallback+0x200>
 8001c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c2c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001d54 <HAL_SPI_TxRxCpltCallback+0x204>
 8001c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c34:	4b48      	ldr	r3, [pc, #288]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001c36:	edc3 7a04 	vstr	s15, [r3, #16]
		imu_processed_data.accel_z = ((float)imu_raw_data.accel_z / 4096.0f) * 9.81f;
 8001c3a:	4b44      	ldr	r3, [pc, #272]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001c3c:	889b      	ldrh	r3, [r3, #4]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c48:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001d50 <HAL_SPI_TxRxCpltCallback+0x200>
 8001c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c50:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001d54 <HAL_SPI_TxRxCpltCallback+0x204>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	4b3f      	ldr	r3, [pc, #252]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001c5a:	edc3 7a05 	vstr	s15, [r3, #20]

		// Convert gyroscope values:
		// Assuming ±500°/s full scale and 65.5 LSB/(°/s), convert to rad/s after subtracting offsets.
		imu_processed_data.gyro_x = (((float)imu_raw_data.gyro_x - imu_processed_data.gyro_offX) / 65.5f) * (M_PI / 180.0f);
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001c60:	88db      	ldrh	r3, [r3, #6]
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c76:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001d5c <HAL_SPI_TxRxCpltCallback+0x20c>
 8001c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c82:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8001d38 <HAL_SPI_TxRxCpltCallback+0x1e8>
 8001c86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c8e:	4b32      	ldr	r3, [pc, #200]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001c90:	edc3 7a06 	vstr	s15, [r3, #24]
		imu_processed_data.gyro_y = (((float)imu_raw_data.gyro_y - imu_processed_data.gyro_offY) / 65.5f) * (M_PI / 180.0f);
 8001c94:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001c96:	891b      	ldrh	r3, [r3, #8]
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001ca4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cac:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001d5c <HAL_SPI_TxRxCpltCallback+0x20c>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb8:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001d38 <HAL_SPI_TxRxCpltCallback+0x1e8>
 8001cbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001cc6:	edc3 7a07 	vstr	s15, [r3, #28]
		imu_processed_data.gyro_z = (((float)imu_raw_data.gyro_z - imu_processed_data.gyro_offZ) / 65.5f) * (M_PI / 180.0f);
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8001ccc:	895b      	ldrh	r3, [r3, #10]
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ce2:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001d5c <HAL_SPI_TxRxCpltCallback+0x20c>
 8001ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cee:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001d38 <HAL_SPI_TxRxCpltCallback+0x1e8>
 8001cf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cf6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_SPI_TxRxCpltCallback+0x208>)
 8001cfc:	edc3 7a08 	vstr	s15, [r3, #32]

		dma_flag = 1;
 8001d00:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <HAL_SPI_TxRxCpltCallback+0x210>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
		  Start_MPU9250_DMA_Read();
 8001d06:	f7ff feef 	bl	8001ae8 <Start_MPU9250_DMA_Read>
		// print SPI->Instance if false
		snprintf(uart_buffer, sizeof(uart_buffer), "oh no spi->instance != SPI1\n");
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);

	}
}
 8001d0a:	e00f      	b.n	8001d2c <HAL_SPI_TxRxCpltCallback+0x1dc>
		snprintf(uart_buffer, sizeof(uart_buffer), "oh no spi->instance != SPI1\n");
 8001d0c:	4a15      	ldr	r2, [pc, #84]	@ (8001d64 <HAL_SPI_TxRxCpltCallback+0x214>)
 8001d0e:	2140      	movs	r1, #64	@ 0x40
 8001d10:	4815      	ldr	r0, [pc, #84]	@ (8001d68 <HAL_SPI_TxRxCpltCallback+0x218>)
 8001d12:	f00a fe33 	bl	800c97c <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001d16:	4814      	ldr	r0, [pc, #80]	@ (8001d68 <HAL_SPI_TxRxCpltCallback+0x218>)
 8001d18:	f7fe fb32 	bl	8000380 <strlen>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	4910      	ldr	r1, [pc, #64]	@ (8001d68 <HAL_SPI_TxRxCpltCallback+0x218>)
 8001d26:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8001d28:	f008 fe0a 	bl	800a940 <HAL_UART_Transmit>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	f3af 8000 	nop.w
 8001d38:	a2529d39 	.word	0xa2529d39
 8001d3c:	3f91df46 	.word	0x3f91df46
 8001d40:	40013000 	.word	0x40013000
 8001d44:	58020000 	.word	0x58020000
 8001d48:	24000594 	.word	0x24000594
 8001d4c:	240005f4 	.word	0x240005f4
 8001d50:	45800000 	.word	0x45800000
 8001d54:	411cf5c3 	.word	0x411cf5c3
 8001d58:	24000608 	.word	0x24000608
 8001d5c:	42830000 	.word	0x42830000
 8001d60:	24000581 	.word	0x24000581
 8001d64:	08010620 	.word	0x08010620
 8001d68:	240005a4 	.word	0x240005a4
 8001d6c:	240004ec 	.word	0x240004ec

08001d70 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a06      	ldr	r2, [pc, #24]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d102      	bne.n	8001d86 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		// NOT BEING USED BY ANYTHING AS OF NOW IN DMA VERSION
		timer_flag = 1;
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
	}
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	240004a0 	.word	0x240004a0
 8001d98:	24000580 	.word	0x24000580

08001d9c <_write>:
int _write(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e009      	b.n	8001dc2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fb04 	bl	80013c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf1      	blt.n	8001dae <_write+0x12>
	}
	return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001de6:	f000 ff03 	bl	8002bf0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001df6:	231f      	movs	r3, #31
 8001df8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001dfa:	2387      	movs	r3, #135	@ 0x87
 8001dfc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001e02:	2300      	movs	r3, #0
 8001e04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e06:	2301      	movs	r3, #1
 8001e08:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e16:	463b      	mov	r3, r7
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 ff21 	bl	8002c60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001e1e:	2004      	movs	r0, #4
 8001e20:	f000 fefe 	bl	8002c20 <HAL_MPU_Enable>

}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <Error_Handler+0x8>

08001e38 <mpu9250_write_reg>:
IMU_ProcessedData_t imu_processed_data; // Instance of processed IMU data
IMU_Angles_t imu_angles;            // Instance of IMU angles
Mag_CalibData_t mag_calibration_data;

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2120      	movs	r1, #32
 8001e4c:	480b      	ldr	r0, [pc, #44]	@ (8001e7c <mpu9250_write_reg+0x44>)
 8001e4e:	f003 ff3f 	bl	8005cd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001e52:	1df9      	adds	r1, r7, #7
 8001e54:	2364      	movs	r3, #100	@ 0x64
 8001e56:	2201      	movs	r2, #1
 8001e58:	4809      	ldr	r0, [pc, #36]	@ (8001e80 <mpu9250_write_reg+0x48>)
 8001e5a:	f006 fec3 	bl	8008be4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001e5e:	1db9      	adds	r1, r7, #6
 8001e60:	2364      	movs	r3, #100	@ 0x64
 8001e62:	2201      	movs	r2, #1
 8001e64:	4806      	ldr	r0, [pc, #24]	@ (8001e80 <mpu9250_write_reg+0x48>)
 8001e66:	f006 febd 	bl	8008be4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	4803      	ldr	r0, [pc, #12]	@ (8001e7c <mpu9250_write_reg+0x44>)
 8001e70:	f003 ff2e 	bl	8005cd0 <HAL_GPIO_WritePin>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	58020000 	.word	0x58020000
 8001e80:	240002a0 	.word	0x240002a0

08001e84 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	4613      	mov	r3, r2
 8001e92:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2120      	movs	r1, #32
 8001ea2:	4814      	ldr	r0, [pc, #80]	@ (8001ef4 <mpu9250_read_reg+0x70>)
 8001ea4:	f003 ff14 	bl	8005cd0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001ea8:	f107 010e 	add.w	r1, r7, #14
 8001eac:	2364      	movs	r3, #100	@ 0x64
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4811      	ldr	r0, [pc, #68]	@ (8001ef8 <mpu9250_read_reg+0x74>)
 8001eb2:	f006 fe97 	bl	8008be4 <HAL_SPI_Transmit>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <mpu9250_read_reg+0x40>
		Error_Handler();
 8001ec0:	f7ff ffb4 	bl	8001e2c <Error_Handler>
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	2364      	movs	r3, #100	@ 0x64
 8001eca:	6839      	ldr	r1, [r7, #0]
 8001ecc:	480a      	ldr	r0, [pc, #40]	@ (8001ef8 <mpu9250_read_reg+0x74>)
 8001ece:	f007 f877 	bl	8008fc0 <HAL_SPI_Receive>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <mpu9250_read_reg+0x5c>
		Error_Handler();
 8001edc:	f7ff ffa6 	bl	8001e2c <Error_Handler>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	4803      	ldr	r0, [pc, #12]	@ (8001ef4 <mpu9250_read_reg+0x70>)
 8001ee6:	f003 fef3 	bl	8005cd0 <HAL_GPIO_WritePin>
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	58020000 	.word	0x58020000
 8001ef8:	240002a0 	.word	0x240002a0

08001efc <mpu9250_setup>:

void mpu9250_setup()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001f00:	2105      	movs	r1, #5
 8001f02:	201a      	movs	r0, #26
 8001f04:	f7ff ff98 	bl	8001e38 <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 8001f08:	2110      	movs	r1, #16
 8001f0a:	201c      	movs	r0, #28
 8001f0c:	f7ff ff94 	bl	8001e38 <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001f10:	2108      	movs	r1, #8
 8001f12:	201b      	movs	r0, #27
 8001f14:	f7ff ff90 	bl	8001e38 <mpu9250_write_reg>
	mpu9250_calibrateGyro(1500);
 8001f18:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001f1c:	f000 f814 	bl	8001f48 <mpu9250_calibrateGyro>
	quat[0] = 1.0f;
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <mpu9250_setup+0x48>)
 8001f22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f26:	601a      	str	r2, [r3, #0]
	quat[1] = 0.0f;
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <mpu9250_setup+0x48>)
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
	quat[2] = 0.0f;
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <mpu9250_setup+0x48>)
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
	quat[3] = 0.0f;
 8001f38:	4b02      	ldr	r3, [pc, #8]	@ (8001f44 <mpu9250_setup+0x48>)
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	240005e4 	.word	0x240005e4

08001f48 <mpu9250_calibrateGyro>:

void mpu9250_calibrateGyro(uint16_t numCalPoints)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <mpu9250_calibrateGyro+0x20>
    {
        numCalPoints = 1;
 8001f64:	2301      	movs	r3, #1
 8001f66:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	817b      	strh	r3, [r7, #10]
 8001f6c:	e01c      	b.n	8001fa8 <mpu9250_calibrateGyro+0x60>
    {
        mpu9250_getRawData();
 8001f6e:	f000 f855 	bl	800201c <mpu9250_getRawData>
        x += imu_raw_data.gyro_x;
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <mpu9250_calibrateGyro+0xcc>)
 8001f74:	88db      	ldrh	r3, [r3, #6]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
        y += imu_raw_data.gyro_y;
 8001f80:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <mpu9250_calibrateGyro+0xcc>)
 8001f82:	891b      	ldrh	r3, [r3, #8]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        z += imu_raw_data.gyro_z;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <mpu9250_calibrateGyro+0xcc>)
 8001f90:	895b      	ldrh	r3, [r3, #10]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f000 fce7 	bl	8002970 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001fa2:	897b      	ldrh	r3, [r7, #10]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	817b      	strh	r3, [r7, #10]
 8001fa8:	897a      	ldrh	r2, [r7, #10]
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d3de      	bcc.n	8001f6e <mpu9250_calibrateGyro+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    imu_processed_data.gyro_offX = (float)x / (float)numCalPoints;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc8:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <mpu9250_calibrateGyro+0xd0>)
 8001fca:	edc3 7a00 	vstr	s15, [r3]
    imu_processed_data.gyro_offY = (float)y / (float)numCalPoints;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <mpu9250_calibrateGyro+0xd0>)
 8001fe8:	edc3 7a01 	vstr	s15, [r3, #4]
    imu_processed_data.gyro_offZ = (float)z / (float)numCalPoints;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <mpu9250_calibrateGyro+0xd0>)
 8002006:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	240005f4 	.word	0x240005f4
 8002018:	24000608 	.word	0x24000608

0800201c <mpu9250_getRawData>:



void mpu9250_getRawData()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8002022:	463b      	mov	r3, r7
 8002024:	2206      	movs	r2, #6
 8002026:	4619      	mov	r1, r3
 8002028:	203b      	movs	r0, #59	@ 0x3b
 800202a:	f7ff ff2b 	bl	8001e84 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 800202e:	783b      	ldrb	r3, [r7, #0]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	b21a      	sxth	r2, r3
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	b21b      	sxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b21a      	sxth	r2, r3
 800203c:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <mpu9250_getRawData+0x94>)
 800203e:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8002040:	78bb      	ldrb	r3, [r7, #2]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21a      	sxth	r2, r3
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <mpu9250_getRawData+0x94>)
 8002050:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8002052:	793b      	ldrb	r3, [r7, #4]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b21a      	sxth	r2, r3
 8002058:	797b      	ldrb	r3, [r7, #5]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <mpu9250_getRawData+0x94>)
 8002062:	809a      	strh	r2, [r3, #4]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 8002064:	463b      	mov	r3, r7
 8002066:	2206      	movs	r2, #6
 8002068:	4619      	mov	r1, r3
 800206a:	2043      	movs	r0, #67	@ 0x43
 800206c:	f7ff ff0a 	bl	8001e84 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8002070:	783b      	ldrb	r3, [r7, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	b21a      	sxth	r2, r3
 8002076:	787b      	ldrb	r3, [r7, #1]
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b21a      	sxth	r2, r3
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <mpu9250_getRawData+0x94>)
 8002080:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8002082:	78bb      	ldrb	r3, [r7, #2]
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	b21a      	sxth	r2, r3
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	b21b      	sxth	r3, r3
 800208c:	4313      	orrs	r3, r2
 800208e:	b21a      	sxth	r2, r3
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <mpu9250_getRawData+0x94>)
 8002092:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8002094:	793b      	ldrb	r3, [r7, #4]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b21a      	sxth	r2, r3
 800209a:	797b      	ldrb	r3, [r7, #5]
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <mpu9250_getRawData+0x94>)
 80020a4:	815a      	strh	r2, [r3, #10]
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	240005f4 	.word	0x240005f4

080020b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_MspInit+0x30>)
 80020bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020c0:	4a08      	ldr	r2, [pc, #32]	@ (80020e4 <HAL_MspInit+0x30>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_MspInit+0x30>)
 80020cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	58024400 	.word	0x58024400

080020e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0be      	sub	sp, #248	@ 0xf8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	22c0      	movs	r2, #192	@ 0xc0
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f00a fcce 	bl	800caaa <memset>
  if(hspi->Instance==SPI1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4aa4      	ldr	r2, [pc, #656]	@ (80023a4 <HAL_SPI_MspInit+0x2bc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	f040 80d0 	bne.w	80022ba <HAL_SPI_MspInit+0x1d2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800211a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212c:	f107 0320 	add.w	r3, r7, #32
 8002130:	4618      	mov	r0, r3
 8002132:	f004 fe07 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800213c:	f7ff fe76 	bl	8001e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002140:	4b99      	ldr	r3, [pc, #612]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002146:	4a98      	ldr	r2, [pc, #608]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002148:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800214c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002150:	4b95      	ldr	r3, [pc, #596]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002164:	4a90      	ldr	r2, [pc, #576]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800216e:	4b8e      	ldr	r3, [pc, #568]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217c:	4b8a      	ldr	r3, [pc, #552]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002182:	4a89      	ldr	r2, [pc, #548]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800218c:	4b86      	ldr	r3, [pc, #536]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b2:	2305      	movs	r3, #5
 80021b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021bc:	4619      	mov	r1, r3
 80021be:	487b      	ldr	r0, [pc, #492]	@ (80023ac <HAL_SPI_MspInit+0x2c4>)
 80021c0:	f003 fbd6 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80021c4:	2318      	movs	r3, #24
 80021c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021dc:	2305      	movs	r3, #5
 80021de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4871      	ldr	r0, [pc, #452]	@ (80023b0 <HAL_SPI_MspInit+0x2c8>)
 80021ea:	f003 fbc1 	bl	8005970 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80021ee:	4b71      	ldr	r3, [pc, #452]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 80021f0:	4a71      	ldr	r2, [pc, #452]	@ (80023b8 <HAL_SPI_MspInit+0x2d0>)
 80021f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80021f4:	4b6f      	ldr	r3, [pc, #444]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 80021f6:	2225      	movs	r2, #37	@ 0x25
 80021f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021fa:	4b6e      	ldr	r3, [pc, #440]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002200:	4b6c      	ldr	r3, [pc, #432]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002206:	4b6b      	ldr	r3, [pc, #428]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 8002208:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800220c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220e:	4b69      	ldr	r3, [pc, #420]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002214:	4b67      	ldr	r3, [pc, #412]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800221a:	4b66      	ldr	r3, [pc, #408]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 800221c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002220:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002222:	4b64      	ldr	r3, [pc, #400]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 8002224:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002228:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800222a:	4b62      	ldr	r3, [pc, #392]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 800222c:	2200      	movs	r2, #0
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002230:	4860      	ldr	r0, [pc, #384]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 8002232:	f000 fd55 	bl	8002ce0 <HAL_DMA_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 800223c:	f7ff fdf6 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a5c      	ldr	r2, [pc, #368]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 8002244:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002246:	4a5b      	ldr	r2, [pc, #364]	@ (80023b4 <HAL_SPI_MspInit+0x2cc>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 800224c:	4b5b      	ldr	r3, [pc, #364]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 800224e:	4a5c      	ldr	r2, [pc, #368]	@ (80023c0 <HAL_SPI_MspInit+0x2d8>)
 8002250:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002252:	4b5a      	ldr	r3, [pc, #360]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 8002254:	2226      	movs	r2, #38	@ 0x26
 8002256:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002258:	4b58      	ldr	r3, [pc, #352]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 800225a:	2240      	movs	r2, #64	@ 0x40
 800225c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225e:	4b57      	ldr	r3, [pc, #348]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002264:	4b55      	ldr	r3, [pc, #340]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 8002266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800226a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800226c:	4b53      	ldr	r3, [pc, #332]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002272:	4b52      	ldr	r3, [pc, #328]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002278:	4b50      	ldr	r3, [pc, #320]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800227e:	4b4f      	ldr	r3, [pc, #316]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 8002280:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002284:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002286:	4b4d      	ldr	r3, [pc, #308]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 8002288:	2200      	movs	r2, #0
 800228a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800228c:	484b      	ldr	r0, [pc, #300]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 800228e:	f000 fd27 	bl	8002ce0 <HAL_DMA_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 8002298:	f7ff fdc8 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a47      	ldr	r2, [pc, #284]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 80022a0:	679a      	str	r2, [r3, #120]	@ 0x78
 80022a2:	4a46      	ldr	r2, [pc, #280]	@ (80023bc <HAL_SPI_MspInit+0x2d4>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	2023      	movs	r0, #35	@ 0x23
 80022ae:	f000 fc6a 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022b2:	2023      	movs	r0, #35	@ 0x23
 80022b4:	f000 fc81 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022b8:	e070      	b.n	800239c <HAL_SPI_MspInit+0x2b4>
  else if(hspi->Instance==SPI2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a41      	ldr	r2, [pc, #260]	@ (80023c4 <HAL_SPI_MspInit+0x2dc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d16b      	bne.n	800239c <HAL_SPI_MspInit+0x2b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80022c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d6:	f107 0320 	add.w	r3, r7, #32
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 fd32 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_SPI_MspInit+0x202>
      Error_Handler();
 80022e6:	f7ff fda1 	bl	8001e2c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ea:	4b2f      	ldr	r3, [pc, #188]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 80022ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022f0:	4a2d      	ldr	r2, [pc, #180]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 80022f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022fa:	4b2b      	ldr	r3, [pc, #172]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 80022fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002308:	4b27      	ldr	r3, [pc, #156]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230e:	4a26      	ldr	r2, [pc, #152]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002318:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800232c:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_SPI_MspInit+0x2c0>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002344:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002348:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800235e:	2305      	movs	r3, #5
 8002360:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002368:	4619      	mov	r1, r3
 800236a:	4811      	ldr	r0, [pc, #68]	@ (80023b0 <HAL_SPI_MspInit+0x2c8>)
 800236c:	f003 fb00 	bl	8005970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002374:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800238a:	2305      	movs	r3, #5
 800238c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002394:	4619      	mov	r1, r3
 8002396:	4805      	ldr	r0, [pc, #20]	@ (80023ac <HAL_SPI_MspInit+0x2c4>)
 8002398:	f003 faea 	bl	8005970 <HAL_GPIO_Init>
}
 800239c:	bf00      	nop
 800239e:	37f8      	adds	r7, #248	@ 0xf8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40013000 	.word	0x40013000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020000 	.word	0x58020000
 80023b0:	58020400 	.word	0x58020400
 80023b4:	240003b0 	.word	0x240003b0
 80023b8:	40020010 	.word	0x40020010
 80023bc:	24000428 	.word	0x24000428
 80023c0:	40020028 	.word	0x40020028
 80023c4:	40003800 	.word	0x40003800

080023c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d8:	d116      	bne.n	8002408 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_TIM_Base_MspInit+0x48>)
 80023dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002410 <HAL_TIM_Base_MspInit+0x48>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <HAL_TIM_Base_MspInit+0x48>)
 80023ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	201c      	movs	r0, #28
 80023fe:	f000 fbc2 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002402:	201c      	movs	r0, #28
 8002404:	f000 fbd9 	bl	8002bba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	58024400 	.word	0x58024400

08002414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0ba      	sub	sp, #232	@ 0xe8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	22c0      	movs	r2, #192	@ 0xc0
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f00a fb38 	bl	800caaa <memset>
  if(huart->Instance==USART2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a26      	ldr	r2, [pc, #152]	@ (80024d8 <HAL_UART_MspInit+0xc4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d145      	bne.n	80024d0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002444:	f04f 0202 	mov.w	r2, #2
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4618      	mov	r0, r3
 800245c:	f004 fc72 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002466:	f7ff fce1 	bl	8001e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800246a:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <HAL_UART_MspInit+0xc8>)
 800246c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002470:	4a1a      	ldr	r2, [pc, #104]	@ (80024dc <HAL_UART_MspInit+0xc8>)
 8002472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002476:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800247a:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <HAL_UART_MspInit+0xc8>)
 800247c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_UART_MspInit+0xc8>)
 800248a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248e:	4a13      	ldr	r2, [pc, #76]	@ (80024dc <HAL_UART_MspInit+0xc8>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002498:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <HAL_UART_MspInit+0xc8>)
 800249a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024a6:	230c      	movs	r3, #12
 80024a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024be:	2307      	movs	r3, #7
 80024c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <HAL_UART_MspInit+0xcc>)
 80024cc:	f003 fa50 	bl	8005970 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80024d0:	bf00      	nop
 80024d2:	37e8      	adds	r7, #232	@ 0xe8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40004400 	.word	0x40004400
 80024dc:	58024400 	.word	0x58024400
 80024e0:	58020000 	.word	0x58020000

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <NMI_Handler+0x4>

080024ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <HardFault_Handler+0x4>

080024f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <MemManage_Handler+0x4>

080024fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <UsageFault_Handler+0x4>

0800250c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253a:	f000 f9f9 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002548:	4802      	ldr	r0, [pc, #8]	@ (8002554 <DMA1_Stream0_IRQHandler+0x10>)
 800254a:	f001 fef3 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	240003b0 	.word	0x240003b0

08002558 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800255c:	4802      	ldr	r0, [pc, #8]	@ (8002568 <DMA1_Stream1_IRQHandler+0x10>)
 800255e:	f001 fee9 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	24000428 	.word	0x24000428

0800256c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002570:	4802      	ldr	r0, [pc, #8]	@ (800257c <TIM2_IRQHandler+0x10>)
 8002572:	f007 fd83 	bl	800a07c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	240004a0 	.word	0x240004a0

08002580 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002584:	4802      	ldr	r0, [pc, #8]	@ (8002590 <SPI1_IRQHandler+0x10>)
 8002586:	f007 f945 	bl	8009814 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	240002a0 	.word	0x240002a0

08002594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return 1;
 8002598:	2301      	movs	r3, #1
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_kill>:

int _kill(int pid, int sig)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ae:	f00a facf 	bl	800cb50 <__errno>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2216      	movs	r2, #22
 80025b6:	601a      	str	r2, [r3, #0]
  return -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <_exit>:

void _exit (int status)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ffe7 	bl	80025a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025d6:	bf00      	nop
 80025d8:	e7fd      	b.n	80025d6 <_exit+0x12>

080025da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e00a      	b.n	8002602 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ec:	f3af 8000 	nop.w
 80025f0:	4601      	mov	r1, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	60ba      	str	r2, [r7, #8]
 80025f8:	b2ca      	uxtb	r2, r1
 80025fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	dbf0      	blt.n	80025ec <_read+0x12>
  }

  return len;
 800260a:	687b      	ldr	r3, [r7, #4]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800263c:	605a      	str	r2, [r3, #4]
  return 0;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_isatty>:

int _isatty(int file)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002654:	2301      	movs	r3, #1
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002684:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <_sbrk+0x5c>)
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <_sbrk+0x60>)
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <_sbrk+0x64>)
 800269a:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <_sbrk+0x68>)
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <_sbrk+0x64>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d207      	bcs.n	80026bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026ac:	f00a fa50 	bl	800cb50 <__errno>
 80026b0:	4603      	mov	r3, r0
 80026b2:	220c      	movs	r2, #12
 80026b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e009      	b.n	80026d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026bc:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026c2:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	4a05      	ldr	r2, [pc, #20]	@ (80026e0 <_sbrk+0x64>)
 80026cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	24080000 	.word	0x24080000
 80026dc:	00000400 	.word	0x00000400
 80026e0:	24000644 	.word	0x24000644
 80026e4:	24000798 	.word	0x24000798

080026e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026ec:	4b37      	ldr	r3, [pc, #220]	@ (80027cc <SystemInit+0xe4>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	4a36      	ldr	r2, [pc, #216]	@ (80027cc <SystemInit+0xe4>)
 80026f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026fc:	4b34      	ldr	r3, [pc, #208]	@ (80027d0 <SystemInit+0xe8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	2b06      	cmp	r3, #6
 8002706:	d807      	bhi.n	8002718 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002708:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <SystemInit+0xe8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 030f 	bic.w	r3, r3, #15
 8002710:	4a2f      	ldr	r2, [pc, #188]	@ (80027d0 <SystemInit+0xe8>)
 8002712:	f043 0307 	orr.w	r3, r3, #7
 8002716:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002718:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <SystemInit+0xec>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2d      	ldr	r2, [pc, #180]	@ (80027d4 <SystemInit+0xec>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002724:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <SystemInit+0xec>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800272a:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <SystemInit+0xec>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4929      	ldr	r1, [pc, #164]	@ (80027d4 <SystemInit+0xec>)
 8002730:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <SystemInit+0xf0>)
 8002732:	4013      	ands	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002736:	4b26      	ldr	r3, [pc, #152]	@ (80027d0 <SystemInit+0xe8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002742:	4b23      	ldr	r3, [pc, #140]	@ (80027d0 <SystemInit+0xe8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 030f 	bic.w	r3, r3, #15
 800274a:	4a21      	ldr	r2, [pc, #132]	@ (80027d0 <SystemInit+0xe8>)
 800274c:	f043 0307 	orr.w	r3, r3, #7
 8002750:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002752:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <SystemInit+0xec>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <SystemInit+0xec>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800275e:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <SystemInit+0xec>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <SystemInit+0xec>)
 8002766:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <SystemInit+0xf4>)
 8002768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800276a:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <SystemInit+0xec>)
 800276c:	4a1c      	ldr	r2, [pc, #112]	@ (80027e0 <SystemInit+0xf8>)
 800276e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002770:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <SystemInit+0xec>)
 8002772:	4a1c      	ldr	r2, [pc, #112]	@ (80027e4 <SystemInit+0xfc>)
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002776:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <SystemInit+0xec>)
 8002778:	2200      	movs	r2, #0
 800277a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800277c:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <SystemInit+0xec>)
 800277e:	4a19      	ldr	r2, [pc, #100]	@ (80027e4 <SystemInit+0xfc>)
 8002780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <SystemInit+0xec>)
 8002784:	2200      	movs	r2, #0
 8002786:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002788:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <SystemInit+0xec>)
 800278a:	4a16      	ldr	r2, [pc, #88]	@ (80027e4 <SystemInit+0xfc>)
 800278c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <SystemInit+0xec>)
 8002790:	2200      	movs	r2, #0
 8002792:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <SystemInit+0xec>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0e      	ldr	r2, [pc, #56]	@ (80027d4 <SystemInit+0xec>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <SystemInit+0xec>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <SystemInit+0x100>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <SystemInit+0x104>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027b2:	d202      	bcs.n	80027ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027b4:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <SystemInit+0x108>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027ba:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <SystemInit+0x10c>)
 80027bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	52002000 	.word	0x52002000
 80027d4:	58024400 	.word	0x58024400
 80027d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80027dc:	02020200 	.word	0x02020200
 80027e0:	01ff0000 	.word	0x01ff0000
 80027e4:	01010280 	.word	0x01010280
 80027e8:	5c001000 	.word	0x5c001000
 80027ec:	ffff0000 	.word	0xffff0000
 80027f0:	51008108 	.word	0x51008108
 80027f4:	52004000 	.word	0x52004000

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027fc:	f7ff ff74 	bl	80026e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	@ (8002838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	@ (8002844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f00a f999 	bl	800cb5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7fe fdf5 	bl	8001418 <main>
  bx  lr
 800282e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002834:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002838:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 800283c:	08010af8 	.word	0x08010af8
  ldr r2, =_sbss
 8002840:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002844:	24000798 	.word	0x24000798

08002848 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC3_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002852:	2003      	movs	r0, #3
 8002854:	f000 f98c 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002858:	f004 f89e 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_Init+0x68>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4913      	ldr	r1, [pc, #76]	@ (80028b8 <HAL_Init+0x6c>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002876:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_Init+0x68>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <HAL_Init+0x6c>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <HAL_Init+0x70>)
 800288e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002890:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_Init+0x74>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002896:	200f      	movs	r0, #15
 8002898:	f000 f814 	bl	80028c4 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e002      	b.n	80028ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028a6:	f7ff fc05 	bl	80020b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	58024400 	.word	0x58024400
 80028b8:	08010640 	.word	0x08010640
 80028bc:	24000008 	.word	0x24000008
 80028c0:	24000004 	.word	0x24000004

080028c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_InitTick+0x60>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e021      	b.n	800291c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <HAL_InitTick+0x64>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_InitTick+0x60>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f971 	bl	8002bd6 <HAL_SYSTICK_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00e      	b.n	800291c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0f      	cmp	r3, #15
 8002902:	d80a      	bhi.n	800291a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002904:	2200      	movs	r2, #0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f000 f93b 	bl	8002b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002910:	4a06      	ldr	r2, [pc, #24]	@ (800292c <HAL_InitTick+0x68>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	24000010 	.word	0x24000010
 8002928:	24000004 	.word	0x24000004
 800292c:	2400000c 	.word	0x2400000c

08002930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_IncTick+0x20>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_IncTick+0x24>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_IncTick+0x24>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	24000010 	.word	0x24000010
 8002954:	24000648 	.word	0x24000648

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	24000648 	.word	0x24000648

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff ffee 	bl	8002958 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_Delay+0x44>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002996:	bf00      	nop
 8002998:	f7ff ffde 	bl	8002958 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	24000010 	.word	0x24000010

080029b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_GetREVID+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0c1b      	lsrs	r3, r3, #16
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	5c001000 	.word	0x5c001000

080029d0 <__NVIC_SetPriorityGrouping>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <__NVIC_SetPriorityGrouping+0x40>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <__NVIC_SetPriorityGrouping+0x40>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00
 8002a14:	05fa0000 	.word	0x05fa0000

08002a18 <__NVIC_GetPriorityGrouping>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a1c:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <__NVIC_GetPriorityGrouping+0x18>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 0307 	and.w	r3, r3, #7
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_EnableIRQ>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0b      	blt.n	8002a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4907      	ldr	r1, [pc, #28]	@ (8002a6c <__NVIC_EnableIRQ+0x38>)
 8002a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_SetPriority>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	@ (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	@ (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	@ 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	@ 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <SysTick_Config>:
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b3c:	d301      	bcc.n	8002b42 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00f      	b.n	8002b62 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a0a      	ldr	r2, [pc, #40]	@ (8002b6c <SysTick_Config+0x40>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4a:	210f      	movs	r1, #15
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f7ff ff8e 	bl	8002a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <SysTick_Config+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <SysTick_Config+0x40>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff29 	bl	80029d0 <__NVIC_SetPriorityGrouping>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b94:	f7ff ff40 	bl	8002a18 <__NVIC_GetPriorityGrouping>
 8002b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff90 	bl	8002ac4 <NVIC_EncodePriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff5f 	bl	8002a70 <__NVIC_SetPriority>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff33 	bl	8002a34 <__NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ffa4 	bl	8002b2c <SysTick_Config>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002bf4:	f3bf 8f5f 	dmb	sy
}
 8002bf8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <HAL_MPU_Disable+0x28>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	4a06      	ldr	r2, [pc, #24]	@ (8002c18 <HAL_MPU_Disable+0x28>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c04:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_MPU_Disable+0x2c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	605a      	str	r2, [r3, #4]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000ed00 	.word	0xe000ed00
 8002c1c:	e000ed90 	.word	0xe000ed90

08002c20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c28:	4a0b      	ldr	r2, [pc, #44]	@ (8002c58 <HAL_MPU_Enable+0x38>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_MPU_Enable+0x3c>)
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	4a09      	ldr	r2, [pc, #36]	@ (8002c5c <HAL_MPU_Enable+0x3c>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c3e:	f3bf 8f4f 	dsb	sy
}
 8002c42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c44:	f3bf 8f6f 	isb	sy
}
 8002c48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed90 	.word	0xe000ed90
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	785a      	ldrb	r2, [r3, #1]
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <HAL_MPU_ConfigRegion+0x7c>)
 8002c6e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c70:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <HAL_MPU_ConfigRegion+0x7c>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	4a19      	ldr	r2, [pc, #100]	@ (8002cdc <HAL_MPU_ConfigRegion+0x7c>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c7c:	4a17      	ldr	r2, [pc, #92]	@ (8002cdc <HAL_MPU_ConfigRegion+0x7c>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7b1b      	ldrb	r3, [r3, #12]
 8002c88:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7adb      	ldrb	r3, [r3, #11]
 8002c8e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7a9b      	ldrb	r3, [r3, #10]
 8002c96:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7b5b      	ldrb	r3, [r3, #13]
 8002c9e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ca0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7b9b      	ldrb	r3, [r3, #14]
 8002ca6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ca8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7bdb      	ldrb	r3, [r3, #15]
 8002cae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7a5b      	ldrb	r3, [r3, #9]
 8002cb6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7a1b      	ldrb	r3, [r3, #8]
 8002cbe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cc0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	7812      	ldrb	r2, [r2, #0]
 8002cc6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cc8:	4a04      	ldr	r2, [pc, #16]	@ (8002cdc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ccc:	6113      	str	r3, [r2, #16]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed90 	.word	0xe000ed90

08002ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff fe36 	bl	8002958 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e316      	b.n	8003326 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a66      	ldr	r2, [pc, #408]	@ (8002e98 <HAL_DMA_Init+0x1b8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d04a      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a65      	ldr	r2, [pc, #404]	@ (8002e9c <HAL_DMA_Init+0x1bc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d045      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a63      	ldr	r2, [pc, #396]	@ (8002ea0 <HAL_DMA_Init+0x1c0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d040      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a62      	ldr	r2, [pc, #392]	@ (8002ea4 <HAL_DMA_Init+0x1c4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d03b      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a60      	ldr	r2, [pc, #384]	@ (8002ea8 <HAL_DMA_Init+0x1c8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d036      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5f      	ldr	r2, [pc, #380]	@ (8002eac <HAL_DMA_Init+0x1cc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d031      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb0 <HAL_DMA_Init+0x1d0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb4 <HAL_DMA_Init+0x1d4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d027      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb8 <HAL_DMA_Init+0x1d8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d022      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a59      	ldr	r2, [pc, #356]	@ (8002ebc <HAL_DMA_Init+0x1dc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01d      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a57      	ldr	r2, [pc, #348]	@ (8002ec0 <HAL_DMA_Init+0x1e0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d018      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a56      	ldr	r2, [pc, #344]	@ (8002ec4 <HAL_DMA_Init+0x1e4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a54      	ldr	r2, [pc, #336]	@ (8002ec8 <HAL_DMA_Init+0x1e8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00e      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a53      	ldr	r2, [pc, #332]	@ (8002ecc <HAL_DMA_Init+0x1ec>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a51      	ldr	r2, [pc, #324]	@ (8002ed0 <HAL_DMA_Init+0x1f0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Init+0xb8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a50      	ldr	r2, [pc, #320]	@ (8002ed4 <HAL_DMA_Init+0x1f4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_DMA_Init+0xbc>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_DMA_Init+0xbe>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 813b 	beq.w	800301a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a37      	ldr	r2, [pc, #220]	@ (8002e98 <HAL_DMA_Init+0x1b8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04a      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a36      	ldr	r2, [pc, #216]	@ (8002e9c <HAL_DMA_Init+0x1bc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d045      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <HAL_DMA_Init+0x1c0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d040      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	@ (8002ea4 <HAL_DMA_Init+0x1c4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d03b      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a31      	ldr	r2, [pc, #196]	@ (8002ea8 <HAL_DMA_Init+0x1c8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d036      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a30      	ldr	r2, [pc, #192]	@ (8002eac <HAL_DMA_Init+0x1cc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d031      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb0 <HAL_DMA_Init+0x1d0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02c      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb4 <HAL_DMA_Init+0x1d4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d027      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb8 <HAL_DMA_Init+0x1d8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2a      	ldr	r2, [pc, #168]	@ (8002ebc <HAL_DMA_Init+0x1dc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_DMA_Init+0x1e0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <HAL_DMA_Init+0x1e4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a25      	ldr	r2, [pc, #148]	@ (8002ec8 <HAL_DMA_Init+0x1e8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a24      	ldr	r2, [pc, #144]	@ (8002ecc <HAL_DMA_Init+0x1ec>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a22      	ldr	r2, [pc, #136]	@ (8002ed0 <HAL_DMA_Init+0x1f0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_Init+0x174>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <HAL_DMA_Init+0x1f4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <HAL_DMA_Init+0x186>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e007      	b.n	8002e76 <HAL_DMA_Init+0x196>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e76:	e02f      	b.n	8002ed8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e78:	f7ff fd6e 	bl	8002958 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d928      	bls.n	8002ed8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e246      	b.n	8003326 <HAL_DMA_Init+0x646>
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1c8      	bne.n	8002e78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4b83      	ldr	r3, [pc, #524]	@ (8003100 <HAL_DMA_Init+0x420>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002efe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d107      	bne.n	8002f3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	4313      	orrs	r3, r2
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f3c:	4b71      	ldr	r3, [pc, #452]	@ (8003104 <HAL_DMA_Init+0x424>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b71      	ldr	r3, [pc, #452]	@ (8003108 <HAL_DMA_Init+0x428>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f48:	d328      	bcc.n	8002f9c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b28      	cmp	r3, #40	@ 0x28
 8002f50:	d903      	bls.n	8002f5a <HAL_DMA_Init+0x27a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f58:	d917      	bls.n	8002f8a <HAL_DMA_Init+0x2aa>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f60:	d903      	bls.n	8002f6a <HAL_DMA_Init+0x28a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b42      	cmp	r3, #66	@ 0x42
 8002f68:	d90f      	bls.n	8002f8a <HAL_DMA_Init+0x2aa>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b46      	cmp	r3, #70	@ 0x46
 8002f70:	d903      	bls.n	8002f7a <HAL_DMA_Init+0x29a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b48      	cmp	r3, #72	@ 0x48
 8002f78:	d907      	bls.n	8002f8a <HAL_DMA_Init+0x2aa>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f80:	d905      	bls.n	8002f8e <HAL_DMA_Init+0x2ae>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b52      	cmp	r3, #82	@ 0x52
 8002f88:	d801      	bhi.n	8002f8e <HAL_DMA_Init+0x2ae>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_DMA_Init+0x2b0>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f9a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0307 	bic.w	r3, r3, #7
 8002fb2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d117      	bne.n	8002ff6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f002 fb3f 	bl	800565c <DMA_CheckFifoParam>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2240      	movs	r2, #64	@ 0x40
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e197      	b.n	8003326 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f002 fa7a 	bl	80054f8 <DMA_CalcBaseAndBitshift>
 8003004:	4603      	mov	r3, r0
 8003006:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	223f      	movs	r2, #63	@ 0x3f
 8003012:	409a      	lsls	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	e0cd      	b.n	80031b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3b      	ldr	r2, [pc, #236]	@ (800310c <HAL_DMA_Init+0x42c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d022      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a39      	ldr	r2, [pc, #228]	@ (8003110 <HAL_DMA_Init+0x430>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01d      	beq.n	800306a <HAL_DMA_Init+0x38a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a38      	ldr	r2, [pc, #224]	@ (8003114 <HAL_DMA_Init+0x434>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d018      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a36      	ldr	r2, [pc, #216]	@ (8003118 <HAL_DMA_Init+0x438>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a35      	ldr	r2, [pc, #212]	@ (800311c <HAL_DMA_Init+0x43c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_DMA_Init+0x38a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a33      	ldr	r2, [pc, #204]	@ (8003120 <HAL_DMA_Init+0x440>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a32      	ldr	r2, [pc, #200]	@ (8003124 <HAL_DMA_Init+0x444>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_DMA_Init+0x38a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a30      	ldr	r2, [pc, #192]	@ (8003128 <HAL_DMA_Init+0x448>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_DMA_Init+0x38e>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_DMA_Init+0x390>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8097 	beq.w	80031a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a24      	ldr	r2, [pc, #144]	@ (800310c <HAL_DMA_Init+0x42c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d021      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a22      	ldr	r2, [pc, #136]	@ (8003110 <HAL_DMA_Init+0x430>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01c      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a21      	ldr	r2, [pc, #132]	@ (8003114 <HAL_DMA_Init+0x434>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d017      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1f      	ldr	r2, [pc, #124]	@ (8003118 <HAL_DMA_Init+0x438>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d012      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1e      	ldr	r2, [pc, #120]	@ (800311c <HAL_DMA_Init+0x43c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00d      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003120 <HAL_DMA_Init+0x440>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d008      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <HAL_DMA_Init+0x444>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <HAL_DMA_Init+0x3e4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	@ (8003128 <HAL_DMA_Init+0x448>)
 80030c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4b13      	ldr	r3, [pc, #76]	@ (800312c <HAL_DMA_Init+0x44c>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b40      	cmp	r3, #64	@ 0x40
 80030ea:	d021      	beq.n	8003130 <HAL_DMA_Init+0x450>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d102      	bne.n	80030fa <HAL_DMA_Init+0x41a>
 80030f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030f8:	e01b      	b.n	8003132 <HAL_DMA_Init+0x452>
 80030fa:	2300      	movs	r3, #0
 80030fc:	e019      	b.n	8003132 <HAL_DMA_Init+0x452>
 80030fe:	bf00      	nop
 8003100:	fe10803f 	.word	0xfe10803f
 8003104:	5c001000 	.word	0x5c001000
 8003108:	ffff0000 	.word	0xffff0000
 800310c:	58025408 	.word	0x58025408
 8003110:	5802541c 	.word	0x5802541c
 8003114:	58025430 	.word	0x58025430
 8003118:	58025444 	.word	0x58025444
 800311c:	58025458 	.word	0x58025458
 8003120:	5802546c 	.word	0x5802546c
 8003124:	58025480 	.word	0x58025480
 8003128:	58025494 	.word	0x58025494
 800312c:	fffe000f 	.word	0xfffe000f
 8003130:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68d2      	ldr	r2, [r2, #12]
 8003136:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003160:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b6e      	ldr	r3, [pc, #440]	@ (8003330 <HAL_DMA_Init+0x650>)
 8003178:	4413      	add	r3, r2
 800317a:	4a6e      	ldr	r2, [pc, #440]	@ (8003334 <HAL_DMA_Init+0x654>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	009a      	lsls	r2, r3, #2
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f002 f9b5 	bl	80054f8 <DMA_CalcBaseAndBitshift>
 800318e:	4603      	mov	r3, r0
 8003190:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2201      	movs	r2, #1
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	e008      	b.n	80031b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2240      	movs	r2, #64	@ 0x40
 80031a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2203      	movs	r2, #3
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0b7      	b.n	8003326 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003338 <HAL_DMA_Init+0x658>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d072      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5d      	ldr	r2, [pc, #372]	@ (800333c <HAL_DMA_Init+0x65c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d06d      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003340 <HAL_DMA_Init+0x660>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d068      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <HAL_DMA_Init+0x664>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d063      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a59      	ldr	r2, [pc, #356]	@ (8003348 <HAL_DMA_Init+0x668>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d05e      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a57      	ldr	r2, [pc, #348]	@ (800334c <HAL_DMA_Init+0x66c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d059      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a56      	ldr	r2, [pc, #344]	@ (8003350 <HAL_DMA_Init+0x670>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d054      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a54      	ldr	r2, [pc, #336]	@ (8003354 <HAL_DMA_Init+0x674>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d04f      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a53      	ldr	r2, [pc, #332]	@ (8003358 <HAL_DMA_Init+0x678>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04a      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a51      	ldr	r2, [pc, #324]	@ (800335c <HAL_DMA_Init+0x67c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d045      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a50      	ldr	r2, [pc, #320]	@ (8003360 <HAL_DMA_Init+0x680>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d040      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a4e      	ldr	r2, [pc, #312]	@ (8003364 <HAL_DMA_Init+0x684>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d03b      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a4d      	ldr	r2, [pc, #308]	@ (8003368 <HAL_DMA_Init+0x688>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d036      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a4b      	ldr	r2, [pc, #300]	@ (800336c <HAL_DMA_Init+0x68c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d031      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a4a      	ldr	r2, [pc, #296]	@ (8003370 <HAL_DMA_Init+0x690>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d02c      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a48      	ldr	r2, [pc, #288]	@ (8003374 <HAL_DMA_Init+0x694>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d027      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a47      	ldr	r2, [pc, #284]	@ (8003378 <HAL_DMA_Init+0x698>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d022      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a45      	ldr	r2, [pc, #276]	@ (800337c <HAL_DMA_Init+0x69c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01d      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a44      	ldr	r2, [pc, #272]	@ (8003380 <HAL_DMA_Init+0x6a0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d018      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a42      	ldr	r2, [pc, #264]	@ (8003384 <HAL_DMA_Init+0x6a4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a41      	ldr	r2, [pc, #260]	@ (8003388 <HAL_DMA_Init+0x6a8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00e      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3f      	ldr	r2, [pc, #252]	@ (800338c <HAL_DMA_Init+0x6ac>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3e      	ldr	r2, [pc, #248]	@ (8003390 <HAL_DMA_Init+0x6b0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_DMA_Init+0x5c6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003394 <HAL_DMA_Init+0x6b4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_DMA_Init+0x5ca>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_DMA_Init+0x5cc>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d032      	beq.n	8003316 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f002 fa4f 	bl	8005754 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b80      	cmp	r3, #128	@ 0x80
 80032bc:	d102      	bne.n	80032c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80032d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_DMA_Init+0x624>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d80c      	bhi.n	8003304 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f002 facc 	bl	8005888 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	e008      	b.n	8003316 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	a7fdabf8 	.word	0xa7fdabf8
 8003334:	cccccccd 	.word	0xcccccccd
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
 8003378:	58025408 	.word	0x58025408
 800337c:	5802541c 	.word	0x5802541c
 8003380:	58025430 	.word	0x58025430
 8003384:	58025444 	.word	0x58025444
 8003388:	58025458 	.word	0x58025458
 800338c:	5802546c 	.word	0x5802546c
 8003390:	58025480 	.word	0x58025480
 8003394:	58025494 	.word	0x58025494

08003398 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e226      	b.n	8003802 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_DMA_Start_IT+0x2a>
 80033be:	2302      	movs	r3, #2
 80033c0:	e21f      	b.n	8003802 <HAL_DMA_Start_IT+0x46a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	f040 820a 	bne.w	80037ec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a68      	ldr	r2, [pc, #416]	@ (800358c <HAL_DMA_Start_IT+0x1f4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04a      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a66      	ldr	r2, [pc, #408]	@ (8003590 <HAL_DMA_Start_IT+0x1f8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d045      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a65      	ldr	r2, [pc, #404]	@ (8003594 <HAL_DMA_Start_IT+0x1fc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d040      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a63      	ldr	r2, [pc, #396]	@ (8003598 <HAL_DMA_Start_IT+0x200>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a62      	ldr	r2, [pc, #392]	@ (800359c <HAL_DMA_Start_IT+0x204>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d036      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a60      	ldr	r2, [pc, #384]	@ (80035a0 <HAL_DMA_Start_IT+0x208>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a5f      	ldr	r2, [pc, #380]	@ (80035a4 <HAL_DMA_Start_IT+0x20c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d02c      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5d      	ldr	r2, [pc, #372]	@ (80035a8 <HAL_DMA_Start_IT+0x210>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d027      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5c      	ldr	r2, [pc, #368]	@ (80035ac <HAL_DMA_Start_IT+0x214>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a5a      	ldr	r2, [pc, #360]	@ (80035b0 <HAL_DMA_Start_IT+0x218>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a59      	ldr	r2, [pc, #356]	@ (80035b4 <HAL_DMA_Start_IT+0x21c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a57      	ldr	r2, [pc, #348]	@ (80035b8 <HAL_DMA_Start_IT+0x220>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a56      	ldr	r2, [pc, #344]	@ (80035bc <HAL_DMA_Start_IT+0x224>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a54      	ldr	r2, [pc, #336]	@ (80035c0 <HAL_DMA_Start_IT+0x228>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a53      	ldr	r2, [pc, #332]	@ (80035c4 <HAL_DMA_Start_IT+0x22c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_DMA_Start_IT+0xee>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a51      	ldr	r2, [pc, #324]	@ (80035c8 <HAL_DMA_Start_IT+0x230>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d108      	bne.n	8003498 <HAL_DMA_Start_IT+0x100>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_DMA_Start_IT+0x110>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f001 fe76 	bl	80051a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a34      	ldr	r2, [pc, #208]	@ (800358c <HAL_DMA_Start_IT+0x1f4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d04a      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a33      	ldr	r2, [pc, #204]	@ (8003590 <HAL_DMA_Start_IT+0x1f8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d045      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a31      	ldr	r2, [pc, #196]	@ (8003594 <HAL_DMA_Start_IT+0x1fc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d040      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a30      	ldr	r2, [pc, #192]	@ (8003598 <HAL_DMA_Start_IT+0x200>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d03b      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2e      	ldr	r2, [pc, #184]	@ (800359c <HAL_DMA_Start_IT+0x204>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d036      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2d      	ldr	r2, [pc, #180]	@ (80035a0 <HAL_DMA_Start_IT+0x208>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d031      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2b      	ldr	r2, [pc, #172]	@ (80035a4 <HAL_DMA_Start_IT+0x20c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02c      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2a      	ldr	r2, [pc, #168]	@ (80035a8 <HAL_DMA_Start_IT+0x210>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d027      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a28      	ldr	r2, [pc, #160]	@ (80035ac <HAL_DMA_Start_IT+0x214>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a27      	ldr	r2, [pc, #156]	@ (80035b0 <HAL_DMA_Start_IT+0x218>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d01d      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a25      	ldr	r2, [pc, #148]	@ (80035b4 <HAL_DMA_Start_IT+0x21c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a24      	ldr	r2, [pc, #144]	@ (80035b8 <HAL_DMA_Start_IT+0x220>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a22      	ldr	r2, [pc, #136]	@ (80035bc <HAL_DMA_Start_IT+0x224>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00e      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a21      	ldr	r2, [pc, #132]	@ (80035c0 <HAL_DMA_Start_IT+0x228>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1f      	ldr	r2, [pc, #124]	@ (80035c4 <HAL_DMA_Start_IT+0x22c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_DMA_Start_IT+0x1bc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1e      	ldr	r2, [pc, #120]	@ (80035c8 <HAL_DMA_Start_IT+0x230>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Start_IT+0x1c0>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_DMA_Start_IT+0x1c2>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d036      	beq.n	80035cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 021e 	bic.w	r2, r3, #30
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0216 	orr.w	r2, r2, #22
 8003570:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03e      	beq.n	80035f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0208 	orr.w	r2, r2, #8
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e035      	b.n	80035f8 <HAL_DMA_Start_IT+0x260>
 800358c:	40020010 	.word	0x40020010
 8003590:	40020028 	.word	0x40020028
 8003594:	40020040 	.word	0x40020040
 8003598:	40020058 	.word	0x40020058
 800359c:	40020070 	.word	0x40020070
 80035a0:	40020088 	.word	0x40020088
 80035a4:	400200a0 	.word	0x400200a0
 80035a8:	400200b8 	.word	0x400200b8
 80035ac:	40020410 	.word	0x40020410
 80035b0:	40020428 	.word	0x40020428
 80035b4:	40020440 	.word	0x40020440
 80035b8:	40020458 	.word	0x40020458
 80035bc:	40020470 	.word	0x40020470
 80035c0:	40020488 	.word	0x40020488
 80035c4:	400204a0 	.word	0x400204a0
 80035c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 020e 	bic.w	r2, r3, #14
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 020a 	orr.w	r2, r2, #10
 80035de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0204 	orr.w	r2, r2, #4
 80035f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a83      	ldr	r2, [pc, #524]	@ (800380c <HAL_DMA_Start_IT+0x474>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d072      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a82      	ldr	r2, [pc, #520]	@ (8003810 <HAL_DMA_Start_IT+0x478>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d06d      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a80      	ldr	r2, [pc, #512]	@ (8003814 <HAL_DMA_Start_IT+0x47c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d068      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7f      	ldr	r2, [pc, #508]	@ (8003818 <HAL_DMA_Start_IT+0x480>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d063      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a7d      	ldr	r2, [pc, #500]	@ (800381c <HAL_DMA_Start_IT+0x484>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d05e      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7c      	ldr	r2, [pc, #496]	@ (8003820 <HAL_DMA_Start_IT+0x488>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d059      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7a      	ldr	r2, [pc, #488]	@ (8003824 <HAL_DMA_Start_IT+0x48c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d054      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a79      	ldr	r2, [pc, #484]	@ (8003828 <HAL_DMA_Start_IT+0x490>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04f      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a77      	ldr	r2, [pc, #476]	@ (800382c <HAL_DMA_Start_IT+0x494>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a76      	ldr	r2, [pc, #472]	@ (8003830 <HAL_DMA_Start_IT+0x498>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a74      	ldr	r2, [pc, #464]	@ (8003834 <HAL_DMA_Start_IT+0x49c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a73      	ldr	r2, [pc, #460]	@ (8003838 <HAL_DMA_Start_IT+0x4a0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a71      	ldr	r2, [pc, #452]	@ (800383c <HAL_DMA_Start_IT+0x4a4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a70      	ldr	r2, [pc, #448]	@ (8003840 <HAL_DMA_Start_IT+0x4a8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6e      	ldr	r2, [pc, #440]	@ (8003844 <HAL_DMA_Start_IT+0x4ac>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6d      	ldr	r2, [pc, #436]	@ (8003848 <HAL_DMA_Start_IT+0x4b0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6b      	ldr	r2, [pc, #428]	@ (800384c <HAL_DMA_Start_IT+0x4b4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003850 <HAL_DMA_Start_IT+0x4b8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a68      	ldr	r2, [pc, #416]	@ (8003854 <HAL_DMA_Start_IT+0x4bc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a67      	ldr	r2, [pc, #412]	@ (8003858 <HAL_DMA_Start_IT+0x4c0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a65      	ldr	r2, [pc, #404]	@ (800385c <HAL_DMA_Start_IT+0x4c4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a64      	ldr	r2, [pc, #400]	@ (8003860 <HAL_DMA_Start_IT+0x4c8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a62      	ldr	r2, [pc, #392]	@ (8003864 <HAL_DMA_Start_IT+0x4cc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Start_IT+0x350>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a61      	ldr	r2, [pc, #388]	@ (8003868 <HAL_DMA_Start_IT+0x4d0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_Start_IT+0x354>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_DMA_Start_IT+0x356>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01a      	beq.n	8003728 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800370e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003726:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a37      	ldr	r2, [pc, #220]	@ (800380c <HAL_DMA_Start_IT+0x474>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04a      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a36      	ldr	r2, [pc, #216]	@ (8003810 <HAL_DMA_Start_IT+0x478>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d045      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a34      	ldr	r2, [pc, #208]	@ (8003814 <HAL_DMA_Start_IT+0x47c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d040      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a33      	ldr	r2, [pc, #204]	@ (8003818 <HAL_DMA_Start_IT+0x480>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03b      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a31      	ldr	r2, [pc, #196]	@ (800381c <HAL_DMA_Start_IT+0x484>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d036      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a30      	ldr	r2, [pc, #192]	@ (8003820 <HAL_DMA_Start_IT+0x488>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d031      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2e      	ldr	r2, [pc, #184]	@ (8003824 <HAL_DMA_Start_IT+0x48c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02c      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <HAL_DMA_Start_IT+0x490>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d027      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2b      	ldr	r2, [pc, #172]	@ (800382c <HAL_DMA_Start_IT+0x494>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2a      	ldr	r2, [pc, #168]	@ (8003830 <HAL_DMA_Start_IT+0x498>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d01d      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a28      	ldr	r2, [pc, #160]	@ (8003834 <HAL_DMA_Start_IT+0x49c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a27      	ldr	r2, [pc, #156]	@ (8003838 <HAL_DMA_Start_IT+0x4a0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a25      	ldr	r2, [pc, #148]	@ (800383c <HAL_DMA_Start_IT+0x4a4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a24      	ldr	r2, [pc, #144]	@ (8003840 <HAL_DMA_Start_IT+0x4a8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a22      	ldr	r2, [pc, #136]	@ (8003844 <HAL_DMA_Start_IT+0x4ac>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_DMA_Start_IT+0x430>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <HAL_DMA_Start_IT+0x4b0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <HAL_DMA_Start_IT+0x442>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e012      	b.n	8003800 <HAL_DMA_Start_IT+0x468>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e009      	b.n	8003800 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40020010 	.word	0x40020010
 8003810:	40020028 	.word	0x40020028
 8003814:	40020040 	.word	0x40020040
 8003818:	40020058 	.word	0x40020058
 800381c:	40020070 	.word	0x40020070
 8003820:	40020088 	.word	0x40020088
 8003824:	400200a0 	.word	0x400200a0
 8003828:	400200b8 	.word	0x400200b8
 800382c:	40020410 	.word	0x40020410
 8003830:	40020428 	.word	0x40020428
 8003834:	40020440 	.word	0x40020440
 8003838:	40020458 	.word	0x40020458
 800383c:	40020470 	.word	0x40020470
 8003840:	40020488 	.word	0x40020488
 8003844:	400204a0 	.word	0x400204a0
 8003848:	400204b8 	.word	0x400204b8
 800384c:	58025408 	.word	0x58025408
 8003850:	5802541c 	.word	0x5802541c
 8003854:	58025430 	.word	0x58025430
 8003858:	58025444 	.word	0x58025444
 800385c:	58025458 	.word	0x58025458
 8003860:	5802546c 	.word	0x5802546c
 8003864:	58025480 	.word	0x58025480
 8003868:	58025494 	.word	0x58025494

0800386c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff f870 	bl	8002958 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e2dc      	b.n	8003e3e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2280      	movs	r2, #128	@ 0x80
 8003894:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e2cd      	b.n	8003e3e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a76      	ldr	r2, [pc, #472]	@ (8003a80 <HAL_DMA_Abort+0x214>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d04a      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a74      	ldr	r2, [pc, #464]	@ (8003a84 <HAL_DMA_Abort+0x218>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d045      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a73      	ldr	r2, [pc, #460]	@ (8003a88 <HAL_DMA_Abort+0x21c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d040      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a71      	ldr	r2, [pc, #452]	@ (8003a8c <HAL_DMA_Abort+0x220>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d03b      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a70      	ldr	r2, [pc, #448]	@ (8003a90 <HAL_DMA_Abort+0x224>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d036      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a94 <HAL_DMA_Abort+0x228>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d031      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a98 <HAL_DMA_Abort+0x22c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6b      	ldr	r2, [pc, #428]	@ (8003a9c <HAL_DMA_Abort+0x230>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d027      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa0 <HAL_DMA_Abort+0x234>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a68      	ldr	r2, [pc, #416]	@ (8003aa4 <HAL_DMA_Abort+0x238>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a67      	ldr	r2, [pc, #412]	@ (8003aa8 <HAL_DMA_Abort+0x23c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a65      	ldr	r2, [pc, #404]	@ (8003aac <HAL_DMA_Abort+0x240>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a64      	ldr	r2, [pc, #400]	@ (8003ab0 <HAL_DMA_Abort+0x244>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a62      	ldr	r2, [pc, #392]	@ (8003ab4 <HAL_DMA_Abort+0x248>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a61      	ldr	r2, [pc, #388]	@ (8003ab8 <HAL_DMA_Abort+0x24c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Abort+0xd6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5f      	ldr	r2, [pc, #380]	@ (8003abc <HAL_DMA_Abort+0x250>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_DMA_Abort+0xda>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_DMA_Abort+0xdc>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 021e 	bic.w	r2, r2, #30
 800395a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800396a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e00a      	b.n	800398a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 020e 	bic.w	r2, r2, #14
 8003982:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a80 <HAL_DMA_Abort+0x214>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d072      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3a      	ldr	r2, [pc, #232]	@ (8003a84 <HAL_DMA_Abort+0x218>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d06d      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a39      	ldr	r2, [pc, #228]	@ (8003a88 <HAL_DMA_Abort+0x21c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d068      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a37      	ldr	r2, [pc, #220]	@ (8003a8c <HAL_DMA_Abort+0x220>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d063      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a36      	ldr	r2, [pc, #216]	@ (8003a90 <HAL_DMA_Abort+0x224>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d05e      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a34      	ldr	r2, [pc, #208]	@ (8003a94 <HAL_DMA_Abort+0x228>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d059      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a33      	ldr	r2, [pc, #204]	@ (8003a98 <HAL_DMA_Abort+0x22c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d054      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a31      	ldr	r2, [pc, #196]	@ (8003a9c <HAL_DMA_Abort+0x230>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d04f      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a30      	ldr	r2, [pc, #192]	@ (8003aa0 <HAL_DMA_Abort+0x234>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa4 <HAL_DMA_Abort+0x238>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa8 <HAL_DMA_Abort+0x23c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	@ (8003aac <HAL_DMA_Abort+0x240>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab0 <HAL_DMA_Abort+0x244>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a28      	ldr	r2, [pc, #160]	@ (8003ab4 <HAL_DMA_Abort+0x248>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a27      	ldr	r2, [pc, #156]	@ (8003ab8 <HAL_DMA_Abort+0x24c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a25      	ldr	r2, [pc, #148]	@ (8003abc <HAL_DMA_Abort+0x250>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a24      	ldr	r2, [pc, #144]	@ (8003ac0 <HAL_DMA_Abort+0x254>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a22      	ldr	r2, [pc, #136]	@ (8003ac4 <HAL_DMA_Abort+0x258>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a21      	ldr	r2, [pc, #132]	@ (8003ac8 <HAL_DMA_Abort+0x25c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003acc <HAL_DMA_Abort+0x260>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad0 <HAL_DMA_Abort+0x264>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad4 <HAL_DMA_Abort+0x268>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad8 <HAL_DMA_Abort+0x26c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_Abort+0x20e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	@ (8003adc <HAL_DMA_Abort+0x270>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d132      	bne.n	8003ae0 <HAL_DMA_Abort+0x274>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e031      	b.n	8003ae2 <HAL_DMA_Abort+0x276>
 8003a7e:	bf00      	nop
 8003a80:	40020010 	.word	0x40020010
 8003a84:	40020028 	.word	0x40020028
 8003a88:	40020040 	.word	0x40020040
 8003a8c:	40020058 	.word	0x40020058
 8003a90:	40020070 	.word	0x40020070
 8003a94:	40020088 	.word	0x40020088
 8003a98:	400200a0 	.word	0x400200a0
 8003a9c:	400200b8 	.word	0x400200b8
 8003aa0:	40020410 	.word	0x40020410
 8003aa4:	40020428 	.word	0x40020428
 8003aa8:	40020440 	.word	0x40020440
 8003aac:	40020458 	.word	0x40020458
 8003ab0:	40020470 	.word	0x40020470
 8003ab4:	40020488 	.word	0x40020488
 8003ab8:	400204a0 	.word	0x400204a0
 8003abc:	400204b8 	.word	0x400204b8
 8003ac0:	58025408 	.word	0x58025408
 8003ac4:	5802541c 	.word	0x5802541c
 8003ac8:	58025430 	.word	0x58025430
 8003acc:	58025444 	.word	0x58025444
 8003ad0:	58025458 	.word	0x58025458
 8003ad4:	5802546c 	.word	0x5802546c
 8003ad8:	58025480 	.word	0x58025480
 8003adc:	58025494 	.word	0x58025494
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a6d      	ldr	r2, [pc, #436]	@ (8003cb0 <HAL_DMA_Abort+0x444>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d04a      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a6b      	ldr	r2, [pc, #428]	@ (8003cb4 <HAL_DMA_Abort+0x448>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d045      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cb8 <HAL_DMA_Abort+0x44c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d040      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a68      	ldr	r2, [pc, #416]	@ (8003cbc <HAL_DMA_Abort+0x450>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d03b      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a67      	ldr	r2, [pc, #412]	@ (8003cc0 <HAL_DMA_Abort+0x454>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d036      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a65      	ldr	r2, [pc, #404]	@ (8003cc4 <HAL_DMA_Abort+0x458>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d031      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a64      	ldr	r2, [pc, #400]	@ (8003cc8 <HAL_DMA_Abort+0x45c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d02c      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a62      	ldr	r2, [pc, #392]	@ (8003ccc <HAL_DMA_Abort+0x460>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d027      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a61      	ldr	r2, [pc, #388]	@ (8003cd0 <HAL_DMA_Abort+0x464>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d022      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a5f      	ldr	r2, [pc, #380]	@ (8003cd4 <HAL_DMA_Abort+0x468>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01d      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003cd8 <HAL_DMA_Abort+0x46c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d018      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5c      	ldr	r2, [pc, #368]	@ (8003cdc <HAL_DMA_Abort+0x470>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a5b      	ldr	r2, [pc, #364]	@ (8003ce0 <HAL_DMA_Abort+0x474>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a59      	ldr	r2, [pc, #356]	@ (8003ce4 <HAL_DMA_Abort+0x478>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a58      	ldr	r2, [pc, #352]	@ (8003ce8 <HAL_DMA_Abort+0x47c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMA_Abort+0x32a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a56      	ldr	r2, [pc, #344]	@ (8003cec <HAL_DMA_Abort+0x480>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d108      	bne.n	8003ba8 <HAL_DMA_Abort+0x33c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e007      	b.n	8003bb8 <HAL_DMA_Abort+0x34c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bb8:	e013      	b.n	8003be2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bba:	f7fe fecd 	bl	8002958 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d90c      	bls.n	8003be2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e12d      	b.n	8003e3e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e5      	bne.n	8003bba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb0 <HAL_DMA_Abort+0x444>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d04a      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb4 <HAL_DMA_Abort+0x448>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d045      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb8 <HAL_DMA_Abort+0x44c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d040      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2a      	ldr	r2, [pc, #168]	@ (8003cbc <HAL_DMA_Abort+0x450>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d03b      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a29      	ldr	r2, [pc, #164]	@ (8003cc0 <HAL_DMA_Abort+0x454>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d036      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a27      	ldr	r2, [pc, #156]	@ (8003cc4 <HAL_DMA_Abort+0x458>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a26      	ldr	r2, [pc, #152]	@ (8003cc8 <HAL_DMA_Abort+0x45c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02c      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a24      	ldr	r2, [pc, #144]	@ (8003ccc <HAL_DMA_Abort+0x460>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d027      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a23      	ldr	r2, [pc, #140]	@ (8003cd0 <HAL_DMA_Abort+0x464>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <HAL_DMA_Abort+0x468>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a20      	ldr	r2, [pc, #128]	@ (8003cd8 <HAL_DMA_Abort+0x46c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1e      	ldr	r2, [pc, #120]	@ (8003cdc <HAL_DMA_Abort+0x470>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce0 <HAL_DMA_Abort+0x474>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <HAL_DMA_Abort+0x478>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce8 <HAL_DMA_Abort+0x47c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_DMA_Abort+0x422>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a18      	ldr	r2, [pc, #96]	@ (8003cec <HAL_DMA_Abort+0x480>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_DMA_Abort+0x426>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_DMA_Abort+0x428>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02b      	beq.n	8003cf0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	223f      	movs	r2, #63	@ 0x3f
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	e02a      	b.n	8003d06 <HAL_DMA_Abort+0x49a>
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2201      	movs	r2, #1
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4f      	ldr	r2, [pc, #316]	@ (8003e48 <HAL_DMA_Abort+0x5dc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d072      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a4d      	ldr	r2, [pc, #308]	@ (8003e4c <HAL_DMA_Abort+0x5e0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d06d      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4c      	ldr	r2, [pc, #304]	@ (8003e50 <HAL_DMA_Abort+0x5e4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d068      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a4a      	ldr	r2, [pc, #296]	@ (8003e54 <HAL_DMA_Abort+0x5e8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d063      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a49      	ldr	r2, [pc, #292]	@ (8003e58 <HAL_DMA_Abort+0x5ec>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d05e      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a47      	ldr	r2, [pc, #284]	@ (8003e5c <HAL_DMA_Abort+0x5f0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d059      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a46      	ldr	r2, [pc, #280]	@ (8003e60 <HAL_DMA_Abort+0x5f4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d054      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a44      	ldr	r2, [pc, #272]	@ (8003e64 <HAL_DMA_Abort+0x5f8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04f      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a43      	ldr	r2, [pc, #268]	@ (8003e68 <HAL_DMA_Abort+0x5fc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d04a      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a41      	ldr	r2, [pc, #260]	@ (8003e6c <HAL_DMA_Abort+0x600>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d045      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	@ (8003e70 <HAL_DMA_Abort+0x604>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d040      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3e      	ldr	r2, [pc, #248]	@ (8003e74 <HAL_DMA_Abort+0x608>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d03b      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3d      	ldr	r2, [pc, #244]	@ (8003e78 <HAL_DMA_Abort+0x60c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d036      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e7c <HAL_DMA_Abort+0x610>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3a      	ldr	r2, [pc, #232]	@ (8003e80 <HAL_DMA_Abort+0x614>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d02c      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a38      	ldr	r2, [pc, #224]	@ (8003e84 <HAL_DMA_Abort+0x618>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d027      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a37      	ldr	r2, [pc, #220]	@ (8003e88 <HAL_DMA_Abort+0x61c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a35      	ldr	r2, [pc, #212]	@ (8003e8c <HAL_DMA_Abort+0x620>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a34      	ldr	r2, [pc, #208]	@ (8003e90 <HAL_DMA_Abort+0x624>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a32      	ldr	r2, [pc, #200]	@ (8003e94 <HAL_DMA_Abort+0x628>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a31      	ldr	r2, [pc, #196]	@ (8003e98 <HAL_DMA_Abort+0x62c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8003e9c <HAL_DMA_Abort+0x630>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea0 <HAL_DMA_Abort+0x634>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_Abort+0x58a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea4 <HAL_DMA_Abort+0x638>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA_Abort+0x58e>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_DMA_Abort+0x590>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e08:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e20:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e2a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40020010 	.word	0x40020010
 8003e4c:	40020028 	.word	0x40020028
 8003e50:	40020040 	.word	0x40020040
 8003e54:	40020058 	.word	0x40020058
 8003e58:	40020070 	.word	0x40020070
 8003e5c:	40020088 	.word	0x40020088
 8003e60:	400200a0 	.word	0x400200a0
 8003e64:	400200b8 	.word	0x400200b8
 8003e68:	40020410 	.word	0x40020410
 8003e6c:	40020428 	.word	0x40020428
 8003e70:	40020440 	.word	0x40020440
 8003e74:	40020458 	.word	0x40020458
 8003e78:	40020470 	.word	0x40020470
 8003e7c:	40020488 	.word	0x40020488
 8003e80:	400204a0 	.word	0x400204a0
 8003e84:	400204b8 	.word	0x400204b8
 8003e88:	58025408 	.word	0x58025408
 8003e8c:	5802541c 	.word	0x5802541c
 8003e90:	58025430 	.word	0x58025430
 8003e94:	58025444 	.word	0x58025444
 8003e98:	58025458 	.word	0x58025458
 8003e9c:	5802546c 	.word	0x5802546c
 8003ea0:	58025480 	.word	0x58025480
 8003ea4:	58025494 	.word	0x58025494

08003ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e237      	b.n	800432a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2280      	movs	r2, #128	@ 0x80
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e22c      	b.n	800432a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5c      	ldr	r2, [pc, #368]	@ (8004048 <HAL_DMA_Abort_IT+0x1a0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d04a      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5b      	ldr	r2, [pc, #364]	@ (800404c <HAL_DMA_Abort_IT+0x1a4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d045      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a59      	ldr	r2, [pc, #356]	@ (8004050 <HAL_DMA_Abort_IT+0x1a8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d040      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a58      	ldr	r2, [pc, #352]	@ (8004054 <HAL_DMA_Abort_IT+0x1ac>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d03b      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a56      	ldr	r2, [pc, #344]	@ (8004058 <HAL_DMA_Abort_IT+0x1b0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d036      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a55      	ldr	r2, [pc, #340]	@ (800405c <HAL_DMA_Abort_IT+0x1b4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d031      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a53      	ldr	r2, [pc, #332]	@ (8004060 <HAL_DMA_Abort_IT+0x1b8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d02c      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a52      	ldr	r2, [pc, #328]	@ (8004064 <HAL_DMA_Abort_IT+0x1bc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d027      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a50      	ldr	r2, [pc, #320]	@ (8004068 <HAL_DMA_Abort_IT+0x1c0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d022      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a4f      	ldr	r2, [pc, #316]	@ (800406c <HAL_DMA_Abort_IT+0x1c4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d01d      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a4d      	ldr	r2, [pc, #308]	@ (8004070 <HAL_DMA_Abort_IT+0x1c8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d018      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4c      	ldr	r2, [pc, #304]	@ (8004074 <HAL_DMA_Abort_IT+0x1cc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d013      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8004078 <HAL_DMA_Abort_IT+0x1d0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00e      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a49      	ldr	r2, [pc, #292]	@ (800407c <HAL_DMA_Abort_IT+0x1d4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d009      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a47      	ldr	r2, [pc, #284]	@ (8004080 <HAL_DMA_Abort_IT+0x1d8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d004      	beq.n	8003f70 <HAL_DMA_Abort_IT+0xc8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a46      	ldr	r2, [pc, #280]	@ (8004084 <HAL_DMA_Abort_IT+0x1dc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d101      	bne.n	8003f74 <HAL_DMA_Abort_IT+0xcc>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_DMA_Abort_IT+0xce>
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8086 	beq.w	8004088 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a2f      	ldr	r2, [pc, #188]	@ (8004048 <HAL_DMA_Abort_IT+0x1a0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d04a      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a2e      	ldr	r2, [pc, #184]	@ (800404c <HAL_DMA_Abort_IT+0x1a4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d045      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004050 <HAL_DMA_Abort_IT+0x1a8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d040      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <HAL_DMA_Abort_IT+0x1ac>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d03b      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a29      	ldr	r2, [pc, #164]	@ (8004058 <HAL_DMA_Abort_IT+0x1b0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d036      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a28      	ldr	r2, [pc, #160]	@ (800405c <HAL_DMA_Abort_IT+0x1b4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d031      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <HAL_DMA_Abort_IT+0x1b8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d02c      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <HAL_DMA_Abort_IT+0x1bc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d027      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	@ (8004068 <HAL_DMA_Abort_IT+0x1c0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_DMA_Abort_IT+0x1c4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d01d      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a20      	ldr	r2, [pc, #128]	@ (8004070 <HAL_DMA_Abort_IT+0x1c8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <HAL_DMA_Abort_IT+0x1cc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1d      	ldr	r2, [pc, #116]	@ (8004078 <HAL_DMA_Abort_IT+0x1d0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <HAL_DMA_Abort_IT+0x1d4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1a      	ldr	r2, [pc, #104]	@ (8004080 <HAL_DMA_Abort_IT+0x1d8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_DMA_Abort_IT+0x17c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a19      	ldr	r2, [pc, #100]	@ (8004084 <HAL_DMA_Abort_IT+0x1dc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <HAL_DMA_Abort_IT+0x18e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e178      	b.n	8004328 <HAL_DMA_Abort_IT+0x480>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e16f      	b.n	8004328 <HAL_DMA_Abort_IT+0x480>
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 020e 	bic.w	r2, r2, #14
 8004096:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6c      	ldr	r2, [pc, #432]	@ (8004250 <HAL_DMA_Abort_IT+0x3a8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04a      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004254 <HAL_DMA_Abort_IT+0x3ac>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d045      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a69      	ldr	r2, [pc, #420]	@ (8004258 <HAL_DMA_Abort_IT+0x3b0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d040      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a68      	ldr	r2, [pc, #416]	@ (800425c <HAL_DMA_Abort_IT+0x3b4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d03b      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a66      	ldr	r2, [pc, #408]	@ (8004260 <HAL_DMA_Abort_IT+0x3b8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d036      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a65      	ldr	r2, [pc, #404]	@ (8004264 <HAL_DMA_Abort_IT+0x3bc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d031      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a63      	ldr	r2, [pc, #396]	@ (8004268 <HAL_DMA_Abort_IT+0x3c0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02c      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a62      	ldr	r2, [pc, #392]	@ (800426c <HAL_DMA_Abort_IT+0x3c4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d027      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a60      	ldr	r2, [pc, #384]	@ (8004270 <HAL_DMA_Abort_IT+0x3c8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d022      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004274 <HAL_DMA_Abort_IT+0x3cc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d01d      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a5d      	ldr	r2, [pc, #372]	@ (8004278 <HAL_DMA_Abort_IT+0x3d0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d018      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a5c      	ldr	r2, [pc, #368]	@ (800427c <HAL_DMA_Abort_IT+0x3d4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a5a      	ldr	r2, [pc, #360]	@ (8004280 <HAL_DMA_Abort_IT+0x3d8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a59      	ldr	r2, [pc, #356]	@ (8004284 <HAL_DMA_Abort_IT+0x3dc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a57      	ldr	r2, [pc, #348]	@ (8004288 <HAL_DMA_Abort_IT+0x3e0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_DMA_Abort_IT+0x290>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a56      	ldr	r2, [pc, #344]	@ (800428c <HAL_DMA_Abort_IT+0x3e4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d108      	bne.n	800414a <HAL_DMA_Abort_IT+0x2a2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e007      	b.n	800415a <HAL_DMA_Abort_IT+0x2b2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3c      	ldr	r2, [pc, #240]	@ (8004250 <HAL_DMA_Abort_IT+0x3a8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d072      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a3a      	ldr	r2, [pc, #232]	@ (8004254 <HAL_DMA_Abort_IT+0x3ac>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d06d      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a39      	ldr	r2, [pc, #228]	@ (8004258 <HAL_DMA_Abort_IT+0x3b0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d068      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a37      	ldr	r2, [pc, #220]	@ (800425c <HAL_DMA_Abort_IT+0x3b4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d063      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a36      	ldr	r2, [pc, #216]	@ (8004260 <HAL_DMA_Abort_IT+0x3b8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d05e      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a34      	ldr	r2, [pc, #208]	@ (8004264 <HAL_DMA_Abort_IT+0x3bc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d059      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a33      	ldr	r2, [pc, #204]	@ (8004268 <HAL_DMA_Abort_IT+0x3c0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d054      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a31      	ldr	r2, [pc, #196]	@ (800426c <HAL_DMA_Abort_IT+0x3c4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d04f      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a30      	ldr	r2, [pc, #192]	@ (8004270 <HAL_DMA_Abort_IT+0x3c8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004274 <HAL_DMA_Abort_IT+0x3cc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004278 <HAL_DMA_Abort_IT+0x3d0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2b      	ldr	r2, [pc, #172]	@ (800427c <HAL_DMA_Abort_IT+0x3d4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004280 <HAL_DMA_Abort_IT+0x3d8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a28      	ldr	r2, [pc, #160]	@ (8004284 <HAL_DMA_Abort_IT+0x3dc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a27      	ldr	r2, [pc, #156]	@ (8004288 <HAL_DMA_Abort_IT+0x3e0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a25      	ldr	r2, [pc, #148]	@ (800428c <HAL_DMA_Abort_IT+0x3e4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a24      	ldr	r2, [pc, #144]	@ (8004290 <HAL_DMA_Abort_IT+0x3e8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a22      	ldr	r2, [pc, #136]	@ (8004294 <HAL_DMA_Abort_IT+0x3ec>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a21      	ldr	r2, [pc, #132]	@ (8004298 <HAL_DMA_Abort_IT+0x3f0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1f      	ldr	r2, [pc, #124]	@ (800429c <HAL_DMA_Abort_IT+0x3f4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1e      	ldr	r2, [pc, #120]	@ (80042a0 <HAL_DMA_Abort_IT+0x3f8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1c      	ldr	r2, [pc, #112]	@ (80042a4 <HAL_DMA_Abort_IT+0x3fc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	@ (80042a8 <HAL_DMA_Abort_IT+0x400>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_Abort_IT+0x3a2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a19      	ldr	r2, [pc, #100]	@ (80042ac <HAL_DMA_Abort_IT+0x404>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d132      	bne.n	80042b0 <HAL_DMA_Abort_IT+0x408>
 800424a:	2301      	movs	r3, #1
 800424c:	e031      	b.n	80042b2 <HAL_DMA_Abort_IT+0x40a>
 800424e:	bf00      	nop
 8004250:	40020010 	.word	0x40020010
 8004254:	40020028 	.word	0x40020028
 8004258:	40020040 	.word	0x40020040
 800425c:	40020058 	.word	0x40020058
 8004260:	40020070 	.word	0x40020070
 8004264:	40020088 	.word	0x40020088
 8004268:	400200a0 	.word	0x400200a0
 800426c:	400200b8 	.word	0x400200b8
 8004270:	40020410 	.word	0x40020410
 8004274:	40020428 	.word	0x40020428
 8004278:	40020440 	.word	0x40020440
 800427c:	40020458 	.word	0x40020458
 8004280:	40020470 	.word	0x40020470
 8004284:	40020488 	.word	0x40020488
 8004288:	400204a0 	.word	0x400204a0
 800428c:	400204b8 	.word	0x400204b8
 8004290:	58025408 	.word	0x58025408
 8004294:	5802541c 	.word	0x5802541c
 8004298:	58025430 	.word	0x58025430
 800429c:	58025444 	.word	0x58025444
 80042a0:	58025458 	.word	0x58025458
 80042a4:	5802546c 	.word	0x5802546c
 80042a8:	58025480 	.word	0x58025480
 80042ac:	58025494 	.word	0x58025494
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d028      	beq.n	8004308 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004306:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop

08004334 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	@ 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004340:	4b67      	ldr	r3, [pc, #412]	@ (80044e0 <HAL_DMA_IRQHandler+0x1ac>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a67      	ldr	r2, [pc, #412]	@ (80044e4 <HAL_DMA_IRQHandler+0x1b0>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5f      	ldr	r2, [pc, #380]	@ (80044e8 <HAL_DMA_IRQHandler+0x1b4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d04a      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5d      	ldr	r2, [pc, #372]	@ (80044ec <HAL_DMA_IRQHandler+0x1b8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d045      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5c      	ldr	r2, [pc, #368]	@ (80044f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d040      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a5a      	ldr	r2, [pc, #360]	@ (80044f4 <HAL_DMA_IRQHandler+0x1c0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d03b      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a59      	ldr	r2, [pc, #356]	@ (80044f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d036      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a57      	ldr	r2, [pc, #348]	@ (80044fc <HAL_DMA_IRQHandler+0x1c8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d031      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a56      	ldr	r2, [pc, #344]	@ (8004500 <HAL_DMA_IRQHandler+0x1cc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d02c      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a54      	ldr	r2, [pc, #336]	@ (8004504 <HAL_DMA_IRQHandler+0x1d0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d027      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a53      	ldr	r2, [pc, #332]	@ (8004508 <HAL_DMA_IRQHandler+0x1d4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d022      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a51      	ldr	r2, [pc, #324]	@ (800450c <HAL_DMA_IRQHandler+0x1d8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01d      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a50      	ldr	r2, [pc, #320]	@ (8004510 <HAL_DMA_IRQHandler+0x1dc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004514 <HAL_DMA_IRQHandler+0x1e0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004518 <HAL_DMA_IRQHandler+0x1e4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a4b      	ldr	r2, [pc, #300]	@ (800451c <HAL_DMA_IRQHandler+0x1e8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004520 <HAL_DMA_IRQHandler+0x1ec>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_DMA_IRQHandler+0xd2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a48      	ldr	r2, [pc, #288]	@ (8004524 <HAL_DMA_IRQHandler+0x1f0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d101      	bne.n	800440a <HAL_DMA_IRQHandler+0xd6>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_DMA_IRQHandler+0xd8>
 800440a:	2300      	movs	r3, #0
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 842b 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2208      	movs	r2, #8
 800441c:	409a      	lsls	r2, r3
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80a2 	beq.w	800456c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2e      	ldr	r2, [pc, #184]	@ (80044e8 <HAL_DMA_IRQHandler+0x1b4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d04a      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2d      	ldr	r2, [pc, #180]	@ (80044ec <HAL_DMA_IRQHandler+0x1b8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d045      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2b      	ldr	r2, [pc, #172]	@ (80044f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d040      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2a      	ldr	r2, [pc, #168]	@ (80044f4 <HAL_DMA_IRQHandler+0x1c0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d03b      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d036      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a27      	ldr	r2, [pc, #156]	@ (80044fc <HAL_DMA_IRQHandler+0x1c8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d031      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a25      	ldr	r2, [pc, #148]	@ (8004500 <HAL_DMA_IRQHandler+0x1cc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d02c      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a24      	ldr	r2, [pc, #144]	@ (8004504 <HAL_DMA_IRQHandler+0x1d0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d027      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a22      	ldr	r2, [pc, #136]	@ (8004508 <HAL_DMA_IRQHandler+0x1d4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d022      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a21      	ldr	r2, [pc, #132]	@ (800450c <HAL_DMA_IRQHandler+0x1d8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d01d      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1f      	ldr	r2, [pc, #124]	@ (8004510 <HAL_DMA_IRQHandler+0x1dc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d018      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <HAL_DMA_IRQHandler+0x1e0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d013      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004518 <HAL_DMA_IRQHandler+0x1e4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1b      	ldr	r2, [pc, #108]	@ (800451c <HAL_DMA_IRQHandler+0x1e8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d009      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <HAL_DMA_IRQHandler+0x1ec>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x194>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <HAL_DMA_IRQHandler+0x1f0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d12f      	bne.n	8004528 <HAL_DMA_IRQHandler+0x1f4>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	e02e      	b.n	800453c <HAL_DMA_IRQHandler+0x208>
 80044de:	bf00      	nop
 80044e0:	24000004 	.word	0x24000004
 80044e4:	1b4e81b5 	.word	0x1b4e81b5
 80044e8:	40020010 	.word	0x40020010
 80044ec:	40020028 	.word	0x40020028
 80044f0:	40020040 	.word	0x40020040
 80044f4:	40020058 	.word	0x40020058
 80044f8:	40020070 	.word	0x40020070
 80044fc:	40020088 	.word	0x40020088
 8004500:	400200a0 	.word	0x400200a0
 8004504:	400200b8 	.word	0x400200b8
 8004508:	40020410 	.word	0x40020410
 800450c:	40020428 	.word	0x40020428
 8004510:	40020440 	.word	0x40020440
 8004514:	40020458 	.word	0x40020458
 8004518:	40020470 	.word	0x40020470
 800451c:	40020488 	.word	0x40020488
 8004520:	400204a0 	.word	0x400204a0
 8004524:	400204b8 	.word	0x400204b8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d015      	beq.n	800456c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0204 	bic.w	r2, r2, #4
 800454e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2208      	movs	r2, #8
 800455a:	409a      	lsls	r2, r3
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	f043 0201 	orr.w	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	fa22 f303 	lsr.w	r3, r2, r3
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d06e      	beq.n	8004660 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a69      	ldr	r2, [pc, #420]	@ (800472c <HAL_DMA_IRQHandler+0x3f8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d04a      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a67      	ldr	r2, [pc, #412]	@ (8004730 <HAL_DMA_IRQHandler+0x3fc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d045      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a66      	ldr	r2, [pc, #408]	@ (8004734 <HAL_DMA_IRQHandler+0x400>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d040      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a64      	ldr	r2, [pc, #400]	@ (8004738 <HAL_DMA_IRQHandler+0x404>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d03b      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a63      	ldr	r2, [pc, #396]	@ (800473c <HAL_DMA_IRQHandler+0x408>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d036      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a61      	ldr	r2, [pc, #388]	@ (8004740 <HAL_DMA_IRQHandler+0x40c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d031      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a60      	ldr	r2, [pc, #384]	@ (8004744 <HAL_DMA_IRQHandler+0x410>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d02c      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004748 <HAL_DMA_IRQHandler+0x414>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d027      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a5d      	ldr	r2, [pc, #372]	@ (800474c <HAL_DMA_IRQHandler+0x418>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a5b      	ldr	r2, [pc, #364]	@ (8004750 <HAL_DMA_IRQHandler+0x41c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004754 <HAL_DMA_IRQHandler+0x420>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a58      	ldr	r2, [pc, #352]	@ (8004758 <HAL_DMA_IRQHandler+0x424>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a57      	ldr	r2, [pc, #348]	@ (800475c <HAL_DMA_IRQHandler+0x428>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a55      	ldr	r2, [pc, #340]	@ (8004760 <HAL_DMA_IRQHandler+0x42c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a54      	ldr	r2, [pc, #336]	@ (8004764 <HAL_DMA_IRQHandler+0x430>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_DMA_IRQHandler+0x2ee>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a52      	ldr	r2, [pc, #328]	@ (8004768 <HAL_DMA_IRQHandler+0x434>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d10a      	bne.n	8004638 <HAL_DMA_IRQHandler+0x304>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e003      	b.n	8004640 <HAL_DMA_IRQHandler+0x30c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00d      	beq.n	8004660 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2201      	movs	r2, #1
 800464e:	409a      	lsls	r2, r3
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004658:	f043 0202 	orr.w	r2, r3, #2
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	2204      	movs	r2, #4
 800466a:	409a      	lsls	r2, r3
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 808f 	beq.w	8004794 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2c      	ldr	r2, [pc, #176]	@ (800472c <HAL_DMA_IRQHandler+0x3f8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04a      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a2a      	ldr	r2, [pc, #168]	@ (8004730 <HAL_DMA_IRQHandler+0x3fc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d045      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a29      	ldr	r2, [pc, #164]	@ (8004734 <HAL_DMA_IRQHandler+0x400>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d040      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a27      	ldr	r2, [pc, #156]	@ (8004738 <HAL_DMA_IRQHandler+0x404>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d03b      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a26      	ldr	r2, [pc, #152]	@ (800473c <HAL_DMA_IRQHandler+0x408>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d036      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a24      	ldr	r2, [pc, #144]	@ (8004740 <HAL_DMA_IRQHandler+0x40c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a23      	ldr	r2, [pc, #140]	@ (8004744 <HAL_DMA_IRQHandler+0x410>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02c      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a21      	ldr	r2, [pc, #132]	@ (8004748 <HAL_DMA_IRQHandler+0x414>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a20      	ldr	r2, [pc, #128]	@ (800474c <HAL_DMA_IRQHandler+0x418>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004750 <HAL_DMA_IRQHandler+0x41c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1d      	ldr	r2, [pc, #116]	@ (8004754 <HAL_DMA_IRQHandler+0x420>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004758 <HAL_DMA_IRQHandler+0x424>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1a      	ldr	r2, [pc, #104]	@ (800475c <HAL_DMA_IRQHandler+0x428>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_DMA_IRQHandler+0x42c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a17      	ldr	r2, [pc, #92]	@ (8004764 <HAL_DMA_IRQHandler+0x430>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_DMA_IRQHandler+0x3e2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a15      	ldr	r2, [pc, #84]	@ (8004768 <HAL_DMA_IRQHandler+0x434>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d12a      	bne.n	800476c <HAL_DMA_IRQHandler+0x438>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e023      	b.n	8004774 <HAL_DMA_IRQHandler+0x440>
 800472c:	40020010 	.word	0x40020010
 8004730:	40020028 	.word	0x40020028
 8004734:	40020040 	.word	0x40020040
 8004738:	40020058 	.word	0x40020058
 800473c:	40020070 	.word	0x40020070
 8004740:	40020088 	.word	0x40020088
 8004744:	400200a0 	.word	0x400200a0
 8004748:	400200b8 	.word	0x400200b8
 800474c:	40020410 	.word	0x40020410
 8004750:	40020428 	.word	0x40020428
 8004754:	40020440 	.word	0x40020440
 8004758:	40020458 	.word	0x40020458
 800475c:	40020470 	.word	0x40020470
 8004760:	40020488 	.word	0x40020488
 8004764:	400204a0 	.word	0x400204a0
 8004768:	400204b8 	.word	0x400204b8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00d      	beq.n	8004794 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2204      	movs	r2, #4
 8004782:	409a      	lsls	r2, r3
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478c:	f043 0204 	orr.w	r2, r3, #4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	2210      	movs	r2, #16
 800479e:	409a      	lsls	r2, r3
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a6 	beq.w	80048f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a85      	ldr	r2, [pc, #532]	@ (80049c4 <HAL_DMA_IRQHandler+0x690>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d04a      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a83      	ldr	r2, [pc, #524]	@ (80049c8 <HAL_DMA_IRQHandler+0x694>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d045      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a82      	ldr	r2, [pc, #520]	@ (80049cc <HAL_DMA_IRQHandler+0x698>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d040      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a80      	ldr	r2, [pc, #512]	@ (80049d0 <HAL_DMA_IRQHandler+0x69c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d03b      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7f      	ldr	r2, [pc, #508]	@ (80049d4 <HAL_DMA_IRQHandler+0x6a0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d036      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a7d      	ldr	r2, [pc, #500]	@ (80049d8 <HAL_DMA_IRQHandler+0x6a4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7c      	ldr	r2, [pc, #496]	@ (80049dc <HAL_DMA_IRQHandler+0x6a8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02c      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a7a      	ldr	r2, [pc, #488]	@ (80049e0 <HAL_DMA_IRQHandler+0x6ac>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d027      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a79      	ldr	r2, [pc, #484]	@ (80049e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a77      	ldr	r2, [pc, #476]	@ (80049e8 <HAL_DMA_IRQHandler+0x6b4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a76      	ldr	r2, [pc, #472]	@ (80049ec <HAL_DMA_IRQHandler+0x6b8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a74      	ldr	r2, [pc, #464]	@ (80049f0 <HAL_DMA_IRQHandler+0x6bc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a73      	ldr	r2, [pc, #460]	@ (80049f4 <HAL_DMA_IRQHandler+0x6c0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a71      	ldr	r2, [pc, #452]	@ (80049f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a70      	ldr	r2, [pc, #448]	@ (80049fc <HAL_DMA_IRQHandler+0x6c8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_IRQHandler+0x516>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a6e      	ldr	r2, [pc, #440]	@ (8004a00 <HAL_DMA_IRQHandler+0x6cc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d10a      	bne.n	8004860 <HAL_DMA_IRQHandler+0x52c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e009      	b.n	8004874 <HAL_DMA_IRQHandler+0x540>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d03e      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	2210      	movs	r2, #16
 8004882:	409a      	lsls	r2, r3
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d018      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d108      	bne.n	80048b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d024      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
 80048b4:	e01f      	b.n	80048f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01b      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
 80048c6:	e016      	b.n	80048f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0208 	bic.w	r2, r2, #8
 80048e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	2220      	movs	r2, #32
 8004900:	409a      	lsls	r2, r3
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8110 	beq.w	8004b2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2c      	ldr	r2, [pc, #176]	@ (80049c4 <HAL_DMA_IRQHandler+0x690>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d04a      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2b      	ldr	r2, [pc, #172]	@ (80049c8 <HAL_DMA_IRQHandler+0x694>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d045      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a29      	ldr	r2, [pc, #164]	@ (80049cc <HAL_DMA_IRQHandler+0x698>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d040      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <HAL_DMA_IRQHandler+0x69c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d03b      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a26      	ldr	r2, [pc, #152]	@ (80049d4 <HAL_DMA_IRQHandler+0x6a0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d036      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a25      	ldr	r2, [pc, #148]	@ (80049d8 <HAL_DMA_IRQHandler+0x6a4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d031      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a23      	ldr	r2, [pc, #140]	@ (80049dc <HAL_DMA_IRQHandler+0x6a8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d02c      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a22      	ldr	r2, [pc, #136]	@ (80049e0 <HAL_DMA_IRQHandler+0x6ac>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d027      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a20      	ldr	r2, [pc, #128]	@ (80049e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d022      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1f      	ldr	r2, [pc, #124]	@ (80049e8 <HAL_DMA_IRQHandler+0x6b4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d01d      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1d      	ldr	r2, [pc, #116]	@ (80049ec <HAL_DMA_IRQHandler+0x6b8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d018      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1c      	ldr	r2, [pc, #112]	@ (80049f0 <HAL_DMA_IRQHandler+0x6bc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1a      	ldr	r2, [pc, #104]	@ (80049f4 <HAL_DMA_IRQHandler+0x6c0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a19      	ldr	r2, [pc, #100]	@ (80049f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a17      	ldr	r2, [pc, #92]	@ (80049fc <HAL_DMA_IRQHandler+0x6c8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_DMA_IRQHandler+0x678>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a16      	ldr	r2, [pc, #88]	@ (8004a00 <HAL_DMA_IRQHandler+0x6cc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d12b      	bne.n	8004a04 <HAL_DMA_IRQHandler+0x6d0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	e02a      	b.n	8004a18 <HAL_DMA_IRQHandler+0x6e4>
 80049c2:	bf00      	nop
 80049c4:	40020010 	.word	0x40020010
 80049c8:	40020028 	.word	0x40020028
 80049cc:	40020040 	.word	0x40020040
 80049d0:	40020058 	.word	0x40020058
 80049d4:	40020070 	.word	0x40020070
 80049d8:	40020088 	.word	0x40020088
 80049dc:	400200a0 	.word	0x400200a0
 80049e0:	400200b8 	.word	0x400200b8
 80049e4:	40020410 	.word	0x40020410
 80049e8:	40020428 	.word	0x40020428
 80049ec:	40020440 	.word	0x40020440
 80049f0:	40020458 	.word	0x40020458
 80049f4:	40020470 	.word	0x40020470
 80049f8:	40020488 	.word	0x40020488
 80049fc:	400204a0 	.word	0x400204a0
 8004a00:	400204b8 	.word	0x400204b8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8087 	beq.w	8004b2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2220      	movs	r2, #32
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d139      	bne.n	8004aae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0216 	bic.w	r2, r2, #22
 8004a48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d103      	bne.n	8004a6a <HAL_DMA_IRQHandler+0x736>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0208 	bic.w	r2, r2, #8
 8004a78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	223f      	movs	r2, #63	@ 0x3f
 8004a84:	409a      	lsls	r2, r3
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 834a 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
          }
          return;
 8004aac:	e344      	b.n	8005138 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d018      	beq.n	8004aee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d108      	bne.n	8004adc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d02c      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
 8004ada:	e027      	b.n	8004b2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d023      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
 8004aec:	e01e      	b.n	8004b2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10f      	bne.n	8004b1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0210 	bic.w	r2, r2, #16
 8004b0a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8306 	beq.w	8005142 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8088 	beq.w	8004c54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2204      	movs	r2, #4
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a7a      	ldr	r2, [pc, #488]	@ (8004d3c <HAL_DMA_IRQHandler+0xa08>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d04a      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a79      	ldr	r2, [pc, #484]	@ (8004d40 <HAL_DMA_IRQHandler+0xa0c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d045      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a77      	ldr	r2, [pc, #476]	@ (8004d44 <HAL_DMA_IRQHandler+0xa10>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d040      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a76      	ldr	r2, [pc, #472]	@ (8004d48 <HAL_DMA_IRQHandler+0xa14>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d03b      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a74      	ldr	r2, [pc, #464]	@ (8004d4c <HAL_DMA_IRQHandler+0xa18>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d036      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a73      	ldr	r2, [pc, #460]	@ (8004d50 <HAL_DMA_IRQHandler+0xa1c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d031      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a71      	ldr	r2, [pc, #452]	@ (8004d54 <HAL_DMA_IRQHandler+0xa20>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d02c      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a70      	ldr	r2, [pc, #448]	@ (8004d58 <HAL_DMA_IRQHandler+0xa24>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d027      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d5c <HAL_DMA_IRQHandler+0xa28>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d022      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6d      	ldr	r2, [pc, #436]	@ (8004d60 <HAL_DMA_IRQHandler+0xa2c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d01d      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d64 <HAL_DMA_IRQHandler+0xa30>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6a      	ldr	r2, [pc, #424]	@ (8004d68 <HAL_DMA_IRQHandler+0xa34>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a68      	ldr	r2, [pc, #416]	@ (8004d6c <HAL_DMA_IRQHandler+0xa38>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a67      	ldr	r2, [pc, #412]	@ (8004d70 <HAL_DMA_IRQHandler+0xa3c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a65      	ldr	r2, [pc, #404]	@ (8004d74 <HAL_DMA_IRQHandler+0xa40>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_DMA_IRQHandler+0x8b8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a64      	ldr	r2, [pc, #400]	@ (8004d78 <HAL_DMA_IRQHandler+0xa44>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <HAL_DMA_IRQHandler+0x8ca>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e007      	b.n	8004c0e <HAL_DMA_IRQHandler+0x8da>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d307      	bcc.n	8004c2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f2      	bne.n	8004c0e <HAL_DMA_IRQHandler+0x8da>
 8004c28:	e000      	b.n	8004c2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c42:	e003      	b.n	8004c4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8272 	beq.w	8005142 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
 8004c66:	e26c      	b.n	8005142 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a43      	ldr	r2, [pc, #268]	@ (8004d7c <HAL_DMA_IRQHandler+0xa48>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d022      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x984>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a42      	ldr	r2, [pc, #264]	@ (8004d80 <HAL_DMA_IRQHandler+0xa4c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d01d      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x984>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a40      	ldr	r2, [pc, #256]	@ (8004d84 <HAL_DMA_IRQHandler+0xa50>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d018      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x984>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d88 <HAL_DMA_IRQHandler+0xa54>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d013      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x984>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3d      	ldr	r2, [pc, #244]	@ (8004d8c <HAL_DMA_IRQHandler+0xa58>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00e      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x984>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8004d90 <HAL_DMA_IRQHandler+0xa5c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d009      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x984>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8004d94 <HAL_DMA_IRQHandler+0xa60>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x984>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a39      	ldr	r2, [pc, #228]	@ (8004d98 <HAL_DMA_IRQHandler+0xa64>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d101      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x988>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <HAL_DMA_IRQHandler+0x98a>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 823f 	beq.w	8005142 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80cd 	beq.w	8004e7c <HAL_DMA_IRQHandler+0xb48>
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80c7 	beq.w	8004e7c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d049      	beq.n	8004d9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8210 	beq.w	800513c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d24:	e20a      	b.n	800513c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8206 	beq.w	800513c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d38:	e200      	b.n	800513c <HAL_DMA_IRQHandler+0xe08>
 8004d3a:	bf00      	nop
 8004d3c:	40020010 	.word	0x40020010
 8004d40:	40020028 	.word	0x40020028
 8004d44:	40020040 	.word	0x40020040
 8004d48:	40020058 	.word	0x40020058
 8004d4c:	40020070 	.word	0x40020070
 8004d50:	40020088 	.word	0x40020088
 8004d54:	400200a0 	.word	0x400200a0
 8004d58:	400200b8 	.word	0x400200b8
 8004d5c:	40020410 	.word	0x40020410
 8004d60:	40020428 	.word	0x40020428
 8004d64:	40020440 	.word	0x40020440
 8004d68:	40020458 	.word	0x40020458
 8004d6c:	40020470 	.word	0x40020470
 8004d70:	40020488 	.word	0x40020488
 8004d74:	400204a0 	.word	0x400204a0
 8004d78:	400204b8 	.word	0x400204b8
 8004d7c:	58025408 	.word	0x58025408
 8004d80:	5802541c 	.word	0x5802541c
 8004d84:	58025430 	.word	0x58025430
 8004d88:	58025444 	.word	0x58025444
 8004d8c:	58025458 	.word	0x58025458
 8004d90:	5802546c 	.word	0x5802546c
 8004d94:	58025480 	.word	0x58025480
 8004d98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d160      	bne.n	8004e68 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7f      	ldr	r2, [pc, #508]	@ (8004fa8 <HAL_DMA_IRQHandler+0xc74>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d04a      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7d      	ldr	r2, [pc, #500]	@ (8004fac <HAL_DMA_IRQHandler+0xc78>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d045      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004fb0 <HAL_DMA_IRQHandler+0xc7c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d040      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a7a      	ldr	r2, [pc, #488]	@ (8004fb4 <HAL_DMA_IRQHandler+0xc80>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d03b      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a79      	ldr	r2, [pc, #484]	@ (8004fb8 <HAL_DMA_IRQHandler+0xc84>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d036      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a77      	ldr	r2, [pc, #476]	@ (8004fbc <HAL_DMA_IRQHandler+0xc88>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d031      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a76      	ldr	r2, [pc, #472]	@ (8004fc0 <HAL_DMA_IRQHandler+0xc8c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d02c      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a74      	ldr	r2, [pc, #464]	@ (8004fc4 <HAL_DMA_IRQHandler+0xc90>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d027      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a73      	ldr	r2, [pc, #460]	@ (8004fc8 <HAL_DMA_IRQHandler+0xc94>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d022      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a71      	ldr	r2, [pc, #452]	@ (8004fcc <HAL_DMA_IRQHandler+0xc98>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01d      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a70      	ldr	r2, [pc, #448]	@ (8004fd0 <HAL_DMA_IRQHandler+0xc9c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d018      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a6e      	ldr	r2, [pc, #440]	@ (8004fd4 <HAL_DMA_IRQHandler+0xca0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6d      	ldr	r2, [pc, #436]	@ (8004fd8 <HAL_DMA_IRQHandler+0xca4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fdc <HAL_DMA_IRQHandler+0xca8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6a      	ldr	r2, [pc, #424]	@ (8004fe0 <HAL_DMA_IRQHandler+0xcac>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_DMA_IRQHandler+0xb12>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a68      	ldr	r2, [pc, #416]	@ (8004fe4 <HAL_DMA_IRQHandler+0xcb0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d108      	bne.n	8004e58 <HAL_DMA_IRQHandler+0xb24>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0208 	bic.w	r2, r2, #8
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	e007      	b.n	8004e68 <HAL_DMA_IRQHandler+0xb34>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0204 	bic.w	r2, r2, #4
 8004e66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8165 	beq.w	800513c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e7a:	e15f      	b.n	800513c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2202      	movs	r2, #2
 8004e86:	409a      	lsls	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80c5 	beq.w	800501c <HAL_DMA_IRQHandler+0xce8>
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80bf 	beq.w	800501c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d018      	beq.n	8004eea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 813a 	beq.w	8005140 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed4:	e134      	b.n	8005140 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8130 	beq.w	8005140 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee8:	e12a      	b.n	8005140 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 8089 	bne.w	8005008 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa8 <HAL_DMA_IRQHandler+0xc74>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d04a      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a29      	ldr	r2, [pc, #164]	@ (8004fac <HAL_DMA_IRQHandler+0xc78>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d045      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a28      	ldr	r2, [pc, #160]	@ (8004fb0 <HAL_DMA_IRQHandler+0xc7c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d040      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a26      	ldr	r2, [pc, #152]	@ (8004fb4 <HAL_DMA_IRQHandler+0xc80>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d03b      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a25      	ldr	r2, [pc, #148]	@ (8004fb8 <HAL_DMA_IRQHandler+0xc84>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d036      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a23      	ldr	r2, [pc, #140]	@ (8004fbc <HAL_DMA_IRQHandler+0xc88>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d031      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a22      	ldr	r2, [pc, #136]	@ (8004fc0 <HAL_DMA_IRQHandler+0xc8c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d02c      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a20      	ldr	r2, [pc, #128]	@ (8004fc4 <HAL_DMA_IRQHandler+0xc90>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d027      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc8 <HAL_DMA_IRQHandler+0xc94>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <HAL_DMA_IRQHandler+0xc98>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01d      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd0 <HAL_DMA_IRQHandler+0xc9c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd4 <HAL_DMA_IRQHandler+0xca0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <HAL_DMA_IRQHandler+0xca4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a17      	ldr	r2, [pc, #92]	@ (8004fdc <HAL_DMA_IRQHandler+0xca8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a16      	ldr	r2, [pc, #88]	@ (8004fe0 <HAL_DMA_IRQHandler+0xcac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xc62>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a14      	ldr	r2, [pc, #80]	@ (8004fe4 <HAL_DMA_IRQHandler+0xcb0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d128      	bne.n	8004fe8 <HAL_DMA_IRQHandler+0xcb4>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0214 	bic.w	r2, r2, #20
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e027      	b.n	8004ff8 <HAL_DMA_IRQHandler+0xcc4>
 8004fa8:	40020010 	.word	0x40020010
 8004fac:	40020028 	.word	0x40020028
 8004fb0:	40020040 	.word	0x40020040
 8004fb4:	40020058 	.word	0x40020058
 8004fb8:	40020070 	.word	0x40020070
 8004fbc:	40020088 	.word	0x40020088
 8004fc0:	400200a0 	.word	0x400200a0
 8004fc4:	400200b8 	.word	0x400200b8
 8004fc8:	40020410 	.word	0x40020410
 8004fcc:	40020428 	.word	0x40020428
 8004fd0:	40020440 	.word	0x40020440
 8004fd4:	40020458 	.word	0x40020458
 8004fd8:	40020470 	.word	0x40020470
 8004fdc:	40020488 	.word	0x40020488
 8004fe0:	400204a0 	.word	0x400204a0
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 020a 	bic.w	r2, r2, #10
 8004ff6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8097 	beq.w	8005140 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800501a:	e091      	b.n	8005140 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2208      	movs	r2, #8
 8005026:	409a      	lsls	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8088 	beq.w	8005142 <HAL_DMA_IRQHandler+0xe0e>
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8082 	beq.w	8005142 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a41      	ldr	r2, [pc, #260]	@ (8005148 <HAL_DMA_IRQHandler+0xe14>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d04a      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3f      	ldr	r2, [pc, #252]	@ (800514c <HAL_DMA_IRQHandler+0xe18>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d045      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a3e      	ldr	r2, [pc, #248]	@ (8005150 <HAL_DMA_IRQHandler+0xe1c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d040      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3c      	ldr	r2, [pc, #240]	@ (8005154 <HAL_DMA_IRQHandler+0xe20>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d03b      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3b      	ldr	r2, [pc, #236]	@ (8005158 <HAL_DMA_IRQHandler+0xe24>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d036      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a39      	ldr	r2, [pc, #228]	@ (800515c <HAL_DMA_IRQHandler+0xe28>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d031      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a38      	ldr	r2, [pc, #224]	@ (8005160 <HAL_DMA_IRQHandler+0xe2c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d02c      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a36      	ldr	r2, [pc, #216]	@ (8005164 <HAL_DMA_IRQHandler+0xe30>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d027      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a35      	ldr	r2, [pc, #212]	@ (8005168 <HAL_DMA_IRQHandler+0xe34>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a33      	ldr	r2, [pc, #204]	@ (800516c <HAL_DMA_IRQHandler+0xe38>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a32      	ldr	r2, [pc, #200]	@ (8005170 <HAL_DMA_IRQHandler+0xe3c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a30      	ldr	r2, [pc, #192]	@ (8005174 <HAL_DMA_IRQHandler+0xe40>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005178 <HAL_DMA_IRQHandler+0xe44>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2d      	ldr	r2, [pc, #180]	@ (800517c <HAL_DMA_IRQHandler+0xe48>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005180 <HAL_DMA_IRQHandler+0xe4c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_DMA_IRQHandler+0xdaa>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005184 <HAL_DMA_IRQHandler+0xe50>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <HAL_DMA_IRQHandler+0xdbc>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 021c 	bic.w	r2, r2, #28
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e007      	b.n	8005100 <HAL_DMA_IRQHandler+0xdcc>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 020e 	bic.w	r2, r2, #14
 80050fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2201      	movs	r2, #1
 800510a:	409a      	lsls	r2, r3
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	4798      	blx	r3
 8005136:	e004      	b.n	8005142 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005138:	bf00      	nop
 800513a:	e002      	b.n	8005142 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800513c:	bf00      	nop
 800513e:	e000      	b.n	8005142 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005140:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005142:	3728      	adds	r7, #40	@ 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40020010 	.word	0x40020010
 800514c:	40020028 	.word	0x40020028
 8005150:	40020040 	.word	0x40020040
 8005154:	40020058 	.word	0x40020058
 8005158:	40020070 	.word	0x40020070
 800515c:	40020088 	.word	0x40020088
 8005160:	400200a0 	.word	0x400200a0
 8005164:	400200b8 	.word	0x400200b8
 8005168:	40020410 	.word	0x40020410
 800516c:	40020428 	.word	0x40020428
 8005170:	40020440 	.word	0x40020440
 8005174:	40020458 	.word	0x40020458
 8005178:	40020470 	.word	0x40020470
 800517c:	40020488 	.word	0x40020488
 8005180:	400204a0 	.word	0x400204a0
 8005184:	400204b8 	.word	0x400204b8

08005188 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7f      	ldr	r2, [pc, #508]	@ (80053bc <DMA_SetConfig+0x21c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d072      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a7d      	ldr	r2, [pc, #500]	@ (80053c0 <DMA_SetConfig+0x220>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d06d      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a7c      	ldr	r2, [pc, #496]	@ (80053c4 <DMA_SetConfig+0x224>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d068      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a7a      	ldr	r2, [pc, #488]	@ (80053c8 <DMA_SetConfig+0x228>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d063      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a79      	ldr	r2, [pc, #484]	@ (80053cc <DMA_SetConfig+0x22c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d05e      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a77      	ldr	r2, [pc, #476]	@ (80053d0 <DMA_SetConfig+0x230>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d059      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a76      	ldr	r2, [pc, #472]	@ (80053d4 <DMA_SetConfig+0x234>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d054      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a74      	ldr	r2, [pc, #464]	@ (80053d8 <DMA_SetConfig+0x238>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d04f      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a73      	ldr	r2, [pc, #460]	@ (80053dc <DMA_SetConfig+0x23c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d04a      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a71      	ldr	r2, [pc, #452]	@ (80053e0 <DMA_SetConfig+0x240>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d045      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a70      	ldr	r2, [pc, #448]	@ (80053e4 <DMA_SetConfig+0x244>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d040      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a6e      	ldr	r2, [pc, #440]	@ (80053e8 <DMA_SetConfig+0x248>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d03b      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6d      	ldr	r2, [pc, #436]	@ (80053ec <DMA_SetConfig+0x24c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d036      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a6b      	ldr	r2, [pc, #428]	@ (80053f0 <DMA_SetConfig+0x250>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d031      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6a      	ldr	r2, [pc, #424]	@ (80053f4 <DMA_SetConfig+0x254>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d02c      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a68      	ldr	r2, [pc, #416]	@ (80053f8 <DMA_SetConfig+0x258>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d027      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a67      	ldr	r2, [pc, #412]	@ (80053fc <DMA_SetConfig+0x25c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a65      	ldr	r2, [pc, #404]	@ (8005400 <DMA_SetConfig+0x260>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01d      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a64      	ldr	r2, [pc, #400]	@ (8005404 <DMA_SetConfig+0x264>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a62      	ldr	r2, [pc, #392]	@ (8005408 <DMA_SetConfig+0x268>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a61      	ldr	r2, [pc, #388]	@ (800540c <DMA_SetConfig+0x26c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a5f      	ldr	r2, [pc, #380]	@ (8005410 <DMA_SetConfig+0x270>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a5e      	ldr	r2, [pc, #376]	@ (8005414 <DMA_SetConfig+0x274>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005418 <DMA_SetConfig+0x278>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d101      	bne.n	80052ae <DMA_SetConfig+0x10e>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <DMA_SetConfig+0x110>
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a39      	ldr	r2, [pc, #228]	@ (80053bc <DMA_SetConfig+0x21c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d04a      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a38      	ldr	r2, [pc, #224]	@ (80053c0 <DMA_SetConfig+0x220>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d045      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a36      	ldr	r2, [pc, #216]	@ (80053c4 <DMA_SetConfig+0x224>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d040      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a35      	ldr	r2, [pc, #212]	@ (80053c8 <DMA_SetConfig+0x228>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d03b      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a33      	ldr	r2, [pc, #204]	@ (80053cc <DMA_SetConfig+0x22c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d036      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a32      	ldr	r2, [pc, #200]	@ (80053d0 <DMA_SetConfig+0x230>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d031      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a30      	ldr	r2, [pc, #192]	@ (80053d4 <DMA_SetConfig+0x234>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02c      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2f      	ldr	r2, [pc, #188]	@ (80053d8 <DMA_SetConfig+0x238>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d027      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2d      	ldr	r2, [pc, #180]	@ (80053dc <DMA_SetConfig+0x23c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2c      	ldr	r2, [pc, #176]	@ (80053e0 <DMA_SetConfig+0x240>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d01d      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2a      	ldr	r2, [pc, #168]	@ (80053e4 <DMA_SetConfig+0x244>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a29      	ldr	r2, [pc, #164]	@ (80053e8 <DMA_SetConfig+0x248>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a27      	ldr	r2, [pc, #156]	@ (80053ec <DMA_SetConfig+0x24c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <DMA_SetConfig+0x250>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a24      	ldr	r2, [pc, #144]	@ (80053f4 <DMA_SetConfig+0x254>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a23      	ldr	r2, [pc, #140]	@ (80053f8 <DMA_SetConfig+0x258>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d101      	bne.n	8005374 <DMA_SetConfig+0x1d4>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <DMA_SetConfig+0x1d6>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d059      	beq.n	800542e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	223f      	movs	r2, #63	@ 0x3f
 8005384:	409a      	lsls	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005398:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d138      	bne.n	800541c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053ba:	e086      	b.n	80054ca <DMA_SetConfig+0x32a>
 80053bc:	40020010 	.word	0x40020010
 80053c0:	40020028 	.word	0x40020028
 80053c4:	40020040 	.word	0x40020040
 80053c8:	40020058 	.word	0x40020058
 80053cc:	40020070 	.word	0x40020070
 80053d0:	40020088 	.word	0x40020088
 80053d4:	400200a0 	.word	0x400200a0
 80053d8:	400200b8 	.word	0x400200b8
 80053dc:	40020410 	.word	0x40020410
 80053e0:	40020428 	.word	0x40020428
 80053e4:	40020440 	.word	0x40020440
 80053e8:	40020458 	.word	0x40020458
 80053ec:	40020470 	.word	0x40020470
 80053f0:	40020488 	.word	0x40020488
 80053f4:	400204a0 	.word	0x400204a0
 80053f8:	400204b8 	.word	0x400204b8
 80053fc:	58025408 	.word	0x58025408
 8005400:	5802541c 	.word	0x5802541c
 8005404:	58025430 	.word	0x58025430
 8005408:	58025444 	.word	0x58025444
 800540c:	58025458 	.word	0x58025458
 8005410:	5802546c 	.word	0x5802546c
 8005414:	58025480 	.word	0x58025480
 8005418:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]
}
 800542c:	e04d      	b.n	80054ca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a29      	ldr	r2, [pc, #164]	@ (80054d8 <DMA_SetConfig+0x338>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <DMA_SetConfig+0x2de>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a27      	ldr	r2, [pc, #156]	@ (80054dc <DMA_SetConfig+0x33c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01d      	beq.n	800547e <DMA_SetConfig+0x2de>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a26      	ldr	r2, [pc, #152]	@ (80054e0 <DMA_SetConfig+0x340>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <DMA_SetConfig+0x2de>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a24      	ldr	r2, [pc, #144]	@ (80054e4 <DMA_SetConfig+0x344>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <DMA_SetConfig+0x2de>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a23      	ldr	r2, [pc, #140]	@ (80054e8 <DMA_SetConfig+0x348>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <DMA_SetConfig+0x2de>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a21      	ldr	r2, [pc, #132]	@ (80054ec <DMA_SetConfig+0x34c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <DMA_SetConfig+0x2de>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a20      	ldr	r2, [pc, #128]	@ (80054f0 <DMA_SetConfig+0x350>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <DMA_SetConfig+0x2de>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1e      	ldr	r2, [pc, #120]	@ (80054f4 <DMA_SetConfig+0x354>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d101      	bne.n	8005482 <DMA_SetConfig+0x2e2>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <DMA_SetConfig+0x2e4>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d020      	beq.n	80054ca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2201      	movs	r2, #1
 8005492:	409a      	lsls	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b40      	cmp	r3, #64	@ 0x40
 80054a6:	d108      	bne.n	80054ba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	60da      	str	r2, [r3, #12]
}
 80054b8:	e007      	b.n	80054ca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	60da      	str	r2, [r3, #12]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	58025408 	.word	0x58025408
 80054dc:	5802541c 	.word	0x5802541c
 80054e0:	58025430 	.word	0x58025430
 80054e4:	58025444 	.word	0x58025444
 80054e8:	58025458 	.word	0x58025458
 80054ec:	5802546c 	.word	0x5802546c
 80054f0:	58025480 	.word	0x58025480
 80054f4:	58025494 	.word	0x58025494

080054f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a42      	ldr	r2, [pc, #264]	@ (8005610 <DMA_CalcBaseAndBitshift+0x118>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d04a      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a41      	ldr	r2, [pc, #260]	@ (8005614 <DMA_CalcBaseAndBitshift+0x11c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d045      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a3f      	ldr	r2, [pc, #252]	@ (8005618 <DMA_CalcBaseAndBitshift+0x120>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d040      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a3e      	ldr	r2, [pc, #248]	@ (800561c <DMA_CalcBaseAndBitshift+0x124>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d03b      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a3c      	ldr	r2, [pc, #240]	@ (8005620 <DMA_CalcBaseAndBitshift+0x128>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d036      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a3b      	ldr	r2, [pc, #236]	@ (8005624 <DMA_CalcBaseAndBitshift+0x12c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d031      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a39      	ldr	r2, [pc, #228]	@ (8005628 <DMA_CalcBaseAndBitshift+0x130>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d02c      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a38      	ldr	r2, [pc, #224]	@ (800562c <DMA_CalcBaseAndBitshift+0x134>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d027      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a36      	ldr	r2, [pc, #216]	@ (8005630 <DMA_CalcBaseAndBitshift+0x138>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a35      	ldr	r2, [pc, #212]	@ (8005634 <DMA_CalcBaseAndBitshift+0x13c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d01d      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a33      	ldr	r2, [pc, #204]	@ (8005638 <DMA_CalcBaseAndBitshift+0x140>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a32      	ldr	r2, [pc, #200]	@ (800563c <DMA_CalcBaseAndBitshift+0x144>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a30      	ldr	r2, [pc, #192]	@ (8005640 <DMA_CalcBaseAndBitshift+0x148>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2f      	ldr	r2, [pc, #188]	@ (8005644 <DMA_CalcBaseAndBitshift+0x14c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2d      	ldr	r2, [pc, #180]	@ (8005648 <DMA_CalcBaseAndBitshift+0x150>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2c      	ldr	r2, [pc, #176]	@ (800564c <DMA_CalcBaseAndBitshift+0x154>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d101      	bne.n	80055a4 <DMA_CalcBaseAndBitshift+0xac>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <DMA_CalcBaseAndBitshift+0xae>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d024      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	3b10      	subs	r3, #16
 80055b2:	4a27      	ldr	r2, [pc, #156]	@ (8005650 <DMA_CalcBaseAndBitshift+0x158>)
 80055b4:	fba2 2303 	umull	r2, r3, r2, r3
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	4a24      	ldr	r2, [pc, #144]	@ (8005654 <DMA_CalcBaseAndBitshift+0x15c>)
 80055c4:	5cd3      	ldrb	r3, [r2, r3]
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d908      	bls.n	80055e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005658 <DMA_CalcBaseAndBitshift+0x160>)
 80055da:	4013      	ands	r3, r2
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80055e2:	e00d      	b.n	8005600 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <DMA_CalcBaseAndBitshift+0x160>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055f2:	e005      	b.n	8005600 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40020010 	.word	0x40020010
 8005614:	40020028 	.word	0x40020028
 8005618:	40020040 	.word	0x40020040
 800561c:	40020058 	.word	0x40020058
 8005620:	40020070 	.word	0x40020070
 8005624:	40020088 	.word	0x40020088
 8005628:	400200a0 	.word	0x400200a0
 800562c:	400200b8 	.word	0x400200b8
 8005630:	40020410 	.word	0x40020410
 8005634:	40020428 	.word	0x40020428
 8005638:	40020440 	.word	0x40020440
 800563c:	40020458 	.word	0x40020458
 8005640:	40020470 	.word	0x40020470
 8005644:	40020488 	.word	0x40020488
 8005648:	400204a0 	.word	0x400204a0
 800564c:	400204b8 	.word	0x400204b8
 8005650:	aaaaaaab 	.word	0xaaaaaaab
 8005654:	08010650 	.word	0x08010650
 8005658:	fffffc00 	.word	0xfffffc00

0800565c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d120      	bne.n	80056b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005674:	2b03      	cmp	r3, #3
 8005676:	d858      	bhi.n	800572a <DMA_CheckFifoParam+0xce>
 8005678:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <DMA_CheckFifoParam+0x24>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	08005691 	.word	0x08005691
 8005684:	080056a3 	.word	0x080056a3
 8005688:	08005691 	.word	0x08005691
 800568c:	0800572b 	.word	0x0800572b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d048      	beq.n	800572e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056a0:	e045      	b.n	800572e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056aa:	d142      	bne.n	8005732 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056b0:	e03f      	b.n	8005732 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ba:	d123      	bne.n	8005704 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d838      	bhi.n	8005736 <DMA_CheckFifoParam+0xda>
 80056c4:	a201      	add	r2, pc, #4	@ (adr r2, 80056cc <DMA_CheckFifoParam+0x70>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056e3 	.word	0x080056e3
 80056d4:	080056dd 	.word	0x080056dd
 80056d8:	080056f5 	.word	0x080056f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
        break;
 80056e0:	e030      	b.n	8005744 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d025      	beq.n	800573a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056f2:	e022      	b.n	800573a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056fc:	d11f      	bne.n	800573e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005702:	e01c      	b.n	800573e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	2b02      	cmp	r3, #2
 800570a:	d902      	bls.n	8005712 <DMA_CheckFifoParam+0xb6>
 800570c:	2b03      	cmp	r3, #3
 800570e:	d003      	beq.n	8005718 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005710:	e018      	b.n	8005744 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
        break;
 8005716:	e015      	b.n	8005744 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00e      	beq.n	8005742 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
    break;
 8005728:	e00b      	b.n	8005742 <DMA_CheckFifoParam+0xe6>
        break;
 800572a:	bf00      	nop
 800572c:	e00a      	b.n	8005744 <DMA_CheckFifoParam+0xe8>
        break;
 800572e:	bf00      	nop
 8005730:	e008      	b.n	8005744 <DMA_CheckFifoParam+0xe8>
        break;
 8005732:	bf00      	nop
 8005734:	e006      	b.n	8005744 <DMA_CheckFifoParam+0xe8>
        break;
 8005736:	bf00      	nop
 8005738:	e004      	b.n	8005744 <DMA_CheckFifoParam+0xe8>
        break;
 800573a:	bf00      	nop
 800573c:	e002      	b.n	8005744 <DMA_CheckFifoParam+0xe8>
        break;
 800573e:	bf00      	nop
 8005740:	e000      	b.n	8005744 <DMA_CheckFifoParam+0xe8>
    break;
 8005742:	bf00      	nop
    }
  }

  return status;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop

08005754 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a38      	ldr	r2, [pc, #224]	@ (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a36      	ldr	r2, [pc, #216]	@ (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01d      	beq.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a35      	ldr	r2, [pc, #212]	@ (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a33      	ldr	r2, [pc, #204]	@ (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a32      	ldr	r2, [pc, #200]	@ (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a30      	ldr	r2, [pc, #192]	@ (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01a      	beq.n	80057f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	3b08      	subs	r3, #8
 80057c4:	4a28      	ldr	r2, [pc, #160]	@ (8005868 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4b26      	ldr	r3, [pc, #152]	@ (800586c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a24      	ldr	r2, [pc, #144]	@ (8005870 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057f0:	e024      	b.n	800583c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	3b10      	subs	r3, #16
 80057fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005874 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d806      	bhi.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d902      	bls.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3308      	adds	r3, #8
 8005818:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	461a      	mov	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a16      	ldr	r2, [pc, #88]	@ (8005884 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800582c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	2201      	movs	r2, #1
 8005836:	409a      	lsls	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	58025408 	.word	0x58025408
 800584c:	5802541c 	.word	0x5802541c
 8005850:	58025430 	.word	0x58025430
 8005854:	58025444 	.word	0x58025444
 8005858:	58025458 	.word	0x58025458
 800585c:	5802546c 	.word	0x5802546c
 8005860:	58025480 	.word	0x58025480
 8005864:	58025494 	.word	0x58025494
 8005868:	cccccccd 	.word	0xcccccccd
 800586c:	16009600 	.word	0x16009600
 8005870:	58025880 	.word	0x58025880
 8005874:	aaaaaaab 	.word	0xaaaaaaab
 8005878:	400204b8 	.word	0x400204b8
 800587c:	4002040f 	.word	0x4002040f
 8005880:	10008200 	.word	0x10008200
 8005884:	40020880 	.word	0x40020880

08005888 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d04a      	beq.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d847      	bhi.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a25      	ldr	r2, [pc, #148]	@ (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d022      	beq.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a24      	ldr	r2, [pc, #144]	@ (8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d01d      	beq.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a22      	ldr	r2, [pc, #136]	@ (8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	@ (800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1e      	ldr	r2, [pc, #120]	@ (8005954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1b      	ldr	r2, [pc, #108]	@ (800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d101      	bne.n	80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058f8:	2300      	movs	r3, #0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4b17      	ldr	r3, [pc, #92]	@ (8005960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a15      	ldr	r2, [pc, #84]	@ (8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005910:	671a      	str	r2, [r3, #112]	@ 0x70
 8005912:	e009      	b.n	8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4b14      	ldr	r3, [pc, #80]	@ (8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	461a      	mov	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a11      	ldr	r2, [pc, #68]	@ (800596c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005926:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3b01      	subs	r3, #1
 800592c:	2201      	movs	r2, #1
 800592e:	409a      	lsls	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	58025408 	.word	0x58025408
 8005944:	5802541c 	.word	0x5802541c
 8005948:	58025430 	.word	0x58025430
 800594c:	58025444 	.word	0x58025444
 8005950:	58025458 	.word	0x58025458
 8005954:	5802546c 	.word	0x5802546c
 8005958:	58025480 	.word	0x58025480
 800595c:	58025494 	.word	0x58025494
 8005960:	1600963f 	.word	0x1600963f
 8005964:	58025940 	.word	0x58025940
 8005968:	1000823f 	.word	0x1000823f
 800596c:	40020940 	.word	0x40020940

08005970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	@ 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800597e:	4b89      	ldr	r3, [pc, #548]	@ (8005ba4 <HAL_GPIO_Init+0x234>)
 8005980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005982:	e194      	b.n	8005cae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	2101      	movs	r1, #1
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	fa01 f303 	lsl.w	r3, r1, r3
 8005990:	4013      	ands	r3, r2
 8005992:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8186 	beq.w	8005ca8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d005      	beq.n	80059b4 <HAL_GPIO_Init+0x44>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d130      	bne.n	8005a16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	2203      	movs	r2, #3
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059ea:	2201      	movs	r2, #1
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4013      	ands	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f003 0201 	and.w	r2, r3, #1
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d017      	beq.n	8005a52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d123      	bne.n	8005aa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	08da      	lsrs	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3208      	adds	r2, #8
 8005a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	220f      	movs	r2, #15
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	08da      	lsrs	r2, r3, #3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3208      	adds	r2, #8
 8005aa0:	69b9      	ldr	r1, [r7, #24]
 8005aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 0203 	and.w	r2, r3, #3
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80e0 	beq.w	8005ca8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba8 <HAL_GPIO_Init+0x238>)
 8005aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005aee:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba8 <HAL_GPIO_Init+0x238>)
 8005af0:	f043 0302 	orr.w	r3, r3, #2
 8005af4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005af8:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba8 <HAL_GPIO_Init+0x238>)
 8005afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b06:	4a29      	ldr	r2, [pc, #164]	@ (8005bac <HAL_GPIO_Init+0x23c>)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4013      	ands	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a20      	ldr	r2, [pc, #128]	@ (8005bb0 <HAL_GPIO_Init+0x240>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d052      	beq.n	8005bd8 <HAL_GPIO_Init+0x268>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <HAL_GPIO_Init+0x244>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d031      	beq.n	8005b9e <HAL_GPIO_Init+0x22e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <HAL_GPIO_Init+0x248>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d02b      	beq.n	8005b9a <HAL_GPIO_Init+0x22a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <HAL_GPIO_Init+0x24c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d025      	beq.n	8005b96 <HAL_GPIO_Init+0x226>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <HAL_GPIO_Init+0x250>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d01f      	beq.n	8005b92 <HAL_GPIO_Init+0x222>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <HAL_GPIO_Init+0x254>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d019      	beq.n	8005b8e <HAL_GPIO_Init+0x21e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc8 <HAL_GPIO_Init+0x258>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_GPIO_Init+0x21a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <HAL_GPIO_Init+0x25c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00d      	beq.n	8005b86 <HAL_GPIO_Init+0x216>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <HAL_GPIO_Init+0x260>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <HAL_GPIO_Init+0x212>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a17      	ldr	r2, [pc, #92]	@ (8005bd4 <HAL_GPIO_Init+0x264>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <HAL_GPIO_Init+0x20e>
 8005b7a:	2309      	movs	r3, #9
 8005b7c:	e02d      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b7e:	230a      	movs	r3, #10
 8005b80:	e02b      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b82:	2308      	movs	r3, #8
 8005b84:	e029      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b86:	2307      	movs	r3, #7
 8005b88:	e027      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b8a:	2306      	movs	r3, #6
 8005b8c:	e025      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b8e:	2305      	movs	r3, #5
 8005b90:	e023      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b92:	2304      	movs	r3, #4
 8005b94:	e021      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b96:	2303      	movs	r3, #3
 8005b98:	e01f      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e01d      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e01b      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005ba2:	bf00      	nop
 8005ba4:	58000080 	.word	0x58000080
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	58000400 	.word	0x58000400
 8005bb0:	58020000 	.word	0x58020000
 8005bb4:	58020400 	.word	0x58020400
 8005bb8:	58020800 	.word	0x58020800
 8005bbc:	58020c00 	.word	0x58020c00
 8005bc0:	58021000 	.word	0x58021000
 8005bc4:	58021400 	.word	0x58021400
 8005bc8:	58021800 	.word	0x58021800
 8005bcc:	58021c00 	.word	0x58021c00
 8005bd0:	58022000 	.word	0x58022000
 8005bd4:	58022400 	.word	0x58022400
 8005bd8:	2300      	movs	r3, #0
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	f002 0203 	and.w	r2, r2, #3
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	4093      	lsls	r3, r2
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bea:	4938      	ldr	r1, [pc, #224]	@ (8005ccc <HAL_GPIO_Init+0x35c>)
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	089b      	lsrs	r3, r3, #2
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	43db      	mvns	r3, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	3301      	adds	r3, #1
 8005cac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f47f ae63 	bne.w	8005984 <HAL_GPIO_Init+0x14>
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	3724      	adds	r7, #36	@ 0x24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	58000400 	.word	0x58000400

08005cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	807b      	strh	r3, [r7, #2]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ce0:	787b      	ldrb	r3, [r7, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cec:	e003      	b.n	8005cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cee:	887b      	ldrh	r3, [r7, #2]
 8005cf0:	041a      	lsls	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	619a      	str	r2, [r3, #24]
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d0c:	4b19      	ldr	r3, [pc, #100]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d00a      	beq.n	8005d2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d18:	4b16      	ldr	r3, [pc, #88]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d001      	beq.n	8005d2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e01f      	b.n	8005d6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e01d      	b.n	8005d6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d2e:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f023 0207 	bic.w	r2, r3, #7
 8005d36:	490f      	ldr	r1, [pc, #60]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d3e:	f7fc fe0b 	bl	8002958 <HAL_GetTick>
 8005d42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d44:	e009      	b.n	8005d5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d46:	f7fc fe07 	bl	8002958 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d54:	d901      	bls.n	8005d5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e007      	b.n	8005d6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d5a:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d66:	d1ee      	bne.n	8005d46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	58024800 	.word	0x58024800

08005d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	@ 0x30
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f000 bc48 	b.w	800661c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8088 	beq.w	8005eaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9a:	4b99      	ldr	r3, [pc, #612]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005da4:	4b96      	ldr	r3, [pc, #600]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d007      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x48>
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	2b18      	cmp	r3, #24
 8005db4:	d111      	bne.n	8005dda <HAL_RCC_OscConfig+0x62>
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d10c      	bne.n	8005dda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d06d      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x130>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d169      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f000 bc21 	b.w	800661c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de2:	d106      	bne.n	8005df2 <HAL_RCC_OscConfig+0x7a>
 8005de4:	4b86      	ldr	r3, [pc, #536]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a85      	ldr	r2, [pc, #532]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e02e      	b.n	8005e50 <HAL_RCC_OscConfig+0xd8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10c      	bne.n	8005e14 <HAL_RCC_OscConfig+0x9c>
 8005dfa:	4b81      	ldr	r3, [pc, #516]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a80      	ldr	r2, [pc, #512]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	4b7e      	ldr	r3, [pc, #504]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a7d      	ldr	r2, [pc, #500]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e01d      	b.n	8005e50 <HAL_RCC_OscConfig+0xd8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0xc0>
 8005e1e:	4b78      	ldr	r3, [pc, #480]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a77      	ldr	r2, [pc, #476]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b75      	ldr	r3, [pc, #468]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a74      	ldr	r2, [pc, #464]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0xd8>
 8005e38:	4b71      	ldr	r3, [pc, #452]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a70      	ldr	r2, [pc, #448]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4b6e      	ldr	r3, [pc, #440]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a6d      	ldr	r2, [pc, #436]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fc fd7e 	bl	8002958 <HAL_GetTick>
 8005e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fc fd7a 	bl	8002958 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	@ 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e3d4      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e72:	4b63      	ldr	r3, [pc, #396]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0xe8>
 8005e7e:	e014      	b.n	8005eaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fc fd6a 	bl	8002958 <HAL_GetTick>
 8005e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e88:	f7fc fd66 	bl	8002958 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	@ 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e3c0      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e9a:	4b59      	ldr	r3, [pc, #356]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x110>
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80ca 	beq.w	800604c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb8:	4b51      	ldr	r3, [pc, #324]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ec0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_RCC_OscConfig+0x166>
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	2b18      	cmp	r3, #24
 8005ed2:	d156      	bne.n	8005f82 <HAL_RCC_OscConfig+0x20a>
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d151      	bne.n	8005f82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ede:	4b48      	ldr	r3, [pc, #288]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x17e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e392      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ef6:	4b42      	ldr	r3, [pc, #264]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f023 0219 	bic.w	r2, r3, #25
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	493f      	ldr	r1, [pc, #252]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fc fd26 	bl	8002958 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f10:	f7fc fd22 	bl	8002958 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e37c      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f22:	4b37      	ldr	r3, [pc, #220]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2e:	f7fc fd43 	bl	80029b8 <HAL_GetREVID>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d817      	bhi.n	8005f6c <HAL_RCC_OscConfig+0x1f4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b40      	cmp	r3, #64	@ 0x40
 8005f42:	d108      	bne.n	8005f56 <HAL_RCC_OscConfig+0x1de>
 8005f44:	4b2e      	ldr	r3, [pc, #184]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f54:	e07a      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b2a      	ldr	r3, [pc, #168]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	031b      	lsls	r3, r3, #12
 8005f64:	4926      	ldr	r1, [pc, #152]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6a:	e06f      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6c:	4b24      	ldr	r3, [pc, #144]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	4921      	ldr	r1, [pc, #132]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f80:	e064      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d047      	beq.n	800601a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f023 0219 	bic.w	r2, r3, #25
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	491a      	ldr	r1, [pc, #104]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fc fcdc 	bl	8002958 <HAL_GetTick>
 8005fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa4:	f7fc fcd8 	bl	8002958 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e332      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb6:	4b12      	ldr	r3, [pc, #72]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f0      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc2:	f7fc fcf9 	bl	80029b8 <HAL_GetREVID>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d819      	bhi.n	8006004 <HAL_RCC_OscConfig+0x28c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b40      	cmp	r3, #64	@ 0x40
 8005fd6:	d108      	bne.n	8005fea <HAL_RCC_OscConfig+0x272>
 8005fd8:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005fe0:	4a07      	ldr	r2, [pc, #28]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fe6:	6053      	str	r3, [r2, #4]
 8005fe8:	e030      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
 8005fea:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	031b      	lsls	r3, r3, #12
 8005ff8:	4901      	ldr	r1, [pc, #4]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	604b      	str	r3, [r1, #4]
 8005ffe:	e025      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
 8006000:	58024400 	.word	0x58024400
 8006004:	4b9a      	ldr	r3, [pc, #616]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	4997      	ldr	r1, [pc, #604]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006014:	4313      	orrs	r3, r2
 8006016:	604b      	str	r3, [r1, #4]
 8006018:	e018      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800601a:	4b95      	ldr	r3, [pc, #596]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a94      	ldr	r2, [pc, #592]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fc fc97 	bl	8002958 <HAL_GetTick>
 800602a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602e:	f7fc fc93 	bl	8002958 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e2ed      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006040:	4b8b      	ldr	r3, [pc, #556]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f0      	bne.n	800602e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80a9 	beq.w	80061ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605a:	4b85      	ldr	r3, [pc, #532]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006062:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006064:	4b82      	ldr	r3, [pc, #520]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d007      	beq.n	8006080 <HAL_RCC_OscConfig+0x308>
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b18      	cmp	r3, #24
 8006074:	d13a      	bne.n	80060ec <HAL_RCC_OscConfig+0x374>
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d135      	bne.n	80060ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006080:	4b7b      	ldr	r3, [pc, #492]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_RCC_OscConfig+0x320>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	2b80      	cmp	r3, #128	@ 0x80
 8006092:	d001      	beq.n	8006098 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e2c1      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006098:	f7fc fc8e 	bl	80029b8 <HAL_GetREVID>
 800609c:	4603      	mov	r3, r0
 800609e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d817      	bhi.n	80060d6 <HAL_RCC_OscConfig+0x35e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d108      	bne.n	80060c0 <HAL_RCC_OscConfig+0x348>
 80060ae:	4b70      	ldr	r3, [pc, #448]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80060b6:	4a6e      	ldr	r2, [pc, #440]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060be:	e075      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060c0:	4b6b      	ldr	r3, [pc, #428]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	069b      	lsls	r3, r3, #26
 80060ce:	4968      	ldr	r1, [pc, #416]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060d4:	e06a      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060d6:	4b66      	ldr	r3, [pc, #408]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	4962      	ldr	r1, [pc, #392]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060ea:	e05f      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d042      	beq.n	800617a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060f4:	4b5e      	ldr	r3, [pc, #376]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a5d      	ldr	r2, [pc, #372]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fc fc2a 	bl	8002958 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006108:	f7fc fc26 	bl	8002958 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e280      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800611a:	4b55      	ldr	r3, [pc, #340]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006126:	f7fc fc47 	bl	80029b8 <HAL_GetREVID>
 800612a:	4603      	mov	r3, r0
 800612c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006130:	4293      	cmp	r3, r2
 8006132:	d817      	bhi.n	8006164 <HAL_RCC_OscConfig+0x3ec>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	2b20      	cmp	r3, #32
 800613a:	d108      	bne.n	800614e <HAL_RCC_OscConfig+0x3d6>
 800613c:	4b4c      	ldr	r3, [pc, #304]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006144:	4a4a      	ldr	r2, [pc, #296]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800614a:	6053      	str	r3, [r2, #4]
 800614c:	e02e      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
 800614e:	4b48      	ldr	r3, [pc, #288]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	069b      	lsls	r3, r3, #26
 800615c:	4944      	ldr	r1, [pc, #272]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800615e:	4313      	orrs	r3, r2
 8006160:	604b      	str	r3, [r1, #4]
 8006162:	e023      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
 8006164:	4b42      	ldr	r3, [pc, #264]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	061b      	lsls	r3, r3, #24
 8006172:	493f      	ldr	r1, [pc, #252]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006174:	4313      	orrs	r3, r2
 8006176:	60cb      	str	r3, [r1, #12]
 8006178:	e018      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800617a:	4b3d      	ldr	r3, [pc, #244]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a3c      	ldr	r2, [pc, #240]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006180:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006186:	f7fc fbe7 	bl	8002958 <HAL_GetTick>
 800618a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800618e:	f7fc fbe3 	bl	8002958 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e23d      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061a0:	4b33      	ldr	r3, [pc, #204]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f0      	bne.n	800618e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d036      	beq.n	8006226 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d019      	beq.n	80061f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7fc fbc4 	bl	8002958 <HAL_GetTick>
 80061d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d4:	f7fc fbc0 	bl	8002958 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e21a      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061e6:	4b22      	ldr	r3, [pc, #136]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x45c>
 80061f2:	e018      	b.n	8006226 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006200:	f7fc fbaa 	bl	8002958 <HAL_GetTick>
 8006204:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006208:	f7fc fba6 	bl	8002958 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e200      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800621a:	4b15      	ldr	r3, [pc, #84]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d039      	beq.n	80062a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01c      	beq.n	8006274 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a0c      	ldr	r2, [pc, #48]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006240:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006244:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006246:	f7fc fb87 	bl	8002958 <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800624e:	f7fc fb83 	bl	8002958 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e1dd      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006260:	4b03      	ldr	r3, [pc, #12]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f0      	beq.n	800624e <HAL_RCC_OscConfig+0x4d6>
 800626c:	e01b      	b.n	80062a6 <HAL_RCC_OscConfig+0x52e>
 800626e:	bf00      	nop
 8006270:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006274:	4b9b      	ldr	r3, [pc, #620]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a9a      	ldr	r2, [pc, #616]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800627a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800627e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006280:	f7fc fb6a 	bl	8002958 <HAL_GetTick>
 8006284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006288:	f7fc fb66 	bl	8002958 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e1c0      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800629a:	4b92      	ldr	r3, [pc, #584]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8081 	beq.w	80063b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062b4:	4b8c      	ldr	r3, [pc, #560]	@ (80064e8 <HAL_RCC_OscConfig+0x770>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a8b      	ldr	r2, [pc, #556]	@ (80064e8 <HAL_RCC_OscConfig+0x770>)
 80062ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062c0:	f7fc fb4a 	bl	8002958 <HAL_GetTick>
 80062c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c8:	f7fc fb46 	bl	8002958 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	@ 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e1a0      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062da:	4b83      	ldr	r3, [pc, #524]	@ (80064e8 <HAL_RCC_OscConfig+0x770>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d106      	bne.n	80062fc <HAL_RCC_OscConfig+0x584>
 80062ee:	4b7d      	ldr	r3, [pc, #500]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	4a7c      	ldr	r2, [pc, #496]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fa:	e02d      	b.n	8006358 <HAL_RCC_OscConfig+0x5e0>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <HAL_RCC_OscConfig+0x5a6>
 8006304:	4b77      	ldr	r3, [pc, #476]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006308:	4a76      	ldr	r2, [pc, #472]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006310:	4b74      	ldr	r3, [pc, #464]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006314:	4a73      	ldr	r2, [pc, #460]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006316:	f023 0304 	bic.w	r3, r3, #4
 800631a:	6713      	str	r3, [r2, #112]	@ 0x70
 800631c:	e01c      	b.n	8006358 <HAL_RCC_OscConfig+0x5e0>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b05      	cmp	r3, #5
 8006324:	d10c      	bne.n	8006340 <HAL_RCC_OscConfig+0x5c8>
 8006326:	4b6f      	ldr	r3, [pc, #444]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632a:	4a6e      	ldr	r2, [pc, #440]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	6713      	str	r3, [r2, #112]	@ 0x70
 8006332:	4b6c      	ldr	r3, [pc, #432]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	4a6b      	ldr	r2, [pc, #428]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	6713      	str	r3, [r2, #112]	@ 0x70
 800633e:	e00b      	b.n	8006358 <HAL_RCC_OscConfig+0x5e0>
 8006340:	4b68      	ldr	r3, [pc, #416]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006344:	4a67      	ldr	r2, [pc, #412]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	6713      	str	r3, [r2, #112]	@ 0x70
 800634c:	4b65      	ldr	r3, [pc, #404]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006350:	4a64      	ldr	r2, [pc, #400]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006352:	f023 0304 	bic.w	r3, r3, #4
 8006356:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006360:	f7fc fafa 	bl	8002958 <HAL_GetTick>
 8006364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006366:	e00a      	b.n	800637e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006368:	f7fc faf6 	bl	8002958 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e14e      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800637e:	4b59      	ldr	r3, [pc, #356]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0ee      	beq.n	8006368 <HAL_RCC_OscConfig+0x5f0>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638c:	f7fc fae4 	bl	8002958 <HAL_GetTick>
 8006390:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006392:	e00a      	b.n	80063aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006394:	f7fc fae0 	bl	8002958 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e138      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063aa:	4b4e      	ldr	r3, [pc, #312]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1ee      	bne.n	8006394 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 812d 	beq.w	800661a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063c0:	4b48      	ldr	r3, [pc, #288]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063c8:	2b18      	cmp	r3, #24
 80063ca:	f000 80bd 	beq.w	8006548 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	f040 809e 	bne.w	8006514 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d8:	4b42      	ldr	r3, [pc, #264]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a41      	ldr	r2, [pc, #260]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80063de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fc fab8 	bl	8002958 <HAL_GetTick>
 80063e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fc fab4 	bl	8002958 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e10e      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063fe:	4b39      	ldr	r3, [pc, #228]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800640a:	4b36      	ldr	r3, [pc, #216]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800640c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800640e:	4b37      	ldr	r3, [pc, #220]	@ (80064ec <HAL_RCC_OscConfig+0x774>)
 8006410:	4013      	ands	r3, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800641a:	0112      	lsls	r2, r2, #4
 800641c:	430a      	orrs	r2, r1
 800641e:	4931      	ldr	r1, [pc, #196]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006420:	4313      	orrs	r3, r2
 8006422:	628b      	str	r3, [r1, #40]	@ 0x28
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006428:	3b01      	subs	r3, #1
 800642a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006432:	3b01      	subs	r3, #1
 8006434:	025b      	lsls	r3, r3, #9
 8006436:	b29b      	uxth	r3, r3
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643e:	3b01      	subs	r3, #1
 8006440:	041b      	lsls	r3, r3, #16
 8006442:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644c:	3b01      	subs	r3, #1
 800644e:	061b      	lsls	r3, r3, #24
 8006450:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006454:	4923      	ldr	r1, [pc, #140]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006456:	4313      	orrs	r3, r2
 8006458:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800645a:	4b22      	ldr	r3, [pc, #136]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645e:	4a21      	ldr	r2, [pc, #132]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006466:	4b1f      	ldr	r3, [pc, #124]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800646a:	4b21      	ldr	r3, [pc, #132]	@ (80064f0 <HAL_RCC_OscConfig+0x778>)
 800646c:	4013      	ands	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006472:	00d2      	lsls	r2, r2, #3
 8006474:	491b      	ldr	r1, [pc, #108]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006476:	4313      	orrs	r3, r2
 8006478:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800647a:	4b1a      	ldr	r3, [pc, #104]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647e:	f023 020c 	bic.w	r2, r3, #12
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	4917      	ldr	r1, [pc, #92]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006488:	4313      	orrs	r3, r2
 800648a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800648c:	4b15      	ldr	r3, [pc, #84]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	f023 0202 	bic.w	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006498:	4912      	ldr	r1, [pc, #72]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800649a:	4313      	orrs	r3, r2
 800649c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800649e:	4b11      	ldr	r3, [pc, #68]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	4a10      	ldr	r2, [pc, #64]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064aa:	4b0e      	ldr	r3, [pc, #56]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	4a0d      	ldr	r2, [pc, #52]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064b6:	4b0b      	ldr	r3, [pc, #44]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	4a0a      	ldr	r2, [pc, #40]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80064c2:	4b08      	ldr	r3, [pc, #32]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	4a07      	ldr	r2, [pc, #28]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ce:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a04      	ldr	r2, [pc, #16]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064da:	f7fc fa3d 	bl	8002958 <HAL_GetTick>
 80064de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064e0:	e011      	b.n	8006506 <HAL_RCC_OscConfig+0x78e>
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
 80064e8:	58024800 	.word	0x58024800
 80064ec:	fffffc0c 	.word	0xfffffc0c
 80064f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fc fa30 	bl	8002958 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e08a      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006506:	4b47      	ldr	r3, [pc, #284]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x77c>
 8006512:	e082      	b.n	800661a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006514:	4b43      	ldr	r3, [pc, #268]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a42      	ldr	r2, [pc, #264]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 800651a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800651e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fc fa1a 	bl	8002958 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006528:	f7fc fa16 	bl	8002958 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e070      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800653a:	4b3a      	ldr	r3, [pc, #232]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x7b0>
 8006546:	e068      	b.n	800661a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006548:	4b36      	ldr	r3, [pc, #216]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800654e:	4b35      	ldr	r3, [pc, #212]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006552:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	2b01      	cmp	r3, #1
 800655a:	d031      	beq.n	80065c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f003 0203 	and.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006566:	429a      	cmp	r2, r3
 8006568:	d12a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006576:	429a      	cmp	r2, r3
 8006578:	d122      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d11a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0a5b      	lsrs	r3, r3, #9
 800658e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006596:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006598:	429a      	cmp	r2, r3
 800659a:	d111      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d108      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	0e1b      	lsrs	r3, r3, #24
 80065b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e02b      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80065c4:	4b17      	ldr	r3, [pc, #92]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 80065c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c8:	08db      	lsrs	r3, r3, #3
 80065ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d01f      	beq.n	800661a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 80065dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065de:	4a11      	ldr	r2, [pc, #68]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065e6:	f7fc f9b7 	bl	8002958 <HAL_GetTick>
 80065ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80065ec:	bf00      	nop
 80065ee:	f7fc f9b3 	bl	8002958 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d0f9      	beq.n	80065ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 80065fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <HAL_RCC_OscConfig+0x8b0>)
 8006600:	4013      	ands	r3, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006606:	00d2      	lsls	r2, r2, #3
 8006608:	4906      	ldr	r1, [pc, #24]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 800660a:	4313      	orrs	r3, r2
 800660c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800660e:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	4a04      	ldr	r2, [pc, #16]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3730      	adds	r7, #48	@ 0x30
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	58024400 	.word	0x58024400
 8006628:	ffff0007 	.word	0xffff0007

0800662c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e19c      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006640:	4b8a      	ldr	r3, [pc, #552]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d910      	bls.n	8006670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	4b87      	ldr	r3, [pc, #540]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 020f 	bic.w	r2, r3, #15
 8006656:	4985      	ldr	r1, [pc, #532]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800665e:	4b83      	ldr	r3, [pc, #524]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e184      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d010      	beq.n	800669e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	4b7b      	ldr	r3, [pc, #492]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006688:	429a      	cmp	r2, r3
 800668a:	d908      	bls.n	800669e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800668c:	4b78      	ldr	r3, [pc, #480]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	4975      	ldr	r1, [pc, #468]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800669a:	4313      	orrs	r3, r2
 800669c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d010      	beq.n	80066cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	4b70      	ldr	r3, [pc, #448]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d908      	bls.n	80066cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	496a      	ldr	r1, [pc, #424]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d010      	beq.n	80066fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	4b64      	ldr	r3, [pc, #400]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d908      	bls.n	80066fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066e8:	4b61      	ldr	r3, [pc, #388]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	495e      	ldr	r1, [pc, #376]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d010      	beq.n	8006728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	4b59      	ldr	r3, [pc, #356]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006712:	429a      	cmp	r2, r3
 8006714:	d908      	bls.n	8006728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006716:	4b56      	ldr	r3, [pc, #344]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	4953      	ldr	r1, [pc, #332]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006724:	4313      	orrs	r3, r2
 8006726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	4b4d      	ldr	r3, [pc, #308]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	429a      	cmp	r2, r3
 8006742:	d908      	bls.n	8006756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b4a      	ldr	r3, [pc, #296]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f023 020f 	bic.w	r2, r3, #15
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4947      	ldr	r1, [pc, #284]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006752:	4313      	orrs	r3, r2
 8006754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d055      	beq.n	800680e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006762:	4b43      	ldr	r3, [pc, #268]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4940      	ldr	r1, [pc, #256]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006770:	4313      	orrs	r3, r2
 8006772:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d107      	bne.n	800678c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800677c:	4b3c      	ldr	r3, [pc, #240]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d121      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0f6      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d107      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006794:	4b36      	ldr	r3, [pc, #216]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d115      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0ea      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067ac:	4b30      	ldr	r3, [pc, #192]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0de      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e0d6      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067cc:	4b28      	ldr	r3, [pc, #160]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f023 0207 	bic.w	r2, r3, #7
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4925      	ldr	r1, [pc, #148]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fc f8bb 	bl	8002958 <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e6:	f7fc f8b7 	bl	8002958 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0be      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	429a      	cmp	r2, r3
 800680c:	d1eb      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d010      	beq.n	800683c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	4b14      	ldr	r3, [pc, #80]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	429a      	cmp	r2, r3
 8006828:	d208      	bcs.n	800683c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800682a:	4b11      	ldr	r3, [pc, #68]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f023 020f 	bic.w	r2, r3, #15
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	490e      	ldr	r1, [pc, #56]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006838:	4313      	orrs	r3, r2
 800683a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800683c:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d214      	bcs.n	8006874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684a:	4b08      	ldr	r3, [pc, #32]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 020f 	bic.w	r2, r3, #15
 8006852:	4906      	ldr	r1, [pc, #24]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	4313      	orrs	r3, r2
 8006858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800685a:	4b04      	ldr	r3, [pc, #16]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d005      	beq.n	8006874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e086      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
 800686c:	52002000 	.word	0x52002000
 8006870:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	4b3f      	ldr	r3, [pc, #252]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800688c:	429a      	cmp	r2, r3
 800688e:	d208      	bcs.n	80068a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006890:	4b3c      	ldr	r3, [pc, #240]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	4939      	ldr	r1, [pc, #228]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	4b34      	ldr	r3, [pc, #208]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d208      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	492e      	ldr	r1, [pc, #184]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	4b28      	ldr	r3, [pc, #160]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d208      	bcs.n	80068fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068ec:	4b25      	ldr	r3, [pc, #148]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	4922      	ldr	r1, [pc, #136]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d010      	beq.n	800692c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69da      	ldr	r2, [r3, #28]
 800690e:	4b1d      	ldr	r3, [pc, #116]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006916:	429a      	cmp	r2, r3
 8006918:	d208      	bcs.n	800692c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800691a:	4b1a      	ldr	r3, [pc, #104]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	4917      	ldr	r1, [pc, #92]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006928:	4313      	orrs	r3, r2
 800692a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800692c:	f000 f834 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b14      	ldr	r3, [pc, #80]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	4912      	ldr	r1, [pc, #72]	@ (8006988 <HAL_RCC_ClockConfig+0x35c>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800694a:	4b0e      	ldr	r3, [pc, #56]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	4a0d      	ldr	r2, [pc, #52]	@ (8006988 <HAL_RCC_ClockConfig+0x35c>)
 8006954:	5cd3      	ldrb	r3, [r2, r3]
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
 8006960:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <HAL_RCC_ClockConfig+0x360>)
 8006962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006964:	4a0a      	ldr	r2, [pc, #40]	@ (8006990 <HAL_RCC_ClockConfig+0x364>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800696a:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <HAL_RCC_ClockConfig+0x368>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fb ffa8 	bl	80028c4 <HAL_InitTick>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	58024400 	.word	0x58024400
 8006988:	08010640 	.word	0x08010640
 800698c:	24000008 	.word	0x24000008
 8006990:	24000004 	.word	0x24000004
 8006994:	2400000c 	.word	0x2400000c

08006998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	@ 0x24
 800699c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800699e:	4bb3      	ldr	r3, [pc, #716]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069a6:	2b18      	cmp	r3, #24
 80069a8:	f200 8155 	bhi.w	8006c56 <HAL_RCC_GetSysClockFreq+0x2be>
 80069ac:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006c57 	.word	0x08006c57
 80069bc:	08006c57 	.word	0x08006c57
 80069c0:	08006c57 	.word	0x08006c57
 80069c4:	08006c57 	.word	0x08006c57
 80069c8:	08006c57 	.word	0x08006c57
 80069cc:	08006c57 	.word	0x08006c57
 80069d0:	08006c57 	.word	0x08006c57
 80069d4:	08006a3f 	.word	0x08006a3f
 80069d8:	08006c57 	.word	0x08006c57
 80069dc:	08006c57 	.word	0x08006c57
 80069e0:	08006c57 	.word	0x08006c57
 80069e4:	08006c57 	.word	0x08006c57
 80069e8:	08006c57 	.word	0x08006c57
 80069ec:	08006c57 	.word	0x08006c57
 80069f0:	08006c57 	.word	0x08006c57
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006c57 	.word	0x08006c57
 80069fc:	08006c57 	.word	0x08006c57
 8006a00:	08006c57 	.word	0x08006c57
 8006a04:	08006c57 	.word	0x08006c57
 8006a08:	08006c57 	.word	0x08006c57
 8006a0c:	08006c57 	.word	0x08006c57
 8006a10:	08006c57 	.word	0x08006c57
 8006a14:	08006a4b 	.word	0x08006a4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a18:	4b94      	ldr	r3, [pc, #592]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a24:	4b91      	ldr	r3, [pc, #580]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	08db      	lsrs	r3, r3, #3
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	4a90      	ldr	r2, [pc, #576]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006a36:	e111      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a38:	4b8d      	ldr	r3, [pc, #564]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a3a:	61bb      	str	r3, [r7, #24]
      break;
 8006a3c:	e10e      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a40:	61bb      	str	r3, [r7, #24]
      break;
 8006a42:	e10b      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006a44:	4b8c      	ldr	r3, [pc, #560]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a46:	61bb      	str	r3, [r7, #24]
      break;
 8006a48:	e108      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a4a:	4b88      	ldr	r3, [pc, #544]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a54:	4b85      	ldr	r3, [pc, #532]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a60:	4b82      	ldr	r3, [pc, #520]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a6a:	4b80      	ldr	r3, [pc, #512]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80e1 	beq.w	8006c50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	f000 8083 	beq.w	8006b9c <HAL_RCC_GetSysClockFreq+0x204>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f200 80a1 	bhi.w	8006be0 <HAL_RCC_GetSysClockFreq+0x248>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0x114>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d056      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006aaa:	e099      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aac:	4b6f      	ldr	r3, [pc, #444]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02d      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae2:	4b62      	ldr	r3, [pc, #392]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006b12:	e087      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b26:	4b51      	ldr	r3, [pc, #324]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b56:	e065      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b40      	ldr	r3, [pc, #256]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b9a:	e043      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bae:	4b2f      	ldr	r3, [pc, #188]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bde:	e021      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006c24:	4b11      	ldr	r3, [pc, #68]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	0a5b      	lsrs	r3, r3, #9
 8006c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c2e:	3301      	adds	r3, #1
 8006c30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c48:	ee17 3a90 	vmov	r3, s15
 8006c4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c4e:	e005      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	61bb      	str	r3, [r7, #24]
      break;
 8006c54:	e002      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c56:	4b07      	ldr	r3, [pc, #28]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c58:	61bb      	str	r3, [r7, #24]
      break;
 8006c5a:	bf00      	nop
  }

  return sysclockfreq;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3724      	adds	r7, #36	@ 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	03d09000 	.word	0x03d09000
 8006c74:	003d0900 	.word	0x003d0900
 8006c78:	017d7840 	.word	0x017d7840
 8006c7c:	46000000 	.word	0x46000000
 8006c80:	4c742400 	.word	0x4c742400
 8006c84:	4a742400 	.word	0x4a742400
 8006c88:	4bbebc20 	.word	0x4bbebc20

08006c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c92:	f7ff fe81 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006c96:	4602      	mov	r2, r0
 8006c98:	4b10      	ldr	r3, [pc, #64]	@ (8006cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	0a1b      	lsrs	r3, r3, #8
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	490f      	ldr	r1, [pc, #60]	@ (8006ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ca4:	5ccb      	ldrb	r3, [r1, r3]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cba:	5cd3      	ldrb	r3, [r2, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	4a07      	ldr	r2, [pc, #28]	@ (8006ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cca:	4a07      	ldr	r2, [pc, #28]	@ (8006ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	08010640 	.word	0x08010640
 8006ce4:	24000008 	.word	0x24000008
 8006ce8:	24000004 	.word	0x24000004

08006cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cf0:	f7ff ffcc 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	4904      	ldr	r1, [pc, #16]	@ (8006d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d02:	5ccb      	ldrb	r3, [r1, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	08010640 	.word	0x08010640

08006d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d1c:	f7ff ffb6 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8006d20:	4602      	mov	r2, r0
 8006d22:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	4904      	ldr	r1, [pc, #16]	@ (8006d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d2e:	5ccb      	ldrb	r3, [r1, r3]
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	08010640 	.word	0x08010640

08006d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d48:	b0ca      	sub	sp, #296	@ 0x128
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d56:	2300      	movs	r3, #0
 8006d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006d68:	2500      	movs	r5, #0
 8006d6a:	ea54 0305 	orrs.w	r3, r4, r5
 8006d6e:	d049      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d7a:	d02f      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d80:	d828      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d86:	d01a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d8c:	d822      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d96:	d007      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d98:	e01c      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d9a:	4bb8      	ldr	r3, [pc, #736]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	4ab7      	ldr	r2, [pc, #732]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006da6:	e01a      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dac:	3308      	adds	r3, #8
 8006dae:	2102      	movs	r1, #2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 fc8f 	bl	80086d4 <RCCEx_PLL2_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dbc:	e00f      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc2:	3328      	adds	r3, #40	@ 0x28
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fd36 	bl	8008838 <RCCEx_PLL3_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dd2:	e004      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dda:	e000      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006de6:	4ba5      	ldr	r3, [pc, #660]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006df4:	4aa1      	ldr	r2, [pc, #644]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dfa:	e003      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006e10:	f04f 0900 	mov.w	r9, #0
 8006e14:	ea58 0309 	orrs.w	r3, r8, r9
 8006e18:	d047      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d82a      	bhi.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e41 	.word	0x08006e41
 8006e30:	08006e4f 	.word	0x08006e4f
 8006e34:	08006e65 	.word	0x08006e65
 8006e38:	08006e83 	.word	0x08006e83
 8006e3c:	08006e83 	.word	0x08006e83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4b8e      	ldr	r3, [pc, #568]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4a8d      	ldr	r2, [pc, #564]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e4c:	e01a      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	3308      	adds	r3, #8
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 fc3c 	bl	80086d4 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e62:	e00f      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e68:	3328      	adds	r3, #40	@ 0x28
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 fce3 	bl	8008838 <RCCEx_PLL3_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e78:	e004      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e80:	e000      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e8c:	4b7b      	ldr	r3, [pc, #492]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e90:	f023 0107 	bic.w	r1, r3, #7
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9a:	4a78      	ldr	r2, [pc, #480]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ea0:	e003      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006eb6:	f04f 0b00 	mov.w	fp, #0
 8006eba:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ebe:	d04c      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eca:	d030      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed0:	d829      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed4:	d02d      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed8:	d825      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006eda:	2b80      	cmp	r3, #128	@ 0x80
 8006edc:	d018      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ede:	2b80      	cmp	r3, #128	@ 0x80
 8006ee0:	d821      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006ee6:	2b40      	cmp	r3, #64	@ 0x40
 8006ee8:	d007      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006eea:	e01c      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eec:	4b63      	ldr	r3, [pc, #396]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	4a62      	ldr	r2, [pc, #392]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e01c      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	3308      	adds	r3, #8
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 fbe6 	bl	80086d4 <RCCEx_PLL2_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f0e:	e011      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f14:	3328      	adds	r3, #40	@ 0x28
 8006f16:	2100      	movs	r1, #0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 fc8d 	bl	8008838 <RCCEx_PLL3_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f24:	e006      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f2c:	e002      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f50:	e003      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006f66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006f70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006f74:	460b      	mov	r3, r1
 8006f76:	4313      	orrs	r3, r2
 8006f78:	d053      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f86:	d035      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f8c:	d82e      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f92:	d031      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f98:	d828      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f9e:	d01a      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fa4:	d822      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fae:	d007      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006fb0:	e01c      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb2:	4b32      	ldr	r3, [pc, #200]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb6:	4a31      	ldr	r2, [pc, #196]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fbe:	e01c      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fb83 	bl	80086d4 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006fd4:	e011      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	3328      	adds	r3, #40	@ 0x28
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fc2a 	bl	8008838 <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fea:	e006      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ff2:	e002      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10b      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007002:	4b1e      	ldr	r3, [pc, #120]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007006:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800700a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007012:	4a1a      	ldr	r2, [pc, #104]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007014:	430b      	orrs	r3, r1
 8007016:	6593      	str	r3, [r2, #88]	@ 0x58
 8007018:	e003      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800701e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800702e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007032:	2300      	movs	r3, #0
 8007034:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007038:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800703c:	460b      	mov	r3, r1
 800703e:	4313      	orrs	r3, r2
 8007040:	d056      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007046:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800704a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800704e:	d038      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007050:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007054:	d831      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007056:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800705a:	d034      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800705c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007060:	d82b      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007066:	d01d      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800706c:	d825      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d006      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007076:	d00a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007078:	e01f      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007080:	4ba2      	ldr	r3, [pc, #648]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	4aa1      	ldr	r2, [pc, #644]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800708a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800708c:	e01c      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007092:	3308      	adds	r3, #8
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f001 fb1c 	bl	80086d4 <RCCEx_PLL2_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80070a2:	e011      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a8:	3328      	adds	r3, #40	@ 0x28
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 fbc3 	bl	8008838 <RCCEx_PLL3_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c0:	e002      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070d0:	4b8e      	ldr	r3, [pc, #568]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070e0:	4a8a      	ldr	r2, [pc, #552]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e2:	430b      	orrs	r3, r1
 80070e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e6:	e003      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80070fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007100:	2300      	movs	r3, #0
 8007102:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007106:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d03a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007116:	2b30      	cmp	r3, #48	@ 0x30
 8007118:	d01f      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800711a:	2b30      	cmp	r3, #48	@ 0x30
 800711c:	d819      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800711e:	2b20      	cmp	r3, #32
 8007120:	d00c      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007122:	2b20      	cmp	r3, #32
 8007124:	d815      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d019      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800712a:	2b10      	cmp	r3, #16
 800712c:	d111      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712e:	4b77      	ldr	r3, [pc, #476]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	4a76      	ldr	r2, [pc, #472]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800713a:	e011      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007140:	3308      	adds	r3, #8
 8007142:	2102      	movs	r1, #2
 8007144:	4618      	mov	r0, r3
 8007146:	f001 fac5 	bl	80086d4 <RCCEx_PLL2_Config>
 800714a:	4603      	mov	r3, r0
 800714c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007150:	e006      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007158:	e002      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800715e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007168:	4b68      	ldr	r3, [pc, #416]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800716a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007176:	4a65      	ldr	r2, [pc, #404]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007178:	430b      	orrs	r3, r1
 800717a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800717c:	e003      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007192:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007196:	2300      	movs	r3, #0
 8007198:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800719c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4313      	orrs	r3, r2
 80071a4:	d051      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b0:	d035      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80071b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b6:	d82e      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071bc:	d031      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80071be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071c2:	d828      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c8:	d01a      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80071ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ce:	d822      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d8:	d007      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80071da:	e01c      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071dc:	4b4b      	ldr	r3, [pc, #300]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	4a4a      	ldr	r2, [pc, #296]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071e8:	e01c      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ee:	3308      	adds	r3, #8
 80071f0:	2100      	movs	r1, #0
 80071f2:	4618      	mov	r0, r3
 80071f4:	f001 fa6e 	bl	80086d4 <RCCEx_PLL2_Config>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071fe:	e011      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007204:	3328      	adds	r3, #40	@ 0x28
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f001 fb15 	bl	8008838 <RCCEx_PLL3_Config>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007214:	e006      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800721c:	e002      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800722c:	4b37      	ldr	r3, [pc, #220]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800722e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007230:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800723a:	4a34      	ldr	r2, [pc, #208]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800723c:	430b      	orrs	r3, r1
 800723e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007240:	e003      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800725a:	2300      	movs	r3, #0
 800725c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007260:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007264:	460b      	mov	r3, r1
 8007266:	4313      	orrs	r3, r2
 8007268:	d056      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007274:	d033      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800727a:	d82c      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800727c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007280:	d02f      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007286:	d826      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007288:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800728c:	d02b      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800728e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007292:	d820      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007298:	d012      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800729a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800729e:	d81a      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d022      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80072a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a8:	d115      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ae:	3308      	adds	r3, #8
 80072b0:	2101      	movs	r1, #1
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 fa0e 	bl	80086d4 <RCCEx_PLL2_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072be:	e015      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c4:	3328      	adds	r3, #40	@ 0x28
 80072c6:	2101      	movs	r1, #1
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fab5 	bl	8008838 <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072d4:	e00a      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072dc:	e006      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072de:	bf00      	nop
 80072e0:	e004      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072e2:	bf00      	nop
 80072e4:	e002      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072e6:	bf00      	nop
 80072e8:	e000      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072f4:	4b05      	ldr	r3, [pc, #20]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007302:	4a02      	ldr	r2, [pc, #8]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6513      	str	r3, [r2, #80]	@ 0x50
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800732e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	d055      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007344:	d033      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800734a:	d82c      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007350:	d02f      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007356:	d826      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800735c:	d02b      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800735e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007362:	d820      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007368:	d012      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800736a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800736e:	d81a      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d022      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007378:	d115      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737e:	3308      	adds	r3, #8
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f001 f9a6 	bl	80086d4 <RCCEx_PLL2_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800738e:	e015      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007394:	3328      	adds	r3, #40	@ 0x28
 8007396:	2101      	movs	r1, #1
 8007398:	4618      	mov	r0, r3
 800739a:	f001 fa4d 	bl	8008838 <RCCEx_PLL3_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80073a4:	e00a      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073ac:	e006      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073ae:	bf00      	nop
 80073b0:	e004      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073b2:	bf00      	nop
 80073b4:	e002      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073b6:	bf00      	nop
 80073b8:	e000      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073c4:	4ba3      	ldr	r3, [pc, #652]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073d4:	4a9f      	ldr	r2, [pc, #636]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d6:	430b      	orrs	r3, r1
 80073d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80073da:	e003      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073f4:	2300      	movs	r3, #0
 80073f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073fe:	460b      	mov	r3, r1
 8007400:	4313      	orrs	r3, r2
 8007402:	d037      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800740e:	d00e      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007414:	d816      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d018      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800741a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800741e:	d111      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007420:	4b8c      	ldr	r3, [pc, #560]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	4a8b      	ldr	r2, [pc, #556]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800742a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800742c:	e00f      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	3308      	adds	r3, #8
 8007434:	2101      	movs	r1, #1
 8007436:	4618      	mov	r0, r3
 8007438:	f001 f94c 	bl	80086d4 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007442:	e004      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800744a:	e000      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800744c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007456:	4b7f      	ldr	r3, [pc, #508]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800745a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007464:	4a7b      	ldr	r2, [pc, #492]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007466:	430b      	orrs	r3, r1
 8007468:	6513      	str	r3, [r2, #80]	@ 0x50
 800746a:	e003      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007484:	2300      	movs	r3, #0
 8007486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800748a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800748e:	460b      	mov	r3, r1
 8007490:	4313      	orrs	r3, r2
 8007492:	d039      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800749a:	2b03      	cmp	r3, #3
 800749c:	d81c      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800749e:	a201      	add	r2, pc, #4	@ (adr r2, 80074a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074e1 	.word	0x080074e1
 80074a8:	080074b5 	.word	0x080074b5
 80074ac:	080074c3 	.word	0x080074c3
 80074b0:	080074e1 	.word	0x080074e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b4:	4b67      	ldr	r3, [pc, #412]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	4a66      	ldr	r2, [pc, #408]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074c0:	e00f      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c6:	3308      	adds	r3, #8
 80074c8:	2102      	movs	r1, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 f902 	bl	80086d4 <RCCEx_PLL2_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074d6:	e004      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80074e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10a      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074ea:	4b5a      	ldr	r3, [pc, #360]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ee:	f023 0103 	bic.w	r1, r3, #3
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f8:	4a56      	ldr	r2, [pc, #344]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fa:	430b      	orrs	r3, r1
 80074fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074fe:	e003      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007514:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007518:	2300      	movs	r3, #0
 800751a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800751e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007522:	460b      	mov	r3, r1
 8007524:	4313      	orrs	r3, r2
 8007526:	f000 809f 	beq.w	8007668 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800752a:	4b4b      	ldr	r3, [pc, #300]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a4a      	ldr	r2, [pc, #296]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007536:	f7fb fa0f 	bl	8002958 <HAL_GetTick>
 800753a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800753e:	e00b      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007540:	f7fb fa0a 	bl	8002958 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b64      	cmp	r3, #100	@ 0x64
 800754e:	d903      	bls.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007556:	e005      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007558:	4b3f      	ldr	r3, [pc, #252]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0ed      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007568:	2b00      	cmp	r3, #0
 800756a:	d179      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800756c:	4b39      	ldr	r3, [pc, #228]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800756e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007578:	4053      	eors	r3, r2
 800757a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800757e:	2b00      	cmp	r3, #0
 8007580:	d015      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007582:	4b34      	ldr	r3, [pc, #208]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800758a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800758e:	4b31      	ldr	r3, [pc, #196]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007592:	4a30      	ldr	r2, [pc, #192]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007598:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800759a:	4b2e      	ldr	r3, [pc, #184]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800759c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800759e:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80075a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80075ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075ba:	d118      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075bc:	f7fb f9cc 	bl	8002958 <HAL_GetTick>
 80075c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075c4:	e00d      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c6:	f7fb f9c7 	bl	8002958 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d903      	bls.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80075e0:	e005      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0eb      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80075ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d129      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007606:	d10e      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007608:	4b12      	ldr	r3, [pc, #72]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007618:	091a      	lsrs	r2, r3, #4
 800761a:	4b10      	ldr	r3, [pc, #64]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800761c:	4013      	ands	r3, r2
 800761e:	4a0d      	ldr	r2, [pc, #52]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6113      	str	r3, [r2, #16]
 8007624:	e005      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007626:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	4a0a      	ldr	r2, [pc, #40]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007630:	6113      	str	r3, [r2, #16]
 8007632:	4b08      	ldr	r3, [pc, #32]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007634:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800763e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007642:	4a04      	ldr	r2, [pc, #16]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007644:	430b      	orrs	r3, r1
 8007646:	6713      	str	r3, [r2, #112]	@ 0x70
 8007648:	e00e      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800764a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007652:	e009      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007654:	58024400 	.word	0x58024400
 8007658:	58024800 	.word	0x58024800
 800765c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f002 0301 	and.w	r3, r2, #1
 8007674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800767e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007682:	460b      	mov	r3, r1
 8007684:	4313      	orrs	r3, r2
 8007686:	f000 8089 	beq.w	800779c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007690:	2b28      	cmp	r3, #40	@ 0x28
 8007692:	d86b      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007694:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	08007775 	.word	0x08007775
 80076a0:	0800776d 	.word	0x0800776d
 80076a4:	0800776d 	.word	0x0800776d
 80076a8:	0800776d 	.word	0x0800776d
 80076ac:	0800776d 	.word	0x0800776d
 80076b0:	0800776d 	.word	0x0800776d
 80076b4:	0800776d 	.word	0x0800776d
 80076b8:	0800776d 	.word	0x0800776d
 80076bc:	08007741 	.word	0x08007741
 80076c0:	0800776d 	.word	0x0800776d
 80076c4:	0800776d 	.word	0x0800776d
 80076c8:	0800776d 	.word	0x0800776d
 80076cc:	0800776d 	.word	0x0800776d
 80076d0:	0800776d 	.word	0x0800776d
 80076d4:	0800776d 	.word	0x0800776d
 80076d8:	0800776d 	.word	0x0800776d
 80076dc:	08007757 	.word	0x08007757
 80076e0:	0800776d 	.word	0x0800776d
 80076e4:	0800776d 	.word	0x0800776d
 80076e8:	0800776d 	.word	0x0800776d
 80076ec:	0800776d 	.word	0x0800776d
 80076f0:	0800776d 	.word	0x0800776d
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	0800776d 	.word	0x0800776d
 80076fc:	08007775 	.word	0x08007775
 8007700:	0800776d 	.word	0x0800776d
 8007704:	0800776d 	.word	0x0800776d
 8007708:	0800776d 	.word	0x0800776d
 800770c:	0800776d 	.word	0x0800776d
 8007710:	0800776d 	.word	0x0800776d
 8007714:	0800776d 	.word	0x0800776d
 8007718:	0800776d 	.word	0x0800776d
 800771c:	08007775 	.word	0x08007775
 8007720:	0800776d 	.word	0x0800776d
 8007724:	0800776d 	.word	0x0800776d
 8007728:	0800776d 	.word	0x0800776d
 800772c:	0800776d 	.word	0x0800776d
 8007730:	0800776d 	.word	0x0800776d
 8007734:	0800776d 	.word	0x0800776d
 8007738:	0800776d 	.word	0x0800776d
 800773c:	08007775 	.word	0x08007775
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007744:	3308      	adds	r3, #8
 8007746:	2101      	movs	r1, #1
 8007748:	4618      	mov	r0, r3
 800774a:	f000 ffc3 	bl	80086d4 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007754:	e00f      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775a:	3328      	adds	r3, #40	@ 0x28
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f001 f86a 	bl	8008838 <RCCEx_PLL3_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800776a:	e004      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007772:	e000      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800777e:	4bbf      	ldr	r3, [pc, #764]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007782:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778c:	4abb      	ldr	r2, [pc, #748]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800778e:	430b      	orrs	r3, r1
 8007790:	6553      	str	r3, [r2, #84]	@ 0x54
 8007792:	e003      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f002 0302 	and.w	r3, r2, #2
 80077a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80077b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80077b6:	460b      	mov	r3, r1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	d041      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80077bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077c2:	2b05      	cmp	r3, #5
 80077c4:	d824      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80077c6:	a201      	add	r2, pc, #4	@ (adr r2, 80077cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	08007819 	.word	0x08007819
 80077d0:	080077e5 	.word	0x080077e5
 80077d4:	080077fb 	.word	0x080077fb
 80077d8:	08007819 	.word	0x08007819
 80077dc:	08007819 	.word	0x08007819
 80077e0:	08007819 	.word	0x08007819
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	3308      	adds	r3, #8
 80077ea:	2101      	movs	r1, #1
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 ff71 	bl	80086d4 <RCCEx_PLL2_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	3328      	adds	r3, #40	@ 0x28
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f001 f818 	bl	8008838 <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007822:	4b96      	ldr	r3, [pc, #600]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	f023 0107 	bic.w	r1, r3, #7
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007830:	4a92      	ldr	r2, [pc, #584]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007832:	430b      	orrs	r3, r1
 8007834:	6553      	str	r3, [r2, #84]	@ 0x54
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f002 0304 	and.w	r3, r2, #4
 800784c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007856:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800785a:	460b      	mov	r3, r1
 800785c:	4313      	orrs	r3, r2
 800785e:	d044      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007868:	2b05      	cmp	r3, #5
 800786a:	d825      	bhi.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800786c:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	080078c1 	.word	0x080078c1
 8007878:	0800788d 	.word	0x0800788d
 800787c:	080078a3 	.word	0x080078a3
 8007880:	080078c1 	.word	0x080078c1
 8007884:	080078c1 	.word	0x080078c1
 8007888:	080078c1 	.word	0x080078c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	3308      	adds	r3, #8
 8007892:	2101      	movs	r1, #1
 8007894:	4618      	mov	r0, r3
 8007896:	f000 ff1d 	bl	80086d4 <RCCEx_PLL2_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80078a0:	e00f      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a6:	3328      	adds	r3, #40	@ 0x28
 80078a8:	2101      	movs	r1, #1
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 ffc4 	bl	8008838 <RCCEx_PLL3_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80078b6:	e004      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078be:	e000      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80078c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078ca:	4b6c      	ldr	r3, [pc, #432]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ce:	f023 0107 	bic.w	r1, r3, #7
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078da:	4a68      	ldr	r2, [pc, #416]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078dc:	430b      	orrs	r3, r1
 80078de:	6593      	str	r3, [r2, #88]	@ 0x58
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f002 0320 	and.w	r3, r2, #32
 80078f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007904:	460b      	mov	r3, r1
 8007906:	4313      	orrs	r3, r2
 8007908:	d055      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007916:	d033      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800791c:	d82c      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007922:	d02f      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007928:	d826      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800792a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800792e:	d02b      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007934:	d820      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800793a:	d012      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800793c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007940:	d81a      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d022      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800794a:	d115      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007950:	3308      	adds	r3, #8
 8007952:	2100      	movs	r1, #0
 8007954:	4618      	mov	r0, r3
 8007956:	f000 febd 	bl	80086d4 <RCCEx_PLL2_Config>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007960:	e015      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007966:	3328      	adds	r3, #40	@ 0x28
 8007968:	2102      	movs	r1, #2
 800796a:	4618      	mov	r0, r3
 800796c:	f000 ff64 	bl	8008838 <RCCEx_PLL3_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007976:	e00a      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800797e:	e006      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007980:	bf00      	nop
 8007982:	e004      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007984:	bf00      	nop
 8007986:	e002      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007988:	bf00      	nop
 800798a:	e000      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800798c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007996:	4b39      	ldr	r3, [pc, #228]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a6:	4a35      	ldr	r2, [pc, #212]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80079ac:	e003      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80079c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079c6:	2300      	movs	r3, #0
 80079c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4313      	orrs	r3, r2
 80079d4:	d058      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079e2:	d033      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80079e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079e8:	d82c      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ee:	d02f      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f4:	d826      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079fa:	d02b      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a00:	d820      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a06:	d012      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a0c:	d81a      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d022      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a16:	d115      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fe57 	bl	80086d4 <RCCEx_PLL2_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a2c:	e015      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a32:	3328      	adds	r3, #40	@ 0x28
 8007a34:	2102      	movs	r1, #2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fefe 	bl	8008838 <RCCEx_PLL3_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a42:	e00a      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a4a:	e006      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a4c:	bf00      	nop
 8007a4e:	e004      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10e      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a62:	4b06      	ldr	r3, [pc, #24]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a72:	4a02      	ldr	r2, [pc, #8]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a74:	430b      	orrs	r3, r1
 8007a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a78:	e006      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a7a:	bf00      	nop
 8007a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	d055      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ab0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ab4:	d033      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007ab6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007aba:	d82c      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac0:	d02f      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac6:	d826      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ac8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007acc:	d02b      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007ace:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ad2:	d820      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad8:	d012      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ade:	d81a      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d022      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae8:	d115      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aee:	3308      	adds	r3, #8
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fdee 	bl	80086d4 <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007afe:	e015      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b04:	3328      	adds	r3, #40	@ 0x28
 8007b06:	2102      	movs	r1, #2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fe95 	bl	8008838 <RCCEx_PLL3_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b14:	e00a      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b1c:	e006      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b1e:	bf00      	nop
 8007b20:	e004      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b22:	bf00      	nop
 8007b24:	e002      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b34:	4ba1      	ldr	r3, [pc, #644]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b44:	4a9d      	ldr	r2, [pc, #628]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b46:	430b      	orrs	r3, r1
 8007b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b4a:	e003      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f002 0308 	and.w	r3, r2, #8
 8007b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4313      	orrs	r3, r2
 8007b72:	d01e      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b80:	d10c      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	3328      	adds	r3, #40	@ 0x28
 8007b88:	2102      	movs	r1, #2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fe54 	bl	8008838 <RCCEx_PLL3_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b9c:	4b87      	ldr	r3, [pc, #540]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bac:	4a83      	ldr	r2, [pc, #524]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f002 0310 	and.w	r3, r2, #16
 8007bbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	d01e      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bde:	d10c      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be4:	3328      	adds	r3, #40	@ 0x28
 8007be6:	2102      	movs	r1, #2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fe25 	bl	8008838 <RCCEx_PLL3_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bfa:	4b70      	ldr	r3, [pc, #448]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c0a:	4a6c      	ldr	r2, [pc, #432]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d03e      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c3c:	d022      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c42:	d81b      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c4c:	d00b      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007c4e:	e015      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c54:	3308      	adds	r3, #8
 8007c56:	2100      	movs	r1, #0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fd3b 	bl	80086d4 <RCCEx_PLL2_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c64:	e00f      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6a:	3328      	adds	r3, #40	@ 0x28
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fde2 	bl	8008838 <RCCEx_PLL3_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c7a:	e004      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c82:	e000      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10b      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c9e:	4a47      	ldr	r2, [pc, #284]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ca4:	e003      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007cba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cc0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d03b      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cd6:	d01f      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cdc:	d818      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ce2:	d003      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ce8:	d007      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007cea:	e011      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cec:	4b33      	ldr	r3, [pc, #204]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	4a32      	ldr	r2, [pc, #200]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cf8:	e00f      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfe:	3328      	adds	r3, #40	@ 0x28
 8007d00:	2101      	movs	r1, #1
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fd98 	bl	8008838 <RCCEx_PLL3_Config>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d0e:	e004      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d16:	e000      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d22:	4b26      	ldr	r3, [pc, #152]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d32:	4a22      	ldr	r2, [pc, #136]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d38:	e003      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007d4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d50:	2300      	movs	r3, #0
 8007d52:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	d034      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d6c:	d007      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d6e:	e011      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d70:	4b12      	ldr	r3, [pc, #72]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	4a11      	ldr	r2, [pc, #68]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d7c:	e00e      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	3308      	adds	r3, #8
 8007d84:	2102      	movs	r1, #2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fca4 	bl	80086d4 <RCCEx_PLL2_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d92:	e003      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10d      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db2:	4a02      	ldr	r2, [pc, #8]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007db8:	e006      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007dba:	bf00      	nop
 8007dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007dde:	460b      	mov	r3, r1
 8007de0:	4313      	orrs	r3, r2
 8007de2:	d00c      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de8:	3328      	adds	r3, #40	@ 0x28
 8007dea:	2102      	movs	r1, #2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 fd23 	bl	8008838 <RCCEx_PLL3_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e14:	460b      	mov	r3, r1
 8007e16:	4313      	orrs	r3, r2
 8007e18:	d038      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e26:	d018      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e2c:	d811      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e32:	d014      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e38:	d80b      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d011      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e42:	d106      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e44:	4bc3      	ldr	r3, [pc, #780]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4ac2      	ldr	r2, [pc, #776]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e50:	e008      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e58:	e004      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e5a:	bf00      	nop
 8007e5c:	e002      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e000      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10b      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e6c:	4bb9      	ldr	r3, [pc, #740]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e7c:	4ab5      	ldr	r2, [pc, #724]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e82:	e003      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ea8:	4baa      	ldr	r3, [pc, #680]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb6:	4aa7      	ldr	r2, [pc, #668]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ec8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007eca:	2300      	movs	r3, #0
 8007ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	d00a      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ed8:	4b9e      	ldr	r3, [pc, #632]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ee8:	4a9a      	ldr	r2, [pc, #616]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eea:	430b      	orrs	r3, r1
 8007eec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007efc:	2300      	movs	r3, #0
 8007efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f04:	460b      	mov	r3, r1
 8007f06:	4313      	orrs	r3, r2
 8007f08:	d009      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f0a:	4b92      	ldr	r3, [pc, #584]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f18:	4a8e      	ldr	r2, [pc, #568]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007f34:	460b      	mov	r3, r1
 8007f36:	4313      	orrs	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f3a:	4b86      	ldr	r3, [pc, #536]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	4a85      	ldr	r2, [pc, #532]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f44:	6113      	str	r3, [r2, #16]
 8007f46:	4b83      	ldr	r3, [pc, #524]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f48:	6919      	ldr	r1, [r3, #16]
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f52:	4a80      	ldr	r2, [pc, #512]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f54:	430b      	orrs	r3, r1
 8007f56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d009      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f74:	4b77      	ldr	r3, [pc, #476]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f82:	4a74      	ldr	r2, [pc, #464]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f84:	430b      	orrs	r3, r1
 8007f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f96:	2300      	movs	r3, #0
 8007f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	d00a      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fb4:	4a67      	ldr	r2, [pc, #412]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d011      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	3308      	adds	r3, #8
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fb78 	bl	80086d4 <RCCEx_PLL2_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	2100      	movs	r1, #0
 8008004:	6239      	str	r1, [r7, #32]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
 800800c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008010:	460b      	mov	r3, r1
 8008012:	4313      	orrs	r3, r2
 8008014:	d011      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801a:	3308      	adds	r3, #8
 800801c:	2101      	movs	r1, #1
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fb58 	bl	80086d4 <RCCEx_PLL2_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	2100      	movs	r1, #0
 8008044:	61b9      	str	r1, [r7, #24]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008050:	460b      	mov	r3, r1
 8008052:	4313      	orrs	r3, r2
 8008054:	d011      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	3308      	adds	r3, #8
 800805c:	2102      	movs	r1, #2
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fb38 	bl	80086d4 <RCCEx_PLL2_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	2100      	movs	r1, #0
 8008084:	6139      	str	r1, [r7, #16]
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008090:	460b      	mov	r3, r1
 8008092:	4313      	orrs	r3, r2
 8008094:	d011      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809a:	3328      	adds	r3, #40	@ 0x28
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fbca 	bl	8008838 <RCCEx_PLL3_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80080aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	2100      	movs	r1, #0
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d011      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	3328      	adds	r3, #40	@ 0x28
 80080dc:	2101      	movs	r1, #1
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fbaa 	bl	8008838 <RCCEx_PLL3_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	2100      	movs	r1, #0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008110:	460b      	mov	r3, r1
 8008112:	4313      	orrs	r3, r2
 8008114:	d011      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	3328      	adds	r3, #40	@ 0x28
 800811c:	2102      	movs	r1, #2
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fb8a 	bl	8008838 <RCCEx_PLL3_Config>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800812a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800813a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e000      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
}
 8008148:	4618      	mov	r0, r3
 800814a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800814e:	46bd      	mov	sp, r7
 8008150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008154:	58024400 	.word	0x58024400

08008158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800815c:	f7fe fd96 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8008160:	4602      	mov	r2, r0
 8008162:	4b06      	ldr	r3, [pc, #24]	@ (800817c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	091b      	lsrs	r3, r3, #4
 8008168:	f003 0307 	and.w	r3, r3, #7
 800816c:	4904      	ldr	r1, [pc, #16]	@ (8008180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800816e:	5ccb      	ldrb	r3, [r1, r3]
 8008170:	f003 031f 	and.w	r3, r3, #31
 8008174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008178:	4618      	mov	r0, r3
 800817a:	bd80      	pop	{r7, pc}
 800817c:	58024400 	.word	0x58024400
 8008180:	08010640 	.word	0x08010640

08008184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008184:	b480      	push	{r7}
 8008186:	b089      	sub	sp, #36	@ 0x24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800818c:	4ba1      	ldr	r3, [pc, #644]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800818e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008196:	4b9f      	ldr	r3, [pc, #636]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819a:	0b1b      	lsrs	r3, r3, #12
 800819c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081a2:	4b9c      	ldr	r3, [pc, #624]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	091b      	lsrs	r3, r3, #4
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081ae:	4b99      	ldr	r3, [pc, #612]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8111 	beq.w	80083f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	f000 8083 	beq.w	80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	f200 80a1 	bhi.w	8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d056      	beq.n	800829c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80081ee:	e099      	b.n	8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081f0:	4b88      	ldr	r3, [pc, #544]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d02d      	beq.n	8008258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081fc:	4b85      	ldr	r3, [pc, #532]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	08db      	lsrs	r3, r3, #3
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	4a84      	ldr	r2, [pc, #528]	@ (8008418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008208:	fa22 f303 	lsr.w	r3, r2, r3
 800820c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008226:	4b7b      	ldr	r3, [pc, #492]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008236:	ed97 6a03 	vldr	s12, [r7, #12]
 800823a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800823e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800824a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008256:	e087      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008262:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800826a:	4b6a      	ldr	r3, [pc, #424]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827a:	ed97 6a03 	vldr	s12, [r7, #12]
 800827e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800828e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800829a:	e065      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ae:	4b59      	ldr	r3, [pc, #356]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082be:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082de:	e043      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f2:	4b48      	ldr	r3, [pc, #288]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008302:	ed97 6a03 	vldr	s12, [r7, #12]
 8008306:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800830a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008322:	e021      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008336:	4b37      	ldr	r3, [pc, #220]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008346:	ed97 6a03 	vldr	s12, [r7, #12]
 800834a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008368:	4b2a      	ldr	r3, [pc, #168]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	0a5b      	lsrs	r3, r3, #9
 800836e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800837e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008382:	edd7 6a07 	vldr	s13, [r7, #28]
 8008386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800838e:	ee17 2a90 	vmov	r2, s15
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008396:	4b1f      	ldr	r3, [pc, #124]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839a:	0c1b      	lsrs	r3, r3, #16
 800839c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083bc:	ee17 2a90 	vmov	r2, s15
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80083c4:	4b13      	ldr	r3, [pc, #76]	@ (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c8:	0e1b      	lsrs	r3, r3, #24
 80083ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083de:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ea:	ee17 2a90 	vmov	r2, s15
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083f2:	e008      	b.n	8008406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	609a      	str	r2, [r3, #8]
}
 8008406:	bf00      	nop
 8008408:	3724      	adds	r7, #36	@ 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	46000000 	.word	0x46000000
 8008420:	4c742400 	.word	0x4c742400
 8008424:	4a742400 	.word	0x4a742400
 8008428:	4bbebc20 	.word	0x4bbebc20

0800842c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800842c:	b480      	push	{r7}
 800842e:	b089      	sub	sp, #36	@ 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008434:	4ba1      	ldr	r3, [pc, #644]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008438:	f003 0303 	and.w	r3, r3, #3
 800843c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800843e:	4b9f      	ldr	r3, [pc, #636]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008442:	0d1b      	lsrs	r3, r3, #20
 8008444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800844a:	4b9c      	ldr	r3, [pc, #624]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844e:	0a1b      	lsrs	r3, r3, #8
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008456:	4b99      	ldr	r3, [pc, #612]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845a:	08db      	lsrs	r3, r3, #3
 800845c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8111 	beq.w	800869c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b02      	cmp	r3, #2
 800847e:	f000 8083 	beq.w	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b02      	cmp	r3, #2
 8008486:	f200 80a1 	bhi.w	80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d056      	beq.n	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008496:	e099      	b.n	80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008498:	4b88      	ldr	r3, [pc, #544]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d02d      	beq.n	8008500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084a4:	4b85      	ldr	r3, [pc, #532]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	08db      	lsrs	r3, r3, #3
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	4a84      	ldr	r2, [pc, #528]	@ (80086c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ce:	4b7b      	ldr	r3, [pc, #492]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084de:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084fe:	e087      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80086c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800850e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008512:	4b6a      	ldr	r3, [pc, #424]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008522:	ed97 6a03 	vldr	s12, [r7, #12]
 8008526:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800852a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008542:	e065      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008556:	4b59      	ldr	r3, [pc, #356]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008566:	ed97 6a03 	vldr	s12, [r7, #12]
 800856a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008586:	e043      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859a:	4b48      	ldr	r3, [pc, #288]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800859c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ca:	e021      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80086cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085de:	4b37      	ldr	r3, [pc, #220]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800860e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008610:	4b2a      	ldr	r3, [pc, #168]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008614:	0a5b      	lsrs	r3, r3, #9
 8008616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800862a:	edd7 6a07 	vldr	s13, [r7, #28]
 800862e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008636:	ee17 2a90 	vmov	r2, s15
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800863e:	4b1f      	ldr	r3, [pc, #124]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008642:	0c1b      	lsrs	r3, r3, #16
 8008644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008658:	edd7 6a07 	vldr	s13, [r7, #28]
 800865c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008664:	ee17 2a90 	vmov	r2, s15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800866c:	4b13      	ldr	r3, [pc, #76]	@ (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800866e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008670:	0e1b      	lsrs	r3, r3, #24
 8008672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008686:	edd7 6a07 	vldr	s13, [r7, #28]
 800868a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008692:	ee17 2a90 	vmov	r2, s15
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800869a:	e008      	b.n	80086ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	609a      	str	r2, [r3, #8]
}
 80086ae:	bf00      	nop
 80086b0:	3724      	adds	r7, #36	@ 0x24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	58024400 	.word	0x58024400
 80086c0:	03d09000 	.word	0x03d09000
 80086c4:	46000000 	.word	0x46000000
 80086c8:	4c742400 	.word	0x4c742400
 80086cc:	4a742400 	.word	0x4a742400
 80086d0:	4bbebc20 	.word	0x4bbebc20

080086d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086e2:	4b53      	ldr	r3, [pc, #332]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80086e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d101      	bne.n	80086f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e099      	b.n	8008826 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80086f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a4e      	ldr	r2, [pc, #312]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80086f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086fe:	f7fa f92b 	bl	8002958 <HAL_GetTick>
 8008702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008704:	e008      	b.n	8008718 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008706:	f7fa f927 	bl	8002958 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d901      	bls.n	8008718 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e086      	b.n	8008826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008718:	4b45      	ldr	r3, [pc, #276]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1f0      	bne.n	8008706 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008724:	4b42      	ldr	r3, [pc, #264]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 8008726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008728:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	031b      	lsls	r3, r3, #12
 8008732:	493f      	ldr	r1, [pc, #252]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 8008734:	4313      	orrs	r3, r2
 8008736:	628b      	str	r3, [r1, #40]	@ 0x28
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	3b01      	subs	r3, #1
 800873e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	3b01      	subs	r3, #1
 8008748:	025b      	lsls	r3, r3, #9
 800874a:	b29b      	uxth	r3, r3
 800874c:	431a      	orrs	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	3b01      	subs	r3, #1
 8008754:	041b      	lsls	r3, r3, #16
 8008756:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800875a:	431a      	orrs	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	3b01      	subs	r3, #1
 8008762:	061b      	lsls	r3, r3, #24
 8008764:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008768:	4931      	ldr	r1, [pc, #196]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 800876a:	4313      	orrs	r3, r2
 800876c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800876e:	4b30      	ldr	r3, [pc, #192]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 8008770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008772:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	492d      	ldr	r1, [pc, #180]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 800877c:	4313      	orrs	r3, r2
 800877e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008780:	4b2b      	ldr	r3, [pc, #172]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 8008782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008784:	f023 0220 	bic.w	r2, r3, #32
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	4928      	ldr	r1, [pc, #160]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 800878e:	4313      	orrs	r3, r2
 8008790:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008792:	4b27      	ldr	r3, [pc, #156]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 8008794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008796:	4a26      	ldr	r2, [pc, #152]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 8008798:	f023 0310 	bic.w	r3, r3, #16
 800879c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800879e:	4b24      	ldr	r3, [pc, #144]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087a2:	4b24      	ldr	r3, [pc, #144]	@ (8008834 <RCCEx_PLL2_Config+0x160>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	69d2      	ldr	r2, [r2, #28]
 80087aa:	00d2      	lsls	r2, r2, #3
 80087ac:	4920      	ldr	r1, [pc, #128]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	f043 0310 	orr.w	r3, r3, #16
 80087bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d106      	bne.n	80087d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c8:	4a19      	ldr	r2, [pc, #100]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087d0:	e00f      	b.n	80087f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d106      	bne.n	80087e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087d8:	4b15      	ldr	r3, [pc, #84]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087dc:	4a14      	ldr	r2, [pc, #80]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087e4:	e005      	b.n	80087f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087e6:	4b12      	ldr	r3, [pc, #72]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ea:	4a11      	ldr	r2, [pc, #68]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80087f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 80087f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087fe:	f7fa f8ab 	bl	8002958 <HAL_GetTick>
 8008802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008804:	e008      	b.n	8008818 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008806:	f7fa f8a7 	bl	8002958 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	2b02      	cmp	r3, #2
 8008812:	d901      	bls.n	8008818 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e006      	b.n	8008826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008818:	4b05      	ldr	r3, [pc, #20]	@ (8008830 <RCCEx_PLL2_Config+0x15c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0f0      	beq.n	8008806 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	58024400 	.word	0x58024400
 8008834:	ffff0007 	.word	0xffff0007

08008838 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008846:	4b53      	ldr	r3, [pc, #332]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	2b03      	cmp	r3, #3
 8008850:	d101      	bne.n	8008856 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e099      	b.n	800898a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008856:	4b4f      	ldr	r3, [pc, #316]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a4e      	ldr	r2, [pc, #312]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800885c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008862:	f7fa f879 	bl	8002958 <HAL_GetTick>
 8008866:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008868:	e008      	b.n	800887c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800886a:	f7fa f875 	bl	8002958 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e086      	b.n	800898a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800887c:	4b45      	ldr	r3, [pc, #276]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f0      	bne.n	800886a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008888:	4b42      	ldr	r3, [pc, #264]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800888a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	051b      	lsls	r3, r3, #20
 8008896:	493f      	ldr	r1, [pc, #252]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008898:	4313      	orrs	r3, r2
 800889a:	628b      	str	r3, [r1, #40]	@ 0x28
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	025b      	lsls	r3, r3, #9
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	431a      	orrs	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	041b      	lsls	r3, r3, #16
 80088ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	061b      	lsls	r3, r3, #24
 80088c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088cc:	4931      	ldr	r1, [pc, #196]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088d2:	4b30      	ldr	r3, [pc, #192]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	492d      	ldr	r1, [pc, #180]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	4928      	ldr	r1, [pc, #160]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80088f6:	4b27      	ldr	r3, [pc, #156]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 80088f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fa:	4a26      	ldr	r2, [pc, #152]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 80088fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008900:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008902:	4b24      	ldr	r3, [pc, #144]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008906:	4b24      	ldr	r3, [pc, #144]	@ (8008998 <RCCEx_PLL3_Config+0x160>)
 8008908:	4013      	ands	r3, r2
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	69d2      	ldr	r2, [r2, #28]
 800890e:	00d2      	lsls	r2, r2, #3
 8008910:	4920      	ldr	r1, [pc, #128]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008912:	4313      	orrs	r3, r2
 8008914:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008916:	4b1f      	ldr	r3, [pc, #124]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	4a1e      	ldr	r2, [pc, #120]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800891c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008920:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008928:	4b1a      	ldr	r3, [pc, #104]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800892a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892c:	4a19      	ldr	r2, [pc, #100]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800892e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008934:	e00f      	b.n	8008956 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d106      	bne.n	800894a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800893c:	4b15      	ldr	r3, [pc, #84]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	4a14      	ldr	r2, [pc, #80]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008942:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008946:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008948:	e005      	b.n	8008956 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800894a:	4b12      	ldr	r3, [pc, #72]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894e:	4a11      	ldr	r2, [pc, #68]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008950:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008954:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008956:	4b0f      	ldr	r3, [pc, #60]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a0e      	ldr	r2, [pc, #56]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800895c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008962:	f7f9 fff9 	bl	8002958 <HAL_GetTick>
 8008966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008968:	e008      	b.n	800897c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800896a:	f7f9 fff5 	bl	8002958 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b02      	cmp	r3, #2
 8008976:	d901      	bls.n	800897c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e006      	b.n	800898a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800897c:	4b05      	ldr	r3, [pc, #20]	@ (8008994 <RCCEx_PLL3_Config+0x15c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0f0      	beq.n	800896a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	58024400 	.word	0x58024400
 8008998:	ffff0007 	.word	0xffff0007

0800899c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e10f      	b.n	8008bce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a87      	ldr	r2, [pc, #540]	@ (8008bd8 <HAL_SPI_Init+0x23c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00f      	beq.n	80089de <HAL_SPI_Init+0x42>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a86      	ldr	r2, [pc, #536]	@ (8008bdc <HAL_SPI_Init+0x240>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00a      	beq.n	80089de <HAL_SPI_Init+0x42>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a84      	ldr	r2, [pc, #528]	@ (8008be0 <HAL_SPI_Init+0x244>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d005      	beq.n	80089de <HAL_SPI_Init+0x42>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	2b0f      	cmp	r3, #15
 80089d8:	d901      	bls.n	80089de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e0f7      	b.n	8008bce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 fa62 	bl	8009ea8 <SPI_GetPacketSize>
 80089e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a7b      	ldr	r2, [pc, #492]	@ (8008bd8 <HAL_SPI_Init+0x23c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00c      	beq.n	8008a0a <HAL_SPI_Init+0x6e>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a79      	ldr	r2, [pc, #484]	@ (8008bdc <HAL_SPI_Init+0x240>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d007      	beq.n	8008a0a <HAL_SPI_Init+0x6e>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a78      	ldr	r2, [pc, #480]	@ (8008be0 <HAL_SPI_Init+0x244>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d002      	beq.n	8008a0a <HAL_SPI_Init+0x6e>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d811      	bhi.n	8008a2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a0e:	4a72      	ldr	r2, [pc, #456]	@ (8008bd8 <HAL_SPI_Init+0x23c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d009      	beq.n	8008a28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a70      	ldr	r2, [pc, #448]	@ (8008bdc <HAL_SPI_Init+0x240>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d004      	beq.n	8008a28 <HAL_SPI_Init+0x8c>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a6f      	ldr	r2, [pc, #444]	@ (8008be0 <HAL_SPI_Init+0x244>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d104      	bne.n	8008a32 <HAL_SPI_Init+0x96>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b10      	cmp	r3, #16
 8008a2c:	d901      	bls.n	8008a32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e0cd      	b.n	8008bce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7f9 fb4e 	bl	80020e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0201 	bic.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008a6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a78:	d119      	bne.n	8008aae <HAL_SPI_Init+0x112>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a82:	d103      	bne.n	8008a8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d008      	beq.n	8008a9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10c      	bne.n	8008aae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a9c:	d107      	bne.n	8008aae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008aac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00f      	beq.n	8008ada <HAL_SPI_Init+0x13e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2b06      	cmp	r3, #6
 8008ac0:	d90b      	bls.n	8008ada <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	e007      	b.n	8008aea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ae8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	69da      	ldr	r2, [r3, #28]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af2:	431a      	orrs	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008afc:	ea42 0103 	orr.w	r1, r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	431a      	orrs	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b4a:	ea42 0103 	orr.w	r1, r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d113      	bne.n	8008b8a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0201 	bic.w	r2, r2, #1
 8008b98:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	40013000 	.word	0x40013000
 8008bdc:	40003800 	.word	0x40003800
 8008be0:	40003c00 	.word	0x40003c00

08008be4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3320      	adds	r3, #32
 8008bfa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bfc:	f7f9 feac 	bl	8002958 <HAL_GetTick>
 8008c00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d001      	beq.n	8008c12 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e1d1      	b.n	8008fb6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <HAL_SPI_Transmit+0x3a>
 8008c18:	88fb      	ldrh	r3, [r7, #6]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e1c9      	b.n	8008fb6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <HAL_SPI_Transmit+0x4c>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e1c2      	b.n	8008fb6 <HAL_SPI_Transmit+0x3d2>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	88fa      	ldrh	r2, [r7, #6]
 8008c52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	88fa      	ldrh	r2, [r7, #6]
 8008c5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008c88:	d108      	bne.n	8008c9c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e009      	b.n	8008cb0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008cae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	4b96      	ldr	r3, [pc, #600]	@ (8008f10 <HAL_SPI_Transmit+0x32c>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	88f9      	ldrh	r1, [r7, #6]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	6812      	ldr	r2, [r2, #0]
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f042 0201 	orr.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cdc:	d107      	bne.n	8008cee <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	2b0f      	cmp	r3, #15
 8008cf4:	d947      	bls.n	8008d86 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008cf6:	e03f      	b.n	8008d78 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d114      	bne.n	8008d30 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6812      	ldr	r2, [r2, #0]
 8008d10:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d16:	1d1a      	adds	r2, r3, #4
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008d2e:	e023      	b.n	8008d78 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d30:	f7f9 fe12 	bl	8002958 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d803      	bhi.n	8008d48 <HAL_SPI_Transmit+0x164>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d46:	d102      	bne.n	8008d4e <HAL_SPI_Transmit+0x16a>
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d114      	bne.n	8008d78 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 ffdc 	bl	8009d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e11e      	b.n	8008fb6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1b9      	bne.n	8008cf8 <HAL_SPI_Transmit+0x114>
 8008d84:	e0f1      	b.n	8008f6a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	2b07      	cmp	r3, #7
 8008d8c:	f240 80e6 	bls.w	8008f5c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008d90:	e05d      	b.n	8008e4e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d132      	bne.n	8008e06 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d918      	bls.n	8008dde <HAL_SPI_Transmit+0x1fa>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d014      	beq.n	8008dde <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6812      	ldr	r2, [r2, #0]
 8008dbe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dc4:	1d1a      	adds	r2, r3, #4
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	3b02      	subs	r3, #2
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ddc:	e037      	b.n	8008e4e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008de2:	881a      	ldrh	r2, [r3, #0]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dec:	1c9a      	adds	r2, r3, #2
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008e04:	e023      	b.n	8008e4e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e06:	f7f9 fda7 	bl	8002958 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d803      	bhi.n	8008e1e <HAL_SPI_Transmit+0x23a>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d102      	bne.n	8008e24 <HAL_SPI_Transmit+0x240>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d114      	bne.n	8008e4e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 ff71 	bl	8009d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e0b3      	b.n	8008fb6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d19b      	bne.n	8008d92 <HAL_SPI_Transmit+0x1ae>
 8008e5a:	e086      	b.n	8008f6a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d154      	bne.n	8008f14 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d918      	bls.n	8008ea8 <HAL_SPI_Transmit+0x2c4>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7a:	2b40      	cmp	r3, #64	@ 0x40
 8008e7c:	d914      	bls.n	8008ea8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6812      	ldr	r2, [r2, #0]
 8008e88:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e8e:	1d1a      	adds	r2, r3, #4
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	3b04      	subs	r3, #4
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ea6:	e059      	b.n	8008f5c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d917      	bls.n	8008ee4 <HAL_SPI_Transmit+0x300>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d013      	beq.n	8008ee4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ec0:	881a      	ldrh	r2, [r3, #0]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eca:	1c9a      	adds	r2, r3, #2
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b02      	subs	r3, #2
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ee2:	e03b      	b.n	8008f5c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3320      	adds	r3, #32
 8008eee:	7812      	ldrb	r2, [r2, #0]
 8008ef0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008f0e:	e025      	b.n	8008f5c <HAL_SPI_Transmit+0x378>
 8008f10:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f14:	f7f9 fd20 	bl	8002958 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d803      	bhi.n	8008f2c <HAL_SPI_Transmit+0x348>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d102      	bne.n	8008f32 <HAL_SPI_Transmit+0x34e>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d114      	bne.n	8008f5c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f000 feea 	bl	8009d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e02c      	b.n	8008fb6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f47f af79 	bne.w	8008e5c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2200      	movs	r2, #0
 8008f72:	2108      	movs	r1, #8
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 ff69 	bl	8009e4c <SPI_WaitOnFlagUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f86:	f043 0220 	orr.w	r2, r3, #32
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 febb 	bl	8009d0c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
  }
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop

08008fc0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3301      	adds	r3, #1
 8008fda:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3330      	adds	r3, #48	@ 0x30
 8008fe2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fe4:	f7f9 fcb8 	bl	8002958 <HAL_GetTick>
 8008fe8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d001      	beq.n	8008ffa <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e250      	b.n	800949c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <HAL_SPI_Receive+0x46>
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e248      	b.n	800949c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_SPI_Receive+0x58>
 8009014:	2302      	movs	r3, #2
 8009016:	e241      	b.n	800949c <HAL_SPI_Receive+0x4dc>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2204      	movs	r2, #4
 8009024:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	88fa      	ldrh	r2, [r7, #6]
 800903a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	88fa      	ldrh	r2, [r7, #6]
 8009042:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009070:	d108      	bne.n	8009084 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	e009      	b.n	8009098 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009096:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	4b95      	ldr	r3, [pc, #596]	@ (80092f4 <HAL_SPI_Receive+0x334>)
 80090a0:	4013      	ands	r3, r2
 80090a2:	88f9      	ldrh	r1, [r7, #6]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	6812      	ldr	r2, [r2, #0]
 80090a8:	430b      	orrs	r3, r1
 80090aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0201 	orr.w	r2, r2, #1
 80090ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090c4:	d107      	bne.n	80090d6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	2b0f      	cmp	r3, #15
 80090dc:	d96c      	bls.n	80091b8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80090de:	e064      	b.n	80091aa <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d114      	bne.n	8009120 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009100:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009106:	1d1a      	adds	r2, r3, #4
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009112:	b29b      	uxth	r3, r3
 8009114:	3b01      	subs	r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800911e:	e044      	b.n	80091aa <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009126:	b29b      	uxth	r3, r3
 8009128:	8bfa      	ldrh	r2, [r7, #30]
 800912a:	429a      	cmp	r2, r3
 800912c:	d919      	bls.n	8009162 <HAL_SPI_Receive+0x1a2>
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d014      	beq.n	8009162 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009140:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009142:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009148:	1d1a      	adds	r2, r3, #4
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009160:	e023      	b.n	80091aa <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009162:	f7f9 fbf9 	bl	8002958 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d803      	bhi.n	800917a <HAL_SPI_Receive+0x1ba>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009178:	d102      	bne.n	8009180 <HAL_SPI_Receive+0x1c0>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d114      	bne.n	80091aa <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fdc3 	bl	8009d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800918c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e178      	b.n	800949c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d194      	bne.n	80090e0 <HAL_SPI_Receive+0x120>
 80091b6:	e15e      	b.n	8009476 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	2b07      	cmp	r3, #7
 80091be:	f240 8153 	bls.w	8009468 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80091c2:	e08f      	b.n	80092e4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d114      	bne.n	8009204 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	8812      	ldrh	r2, [r2, #0]
 80091e2:	b292      	uxth	r2, r2
 80091e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091ea:	1c9a      	adds	r2, r3, #2
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009202:	e06f      	b.n	80092e4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800920a:	b29b      	uxth	r3, r3
 800920c:	8bfa      	ldrh	r2, [r7, #30]
 800920e:	429a      	cmp	r2, r3
 8009210:	d924      	bls.n	800925c <HAL_SPI_Receive+0x29c>
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01f      	beq.n	800925c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	8812      	ldrh	r2, [r2, #0]
 8009224:	b292      	uxth	r2, r2
 8009226:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800922c:	1c9a      	adds	r2, r3, #2
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	8812      	ldrh	r2, [r2, #0]
 800923a:	b292      	uxth	r2, r2
 800923c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009242:	1c9a      	adds	r2, r3, #2
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b02      	subs	r3, #2
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800925a:	e043      	b.n	80092e4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b01      	cmp	r3, #1
 8009266:	d119      	bne.n	800929c <HAL_SPI_Receive+0x2dc>
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d014      	beq.n	800929c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	8812      	ldrh	r2, [r2, #0]
 800927a:	b292      	uxth	r2, r2
 800927c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009282:	1c9a      	adds	r2, r3, #2
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800928e:	b29b      	uxth	r3, r3
 8009290:	3b01      	subs	r3, #1
 8009292:	b29a      	uxth	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800929a:	e023      	b.n	80092e4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800929c:	f7f9 fb5c 	bl	8002958 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d803      	bhi.n	80092b4 <HAL_SPI_Receive+0x2f4>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d102      	bne.n	80092ba <HAL_SPI_Receive+0x2fa>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d114      	bne.n	80092e4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 fd26 	bl	8009d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e0db      	b.n	800949c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f47f af69 	bne.w	80091c4 <HAL_SPI_Receive+0x204>
 80092f2:	e0c0      	b.n	8009476 <HAL_SPI_Receive+0x4b6>
 80092f4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b01      	cmp	r3, #1
 800930c:	d117      	bne.n	800933e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800931a:	7812      	ldrb	r2, [r2, #0]
 800931c:	b2d2      	uxtb	r2, r2
 800931e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009330:	b29b      	uxth	r3, r3
 8009332:	3b01      	subs	r3, #1
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800933c:	e094      	b.n	8009468 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009344:	b29b      	uxth	r3, r3
 8009346:	8bfa      	ldrh	r2, [r7, #30]
 8009348:	429a      	cmp	r2, r3
 800934a:	d946      	bls.n	80093da <HAL_SPI_Receive+0x41a>
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d041      	beq.n	80093da <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009362:	7812      	ldrb	r2, [r2, #0]
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	b2d2      	uxtb	r2, r2
 8009382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800939a:	7812      	ldrb	r2, [r2, #0]
 800939c:	b2d2      	uxtb	r2, r2
 800939e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093b6:	7812      	ldrb	r2, [r2, #0]
 80093b8:	b2d2      	uxtb	r2, r2
 80093ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b04      	subs	r3, #4
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80093d8:	e046      	b.n	8009468 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d81c      	bhi.n	8009420 <HAL_SPI_Receive+0x460>
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d017      	beq.n	8009420 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093fc:	7812      	ldrb	r2, [r2, #0]
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009412:	b29b      	uxth	r3, r3
 8009414:	3b01      	subs	r3, #1
 8009416:	b29a      	uxth	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800941e:	e023      	b.n	8009468 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009420:	f7f9 fa9a 	bl	8002958 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d803      	bhi.n	8009438 <HAL_SPI_Receive+0x478>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009436:	d102      	bne.n	800943e <HAL_SPI_Receive+0x47e>
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d114      	bne.n	8009468 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fc64 	bl	8009d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800944a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e019      	b.n	800949c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800946e:	b29b      	uxth	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	f47f af41 	bne.w	80092f8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fc48 	bl	8009d0c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800949a:	2300      	movs	r3, #0
  }
}
 800949c:	4618      	mov	r0, r3
 800949e:	3720      	adds	r7, #32
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d001      	beq.n	80094c2 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 80094be:	2302      	movs	r3, #2
 80094c0:	e19c      	b.n	80097fc <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <HAL_SPI_TransmitReceive_DMA+0x30>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <HAL_SPI_TransmitReceive_DMA+0x30>
 80094ce:	887b      	ldrh	r3, [r7, #2]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e191      	b.n	80097fc <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_SPI_TransmitReceive_DMA+0x42>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e18a      	b.n	80097fc <HAL_SPI_TransmitReceive_DMA+0x358>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2205      	movs	r2, #5
 80094f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	887a      	ldrh	r2, [r7, #2]
 8009508:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	887a      	ldrh	r2, [r7, #2]
 8009510:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	887a      	ldrh	r2, [r7, #2]
 800951e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	887a      	ldrh	r2, [r7, #2]
 8009526:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009544:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009554:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	2b0f      	cmp	r3, #15
 800955c:	d90b      	bls.n	8009576 <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009562:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8009564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009568:	d121      	bne.n	80095ae <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800956e:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8009570:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009574:	d11b      	bne.n	80095ae <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800957a:	2b07      	cmp	r3, #7
 800957c:	d91d      	bls.n	80095ba <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009582:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8009584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009588:	d005      	beq.n	8009596 <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800958e:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009594:	d10b      	bne.n	80095ae <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800959a:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800959c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095a0:	d00b      	beq.n	80095ba <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095a6:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80095a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095ac:	d005      	beq.n	80095ba <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e120      	b.n	80097fc <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	2b07      	cmp	r3, #7
 80095c0:	d840      	bhi.n	8009644 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095cc:	d109      	bne.n	80095e2 <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3301      	adds	r3, #1
 80095d8:	105b      	asrs	r3, r3, #1
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095ec:	d109      	bne.n	8009602 <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3303      	adds	r3, #3
 80095f8:	109b      	asrs	r3, r3, #2
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800960c:	d109      	bne.n	8009622 <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009614:	b29b      	uxth	r3, r3
 8009616:	3301      	adds	r3, #1
 8009618:	105b      	asrs	r3, r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800962c:	d12e      	bne.n	800968c <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009634:	b29b      	uxth	r3, r3
 8009636:	3303      	adds	r3, #3
 8009638:	109b      	asrs	r3, r3, #2
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009642:	e023      	b.n	800968c <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	2b0f      	cmp	r3, #15
 800964a:	d81f      	bhi.n	800968c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009656:	d109      	bne.n	800966c <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800965e:	b29b      	uxth	r3, r3
 8009660:	3301      	adds	r3, #1
 8009662:	105b      	asrs	r3, r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009676:	d109      	bne.n	800968c <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800967e:	b29b      	uxth	r3, r3
 8009680:	3301      	adds	r3, #1
 8009682:	105b      	asrs	r3, r3, #1
 8009684:	b29a      	uxth	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009690:	4a5c      	ldr	r2, [pc, #368]	@ (8009804 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8009692:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009698:	4a5b      	ldr	r2, [pc, #364]	@ (8009808 <HAL_SPI_TransmitReceive_DMA+0x364>)
 800969a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096a0:	4a5a      	ldr	r2, [pc, #360]	@ (800980c <HAL_SPI_TransmitReceive_DMA+0x368>)
 80096a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096a8:	2200      	movs	r2, #0
 80096aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3330      	adds	r3, #48	@ 0x30
 80096b6:	4619      	mov	r1, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096bc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80096c6:	f7f9 fe67 	bl	8003398 <HAL_DMA_Start_IT>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d011      	beq.n	80096f4 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096d6:	f043 0210 	orr.w	r2, r3, #16
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e083      	b.n	80097fc <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689a      	ldr	r2, [r3, #8]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009702:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009708:	2200      	movs	r2, #0
 800970a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009710:	2200      	movs	r2, #0
 8009712:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009718:	2200      	movs	r2, #0
 800971a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009720:	4a3a      	ldr	r2, [pc, #232]	@ (800980c <HAL_SPI_TransmitReceive_DMA+0x368>)
 8009722:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800972c:	4619      	mov	r1, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3320      	adds	r3, #32
 8009734:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800973c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800973e:	f7f9 fe2b 	bl	8003398 <HAL_DMA_Start_IT>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d016      	beq.n	8009776 <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800974c:	4618      	mov	r0, r3
 800974e:	f7fa f88d 	bl	800386c <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009758:	f043 0210 	orr.w	r2, r3, #16
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e042      	b.n	80097fc <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009780:	d108      	bne.n	8009794 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6859      	ldr	r1, [r3, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	4b20      	ldr	r3, [pc, #128]	@ (8009810 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800978e:	400b      	ands	r3, r1
 8009790:	6053      	str	r3, [r2, #4]
 8009792:	e009      	b.n	80097a8 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	4b1d      	ldr	r3, [pc, #116]	@ (8009810 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800979c:	4013      	ands	r3, r2
 800979e:	8879      	ldrh	r1, [r7, #2]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	6812      	ldr	r2, [r2, #0]
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689a      	ldr	r2, [r3, #8]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097b6:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80097c6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0201 	orr.w	r2, r2, #1
 80097d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097e0:	d107      	bne.n	80097f2 <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097f0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	08009c77 	.word	0x08009c77
 8009808:	08009c31 	.word	0x08009c31
 800980c:	08009c93 	.word	0x08009c93
 8009810:	ffff0000 	.word	0xffff0000

08009814 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	@ 0x28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800982c:	6a3a      	ldr	r2, [r7, #32]
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	4013      	ands	r3, r2
 8009832:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800983c:	2300      	movs	r3, #0
 800983e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009846:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3330      	adds	r3, #48	@ 0x30
 800984e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009856:	2b00      	cmp	r3, #0
 8009858:	d010      	beq.n	800987c <HAL_SPI_IRQHandler+0x68>
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	f003 0308 	and.w	r3, r3, #8
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00b      	beq.n	800987c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	699a      	ldr	r2, [r3, #24]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009872:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f9c3 	bl	8009c00 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800987a:	e192      	b.n	8009ba2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009882:	2b00      	cmp	r3, #0
 8009884:	d113      	bne.n	80098ae <HAL_SPI_IRQHandler+0x9a>
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	f003 0320 	and.w	r3, r3, #32
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10e      	bne.n	80098ae <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
    handled = 1UL;
 80098aa:	2301      	movs	r3, #1
 80098ac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10f      	bne.n	80098d8 <HAL_SPI_IRQHandler+0xc4>
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00a      	beq.n	80098d8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d105      	bne.n	80098d8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
    handled = 1UL;
 80098d4:	2301      	movs	r3, #1
 80098d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10f      	bne.n	8009902 <HAL_SPI_IRQHandler+0xee>
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00a      	beq.n	8009902 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d105      	bne.n	8009902 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
    handled = 1UL;
 80098fe:	2301      	movs	r3, #1
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	f040 8147 	bne.w	8009b98 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	f003 0308 	and.w	r3, r3, #8
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 808b 	beq.w	8009a2c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	699a      	ldr	r2, [r3, #24]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0208 	orr.w	r2, r2, #8
 8009924:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699a      	ldr	r2, [r3, #24]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0210 	orr.w	r2, r2, #16
 8009934:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	699a      	ldr	r2, [r3, #24]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009944:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	691a      	ldr	r2, [r3, #16]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0208 	bic.w	r2, r2, #8
 8009954:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d13d      	bne.n	80099e0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009964:	e036      	b.n	80099d4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	2b0f      	cmp	r3, #15
 800996c:	d90b      	bls.n	8009986 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009976:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009978:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800997e:	1d1a      	adds	r2, r3, #4
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	665a      	str	r2, [r3, #100]	@ 0x64
 8009984:	e01d      	b.n	80099c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2b07      	cmp	r3, #7
 800998c:	d90b      	bls.n	80099a6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	8812      	ldrh	r2, [r2, #0]
 8009996:	b292      	uxth	r2, r2
 8009998:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800999e:	1c9a      	adds	r2, r3, #2
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	665a      	str	r2, [r3, #100]	@ 0x64
 80099a4:	e00d      	b.n	80099c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099b2:	7812      	ldrb	r2, [r2, #0]
 80099b4:	b2d2      	uxtb	r2, r2
 80099b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	3b01      	subs	r3, #1
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1c2      	bne.n	8009966 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f993 	bl	8009d0c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f8f7 	bl	8009bec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80099fe:	e0d0      	b.n	8009ba2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009a00:	7cfb      	ldrb	r3, [r7, #19]
 8009a02:	2b05      	cmp	r3, #5
 8009a04:	d103      	bne.n	8009a0e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7f8 f8a2 	bl	8001b50 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009a0c:	e0c6      	b.n	8009b9c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009a0e:	7cfb      	ldrb	r3, [r7, #19]
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d103      	bne.n	8009a1c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f8d5 	bl	8009bc4 <HAL_SPI_RxCpltCallback>
    return;
 8009a1a:	e0bf      	b.n	8009b9c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009a1c:	7cfb      	ldrb	r3, [r7, #19]
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	f040 80bc 	bne.w	8009b9c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f8c3 	bl	8009bb0 <HAL_SPI_TxCpltCallback>
    return;
 8009a2a:	e0b7      	b.n	8009b9c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 80b5 	beq.w	8009ba2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00f      	beq.n	8009a62 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a48:	f043 0204 	orr.w	r2, r3, #4
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a60:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00f      	beq.n	8009a8c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a72:	f043 0201 	orr.w	r2, r3, #1
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699a      	ldr	r2, [r3, #24]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a8a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00f      	beq.n	8009ab6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a9c:	f043 0208 	orr.w	r2, r3, #8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	699a      	ldr	r2, [r3, #24]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ab4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00f      	beq.n	8009ae0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ac6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699a      	ldr	r2, [r3, #24]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 0220 	orr.w	r2, r2, #32
 8009ade:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d05a      	beq.n	8009ba0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0201 	bic.w	r2, r2, #1
 8009af8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6919      	ldr	r1, [r3, #16]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	4b28      	ldr	r3, [pc, #160]	@ (8009ba8 <HAL_SPI_IRQHandler+0x394>)
 8009b06:	400b      	ands	r3, r1
 8009b08:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009b10:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009b14:	d138      	bne.n	8009b88 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009b24:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d013      	beq.n	8009b56 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b32:	4a1e      	ldr	r2, [pc, #120]	@ (8009bac <HAL_SPI_IRQHandler+0x398>)
 8009b34:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fa f9b4 	bl	8003ea8 <HAL_DMA_Abort_IT>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d007      	beq.n	8009b56 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d020      	beq.n	8009ba0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b62:	4a12      	ldr	r2, [pc, #72]	@ (8009bac <HAL_SPI_IRQHandler+0x398>)
 8009b64:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fa f99c 	bl	8003ea8 <HAL_DMA_Abort_IT>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d014      	beq.n	8009ba0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b86:	e00b      	b.n	8009ba0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f82b 	bl	8009bec <HAL_SPI_ErrorCallback>
    return;
 8009b96:	e003      	b.n	8009ba0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009b98:	bf00      	nop
 8009b9a:	e002      	b.n	8009ba2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009b9c:	bf00      	nop
 8009b9e:	e000      	b.n	8009ba2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009ba0:	bf00      	nop
  }
}
 8009ba2:	3728      	adds	r7, #40	@ 0x28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	fffffc94 	.word	0xfffffc94
 8009bac:	08009cd9 	.word	0x08009cd9

08009bb0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c22:	b2db      	uxtb	r3, r3
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b07      	cmp	r3, #7
 8009c48:	d011      	beq.n	8009c6e <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c54:	d103      	bne.n	8009c5e <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7f7 ff7a 	bl	8001b50 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009c5c:	e007      	b.n	8009c6e <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f042 0208 	orr.w	r2, r2, #8
 8009c6c:	611a      	str	r2, [r3, #16]
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c82:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff ffa7 	bl	8009bd8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7fb fa71 	bl	8005188 <HAL_DMA_GetError>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d011      	beq.n	8009cd0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f82d 	bl	8009d0c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb8:	f043 0210 	orr.w	r2, r3, #16
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f7ff ff8e 	bl	8009bec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff ff74 	bl	8009bec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d04:	bf00      	nop
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699a      	ldr	r2, [r3, #24]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f042 0208 	orr.w	r2, r2, #8
 8009d2a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	699a      	ldr	r2, [r3, #24]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f042 0210 	orr.w	r2, r2, #16
 8009d3a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f022 0201 	bic.w	r2, r2, #1
 8009d4a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6919      	ldr	r1, [r3, #16]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4b3c      	ldr	r3, [pc, #240]	@ (8009e48 <SPI_CloseTransfer+0x13c>)
 8009d58:	400b      	ands	r3, r1
 8009d5a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d6a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	d014      	beq.n	8009da2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f003 0320 	and.w	r3, r3, #32
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00f      	beq.n	8009da2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699a      	ldr	r2, [r3, #24]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f042 0220 	orr.w	r2, r2, #32
 8009da0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d014      	beq.n	8009dd8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00f      	beq.n	8009dd8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dbe:	f043 0204 	orr.w	r2, r3, #4
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dd6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00f      	beq.n	8009e02 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009de8:	f043 0201 	orr.w	r2, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	699a      	ldr	r2, [r3, #24]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e00:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00f      	beq.n	8009e2c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e12:	f043 0208 	orr.w	r2, r3, #8
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	699a      	ldr	r2, [r3, #24]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e2a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009e3c:	bf00      	nop
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	fffffc90 	.word	0xfffffc90

08009e4c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	603b      	str	r3, [r7, #0]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e5c:	e010      	b.n	8009e80 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e5e:	f7f8 fd7b 	bl	8002958 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	683a      	ldr	r2, [r7, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d803      	bhi.n	8009e76 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e74:	d102      	bne.n	8009e7c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e00f      	b.n	8009ea0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	695a      	ldr	r2, [r3, #20]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	4013      	ands	r3, r2
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	bf0c      	ite	eq
 8009e90:	2301      	moveq	r3, #1
 8009e92:	2300      	movne	r3, #0
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d0df      	beq.n	8009e5e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb4:	095b      	lsrs	r3, r3, #5
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	3307      	adds	r3, #7
 8009ec6:	08db      	lsrs	r3, r3, #3
 8009ec8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	fb02 f303 	mul.w	r3, r2, r3
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e049      	b.n	8009f84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d106      	bne.n	8009f0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7f8 fa5f 	bl	80023c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f000 fad5 	bl	800a4cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d001      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e054      	b.n	800a04e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f042 0201 	orr.w	r2, r2, #1
 8009fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a26      	ldr	r2, [pc, #152]	@ (800a05c <HAL_TIM_Base_Start_IT+0xd0>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d022      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x80>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fce:	d01d      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x80>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a22      	ldr	r2, [pc, #136]	@ (800a060 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d018      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x80>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a21      	ldr	r2, [pc, #132]	@ (800a064 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d013      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x80>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a1f      	ldr	r2, [pc, #124]	@ (800a068 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d00e      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x80>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800a06c <HAL_TIM_Base_Start_IT+0xe0>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d009      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x80>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a1c      	ldr	r2, [pc, #112]	@ (800a070 <HAL_TIM_Base_Start_IT+0xe4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d004      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x80>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a1b      	ldr	r2, [pc, #108]	@ (800a074 <HAL_TIM_Base_Start_IT+0xe8>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d115      	bne.n	800a038 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	4b19      	ldr	r3, [pc, #100]	@ (800a078 <HAL_TIM_Base_Start_IT+0xec>)
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b06      	cmp	r3, #6
 800a01c:	d015      	beq.n	800a04a <HAL_TIM_Base_Start_IT+0xbe>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a024:	d011      	beq.n	800a04a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f042 0201 	orr.w	r2, r2, #1
 800a034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a036:	e008      	b.n	800a04a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f042 0201 	orr.w	r2, r2, #1
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e000      	b.n	800a04c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40010000 	.word	0x40010000
 800a060:	40000400 	.word	0x40000400
 800a064:	40000800 	.word	0x40000800
 800a068:	40000c00 	.word	0x40000c00
 800a06c:	40010400 	.word	0x40010400
 800a070:	40001800 	.word	0x40001800
 800a074:	40014000 	.word	0x40014000
 800a078:	00010007 	.word	0x00010007

0800a07c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f003 0302 	and.w	r3, r3, #2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d020      	beq.n	800a0e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f003 0302 	and.w	r3, r3, #2
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01b      	beq.n	800a0e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f06f 0202 	mvn.w	r2, #2
 800a0b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f9e2 	bl	800a490 <HAL_TIM_IC_CaptureCallback>
 800a0cc:	e005      	b.n	800a0da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f9d4 	bl	800a47c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f9e5 	bl	800a4a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f003 0304 	and.w	r3, r3, #4
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d020      	beq.n	800a12c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01b      	beq.n	800a12c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f06f 0204 	mvn.w	r2, #4
 800a0fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2202      	movs	r2, #2
 800a102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f9bc 	bl	800a490 <HAL_TIM_IC_CaptureCallback>
 800a118:	e005      	b.n	800a126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f9ae 	bl	800a47c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f9bf 	bl	800a4a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f003 0308 	and.w	r3, r3, #8
 800a132:	2b00      	cmp	r3, #0
 800a134:	d020      	beq.n	800a178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01b      	beq.n	800a178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f06f 0208 	mvn.w	r2, #8
 800a148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2204      	movs	r2, #4
 800a14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f996 	bl	800a490 <HAL_TIM_IC_CaptureCallback>
 800a164:	e005      	b.n	800a172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f988 	bl	800a47c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f999 	bl	800a4a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f003 0310 	and.w	r3, r3, #16
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d020      	beq.n	800a1c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f003 0310 	and.w	r3, r3, #16
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01b      	beq.n	800a1c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f06f 0210 	mvn.w	r2, #16
 800a194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2208      	movs	r2, #8
 800a19a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f970 	bl	800a490 <HAL_TIM_IC_CaptureCallback>
 800a1b0:	e005      	b.n	800a1be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f962 	bl	800a47c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f973 	bl	800a4a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00c      	beq.n	800a1e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d007      	beq.n	800a1e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f06f 0201 	mvn.w	r2, #1
 800a1e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7f7 fdc4 	bl	8001d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d104      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00c      	beq.n	800a216 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fb31 	bl	800a878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00c      	beq.n	800a23a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fb29 	bl	800a88c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00c      	beq.n	800a25e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d007      	beq.n	800a25e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f92d 	bl	800a4b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f003 0320 	and.w	r3, r3, #32
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00c      	beq.n	800a282 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d007      	beq.n	800a282 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f06f 0220 	mvn.w	r2, #32
 800a27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 faf1 	bl	800a864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a282:	bf00      	nop
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
	...

0800a28c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_TIM_ConfigClockSource+0x1c>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e0dc      	b.n	800a462 <HAL_TIM_ConfigClockSource+0x1d6>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	4b6a      	ldr	r3, [pc, #424]	@ (800a46c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a64      	ldr	r2, [pc, #400]	@ (800a470 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	f000 80a9 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2e4:	4a62      	ldr	r2, [pc, #392]	@ (800a470 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	f200 80ae 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2ec:	4a61      	ldr	r2, [pc, #388]	@ (800a474 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	f000 80a1 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2f4:	4a5f      	ldr	r2, [pc, #380]	@ (800a474 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	f200 80a6 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2fc:	4a5e      	ldr	r2, [pc, #376]	@ (800a478 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	f000 8099 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a304:	4a5c      	ldr	r2, [pc, #368]	@ (800a478 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a306:	4293      	cmp	r3, r2
 800a308:	f200 809e 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a30c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a310:	f000 8091 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a314:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a318:	f200 8096 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a31c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a320:	f000 8089 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a328:	f200 808e 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a32c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a330:	d03e      	beq.n	800a3b0 <HAL_TIM_ConfigClockSource+0x124>
 800a332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a336:	f200 8087 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a33a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a33e:	f000 8086 	beq.w	800a44e <HAL_TIM_ConfigClockSource+0x1c2>
 800a342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a346:	d87f      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a348:	2b70      	cmp	r3, #112	@ 0x70
 800a34a:	d01a      	beq.n	800a382 <HAL_TIM_ConfigClockSource+0xf6>
 800a34c:	2b70      	cmp	r3, #112	@ 0x70
 800a34e:	d87b      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a350:	2b60      	cmp	r3, #96	@ 0x60
 800a352:	d050      	beq.n	800a3f6 <HAL_TIM_ConfigClockSource+0x16a>
 800a354:	2b60      	cmp	r3, #96	@ 0x60
 800a356:	d877      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a358:	2b50      	cmp	r3, #80	@ 0x50
 800a35a:	d03c      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x14a>
 800a35c:	2b50      	cmp	r3, #80	@ 0x50
 800a35e:	d873      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a360:	2b40      	cmp	r3, #64	@ 0x40
 800a362:	d058      	beq.n	800a416 <HAL_TIM_ConfigClockSource+0x18a>
 800a364:	2b40      	cmp	r3, #64	@ 0x40
 800a366:	d86f      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a368:	2b30      	cmp	r3, #48	@ 0x30
 800a36a:	d064      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a36c:	2b30      	cmp	r3, #48	@ 0x30
 800a36e:	d86b      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a370:	2b20      	cmp	r3, #32
 800a372:	d060      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a374:	2b20      	cmp	r3, #32
 800a376:	d867      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d05c      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a37c:	2b10      	cmp	r3, #16
 800a37e:	d05a      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x1aa>
 800a380:	e062      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a392:	f000 f9b9 	bl	800a708 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	609a      	str	r2, [r3, #8]
      break;
 800a3ae:	e04f      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3c0:	f000 f9a2 	bl	800a708 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3d2:	609a      	str	r2, [r3, #8]
      break;
 800a3d4:	e03c      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f000 f912 	bl	800a60c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2150      	movs	r1, #80	@ 0x50
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 f96c 	bl	800a6cc <TIM_ITRx_SetConfig>
      break;
 800a3f4:	e02c      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a402:	461a      	mov	r2, r3
 800a404:	f000 f931 	bl	800a66a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2160      	movs	r1, #96	@ 0x60
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f95c 	bl	800a6cc <TIM_ITRx_SetConfig>
      break;
 800a414:	e01c      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a422:	461a      	mov	r2, r3
 800a424:	f000 f8f2 	bl	800a60c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2140      	movs	r1, #64	@ 0x40
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 f94c 	bl	800a6cc <TIM_ITRx_SetConfig>
      break;
 800a434:	e00c      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4619      	mov	r1, r3
 800a440:	4610      	mov	r0, r2
 800a442:	f000 f943 	bl	800a6cc <TIM_ITRx_SetConfig>
      break;
 800a446:	e003      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	73fb      	strb	r3, [r7, #15]
      break;
 800a44c:	e000      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a44e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a460:	7bfb      	ldrb	r3, [r7, #15]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	ffceff88 	.word	0xffceff88
 800a470:	00100040 	.word	0x00100040
 800a474:	00100030 	.word	0x00100030
 800a478:	00100020 	.word	0x00100020

0800a47c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a43      	ldr	r2, [pc, #268]	@ (800a5ec <TIM_Base_SetConfig+0x120>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d013      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4ea:	d00f      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a40      	ldr	r2, [pc, #256]	@ (800a5f0 <TIM_Base_SetConfig+0x124>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00b      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a3f      	ldr	r2, [pc, #252]	@ (800a5f4 <TIM_Base_SetConfig+0x128>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d007      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a3e      	ldr	r2, [pc, #248]	@ (800a5f8 <TIM_Base_SetConfig+0x12c>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d003      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a3d      	ldr	r2, [pc, #244]	@ (800a5fc <TIM_Base_SetConfig+0x130>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d108      	bne.n	800a51e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a32      	ldr	r2, [pc, #200]	@ (800a5ec <TIM_Base_SetConfig+0x120>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d01f      	beq.n	800a566 <TIM_Base_SetConfig+0x9a>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a52c:	d01b      	beq.n	800a566 <TIM_Base_SetConfig+0x9a>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a2f      	ldr	r2, [pc, #188]	@ (800a5f0 <TIM_Base_SetConfig+0x124>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d017      	beq.n	800a566 <TIM_Base_SetConfig+0x9a>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a2e      	ldr	r2, [pc, #184]	@ (800a5f4 <TIM_Base_SetConfig+0x128>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d013      	beq.n	800a566 <TIM_Base_SetConfig+0x9a>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a2d      	ldr	r2, [pc, #180]	@ (800a5f8 <TIM_Base_SetConfig+0x12c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d00f      	beq.n	800a566 <TIM_Base_SetConfig+0x9a>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a2c      	ldr	r2, [pc, #176]	@ (800a5fc <TIM_Base_SetConfig+0x130>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d00b      	beq.n	800a566 <TIM_Base_SetConfig+0x9a>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a2b      	ldr	r2, [pc, #172]	@ (800a600 <TIM_Base_SetConfig+0x134>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d007      	beq.n	800a566 <TIM_Base_SetConfig+0x9a>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a2a      	ldr	r2, [pc, #168]	@ (800a604 <TIM_Base_SetConfig+0x138>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d003      	beq.n	800a566 <TIM_Base_SetConfig+0x9a>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a29      	ldr	r2, [pc, #164]	@ (800a608 <TIM_Base_SetConfig+0x13c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d108      	bne.n	800a578 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a56c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4313      	orrs	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	4313      	orrs	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a14      	ldr	r2, [pc, #80]	@ (800a5ec <TIM_Base_SetConfig+0x120>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00f      	beq.n	800a5be <TIM_Base_SetConfig+0xf2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a16      	ldr	r2, [pc, #88]	@ (800a5fc <TIM_Base_SetConfig+0x130>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00b      	beq.n	800a5be <TIM_Base_SetConfig+0xf2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a15      	ldr	r2, [pc, #84]	@ (800a600 <TIM_Base_SetConfig+0x134>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d007      	beq.n	800a5be <TIM_Base_SetConfig+0xf2>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a14      	ldr	r2, [pc, #80]	@ (800a604 <TIM_Base_SetConfig+0x138>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d003      	beq.n	800a5be <TIM_Base_SetConfig+0xf2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a13      	ldr	r2, [pc, #76]	@ (800a608 <TIM_Base_SetConfig+0x13c>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d103      	bne.n	800a5c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	691a      	ldr	r2, [r3, #16]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f043 0204 	orr.w	r2, r3, #4
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	601a      	str	r2, [r3, #0]
}
 800a5de:	bf00      	nop
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	40010000 	.word	0x40010000
 800a5f0:	40000400 	.word	0x40000400
 800a5f4:	40000800 	.word	0x40000800
 800a5f8:	40000c00 	.word	0x40000c00
 800a5fc:	40010400 	.word	0x40010400
 800a600:	40014000 	.word	0x40014000
 800a604:	40014400 	.word	0x40014400
 800a608:	40014800 	.word	0x40014800

0800a60c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f023 0201 	bic.w	r2, r3, #1
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	011b      	lsls	r3, r3, #4
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	4313      	orrs	r3, r2
 800a640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f023 030a 	bic.w	r3, r3, #10
 800a648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	4313      	orrs	r3, r2
 800a650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	621a      	str	r2, [r3, #32]
}
 800a65e:	bf00      	nop
 800a660:	371c      	adds	r7, #28
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b087      	sub	sp, #28
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	f023 0210 	bic.w	r2, r3, #16
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a694:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	031b      	lsls	r3, r3, #12
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a6a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	011b      	lsls	r3, r3, #4
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	621a      	str	r2, [r3, #32]
}
 800a6be:	bf00      	nop
 800a6c0:	371c      	adds	r7, #28
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
	...

0800a6cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	4b09      	ldr	r3, [pc, #36]	@ (800a704 <TIM_ITRx_SetConfig+0x38>)
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	f043 0307 	orr.w	r3, r3, #7
 800a6ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	609a      	str	r2, [r3, #8]
}
 800a6f6:	bf00      	nop
 800a6f8:	3714      	adds	r7, #20
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	ffcfff8f 	.word	0xffcfff8f

0800a708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	021a      	lsls	r2, r3, #8
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	431a      	orrs	r2, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4313      	orrs	r3, r2
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	4313      	orrs	r3, r2
 800a734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	609a      	str	r2, [r3, #8]
}
 800a73c:	bf00      	nop
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d101      	bne.n	800a760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a75c:	2302      	movs	r3, #2
 800a75e:	e06d      	b.n	800a83c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2202      	movs	r2, #2
 800a76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a30      	ldr	r2, [pc, #192]	@ (800a848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d004      	beq.n	800a794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a2f      	ldr	r2, [pc, #188]	@ (800a84c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d108      	bne.n	800a7a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a79a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a20      	ldr	r2, [pc, #128]	@ (800a848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d022      	beq.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7d2:	d01d      	beq.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a850 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d018      	beq.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a854 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d013      	beq.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a1a      	ldr	r2, [pc, #104]	@ (800a858 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d00e      	beq.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a15      	ldr	r2, [pc, #84]	@ (800a84c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d009      	beq.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a16      	ldr	r2, [pc, #88]	@ (800a85c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d004      	beq.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a15      	ldr	r2, [pc, #84]	@ (800a860 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d10c      	bne.n	800a82a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	4313      	orrs	r3, r2
 800a820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	40010000 	.word	0x40010000
 800a84c:	40010400 	.word	0x40010400
 800a850:	40000400 	.word	0x40000400
 800a854:	40000800 	.word	0x40000800
 800a858:	40000c00 	.word	0x40000c00
 800a85c:	40001800 	.word	0x40001800
 800a860:	40014000 	.word	0x40014000

0800a864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d101      	bne.n	800a8b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e042      	b.n	800a938 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d106      	bne.n	800a8ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7f7 fda5 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2224      	movs	r2, #36	@ 0x24
 800a8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 0201 	bic.w	r2, r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fe1e 	bl	800b52c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f8b3 	bl	800aa5c <UART_SetConfig>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d101      	bne.n	800a900 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e01b      	b.n	800a938 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a90e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689a      	ldr	r2, [r3, #8]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a91e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fe9d 	bl	800b670 <UART_CheckIdleState>
 800a936:	4603      	mov	r3, r0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08a      	sub	sp, #40	@ 0x28
 800a944:	af02      	add	r7, sp, #8
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	4613      	mov	r3, r2
 800a94e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a956:	2b20      	cmp	r3, #32
 800a958:	d17b      	bne.n	800aa52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <HAL_UART_Transmit+0x26>
 800a960:	88fb      	ldrh	r3, [r7, #6]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e074      	b.n	800aa54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2221      	movs	r2, #33	@ 0x21
 800a976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a97a:	f7f7 ffed 	bl	8002958 <HAL_GetTick>
 800a97e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	88fa      	ldrh	r2, [r7, #6]
 800a984:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	88fa      	ldrh	r2, [r7, #6]
 800a98c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a998:	d108      	bne.n	800a9ac <HAL_UART_Transmit+0x6c>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d104      	bne.n	800a9ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	61bb      	str	r3, [r7, #24]
 800a9aa:	e003      	b.n	800a9b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a9b4:	e030      	b.n	800aa18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	2180      	movs	r1, #128	@ 0x80
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 feff 	bl	800b7c4 <UART_WaitOnFlagUntilTimeout>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d005      	beq.n	800a9d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e03d      	b.n	800aa54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10b      	bne.n	800a9f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	61bb      	str	r3, [r7, #24]
 800a9f4:	e007      	b.n	800aa06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	3301      	adds	r3, #1
 800aa04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1c8      	bne.n	800a9b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	2140      	movs	r1, #64	@ 0x40
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 fec8 	bl	800b7c4 <UART_WaitOnFlagUntilTimeout>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d005      	beq.n	800aa46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e006      	b.n	800aa54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e000      	b.n	800aa54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aa52:	2302      	movs	r3, #2
  }
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3720      	adds	r7, #32
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa60:	b092      	sub	sp, #72	@ 0x48
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	431a      	orrs	r2, r3
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	4bbe      	ldr	r3, [pc, #760]	@ (800ad84 <UART_SetConfig+0x328>)
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	6812      	ldr	r2, [r2, #0]
 800aa92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa94:	430b      	orrs	r3, r1
 800aa96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4ab3      	ldr	r2, [pc, #716]	@ (800ad88 <UART_SetConfig+0x32c>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d004      	beq.n	800aac8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aac4:	4313      	orrs	r3, r2
 800aac6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	689a      	ldr	r2, [r3, #8]
 800aace:	4baf      	ldr	r3, [pc, #700]	@ (800ad8c <UART_SetConfig+0x330>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aad8:	430b      	orrs	r3, r1
 800aada:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae2:	f023 010f 	bic.w	r1, r3, #15
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4aa6      	ldr	r2, [pc, #664]	@ (800ad90 <UART_SetConfig+0x334>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d177      	bne.n	800abec <UART_SetConfig+0x190>
 800aafc:	4ba5      	ldr	r3, [pc, #660]	@ (800ad94 <UART_SetConfig+0x338>)
 800aafe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab04:	2b28      	cmp	r3, #40	@ 0x28
 800ab06:	d86d      	bhi.n	800abe4 <UART_SetConfig+0x188>
 800ab08:	a201      	add	r2, pc, #4	@ (adr r2, 800ab10 <UART_SetConfig+0xb4>)
 800ab0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0e:	bf00      	nop
 800ab10:	0800abb5 	.word	0x0800abb5
 800ab14:	0800abe5 	.word	0x0800abe5
 800ab18:	0800abe5 	.word	0x0800abe5
 800ab1c:	0800abe5 	.word	0x0800abe5
 800ab20:	0800abe5 	.word	0x0800abe5
 800ab24:	0800abe5 	.word	0x0800abe5
 800ab28:	0800abe5 	.word	0x0800abe5
 800ab2c:	0800abe5 	.word	0x0800abe5
 800ab30:	0800abbd 	.word	0x0800abbd
 800ab34:	0800abe5 	.word	0x0800abe5
 800ab38:	0800abe5 	.word	0x0800abe5
 800ab3c:	0800abe5 	.word	0x0800abe5
 800ab40:	0800abe5 	.word	0x0800abe5
 800ab44:	0800abe5 	.word	0x0800abe5
 800ab48:	0800abe5 	.word	0x0800abe5
 800ab4c:	0800abe5 	.word	0x0800abe5
 800ab50:	0800abc5 	.word	0x0800abc5
 800ab54:	0800abe5 	.word	0x0800abe5
 800ab58:	0800abe5 	.word	0x0800abe5
 800ab5c:	0800abe5 	.word	0x0800abe5
 800ab60:	0800abe5 	.word	0x0800abe5
 800ab64:	0800abe5 	.word	0x0800abe5
 800ab68:	0800abe5 	.word	0x0800abe5
 800ab6c:	0800abe5 	.word	0x0800abe5
 800ab70:	0800abcd 	.word	0x0800abcd
 800ab74:	0800abe5 	.word	0x0800abe5
 800ab78:	0800abe5 	.word	0x0800abe5
 800ab7c:	0800abe5 	.word	0x0800abe5
 800ab80:	0800abe5 	.word	0x0800abe5
 800ab84:	0800abe5 	.word	0x0800abe5
 800ab88:	0800abe5 	.word	0x0800abe5
 800ab8c:	0800abe5 	.word	0x0800abe5
 800ab90:	0800abd5 	.word	0x0800abd5
 800ab94:	0800abe5 	.word	0x0800abe5
 800ab98:	0800abe5 	.word	0x0800abe5
 800ab9c:	0800abe5 	.word	0x0800abe5
 800aba0:	0800abe5 	.word	0x0800abe5
 800aba4:	0800abe5 	.word	0x0800abe5
 800aba8:	0800abe5 	.word	0x0800abe5
 800abac:	0800abe5 	.word	0x0800abe5
 800abb0:	0800abdd 	.word	0x0800abdd
 800abb4:	2301      	movs	r3, #1
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e222      	b.n	800b002 <UART_SetConfig+0x5a6>
 800abbc:	2304      	movs	r3, #4
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc2:	e21e      	b.n	800b002 <UART_SetConfig+0x5a6>
 800abc4:	2308      	movs	r3, #8
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e21a      	b.n	800b002 <UART_SetConfig+0x5a6>
 800abcc:	2310      	movs	r3, #16
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd2:	e216      	b.n	800b002 <UART_SetConfig+0x5a6>
 800abd4:	2320      	movs	r3, #32
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abda:	e212      	b.n	800b002 <UART_SetConfig+0x5a6>
 800abdc:	2340      	movs	r3, #64	@ 0x40
 800abde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abe2:	e20e      	b.n	800b002 <UART_SetConfig+0x5a6>
 800abe4:	2380      	movs	r3, #128	@ 0x80
 800abe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abea:	e20a      	b.n	800b002 <UART_SetConfig+0x5a6>
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a69      	ldr	r2, [pc, #420]	@ (800ad98 <UART_SetConfig+0x33c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d130      	bne.n	800ac58 <UART_SetConfig+0x1fc>
 800abf6:	4b67      	ldr	r3, [pc, #412]	@ (800ad94 <UART_SetConfig+0x338>)
 800abf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abfa:	f003 0307 	and.w	r3, r3, #7
 800abfe:	2b05      	cmp	r3, #5
 800ac00:	d826      	bhi.n	800ac50 <UART_SetConfig+0x1f4>
 800ac02:	a201      	add	r2, pc, #4	@ (adr r2, 800ac08 <UART_SetConfig+0x1ac>)
 800ac04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac08:	0800ac21 	.word	0x0800ac21
 800ac0c:	0800ac29 	.word	0x0800ac29
 800ac10:	0800ac31 	.word	0x0800ac31
 800ac14:	0800ac39 	.word	0x0800ac39
 800ac18:	0800ac41 	.word	0x0800ac41
 800ac1c:	0800ac49 	.word	0x0800ac49
 800ac20:	2300      	movs	r3, #0
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e1ec      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac28:	2304      	movs	r3, #4
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e1e8      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac30:	2308      	movs	r3, #8
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac36:	e1e4      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac38:	2310      	movs	r3, #16
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3e:	e1e0      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac40:	2320      	movs	r3, #32
 800ac42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac46:	e1dc      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac48:	2340      	movs	r3, #64	@ 0x40
 800ac4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4e:	e1d8      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac50:	2380      	movs	r3, #128	@ 0x80
 800ac52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac56:	e1d4      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a4f      	ldr	r2, [pc, #316]	@ (800ad9c <UART_SetConfig+0x340>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d130      	bne.n	800acc4 <UART_SetConfig+0x268>
 800ac62:	4b4c      	ldr	r3, [pc, #304]	@ (800ad94 <UART_SetConfig+0x338>)
 800ac64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac66:	f003 0307 	and.w	r3, r3, #7
 800ac6a:	2b05      	cmp	r3, #5
 800ac6c:	d826      	bhi.n	800acbc <UART_SetConfig+0x260>
 800ac6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac74 <UART_SetConfig+0x218>)
 800ac70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac74:	0800ac8d 	.word	0x0800ac8d
 800ac78:	0800ac95 	.word	0x0800ac95
 800ac7c:	0800ac9d 	.word	0x0800ac9d
 800ac80:	0800aca5 	.word	0x0800aca5
 800ac84:	0800acad 	.word	0x0800acad
 800ac88:	0800acb5 	.word	0x0800acb5
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac92:	e1b6      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac94:	2304      	movs	r3, #4
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9a:	e1b2      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ac9c:	2308      	movs	r3, #8
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e1ae      	b.n	800b002 <UART_SetConfig+0x5a6>
 800aca4:	2310      	movs	r3, #16
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e1aa      	b.n	800b002 <UART_SetConfig+0x5a6>
 800acac:	2320      	movs	r3, #32
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e1a6      	b.n	800b002 <UART_SetConfig+0x5a6>
 800acb4:	2340      	movs	r3, #64	@ 0x40
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e1a2      	b.n	800b002 <UART_SetConfig+0x5a6>
 800acbc:	2380      	movs	r3, #128	@ 0x80
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc2:	e19e      	b.n	800b002 <UART_SetConfig+0x5a6>
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a35      	ldr	r2, [pc, #212]	@ (800ada0 <UART_SetConfig+0x344>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d130      	bne.n	800ad30 <UART_SetConfig+0x2d4>
 800acce:	4b31      	ldr	r3, [pc, #196]	@ (800ad94 <UART_SetConfig+0x338>)
 800acd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b05      	cmp	r3, #5
 800acd8:	d826      	bhi.n	800ad28 <UART_SetConfig+0x2cc>
 800acda:	a201      	add	r2, pc, #4	@ (adr r2, 800ace0 <UART_SetConfig+0x284>)
 800acdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace0:	0800acf9 	.word	0x0800acf9
 800ace4:	0800ad01 	.word	0x0800ad01
 800ace8:	0800ad09 	.word	0x0800ad09
 800acec:	0800ad11 	.word	0x0800ad11
 800acf0:	0800ad19 	.word	0x0800ad19
 800acf4:	0800ad21 	.word	0x0800ad21
 800acf8:	2300      	movs	r3, #0
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e180      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad00:	2304      	movs	r3, #4
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad06:	e17c      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad08:	2308      	movs	r3, #8
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e178      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad10:	2310      	movs	r3, #16
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e174      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad18:	2320      	movs	r3, #32
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e170      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad20:	2340      	movs	r3, #64	@ 0x40
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e16c      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad28:	2380      	movs	r3, #128	@ 0x80
 800ad2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2e:	e168      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a1b      	ldr	r2, [pc, #108]	@ (800ada4 <UART_SetConfig+0x348>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d142      	bne.n	800adc0 <UART_SetConfig+0x364>
 800ad3a:	4b16      	ldr	r3, [pc, #88]	@ (800ad94 <UART_SetConfig+0x338>)
 800ad3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad3e:	f003 0307 	and.w	r3, r3, #7
 800ad42:	2b05      	cmp	r3, #5
 800ad44:	d838      	bhi.n	800adb8 <UART_SetConfig+0x35c>
 800ad46:	a201      	add	r2, pc, #4	@ (adr r2, 800ad4c <UART_SetConfig+0x2f0>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800ad65 	.word	0x0800ad65
 800ad50:	0800ad6d 	.word	0x0800ad6d
 800ad54:	0800ad75 	.word	0x0800ad75
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ada9 	.word	0x0800ada9
 800ad60:	0800adb1 	.word	0x0800adb1
 800ad64:	2300      	movs	r3, #0
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e14a      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad6c:	2304      	movs	r3, #4
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e146      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad74:	2308      	movs	r3, #8
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e142      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e13e      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ad84:	cfff69f3 	.word	0xcfff69f3
 800ad88:	58000c00 	.word	0x58000c00
 800ad8c:	11fff4ff 	.word	0x11fff4ff
 800ad90:	40011000 	.word	0x40011000
 800ad94:	58024400 	.word	0x58024400
 800ad98:	40004400 	.word	0x40004400
 800ad9c:	40004800 	.word	0x40004800
 800ada0:	40004c00 	.word	0x40004c00
 800ada4:	40005000 	.word	0x40005000
 800ada8:	2320      	movs	r3, #32
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e128      	b.n	800b002 <UART_SetConfig+0x5a6>
 800adb0:	2340      	movs	r3, #64	@ 0x40
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb6:	e124      	b.n	800b002 <UART_SetConfig+0x5a6>
 800adb8:	2380      	movs	r3, #128	@ 0x80
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adbe:	e120      	b.n	800b002 <UART_SetConfig+0x5a6>
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4acb      	ldr	r2, [pc, #812]	@ (800b0f4 <UART_SetConfig+0x698>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d176      	bne.n	800aeb8 <UART_SetConfig+0x45c>
 800adca:	4bcb      	ldr	r3, [pc, #812]	@ (800b0f8 <UART_SetConfig+0x69c>)
 800adcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800add2:	2b28      	cmp	r3, #40	@ 0x28
 800add4:	d86c      	bhi.n	800aeb0 <UART_SetConfig+0x454>
 800add6:	a201      	add	r2, pc, #4	@ (adr r2, 800addc <UART_SetConfig+0x380>)
 800add8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800addc:	0800ae81 	.word	0x0800ae81
 800ade0:	0800aeb1 	.word	0x0800aeb1
 800ade4:	0800aeb1 	.word	0x0800aeb1
 800ade8:	0800aeb1 	.word	0x0800aeb1
 800adec:	0800aeb1 	.word	0x0800aeb1
 800adf0:	0800aeb1 	.word	0x0800aeb1
 800adf4:	0800aeb1 	.word	0x0800aeb1
 800adf8:	0800aeb1 	.word	0x0800aeb1
 800adfc:	0800ae89 	.word	0x0800ae89
 800ae00:	0800aeb1 	.word	0x0800aeb1
 800ae04:	0800aeb1 	.word	0x0800aeb1
 800ae08:	0800aeb1 	.word	0x0800aeb1
 800ae0c:	0800aeb1 	.word	0x0800aeb1
 800ae10:	0800aeb1 	.word	0x0800aeb1
 800ae14:	0800aeb1 	.word	0x0800aeb1
 800ae18:	0800aeb1 	.word	0x0800aeb1
 800ae1c:	0800ae91 	.word	0x0800ae91
 800ae20:	0800aeb1 	.word	0x0800aeb1
 800ae24:	0800aeb1 	.word	0x0800aeb1
 800ae28:	0800aeb1 	.word	0x0800aeb1
 800ae2c:	0800aeb1 	.word	0x0800aeb1
 800ae30:	0800aeb1 	.word	0x0800aeb1
 800ae34:	0800aeb1 	.word	0x0800aeb1
 800ae38:	0800aeb1 	.word	0x0800aeb1
 800ae3c:	0800ae99 	.word	0x0800ae99
 800ae40:	0800aeb1 	.word	0x0800aeb1
 800ae44:	0800aeb1 	.word	0x0800aeb1
 800ae48:	0800aeb1 	.word	0x0800aeb1
 800ae4c:	0800aeb1 	.word	0x0800aeb1
 800ae50:	0800aeb1 	.word	0x0800aeb1
 800ae54:	0800aeb1 	.word	0x0800aeb1
 800ae58:	0800aeb1 	.word	0x0800aeb1
 800ae5c:	0800aea1 	.word	0x0800aea1
 800ae60:	0800aeb1 	.word	0x0800aeb1
 800ae64:	0800aeb1 	.word	0x0800aeb1
 800ae68:	0800aeb1 	.word	0x0800aeb1
 800ae6c:	0800aeb1 	.word	0x0800aeb1
 800ae70:	0800aeb1 	.word	0x0800aeb1
 800ae74:	0800aeb1 	.word	0x0800aeb1
 800ae78:	0800aeb1 	.word	0x0800aeb1
 800ae7c:	0800aea9 	.word	0x0800aea9
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae86:	e0bc      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ae88:	2304      	movs	r3, #4
 800ae8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae8e:	e0b8      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ae90:	2308      	movs	r3, #8
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae96:	e0b4      	b.n	800b002 <UART_SetConfig+0x5a6>
 800ae98:	2310      	movs	r3, #16
 800ae9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	e0b0      	b.n	800b002 <UART_SetConfig+0x5a6>
 800aea0:	2320      	movs	r3, #32
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea6:	e0ac      	b.n	800b002 <UART_SetConfig+0x5a6>
 800aea8:	2340      	movs	r3, #64	@ 0x40
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeae:	e0a8      	b.n	800b002 <UART_SetConfig+0x5a6>
 800aeb0:	2380      	movs	r3, #128	@ 0x80
 800aeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb6:	e0a4      	b.n	800b002 <UART_SetConfig+0x5a6>
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a8f      	ldr	r2, [pc, #572]	@ (800b0fc <UART_SetConfig+0x6a0>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d130      	bne.n	800af24 <UART_SetConfig+0x4c8>
 800aec2:	4b8d      	ldr	r3, [pc, #564]	@ (800b0f8 <UART_SetConfig+0x69c>)
 800aec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec6:	f003 0307 	and.w	r3, r3, #7
 800aeca:	2b05      	cmp	r3, #5
 800aecc:	d826      	bhi.n	800af1c <UART_SetConfig+0x4c0>
 800aece:	a201      	add	r2, pc, #4	@ (adr r2, 800aed4 <UART_SetConfig+0x478>)
 800aed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed4:	0800aeed 	.word	0x0800aeed
 800aed8:	0800aef5 	.word	0x0800aef5
 800aedc:	0800aefd 	.word	0x0800aefd
 800aee0:	0800af05 	.word	0x0800af05
 800aee4:	0800af0d 	.word	0x0800af0d
 800aee8:	0800af15 	.word	0x0800af15
 800aeec:	2300      	movs	r3, #0
 800aeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef2:	e086      	b.n	800b002 <UART_SetConfig+0x5a6>
 800aef4:	2304      	movs	r3, #4
 800aef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aefa:	e082      	b.n	800b002 <UART_SetConfig+0x5a6>
 800aefc:	2308      	movs	r3, #8
 800aefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af02:	e07e      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af04:	2310      	movs	r3, #16
 800af06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af0a:	e07a      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af0c:	2320      	movs	r3, #32
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af12:	e076      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af14:	2340      	movs	r3, #64	@ 0x40
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1a:	e072      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af1c:	2380      	movs	r3, #128	@ 0x80
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af22:	e06e      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a75      	ldr	r2, [pc, #468]	@ (800b100 <UART_SetConfig+0x6a4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d130      	bne.n	800af90 <UART_SetConfig+0x534>
 800af2e:	4b72      	ldr	r3, [pc, #456]	@ (800b0f8 <UART_SetConfig+0x69c>)
 800af30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af32:	f003 0307 	and.w	r3, r3, #7
 800af36:	2b05      	cmp	r3, #5
 800af38:	d826      	bhi.n	800af88 <UART_SetConfig+0x52c>
 800af3a:	a201      	add	r2, pc, #4	@ (adr r2, 800af40 <UART_SetConfig+0x4e4>)
 800af3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af40:	0800af59 	.word	0x0800af59
 800af44:	0800af61 	.word	0x0800af61
 800af48:	0800af69 	.word	0x0800af69
 800af4c:	0800af71 	.word	0x0800af71
 800af50:	0800af79 	.word	0x0800af79
 800af54:	0800af81 	.word	0x0800af81
 800af58:	2300      	movs	r3, #0
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5e:	e050      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af60:	2304      	movs	r3, #4
 800af62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af66:	e04c      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af68:	2308      	movs	r3, #8
 800af6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af6e:	e048      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af70:	2310      	movs	r3, #16
 800af72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af76:	e044      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af78:	2320      	movs	r3, #32
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7e:	e040      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af80:	2340      	movs	r3, #64	@ 0x40
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af86:	e03c      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af88:	2380      	movs	r3, #128	@ 0x80
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8e:	e038      	b.n	800b002 <UART_SetConfig+0x5a6>
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a5b      	ldr	r2, [pc, #364]	@ (800b104 <UART_SetConfig+0x6a8>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d130      	bne.n	800affc <UART_SetConfig+0x5a0>
 800af9a:	4b57      	ldr	r3, [pc, #348]	@ (800b0f8 <UART_SetConfig+0x69c>)
 800af9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af9e:	f003 0307 	and.w	r3, r3, #7
 800afa2:	2b05      	cmp	r3, #5
 800afa4:	d826      	bhi.n	800aff4 <UART_SetConfig+0x598>
 800afa6:	a201      	add	r2, pc, #4	@ (adr r2, 800afac <UART_SetConfig+0x550>)
 800afa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afac:	0800afc5 	.word	0x0800afc5
 800afb0:	0800afcd 	.word	0x0800afcd
 800afb4:	0800afd5 	.word	0x0800afd5
 800afb8:	0800afdd 	.word	0x0800afdd
 800afbc:	0800afe5 	.word	0x0800afe5
 800afc0:	0800afed 	.word	0x0800afed
 800afc4:	2302      	movs	r3, #2
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afca:	e01a      	b.n	800b002 <UART_SetConfig+0x5a6>
 800afcc:	2304      	movs	r3, #4
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd2:	e016      	b.n	800b002 <UART_SetConfig+0x5a6>
 800afd4:	2308      	movs	r3, #8
 800afd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afda:	e012      	b.n	800b002 <UART_SetConfig+0x5a6>
 800afdc:	2310      	movs	r3, #16
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe2:	e00e      	b.n	800b002 <UART_SetConfig+0x5a6>
 800afe4:	2320      	movs	r3, #32
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afea:	e00a      	b.n	800b002 <UART_SetConfig+0x5a6>
 800afec:	2340      	movs	r3, #64	@ 0x40
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff2:	e006      	b.n	800b002 <UART_SetConfig+0x5a6>
 800aff4:	2380      	movs	r3, #128	@ 0x80
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affa:	e002      	b.n	800b002 <UART_SetConfig+0x5a6>
 800affc:	2380      	movs	r3, #128	@ 0x80
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a3f      	ldr	r2, [pc, #252]	@ (800b104 <UART_SetConfig+0x6a8>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	f040 80f8 	bne.w	800b1fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b00e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b012:	2b20      	cmp	r3, #32
 800b014:	dc46      	bgt.n	800b0a4 <UART_SetConfig+0x648>
 800b016:	2b02      	cmp	r3, #2
 800b018:	f2c0 8082 	blt.w	800b120 <UART_SetConfig+0x6c4>
 800b01c:	3b02      	subs	r3, #2
 800b01e:	2b1e      	cmp	r3, #30
 800b020:	d87e      	bhi.n	800b120 <UART_SetConfig+0x6c4>
 800b022:	a201      	add	r2, pc, #4	@ (adr r2, 800b028 <UART_SetConfig+0x5cc>)
 800b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b028:	0800b0ab 	.word	0x0800b0ab
 800b02c:	0800b121 	.word	0x0800b121
 800b030:	0800b0b3 	.word	0x0800b0b3
 800b034:	0800b121 	.word	0x0800b121
 800b038:	0800b121 	.word	0x0800b121
 800b03c:	0800b121 	.word	0x0800b121
 800b040:	0800b0c3 	.word	0x0800b0c3
 800b044:	0800b121 	.word	0x0800b121
 800b048:	0800b121 	.word	0x0800b121
 800b04c:	0800b121 	.word	0x0800b121
 800b050:	0800b121 	.word	0x0800b121
 800b054:	0800b121 	.word	0x0800b121
 800b058:	0800b121 	.word	0x0800b121
 800b05c:	0800b121 	.word	0x0800b121
 800b060:	0800b0d3 	.word	0x0800b0d3
 800b064:	0800b121 	.word	0x0800b121
 800b068:	0800b121 	.word	0x0800b121
 800b06c:	0800b121 	.word	0x0800b121
 800b070:	0800b121 	.word	0x0800b121
 800b074:	0800b121 	.word	0x0800b121
 800b078:	0800b121 	.word	0x0800b121
 800b07c:	0800b121 	.word	0x0800b121
 800b080:	0800b121 	.word	0x0800b121
 800b084:	0800b121 	.word	0x0800b121
 800b088:	0800b121 	.word	0x0800b121
 800b08c:	0800b121 	.word	0x0800b121
 800b090:	0800b121 	.word	0x0800b121
 800b094:	0800b121 	.word	0x0800b121
 800b098:	0800b121 	.word	0x0800b121
 800b09c:	0800b121 	.word	0x0800b121
 800b0a0:	0800b113 	.word	0x0800b113
 800b0a4:	2b40      	cmp	r3, #64	@ 0x40
 800b0a6:	d037      	beq.n	800b118 <UART_SetConfig+0x6bc>
 800b0a8:	e03a      	b.n	800b120 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b0aa:	f7fd f855 	bl	8008158 <HAL_RCCEx_GetD3PCLK1Freq>
 800b0ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0b0:	e03c      	b.n	800b12c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fd f864 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c0:	e034      	b.n	800b12c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0c2:	f107 0318 	add.w	r3, r7, #24
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fd f9b0 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d0:	e02c      	b.n	800b12c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d2:	4b09      	ldr	r3, [pc, #36]	@ (800b0f8 <UART_SetConfig+0x69c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d016      	beq.n	800b10c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0de:	4b06      	ldr	r3, [pc, #24]	@ (800b0f8 <UART_SetConfig+0x69c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	08db      	lsrs	r3, r3, #3
 800b0e4:	f003 0303 	and.w	r3, r3, #3
 800b0e8:	4a07      	ldr	r2, [pc, #28]	@ (800b108 <UART_SetConfig+0x6ac>)
 800b0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0f0:	e01c      	b.n	800b12c <UART_SetConfig+0x6d0>
 800b0f2:	bf00      	nop
 800b0f4:	40011400 	.word	0x40011400
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	40007800 	.word	0x40007800
 800b100:	40007c00 	.word	0x40007c00
 800b104:	58000c00 	.word	0x58000c00
 800b108:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b10c:	4b9d      	ldr	r3, [pc, #628]	@ (800b384 <UART_SetConfig+0x928>)
 800b10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b110:	e00c      	b.n	800b12c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b112:	4b9d      	ldr	r3, [pc, #628]	@ (800b388 <UART_SetConfig+0x92c>)
 800b114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b116:	e009      	b.n	800b12c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b11e:	e005      	b.n	800b12c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b120:	2300      	movs	r3, #0
 800b122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b12a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f000 81de 	beq.w	800b4f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b138:	4a94      	ldr	r2, [pc, #592]	@ (800b38c <UART_SetConfig+0x930>)
 800b13a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b13e:	461a      	mov	r2, r3
 800b140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b142:	fbb3 f3f2 	udiv	r3, r3, r2
 800b146:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	4613      	mov	r3, r2
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	4413      	add	r3, r2
 800b152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b154:	429a      	cmp	r2, r3
 800b156:	d305      	bcc.n	800b164 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b15e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b160:	429a      	cmp	r2, r3
 800b162:	d903      	bls.n	800b16c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b16a:	e1c1      	b.n	800b4f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b16e:	2200      	movs	r2, #0
 800b170:	60bb      	str	r3, [r7, #8]
 800b172:	60fa      	str	r2, [r7, #12]
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b178:	4a84      	ldr	r2, [pc, #528]	@ (800b38c <UART_SetConfig+0x930>)
 800b17a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	2200      	movs	r2, #0
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	607a      	str	r2, [r7, #4]
 800b186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b18a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b18e:	f7f5 fabb 	bl	8000708 <__aeabi_uldivmod>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	4610      	mov	r0, r2
 800b198:	4619      	mov	r1, r3
 800b19a:	f04f 0200 	mov.w	r2, #0
 800b19e:	f04f 0300 	mov.w	r3, #0
 800b1a2:	020b      	lsls	r3, r1, #8
 800b1a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1a8:	0202      	lsls	r2, r0, #8
 800b1aa:	6979      	ldr	r1, [r7, #20]
 800b1ac:	6849      	ldr	r1, [r1, #4]
 800b1ae:	0849      	lsrs	r1, r1, #1
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	eb12 0804 	adds.w	r8, r2, r4
 800b1ba:	eb43 0905 	adc.w	r9, r3, r5
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	469a      	mov	sl, r3
 800b1c6:	4693      	mov	fp, r2
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	465b      	mov	r3, fp
 800b1cc:	4640      	mov	r0, r8
 800b1ce:	4649      	mov	r1, r9
 800b1d0:	f7f5 fa9a 	bl	8000708 <__aeabi_uldivmod>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4613      	mov	r3, r2
 800b1da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1e2:	d308      	bcc.n	800b1f6 <UART_SetConfig+0x79a>
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1ea:	d204      	bcs.n	800b1f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1f2:	60da      	str	r2, [r3, #12]
 800b1f4:	e17c      	b.n	800b4f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1fc:	e178      	b.n	800b4f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b206:	f040 80c5 	bne.w	800b394 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b20a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b20e:	2b20      	cmp	r3, #32
 800b210:	dc48      	bgt.n	800b2a4 <UART_SetConfig+0x848>
 800b212:	2b00      	cmp	r3, #0
 800b214:	db7b      	blt.n	800b30e <UART_SetConfig+0x8b2>
 800b216:	2b20      	cmp	r3, #32
 800b218:	d879      	bhi.n	800b30e <UART_SetConfig+0x8b2>
 800b21a:	a201      	add	r2, pc, #4	@ (adr r2, 800b220 <UART_SetConfig+0x7c4>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b2ab 	.word	0x0800b2ab
 800b224:	0800b2b3 	.word	0x0800b2b3
 800b228:	0800b30f 	.word	0x0800b30f
 800b22c:	0800b30f 	.word	0x0800b30f
 800b230:	0800b2bb 	.word	0x0800b2bb
 800b234:	0800b30f 	.word	0x0800b30f
 800b238:	0800b30f 	.word	0x0800b30f
 800b23c:	0800b30f 	.word	0x0800b30f
 800b240:	0800b2cb 	.word	0x0800b2cb
 800b244:	0800b30f 	.word	0x0800b30f
 800b248:	0800b30f 	.word	0x0800b30f
 800b24c:	0800b30f 	.word	0x0800b30f
 800b250:	0800b30f 	.word	0x0800b30f
 800b254:	0800b30f 	.word	0x0800b30f
 800b258:	0800b30f 	.word	0x0800b30f
 800b25c:	0800b30f 	.word	0x0800b30f
 800b260:	0800b2db 	.word	0x0800b2db
 800b264:	0800b30f 	.word	0x0800b30f
 800b268:	0800b30f 	.word	0x0800b30f
 800b26c:	0800b30f 	.word	0x0800b30f
 800b270:	0800b30f 	.word	0x0800b30f
 800b274:	0800b30f 	.word	0x0800b30f
 800b278:	0800b30f 	.word	0x0800b30f
 800b27c:	0800b30f 	.word	0x0800b30f
 800b280:	0800b30f 	.word	0x0800b30f
 800b284:	0800b30f 	.word	0x0800b30f
 800b288:	0800b30f 	.word	0x0800b30f
 800b28c:	0800b30f 	.word	0x0800b30f
 800b290:	0800b30f 	.word	0x0800b30f
 800b294:	0800b30f 	.word	0x0800b30f
 800b298:	0800b30f 	.word	0x0800b30f
 800b29c:	0800b30f 	.word	0x0800b30f
 800b2a0:	0800b301 	.word	0x0800b301
 800b2a4:	2b40      	cmp	r3, #64	@ 0x40
 800b2a6:	d02e      	beq.n	800b306 <UART_SetConfig+0x8aa>
 800b2a8:	e031      	b.n	800b30e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2aa:	f7fb fd1f 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 800b2ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2b0:	e033      	b.n	800b31a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2b2:	f7fb fd31 	bl	8006d18 <HAL_RCC_GetPCLK2Freq>
 800b2b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2b8:	e02f      	b.n	800b31a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fc ff60 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c8:	e027      	b.n	800b31a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2ca:	f107 0318 	add.w	r3, r7, #24
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fd f8ac 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d8:	e01f      	b.n	800b31a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2da:	4b2d      	ldr	r3, [pc, #180]	@ (800b390 <UART_SetConfig+0x934>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0320 	and.w	r3, r3, #32
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d009      	beq.n	800b2fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b390 <UART_SetConfig+0x934>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	08db      	lsrs	r3, r3, #3
 800b2ec:	f003 0303 	and.w	r3, r3, #3
 800b2f0:	4a24      	ldr	r2, [pc, #144]	@ (800b384 <UART_SetConfig+0x928>)
 800b2f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2f8:	e00f      	b.n	800b31a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2fa:	4b22      	ldr	r3, [pc, #136]	@ (800b384 <UART_SetConfig+0x928>)
 800b2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2fe:	e00c      	b.n	800b31a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b300:	4b21      	ldr	r3, [pc, #132]	@ (800b388 <UART_SetConfig+0x92c>)
 800b302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b304:	e009      	b.n	800b31a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b30c:	e005      	b.n	800b31a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 80e7 	beq.w	800b4f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b326:	4a19      	ldr	r2, [pc, #100]	@ (800b38c <UART_SetConfig+0x930>)
 800b328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b32c:	461a      	mov	r2, r3
 800b32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b330:	fbb3 f3f2 	udiv	r3, r3, r2
 800b334:	005a      	lsls	r2, r3, #1
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	085b      	lsrs	r3, r3, #1
 800b33c:	441a      	add	r2, r3
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	fbb2 f3f3 	udiv	r3, r2, r3
 800b346:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34a:	2b0f      	cmp	r3, #15
 800b34c:	d916      	bls.n	800b37c <UART_SetConfig+0x920>
 800b34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b354:	d212      	bcs.n	800b37c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b358:	b29b      	uxth	r3, r3
 800b35a:	f023 030f 	bic.w	r3, r3, #15
 800b35e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b362:	085b      	lsrs	r3, r3, #1
 800b364:	b29b      	uxth	r3, r3
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b36e:	4313      	orrs	r3, r2
 800b370:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b378:	60da      	str	r2, [r3, #12]
 800b37a:	e0b9      	b.n	800b4f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b382:	e0b5      	b.n	800b4f0 <UART_SetConfig+0xa94>
 800b384:	03d09000 	.word	0x03d09000
 800b388:	003d0900 	.word	0x003d0900
 800b38c:	08010658 	.word	0x08010658
 800b390:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b394:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b398:	2b20      	cmp	r3, #32
 800b39a:	dc49      	bgt.n	800b430 <UART_SetConfig+0x9d4>
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	db7c      	blt.n	800b49a <UART_SetConfig+0xa3e>
 800b3a0:	2b20      	cmp	r3, #32
 800b3a2:	d87a      	bhi.n	800b49a <UART_SetConfig+0xa3e>
 800b3a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ac <UART_SetConfig+0x950>)
 800b3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3aa:	bf00      	nop
 800b3ac:	0800b437 	.word	0x0800b437
 800b3b0:	0800b43f 	.word	0x0800b43f
 800b3b4:	0800b49b 	.word	0x0800b49b
 800b3b8:	0800b49b 	.word	0x0800b49b
 800b3bc:	0800b447 	.word	0x0800b447
 800b3c0:	0800b49b 	.word	0x0800b49b
 800b3c4:	0800b49b 	.word	0x0800b49b
 800b3c8:	0800b49b 	.word	0x0800b49b
 800b3cc:	0800b457 	.word	0x0800b457
 800b3d0:	0800b49b 	.word	0x0800b49b
 800b3d4:	0800b49b 	.word	0x0800b49b
 800b3d8:	0800b49b 	.word	0x0800b49b
 800b3dc:	0800b49b 	.word	0x0800b49b
 800b3e0:	0800b49b 	.word	0x0800b49b
 800b3e4:	0800b49b 	.word	0x0800b49b
 800b3e8:	0800b49b 	.word	0x0800b49b
 800b3ec:	0800b467 	.word	0x0800b467
 800b3f0:	0800b49b 	.word	0x0800b49b
 800b3f4:	0800b49b 	.word	0x0800b49b
 800b3f8:	0800b49b 	.word	0x0800b49b
 800b3fc:	0800b49b 	.word	0x0800b49b
 800b400:	0800b49b 	.word	0x0800b49b
 800b404:	0800b49b 	.word	0x0800b49b
 800b408:	0800b49b 	.word	0x0800b49b
 800b40c:	0800b49b 	.word	0x0800b49b
 800b410:	0800b49b 	.word	0x0800b49b
 800b414:	0800b49b 	.word	0x0800b49b
 800b418:	0800b49b 	.word	0x0800b49b
 800b41c:	0800b49b 	.word	0x0800b49b
 800b420:	0800b49b 	.word	0x0800b49b
 800b424:	0800b49b 	.word	0x0800b49b
 800b428:	0800b49b 	.word	0x0800b49b
 800b42c:	0800b48d 	.word	0x0800b48d
 800b430:	2b40      	cmp	r3, #64	@ 0x40
 800b432:	d02e      	beq.n	800b492 <UART_SetConfig+0xa36>
 800b434:	e031      	b.n	800b49a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b436:	f7fb fc59 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 800b43a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b43c:	e033      	b.n	800b4a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b43e:	f7fb fc6b 	bl	8006d18 <HAL_RCC_GetPCLK2Freq>
 800b442:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b444:	e02f      	b.n	800b4a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fc fe9a 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b454:	e027      	b.n	800b4a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b456:	f107 0318 	add.w	r3, r7, #24
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fc ffe6 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b464:	e01f      	b.n	800b4a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b466:	4b2d      	ldr	r3, [pc, #180]	@ (800b51c <UART_SetConfig+0xac0>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0320 	and.w	r3, r3, #32
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d009      	beq.n	800b486 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b472:	4b2a      	ldr	r3, [pc, #168]	@ (800b51c <UART_SetConfig+0xac0>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	08db      	lsrs	r3, r3, #3
 800b478:	f003 0303 	and.w	r3, r3, #3
 800b47c:	4a28      	ldr	r2, [pc, #160]	@ (800b520 <UART_SetConfig+0xac4>)
 800b47e:	fa22 f303 	lsr.w	r3, r2, r3
 800b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b484:	e00f      	b.n	800b4a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b486:	4b26      	ldr	r3, [pc, #152]	@ (800b520 <UART_SetConfig+0xac4>)
 800b488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b48a:	e00c      	b.n	800b4a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b48c:	4b25      	ldr	r3, [pc, #148]	@ (800b524 <UART_SetConfig+0xac8>)
 800b48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b490:	e009      	b.n	800b4a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b498:	e005      	b.n	800b4a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b4a4:	bf00      	nop
    }

    if (pclk != 0U)
 800b4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d021      	beq.n	800b4f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b528 <UART_SetConfig+0xacc>)
 800b4b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	085b      	lsrs	r3, r3, #1
 800b4c4:	441a      	add	r2, r3
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d2:	2b0f      	cmp	r3, #15
 800b4d4:	d909      	bls.n	800b4ea <UART_SetConfig+0xa8e>
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4dc:	d205      	bcs.n	800b4ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	60da      	str	r2, [r3, #12]
 800b4e8:	e002      	b.n	800b4f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2200      	movs	r2, #0
 800b504:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2200      	movs	r2, #0
 800b50a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b50c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b510:	4618      	mov	r0, r3
 800b512:	3748      	adds	r7, #72	@ 0x48
 800b514:	46bd      	mov	sp, r7
 800b516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b51a:	bf00      	nop
 800b51c:	58024400 	.word	0x58024400
 800b520:	03d09000 	.word	0x03d09000
 800b524:	003d0900 	.word	0x003d0900
 800b528:	08010658 	.word	0x08010658

0800b52c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b538:	f003 0308 	and.w	r3, r3, #8
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00a      	beq.n	800b556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00a      	beq.n	800b578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	430a      	orrs	r2, r1
 800b576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00a      	beq.n	800b59a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	430a      	orrs	r2, r1
 800b598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59e:	f003 0304 	and.w	r3, r3, #4
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00a      	beq.n	800b5bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	430a      	orrs	r2, r1
 800b5ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c0:	f003 0310 	and.w	r3, r3, #16
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00a      	beq.n	800b5de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	430a      	orrs	r2, r1
 800b5dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00a      	beq.n	800b600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01a      	beq.n	800b642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	430a      	orrs	r2, r1
 800b620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b62a:	d10a      	bne.n	800b642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	430a      	orrs	r2, r1
 800b640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	605a      	str	r2, [r3, #4]
  }
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b098      	sub	sp, #96	@ 0x60
 800b674:	af02      	add	r7, sp, #8
 800b676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b680:	f7f7 f96a 	bl	8002958 <HAL_GetTick>
 800b684:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 0308 	and.w	r3, r3, #8
 800b690:	2b08      	cmp	r3, #8
 800b692:	d12f      	bne.n	800b6f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b694:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b69c:	2200      	movs	r2, #0
 800b69e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f88e 	bl	800b7c4 <UART_WaitOnFlagUntilTimeout>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d022      	beq.n	800b6f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b6:	e853 3f00 	ldrex	r3, [r3]
 800b6ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6d4:	e841 2300 	strex	r3, r2, [r1]
 800b6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1e6      	bne.n	800b6ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e063      	b.n	800b7bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0304 	and.w	r3, r3, #4
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	d149      	bne.n	800b796 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b702:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b70a:	2200      	movs	r2, #0
 800b70c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f857 	bl	800b7c4 <UART_WaitOnFlagUntilTimeout>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d03c      	beq.n	800b796 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b724:	e853 3f00 	ldrex	r3, [r3]
 800b728:	623b      	str	r3, [r7, #32]
   return(result);
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b73a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b73c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b742:	e841 2300 	strex	r3, r2, [r1]
 800b746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e6      	bne.n	800b71c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3308      	adds	r3, #8
 800b754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	e853 3f00 	ldrex	r3, [r3]
 800b75c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f023 0301 	bic.w	r3, r3, #1
 800b764:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3308      	adds	r3, #8
 800b76c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b76e:	61fa      	str	r2, [r7, #28]
 800b770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b772:	69b9      	ldr	r1, [r7, #24]
 800b774:	69fa      	ldr	r2, [r7, #28]
 800b776:	e841 2300 	strex	r3, r2, [r1]
 800b77a:	617b      	str	r3, [r7, #20]
   return(result);
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1e5      	bne.n	800b74e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2220      	movs	r2, #32
 800b786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b792:	2303      	movs	r3, #3
 800b794:	e012      	b.n	800b7bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2220      	movs	r2, #32
 800b79a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2220      	movs	r2, #32
 800b7a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3758      	adds	r7, #88	@ 0x58
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	603b      	str	r3, [r7, #0]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7d4:	e04f      	b.n	800b876 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7dc:	d04b      	beq.n	800b876 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7de:	f7f7 f8bb 	bl	8002958 <HAL_GetTick>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	69ba      	ldr	r2, [r7, #24]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d302      	bcc.n	800b7f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e04e      	b.n	800b896 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 0304 	and.w	r3, r3, #4
 800b802:	2b00      	cmp	r3, #0
 800b804:	d037      	beq.n	800b876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	2b80      	cmp	r3, #128	@ 0x80
 800b80a:	d034      	beq.n	800b876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2b40      	cmp	r3, #64	@ 0x40
 800b810:	d031      	beq.n	800b876 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	f003 0308 	and.w	r3, r3, #8
 800b81c:	2b08      	cmp	r3, #8
 800b81e:	d110      	bne.n	800b842 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2208      	movs	r2, #8
 800b826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 f839 	bl	800b8a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2208      	movs	r2, #8
 800b832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e029      	b.n	800b896 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b84c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b850:	d111      	bne.n	800b876 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b85a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 f81f 	bl	800b8a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2220      	movs	r2, #32
 800b866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b872:	2303      	movs	r3, #3
 800b874:	e00f      	b.n	800b896 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	69da      	ldr	r2, [r3, #28]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	4013      	ands	r3, r2
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	429a      	cmp	r2, r3
 800b884:	bf0c      	ite	eq
 800b886:	2301      	moveq	r3, #1
 800b888:	2300      	movne	r3, #0
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	461a      	mov	r2, r3
 800b88e:	79fb      	ldrb	r3, [r7, #7]
 800b890:	429a      	cmp	r2, r3
 800b892:	d0a0      	beq.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b095      	sub	sp, #84	@ 0x54
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b0:	e853 3f00 	ldrex	r3, [r3]
 800b8b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8ce:	e841 2300 	strex	r3, r2, [r1]
 800b8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e6      	bne.n	800b8a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3308      	adds	r3, #8
 800b8e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	e853 3f00 	ldrex	r3, [r3]
 800b8e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8ea:	69fa      	ldr	r2, [r7, #28]
 800b8ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b968 <UART_EndRxTransfer+0xc8>)
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e5      	bne.n	800b8da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b912:	2b01      	cmp	r3, #1
 800b914:	d118      	bne.n	800b948 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	e853 3f00 	ldrex	r3, [r3]
 800b922:	60bb      	str	r3, [r7, #8]
   return(result);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f023 0310 	bic.w	r3, r3, #16
 800b92a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	461a      	mov	r2, r3
 800b932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b934:	61bb      	str	r3, [r7, #24]
 800b936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b938:	6979      	ldr	r1, [r7, #20]
 800b93a:	69ba      	ldr	r2, [r7, #24]
 800b93c:	e841 2300 	strex	r3, r2, [r1]
 800b940:	613b      	str	r3, [r7, #16]
   return(result);
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1e6      	bne.n	800b916 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2220      	movs	r2, #32
 800b94c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b95c:	bf00      	nop
 800b95e:	3754      	adds	r7, #84	@ 0x54
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	effffffe 	.word	0xeffffffe

0800b96c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <HAL_UARTEx_DisableFifoMode+0x16>
 800b97e:	2302      	movs	r3, #2
 800b980:	e027      	b.n	800b9d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2224      	movs	r2, #36	@ 0x24
 800b98e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 0201 	bic.w	r2, r2, #1
 800b9a8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b9b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d101      	bne.n	800b9f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	e02d      	b.n	800ba52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2224      	movs	r2, #36	@ 0x24
 800ba02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f022 0201 	bic.w	r2, r2, #1
 800ba1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	430a      	orrs	r2, r1
 800ba30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f850 	bl	800bad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2220      	movs	r2, #32
 800ba44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d101      	bne.n	800ba72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba6e:	2302      	movs	r3, #2
 800ba70:	e02d      	b.n	800bace <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2224      	movs	r2, #36	@ 0x24
 800ba7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f022 0201 	bic.w	r2, r2, #1
 800ba98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f812 	bl	800bad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2220      	movs	r2, #32
 800bac0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
	...

0800bad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d108      	bne.n	800bafa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800baf8:	e031      	b.n	800bb5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bafa:	2310      	movs	r3, #16
 800bafc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bafe:	2310      	movs	r3, #16
 800bb00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	0e5b      	lsrs	r3, r3, #25
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	f003 0307 	and.w	r3, r3, #7
 800bb10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	0f5b      	lsrs	r3, r3, #29
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	f003 0307 	and.w	r3, r3, #7
 800bb20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb22:	7bbb      	ldrb	r3, [r7, #14]
 800bb24:	7b3a      	ldrb	r2, [r7, #12]
 800bb26:	4911      	ldr	r1, [pc, #68]	@ (800bb6c <UARTEx_SetNbDataToProcess+0x94>)
 800bb28:	5c8a      	ldrb	r2, [r1, r2]
 800bb2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb2e:	7b3a      	ldrb	r2, [r7, #12]
 800bb30:	490f      	ldr	r1, [pc, #60]	@ (800bb70 <UARTEx_SetNbDataToProcess+0x98>)
 800bb32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb34:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	7b7a      	ldrb	r2, [r7, #13]
 800bb44:	4909      	ldr	r1, [pc, #36]	@ (800bb6c <UARTEx_SetNbDataToProcess+0x94>)
 800bb46:	5c8a      	ldrb	r2, [r1, r2]
 800bb48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb4c:	7b7a      	ldrb	r2, [r7, #13]
 800bb4e:	4908      	ldr	r1, [pc, #32]	@ (800bb70 <UARTEx_SetNbDataToProcess+0x98>)
 800bb50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb52:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb5e:	bf00      	nop
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	08010670 	.word	0x08010670
 800bb70:	08010678 	.word	0x08010678

0800bb74 <__cvt>:
 800bb74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb76:	ed2d 8b02 	vpush	{d8}
 800bb7a:	eeb0 8b40 	vmov.f64	d8, d0
 800bb7e:	b085      	sub	sp, #20
 800bb80:	4617      	mov	r7, r2
 800bb82:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bb84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb86:	ee18 2a90 	vmov	r2, s17
 800bb8a:	f025 0520 	bic.w	r5, r5, #32
 800bb8e:	2a00      	cmp	r2, #0
 800bb90:	bfb6      	itet	lt
 800bb92:	222d      	movlt	r2, #45	@ 0x2d
 800bb94:	2200      	movge	r2, #0
 800bb96:	eeb1 8b40 	vneglt.f64	d8, d0
 800bb9a:	2d46      	cmp	r5, #70	@ 0x46
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	701a      	strb	r2, [r3, #0]
 800bba0:	d004      	beq.n	800bbac <__cvt+0x38>
 800bba2:	2d45      	cmp	r5, #69	@ 0x45
 800bba4:	d100      	bne.n	800bba8 <__cvt+0x34>
 800bba6:	3401      	adds	r4, #1
 800bba8:	2102      	movs	r1, #2
 800bbaa:	e000      	b.n	800bbae <__cvt+0x3a>
 800bbac:	2103      	movs	r1, #3
 800bbae:	ab03      	add	r3, sp, #12
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	ab02      	add	r3, sp, #8
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	4633      	mov	r3, r6
 800bbba:	eeb0 0b48 	vmov.f64	d0, d8
 800bbbe:	f001 f883 	bl	800ccc8 <_dtoa_r>
 800bbc2:	2d47      	cmp	r5, #71	@ 0x47
 800bbc4:	d114      	bne.n	800bbf0 <__cvt+0x7c>
 800bbc6:	07fb      	lsls	r3, r7, #31
 800bbc8:	d50a      	bpl.n	800bbe0 <__cvt+0x6c>
 800bbca:	1902      	adds	r2, r0, r4
 800bbcc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	bf08      	it	eq
 800bbd6:	9203      	streq	r2, [sp, #12]
 800bbd8:	2130      	movs	r1, #48	@ 0x30
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d319      	bcc.n	800bc14 <__cvt+0xa0>
 800bbe0:	9b03      	ldr	r3, [sp, #12]
 800bbe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbe4:	1a1b      	subs	r3, r3, r0
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	b005      	add	sp, #20
 800bbea:	ecbd 8b02 	vpop	{d8}
 800bbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbf0:	2d46      	cmp	r5, #70	@ 0x46
 800bbf2:	eb00 0204 	add.w	r2, r0, r4
 800bbf6:	d1e9      	bne.n	800bbcc <__cvt+0x58>
 800bbf8:	7803      	ldrb	r3, [r0, #0]
 800bbfa:	2b30      	cmp	r3, #48	@ 0x30
 800bbfc:	d107      	bne.n	800bc0e <__cvt+0x9a>
 800bbfe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc06:	bf1c      	itt	ne
 800bc08:	f1c4 0401 	rsbne	r4, r4, #1
 800bc0c:	6034      	strne	r4, [r6, #0]
 800bc0e:	6833      	ldr	r3, [r6, #0]
 800bc10:	441a      	add	r2, r3
 800bc12:	e7db      	b.n	800bbcc <__cvt+0x58>
 800bc14:	1c5c      	adds	r4, r3, #1
 800bc16:	9403      	str	r4, [sp, #12]
 800bc18:	7019      	strb	r1, [r3, #0]
 800bc1a:	e7de      	b.n	800bbda <__cvt+0x66>

0800bc1c <__exponent>:
 800bc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc1e:	2900      	cmp	r1, #0
 800bc20:	bfba      	itte	lt
 800bc22:	4249      	neglt	r1, r1
 800bc24:	232d      	movlt	r3, #45	@ 0x2d
 800bc26:	232b      	movge	r3, #43	@ 0x2b
 800bc28:	2909      	cmp	r1, #9
 800bc2a:	7002      	strb	r2, [r0, #0]
 800bc2c:	7043      	strb	r3, [r0, #1]
 800bc2e:	dd29      	ble.n	800bc84 <__exponent+0x68>
 800bc30:	f10d 0307 	add.w	r3, sp, #7
 800bc34:	461d      	mov	r5, r3
 800bc36:	270a      	movs	r7, #10
 800bc38:	461a      	mov	r2, r3
 800bc3a:	fbb1 f6f7 	udiv	r6, r1, r7
 800bc3e:	fb07 1416 	mls	r4, r7, r6, r1
 800bc42:	3430      	adds	r4, #48	@ 0x30
 800bc44:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bc48:	460c      	mov	r4, r1
 800bc4a:	2c63      	cmp	r4, #99	@ 0x63
 800bc4c:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc50:	4631      	mov	r1, r6
 800bc52:	dcf1      	bgt.n	800bc38 <__exponent+0x1c>
 800bc54:	3130      	adds	r1, #48	@ 0x30
 800bc56:	1e94      	subs	r4, r2, #2
 800bc58:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc5c:	1c41      	adds	r1, r0, #1
 800bc5e:	4623      	mov	r3, r4
 800bc60:	42ab      	cmp	r3, r5
 800bc62:	d30a      	bcc.n	800bc7a <__exponent+0x5e>
 800bc64:	f10d 0309 	add.w	r3, sp, #9
 800bc68:	1a9b      	subs	r3, r3, r2
 800bc6a:	42ac      	cmp	r4, r5
 800bc6c:	bf88      	it	hi
 800bc6e:	2300      	movhi	r3, #0
 800bc70:	3302      	adds	r3, #2
 800bc72:	4403      	add	r3, r0
 800bc74:	1a18      	subs	r0, r3, r0
 800bc76:	b003      	add	sp, #12
 800bc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bc7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bc82:	e7ed      	b.n	800bc60 <__exponent+0x44>
 800bc84:	2330      	movs	r3, #48	@ 0x30
 800bc86:	3130      	adds	r1, #48	@ 0x30
 800bc88:	7083      	strb	r3, [r0, #2]
 800bc8a:	70c1      	strb	r1, [r0, #3]
 800bc8c:	1d03      	adds	r3, r0, #4
 800bc8e:	e7f1      	b.n	800bc74 <__exponent+0x58>

0800bc90 <_printf_float>:
 800bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	b08d      	sub	sp, #52	@ 0x34
 800bc96:	460c      	mov	r4, r1
 800bc98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bc9c:	4616      	mov	r6, r2
 800bc9e:	461f      	mov	r7, r3
 800bca0:	4605      	mov	r5, r0
 800bca2:	f000 ff0b 	bl	800cabc <_localeconv_r>
 800bca6:	f8d0 b000 	ldr.w	fp, [r0]
 800bcaa:	4658      	mov	r0, fp
 800bcac:	f7f4 fb68 	bl	8000380 <strlen>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcb4:	f8d8 3000 	ldr.w	r3, [r8]
 800bcb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bcbc:	6822      	ldr	r2, [r4, #0]
 800bcbe:	9005      	str	r0, [sp, #20]
 800bcc0:	3307      	adds	r3, #7
 800bcc2:	f023 0307 	bic.w	r3, r3, #7
 800bcc6:	f103 0108 	add.w	r1, r3, #8
 800bcca:	f8c8 1000 	str.w	r1, [r8]
 800bcce:	ed93 0b00 	vldr	d0, [r3]
 800bcd2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800bf30 <_printf_float+0x2a0>
 800bcd6:	eeb0 7bc0 	vabs.f64	d7, d0
 800bcda:	eeb4 7b46 	vcmp.f64	d7, d6
 800bcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bce6:	dd24      	ble.n	800bd32 <_printf_float+0xa2>
 800bce8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf0:	d502      	bpl.n	800bcf8 <_printf_float+0x68>
 800bcf2:	232d      	movs	r3, #45	@ 0x2d
 800bcf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcf8:	498f      	ldr	r1, [pc, #572]	@ (800bf38 <_printf_float+0x2a8>)
 800bcfa:	4b90      	ldr	r3, [pc, #576]	@ (800bf3c <_printf_float+0x2ac>)
 800bcfc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bd00:	bf94      	ite	ls
 800bd02:	4688      	movls	r8, r1
 800bd04:	4698      	movhi	r8, r3
 800bd06:	f022 0204 	bic.w	r2, r2, #4
 800bd0a:	2303      	movs	r3, #3
 800bd0c:	6123      	str	r3, [r4, #16]
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	f04f 0a00 	mov.w	sl, #0
 800bd14:	9700      	str	r7, [sp, #0]
 800bd16:	4633      	mov	r3, r6
 800bd18:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f000 f9d1 	bl	800c0c4 <_printf_common>
 800bd22:	3001      	adds	r0, #1
 800bd24:	f040 8089 	bne.w	800be3a <_printf_float+0x1aa>
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	b00d      	add	sp, #52	@ 0x34
 800bd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd32:	eeb4 0b40 	vcmp.f64	d0, d0
 800bd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd3a:	d709      	bvc.n	800bd50 <_printf_float+0xc0>
 800bd3c:	ee10 3a90 	vmov	r3, s1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	bfbc      	itt	lt
 800bd44:	232d      	movlt	r3, #45	@ 0x2d
 800bd46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bd4a:	497d      	ldr	r1, [pc, #500]	@ (800bf40 <_printf_float+0x2b0>)
 800bd4c:	4b7d      	ldr	r3, [pc, #500]	@ (800bf44 <_printf_float+0x2b4>)
 800bd4e:	e7d5      	b.n	800bcfc <_printf_float+0x6c>
 800bd50:	6863      	ldr	r3, [r4, #4]
 800bd52:	1c59      	adds	r1, r3, #1
 800bd54:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bd58:	d139      	bne.n	800bdce <_printf_float+0x13e>
 800bd5a:	2306      	movs	r3, #6
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd62:	2300      	movs	r3, #0
 800bd64:	6022      	str	r2, [r4, #0]
 800bd66:	9303      	str	r3, [sp, #12]
 800bd68:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bd6e:	ab09      	add	r3, sp, #36	@ 0x24
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	6861      	ldr	r1, [r4, #4]
 800bd74:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f7ff fefb 	bl	800bb74 <__cvt>
 800bd7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bd82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd84:	4680      	mov	r8, r0
 800bd86:	d129      	bne.n	800bddc <_printf_float+0x14c>
 800bd88:	1cc8      	adds	r0, r1, #3
 800bd8a:	db02      	blt.n	800bd92 <_printf_float+0x102>
 800bd8c:	6863      	ldr	r3, [r4, #4]
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	dd41      	ble.n	800be16 <_printf_float+0x186>
 800bd92:	f1a9 0902 	sub.w	r9, r9, #2
 800bd96:	fa5f f989 	uxtb.w	r9, r9
 800bd9a:	3901      	subs	r1, #1
 800bd9c:	464a      	mov	r2, r9
 800bd9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bda2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bda4:	f7ff ff3a 	bl	800bc1c <__exponent>
 800bda8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdaa:	1813      	adds	r3, r2, r0
 800bdac:	2a01      	cmp	r2, #1
 800bdae:	4682      	mov	sl, r0
 800bdb0:	6123      	str	r3, [r4, #16]
 800bdb2:	dc02      	bgt.n	800bdba <_printf_float+0x12a>
 800bdb4:	6822      	ldr	r2, [r4, #0]
 800bdb6:	07d2      	lsls	r2, r2, #31
 800bdb8:	d501      	bpl.n	800bdbe <_printf_float+0x12e>
 800bdba:	3301      	adds	r3, #1
 800bdbc:	6123      	str	r3, [r4, #16]
 800bdbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0a6      	beq.n	800bd14 <_printf_float+0x84>
 800bdc6:	232d      	movs	r3, #45	@ 0x2d
 800bdc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdcc:	e7a2      	b.n	800bd14 <_printf_float+0x84>
 800bdce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bdd2:	d1c4      	bne.n	800bd5e <_printf_float+0xce>
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1c2      	bne.n	800bd5e <_printf_float+0xce>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e7bf      	b.n	800bd5c <_printf_float+0xcc>
 800bddc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bde0:	d9db      	bls.n	800bd9a <_printf_float+0x10a>
 800bde2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bde6:	d118      	bne.n	800be1a <_printf_float+0x18a>
 800bde8:	2900      	cmp	r1, #0
 800bdea:	6863      	ldr	r3, [r4, #4]
 800bdec:	dd0b      	ble.n	800be06 <_printf_float+0x176>
 800bdee:	6121      	str	r1, [r4, #16]
 800bdf0:	b913      	cbnz	r3, 800bdf8 <_printf_float+0x168>
 800bdf2:	6822      	ldr	r2, [r4, #0]
 800bdf4:	07d0      	lsls	r0, r2, #31
 800bdf6:	d502      	bpl.n	800bdfe <_printf_float+0x16e>
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	440b      	add	r3, r1
 800bdfc:	6123      	str	r3, [r4, #16]
 800bdfe:	65a1      	str	r1, [r4, #88]	@ 0x58
 800be00:	f04f 0a00 	mov.w	sl, #0
 800be04:	e7db      	b.n	800bdbe <_printf_float+0x12e>
 800be06:	b913      	cbnz	r3, 800be0e <_printf_float+0x17e>
 800be08:	6822      	ldr	r2, [r4, #0]
 800be0a:	07d2      	lsls	r2, r2, #31
 800be0c:	d501      	bpl.n	800be12 <_printf_float+0x182>
 800be0e:	3302      	adds	r3, #2
 800be10:	e7f4      	b.n	800bdfc <_printf_float+0x16c>
 800be12:	2301      	movs	r3, #1
 800be14:	e7f2      	b.n	800bdfc <_printf_float+0x16c>
 800be16:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800be1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be1c:	4299      	cmp	r1, r3
 800be1e:	db05      	blt.n	800be2c <_printf_float+0x19c>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	6121      	str	r1, [r4, #16]
 800be24:	07d8      	lsls	r0, r3, #31
 800be26:	d5ea      	bpl.n	800bdfe <_printf_float+0x16e>
 800be28:	1c4b      	adds	r3, r1, #1
 800be2a:	e7e7      	b.n	800bdfc <_printf_float+0x16c>
 800be2c:	2900      	cmp	r1, #0
 800be2e:	bfd4      	ite	le
 800be30:	f1c1 0202 	rsble	r2, r1, #2
 800be34:	2201      	movgt	r2, #1
 800be36:	4413      	add	r3, r2
 800be38:	e7e0      	b.n	800bdfc <_printf_float+0x16c>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	055a      	lsls	r2, r3, #21
 800be3e:	d407      	bmi.n	800be50 <_printf_float+0x1c0>
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	4642      	mov	r2, r8
 800be44:	4631      	mov	r1, r6
 800be46:	4628      	mov	r0, r5
 800be48:	47b8      	blx	r7
 800be4a:	3001      	adds	r0, #1
 800be4c:	d12a      	bne.n	800bea4 <_printf_float+0x214>
 800be4e:	e76b      	b.n	800bd28 <_printf_float+0x98>
 800be50:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800be54:	f240 80e0 	bls.w	800c018 <_printf_float+0x388>
 800be58:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800be5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be64:	d133      	bne.n	800bece <_printf_float+0x23e>
 800be66:	4a38      	ldr	r2, [pc, #224]	@ (800bf48 <_printf_float+0x2b8>)
 800be68:	2301      	movs	r3, #1
 800be6a:	4631      	mov	r1, r6
 800be6c:	4628      	mov	r0, r5
 800be6e:	47b8      	blx	r7
 800be70:	3001      	adds	r0, #1
 800be72:	f43f af59 	beq.w	800bd28 <_printf_float+0x98>
 800be76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800be7a:	4543      	cmp	r3, r8
 800be7c:	db02      	blt.n	800be84 <_printf_float+0x1f4>
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	07d8      	lsls	r0, r3, #31
 800be82:	d50f      	bpl.n	800bea4 <_printf_float+0x214>
 800be84:	9b05      	ldr	r3, [sp, #20]
 800be86:	465a      	mov	r2, fp
 800be88:	4631      	mov	r1, r6
 800be8a:	4628      	mov	r0, r5
 800be8c:	47b8      	blx	r7
 800be8e:	3001      	adds	r0, #1
 800be90:	f43f af4a 	beq.w	800bd28 <_printf_float+0x98>
 800be94:	f04f 0900 	mov.w	r9, #0
 800be98:	f108 38ff 	add.w	r8, r8, #4294967295
 800be9c:	f104 0a1a 	add.w	sl, r4, #26
 800bea0:	45c8      	cmp	r8, r9
 800bea2:	dc09      	bgt.n	800beb8 <_printf_float+0x228>
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	079b      	lsls	r3, r3, #30
 800bea8:	f100 8107 	bmi.w	800c0ba <_printf_float+0x42a>
 800beac:	68e0      	ldr	r0, [r4, #12]
 800beae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800beb0:	4298      	cmp	r0, r3
 800beb2:	bfb8      	it	lt
 800beb4:	4618      	movlt	r0, r3
 800beb6:	e739      	b.n	800bd2c <_printf_float+0x9c>
 800beb8:	2301      	movs	r3, #1
 800beba:	4652      	mov	r2, sl
 800bebc:	4631      	mov	r1, r6
 800bebe:	4628      	mov	r0, r5
 800bec0:	47b8      	blx	r7
 800bec2:	3001      	adds	r0, #1
 800bec4:	f43f af30 	beq.w	800bd28 <_printf_float+0x98>
 800bec8:	f109 0901 	add.w	r9, r9, #1
 800becc:	e7e8      	b.n	800bea0 <_printf_float+0x210>
 800bece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	dc3b      	bgt.n	800bf4c <_printf_float+0x2bc>
 800bed4:	4a1c      	ldr	r2, [pc, #112]	@ (800bf48 <_printf_float+0x2b8>)
 800bed6:	2301      	movs	r3, #1
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f af22 	beq.w	800bd28 <_printf_float+0x98>
 800bee4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bee8:	ea59 0303 	orrs.w	r3, r9, r3
 800beec:	d102      	bne.n	800bef4 <_printf_float+0x264>
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	07d9      	lsls	r1, r3, #31
 800bef2:	d5d7      	bpl.n	800bea4 <_printf_float+0x214>
 800bef4:	9b05      	ldr	r3, [sp, #20]
 800bef6:	465a      	mov	r2, fp
 800bef8:	4631      	mov	r1, r6
 800befa:	4628      	mov	r0, r5
 800befc:	47b8      	blx	r7
 800befe:	3001      	adds	r0, #1
 800bf00:	f43f af12 	beq.w	800bd28 <_printf_float+0x98>
 800bf04:	f04f 0a00 	mov.w	sl, #0
 800bf08:	f104 0b1a 	add.w	fp, r4, #26
 800bf0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf0e:	425b      	negs	r3, r3
 800bf10:	4553      	cmp	r3, sl
 800bf12:	dc01      	bgt.n	800bf18 <_printf_float+0x288>
 800bf14:	464b      	mov	r3, r9
 800bf16:	e794      	b.n	800be42 <_printf_float+0x1b2>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	465a      	mov	r2, fp
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4628      	mov	r0, r5
 800bf20:	47b8      	blx	r7
 800bf22:	3001      	adds	r0, #1
 800bf24:	f43f af00 	beq.w	800bd28 <_printf_float+0x98>
 800bf28:	f10a 0a01 	add.w	sl, sl, #1
 800bf2c:	e7ee      	b.n	800bf0c <_printf_float+0x27c>
 800bf2e:	bf00      	nop
 800bf30:	ffffffff 	.word	0xffffffff
 800bf34:	7fefffff 	.word	0x7fefffff
 800bf38:	08010680 	.word	0x08010680
 800bf3c:	08010684 	.word	0x08010684
 800bf40:	08010688 	.word	0x08010688
 800bf44:	0801068c 	.word	0x0801068c
 800bf48:	08010690 	.word	0x08010690
 800bf4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf52:	4553      	cmp	r3, sl
 800bf54:	bfa8      	it	ge
 800bf56:	4653      	movge	r3, sl
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	4699      	mov	r9, r3
 800bf5c:	dc37      	bgt.n	800bfce <_printf_float+0x33e>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9307      	str	r3, [sp, #28]
 800bf62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf66:	f104 021a 	add.w	r2, r4, #26
 800bf6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf6c:	9907      	ldr	r1, [sp, #28]
 800bf6e:	9306      	str	r3, [sp, #24]
 800bf70:	eba3 0309 	sub.w	r3, r3, r9
 800bf74:	428b      	cmp	r3, r1
 800bf76:	dc31      	bgt.n	800bfdc <_printf_float+0x34c>
 800bf78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7a:	459a      	cmp	sl, r3
 800bf7c:	dc3b      	bgt.n	800bff6 <_printf_float+0x366>
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	07da      	lsls	r2, r3, #31
 800bf82:	d438      	bmi.n	800bff6 <_printf_float+0x366>
 800bf84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf86:	ebaa 0903 	sub.w	r9, sl, r3
 800bf8a:	9b06      	ldr	r3, [sp, #24]
 800bf8c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf90:	4599      	cmp	r9, r3
 800bf92:	bfa8      	it	ge
 800bf94:	4699      	movge	r9, r3
 800bf96:	f1b9 0f00 	cmp.w	r9, #0
 800bf9a:	dc34      	bgt.n	800c006 <_printf_float+0x376>
 800bf9c:	f04f 0800 	mov.w	r8, #0
 800bfa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfa4:	f104 0b1a 	add.w	fp, r4, #26
 800bfa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfaa:	ebaa 0303 	sub.w	r3, sl, r3
 800bfae:	eba3 0309 	sub.w	r3, r3, r9
 800bfb2:	4543      	cmp	r3, r8
 800bfb4:	f77f af76 	ble.w	800bea4 <_printf_float+0x214>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	465a      	mov	r2, fp
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	47b8      	blx	r7
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	f43f aeb0 	beq.w	800bd28 <_printf_float+0x98>
 800bfc8:	f108 0801 	add.w	r8, r8, #1
 800bfcc:	e7ec      	b.n	800bfa8 <_printf_float+0x318>
 800bfce:	4642      	mov	r2, r8
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	47b8      	blx	r7
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d1c1      	bne.n	800bf5e <_printf_float+0x2ce>
 800bfda:	e6a5      	b.n	800bd28 <_printf_float+0x98>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	9206      	str	r2, [sp, #24]
 800bfe4:	47b8      	blx	r7
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	f43f ae9e 	beq.w	800bd28 <_printf_float+0x98>
 800bfec:	9b07      	ldr	r3, [sp, #28]
 800bfee:	9a06      	ldr	r2, [sp, #24]
 800bff0:	3301      	adds	r3, #1
 800bff2:	9307      	str	r3, [sp, #28]
 800bff4:	e7b9      	b.n	800bf6a <_printf_float+0x2da>
 800bff6:	9b05      	ldr	r3, [sp, #20]
 800bff8:	465a      	mov	r2, fp
 800bffa:	4631      	mov	r1, r6
 800bffc:	4628      	mov	r0, r5
 800bffe:	47b8      	blx	r7
 800c000:	3001      	adds	r0, #1
 800c002:	d1bf      	bne.n	800bf84 <_printf_float+0x2f4>
 800c004:	e690      	b.n	800bd28 <_printf_float+0x98>
 800c006:	9a06      	ldr	r2, [sp, #24]
 800c008:	464b      	mov	r3, r9
 800c00a:	4442      	add	r2, r8
 800c00c:	4631      	mov	r1, r6
 800c00e:	4628      	mov	r0, r5
 800c010:	47b8      	blx	r7
 800c012:	3001      	adds	r0, #1
 800c014:	d1c2      	bne.n	800bf9c <_printf_float+0x30c>
 800c016:	e687      	b.n	800bd28 <_printf_float+0x98>
 800c018:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c01c:	f1b9 0f01 	cmp.w	r9, #1
 800c020:	dc01      	bgt.n	800c026 <_printf_float+0x396>
 800c022:	07db      	lsls	r3, r3, #31
 800c024:	d536      	bpl.n	800c094 <_printf_float+0x404>
 800c026:	2301      	movs	r3, #1
 800c028:	4642      	mov	r2, r8
 800c02a:	4631      	mov	r1, r6
 800c02c:	4628      	mov	r0, r5
 800c02e:	47b8      	blx	r7
 800c030:	3001      	adds	r0, #1
 800c032:	f43f ae79 	beq.w	800bd28 <_printf_float+0x98>
 800c036:	9b05      	ldr	r3, [sp, #20]
 800c038:	465a      	mov	r2, fp
 800c03a:	4631      	mov	r1, r6
 800c03c:	4628      	mov	r0, r5
 800c03e:	47b8      	blx	r7
 800c040:	3001      	adds	r0, #1
 800c042:	f43f ae71 	beq.w	800bd28 <_printf_float+0x98>
 800c046:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c04a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c052:	f109 39ff 	add.w	r9, r9, #4294967295
 800c056:	d018      	beq.n	800c08a <_printf_float+0x3fa>
 800c058:	464b      	mov	r3, r9
 800c05a:	f108 0201 	add.w	r2, r8, #1
 800c05e:	4631      	mov	r1, r6
 800c060:	4628      	mov	r0, r5
 800c062:	47b8      	blx	r7
 800c064:	3001      	adds	r0, #1
 800c066:	d10c      	bne.n	800c082 <_printf_float+0x3f2>
 800c068:	e65e      	b.n	800bd28 <_printf_float+0x98>
 800c06a:	2301      	movs	r3, #1
 800c06c:	465a      	mov	r2, fp
 800c06e:	4631      	mov	r1, r6
 800c070:	4628      	mov	r0, r5
 800c072:	47b8      	blx	r7
 800c074:	3001      	adds	r0, #1
 800c076:	f43f ae57 	beq.w	800bd28 <_printf_float+0x98>
 800c07a:	f108 0801 	add.w	r8, r8, #1
 800c07e:	45c8      	cmp	r8, r9
 800c080:	dbf3      	blt.n	800c06a <_printf_float+0x3da>
 800c082:	4653      	mov	r3, sl
 800c084:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c088:	e6dc      	b.n	800be44 <_printf_float+0x1b4>
 800c08a:	f04f 0800 	mov.w	r8, #0
 800c08e:	f104 0b1a 	add.w	fp, r4, #26
 800c092:	e7f4      	b.n	800c07e <_printf_float+0x3ee>
 800c094:	2301      	movs	r3, #1
 800c096:	4642      	mov	r2, r8
 800c098:	e7e1      	b.n	800c05e <_printf_float+0x3ce>
 800c09a:	2301      	movs	r3, #1
 800c09c:	464a      	mov	r2, r9
 800c09e:	4631      	mov	r1, r6
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	47b8      	blx	r7
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f43f ae3f 	beq.w	800bd28 <_printf_float+0x98>
 800c0aa:	f108 0801 	add.w	r8, r8, #1
 800c0ae:	68e3      	ldr	r3, [r4, #12]
 800c0b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c0b2:	1a5b      	subs	r3, r3, r1
 800c0b4:	4543      	cmp	r3, r8
 800c0b6:	dcf0      	bgt.n	800c09a <_printf_float+0x40a>
 800c0b8:	e6f8      	b.n	800beac <_printf_float+0x21c>
 800c0ba:	f04f 0800 	mov.w	r8, #0
 800c0be:	f104 0919 	add.w	r9, r4, #25
 800c0c2:	e7f4      	b.n	800c0ae <_printf_float+0x41e>

0800c0c4 <_printf_common>:
 800c0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	4698      	mov	r8, r3
 800c0cc:	688a      	ldr	r2, [r1, #8]
 800c0ce:	690b      	ldr	r3, [r1, #16]
 800c0d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	bfb8      	it	lt
 800c0d8:	4613      	movlt	r3, r2
 800c0da:	6033      	str	r3, [r6, #0]
 800c0dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0e0:	4607      	mov	r7, r0
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	b10a      	cbz	r2, 800c0ea <_printf_common+0x26>
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	6033      	str	r3, [r6, #0]
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	0699      	lsls	r1, r3, #26
 800c0ee:	bf42      	ittt	mi
 800c0f0:	6833      	ldrmi	r3, [r6, #0]
 800c0f2:	3302      	addmi	r3, #2
 800c0f4:	6033      	strmi	r3, [r6, #0]
 800c0f6:	6825      	ldr	r5, [r4, #0]
 800c0f8:	f015 0506 	ands.w	r5, r5, #6
 800c0fc:	d106      	bne.n	800c10c <_printf_common+0x48>
 800c0fe:	f104 0a19 	add.w	sl, r4, #25
 800c102:	68e3      	ldr	r3, [r4, #12]
 800c104:	6832      	ldr	r2, [r6, #0]
 800c106:	1a9b      	subs	r3, r3, r2
 800c108:	42ab      	cmp	r3, r5
 800c10a:	dc26      	bgt.n	800c15a <_printf_common+0x96>
 800c10c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c110:	6822      	ldr	r2, [r4, #0]
 800c112:	3b00      	subs	r3, #0
 800c114:	bf18      	it	ne
 800c116:	2301      	movne	r3, #1
 800c118:	0692      	lsls	r2, r2, #26
 800c11a:	d42b      	bmi.n	800c174 <_printf_common+0xb0>
 800c11c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c120:	4641      	mov	r1, r8
 800c122:	4638      	mov	r0, r7
 800c124:	47c8      	blx	r9
 800c126:	3001      	adds	r0, #1
 800c128:	d01e      	beq.n	800c168 <_printf_common+0xa4>
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	6922      	ldr	r2, [r4, #16]
 800c12e:	f003 0306 	and.w	r3, r3, #6
 800c132:	2b04      	cmp	r3, #4
 800c134:	bf02      	ittt	eq
 800c136:	68e5      	ldreq	r5, [r4, #12]
 800c138:	6833      	ldreq	r3, [r6, #0]
 800c13a:	1aed      	subeq	r5, r5, r3
 800c13c:	68a3      	ldr	r3, [r4, #8]
 800c13e:	bf0c      	ite	eq
 800c140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c144:	2500      	movne	r5, #0
 800c146:	4293      	cmp	r3, r2
 800c148:	bfc4      	itt	gt
 800c14a:	1a9b      	subgt	r3, r3, r2
 800c14c:	18ed      	addgt	r5, r5, r3
 800c14e:	2600      	movs	r6, #0
 800c150:	341a      	adds	r4, #26
 800c152:	42b5      	cmp	r5, r6
 800c154:	d11a      	bne.n	800c18c <_printf_common+0xc8>
 800c156:	2000      	movs	r0, #0
 800c158:	e008      	b.n	800c16c <_printf_common+0xa8>
 800c15a:	2301      	movs	r3, #1
 800c15c:	4652      	mov	r2, sl
 800c15e:	4641      	mov	r1, r8
 800c160:	4638      	mov	r0, r7
 800c162:	47c8      	blx	r9
 800c164:	3001      	adds	r0, #1
 800c166:	d103      	bne.n	800c170 <_printf_common+0xac>
 800c168:	f04f 30ff 	mov.w	r0, #4294967295
 800c16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c170:	3501      	adds	r5, #1
 800c172:	e7c6      	b.n	800c102 <_printf_common+0x3e>
 800c174:	18e1      	adds	r1, r4, r3
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	2030      	movs	r0, #48	@ 0x30
 800c17a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c17e:	4422      	add	r2, r4
 800c180:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c188:	3302      	adds	r3, #2
 800c18a:	e7c7      	b.n	800c11c <_printf_common+0x58>
 800c18c:	2301      	movs	r3, #1
 800c18e:	4622      	mov	r2, r4
 800c190:	4641      	mov	r1, r8
 800c192:	4638      	mov	r0, r7
 800c194:	47c8      	blx	r9
 800c196:	3001      	adds	r0, #1
 800c198:	d0e6      	beq.n	800c168 <_printf_common+0xa4>
 800c19a:	3601      	adds	r6, #1
 800c19c:	e7d9      	b.n	800c152 <_printf_common+0x8e>
	...

0800c1a0 <_printf_i>:
 800c1a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a4:	7e0f      	ldrb	r7, [r1, #24]
 800c1a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1a8:	2f78      	cmp	r7, #120	@ 0x78
 800c1aa:	4691      	mov	r9, r2
 800c1ac:	4680      	mov	r8, r0
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	469a      	mov	sl, r3
 800c1b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c1b6:	d807      	bhi.n	800c1c8 <_printf_i+0x28>
 800c1b8:	2f62      	cmp	r7, #98	@ 0x62
 800c1ba:	d80a      	bhi.n	800c1d2 <_printf_i+0x32>
 800c1bc:	2f00      	cmp	r7, #0
 800c1be:	f000 80d2 	beq.w	800c366 <_printf_i+0x1c6>
 800c1c2:	2f58      	cmp	r7, #88	@ 0x58
 800c1c4:	f000 80b9 	beq.w	800c33a <_printf_i+0x19a>
 800c1c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1d0:	e03a      	b.n	800c248 <_printf_i+0xa8>
 800c1d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1d6:	2b15      	cmp	r3, #21
 800c1d8:	d8f6      	bhi.n	800c1c8 <_printf_i+0x28>
 800c1da:	a101      	add	r1, pc, #4	@ (adr r1, 800c1e0 <_printf_i+0x40>)
 800c1dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1e0:	0800c239 	.word	0x0800c239
 800c1e4:	0800c24d 	.word	0x0800c24d
 800c1e8:	0800c1c9 	.word	0x0800c1c9
 800c1ec:	0800c1c9 	.word	0x0800c1c9
 800c1f0:	0800c1c9 	.word	0x0800c1c9
 800c1f4:	0800c1c9 	.word	0x0800c1c9
 800c1f8:	0800c24d 	.word	0x0800c24d
 800c1fc:	0800c1c9 	.word	0x0800c1c9
 800c200:	0800c1c9 	.word	0x0800c1c9
 800c204:	0800c1c9 	.word	0x0800c1c9
 800c208:	0800c1c9 	.word	0x0800c1c9
 800c20c:	0800c34d 	.word	0x0800c34d
 800c210:	0800c277 	.word	0x0800c277
 800c214:	0800c307 	.word	0x0800c307
 800c218:	0800c1c9 	.word	0x0800c1c9
 800c21c:	0800c1c9 	.word	0x0800c1c9
 800c220:	0800c36f 	.word	0x0800c36f
 800c224:	0800c1c9 	.word	0x0800c1c9
 800c228:	0800c277 	.word	0x0800c277
 800c22c:	0800c1c9 	.word	0x0800c1c9
 800c230:	0800c1c9 	.word	0x0800c1c9
 800c234:	0800c30f 	.word	0x0800c30f
 800c238:	6833      	ldr	r3, [r6, #0]
 800c23a:	1d1a      	adds	r2, r3, #4
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	6032      	str	r2, [r6, #0]
 800c240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c244:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c248:	2301      	movs	r3, #1
 800c24a:	e09d      	b.n	800c388 <_printf_i+0x1e8>
 800c24c:	6833      	ldr	r3, [r6, #0]
 800c24e:	6820      	ldr	r0, [r4, #0]
 800c250:	1d19      	adds	r1, r3, #4
 800c252:	6031      	str	r1, [r6, #0]
 800c254:	0606      	lsls	r6, r0, #24
 800c256:	d501      	bpl.n	800c25c <_printf_i+0xbc>
 800c258:	681d      	ldr	r5, [r3, #0]
 800c25a:	e003      	b.n	800c264 <_printf_i+0xc4>
 800c25c:	0645      	lsls	r5, r0, #25
 800c25e:	d5fb      	bpl.n	800c258 <_printf_i+0xb8>
 800c260:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c264:	2d00      	cmp	r5, #0
 800c266:	da03      	bge.n	800c270 <_printf_i+0xd0>
 800c268:	232d      	movs	r3, #45	@ 0x2d
 800c26a:	426d      	negs	r5, r5
 800c26c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c270:	4859      	ldr	r0, [pc, #356]	@ (800c3d8 <_printf_i+0x238>)
 800c272:	230a      	movs	r3, #10
 800c274:	e011      	b.n	800c29a <_printf_i+0xfa>
 800c276:	6821      	ldr	r1, [r4, #0]
 800c278:	6833      	ldr	r3, [r6, #0]
 800c27a:	0608      	lsls	r0, r1, #24
 800c27c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c280:	d402      	bmi.n	800c288 <_printf_i+0xe8>
 800c282:	0649      	lsls	r1, r1, #25
 800c284:	bf48      	it	mi
 800c286:	b2ad      	uxthmi	r5, r5
 800c288:	2f6f      	cmp	r7, #111	@ 0x6f
 800c28a:	4853      	ldr	r0, [pc, #332]	@ (800c3d8 <_printf_i+0x238>)
 800c28c:	6033      	str	r3, [r6, #0]
 800c28e:	bf14      	ite	ne
 800c290:	230a      	movne	r3, #10
 800c292:	2308      	moveq	r3, #8
 800c294:	2100      	movs	r1, #0
 800c296:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c29a:	6866      	ldr	r6, [r4, #4]
 800c29c:	60a6      	str	r6, [r4, #8]
 800c29e:	2e00      	cmp	r6, #0
 800c2a0:	bfa2      	ittt	ge
 800c2a2:	6821      	ldrge	r1, [r4, #0]
 800c2a4:	f021 0104 	bicge.w	r1, r1, #4
 800c2a8:	6021      	strge	r1, [r4, #0]
 800c2aa:	b90d      	cbnz	r5, 800c2b0 <_printf_i+0x110>
 800c2ac:	2e00      	cmp	r6, #0
 800c2ae:	d04b      	beq.n	800c348 <_printf_i+0x1a8>
 800c2b0:	4616      	mov	r6, r2
 800c2b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2b6:	fb03 5711 	mls	r7, r3, r1, r5
 800c2ba:	5dc7      	ldrb	r7, [r0, r7]
 800c2bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2c0:	462f      	mov	r7, r5
 800c2c2:	42bb      	cmp	r3, r7
 800c2c4:	460d      	mov	r5, r1
 800c2c6:	d9f4      	bls.n	800c2b2 <_printf_i+0x112>
 800c2c8:	2b08      	cmp	r3, #8
 800c2ca:	d10b      	bne.n	800c2e4 <_printf_i+0x144>
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	07df      	lsls	r7, r3, #31
 800c2d0:	d508      	bpl.n	800c2e4 <_printf_i+0x144>
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	6861      	ldr	r1, [r4, #4]
 800c2d6:	4299      	cmp	r1, r3
 800c2d8:	bfde      	ittt	le
 800c2da:	2330      	movle	r3, #48	@ 0x30
 800c2dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2e4:	1b92      	subs	r2, r2, r6
 800c2e6:	6122      	str	r2, [r4, #16]
 800c2e8:	f8cd a000 	str.w	sl, [sp]
 800c2ec:	464b      	mov	r3, r9
 800c2ee:	aa03      	add	r2, sp, #12
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f7ff fee6 	bl	800c0c4 <_printf_common>
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	d14a      	bne.n	800c392 <_printf_i+0x1f2>
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	b004      	add	sp, #16
 800c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	f043 0320 	orr.w	r3, r3, #32
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	4833      	ldr	r0, [pc, #204]	@ (800c3dc <_printf_i+0x23c>)
 800c310:	2778      	movs	r7, #120	@ 0x78
 800c312:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	6831      	ldr	r1, [r6, #0]
 800c31a:	061f      	lsls	r7, r3, #24
 800c31c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c320:	d402      	bmi.n	800c328 <_printf_i+0x188>
 800c322:	065f      	lsls	r7, r3, #25
 800c324:	bf48      	it	mi
 800c326:	b2ad      	uxthmi	r5, r5
 800c328:	6031      	str	r1, [r6, #0]
 800c32a:	07d9      	lsls	r1, r3, #31
 800c32c:	bf44      	itt	mi
 800c32e:	f043 0320 	orrmi.w	r3, r3, #32
 800c332:	6023      	strmi	r3, [r4, #0]
 800c334:	b11d      	cbz	r5, 800c33e <_printf_i+0x19e>
 800c336:	2310      	movs	r3, #16
 800c338:	e7ac      	b.n	800c294 <_printf_i+0xf4>
 800c33a:	4827      	ldr	r0, [pc, #156]	@ (800c3d8 <_printf_i+0x238>)
 800c33c:	e7e9      	b.n	800c312 <_printf_i+0x172>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	f023 0320 	bic.w	r3, r3, #32
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	e7f6      	b.n	800c336 <_printf_i+0x196>
 800c348:	4616      	mov	r6, r2
 800c34a:	e7bd      	b.n	800c2c8 <_printf_i+0x128>
 800c34c:	6833      	ldr	r3, [r6, #0]
 800c34e:	6825      	ldr	r5, [r4, #0]
 800c350:	6961      	ldr	r1, [r4, #20]
 800c352:	1d18      	adds	r0, r3, #4
 800c354:	6030      	str	r0, [r6, #0]
 800c356:	062e      	lsls	r6, r5, #24
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	d501      	bpl.n	800c360 <_printf_i+0x1c0>
 800c35c:	6019      	str	r1, [r3, #0]
 800c35e:	e002      	b.n	800c366 <_printf_i+0x1c6>
 800c360:	0668      	lsls	r0, r5, #25
 800c362:	d5fb      	bpl.n	800c35c <_printf_i+0x1bc>
 800c364:	8019      	strh	r1, [r3, #0]
 800c366:	2300      	movs	r3, #0
 800c368:	6123      	str	r3, [r4, #16]
 800c36a:	4616      	mov	r6, r2
 800c36c:	e7bc      	b.n	800c2e8 <_printf_i+0x148>
 800c36e:	6833      	ldr	r3, [r6, #0]
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	6032      	str	r2, [r6, #0]
 800c374:	681e      	ldr	r6, [r3, #0]
 800c376:	6862      	ldr	r2, [r4, #4]
 800c378:	2100      	movs	r1, #0
 800c37a:	4630      	mov	r0, r6
 800c37c:	f7f3 ffb0 	bl	80002e0 <memchr>
 800c380:	b108      	cbz	r0, 800c386 <_printf_i+0x1e6>
 800c382:	1b80      	subs	r0, r0, r6
 800c384:	6060      	str	r0, [r4, #4]
 800c386:	6863      	ldr	r3, [r4, #4]
 800c388:	6123      	str	r3, [r4, #16]
 800c38a:	2300      	movs	r3, #0
 800c38c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c390:	e7aa      	b.n	800c2e8 <_printf_i+0x148>
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	4632      	mov	r2, r6
 800c396:	4649      	mov	r1, r9
 800c398:	4640      	mov	r0, r8
 800c39a:	47d0      	blx	sl
 800c39c:	3001      	adds	r0, #1
 800c39e:	d0ad      	beq.n	800c2fc <_printf_i+0x15c>
 800c3a0:	6823      	ldr	r3, [r4, #0]
 800c3a2:	079b      	lsls	r3, r3, #30
 800c3a4:	d413      	bmi.n	800c3ce <_printf_i+0x22e>
 800c3a6:	68e0      	ldr	r0, [r4, #12]
 800c3a8:	9b03      	ldr	r3, [sp, #12]
 800c3aa:	4298      	cmp	r0, r3
 800c3ac:	bfb8      	it	lt
 800c3ae:	4618      	movlt	r0, r3
 800c3b0:	e7a6      	b.n	800c300 <_printf_i+0x160>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	4649      	mov	r1, r9
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	47d0      	blx	sl
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d09d      	beq.n	800c2fc <_printf_i+0x15c>
 800c3c0:	3501      	adds	r5, #1
 800c3c2:	68e3      	ldr	r3, [r4, #12]
 800c3c4:	9903      	ldr	r1, [sp, #12]
 800c3c6:	1a5b      	subs	r3, r3, r1
 800c3c8:	42ab      	cmp	r3, r5
 800c3ca:	dcf2      	bgt.n	800c3b2 <_printf_i+0x212>
 800c3cc:	e7eb      	b.n	800c3a6 <_printf_i+0x206>
 800c3ce:	2500      	movs	r5, #0
 800c3d0:	f104 0619 	add.w	r6, r4, #25
 800c3d4:	e7f5      	b.n	800c3c2 <_printf_i+0x222>
 800c3d6:	bf00      	nop
 800c3d8:	08010692 	.word	0x08010692
 800c3dc:	080106a3 	.word	0x080106a3

0800c3e0 <_scanf_float>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	b087      	sub	sp, #28
 800c3e6:	4617      	mov	r7, r2
 800c3e8:	9303      	str	r3, [sp, #12]
 800c3ea:	688b      	ldr	r3, [r1, #8]
 800c3ec:	1e5a      	subs	r2, r3, #1
 800c3ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c3f2:	bf81      	itttt	hi
 800c3f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c3f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800c3fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c400:	608b      	strhi	r3, [r1, #8]
 800c402:	680b      	ldr	r3, [r1, #0]
 800c404:	460a      	mov	r2, r1
 800c406:	f04f 0500 	mov.w	r5, #0
 800c40a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c40e:	f842 3b1c 	str.w	r3, [r2], #28
 800c412:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c416:	4680      	mov	r8, r0
 800c418:	460c      	mov	r4, r1
 800c41a:	bf98      	it	ls
 800c41c:	f04f 0b00 	movls.w	fp, #0
 800c420:	9201      	str	r2, [sp, #4]
 800c422:	4616      	mov	r6, r2
 800c424:	46aa      	mov	sl, r5
 800c426:	46a9      	mov	r9, r5
 800c428:	9502      	str	r5, [sp, #8]
 800c42a:	68a2      	ldr	r2, [r4, #8]
 800c42c:	b152      	cbz	r2, 800c444 <_scanf_float+0x64>
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b4e      	cmp	r3, #78	@ 0x4e
 800c434:	d864      	bhi.n	800c500 <_scanf_float+0x120>
 800c436:	2b40      	cmp	r3, #64	@ 0x40
 800c438:	d83c      	bhi.n	800c4b4 <_scanf_float+0xd4>
 800c43a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c43e:	b2c8      	uxtb	r0, r1
 800c440:	280e      	cmp	r0, #14
 800c442:	d93a      	bls.n	800c4ba <_scanf_float+0xda>
 800c444:	f1b9 0f00 	cmp.w	r9, #0
 800c448:	d003      	beq.n	800c452 <_scanf_float+0x72>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c456:	f1ba 0f01 	cmp.w	sl, #1
 800c45a:	f200 8117 	bhi.w	800c68c <_scanf_float+0x2ac>
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	429e      	cmp	r6, r3
 800c462:	f200 8108 	bhi.w	800c676 <_scanf_float+0x296>
 800c466:	2001      	movs	r0, #1
 800c468:	b007      	add	sp, #28
 800c46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c472:	2a0d      	cmp	r2, #13
 800c474:	d8e6      	bhi.n	800c444 <_scanf_float+0x64>
 800c476:	a101      	add	r1, pc, #4	@ (adr r1, 800c47c <_scanf_float+0x9c>)
 800c478:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c47c:	0800c5c3 	.word	0x0800c5c3
 800c480:	0800c445 	.word	0x0800c445
 800c484:	0800c445 	.word	0x0800c445
 800c488:	0800c445 	.word	0x0800c445
 800c48c:	0800c623 	.word	0x0800c623
 800c490:	0800c5fb 	.word	0x0800c5fb
 800c494:	0800c445 	.word	0x0800c445
 800c498:	0800c445 	.word	0x0800c445
 800c49c:	0800c5d1 	.word	0x0800c5d1
 800c4a0:	0800c445 	.word	0x0800c445
 800c4a4:	0800c445 	.word	0x0800c445
 800c4a8:	0800c445 	.word	0x0800c445
 800c4ac:	0800c445 	.word	0x0800c445
 800c4b0:	0800c589 	.word	0x0800c589
 800c4b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c4b8:	e7db      	b.n	800c472 <_scanf_float+0x92>
 800c4ba:	290e      	cmp	r1, #14
 800c4bc:	d8c2      	bhi.n	800c444 <_scanf_float+0x64>
 800c4be:	a001      	add	r0, pc, #4	@ (adr r0, 800c4c4 <_scanf_float+0xe4>)
 800c4c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c4c4:	0800c579 	.word	0x0800c579
 800c4c8:	0800c445 	.word	0x0800c445
 800c4cc:	0800c579 	.word	0x0800c579
 800c4d0:	0800c60f 	.word	0x0800c60f
 800c4d4:	0800c445 	.word	0x0800c445
 800c4d8:	0800c521 	.word	0x0800c521
 800c4dc:	0800c55f 	.word	0x0800c55f
 800c4e0:	0800c55f 	.word	0x0800c55f
 800c4e4:	0800c55f 	.word	0x0800c55f
 800c4e8:	0800c55f 	.word	0x0800c55f
 800c4ec:	0800c55f 	.word	0x0800c55f
 800c4f0:	0800c55f 	.word	0x0800c55f
 800c4f4:	0800c55f 	.word	0x0800c55f
 800c4f8:	0800c55f 	.word	0x0800c55f
 800c4fc:	0800c55f 	.word	0x0800c55f
 800c500:	2b6e      	cmp	r3, #110	@ 0x6e
 800c502:	d809      	bhi.n	800c518 <_scanf_float+0x138>
 800c504:	2b60      	cmp	r3, #96	@ 0x60
 800c506:	d8b2      	bhi.n	800c46e <_scanf_float+0x8e>
 800c508:	2b54      	cmp	r3, #84	@ 0x54
 800c50a:	d07b      	beq.n	800c604 <_scanf_float+0x224>
 800c50c:	2b59      	cmp	r3, #89	@ 0x59
 800c50e:	d199      	bne.n	800c444 <_scanf_float+0x64>
 800c510:	2d07      	cmp	r5, #7
 800c512:	d197      	bne.n	800c444 <_scanf_float+0x64>
 800c514:	2508      	movs	r5, #8
 800c516:	e02c      	b.n	800c572 <_scanf_float+0x192>
 800c518:	2b74      	cmp	r3, #116	@ 0x74
 800c51a:	d073      	beq.n	800c604 <_scanf_float+0x224>
 800c51c:	2b79      	cmp	r3, #121	@ 0x79
 800c51e:	e7f6      	b.n	800c50e <_scanf_float+0x12e>
 800c520:	6821      	ldr	r1, [r4, #0]
 800c522:	05c8      	lsls	r0, r1, #23
 800c524:	d51b      	bpl.n	800c55e <_scanf_float+0x17e>
 800c526:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c52a:	6021      	str	r1, [r4, #0]
 800c52c:	f109 0901 	add.w	r9, r9, #1
 800c530:	f1bb 0f00 	cmp.w	fp, #0
 800c534:	d003      	beq.n	800c53e <_scanf_float+0x15e>
 800c536:	3201      	adds	r2, #1
 800c538:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c53c:	60a2      	str	r2, [r4, #8]
 800c53e:	68a3      	ldr	r3, [r4, #8]
 800c540:	3b01      	subs	r3, #1
 800c542:	60a3      	str	r3, [r4, #8]
 800c544:	6923      	ldr	r3, [r4, #16]
 800c546:	3301      	adds	r3, #1
 800c548:	6123      	str	r3, [r4, #16]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3b01      	subs	r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	607b      	str	r3, [r7, #4]
 800c552:	f340 8087 	ble.w	800c664 <_scanf_float+0x284>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	3301      	adds	r3, #1
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	e765      	b.n	800c42a <_scanf_float+0x4a>
 800c55e:	eb1a 0105 	adds.w	r1, sl, r5
 800c562:	f47f af6f 	bne.w	800c444 <_scanf_float+0x64>
 800c566:	6822      	ldr	r2, [r4, #0]
 800c568:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c56c:	6022      	str	r2, [r4, #0]
 800c56e:	460d      	mov	r5, r1
 800c570:	468a      	mov	sl, r1
 800c572:	f806 3b01 	strb.w	r3, [r6], #1
 800c576:	e7e2      	b.n	800c53e <_scanf_float+0x15e>
 800c578:	6822      	ldr	r2, [r4, #0]
 800c57a:	0610      	lsls	r0, r2, #24
 800c57c:	f57f af62 	bpl.w	800c444 <_scanf_float+0x64>
 800c580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c584:	6022      	str	r2, [r4, #0]
 800c586:	e7f4      	b.n	800c572 <_scanf_float+0x192>
 800c588:	f1ba 0f00 	cmp.w	sl, #0
 800c58c:	d10e      	bne.n	800c5ac <_scanf_float+0x1cc>
 800c58e:	f1b9 0f00 	cmp.w	r9, #0
 800c592:	d10e      	bne.n	800c5b2 <_scanf_float+0x1d2>
 800c594:	6822      	ldr	r2, [r4, #0]
 800c596:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c59a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c59e:	d108      	bne.n	800c5b2 <_scanf_float+0x1d2>
 800c5a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c5a4:	6022      	str	r2, [r4, #0]
 800c5a6:	f04f 0a01 	mov.w	sl, #1
 800c5aa:	e7e2      	b.n	800c572 <_scanf_float+0x192>
 800c5ac:	f1ba 0f02 	cmp.w	sl, #2
 800c5b0:	d055      	beq.n	800c65e <_scanf_float+0x27e>
 800c5b2:	2d01      	cmp	r5, #1
 800c5b4:	d002      	beq.n	800c5bc <_scanf_float+0x1dc>
 800c5b6:	2d04      	cmp	r5, #4
 800c5b8:	f47f af44 	bne.w	800c444 <_scanf_float+0x64>
 800c5bc:	3501      	adds	r5, #1
 800c5be:	b2ed      	uxtb	r5, r5
 800c5c0:	e7d7      	b.n	800c572 <_scanf_float+0x192>
 800c5c2:	f1ba 0f01 	cmp.w	sl, #1
 800c5c6:	f47f af3d 	bne.w	800c444 <_scanf_float+0x64>
 800c5ca:	f04f 0a02 	mov.w	sl, #2
 800c5ce:	e7d0      	b.n	800c572 <_scanf_float+0x192>
 800c5d0:	b97d      	cbnz	r5, 800c5f2 <_scanf_float+0x212>
 800c5d2:	f1b9 0f00 	cmp.w	r9, #0
 800c5d6:	f47f af38 	bne.w	800c44a <_scanf_float+0x6a>
 800c5da:	6822      	ldr	r2, [r4, #0]
 800c5dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c5e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c5e4:	f040 8101 	bne.w	800c7ea <_scanf_float+0x40a>
 800c5e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c5ec:	6022      	str	r2, [r4, #0]
 800c5ee:	2501      	movs	r5, #1
 800c5f0:	e7bf      	b.n	800c572 <_scanf_float+0x192>
 800c5f2:	2d03      	cmp	r5, #3
 800c5f4:	d0e2      	beq.n	800c5bc <_scanf_float+0x1dc>
 800c5f6:	2d05      	cmp	r5, #5
 800c5f8:	e7de      	b.n	800c5b8 <_scanf_float+0x1d8>
 800c5fa:	2d02      	cmp	r5, #2
 800c5fc:	f47f af22 	bne.w	800c444 <_scanf_float+0x64>
 800c600:	2503      	movs	r5, #3
 800c602:	e7b6      	b.n	800c572 <_scanf_float+0x192>
 800c604:	2d06      	cmp	r5, #6
 800c606:	f47f af1d 	bne.w	800c444 <_scanf_float+0x64>
 800c60a:	2507      	movs	r5, #7
 800c60c:	e7b1      	b.n	800c572 <_scanf_float+0x192>
 800c60e:	6822      	ldr	r2, [r4, #0]
 800c610:	0591      	lsls	r1, r2, #22
 800c612:	f57f af17 	bpl.w	800c444 <_scanf_float+0x64>
 800c616:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c61a:	6022      	str	r2, [r4, #0]
 800c61c:	f8cd 9008 	str.w	r9, [sp, #8]
 800c620:	e7a7      	b.n	800c572 <_scanf_float+0x192>
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c628:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c62c:	d006      	beq.n	800c63c <_scanf_float+0x25c>
 800c62e:	0550      	lsls	r0, r2, #21
 800c630:	f57f af08 	bpl.w	800c444 <_scanf_float+0x64>
 800c634:	f1b9 0f00 	cmp.w	r9, #0
 800c638:	f000 80d7 	beq.w	800c7ea <_scanf_float+0x40a>
 800c63c:	0591      	lsls	r1, r2, #22
 800c63e:	bf58      	it	pl
 800c640:	9902      	ldrpl	r1, [sp, #8]
 800c642:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c646:	bf58      	it	pl
 800c648:	eba9 0101 	subpl.w	r1, r9, r1
 800c64c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c650:	bf58      	it	pl
 800c652:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c656:	6022      	str	r2, [r4, #0]
 800c658:	f04f 0900 	mov.w	r9, #0
 800c65c:	e789      	b.n	800c572 <_scanf_float+0x192>
 800c65e:	f04f 0a03 	mov.w	sl, #3
 800c662:	e786      	b.n	800c572 <_scanf_float+0x192>
 800c664:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c668:	4639      	mov	r1, r7
 800c66a:	4640      	mov	r0, r8
 800c66c:	4798      	blx	r3
 800c66e:	2800      	cmp	r0, #0
 800c670:	f43f aedb 	beq.w	800c42a <_scanf_float+0x4a>
 800c674:	e6e6      	b.n	800c444 <_scanf_float+0x64>
 800c676:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c67a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c67e:	463a      	mov	r2, r7
 800c680:	4640      	mov	r0, r8
 800c682:	4798      	blx	r3
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	3b01      	subs	r3, #1
 800c688:	6123      	str	r3, [r4, #16]
 800c68a:	e6e8      	b.n	800c45e <_scanf_float+0x7e>
 800c68c:	1e6b      	subs	r3, r5, #1
 800c68e:	2b06      	cmp	r3, #6
 800c690:	d824      	bhi.n	800c6dc <_scanf_float+0x2fc>
 800c692:	2d02      	cmp	r5, #2
 800c694:	d836      	bhi.n	800c704 <_scanf_float+0x324>
 800c696:	9b01      	ldr	r3, [sp, #4]
 800c698:	429e      	cmp	r6, r3
 800c69a:	f67f aee4 	bls.w	800c466 <_scanf_float+0x86>
 800c69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6a6:	463a      	mov	r2, r7
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	4798      	blx	r3
 800c6ac:	6923      	ldr	r3, [r4, #16]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	6123      	str	r3, [r4, #16]
 800c6b2:	e7f0      	b.n	800c696 <_scanf_float+0x2b6>
 800c6b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c6bc:	463a      	mov	r2, r7
 800c6be:	4640      	mov	r0, r8
 800c6c0:	4798      	blx	r3
 800c6c2:	6923      	ldr	r3, [r4, #16]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	6123      	str	r3, [r4, #16]
 800c6c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6cc:	fa5f fa8a 	uxtb.w	sl, sl
 800c6d0:	f1ba 0f02 	cmp.w	sl, #2
 800c6d4:	d1ee      	bne.n	800c6b4 <_scanf_float+0x2d4>
 800c6d6:	3d03      	subs	r5, #3
 800c6d8:	b2ed      	uxtb	r5, r5
 800c6da:	1b76      	subs	r6, r6, r5
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	05da      	lsls	r2, r3, #23
 800c6e0:	d530      	bpl.n	800c744 <_scanf_float+0x364>
 800c6e2:	055b      	lsls	r3, r3, #21
 800c6e4:	d511      	bpl.n	800c70a <_scanf_float+0x32a>
 800c6e6:	9b01      	ldr	r3, [sp, #4]
 800c6e8:	429e      	cmp	r6, r3
 800c6ea:	f67f aebc 	bls.w	800c466 <_scanf_float+0x86>
 800c6ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6f6:	463a      	mov	r2, r7
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4798      	blx	r3
 800c6fc:	6923      	ldr	r3, [r4, #16]
 800c6fe:	3b01      	subs	r3, #1
 800c700:	6123      	str	r3, [r4, #16]
 800c702:	e7f0      	b.n	800c6e6 <_scanf_float+0x306>
 800c704:	46aa      	mov	sl, r5
 800c706:	46b3      	mov	fp, r6
 800c708:	e7de      	b.n	800c6c8 <_scanf_float+0x2e8>
 800c70a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c70e:	6923      	ldr	r3, [r4, #16]
 800c710:	2965      	cmp	r1, #101	@ 0x65
 800c712:	f103 33ff 	add.w	r3, r3, #4294967295
 800c716:	f106 35ff 	add.w	r5, r6, #4294967295
 800c71a:	6123      	str	r3, [r4, #16]
 800c71c:	d00c      	beq.n	800c738 <_scanf_float+0x358>
 800c71e:	2945      	cmp	r1, #69	@ 0x45
 800c720:	d00a      	beq.n	800c738 <_scanf_float+0x358>
 800c722:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c726:	463a      	mov	r2, r7
 800c728:	4640      	mov	r0, r8
 800c72a:	4798      	blx	r3
 800c72c:	6923      	ldr	r3, [r4, #16]
 800c72e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c732:	3b01      	subs	r3, #1
 800c734:	1eb5      	subs	r5, r6, #2
 800c736:	6123      	str	r3, [r4, #16]
 800c738:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c73c:	463a      	mov	r2, r7
 800c73e:	4640      	mov	r0, r8
 800c740:	4798      	blx	r3
 800c742:	462e      	mov	r6, r5
 800c744:	6822      	ldr	r2, [r4, #0]
 800c746:	f012 0210 	ands.w	r2, r2, #16
 800c74a:	d001      	beq.n	800c750 <_scanf_float+0x370>
 800c74c:	2000      	movs	r0, #0
 800c74e:	e68b      	b.n	800c468 <_scanf_float+0x88>
 800c750:	7032      	strb	r2, [r6, #0]
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c75c:	d11a      	bne.n	800c794 <_scanf_float+0x3b4>
 800c75e:	9b02      	ldr	r3, [sp, #8]
 800c760:	454b      	cmp	r3, r9
 800c762:	eba3 0209 	sub.w	r2, r3, r9
 800c766:	d121      	bne.n	800c7ac <_scanf_float+0x3cc>
 800c768:	9901      	ldr	r1, [sp, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	4640      	mov	r0, r8
 800c76e:	f002 fb61 	bl	800ee34 <_strtod_r>
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	6821      	ldr	r1, [r4, #0]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f011 0f02 	tst.w	r1, #2
 800c77c:	f103 0204 	add.w	r2, r3, #4
 800c780:	d01f      	beq.n	800c7c2 <_scanf_float+0x3e2>
 800c782:	9903      	ldr	r1, [sp, #12]
 800c784:	600a      	str	r2, [r1, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	ed83 0b00 	vstr	d0, [r3]
 800c78c:	68e3      	ldr	r3, [r4, #12]
 800c78e:	3301      	adds	r3, #1
 800c790:	60e3      	str	r3, [r4, #12]
 800c792:	e7db      	b.n	800c74c <_scanf_float+0x36c>
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d0e6      	beq.n	800c768 <_scanf_float+0x388>
 800c79a:	9905      	ldr	r1, [sp, #20]
 800c79c:	230a      	movs	r3, #10
 800c79e:	3101      	adds	r1, #1
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	f002 fbc7 	bl	800ef34 <_strtol_r>
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	9e05      	ldr	r6, [sp, #20]
 800c7aa:	1ac2      	subs	r2, r0, r3
 800c7ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c7b0:	429e      	cmp	r6, r3
 800c7b2:	bf28      	it	cs
 800c7b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c7b8:	490d      	ldr	r1, [pc, #52]	@ (800c7f0 <_scanf_float+0x410>)
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f000 f912 	bl	800c9e4 <siprintf>
 800c7c0:	e7d2      	b.n	800c768 <_scanf_float+0x388>
 800c7c2:	f011 0f04 	tst.w	r1, #4
 800c7c6:	9903      	ldr	r1, [sp, #12]
 800c7c8:	600a      	str	r2, [r1, #0]
 800c7ca:	d1dc      	bne.n	800c786 <_scanf_float+0x3a6>
 800c7cc:	eeb4 0b40 	vcmp.f64	d0, d0
 800c7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d4:	681d      	ldr	r5, [r3, #0]
 800c7d6:	d705      	bvc.n	800c7e4 <_scanf_float+0x404>
 800c7d8:	4806      	ldr	r0, [pc, #24]	@ (800c7f4 <_scanf_float+0x414>)
 800c7da:	f000 f9e7 	bl	800cbac <nanf>
 800c7de:	ed85 0a00 	vstr	s0, [r5]
 800c7e2:	e7d3      	b.n	800c78c <_scanf_float+0x3ac>
 800c7e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c7e8:	e7f9      	b.n	800c7de <_scanf_float+0x3fe>
 800c7ea:	f04f 0900 	mov.w	r9, #0
 800c7ee:	e630      	b.n	800c452 <_scanf_float+0x72>
 800c7f0:	080106b4 	.word	0x080106b4
 800c7f4:	08010a4d 	.word	0x08010a4d

0800c7f8 <std>:
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	b510      	push	{r4, lr}
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	e9c0 3300 	strd	r3, r3, [r0]
 800c802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c806:	6083      	str	r3, [r0, #8]
 800c808:	8181      	strh	r1, [r0, #12]
 800c80a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c80c:	81c2      	strh	r2, [r0, #14]
 800c80e:	6183      	str	r3, [r0, #24]
 800c810:	4619      	mov	r1, r3
 800c812:	2208      	movs	r2, #8
 800c814:	305c      	adds	r0, #92	@ 0x5c
 800c816:	f000 f948 	bl	800caaa <memset>
 800c81a:	4b0d      	ldr	r3, [pc, #52]	@ (800c850 <std+0x58>)
 800c81c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c81e:	4b0d      	ldr	r3, [pc, #52]	@ (800c854 <std+0x5c>)
 800c820:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c822:	4b0d      	ldr	r3, [pc, #52]	@ (800c858 <std+0x60>)
 800c824:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c826:	4b0d      	ldr	r3, [pc, #52]	@ (800c85c <std+0x64>)
 800c828:	6323      	str	r3, [r4, #48]	@ 0x30
 800c82a:	4b0d      	ldr	r3, [pc, #52]	@ (800c860 <std+0x68>)
 800c82c:	6224      	str	r4, [r4, #32]
 800c82e:	429c      	cmp	r4, r3
 800c830:	d006      	beq.n	800c840 <std+0x48>
 800c832:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c836:	4294      	cmp	r4, r2
 800c838:	d002      	beq.n	800c840 <std+0x48>
 800c83a:	33d0      	adds	r3, #208	@ 0xd0
 800c83c:	429c      	cmp	r4, r3
 800c83e:	d105      	bne.n	800c84c <std+0x54>
 800c840:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c848:	f000 b9ac 	b.w	800cba4 <__retarget_lock_init_recursive>
 800c84c:	bd10      	pop	{r4, pc}
 800c84e:	bf00      	nop
 800c850:	0800ca25 	.word	0x0800ca25
 800c854:	0800ca47 	.word	0x0800ca47
 800c858:	0800ca7f 	.word	0x0800ca7f
 800c85c:	0800caa3 	.word	0x0800caa3
 800c860:	2400064c 	.word	0x2400064c

0800c864 <stdio_exit_handler>:
 800c864:	4a02      	ldr	r2, [pc, #8]	@ (800c870 <stdio_exit_handler+0xc>)
 800c866:	4903      	ldr	r1, [pc, #12]	@ (800c874 <stdio_exit_handler+0x10>)
 800c868:	4803      	ldr	r0, [pc, #12]	@ (800c878 <stdio_exit_handler+0x14>)
 800c86a:	f000 b869 	b.w	800c940 <_fwalk_sglue>
 800c86e:	bf00      	nop
 800c870:	24000014 	.word	0x24000014
 800c874:	0800f2f1 	.word	0x0800f2f1
 800c878:	24000024 	.word	0x24000024

0800c87c <cleanup_stdio>:
 800c87c:	6841      	ldr	r1, [r0, #4]
 800c87e:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b0 <cleanup_stdio+0x34>)
 800c880:	4299      	cmp	r1, r3
 800c882:	b510      	push	{r4, lr}
 800c884:	4604      	mov	r4, r0
 800c886:	d001      	beq.n	800c88c <cleanup_stdio+0x10>
 800c888:	f002 fd32 	bl	800f2f0 <_fflush_r>
 800c88c:	68a1      	ldr	r1, [r4, #8]
 800c88e:	4b09      	ldr	r3, [pc, #36]	@ (800c8b4 <cleanup_stdio+0x38>)
 800c890:	4299      	cmp	r1, r3
 800c892:	d002      	beq.n	800c89a <cleanup_stdio+0x1e>
 800c894:	4620      	mov	r0, r4
 800c896:	f002 fd2b 	bl	800f2f0 <_fflush_r>
 800c89a:	68e1      	ldr	r1, [r4, #12]
 800c89c:	4b06      	ldr	r3, [pc, #24]	@ (800c8b8 <cleanup_stdio+0x3c>)
 800c89e:	4299      	cmp	r1, r3
 800c8a0:	d004      	beq.n	800c8ac <cleanup_stdio+0x30>
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a8:	f002 bd22 	b.w	800f2f0 <_fflush_r>
 800c8ac:	bd10      	pop	{r4, pc}
 800c8ae:	bf00      	nop
 800c8b0:	2400064c 	.word	0x2400064c
 800c8b4:	240006b4 	.word	0x240006b4
 800c8b8:	2400071c 	.word	0x2400071c

0800c8bc <global_stdio_init.part.0>:
 800c8bc:	b510      	push	{r4, lr}
 800c8be:	4b0b      	ldr	r3, [pc, #44]	@ (800c8ec <global_stdio_init.part.0+0x30>)
 800c8c0:	4c0b      	ldr	r4, [pc, #44]	@ (800c8f0 <global_stdio_init.part.0+0x34>)
 800c8c2:	4a0c      	ldr	r2, [pc, #48]	@ (800c8f4 <global_stdio_init.part.0+0x38>)
 800c8c4:	601a      	str	r2, [r3, #0]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	2104      	movs	r1, #4
 800c8cc:	f7ff ff94 	bl	800c7f8 <std>
 800c8d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	2109      	movs	r1, #9
 800c8d8:	f7ff ff8e 	bl	800c7f8 <std>
 800c8dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8e6:	2112      	movs	r1, #18
 800c8e8:	f7ff bf86 	b.w	800c7f8 <std>
 800c8ec:	24000784 	.word	0x24000784
 800c8f0:	2400064c 	.word	0x2400064c
 800c8f4:	0800c865 	.word	0x0800c865

0800c8f8 <__sfp_lock_acquire>:
 800c8f8:	4801      	ldr	r0, [pc, #4]	@ (800c900 <__sfp_lock_acquire+0x8>)
 800c8fa:	f000 b954 	b.w	800cba6 <__retarget_lock_acquire_recursive>
 800c8fe:	bf00      	nop
 800c900:	2400078d 	.word	0x2400078d

0800c904 <__sfp_lock_release>:
 800c904:	4801      	ldr	r0, [pc, #4]	@ (800c90c <__sfp_lock_release+0x8>)
 800c906:	f000 b94f 	b.w	800cba8 <__retarget_lock_release_recursive>
 800c90a:	bf00      	nop
 800c90c:	2400078d 	.word	0x2400078d

0800c910 <__sinit>:
 800c910:	b510      	push	{r4, lr}
 800c912:	4604      	mov	r4, r0
 800c914:	f7ff fff0 	bl	800c8f8 <__sfp_lock_acquire>
 800c918:	6a23      	ldr	r3, [r4, #32]
 800c91a:	b11b      	cbz	r3, 800c924 <__sinit+0x14>
 800c91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c920:	f7ff bff0 	b.w	800c904 <__sfp_lock_release>
 800c924:	4b04      	ldr	r3, [pc, #16]	@ (800c938 <__sinit+0x28>)
 800c926:	6223      	str	r3, [r4, #32]
 800c928:	4b04      	ldr	r3, [pc, #16]	@ (800c93c <__sinit+0x2c>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1f5      	bne.n	800c91c <__sinit+0xc>
 800c930:	f7ff ffc4 	bl	800c8bc <global_stdio_init.part.0>
 800c934:	e7f2      	b.n	800c91c <__sinit+0xc>
 800c936:	bf00      	nop
 800c938:	0800c87d 	.word	0x0800c87d
 800c93c:	24000784 	.word	0x24000784

0800c940 <_fwalk_sglue>:
 800c940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c944:	4607      	mov	r7, r0
 800c946:	4688      	mov	r8, r1
 800c948:	4614      	mov	r4, r2
 800c94a:	2600      	movs	r6, #0
 800c94c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c950:	f1b9 0901 	subs.w	r9, r9, #1
 800c954:	d505      	bpl.n	800c962 <_fwalk_sglue+0x22>
 800c956:	6824      	ldr	r4, [r4, #0]
 800c958:	2c00      	cmp	r4, #0
 800c95a:	d1f7      	bne.n	800c94c <_fwalk_sglue+0xc>
 800c95c:	4630      	mov	r0, r6
 800c95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c962:	89ab      	ldrh	r3, [r5, #12]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d907      	bls.n	800c978 <_fwalk_sglue+0x38>
 800c968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c96c:	3301      	adds	r3, #1
 800c96e:	d003      	beq.n	800c978 <_fwalk_sglue+0x38>
 800c970:	4629      	mov	r1, r5
 800c972:	4638      	mov	r0, r7
 800c974:	47c0      	blx	r8
 800c976:	4306      	orrs	r6, r0
 800c978:	3568      	adds	r5, #104	@ 0x68
 800c97a:	e7e9      	b.n	800c950 <_fwalk_sglue+0x10>

0800c97c <sniprintf>:
 800c97c:	b40c      	push	{r2, r3}
 800c97e:	b530      	push	{r4, r5, lr}
 800c980:	4b17      	ldr	r3, [pc, #92]	@ (800c9e0 <sniprintf+0x64>)
 800c982:	1e0c      	subs	r4, r1, #0
 800c984:	681d      	ldr	r5, [r3, #0]
 800c986:	b09d      	sub	sp, #116	@ 0x74
 800c988:	da08      	bge.n	800c99c <sniprintf+0x20>
 800c98a:	238b      	movs	r3, #139	@ 0x8b
 800c98c:	602b      	str	r3, [r5, #0]
 800c98e:	f04f 30ff 	mov.w	r0, #4294967295
 800c992:	b01d      	add	sp, #116	@ 0x74
 800c994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c998:	b002      	add	sp, #8
 800c99a:	4770      	bx	lr
 800c99c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c9a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c9a4:	bf14      	ite	ne
 800c9a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c9aa:	4623      	moveq	r3, r4
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	9307      	str	r3, [sp, #28]
 800c9b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c9b4:	9002      	str	r0, [sp, #8]
 800c9b6:	9006      	str	r0, [sp, #24]
 800c9b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c9bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c9be:	ab21      	add	r3, sp, #132	@ 0x84
 800c9c0:	a902      	add	r1, sp, #8
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	f002 fb13 	bl	800eff0 <_svfiprintf_r>
 800c9ca:	1c43      	adds	r3, r0, #1
 800c9cc:	bfbc      	itt	lt
 800c9ce:	238b      	movlt	r3, #139	@ 0x8b
 800c9d0:	602b      	strlt	r3, [r5, #0]
 800c9d2:	2c00      	cmp	r4, #0
 800c9d4:	d0dd      	beq.n	800c992 <sniprintf+0x16>
 800c9d6:	9b02      	ldr	r3, [sp, #8]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	e7d9      	b.n	800c992 <sniprintf+0x16>
 800c9de:	bf00      	nop
 800c9e0:	24000020 	.word	0x24000020

0800c9e4 <siprintf>:
 800c9e4:	b40e      	push	{r1, r2, r3}
 800c9e6:	b500      	push	{lr}
 800c9e8:	b09c      	sub	sp, #112	@ 0x70
 800c9ea:	ab1d      	add	r3, sp, #116	@ 0x74
 800c9ec:	9002      	str	r0, [sp, #8]
 800c9ee:	9006      	str	r0, [sp, #24]
 800c9f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c9f4:	4809      	ldr	r0, [pc, #36]	@ (800ca1c <siprintf+0x38>)
 800c9f6:	9107      	str	r1, [sp, #28]
 800c9f8:	9104      	str	r1, [sp, #16]
 800c9fa:	4909      	ldr	r1, [pc, #36]	@ (800ca20 <siprintf+0x3c>)
 800c9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca00:	9105      	str	r1, [sp, #20]
 800ca02:	6800      	ldr	r0, [r0, #0]
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	a902      	add	r1, sp, #8
 800ca08:	f002 faf2 	bl	800eff0 <_svfiprintf_r>
 800ca0c:	9b02      	ldr	r3, [sp, #8]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]
 800ca12:	b01c      	add	sp, #112	@ 0x70
 800ca14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca18:	b003      	add	sp, #12
 800ca1a:	4770      	bx	lr
 800ca1c:	24000020 	.word	0x24000020
 800ca20:	ffff0208 	.word	0xffff0208

0800ca24 <__sread>:
 800ca24:	b510      	push	{r4, lr}
 800ca26:	460c      	mov	r4, r1
 800ca28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca2c:	f000 f86c 	bl	800cb08 <_read_r>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	bfab      	itete	ge
 800ca34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca36:	89a3      	ldrhlt	r3, [r4, #12]
 800ca38:	181b      	addge	r3, r3, r0
 800ca3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca3e:	bfac      	ite	ge
 800ca40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca42:	81a3      	strhlt	r3, [r4, #12]
 800ca44:	bd10      	pop	{r4, pc}

0800ca46 <__swrite>:
 800ca46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca4a:	461f      	mov	r7, r3
 800ca4c:	898b      	ldrh	r3, [r1, #12]
 800ca4e:	05db      	lsls	r3, r3, #23
 800ca50:	4605      	mov	r5, r0
 800ca52:	460c      	mov	r4, r1
 800ca54:	4616      	mov	r6, r2
 800ca56:	d505      	bpl.n	800ca64 <__swrite+0x1e>
 800ca58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f000 f840 	bl	800cae4 <_lseek_r>
 800ca64:	89a3      	ldrh	r3, [r4, #12]
 800ca66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca6e:	81a3      	strh	r3, [r4, #12]
 800ca70:	4632      	mov	r2, r6
 800ca72:	463b      	mov	r3, r7
 800ca74:	4628      	mov	r0, r5
 800ca76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7a:	f000 b857 	b.w	800cb2c <_write_r>

0800ca7e <__sseek>:
 800ca7e:	b510      	push	{r4, lr}
 800ca80:	460c      	mov	r4, r1
 800ca82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca86:	f000 f82d 	bl	800cae4 <_lseek_r>
 800ca8a:	1c43      	adds	r3, r0, #1
 800ca8c:	89a3      	ldrh	r3, [r4, #12]
 800ca8e:	bf15      	itete	ne
 800ca90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca9a:	81a3      	strheq	r3, [r4, #12]
 800ca9c:	bf18      	it	ne
 800ca9e:	81a3      	strhne	r3, [r4, #12]
 800caa0:	bd10      	pop	{r4, pc}

0800caa2 <__sclose>:
 800caa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa6:	f000 b80d 	b.w	800cac4 <_close_r>

0800caaa <memset>:
 800caaa:	4402      	add	r2, r0
 800caac:	4603      	mov	r3, r0
 800caae:	4293      	cmp	r3, r2
 800cab0:	d100      	bne.n	800cab4 <memset+0xa>
 800cab2:	4770      	bx	lr
 800cab4:	f803 1b01 	strb.w	r1, [r3], #1
 800cab8:	e7f9      	b.n	800caae <memset+0x4>
	...

0800cabc <_localeconv_r>:
 800cabc:	4800      	ldr	r0, [pc, #0]	@ (800cac0 <_localeconv_r+0x4>)
 800cabe:	4770      	bx	lr
 800cac0:	24000160 	.word	0x24000160

0800cac4 <_close_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	4d06      	ldr	r5, [pc, #24]	@ (800cae0 <_close_r+0x1c>)
 800cac8:	2300      	movs	r3, #0
 800caca:	4604      	mov	r4, r0
 800cacc:	4608      	mov	r0, r1
 800cace:	602b      	str	r3, [r5, #0]
 800cad0:	f7f5 fda0 	bl	8002614 <_close>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d102      	bne.n	800cade <_close_r+0x1a>
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	b103      	cbz	r3, 800cade <_close_r+0x1a>
 800cadc:	6023      	str	r3, [r4, #0]
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	24000788 	.word	0x24000788

0800cae4 <_lseek_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4d07      	ldr	r5, [pc, #28]	@ (800cb04 <_lseek_r+0x20>)
 800cae8:	4604      	mov	r4, r0
 800caea:	4608      	mov	r0, r1
 800caec:	4611      	mov	r1, r2
 800caee:	2200      	movs	r2, #0
 800caf0:	602a      	str	r2, [r5, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f7f5 fdb5 	bl	8002662 <_lseek>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	d102      	bne.n	800cb02 <_lseek_r+0x1e>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	b103      	cbz	r3, 800cb02 <_lseek_r+0x1e>
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	bd38      	pop	{r3, r4, r5, pc}
 800cb04:	24000788 	.word	0x24000788

0800cb08 <_read_r>:
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	4d07      	ldr	r5, [pc, #28]	@ (800cb28 <_read_r+0x20>)
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	4608      	mov	r0, r1
 800cb10:	4611      	mov	r1, r2
 800cb12:	2200      	movs	r2, #0
 800cb14:	602a      	str	r2, [r5, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	f7f5 fd5f 	bl	80025da <_read>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d102      	bne.n	800cb26 <_read_r+0x1e>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	b103      	cbz	r3, 800cb26 <_read_r+0x1e>
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
 800cb28:	24000788 	.word	0x24000788

0800cb2c <_write_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d07      	ldr	r5, [pc, #28]	@ (800cb4c <_write_r+0x20>)
 800cb30:	4604      	mov	r4, r0
 800cb32:	4608      	mov	r0, r1
 800cb34:	4611      	mov	r1, r2
 800cb36:	2200      	movs	r2, #0
 800cb38:	602a      	str	r2, [r5, #0]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	f7f5 f92e 	bl	8001d9c <_write>
 800cb40:	1c43      	adds	r3, r0, #1
 800cb42:	d102      	bne.n	800cb4a <_write_r+0x1e>
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	b103      	cbz	r3, 800cb4a <_write_r+0x1e>
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	24000788 	.word	0x24000788

0800cb50 <__errno>:
 800cb50:	4b01      	ldr	r3, [pc, #4]	@ (800cb58 <__errno+0x8>)
 800cb52:	6818      	ldr	r0, [r3, #0]
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	24000020 	.word	0x24000020

0800cb5c <__libc_init_array>:
 800cb5c:	b570      	push	{r4, r5, r6, lr}
 800cb5e:	4d0d      	ldr	r5, [pc, #52]	@ (800cb94 <__libc_init_array+0x38>)
 800cb60:	4c0d      	ldr	r4, [pc, #52]	@ (800cb98 <__libc_init_array+0x3c>)
 800cb62:	1b64      	subs	r4, r4, r5
 800cb64:	10a4      	asrs	r4, r4, #2
 800cb66:	2600      	movs	r6, #0
 800cb68:	42a6      	cmp	r6, r4
 800cb6a:	d109      	bne.n	800cb80 <__libc_init_array+0x24>
 800cb6c:	4d0b      	ldr	r5, [pc, #44]	@ (800cb9c <__libc_init_array+0x40>)
 800cb6e:	4c0c      	ldr	r4, [pc, #48]	@ (800cba0 <__libc_init_array+0x44>)
 800cb70:	f003 fd42 	bl	80105f8 <_init>
 800cb74:	1b64      	subs	r4, r4, r5
 800cb76:	10a4      	asrs	r4, r4, #2
 800cb78:	2600      	movs	r6, #0
 800cb7a:	42a6      	cmp	r6, r4
 800cb7c:	d105      	bne.n	800cb8a <__libc_init_array+0x2e>
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
 800cb80:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb84:	4798      	blx	r3
 800cb86:	3601      	adds	r6, #1
 800cb88:	e7ee      	b.n	800cb68 <__libc_init_array+0xc>
 800cb8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb8e:	4798      	blx	r3
 800cb90:	3601      	adds	r6, #1
 800cb92:	e7f2      	b.n	800cb7a <__libc_init_array+0x1e>
 800cb94:	08010af0 	.word	0x08010af0
 800cb98:	08010af0 	.word	0x08010af0
 800cb9c:	08010af0 	.word	0x08010af0
 800cba0:	08010af4 	.word	0x08010af4

0800cba4 <__retarget_lock_init_recursive>:
 800cba4:	4770      	bx	lr

0800cba6 <__retarget_lock_acquire_recursive>:
 800cba6:	4770      	bx	lr

0800cba8 <__retarget_lock_release_recursive>:
 800cba8:	4770      	bx	lr
	...

0800cbac <nanf>:
 800cbac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cbb4 <nanf+0x8>
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	7fc00000 	.word	0x7fc00000

0800cbb8 <quorem>:
 800cbb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbbc:	6903      	ldr	r3, [r0, #16]
 800cbbe:	690c      	ldr	r4, [r1, #16]
 800cbc0:	42a3      	cmp	r3, r4
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	db7e      	blt.n	800ccc4 <quorem+0x10c>
 800cbc6:	3c01      	subs	r4, #1
 800cbc8:	f101 0814 	add.w	r8, r1, #20
 800cbcc:	00a3      	lsls	r3, r4, #2
 800cbce:	f100 0514 	add.w	r5, r0, #20
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbea:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbee:	d32e      	bcc.n	800cc4e <quorem+0x96>
 800cbf0:	f04f 0a00 	mov.w	sl, #0
 800cbf4:	46c4      	mov	ip, r8
 800cbf6:	46ae      	mov	lr, r5
 800cbf8:	46d3      	mov	fp, sl
 800cbfa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cbfe:	b298      	uxth	r0, r3
 800cc00:	fb06 a000 	mla	r0, r6, r0, sl
 800cc04:	0c02      	lsrs	r2, r0, #16
 800cc06:	0c1b      	lsrs	r3, r3, #16
 800cc08:	fb06 2303 	mla	r3, r6, r3, r2
 800cc0c:	f8de 2000 	ldr.w	r2, [lr]
 800cc10:	b280      	uxth	r0, r0
 800cc12:	b292      	uxth	r2, r2
 800cc14:	1a12      	subs	r2, r2, r0
 800cc16:	445a      	add	r2, fp
 800cc18:	f8de 0000 	ldr.w	r0, [lr]
 800cc1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cc26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc2a:	b292      	uxth	r2, r2
 800cc2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc30:	45e1      	cmp	r9, ip
 800cc32:	f84e 2b04 	str.w	r2, [lr], #4
 800cc36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc3a:	d2de      	bcs.n	800cbfa <quorem+0x42>
 800cc3c:	9b00      	ldr	r3, [sp, #0]
 800cc3e:	58eb      	ldr	r3, [r5, r3]
 800cc40:	b92b      	cbnz	r3, 800cc4e <quorem+0x96>
 800cc42:	9b01      	ldr	r3, [sp, #4]
 800cc44:	3b04      	subs	r3, #4
 800cc46:	429d      	cmp	r5, r3
 800cc48:	461a      	mov	r2, r3
 800cc4a:	d32f      	bcc.n	800ccac <quorem+0xf4>
 800cc4c:	613c      	str	r4, [r7, #16]
 800cc4e:	4638      	mov	r0, r7
 800cc50:	f001 f954 	bl	800defc <__mcmp>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	db25      	blt.n	800cca4 <quorem+0xec>
 800cc58:	4629      	mov	r1, r5
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc60:	f8d1 c000 	ldr.w	ip, [r1]
 800cc64:	fa1f fe82 	uxth.w	lr, r2
 800cc68:	fa1f f38c 	uxth.w	r3, ip
 800cc6c:	eba3 030e 	sub.w	r3, r3, lr
 800cc70:	4403      	add	r3, r0
 800cc72:	0c12      	lsrs	r2, r2, #16
 800cc74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc82:	45c1      	cmp	r9, r8
 800cc84:	f841 3b04 	str.w	r3, [r1], #4
 800cc88:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc8c:	d2e6      	bcs.n	800cc5c <quorem+0xa4>
 800cc8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc96:	b922      	cbnz	r2, 800cca2 <quorem+0xea>
 800cc98:	3b04      	subs	r3, #4
 800cc9a:	429d      	cmp	r5, r3
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	d30b      	bcc.n	800ccb8 <quorem+0x100>
 800cca0:	613c      	str	r4, [r7, #16]
 800cca2:	3601      	adds	r6, #1
 800cca4:	4630      	mov	r0, r6
 800cca6:	b003      	add	sp, #12
 800cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccac:	6812      	ldr	r2, [r2, #0]
 800ccae:	3b04      	subs	r3, #4
 800ccb0:	2a00      	cmp	r2, #0
 800ccb2:	d1cb      	bne.n	800cc4c <quorem+0x94>
 800ccb4:	3c01      	subs	r4, #1
 800ccb6:	e7c6      	b.n	800cc46 <quorem+0x8e>
 800ccb8:	6812      	ldr	r2, [r2, #0]
 800ccba:	3b04      	subs	r3, #4
 800ccbc:	2a00      	cmp	r2, #0
 800ccbe:	d1ef      	bne.n	800cca0 <quorem+0xe8>
 800ccc0:	3c01      	subs	r4, #1
 800ccc2:	e7ea      	b.n	800cc9a <quorem+0xe2>
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	e7ee      	b.n	800cca6 <quorem+0xee>

0800ccc8 <_dtoa_r>:
 800ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	ed2d 8b02 	vpush	{d8}
 800ccd0:	69c7      	ldr	r7, [r0, #28]
 800ccd2:	b091      	sub	sp, #68	@ 0x44
 800ccd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ccd8:	ec55 4b10 	vmov	r4, r5, d0
 800ccdc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ccde:	9107      	str	r1, [sp, #28]
 800cce0:	4681      	mov	r9, r0
 800cce2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cce4:	930d      	str	r3, [sp, #52]	@ 0x34
 800cce6:	b97f      	cbnz	r7, 800cd08 <_dtoa_r+0x40>
 800cce8:	2010      	movs	r0, #16
 800ccea:	f000 fd8d 	bl	800d808 <malloc>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	f8c9 001c 	str.w	r0, [r9, #28]
 800ccf4:	b920      	cbnz	r0, 800cd00 <_dtoa_r+0x38>
 800ccf6:	4ba0      	ldr	r3, [pc, #640]	@ (800cf78 <_dtoa_r+0x2b0>)
 800ccf8:	21ef      	movs	r1, #239	@ 0xef
 800ccfa:	48a0      	ldr	r0, [pc, #640]	@ (800cf7c <_dtoa_r+0x2b4>)
 800ccfc:	f002 fb74 	bl	800f3e8 <__assert_func>
 800cd00:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cd04:	6007      	str	r7, [r0, #0]
 800cd06:	60c7      	str	r7, [r0, #12]
 800cd08:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd0c:	6819      	ldr	r1, [r3, #0]
 800cd0e:	b159      	cbz	r1, 800cd28 <_dtoa_r+0x60>
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	604a      	str	r2, [r1, #4]
 800cd14:	2301      	movs	r3, #1
 800cd16:	4093      	lsls	r3, r2
 800cd18:	608b      	str	r3, [r1, #8]
 800cd1a:	4648      	mov	r0, r9
 800cd1c:	f000 fe6a 	bl	800d9f4 <_Bfree>
 800cd20:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd24:	2200      	movs	r2, #0
 800cd26:	601a      	str	r2, [r3, #0]
 800cd28:	1e2b      	subs	r3, r5, #0
 800cd2a:	bfbb      	ittet	lt
 800cd2c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd30:	9303      	strlt	r3, [sp, #12]
 800cd32:	2300      	movge	r3, #0
 800cd34:	2201      	movlt	r2, #1
 800cd36:	bfac      	ite	ge
 800cd38:	6033      	strge	r3, [r6, #0]
 800cd3a:	6032      	strlt	r2, [r6, #0]
 800cd3c:	4b90      	ldr	r3, [pc, #576]	@ (800cf80 <_dtoa_r+0x2b8>)
 800cd3e:	9e03      	ldr	r6, [sp, #12]
 800cd40:	43b3      	bics	r3, r6
 800cd42:	d110      	bne.n	800cd66 <_dtoa_r+0x9e>
 800cd44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd46:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd4a:	6013      	str	r3, [r2, #0]
 800cd4c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cd50:	4323      	orrs	r3, r4
 800cd52:	f000 84de 	beq.w	800d712 <_dtoa_r+0xa4a>
 800cd56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd58:	4f8a      	ldr	r7, [pc, #552]	@ (800cf84 <_dtoa_r+0x2bc>)
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 84e0 	beq.w	800d720 <_dtoa_r+0xa58>
 800cd60:	1cfb      	adds	r3, r7, #3
 800cd62:	f000 bcdb 	b.w	800d71c <_dtoa_r+0xa54>
 800cd66:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cd6a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd72:	d10a      	bne.n	800cd8a <_dtoa_r+0xc2>
 800cd74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd76:	2301      	movs	r3, #1
 800cd78:	6013      	str	r3, [r2, #0]
 800cd7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd7c:	b113      	cbz	r3, 800cd84 <_dtoa_r+0xbc>
 800cd7e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cd80:	4b81      	ldr	r3, [pc, #516]	@ (800cf88 <_dtoa_r+0x2c0>)
 800cd82:	6013      	str	r3, [r2, #0]
 800cd84:	4f81      	ldr	r7, [pc, #516]	@ (800cf8c <_dtoa_r+0x2c4>)
 800cd86:	f000 bccb 	b.w	800d720 <_dtoa_r+0xa58>
 800cd8a:	aa0e      	add	r2, sp, #56	@ 0x38
 800cd8c:	a90f      	add	r1, sp, #60	@ 0x3c
 800cd8e:	4648      	mov	r0, r9
 800cd90:	eeb0 0b48 	vmov.f64	d0, d8
 800cd94:	f001 f9d2 	bl	800e13c <__d2b>
 800cd98:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cd9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd9e:	9001      	str	r0, [sp, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d045      	beq.n	800ce30 <_dtoa_r+0x168>
 800cda4:	eeb0 7b48 	vmov.f64	d7, d8
 800cda8:	ee18 1a90 	vmov	r1, s17
 800cdac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cdb0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cdb4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cdb8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cdbc:	2500      	movs	r5, #0
 800cdbe:	ee07 1a90 	vmov	s15, r1
 800cdc2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cdc6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cf60 <_dtoa_r+0x298>
 800cdca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cdce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800cf68 <_dtoa_r+0x2a0>
 800cdd2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cdd6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cf70 <_dtoa_r+0x2a8>
 800cdda:	ee07 3a90 	vmov	s15, r3
 800cdde:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cde2:	eeb0 7b46 	vmov.f64	d7, d6
 800cde6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cdea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cdee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf6:	ee16 8a90 	vmov	r8, s13
 800cdfa:	d508      	bpl.n	800ce0e <_dtoa_r+0x146>
 800cdfc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ce00:	eeb4 6b47 	vcmp.f64	d6, d7
 800ce04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce08:	bf18      	it	ne
 800ce0a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ce0e:	f1b8 0f16 	cmp.w	r8, #22
 800ce12:	d82b      	bhi.n	800ce6c <_dtoa_r+0x1a4>
 800ce14:	495e      	ldr	r1, [pc, #376]	@ (800cf90 <_dtoa_r+0x2c8>)
 800ce16:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ce1a:	ed91 7b00 	vldr	d7, [r1]
 800ce1e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ce22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce26:	d501      	bpl.n	800ce2c <_dtoa_r+0x164>
 800ce28:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	e01e      	b.n	800ce6e <_dtoa_r+0x1a6>
 800ce30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce32:	4413      	add	r3, r2
 800ce34:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ce38:	2920      	cmp	r1, #32
 800ce3a:	bfc1      	itttt	gt
 800ce3c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ce40:	408e      	lslgt	r6, r1
 800ce42:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ce46:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ce4a:	bfd6      	itet	le
 800ce4c:	f1c1 0120 	rsble	r1, r1, #32
 800ce50:	4331      	orrgt	r1, r6
 800ce52:	fa04 f101 	lslle.w	r1, r4, r1
 800ce56:	ee07 1a90 	vmov	s15, r1
 800ce5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	ee17 1a90 	vmov	r1, s15
 800ce64:	2501      	movs	r5, #1
 800ce66:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ce6a:	e7a8      	b.n	800cdbe <_dtoa_r+0xf6>
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	1ad2      	subs	r2, r2, r3
 800ce70:	1e53      	subs	r3, r2, #1
 800ce72:	9306      	str	r3, [sp, #24]
 800ce74:	bf45      	ittet	mi
 800ce76:	f1c2 0301 	rsbmi	r3, r2, #1
 800ce7a:	9305      	strmi	r3, [sp, #20]
 800ce7c:	2300      	movpl	r3, #0
 800ce7e:	2300      	movmi	r3, #0
 800ce80:	bf4c      	ite	mi
 800ce82:	9306      	strmi	r3, [sp, #24]
 800ce84:	9305      	strpl	r3, [sp, #20]
 800ce86:	f1b8 0f00 	cmp.w	r8, #0
 800ce8a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ce8c:	db18      	blt.n	800cec0 <_dtoa_r+0x1f8>
 800ce8e:	9b06      	ldr	r3, [sp, #24]
 800ce90:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ce94:	4443      	add	r3, r8
 800ce96:	9306      	str	r3, [sp, #24]
 800ce98:	2300      	movs	r3, #0
 800ce9a:	9a07      	ldr	r2, [sp, #28]
 800ce9c:	2a09      	cmp	r2, #9
 800ce9e:	d849      	bhi.n	800cf34 <_dtoa_r+0x26c>
 800cea0:	2a05      	cmp	r2, #5
 800cea2:	bfc4      	itt	gt
 800cea4:	3a04      	subgt	r2, #4
 800cea6:	9207      	strgt	r2, [sp, #28]
 800cea8:	9a07      	ldr	r2, [sp, #28]
 800ceaa:	f1a2 0202 	sub.w	r2, r2, #2
 800ceae:	bfcc      	ite	gt
 800ceb0:	2400      	movgt	r4, #0
 800ceb2:	2401      	movle	r4, #1
 800ceb4:	2a03      	cmp	r2, #3
 800ceb6:	d848      	bhi.n	800cf4a <_dtoa_r+0x282>
 800ceb8:	e8df f002 	tbb	[pc, r2]
 800cebc:	3a2c2e0b 	.word	0x3a2c2e0b
 800cec0:	9b05      	ldr	r3, [sp, #20]
 800cec2:	2200      	movs	r2, #0
 800cec4:	eba3 0308 	sub.w	r3, r3, r8
 800cec8:	9305      	str	r3, [sp, #20]
 800ceca:	920a      	str	r2, [sp, #40]	@ 0x28
 800cecc:	f1c8 0300 	rsb	r3, r8, #0
 800ced0:	e7e3      	b.n	800ce9a <_dtoa_r+0x1d2>
 800ced2:	2200      	movs	r2, #0
 800ced4:	9208      	str	r2, [sp, #32]
 800ced6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ced8:	2a00      	cmp	r2, #0
 800ceda:	dc39      	bgt.n	800cf50 <_dtoa_r+0x288>
 800cedc:	f04f 0b01 	mov.w	fp, #1
 800cee0:	46da      	mov	sl, fp
 800cee2:	465a      	mov	r2, fp
 800cee4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800cee8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ceec:	2100      	movs	r1, #0
 800ceee:	2004      	movs	r0, #4
 800cef0:	f100 0614 	add.w	r6, r0, #20
 800cef4:	4296      	cmp	r6, r2
 800cef6:	d930      	bls.n	800cf5a <_dtoa_r+0x292>
 800cef8:	6079      	str	r1, [r7, #4]
 800cefa:	4648      	mov	r0, r9
 800cefc:	9304      	str	r3, [sp, #16]
 800cefe:	f000 fd39 	bl	800d974 <_Balloc>
 800cf02:	9b04      	ldr	r3, [sp, #16]
 800cf04:	4607      	mov	r7, r0
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d146      	bne.n	800cf98 <_dtoa_r+0x2d0>
 800cf0a:	4b22      	ldr	r3, [pc, #136]	@ (800cf94 <_dtoa_r+0x2cc>)
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf12:	e6f2      	b.n	800ccfa <_dtoa_r+0x32>
 800cf14:	2201      	movs	r2, #1
 800cf16:	e7dd      	b.n	800ced4 <_dtoa_r+0x20c>
 800cf18:	2200      	movs	r2, #0
 800cf1a:	9208      	str	r2, [sp, #32]
 800cf1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf1e:	eb08 0b02 	add.w	fp, r8, r2
 800cf22:	f10b 0a01 	add.w	sl, fp, #1
 800cf26:	4652      	mov	r2, sl
 800cf28:	2a01      	cmp	r2, #1
 800cf2a:	bfb8      	it	lt
 800cf2c:	2201      	movlt	r2, #1
 800cf2e:	e7db      	b.n	800cee8 <_dtoa_r+0x220>
 800cf30:	2201      	movs	r2, #1
 800cf32:	e7f2      	b.n	800cf1a <_dtoa_r+0x252>
 800cf34:	2401      	movs	r4, #1
 800cf36:	2200      	movs	r2, #0
 800cf38:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cf3c:	f04f 3bff 	mov.w	fp, #4294967295
 800cf40:	2100      	movs	r1, #0
 800cf42:	46da      	mov	sl, fp
 800cf44:	2212      	movs	r2, #18
 800cf46:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf48:	e7ce      	b.n	800cee8 <_dtoa_r+0x220>
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	9208      	str	r2, [sp, #32]
 800cf4e:	e7f5      	b.n	800cf3c <_dtoa_r+0x274>
 800cf50:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800cf54:	46da      	mov	sl, fp
 800cf56:	465a      	mov	r2, fp
 800cf58:	e7c6      	b.n	800cee8 <_dtoa_r+0x220>
 800cf5a:	3101      	adds	r1, #1
 800cf5c:	0040      	lsls	r0, r0, #1
 800cf5e:	e7c7      	b.n	800cef0 <_dtoa_r+0x228>
 800cf60:	636f4361 	.word	0x636f4361
 800cf64:	3fd287a7 	.word	0x3fd287a7
 800cf68:	8b60c8b3 	.word	0x8b60c8b3
 800cf6c:	3fc68a28 	.word	0x3fc68a28
 800cf70:	509f79fb 	.word	0x509f79fb
 800cf74:	3fd34413 	.word	0x3fd34413
 800cf78:	080106c6 	.word	0x080106c6
 800cf7c:	080106dd 	.word	0x080106dd
 800cf80:	7ff00000 	.word	0x7ff00000
 800cf84:	080106c2 	.word	0x080106c2
 800cf88:	08010691 	.word	0x08010691
 800cf8c:	08010690 	.word	0x08010690
 800cf90:	080107d8 	.word	0x080107d8
 800cf94:	08010735 	.word	0x08010735
 800cf98:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800cf9c:	f1ba 0f0e 	cmp.w	sl, #14
 800cfa0:	6010      	str	r0, [r2, #0]
 800cfa2:	d86f      	bhi.n	800d084 <_dtoa_r+0x3bc>
 800cfa4:	2c00      	cmp	r4, #0
 800cfa6:	d06d      	beq.n	800d084 <_dtoa_r+0x3bc>
 800cfa8:	f1b8 0f00 	cmp.w	r8, #0
 800cfac:	f340 80c2 	ble.w	800d134 <_dtoa_r+0x46c>
 800cfb0:	4aca      	ldr	r2, [pc, #808]	@ (800d2dc <_dtoa_r+0x614>)
 800cfb2:	f008 010f 	and.w	r1, r8, #15
 800cfb6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cfba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800cfbe:	ed92 7b00 	vldr	d7, [r2]
 800cfc2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800cfc6:	f000 80a9 	beq.w	800d11c <_dtoa_r+0x454>
 800cfca:	4ac5      	ldr	r2, [pc, #788]	@ (800d2e0 <_dtoa_r+0x618>)
 800cfcc:	ed92 6b08 	vldr	d6, [r2, #32]
 800cfd0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cfd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cfd8:	f001 010f 	and.w	r1, r1, #15
 800cfdc:	2203      	movs	r2, #3
 800cfde:	48c0      	ldr	r0, [pc, #768]	@ (800d2e0 <_dtoa_r+0x618>)
 800cfe0:	2900      	cmp	r1, #0
 800cfe2:	f040 809d 	bne.w	800d120 <_dtoa_r+0x458>
 800cfe6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cfea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cfee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cff2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cff4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cff8:	2900      	cmp	r1, #0
 800cffa:	f000 80c1 	beq.w	800d180 <_dtoa_r+0x4b8>
 800cffe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d002:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00a:	f140 80b9 	bpl.w	800d180 <_dtoa_r+0x4b8>
 800d00e:	f1ba 0f00 	cmp.w	sl, #0
 800d012:	f000 80b5 	beq.w	800d180 <_dtoa_r+0x4b8>
 800d016:	f1bb 0f00 	cmp.w	fp, #0
 800d01a:	dd31      	ble.n	800d080 <_dtoa_r+0x3b8>
 800d01c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d020:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d024:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d028:	f108 31ff 	add.w	r1, r8, #4294967295
 800d02c:	9104      	str	r1, [sp, #16]
 800d02e:	3201      	adds	r2, #1
 800d030:	465c      	mov	r4, fp
 800d032:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d036:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d03a:	ee07 2a90 	vmov	s15, r2
 800d03e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d042:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d046:	ee15 2a90 	vmov	r2, s11
 800d04a:	ec51 0b15 	vmov	r0, r1, d5
 800d04e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d052:	2c00      	cmp	r4, #0
 800d054:	f040 8098 	bne.w	800d188 <_dtoa_r+0x4c0>
 800d058:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d05c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d060:	ec41 0b17 	vmov	d7, r0, r1
 800d064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06c:	f300 8261 	bgt.w	800d532 <_dtoa_r+0x86a>
 800d070:	eeb1 7b47 	vneg.f64	d7, d7
 800d074:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07c:	f100 80f5 	bmi.w	800d26a <_dtoa_r+0x5a2>
 800d080:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d084:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d086:	2a00      	cmp	r2, #0
 800d088:	f2c0 812c 	blt.w	800d2e4 <_dtoa_r+0x61c>
 800d08c:	f1b8 0f0e 	cmp.w	r8, #14
 800d090:	f300 8128 	bgt.w	800d2e4 <_dtoa_r+0x61c>
 800d094:	4b91      	ldr	r3, [pc, #580]	@ (800d2dc <_dtoa_r+0x614>)
 800d096:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d09a:	ed93 6b00 	vldr	d6, [r3]
 800d09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	da03      	bge.n	800d0ac <_dtoa_r+0x3e4>
 800d0a4:	f1ba 0f00 	cmp.w	sl, #0
 800d0a8:	f340 80d2 	ble.w	800d250 <_dtoa_r+0x588>
 800d0ac:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d0b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0b4:	463e      	mov	r6, r7
 800d0b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d0ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d0be:	ee15 3a10 	vmov	r3, s10
 800d0c2:	3330      	adds	r3, #48	@ 0x30
 800d0c4:	f806 3b01 	strb.w	r3, [r6], #1
 800d0c8:	1bf3      	subs	r3, r6, r7
 800d0ca:	459a      	cmp	sl, r3
 800d0cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d0d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d0d4:	f040 80f8 	bne.w	800d2c8 <_dtoa_r+0x600>
 800d0d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d0dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e4:	f300 80dd 	bgt.w	800d2a2 <_dtoa_r+0x5da>
 800d0e8:	eeb4 7b46 	vcmp.f64	d7, d6
 800d0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f0:	d104      	bne.n	800d0fc <_dtoa_r+0x434>
 800d0f2:	ee15 3a10 	vmov	r3, s10
 800d0f6:	07db      	lsls	r3, r3, #31
 800d0f8:	f100 80d3 	bmi.w	800d2a2 <_dtoa_r+0x5da>
 800d0fc:	9901      	ldr	r1, [sp, #4]
 800d0fe:	4648      	mov	r0, r9
 800d100:	f000 fc78 	bl	800d9f4 <_Bfree>
 800d104:	2300      	movs	r3, #0
 800d106:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d108:	7033      	strb	r3, [r6, #0]
 800d10a:	f108 0301 	add.w	r3, r8, #1
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d112:	2b00      	cmp	r3, #0
 800d114:	f000 8304 	beq.w	800d720 <_dtoa_r+0xa58>
 800d118:	601e      	str	r6, [r3, #0]
 800d11a:	e301      	b.n	800d720 <_dtoa_r+0xa58>
 800d11c:	2202      	movs	r2, #2
 800d11e:	e75e      	b.n	800cfde <_dtoa_r+0x316>
 800d120:	07cc      	lsls	r4, r1, #31
 800d122:	d504      	bpl.n	800d12e <_dtoa_r+0x466>
 800d124:	ed90 6b00 	vldr	d6, [r0]
 800d128:	3201      	adds	r2, #1
 800d12a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d12e:	1049      	asrs	r1, r1, #1
 800d130:	3008      	adds	r0, #8
 800d132:	e755      	b.n	800cfe0 <_dtoa_r+0x318>
 800d134:	d022      	beq.n	800d17c <_dtoa_r+0x4b4>
 800d136:	f1c8 0100 	rsb	r1, r8, #0
 800d13a:	4a68      	ldr	r2, [pc, #416]	@ (800d2dc <_dtoa_r+0x614>)
 800d13c:	f001 000f 	and.w	r0, r1, #15
 800d140:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d144:	ed92 7b00 	vldr	d7, [r2]
 800d148:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d14c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d150:	4863      	ldr	r0, [pc, #396]	@ (800d2e0 <_dtoa_r+0x618>)
 800d152:	1109      	asrs	r1, r1, #4
 800d154:	2400      	movs	r4, #0
 800d156:	2202      	movs	r2, #2
 800d158:	b929      	cbnz	r1, 800d166 <_dtoa_r+0x49e>
 800d15a:	2c00      	cmp	r4, #0
 800d15c:	f43f af49 	beq.w	800cff2 <_dtoa_r+0x32a>
 800d160:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d164:	e745      	b.n	800cff2 <_dtoa_r+0x32a>
 800d166:	07ce      	lsls	r6, r1, #31
 800d168:	d505      	bpl.n	800d176 <_dtoa_r+0x4ae>
 800d16a:	ed90 6b00 	vldr	d6, [r0]
 800d16e:	3201      	adds	r2, #1
 800d170:	2401      	movs	r4, #1
 800d172:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d176:	1049      	asrs	r1, r1, #1
 800d178:	3008      	adds	r0, #8
 800d17a:	e7ed      	b.n	800d158 <_dtoa_r+0x490>
 800d17c:	2202      	movs	r2, #2
 800d17e:	e738      	b.n	800cff2 <_dtoa_r+0x32a>
 800d180:	f8cd 8010 	str.w	r8, [sp, #16]
 800d184:	4654      	mov	r4, sl
 800d186:	e754      	b.n	800d032 <_dtoa_r+0x36a>
 800d188:	4a54      	ldr	r2, [pc, #336]	@ (800d2dc <_dtoa_r+0x614>)
 800d18a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d18e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d192:	9a08      	ldr	r2, [sp, #32]
 800d194:	ec41 0b17 	vmov	d7, r0, r1
 800d198:	443c      	add	r4, r7
 800d19a:	b34a      	cbz	r2, 800d1f0 <_dtoa_r+0x528>
 800d19c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d1a0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d1a4:	463e      	mov	r6, r7
 800d1a6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d1aa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d1ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d1b2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d1b6:	ee14 2a90 	vmov	r2, s9
 800d1ba:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d1be:	3230      	adds	r2, #48	@ 0x30
 800d1c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d1c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1cc:	f806 2b01 	strb.w	r2, [r6], #1
 800d1d0:	d438      	bmi.n	800d244 <_dtoa_r+0x57c>
 800d1d2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d1d6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1de:	d462      	bmi.n	800d2a6 <_dtoa_r+0x5de>
 800d1e0:	42a6      	cmp	r6, r4
 800d1e2:	f43f af4d 	beq.w	800d080 <_dtoa_r+0x3b8>
 800d1e6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d1ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d1ee:	e7e0      	b.n	800d1b2 <_dtoa_r+0x4ea>
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	463e      	mov	r6, r7
 800d1f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d1f8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d1fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d200:	ee14 2a90 	vmov	r2, s9
 800d204:	3230      	adds	r2, #48	@ 0x30
 800d206:	f806 2b01 	strb.w	r2, [r6], #1
 800d20a:	42a6      	cmp	r6, r4
 800d20c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d210:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d214:	d119      	bne.n	800d24a <_dtoa_r+0x582>
 800d216:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d21a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d21e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d226:	dc3e      	bgt.n	800d2a6 <_dtoa_r+0x5de>
 800d228:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d22c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d234:	f57f af24 	bpl.w	800d080 <_dtoa_r+0x3b8>
 800d238:	460e      	mov	r6, r1
 800d23a:	3901      	subs	r1, #1
 800d23c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d240:	2b30      	cmp	r3, #48	@ 0x30
 800d242:	d0f9      	beq.n	800d238 <_dtoa_r+0x570>
 800d244:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d248:	e758      	b.n	800d0fc <_dtoa_r+0x434>
 800d24a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d24e:	e7d5      	b.n	800d1fc <_dtoa_r+0x534>
 800d250:	d10b      	bne.n	800d26a <_dtoa_r+0x5a2>
 800d252:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d256:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d25a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d25e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d266:	f2c0 8161 	blt.w	800d52c <_dtoa_r+0x864>
 800d26a:	2400      	movs	r4, #0
 800d26c:	4625      	mov	r5, r4
 800d26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d270:	43db      	mvns	r3, r3
 800d272:	9304      	str	r3, [sp, #16]
 800d274:	463e      	mov	r6, r7
 800d276:	f04f 0800 	mov.w	r8, #0
 800d27a:	4621      	mov	r1, r4
 800d27c:	4648      	mov	r0, r9
 800d27e:	f000 fbb9 	bl	800d9f4 <_Bfree>
 800d282:	2d00      	cmp	r5, #0
 800d284:	d0de      	beq.n	800d244 <_dtoa_r+0x57c>
 800d286:	f1b8 0f00 	cmp.w	r8, #0
 800d28a:	d005      	beq.n	800d298 <_dtoa_r+0x5d0>
 800d28c:	45a8      	cmp	r8, r5
 800d28e:	d003      	beq.n	800d298 <_dtoa_r+0x5d0>
 800d290:	4641      	mov	r1, r8
 800d292:	4648      	mov	r0, r9
 800d294:	f000 fbae 	bl	800d9f4 <_Bfree>
 800d298:	4629      	mov	r1, r5
 800d29a:	4648      	mov	r0, r9
 800d29c:	f000 fbaa 	bl	800d9f4 <_Bfree>
 800d2a0:	e7d0      	b.n	800d244 <_dtoa_r+0x57c>
 800d2a2:	f8cd 8010 	str.w	r8, [sp, #16]
 800d2a6:	4633      	mov	r3, r6
 800d2a8:	461e      	mov	r6, r3
 800d2aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2ae:	2a39      	cmp	r2, #57	@ 0x39
 800d2b0:	d106      	bne.n	800d2c0 <_dtoa_r+0x5f8>
 800d2b2:	429f      	cmp	r7, r3
 800d2b4:	d1f8      	bne.n	800d2a8 <_dtoa_r+0x5e0>
 800d2b6:	9a04      	ldr	r2, [sp, #16]
 800d2b8:	3201      	adds	r2, #1
 800d2ba:	9204      	str	r2, [sp, #16]
 800d2bc:	2230      	movs	r2, #48	@ 0x30
 800d2be:	703a      	strb	r2, [r7, #0]
 800d2c0:	781a      	ldrb	r2, [r3, #0]
 800d2c2:	3201      	adds	r2, #1
 800d2c4:	701a      	strb	r2, [r3, #0]
 800d2c6:	e7bd      	b.n	800d244 <_dtoa_r+0x57c>
 800d2c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d2cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d4:	f47f aeef 	bne.w	800d0b6 <_dtoa_r+0x3ee>
 800d2d8:	e710      	b.n	800d0fc <_dtoa_r+0x434>
 800d2da:	bf00      	nop
 800d2dc:	080107d8 	.word	0x080107d8
 800d2e0:	080107b0 	.word	0x080107b0
 800d2e4:	9908      	ldr	r1, [sp, #32]
 800d2e6:	2900      	cmp	r1, #0
 800d2e8:	f000 80e3 	beq.w	800d4b2 <_dtoa_r+0x7ea>
 800d2ec:	9907      	ldr	r1, [sp, #28]
 800d2ee:	2901      	cmp	r1, #1
 800d2f0:	f300 80c8 	bgt.w	800d484 <_dtoa_r+0x7bc>
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	f000 80c1 	beq.w	800d47c <_dtoa_r+0x7b4>
 800d2fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d2fe:	9e05      	ldr	r6, [sp, #20]
 800d300:	461c      	mov	r4, r3
 800d302:	9304      	str	r3, [sp, #16]
 800d304:	9b05      	ldr	r3, [sp, #20]
 800d306:	4413      	add	r3, r2
 800d308:	9305      	str	r3, [sp, #20]
 800d30a:	9b06      	ldr	r3, [sp, #24]
 800d30c:	2101      	movs	r1, #1
 800d30e:	4413      	add	r3, r2
 800d310:	4648      	mov	r0, r9
 800d312:	9306      	str	r3, [sp, #24]
 800d314:	f000 fc6c 	bl	800dbf0 <__i2b>
 800d318:	9b04      	ldr	r3, [sp, #16]
 800d31a:	4605      	mov	r5, r0
 800d31c:	b166      	cbz	r6, 800d338 <_dtoa_r+0x670>
 800d31e:	9a06      	ldr	r2, [sp, #24]
 800d320:	2a00      	cmp	r2, #0
 800d322:	dd09      	ble.n	800d338 <_dtoa_r+0x670>
 800d324:	42b2      	cmp	r2, r6
 800d326:	9905      	ldr	r1, [sp, #20]
 800d328:	bfa8      	it	ge
 800d32a:	4632      	movge	r2, r6
 800d32c:	1a89      	subs	r1, r1, r2
 800d32e:	9105      	str	r1, [sp, #20]
 800d330:	9906      	ldr	r1, [sp, #24]
 800d332:	1ab6      	subs	r6, r6, r2
 800d334:	1a8a      	subs	r2, r1, r2
 800d336:	9206      	str	r2, [sp, #24]
 800d338:	b1fb      	cbz	r3, 800d37a <_dtoa_r+0x6b2>
 800d33a:	9a08      	ldr	r2, [sp, #32]
 800d33c:	2a00      	cmp	r2, #0
 800d33e:	f000 80bc 	beq.w	800d4ba <_dtoa_r+0x7f2>
 800d342:	b19c      	cbz	r4, 800d36c <_dtoa_r+0x6a4>
 800d344:	4629      	mov	r1, r5
 800d346:	4622      	mov	r2, r4
 800d348:	4648      	mov	r0, r9
 800d34a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d34c:	f000 fd10 	bl	800dd70 <__pow5mult>
 800d350:	9a01      	ldr	r2, [sp, #4]
 800d352:	4601      	mov	r1, r0
 800d354:	4605      	mov	r5, r0
 800d356:	4648      	mov	r0, r9
 800d358:	f000 fc60 	bl	800dc1c <__multiply>
 800d35c:	9901      	ldr	r1, [sp, #4]
 800d35e:	9004      	str	r0, [sp, #16]
 800d360:	4648      	mov	r0, r9
 800d362:	f000 fb47 	bl	800d9f4 <_Bfree>
 800d366:	9a04      	ldr	r2, [sp, #16]
 800d368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d36a:	9201      	str	r2, [sp, #4]
 800d36c:	1b1a      	subs	r2, r3, r4
 800d36e:	d004      	beq.n	800d37a <_dtoa_r+0x6b2>
 800d370:	9901      	ldr	r1, [sp, #4]
 800d372:	4648      	mov	r0, r9
 800d374:	f000 fcfc 	bl	800dd70 <__pow5mult>
 800d378:	9001      	str	r0, [sp, #4]
 800d37a:	2101      	movs	r1, #1
 800d37c:	4648      	mov	r0, r9
 800d37e:	f000 fc37 	bl	800dbf0 <__i2b>
 800d382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d384:	4604      	mov	r4, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	f000 81d0 	beq.w	800d72c <_dtoa_r+0xa64>
 800d38c:	461a      	mov	r2, r3
 800d38e:	4601      	mov	r1, r0
 800d390:	4648      	mov	r0, r9
 800d392:	f000 fced 	bl	800dd70 <__pow5mult>
 800d396:	9b07      	ldr	r3, [sp, #28]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	4604      	mov	r4, r0
 800d39c:	f300 8095 	bgt.w	800d4ca <_dtoa_r+0x802>
 800d3a0:	9b02      	ldr	r3, [sp, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	f040 808b 	bne.w	800d4be <_dtoa_r+0x7f6>
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d3ae:	2a00      	cmp	r2, #0
 800d3b0:	f040 8087 	bne.w	800d4c2 <_dtoa_r+0x7fa>
 800d3b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d3b8:	0d12      	lsrs	r2, r2, #20
 800d3ba:	0512      	lsls	r2, r2, #20
 800d3bc:	2a00      	cmp	r2, #0
 800d3be:	f000 8082 	beq.w	800d4c6 <_dtoa_r+0x7fe>
 800d3c2:	9b05      	ldr	r3, [sp, #20]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	9305      	str	r3, [sp, #20]
 800d3c8:	9b06      	ldr	r3, [sp, #24]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	9306      	str	r3, [sp, #24]
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 81af 	beq.w	800d738 <_dtoa_r+0xa70>
 800d3da:	6922      	ldr	r2, [r4, #16]
 800d3dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d3e0:	6910      	ldr	r0, [r2, #16]
 800d3e2:	f000 fbb9 	bl	800db58 <__hi0bits>
 800d3e6:	f1c0 0020 	rsb	r0, r0, #32
 800d3ea:	9b06      	ldr	r3, [sp, #24]
 800d3ec:	4418      	add	r0, r3
 800d3ee:	f010 001f 	ands.w	r0, r0, #31
 800d3f2:	d076      	beq.n	800d4e2 <_dtoa_r+0x81a>
 800d3f4:	f1c0 0220 	rsb	r2, r0, #32
 800d3f8:	2a04      	cmp	r2, #4
 800d3fa:	dd69      	ble.n	800d4d0 <_dtoa_r+0x808>
 800d3fc:	9b05      	ldr	r3, [sp, #20]
 800d3fe:	f1c0 001c 	rsb	r0, r0, #28
 800d402:	4403      	add	r3, r0
 800d404:	9305      	str	r3, [sp, #20]
 800d406:	9b06      	ldr	r3, [sp, #24]
 800d408:	4406      	add	r6, r0
 800d40a:	4403      	add	r3, r0
 800d40c:	9306      	str	r3, [sp, #24]
 800d40e:	9b05      	ldr	r3, [sp, #20]
 800d410:	2b00      	cmp	r3, #0
 800d412:	dd05      	ble.n	800d420 <_dtoa_r+0x758>
 800d414:	9901      	ldr	r1, [sp, #4]
 800d416:	461a      	mov	r2, r3
 800d418:	4648      	mov	r0, r9
 800d41a:	f000 fd03 	bl	800de24 <__lshift>
 800d41e:	9001      	str	r0, [sp, #4]
 800d420:	9b06      	ldr	r3, [sp, #24]
 800d422:	2b00      	cmp	r3, #0
 800d424:	dd05      	ble.n	800d432 <_dtoa_r+0x76a>
 800d426:	4621      	mov	r1, r4
 800d428:	461a      	mov	r2, r3
 800d42a:	4648      	mov	r0, r9
 800d42c:	f000 fcfa 	bl	800de24 <__lshift>
 800d430:	4604      	mov	r4, r0
 800d432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d434:	2b00      	cmp	r3, #0
 800d436:	d056      	beq.n	800d4e6 <_dtoa_r+0x81e>
 800d438:	9801      	ldr	r0, [sp, #4]
 800d43a:	4621      	mov	r1, r4
 800d43c:	f000 fd5e 	bl	800defc <__mcmp>
 800d440:	2800      	cmp	r0, #0
 800d442:	da50      	bge.n	800d4e6 <_dtoa_r+0x81e>
 800d444:	f108 33ff 	add.w	r3, r8, #4294967295
 800d448:	9304      	str	r3, [sp, #16]
 800d44a:	9901      	ldr	r1, [sp, #4]
 800d44c:	2300      	movs	r3, #0
 800d44e:	220a      	movs	r2, #10
 800d450:	4648      	mov	r0, r9
 800d452:	f000 faf1 	bl	800da38 <__multadd>
 800d456:	9b08      	ldr	r3, [sp, #32]
 800d458:	9001      	str	r0, [sp, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f000 816e 	beq.w	800d73c <_dtoa_r+0xa74>
 800d460:	4629      	mov	r1, r5
 800d462:	2300      	movs	r3, #0
 800d464:	220a      	movs	r2, #10
 800d466:	4648      	mov	r0, r9
 800d468:	f000 fae6 	bl	800da38 <__multadd>
 800d46c:	f1bb 0f00 	cmp.w	fp, #0
 800d470:	4605      	mov	r5, r0
 800d472:	dc64      	bgt.n	800d53e <_dtoa_r+0x876>
 800d474:	9b07      	ldr	r3, [sp, #28]
 800d476:	2b02      	cmp	r3, #2
 800d478:	dc3e      	bgt.n	800d4f8 <_dtoa_r+0x830>
 800d47a:	e060      	b.n	800d53e <_dtoa_r+0x876>
 800d47c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d47e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d482:	e73c      	b.n	800d2fe <_dtoa_r+0x636>
 800d484:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d488:	42a3      	cmp	r3, r4
 800d48a:	bfbf      	itttt	lt
 800d48c:	1ae2      	sublt	r2, r4, r3
 800d48e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d490:	189b      	addlt	r3, r3, r2
 800d492:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d494:	bfae      	itee	ge
 800d496:	1b1c      	subge	r4, r3, r4
 800d498:	4623      	movlt	r3, r4
 800d49a:	2400      	movlt	r4, #0
 800d49c:	f1ba 0f00 	cmp.w	sl, #0
 800d4a0:	bfb5      	itete	lt
 800d4a2:	9a05      	ldrlt	r2, [sp, #20]
 800d4a4:	9e05      	ldrge	r6, [sp, #20]
 800d4a6:	eba2 060a 	sublt.w	r6, r2, sl
 800d4aa:	4652      	movge	r2, sl
 800d4ac:	bfb8      	it	lt
 800d4ae:	2200      	movlt	r2, #0
 800d4b0:	e727      	b.n	800d302 <_dtoa_r+0x63a>
 800d4b2:	9e05      	ldr	r6, [sp, #20]
 800d4b4:	9d08      	ldr	r5, [sp, #32]
 800d4b6:	461c      	mov	r4, r3
 800d4b8:	e730      	b.n	800d31c <_dtoa_r+0x654>
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	e758      	b.n	800d370 <_dtoa_r+0x6a8>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e786      	b.n	800d3d0 <_dtoa_r+0x708>
 800d4c2:	9b02      	ldr	r3, [sp, #8]
 800d4c4:	e784      	b.n	800d3d0 <_dtoa_r+0x708>
 800d4c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d4c8:	e783      	b.n	800d3d2 <_dtoa_r+0x70a>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4ce:	e784      	b.n	800d3da <_dtoa_r+0x712>
 800d4d0:	d09d      	beq.n	800d40e <_dtoa_r+0x746>
 800d4d2:	9b05      	ldr	r3, [sp, #20]
 800d4d4:	321c      	adds	r2, #28
 800d4d6:	4413      	add	r3, r2
 800d4d8:	9305      	str	r3, [sp, #20]
 800d4da:	9b06      	ldr	r3, [sp, #24]
 800d4dc:	4416      	add	r6, r2
 800d4de:	4413      	add	r3, r2
 800d4e0:	e794      	b.n	800d40c <_dtoa_r+0x744>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	e7f5      	b.n	800d4d2 <_dtoa_r+0x80a>
 800d4e6:	f1ba 0f00 	cmp.w	sl, #0
 800d4ea:	f8cd 8010 	str.w	r8, [sp, #16]
 800d4ee:	46d3      	mov	fp, sl
 800d4f0:	dc21      	bgt.n	800d536 <_dtoa_r+0x86e>
 800d4f2:	9b07      	ldr	r3, [sp, #28]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	dd1e      	ble.n	800d536 <_dtoa_r+0x86e>
 800d4f8:	f1bb 0f00 	cmp.w	fp, #0
 800d4fc:	f47f aeb7 	bne.w	800d26e <_dtoa_r+0x5a6>
 800d500:	4621      	mov	r1, r4
 800d502:	465b      	mov	r3, fp
 800d504:	2205      	movs	r2, #5
 800d506:	4648      	mov	r0, r9
 800d508:	f000 fa96 	bl	800da38 <__multadd>
 800d50c:	4601      	mov	r1, r0
 800d50e:	4604      	mov	r4, r0
 800d510:	9801      	ldr	r0, [sp, #4]
 800d512:	f000 fcf3 	bl	800defc <__mcmp>
 800d516:	2800      	cmp	r0, #0
 800d518:	f77f aea9 	ble.w	800d26e <_dtoa_r+0x5a6>
 800d51c:	463e      	mov	r6, r7
 800d51e:	2331      	movs	r3, #49	@ 0x31
 800d520:	f806 3b01 	strb.w	r3, [r6], #1
 800d524:	9b04      	ldr	r3, [sp, #16]
 800d526:	3301      	adds	r3, #1
 800d528:	9304      	str	r3, [sp, #16]
 800d52a:	e6a4      	b.n	800d276 <_dtoa_r+0x5ae>
 800d52c:	f8cd 8010 	str.w	r8, [sp, #16]
 800d530:	4654      	mov	r4, sl
 800d532:	4625      	mov	r5, r4
 800d534:	e7f2      	b.n	800d51c <_dtoa_r+0x854>
 800d536:	9b08      	ldr	r3, [sp, #32]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f000 8103 	beq.w	800d744 <_dtoa_r+0xa7c>
 800d53e:	2e00      	cmp	r6, #0
 800d540:	dd05      	ble.n	800d54e <_dtoa_r+0x886>
 800d542:	4629      	mov	r1, r5
 800d544:	4632      	mov	r2, r6
 800d546:	4648      	mov	r0, r9
 800d548:	f000 fc6c 	bl	800de24 <__lshift>
 800d54c:	4605      	mov	r5, r0
 800d54e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d550:	2b00      	cmp	r3, #0
 800d552:	d058      	beq.n	800d606 <_dtoa_r+0x93e>
 800d554:	6869      	ldr	r1, [r5, #4]
 800d556:	4648      	mov	r0, r9
 800d558:	f000 fa0c 	bl	800d974 <_Balloc>
 800d55c:	4606      	mov	r6, r0
 800d55e:	b928      	cbnz	r0, 800d56c <_dtoa_r+0x8a4>
 800d560:	4b82      	ldr	r3, [pc, #520]	@ (800d76c <_dtoa_r+0xaa4>)
 800d562:	4602      	mov	r2, r0
 800d564:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d568:	f7ff bbc7 	b.w	800ccfa <_dtoa_r+0x32>
 800d56c:	692a      	ldr	r2, [r5, #16]
 800d56e:	3202      	adds	r2, #2
 800d570:	0092      	lsls	r2, r2, #2
 800d572:	f105 010c 	add.w	r1, r5, #12
 800d576:	300c      	adds	r0, #12
 800d578:	f001 ff1e 	bl	800f3b8 <memcpy>
 800d57c:	2201      	movs	r2, #1
 800d57e:	4631      	mov	r1, r6
 800d580:	4648      	mov	r0, r9
 800d582:	f000 fc4f 	bl	800de24 <__lshift>
 800d586:	1c7b      	adds	r3, r7, #1
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	eb07 030b 	add.w	r3, r7, fp
 800d58e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d590:	9b02      	ldr	r3, [sp, #8]
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	46a8      	mov	r8, r5
 800d598:	9308      	str	r3, [sp, #32]
 800d59a:	4605      	mov	r5, r0
 800d59c:	9b05      	ldr	r3, [sp, #20]
 800d59e:	9801      	ldr	r0, [sp, #4]
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	f103 3bff 	add.w	fp, r3, #4294967295
 800d5a6:	f7ff fb07 	bl	800cbb8 <quorem>
 800d5aa:	4641      	mov	r1, r8
 800d5ac:	9002      	str	r0, [sp, #8]
 800d5ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d5b2:	9801      	ldr	r0, [sp, #4]
 800d5b4:	f000 fca2 	bl	800defc <__mcmp>
 800d5b8:	462a      	mov	r2, r5
 800d5ba:	9006      	str	r0, [sp, #24]
 800d5bc:	4621      	mov	r1, r4
 800d5be:	4648      	mov	r0, r9
 800d5c0:	f000 fcb8 	bl	800df34 <__mdiff>
 800d5c4:	68c2      	ldr	r2, [r0, #12]
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	b9fa      	cbnz	r2, 800d60a <_dtoa_r+0x942>
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	9801      	ldr	r0, [sp, #4]
 800d5ce:	f000 fc95 	bl	800defc <__mcmp>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	4631      	mov	r1, r6
 800d5d6:	4648      	mov	r0, r9
 800d5d8:	920a      	str	r2, [sp, #40]	@ 0x28
 800d5da:	f000 fa0b 	bl	800d9f4 <_Bfree>
 800d5de:	9b07      	ldr	r3, [sp, #28]
 800d5e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5e2:	9e05      	ldr	r6, [sp, #20]
 800d5e4:	ea43 0102 	orr.w	r1, r3, r2
 800d5e8:	9b08      	ldr	r3, [sp, #32]
 800d5ea:	4319      	orrs	r1, r3
 800d5ec:	d10f      	bne.n	800d60e <_dtoa_r+0x946>
 800d5ee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d5f2:	d028      	beq.n	800d646 <_dtoa_r+0x97e>
 800d5f4:	9b06      	ldr	r3, [sp, #24]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	dd02      	ble.n	800d600 <_dtoa_r+0x938>
 800d5fa:	9b02      	ldr	r3, [sp, #8]
 800d5fc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d600:	f88b a000 	strb.w	sl, [fp]
 800d604:	e639      	b.n	800d27a <_dtoa_r+0x5b2>
 800d606:	4628      	mov	r0, r5
 800d608:	e7bd      	b.n	800d586 <_dtoa_r+0x8be>
 800d60a:	2201      	movs	r2, #1
 800d60c:	e7e2      	b.n	800d5d4 <_dtoa_r+0x90c>
 800d60e:	9b06      	ldr	r3, [sp, #24]
 800d610:	2b00      	cmp	r3, #0
 800d612:	db04      	blt.n	800d61e <_dtoa_r+0x956>
 800d614:	9907      	ldr	r1, [sp, #28]
 800d616:	430b      	orrs	r3, r1
 800d618:	9908      	ldr	r1, [sp, #32]
 800d61a:	430b      	orrs	r3, r1
 800d61c:	d120      	bne.n	800d660 <_dtoa_r+0x998>
 800d61e:	2a00      	cmp	r2, #0
 800d620:	ddee      	ble.n	800d600 <_dtoa_r+0x938>
 800d622:	9901      	ldr	r1, [sp, #4]
 800d624:	2201      	movs	r2, #1
 800d626:	4648      	mov	r0, r9
 800d628:	f000 fbfc 	bl	800de24 <__lshift>
 800d62c:	4621      	mov	r1, r4
 800d62e:	9001      	str	r0, [sp, #4]
 800d630:	f000 fc64 	bl	800defc <__mcmp>
 800d634:	2800      	cmp	r0, #0
 800d636:	dc03      	bgt.n	800d640 <_dtoa_r+0x978>
 800d638:	d1e2      	bne.n	800d600 <_dtoa_r+0x938>
 800d63a:	f01a 0f01 	tst.w	sl, #1
 800d63e:	d0df      	beq.n	800d600 <_dtoa_r+0x938>
 800d640:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d644:	d1d9      	bne.n	800d5fa <_dtoa_r+0x932>
 800d646:	2339      	movs	r3, #57	@ 0x39
 800d648:	f88b 3000 	strb.w	r3, [fp]
 800d64c:	4633      	mov	r3, r6
 800d64e:	461e      	mov	r6, r3
 800d650:	3b01      	subs	r3, #1
 800d652:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d656:	2a39      	cmp	r2, #57	@ 0x39
 800d658:	d053      	beq.n	800d702 <_dtoa_r+0xa3a>
 800d65a:	3201      	adds	r2, #1
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	e60c      	b.n	800d27a <_dtoa_r+0x5b2>
 800d660:	2a00      	cmp	r2, #0
 800d662:	dd07      	ble.n	800d674 <_dtoa_r+0x9ac>
 800d664:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d668:	d0ed      	beq.n	800d646 <_dtoa_r+0x97e>
 800d66a:	f10a 0301 	add.w	r3, sl, #1
 800d66e:	f88b 3000 	strb.w	r3, [fp]
 800d672:	e602      	b.n	800d27a <_dtoa_r+0x5b2>
 800d674:	9b05      	ldr	r3, [sp, #20]
 800d676:	9a05      	ldr	r2, [sp, #20]
 800d678:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d67c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d67e:	4293      	cmp	r3, r2
 800d680:	d029      	beq.n	800d6d6 <_dtoa_r+0xa0e>
 800d682:	9901      	ldr	r1, [sp, #4]
 800d684:	2300      	movs	r3, #0
 800d686:	220a      	movs	r2, #10
 800d688:	4648      	mov	r0, r9
 800d68a:	f000 f9d5 	bl	800da38 <__multadd>
 800d68e:	45a8      	cmp	r8, r5
 800d690:	9001      	str	r0, [sp, #4]
 800d692:	f04f 0300 	mov.w	r3, #0
 800d696:	f04f 020a 	mov.w	r2, #10
 800d69a:	4641      	mov	r1, r8
 800d69c:	4648      	mov	r0, r9
 800d69e:	d107      	bne.n	800d6b0 <_dtoa_r+0x9e8>
 800d6a0:	f000 f9ca 	bl	800da38 <__multadd>
 800d6a4:	4680      	mov	r8, r0
 800d6a6:	4605      	mov	r5, r0
 800d6a8:	9b05      	ldr	r3, [sp, #20]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	9305      	str	r3, [sp, #20]
 800d6ae:	e775      	b.n	800d59c <_dtoa_r+0x8d4>
 800d6b0:	f000 f9c2 	bl	800da38 <__multadd>
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	4680      	mov	r8, r0
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	220a      	movs	r2, #10
 800d6bc:	4648      	mov	r0, r9
 800d6be:	f000 f9bb 	bl	800da38 <__multadd>
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	e7f0      	b.n	800d6a8 <_dtoa_r+0x9e0>
 800d6c6:	f1bb 0f00 	cmp.w	fp, #0
 800d6ca:	bfcc      	ite	gt
 800d6cc:	465e      	movgt	r6, fp
 800d6ce:	2601      	movle	r6, #1
 800d6d0:	443e      	add	r6, r7
 800d6d2:	f04f 0800 	mov.w	r8, #0
 800d6d6:	9901      	ldr	r1, [sp, #4]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	4648      	mov	r0, r9
 800d6dc:	f000 fba2 	bl	800de24 <__lshift>
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	9001      	str	r0, [sp, #4]
 800d6e4:	f000 fc0a 	bl	800defc <__mcmp>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	dcaf      	bgt.n	800d64c <_dtoa_r+0x984>
 800d6ec:	d102      	bne.n	800d6f4 <_dtoa_r+0xa2c>
 800d6ee:	f01a 0f01 	tst.w	sl, #1
 800d6f2:	d1ab      	bne.n	800d64c <_dtoa_r+0x984>
 800d6f4:	4633      	mov	r3, r6
 800d6f6:	461e      	mov	r6, r3
 800d6f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6fc:	2a30      	cmp	r2, #48	@ 0x30
 800d6fe:	d0fa      	beq.n	800d6f6 <_dtoa_r+0xa2e>
 800d700:	e5bb      	b.n	800d27a <_dtoa_r+0x5b2>
 800d702:	429f      	cmp	r7, r3
 800d704:	d1a3      	bne.n	800d64e <_dtoa_r+0x986>
 800d706:	9b04      	ldr	r3, [sp, #16]
 800d708:	3301      	adds	r3, #1
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	2331      	movs	r3, #49	@ 0x31
 800d70e:	703b      	strb	r3, [r7, #0]
 800d710:	e5b3      	b.n	800d27a <_dtoa_r+0x5b2>
 800d712:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d714:	4f16      	ldr	r7, [pc, #88]	@ (800d770 <_dtoa_r+0xaa8>)
 800d716:	b11b      	cbz	r3, 800d720 <_dtoa_r+0xa58>
 800d718:	f107 0308 	add.w	r3, r7, #8
 800d71c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d71e:	6013      	str	r3, [r2, #0]
 800d720:	4638      	mov	r0, r7
 800d722:	b011      	add	sp, #68	@ 0x44
 800d724:	ecbd 8b02 	vpop	{d8}
 800d728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72c:	9b07      	ldr	r3, [sp, #28]
 800d72e:	2b01      	cmp	r3, #1
 800d730:	f77f ae36 	ble.w	800d3a0 <_dtoa_r+0x6d8>
 800d734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d736:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d738:	2001      	movs	r0, #1
 800d73a:	e656      	b.n	800d3ea <_dtoa_r+0x722>
 800d73c:	f1bb 0f00 	cmp.w	fp, #0
 800d740:	f77f aed7 	ble.w	800d4f2 <_dtoa_r+0x82a>
 800d744:	463e      	mov	r6, r7
 800d746:	9801      	ldr	r0, [sp, #4]
 800d748:	4621      	mov	r1, r4
 800d74a:	f7ff fa35 	bl	800cbb8 <quorem>
 800d74e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d752:	f806 ab01 	strb.w	sl, [r6], #1
 800d756:	1bf2      	subs	r2, r6, r7
 800d758:	4593      	cmp	fp, r2
 800d75a:	ddb4      	ble.n	800d6c6 <_dtoa_r+0x9fe>
 800d75c:	9901      	ldr	r1, [sp, #4]
 800d75e:	2300      	movs	r3, #0
 800d760:	220a      	movs	r2, #10
 800d762:	4648      	mov	r0, r9
 800d764:	f000 f968 	bl	800da38 <__multadd>
 800d768:	9001      	str	r0, [sp, #4]
 800d76a:	e7ec      	b.n	800d746 <_dtoa_r+0xa7e>
 800d76c:	08010735 	.word	0x08010735
 800d770:	080106b9 	.word	0x080106b9

0800d774 <_free_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	4605      	mov	r5, r0
 800d778:	2900      	cmp	r1, #0
 800d77a:	d041      	beq.n	800d800 <_free_r+0x8c>
 800d77c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d780:	1f0c      	subs	r4, r1, #4
 800d782:	2b00      	cmp	r3, #0
 800d784:	bfb8      	it	lt
 800d786:	18e4      	addlt	r4, r4, r3
 800d788:	f000 f8e8 	bl	800d95c <__malloc_lock>
 800d78c:	4a1d      	ldr	r2, [pc, #116]	@ (800d804 <_free_r+0x90>)
 800d78e:	6813      	ldr	r3, [r2, #0]
 800d790:	b933      	cbnz	r3, 800d7a0 <_free_r+0x2c>
 800d792:	6063      	str	r3, [r4, #4]
 800d794:	6014      	str	r4, [r2, #0]
 800d796:	4628      	mov	r0, r5
 800d798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d79c:	f000 b8e4 	b.w	800d968 <__malloc_unlock>
 800d7a0:	42a3      	cmp	r3, r4
 800d7a2:	d908      	bls.n	800d7b6 <_free_r+0x42>
 800d7a4:	6820      	ldr	r0, [r4, #0]
 800d7a6:	1821      	adds	r1, r4, r0
 800d7a8:	428b      	cmp	r3, r1
 800d7aa:	bf01      	itttt	eq
 800d7ac:	6819      	ldreq	r1, [r3, #0]
 800d7ae:	685b      	ldreq	r3, [r3, #4]
 800d7b0:	1809      	addeq	r1, r1, r0
 800d7b2:	6021      	streq	r1, [r4, #0]
 800d7b4:	e7ed      	b.n	800d792 <_free_r+0x1e>
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	b10b      	cbz	r3, 800d7c0 <_free_r+0x4c>
 800d7bc:	42a3      	cmp	r3, r4
 800d7be:	d9fa      	bls.n	800d7b6 <_free_r+0x42>
 800d7c0:	6811      	ldr	r1, [r2, #0]
 800d7c2:	1850      	adds	r0, r2, r1
 800d7c4:	42a0      	cmp	r0, r4
 800d7c6:	d10b      	bne.n	800d7e0 <_free_r+0x6c>
 800d7c8:	6820      	ldr	r0, [r4, #0]
 800d7ca:	4401      	add	r1, r0
 800d7cc:	1850      	adds	r0, r2, r1
 800d7ce:	4283      	cmp	r3, r0
 800d7d0:	6011      	str	r1, [r2, #0]
 800d7d2:	d1e0      	bne.n	800d796 <_free_r+0x22>
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	6053      	str	r3, [r2, #4]
 800d7da:	4408      	add	r0, r1
 800d7dc:	6010      	str	r0, [r2, #0]
 800d7de:	e7da      	b.n	800d796 <_free_r+0x22>
 800d7e0:	d902      	bls.n	800d7e8 <_free_r+0x74>
 800d7e2:	230c      	movs	r3, #12
 800d7e4:	602b      	str	r3, [r5, #0]
 800d7e6:	e7d6      	b.n	800d796 <_free_r+0x22>
 800d7e8:	6820      	ldr	r0, [r4, #0]
 800d7ea:	1821      	adds	r1, r4, r0
 800d7ec:	428b      	cmp	r3, r1
 800d7ee:	bf04      	itt	eq
 800d7f0:	6819      	ldreq	r1, [r3, #0]
 800d7f2:	685b      	ldreq	r3, [r3, #4]
 800d7f4:	6063      	str	r3, [r4, #4]
 800d7f6:	bf04      	itt	eq
 800d7f8:	1809      	addeq	r1, r1, r0
 800d7fa:	6021      	streq	r1, [r4, #0]
 800d7fc:	6054      	str	r4, [r2, #4]
 800d7fe:	e7ca      	b.n	800d796 <_free_r+0x22>
 800d800:	bd38      	pop	{r3, r4, r5, pc}
 800d802:	bf00      	nop
 800d804:	24000794 	.word	0x24000794

0800d808 <malloc>:
 800d808:	4b02      	ldr	r3, [pc, #8]	@ (800d814 <malloc+0xc>)
 800d80a:	4601      	mov	r1, r0
 800d80c:	6818      	ldr	r0, [r3, #0]
 800d80e:	f000 b825 	b.w	800d85c <_malloc_r>
 800d812:	bf00      	nop
 800d814:	24000020 	.word	0x24000020

0800d818 <sbrk_aligned>:
 800d818:	b570      	push	{r4, r5, r6, lr}
 800d81a:	4e0f      	ldr	r6, [pc, #60]	@ (800d858 <sbrk_aligned+0x40>)
 800d81c:	460c      	mov	r4, r1
 800d81e:	6831      	ldr	r1, [r6, #0]
 800d820:	4605      	mov	r5, r0
 800d822:	b911      	cbnz	r1, 800d82a <sbrk_aligned+0x12>
 800d824:	f001 fdb8 	bl	800f398 <_sbrk_r>
 800d828:	6030      	str	r0, [r6, #0]
 800d82a:	4621      	mov	r1, r4
 800d82c:	4628      	mov	r0, r5
 800d82e:	f001 fdb3 	bl	800f398 <_sbrk_r>
 800d832:	1c43      	adds	r3, r0, #1
 800d834:	d103      	bne.n	800d83e <sbrk_aligned+0x26>
 800d836:	f04f 34ff 	mov.w	r4, #4294967295
 800d83a:	4620      	mov	r0, r4
 800d83c:	bd70      	pop	{r4, r5, r6, pc}
 800d83e:	1cc4      	adds	r4, r0, #3
 800d840:	f024 0403 	bic.w	r4, r4, #3
 800d844:	42a0      	cmp	r0, r4
 800d846:	d0f8      	beq.n	800d83a <sbrk_aligned+0x22>
 800d848:	1a21      	subs	r1, r4, r0
 800d84a:	4628      	mov	r0, r5
 800d84c:	f001 fda4 	bl	800f398 <_sbrk_r>
 800d850:	3001      	adds	r0, #1
 800d852:	d1f2      	bne.n	800d83a <sbrk_aligned+0x22>
 800d854:	e7ef      	b.n	800d836 <sbrk_aligned+0x1e>
 800d856:	bf00      	nop
 800d858:	24000790 	.word	0x24000790

0800d85c <_malloc_r>:
 800d85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d860:	1ccd      	adds	r5, r1, #3
 800d862:	f025 0503 	bic.w	r5, r5, #3
 800d866:	3508      	adds	r5, #8
 800d868:	2d0c      	cmp	r5, #12
 800d86a:	bf38      	it	cc
 800d86c:	250c      	movcc	r5, #12
 800d86e:	2d00      	cmp	r5, #0
 800d870:	4606      	mov	r6, r0
 800d872:	db01      	blt.n	800d878 <_malloc_r+0x1c>
 800d874:	42a9      	cmp	r1, r5
 800d876:	d904      	bls.n	800d882 <_malloc_r+0x26>
 800d878:	230c      	movs	r3, #12
 800d87a:	6033      	str	r3, [r6, #0]
 800d87c:	2000      	movs	r0, #0
 800d87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d958 <_malloc_r+0xfc>
 800d886:	f000 f869 	bl	800d95c <__malloc_lock>
 800d88a:	f8d8 3000 	ldr.w	r3, [r8]
 800d88e:	461c      	mov	r4, r3
 800d890:	bb44      	cbnz	r4, 800d8e4 <_malloc_r+0x88>
 800d892:	4629      	mov	r1, r5
 800d894:	4630      	mov	r0, r6
 800d896:	f7ff ffbf 	bl	800d818 <sbrk_aligned>
 800d89a:	1c43      	adds	r3, r0, #1
 800d89c:	4604      	mov	r4, r0
 800d89e:	d158      	bne.n	800d952 <_malloc_r+0xf6>
 800d8a0:	f8d8 4000 	ldr.w	r4, [r8]
 800d8a4:	4627      	mov	r7, r4
 800d8a6:	2f00      	cmp	r7, #0
 800d8a8:	d143      	bne.n	800d932 <_malloc_r+0xd6>
 800d8aa:	2c00      	cmp	r4, #0
 800d8ac:	d04b      	beq.n	800d946 <_malloc_r+0xea>
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	4639      	mov	r1, r7
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	eb04 0903 	add.w	r9, r4, r3
 800d8b8:	f001 fd6e 	bl	800f398 <_sbrk_r>
 800d8bc:	4581      	cmp	r9, r0
 800d8be:	d142      	bne.n	800d946 <_malloc_r+0xea>
 800d8c0:	6821      	ldr	r1, [r4, #0]
 800d8c2:	1a6d      	subs	r5, r5, r1
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7ff ffa6 	bl	800d818 <sbrk_aligned>
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	d03a      	beq.n	800d946 <_malloc_r+0xea>
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	442b      	add	r3, r5
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	bb62      	cbnz	r2, 800d938 <_malloc_r+0xdc>
 800d8de:	f8c8 7000 	str.w	r7, [r8]
 800d8e2:	e00f      	b.n	800d904 <_malloc_r+0xa8>
 800d8e4:	6822      	ldr	r2, [r4, #0]
 800d8e6:	1b52      	subs	r2, r2, r5
 800d8e8:	d420      	bmi.n	800d92c <_malloc_r+0xd0>
 800d8ea:	2a0b      	cmp	r2, #11
 800d8ec:	d917      	bls.n	800d91e <_malloc_r+0xc2>
 800d8ee:	1961      	adds	r1, r4, r5
 800d8f0:	42a3      	cmp	r3, r4
 800d8f2:	6025      	str	r5, [r4, #0]
 800d8f4:	bf18      	it	ne
 800d8f6:	6059      	strne	r1, [r3, #4]
 800d8f8:	6863      	ldr	r3, [r4, #4]
 800d8fa:	bf08      	it	eq
 800d8fc:	f8c8 1000 	streq.w	r1, [r8]
 800d900:	5162      	str	r2, [r4, r5]
 800d902:	604b      	str	r3, [r1, #4]
 800d904:	4630      	mov	r0, r6
 800d906:	f000 f82f 	bl	800d968 <__malloc_unlock>
 800d90a:	f104 000b 	add.w	r0, r4, #11
 800d90e:	1d23      	adds	r3, r4, #4
 800d910:	f020 0007 	bic.w	r0, r0, #7
 800d914:	1ac2      	subs	r2, r0, r3
 800d916:	bf1c      	itt	ne
 800d918:	1a1b      	subne	r3, r3, r0
 800d91a:	50a3      	strne	r3, [r4, r2]
 800d91c:	e7af      	b.n	800d87e <_malloc_r+0x22>
 800d91e:	6862      	ldr	r2, [r4, #4]
 800d920:	42a3      	cmp	r3, r4
 800d922:	bf0c      	ite	eq
 800d924:	f8c8 2000 	streq.w	r2, [r8]
 800d928:	605a      	strne	r2, [r3, #4]
 800d92a:	e7eb      	b.n	800d904 <_malloc_r+0xa8>
 800d92c:	4623      	mov	r3, r4
 800d92e:	6864      	ldr	r4, [r4, #4]
 800d930:	e7ae      	b.n	800d890 <_malloc_r+0x34>
 800d932:	463c      	mov	r4, r7
 800d934:	687f      	ldr	r7, [r7, #4]
 800d936:	e7b6      	b.n	800d8a6 <_malloc_r+0x4a>
 800d938:	461a      	mov	r2, r3
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	42a3      	cmp	r3, r4
 800d93e:	d1fb      	bne.n	800d938 <_malloc_r+0xdc>
 800d940:	2300      	movs	r3, #0
 800d942:	6053      	str	r3, [r2, #4]
 800d944:	e7de      	b.n	800d904 <_malloc_r+0xa8>
 800d946:	230c      	movs	r3, #12
 800d948:	6033      	str	r3, [r6, #0]
 800d94a:	4630      	mov	r0, r6
 800d94c:	f000 f80c 	bl	800d968 <__malloc_unlock>
 800d950:	e794      	b.n	800d87c <_malloc_r+0x20>
 800d952:	6005      	str	r5, [r0, #0]
 800d954:	e7d6      	b.n	800d904 <_malloc_r+0xa8>
 800d956:	bf00      	nop
 800d958:	24000794 	.word	0x24000794

0800d95c <__malloc_lock>:
 800d95c:	4801      	ldr	r0, [pc, #4]	@ (800d964 <__malloc_lock+0x8>)
 800d95e:	f7ff b922 	b.w	800cba6 <__retarget_lock_acquire_recursive>
 800d962:	bf00      	nop
 800d964:	2400078c 	.word	0x2400078c

0800d968 <__malloc_unlock>:
 800d968:	4801      	ldr	r0, [pc, #4]	@ (800d970 <__malloc_unlock+0x8>)
 800d96a:	f7ff b91d 	b.w	800cba8 <__retarget_lock_release_recursive>
 800d96e:	bf00      	nop
 800d970:	2400078c 	.word	0x2400078c

0800d974 <_Balloc>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	69c6      	ldr	r6, [r0, #28]
 800d978:	4604      	mov	r4, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	b976      	cbnz	r6, 800d99c <_Balloc+0x28>
 800d97e:	2010      	movs	r0, #16
 800d980:	f7ff ff42 	bl	800d808 <malloc>
 800d984:	4602      	mov	r2, r0
 800d986:	61e0      	str	r0, [r4, #28]
 800d988:	b920      	cbnz	r0, 800d994 <_Balloc+0x20>
 800d98a:	4b18      	ldr	r3, [pc, #96]	@ (800d9ec <_Balloc+0x78>)
 800d98c:	4818      	ldr	r0, [pc, #96]	@ (800d9f0 <_Balloc+0x7c>)
 800d98e:	216b      	movs	r1, #107	@ 0x6b
 800d990:	f001 fd2a 	bl	800f3e8 <__assert_func>
 800d994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d998:	6006      	str	r6, [r0, #0]
 800d99a:	60c6      	str	r6, [r0, #12]
 800d99c:	69e6      	ldr	r6, [r4, #28]
 800d99e:	68f3      	ldr	r3, [r6, #12]
 800d9a0:	b183      	cbz	r3, 800d9c4 <_Balloc+0x50>
 800d9a2:	69e3      	ldr	r3, [r4, #28]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9aa:	b9b8      	cbnz	r0, 800d9dc <_Balloc+0x68>
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	fa01 f605 	lsl.w	r6, r1, r5
 800d9b2:	1d72      	adds	r2, r6, #5
 800d9b4:	0092      	lsls	r2, r2, #2
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f001 fd34 	bl	800f424 <_calloc_r>
 800d9bc:	b160      	cbz	r0, 800d9d8 <_Balloc+0x64>
 800d9be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9c2:	e00e      	b.n	800d9e2 <_Balloc+0x6e>
 800d9c4:	2221      	movs	r2, #33	@ 0x21
 800d9c6:	2104      	movs	r1, #4
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f001 fd2b 	bl	800f424 <_calloc_r>
 800d9ce:	69e3      	ldr	r3, [r4, #28]
 800d9d0:	60f0      	str	r0, [r6, #12]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1e4      	bne.n	800d9a2 <_Balloc+0x2e>
 800d9d8:	2000      	movs	r0, #0
 800d9da:	bd70      	pop	{r4, r5, r6, pc}
 800d9dc:	6802      	ldr	r2, [r0, #0]
 800d9de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9e8:	e7f7      	b.n	800d9da <_Balloc+0x66>
 800d9ea:	bf00      	nop
 800d9ec:	080106c6 	.word	0x080106c6
 800d9f0:	08010746 	.word	0x08010746

0800d9f4 <_Bfree>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	69c6      	ldr	r6, [r0, #28]
 800d9f8:	4605      	mov	r5, r0
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	b976      	cbnz	r6, 800da1c <_Bfree+0x28>
 800d9fe:	2010      	movs	r0, #16
 800da00:	f7ff ff02 	bl	800d808 <malloc>
 800da04:	4602      	mov	r2, r0
 800da06:	61e8      	str	r0, [r5, #28]
 800da08:	b920      	cbnz	r0, 800da14 <_Bfree+0x20>
 800da0a:	4b09      	ldr	r3, [pc, #36]	@ (800da30 <_Bfree+0x3c>)
 800da0c:	4809      	ldr	r0, [pc, #36]	@ (800da34 <_Bfree+0x40>)
 800da0e:	218f      	movs	r1, #143	@ 0x8f
 800da10:	f001 fcea 	bl	800f3e8 <__assert_func>
 800da14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da18:	6006      	str	r6, [r0, #0]
 800da1a:	60c6      	str	r6, [r0, #12]
 800da1c:	b13c      	cbz	r4, 800da2e <_Bfree+0x3a>
 800da1e:	69eb      	ldr	r3, [r5, #28]
 800da20:	6862      	ldr	r2, [r4, #4]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da28:	6021      	str	r1, [r4, #0]
 800da2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da2e:	bd70      	pop	{r4, r5, r6, pc}
 800da30:	080106c6 	.word	0x080106c6
 800da34:	08010746 	.word	0x08010746

0800da38 <__multadd>:
 800da38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da3c:	690d      	ldr	r5, [r1, #16]
 800da3e:	4607      	mov	r7, r0
 800da40:	460c      	mov	r4, r1
 800da42:	461e      	mov	r6, r3
 800da44:	f101 0c14 	add.w	ip, r1, #20
 800da48:	2000      	movs	r0, #0
 800da4a:	f8dc 3000 	ldr.w	r3, [ip]
 800da4e:	b299      	uxth	r1, r3
 800da50:	fb02 6101 	mla	r1, r2, r1, r6
 800da54:	0c1e      	lsrs	r6, r3, #16
 800da56:	0c0b      	lsrs	r3, r1, #16
 800da58:	fb02 3306 	mla	r3, r2, r6, r3
 800da5c:	b289      	uxth	r1, r1
 800da5e:	3001      	adds	r0, #1
 800da60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da64:	4285      	cmp	r5, r0
 800da66:	f84c 1b04 	str.w	r1, [ip], #4
 800da6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da6e:	dcec      	bgt.n	800da4a <__multadd+0x12>
 800da70:	b30e      	cbz	r6, 800dab6 <__multadd+0x7e>
 800da72:	68a3      	ldr	r3, [r4, #8]
 800da74:	42ab      	cmp	r3, r5
 800da76:	dc19      	bgt.n	800daac <__multadd+0x74>
 800da78:	6861      	ldr	r1, [r4, #4]
 800da7a:	4638      	mov	r0, r7
 800da7c:	3101      	adds	r1, #1
 800da7e:	f7ff ff79 	bl	800d974 <_Balloc>
 800da82:	4680      	mov	r8, r0
 800da84:	b928      	cbnz	r0, 800da92 <__multadd+0x5a>
 800da86:	4602      	mov	r2, r0
 800da88:	4b0c      	ldr	r3, [pc, #48]	@ (800dabc <__multadd+0x84>)
 800da8a:	480d      	ldr	r0, [pc, #52]	@ (800dac0 <__multadd+0x88>)
 800da8c:	21ba      	movs	r1, #186	@ 0xba
 800da8e:	f001 fcab 	bl	800f3e8 <__assert_func>
 800da92:	6922      	ldr	r2, [r4, #16]
 800da94:	3202      	adds	r2, #2
 800da96:	f104 010c 	add.w	r1, r4, #12
 800da9a:	0092      	lsls	r2, r2, #2
 800da9c:	300c      	adds	r0, #12
 800da9e:	f001 fc8b 	bl	800f3b8 <memcpy>
 800daa2:	4621      	mov	r1, r4
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff ffa5 	bl	800d9f4 <_Bfree>
 800daaa:	4644      	mov	r4, r8
 800daac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dab0:	3501      	adds	r5, #1
 800dab2:	615e      	str	r6, [r3, #20]
 800dab4:	6125      	str	r5, [r4, #16]
 800dab6:	4620      	mov	r0, r4
 800dab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabc:	08010735 	.word	0x08010735
 800dac0:	08010746 	.word	0x08010746

0800dac4 <__s2b>:
 800dac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac8:	460c      	mov	r4, r1
 800daca:	4615      	mov	r5, r2
 800dacc:	461f      	mov	r7, r3
 800dace:	2209      	movs	r2, #9
 800dad0:	3308      	adds	r3, #8
 800dad2:	4606      	mov	r6, r0
 800dad4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dad8:	2100      	movs	r1, #0
 800dada:	2201      	movs	r2, #1
 800dadc:	429a      	cmp	r2, r3
 800dade:	db09      	blt.n	800daf4 <__s2b+0x30>
 800dae0:	4630      	mov	r0, r6
 800dae2:	f7ff ff47 	bl	800d974 <_Balloc>
 800dae6:	b940      	cbnz	r0, 800dafa <__s2b+0x36>
 800dae8:	4602      	mov	r2, r0
 800daea:	4b19      	ldr	r3, [pc, #100]	@ (800db50 <__s2b+0x8c>)
 800daec:	4819      	ldr	r0, [pc, #100]	@ (800db54 <__s2b+0x90>)
 800daee:	21d3      	movs	r1, #211	@ 0xd3
 800daf0:	f001 fc7a 	bl	800f3e8 <__assert_func>
 800daf4:	0052      	lsls	r2, r2, #1
 800daf6:	3101      	adds	r1, #1
 800daf8:	e7f0      	b.n	800dadc <__s2b+0x18>
 800dafa:	9b08      	ldr	r3, [sp, #32]
 800dafc:	6143      	str	r3, [r0, #20]
 800dafe:	2d09      	cmp	r5, #9
 800db00:	f04f 0301 	mov.w	r3, #1
 800db04:	6103      	str	r3, [r0, #16]
 800db06:	dd16      	ble.n	800db36 <__s2b+0x72>
 800db08:	f104 0909 	add.w	r9, r4, #9
 800db0c:	46c8      	mov	r8, r9
 800db0e:	442c      	add	r4, r5
 800db10:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db14:	4601      	mov	r1, r0
 800db16:	3b30      	subs	r3, #48	@ 0x30
 800db18:	220a      	movs	r2, #10
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7ff ff8c 	bl	800da38 <__multadd>
 800db20:	45a0      	cmp	r8, r4
 800db22:	d1f5      	bne.n	800db10 <__s2b+0x4c>
 800db24:	f1a5 0408 	sub.w	r4, r5, #8
 800db28:	444c      	add	r4, r9
 800db2a:	1b2d      	subs	r5, r5, r4
 800db2c:	1963      	adds	r3, r4, r5
 800db2e:	42bb      	cmp	r3, r7
 800db30:	db04      	blt.n	800db3c <__s2b+0x78>
 800db32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db36:	340a      	adds	r4, #10
 800db38:	2509      	movs	r5, #9
 800db3a:	e7f6      	b.n	800db2a <__s2b+0x66>
 800db3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db40:	4601      	mov	r1, r0
 800db42:	3b30      	subs	r3, #48	@ 0x30
 800db44:	220a      	movs	r2, #10
 800db46:	4630      	mov	r0, r6
 800db48:	f7ff ff76 	bl	800da38 <__multadd>
 800db4c:	e7ee      	b.n	800db2c <__s2b+0x68>
 800db4e:	bf00      	nop
 800db50:	08010735 	.word	0x08010735
 800db54:	08010746 	.word	0x08010746

0800db58 <__hi0bits>:
 800db58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db5c:	4603      	mov	r3, r0
 800db5e:	bf36      	itet	cc
 800db60:	0403      	lslcc	r3, r0, #16
 800db62:	2000      	movcs	r0, #0
 800db64:	2010      	movcc	r0, #16
 800db66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db6a:	bf3c      	itt	cc
 800db6c:	021b      	lslcc	r3, r3, #8
 800db6e:	3008      	addcc	r0, #8
 800db70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db74:	bf3c      	itt	cc
 800db76:	011b      	lslcc	r3, r3, #4
 800db78:	3004      	addcc	r0, #4
 800db7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db7e:	bf3c      	itt	cc
 800db80:	009b      	lslcc	r3, r3, #2
 800db82:	3002      	addcc	r0, #2
 800db84:	2b00      	cmp	r3, #0
 800db86:	db05      	blt.n	800db94 <__hi0bits+0x3c>
 800db88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db8c:	f100 0001 	add.w	r0, r0, #1
 800db90:	bf08      	it	eq
 800db92:	2020      	moveq	r0, #32
 800db94:	4770      	bx	lr

0800db96 <__lo0bits>:
 800db96:	6803      	ldr	r3, [r0, #0]
 800db98:	4602      	mov	r2, r0
 800db9a:	f013 0007 	ands.w	r0, r3, #7
 800db9e:	d00b      	beq.n	800dbb8 <__lo0bits+0x22>
 800dba0:	07d9      	lsls	r1, r3, #31
 800dba2:	d421      	bmi.n	800dbe8 <__lo0bits+0x52>
 800dba4:	0798      	lsls	r0, r3, #30
 800dba6:	bf49      	itett	mi
 800dba8:	085b      	lsrmi	r3, r3, #1
 800dbaa:	089b      	lsrpl	r3, r3, #2
 800dbac:	2001      	movmi	r0, #1
 800dbae:	6013      	strmi	r3, [r2, #0]
 800dbb0:	bf5c      	itt	pl
 800dbb2:	6013      	strpl	r3, [r2, #0]
 800dbb4:	2002      	movpl	r0, #2
 800dbb6:	4770      	bx	lr
 800dbb8:	b299      	uxth	r1, r3
 800dbba:	b909      	cbnz	r1, 800dbc0 <__lo0bits+0x2a>
 800dbbc:	0c1b      	lsrs	r3, r3, #16
 800dbbe:	2010      	movs	r0, #16
 800dbc0:	b2d9      	uxtb	r1, r3
 800dbc2:	b909      	cbnz	r1, 800dbc8 <__lo0bits+0x32>
 800dbc4:	3008      	adds	r0, #8
 800dbc6:	0a1b      	lsrs	r3, r3, #8
 800dbc8:	0719      	lsls	r1, r3, #28
 800dbca:	bf04      	itt	eq
 800dbcc:	091b      	lsreq	r3, r3, #4
 800dbce:	3004      	addeq	r0, #4
 800dbd0:	0799      	lsls	r1, r3, #30
 800dbd2:	bf04      	itt	eq
 800dbd4:	089b      	lsreq	r3, r3, #2
 800dbd6:	3002      	addeq	r0, #2
 800dbd8:	07d9      	lsls	r1, r3, #31
 800dbda:	d403      	bmi.n	800dbe4 <__lo0bits+0x4e>
 800dbdc:	085b      	lsrs	r3, r3, #1
 800dbde:	f100 0001 	add.w	r0, r0, #1
 800dbe2:	d003      	beq.n	800dbec <__lo0bits+0x56>
 800dbe4:	6013      	str	r3, [r2, #0]
 800dbe6:	4770      	bx	lr
 800dbe8:	2000      	movs	r0, #0
 800dbea:	4770      	bx	lr
 800dbec:	2020      	movs	r0, #32
 800dbee:	4770      	bx	lr

0800dbf0 <__i2b>:
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	f7ff febd 	bl	800d974 <_Balloc>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	b928      	cbnz	r0, 800dc0a <__i2b+0x1a>
 800dbfe:	4b05      	ldr	r3, [pc, #20]	@ (800dc14 <__i2b+0x24>)
 800dc00:	4805      	ldr	r0, [pc, #20]	@ (800dc18 <__i2b+0x28>)
 800dc02:	f240 1145 	movw	r1, #325	@ 0x145
 800dc06:	f001 fbef 	bl	800f3e8 <__assert_func>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	6144      	str	r4, [r0, #20]
 800dc0e:	6103      	str	r3, [r0, #16]
 800dc10:	bd10      	pop	{r4, pc}
 800dc12:	bf00      	nop
 800dc14:	08010735 	.word	0x08010735
 800dc18:	08010746 	.word	0x08010746

0800dc1c <__multiply>:
 800dc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc20:	4614      	mov	r4, r2
 800dc22:	690a      	ldr	r2, [r1, #16]
 800dc24:	6923      	ldr	r3, [r4, #16]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	bfa8      	it	ge
 800dc2a:	4623      	movge	r3, r4
 800dc2c:	460f      	mov	r7, r1
 800dc2e:	bfa4      	itt	ge
 800dc30:	460c      	movge	r4, r1
 800dc32:	461f      	movge	r7, r3
 800dc34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dc38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dc3c:	68a3      	ldr	r3, [r4, #8]
 800dc3e:	6861      	ldr	r1, [r4, #4]
 800dc40:	eb0a 0609 	add.w	r6, sl, r9
 800dc44:	42b3      	cmp	r3, r6
 800dc46:	b085      	sub	sp, #20
 800dc48:	bfb8      	it	lt
 800dc4a:	3101      	addlt	r1, #1
 800dc4c:	f7ff fe92 	bl	800d974 <_Balloc>
 800dc50:	b930      	cbnz	r0, 800dc60 <__multiply+0x44>
 800dc52:	4602      	mov	r2, r0
 800dc54:	4b44      	ldr	r3, [pc, #272]	@ (800dd68 <__multiply+0x14c>)
 800dc56:	4845      	ldr	r0, [pc, #276]	@ (800dd6c <__multiply+0x150>)
 800dc58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc5c:	f001 fbc4 	bl	800f3e8 <__assert_func>
 800dc60:	f100 0514 	add.w	r5, r0, #20
 800dc64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc68:	462b      	mov	r3, r5
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	4543      	cmp	r3, r8
 800dc6e:	d321      	bcc.n	800dcb4 <__multiply+0x98>
 800dc70:	f107 0114 	add.w	r1, r7, #20
 800dc74:	f104 0214 	add.w	r2, r4, #20
 800dc78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dc7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dc80:	9302      	str	r3, [sp, #8]
 800dc82:	1b13      	subs	r3, r2, r4
 800dc84:	3b15      	subs	r3, #21
 800dc86:	f023 0303 	bic.w	r3, r3, #3
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	f104 0715 	add.w	r7, r4, #21
 800dc90:	42ba      	cmp	r2, r7
 800dc92:	bf38      	it	cc
 800dc94:	2304      	movcc	r3, #4
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	9b02      	ldr	r3, [sp, #8]
 800dc9a:	9103      	str	r1, [sp, #12]
 800dc9c:	428b      	cmp	r3, r1
 800dc9e:	d80c      	bhi.n	800dcba <__multiply+0x9e>
 800dca0:	2e00      	cmp	r6, #0
 800dca2:	dd03      	ble.n	800dcac <__multiply+0x90>
 800dca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d05b      	beq.n	800dd64 <__multiply+0x148>
 800dcac:	6106      	str	r6, [r0, #16]
 800dcae:	b005      	add	sp, #20
 800dcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb4:	f843 2b04 	str.w	r2, [r3], #4
 800dcb8:	e7d8      	b.n	800dc6c <__multiply+0x50>
 800dcba:	f8b1 a000 	ldrh.w	sl, [r1]
 800dcbe:	f1ba 0f00 	cmp.w	sl, #0
 800dcc2:	d024      	beq.n	800dd0e <__multiply+0xf2>
 800dcc4:	f104 0e14 	add.w	lr, r4, #20
 800dcc8:	46a9      	mov	r9, r5
 800dcca:	f04f 0c00 	mov.w	ip, #0
 800dcce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcd2:	f8d9 3000 	ldr.w	r3, [r9]
 800dcd6:	fa1f fb87 	uxth.w	fp, r7
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	fb0a 330b 	mla	r3, sl, fp, r3
 800dce0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dce4:	f8d9 7000 	ldr.w	r7, [r9]
 800dce8:	4463      	add	r3, ip
 800dcea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dcee:	fb0a c70b 	mla	r7, sl, fp, ip
 800dcf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dcfc:	4572      	cmp	r2, lr
 800dcfe:	f849 3b04 	str.w	r3, [r9], #4
 800dd02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd06:	d8e2      	bhi.n	800dcce <__multiply+0xb2>
 800dd08:	9b01      	ldr	r3, [sp, #4]
 800dd0a:	f845 c003 	str.w	ip, [r5, r3]
 800dd0e:	9b03      	ldr	r3, [sp, #12]
 800dd10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd14:	3104      	adds	r1, #4
 800dd16:	f1b9 0f00 	cmp.w	r9, #0
 800dd1a:	d021      	beq.n	800dd60 <__multiply+0x144>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	f104 0c14 	add.w	ip, r4, #20
 800dd22:	46ae      	mov	lr, r5
 800dd24:	f04f 0a00 	mov.w	sl, #0
 800dd28:	f8bc b000 	ldrh.w	fp, [ip]
 800dd2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dd30:	fb09 770b 	mla	r7, r9, fp, r7
 800dd34:	4457      	add	r7, sl
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd3c:	f84e 3b04 	str.w	r3, [lr], #4
 800dd40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd48:	f8be 3000 	ldrh.w	r3, [lr]
 800dd4c:	fb09 330a 	mla	r3, r9, sl, r3
 800dd50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dd54:	4562      	cmp	r2, ip
 800dd56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd5a:	d8e5      	bhi.n	800dd28 <__multiply+0x10c>
 800dd5c:	9f01      	ldr	r7, [sp, #4]
 800dd5e:	51eb      	str	r3, [r5, r7]
 800dd60:	3504      	adds	r5, #4
 800dd62:	e799      	b.n	800dc98 <__multiply+0x7c>
 800dd64:	3e01      	subs	r6, #1
 800dd66:	e79b      	b.n	800dca0 <__multiply+0x84>
 800dd68:	08010735 	.word	0x08010735
 800dd6c:	08010746 	.word	0x08010746

0800dd70 <__pow5mult>:
 800dd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd74:	4615      	mov	r5, r2
 800dd76:	f012 0203 	ands.w	r2, r2, #3
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	460e      	mov	r6, r1
 800dd7e:	d007      	beq.n	800dd90 <__pow5mult+0x20>
 800dd80:	4c25      	ldr	r4, [pc, #148]	@ (800de18 <__pow5mult+0xa8>)
 800dd82:	3a01      	subs	r2, #1
 800dd84:	2300      	movs	r3, #0
 800dd86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd8a:	f7ff fe55 	bl	800da38 <__multadd>
 800dd8e:	4606      	mov	r6, r0
 800dd90:	10ad      	asrs	r5, r5, #2
 800dd92:	d03d      	beq.n	800de10 <__pow5mult+0xa0>
 800dd94:	69fc      	ldr	r4, [r7, #28]
 800dd96:	b97c      	cbnz	r4, 800ddb8 <__pow5mult+0x48>
 800dd98:	2010      	movs	r0, #16
 800dd9a:	f7ff fd35 	bl	800d808 <malloc>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	61f8      	str	r0, [r7, #28]
 800dda2:	b928      	cbnz	r0, 800ddb0 <__pow5mult+0x40>
 800dda4:	4b1d      	ldr	r3, [pc, #116]	@ (800de1c <__pow5mult+0xac>)
 800dda6:	481e      	ldr	r0, [pc, #120]	@ (800de20 <__pow5mult+0xb0>)
 800dda8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ddac:	f001 fb1c 	bl	800f3e8 <__assert_func>
 800ddb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddb4:	6004      	str	r4, [r0, #0]
 800ddb6:	60c4      	str	r4, [r0, #12]
 800ddb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ddbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddc0:	b94c      	cbnz	r4, 800ddd6 <__pow5mult+0x66>
 800ddc2:	f240 2171 	movw	r1, #625	@ 0x271
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	f7ff ff12 	bl	800dbf0 <__i2b>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	6003      	str	r3, [r0, #0]
 800ddd6:	f04f 0900 	mov.w	r9, #0
 800ddda:	07eb      	lsls	r3, r5, #31
 800dddc:	d50a      	bpl.n	800ddf4 <__pow5mult+0x84>
 800ddde:	4631      	mov	r1, r6
 800dde0:	4622      	mov	r2, r4
 800dde2:	4638      	mov	r0, r7
 800dde4:	f7ff ff1a 	bl	800dc1c <__multiply>
 800dde8:	4631      	mov	r1, r6
 800ddea:	4680      	mov	r8, r0
 800ddec:	4638      	mov	r0, r7
 800ddee:	f7ff fe01 	bl	800d9f4 <_Bfree>
 800ddf2:	4646      	mov	r6, r8
 800ddf4:	106d      	asrs	r5, r5, #1
 800ddf6:	d00b      	beq.n	800de10 <__pow5mult+0xa0>
 800ddf8:	6820      	ldr	r0, [r4, #0]
 800ddfa:	b938      	cbnz	r0, 800de0c <__pow5mult+0x9c>
 800ddfc:	4622      	mov	r2, r4
 800ddfe:	4621      	mov	r1, r4
 800de00:	4638      	mov	r0, r7
 800de02:	f7ff ff0b 	bl	800dc1c <__multiply>
 800de06:	6020      	str	r0, [r4, #0]
 800de08:	f8c0 9000 	str.w	r9, [r0]
 800de0c:	4604      	mov	r4, r0
 800de0e:	e7e4      	b.n	800ddda <__pow5mult+0x6a>
 800de10:	4630      	mov	r0, r6
 800de12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de16:	bf00      	nop
 800de18:	080107a0 	.word	0x080107a0
 800de1c:	080106c6 	.word	0x080106c6
 800de20:	08010746 	.word	0x08010746

0800de24 <__lshift>:
 800de24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de28:	460c      	mov	r4, r1
 800de2a:	6849      	ldr	r1, [r1, #4]
 800de2c:	6923      	ldr	r3, [r4, #16]
 800de2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de32:	68a3      	ldr	r3, [r4, #8]
 800de34:	4607      	mov	r7, r0
 800de36:	4691      	mov	r9, r2
 800de38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de3c:	f108 0601 	add.w	r6, r8, #1
 800de40:	42b3      	cmp	r3, r6
 800de42:	db0b      	blt.n	800de5c <__lshift+0x38>
 800de44:	4638      	mov	r0, r7
 800de46:	f7ff fd95 	bl	800d974 <_Balloc>
 800de4a:	4605      	mov	r5, r0
 800de4c:	b948      	cbnz	r0, 800de62 <__lshift+0x3e>
 800de4e:	4602      	mov	r2, r0
 800de50:	4b28      	ldr	r3, [pc, #160]	@ (800def4 <__lshift+0xd0>)
 800de52:	4829      	ldr	r0, [pc, #164]	@ (800def8 <__lshift+0xd4>)
 800de54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de58:	f001 fac6 	bl	800f3e8 <__assert_func>
 800de5c:	3101      	adds	r1, #1
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	e7ee      	b.n	800de40 <__lshift+0x1c>
 800de62:	2300      	movs	r3, #0
 800de64:	f100 0114 	add.w	r1, r0, #20
 800de68:	f100 0210 	add.w	r2, r0, #16
 800de6c:	4618      	mov	r0, r3
 800de6e:	4553      	cmp	r3, sl
 800de70:	db33      	blt.n	800deda <__lshift+0xb6>
 800de72:	6920      	ldr	r0, [r4, #16]
 800de74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de78:	f104 0314 	add.w	r3, r4, #20
 800de7c:	f019 091f 	ands.w	r9, r9, #31
 800de80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de88:	d02b      	beq.n	800dee2 <__lshift+0xbe>
 800de8a:	f1c9 0e20 	rsb	lr, r9, #32
 800de8e:	468a      	mov	sl, r1
 800de90:	2200      	movs	r2, #0
 800de92:	6818      	ldr	r0, [r3, #0]
 800de94:	fa00 f009 	lsl.w	r0, r0, r9
 800de98:	4310      	orrs	r0, r2
 800de9a:	f84a 0b04 	str.w	r0, [sl], #4
 800de9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dea2:	459c      	cmp	ip, r3
 800dea4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dea8:	d8f3      	bhi.n	800de92 <__lshift+0x6e>
 800deaa:	ebac 0304 	sub.w	r3, ip, r4
 800deae:	3b15      	subs	r3, #21
 800deb0:	f023 0303 	bic.w	r3, r3, #3
 800deb4:	3304      	adds	r3, #4
 800deb6:	f104 0015 	add.w	r0, r4, #21
 800deba:	4584      	cmp	ip, r0
 800debc:	bf38      	it	cc
 800debe:	2304      	movcc	r3, #4
 800dec0:	50ca      	str	r2, [r1, r3]
 800dec2:	b10a      	cbz	r2, 800dec8 <__lshift+0xa4>
 800dec4:	f108 0602 	add.w	r6, r8, #2
 800dec8:	3e01      	subs	r6, #1
 800deca:	4638      	mov	r0, r7
 800decc:	612e      	str	r6, [r5, #16]
 800dece:	4621      	mov	r1, r4
 800ded0:	f7ff fd90 	bl	800d9f4 <_Bfree>
 800ded4:	4628      	mov	r0, r5
 800ded6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deda:	f842 0f04 	str.w	r0, [r2, #4]!
 800dede:	3301      	adds	r3, #1
 800dee0:	e7c5      	b.n	800de6e <__lshift+0x4a>
 800dee2:	3904      	subs	r1, #4
 800dee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee8:	f841 2f04 	str.w	r2, [r1, #4]!
 800deec:	459c      	cmp	ip, r3
 800deee:	d8f9      	bhi.n	800dee4 <__lshift+0xc0>
 800def0:	e7ea      	b.n	800dec8 <__lshift+0xa4>
 800def2:	bf00      	nop
 800def4:	08010735 	.word	0x08010735
 800def8:	08010746 	.word	0x08010746

0800defc <__mcmp>:
 800defc:	690a      	ldr	r2, [r1, #16]
 800defe:	4603      	mov	r3, r0
 800df00:	6900      	ldr	r0, [r0, #16]
 800df02:	1a80      	subs	r0, r0, r2
 800df04:	b530      	push	{r4, r5, lr}
 800df06:	d10e      	bne.n	800df26 <__mcmp+0x2a>
 800df08:	3314      	adds	r3, #20
 800df0a:	3114      	adds	r1, #20
 800df0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df1c:	4295      	cmp	r5, r2
 800df1e:	d003      	beq.n	800df28 <__mcmp+0x2c>
 800df20:	d205      	bcs.n	800df2e <__mcmp+0x32>
 800df22:	f04f 30ff 	mov.w	r0, #4294967295
 800df26:	bd30      	pop	{r4, r5, pc}
 800df28:	42a3      	cmp	r3, r4
 800df2a:	d3f3      	bcc.n	800df14 <__mcmp+0x18>
 800df2c:	e7fb      	b.n	800df26 <__mcmp+0x2a>
 800df2e:	2001      	movs	r0, #1
 800df30:	e7f9      	b.n	800df26 <__mcmp+0x2a>
	...

0800df34 <__mdiff>:
 800df34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df38:	4689      	mov	r9, r1
 800df3a:	4606      	mov	r6, r0
 800df3c:	4611      	mov	r1, r2
 800df3e:	4648      	mov	r0, r9
 800df40:	4614      	mov	r4, r2
 800df42:	f7ff ffdb 	bl	800defc <__mcmp>
 800df46:	1e05      	subs	r5, r0, #0
 800df48:	d112      	bne.n	800df70 <__mdiff+0x3c>
 800df4a:	4629      	mov	r1, r5
 800df4c:	4630      	mov	r0, r6
 800df4e:	f7ff fd11 	bl	800d974 <_Balloc>
 800df52:	4602      	mov	r2, r0
 800df54:	b928      	cbnz	r0, 800df62 <__mdiff+0x2e>
 800df56:	4b3f      	ldr	r3, [pc, #252]	@ (800e054 <__mdiff+0x120>)
 800df58:	f240 2137 	movw	r1, #567	@ 0x237
 800df5c:	483e      	ldr	r0, [pc, #248]	@ (800e058 <__mdiff+0x124>)
 800df5e:	f001 fa43 	bl	800f3e8 <__assert_func>
 800df62:	2301      	movs	r3, #1
 800df64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df68:	4610      	mov	r0, r2
 800df6a:	b003      	add	sp, #12
 800df6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df70:	bfbc      	itt	lt
 800df72:	464b      	movlt	r3, r9
 800df74:	46a1      	movlt	r9, r4
 800df76:	4630      	mov	r0, r6
 800df78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df7c:	bfba      	itte	lt
 800df7e:	461c      	movlt	r4, r3
 800df80:	2501      	movlt	r5, #1
 800df82:	2500      	movge	r5, #0
 800df84:	f7ff fcf6 	bl	800d974 <_Balloc>
 800df88:	4602      	mov	r2, r0
 800df8a:	b918      	cbnz	r0, 800df94 <__mdiff+0x60>
 800df8c:	4b31      	ldr	r3, [pc, #196]	@ (800e054 <__mdiff+0x120>)
 800df8e:	f240 2145 	movw	r1, #581	@ 0x245
 800df92:	e7e3      	b.n	800df5c <__mdiff+0x28>
 800df94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df98:	6926      	ldr	r6, [r4, #16]
 800df9a:	60c5      	str	r5, [r0, #12]
 800df9c:	f109 0310 	add.w	r3, r9, #16
 800dfa0:	f109 0514 	add.w	r5, r9, #20
 800dfa4:	f104 0e14 	add.w	lr, r4, #20
 800dfa8:	f100 0b14 	add.w	fp, r0, #20
 800dfac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dfb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	46d9      	mov	r9, fp
 800dfb8:	f04f 0c00 	mov.w	ip, #0
 800dfbc:	9b01      	ldr	r3, [sp, #4]
 800dfbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dfc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dfc6:	9301      	str	r3, [sp, #4]
 800dfc8:	fa1f f38a 	uxth.w	r3, sl
 800dfcc:	4619      	mov	r1, r3
 800dfce:	b283      	uxth	r3, r0
 800dfd0:	1acb      	subs	r3, r1, r3
 800dfd2:	0c00      	lsrs	r0, r0, #16
 800dfd4:	4463      	add	r3, ip
 800dfd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dfda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dfe4:	4576      	cmp	r6, lr
 800dfe6:	f849 3b04 	str.w	r3, [r9], #4
 800dfea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfee:	d8e5      	bhi.n	800dfbc <__mdiff+0x88>
 800dff0:	1b33      	subs	r3, r6, r4
 800dff2:	3b15      	subs	r3, #21
 800dff4:	f023 0303 	bic.w	r3, r3, #3
 800dff8:	3415      	adds	r4, #21
 800dffa:	3304      	adds	r3, #4
 800dffc:	42a6      	cmp	r6, r4
 800dffe:	bf38      	it	cc
 800e000:	2304      	movcc	r3, #4
 800e002:	441d      	add	r5, r3
 800e004:	445b      	add	r3, fp
 800e006:	461e      	mov	r6, r3
 800e008:	462c      	mov	r4, r5
 800e00a:	4544      	cmp	r4, r8
 800e00c:	d30e      	bcc.n	800e02c <__mdiff+0xf8>
 800e00e:	f108 0103 	add.w	r1, r8, #3
 800e012:	1b49      	subs	r1, r1, r5
 800e014:	f021 0103 	bic.w	r1, r1, #3
 800e018:	3d03      	subs	r5, #3
 800e01a:	45a8      	cmp	r8, r5
 800e01c:	bf38      	it	cc
 800e01e:	2100      	movcc	r1, #0
 800e020:	440b      	add	r3, r1
 800e022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e026:	b191      	cbz	r1, 800e04e <__mdiff+0x11a>
 800e028:	6117      	str	r7, [r2, #16]
 800e02a:	e79d      	b.n	800df68 <__mdiff+0x34>
 800e02c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e030:	46e6      	mov	lr, ip
 800e032:	0c08      	lsrs	r0, r1, #16
 800e034:	fa1c fc81 	uxtah	ip, ip, r1
 800e038:	4471      	add	r1, lr
 800e03a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e03e:	b289      	uxth	r1, r1
 800e040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e044:	f846 1b04 	str.w	r1, [r6], #4
 800e048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e04c:	e7dd      	b.n	800e00a <__mdiff+0xd6>
 800e04e:	3f01      	subs	r7, #1
 800e050:	e7e7      	b.n	800e022 <__mdiff+0xee>
 800e052:	bf00      	nop
 800e054:	08010735 	.word	0x08010735
 800e058:	08010746 	.word	0x08010746

0800e05c <__ulp>:
 800e05c:	b082      	sub	sp, #8
 800e05e:	ed8d 0b00 	vstr	d0, [sp]
 800e062:	9a01      	ldr	r2, [sp, #4]
 800e064:	4b0f      	ldr	r3, [pc, #60]	@ (800e0a4 <__ulp+0x48>)
 800e066:	4013      	ands	r3, r2
 800e068:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	dc08      	bgt.n	800e082 <__ulp+0x26>
 800e070:	425b      	negs	r3, r3
 800e072:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e076:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e07a:	da04      	bge.n	800e086 <__ulp+0x2a>
 800e07c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e080:	4113      	asrs	r3, r2
 800e082:	2200      	movs	r2, #0
 800e084:	e008      	b.n	800e098 <__ulp+0x3c>
 800e086:	f1a2 0314 	sub.w	r3, r2, #20
 800e08a:	2b1e      	cmp	r3, #30
 800e08c:	bfda      	itte	le
 800e08e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e092:	40da      	lsrle	r2, r3
 800e094:	2201      	movgt	r2, #1
 800e096:	2300      	movs	r3, #0
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	ec41 0b10 	vmov	d0, r0, r1
 800e0a0:	b002      	add	sp, #8
 800e0a2:	4770      	bx	lr
 800e0a4:	7ff00000 	.word	0x7ff00000

0800e0a8 <__b2d>:
 800e0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ac:	6906      	ldr	r6, [r0, #16]
 800e0ae:	f100 0814 	add.w	r8, r0, #20
 800e0b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e0b6:	1f37      	subs	r7, r6, #4
 800e0b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e0bc:	4610      	mov	r0, r2
 800e0be:	f7ff fd4b 	bl	800db58 <__hi0bits>
 800e0c2:	f1c0 0320 	rsb	r3, r0, #32
 800e0c6:	280a      	cmp	r0, #10
 800e0c8:	600b      	str	r3, [r1, #0]
 800e0ca:	491b      	ldr	r1, [pc, #108]	@ (800e138 <__b2d+0x90>)
 800e0cc:	dc15      	bgt.n	800e0fa <__b2d+0x52>
 800e0ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800e0d2:	fa22 f30c 	lsr.w	r3, r2, ip
 800e0d6:	45b8      	cmp	r8, r7
 800e0d8:	ea43 0501 	orr.w	r5, r3, r1
 800e0dc:	bf34      	ite	cc
 800e0de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0e2:	2300      	movcs	r3, #0
 800e0e4:	3015      	adds	r0, #21
 800e0e6:	fa02 f000 	lsl.w	r0, r2, r0
 800e0ea:	fa23 f30c 	lsr.w	r3, r3, ip
 800e0ee:	4303      	orrs	r3, r0
 800e0f0:	461c      	mov	r4, r3
 800e0f2:	ec45 4b10 	vmov	d0, r4, r5
 800e0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0fa:	45b8      	cmp	r8, r7
 800e0fc:	bf3a      	itte	cc
 800e0fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e102:	f1a6 0708 	subcc.w	r7, r6, #8
 800e106:	2300      	movcs	r3, #0
 800e108:	380b      	subs	r0, #11
 800e10a:	d012      	beq.n	800e132 <__b2d+0x8a>
 800e10c:	f1c0 0120 	rsb	r1, r0, #32
 800e110:	fa23 f401 	lsr.w	r4, r3, r1
 800e114:	4082      	lsls	r2, r0
 800e116:	4322      	orrs	r2, r4
 800e118:	4547      	cmp	r7, r8
 800e11a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e11e:	bf8c      	ite	hi
 800e120:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e124:	2200      	movls	r2, #0
 800e126:	4083      	lsls	r3, r0
 800e128:	40ca      	lsrs	r2, r1
 800e12a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e12e:	4313      	orrs	r3, r2
 800e130:	e7de      	b.n	800e0f0 <__b2d+0x48>
 800e132:	ea42 0501 	orr.w	r5, r2, r1
 800e136:	e7db      	b.n	800e0f0 <__b2d+0x48>
 800e138:	3ff00000 	.word	0x3ff00000

0800e13c <__d2b>:
 800e13c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e140:	460f      	mov	r7, r1
 800e142:	2101      	movs	r1, #1
 800e144:	ec59 8b10 	vmov	r8, r9, d0
 800e148:	4616      	mov	r6, r2
 800e14a:	f7ff fc13 	bl	800d974 <_Balloc>
 800e14e:	4604      	mov	r4, r0
 800e150:	b930      	cbnz	r0, 800e160 <__d2b+0x24>
 800e152:	4602      	mov	r2, r0
 800e154:	4b23      	ldr	r3, [pc, #140]	@ (800e1e4 <__d2b+0xa8>)
 800e156:	4824      	ldr	r0, [pc, #144]	@ (800e1e8 <__d2b+0xac>)
 800e158:	f240 310f 	movw	r1, #783	@ 0x30f
 800e15c:	f001 f944 	bl	800f3e8 <__assert_func>
 800e160:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e164:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e168:	b10d      	cbz	r5, 800e16e <__d2b+0x32>
 800e16a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e16e:	9301      	str	r3, [sp, #4]
 800e170:	f1b8 0300 	subs.w	r3, r8, #0
 800e174:	d023      	beq.n	800e1be <__d2b+0x82>
 800e176:	4668      	mov	r0, sp
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	f7ff fd0c 	bl	800db96 <__lo0bits>
 800e17e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e182:	b1d0      	cbz	r0, 800e1ba <__d2b+0x7e>
 800e184:	f1c0 0320 	rsb	r3, r0, #32
 800e188:	fa02 f303 	lsl.w	r3, r2, r3
 800e18c:	430b      	orrs	r3, r1
 800e18e:	40c2      	lsrs	r2, r0
 800e190:	6163      	str	r3, [r4, #20]
 800e192:	9201      	str	r2, [sp, #4]
 800e194:	9b01      	ldr	r3, [sp, #4]
 800e196:	61a3      	str	r3, [r4, #24]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	bf0c      	ite	eq
 800e19c:	2201      	moveq	r2, #1
 800e19e:	2202      	movne	r2, #2
 800e1a0:	6122      	str	r2, [r4, #16]
 800e1a2:	b1a5      	cbz	r5, 800e1ce <__d2b+0x92>
 800e1a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e1a8:	4405      	add	r5, r0
 800e1aa:	603d      	str	r5, [r7, #0]
 800e1ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e1b0:	6030      	str	r0, [r6, #0]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	b003      	add	sp, #12
 800e1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ba:	6161      	str	r1, [r4, #20]
 800e1bc:	e7ea      	b.n	800e194 <__d2b+0x58>
 800e1be:	a801      	add	r0, sp, #4
 800e1c0:	f7ff fce9 	bl	800db96 <__lo0bits>
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	6163      	str	r3, [r4, #20]
 800e1c8:	3020      	adds	r0, #32
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	e7e8      	b.n	800e1a0 <__d2b+0x64>
 800e1ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e1d6:	6038      	str	r0, [r7, #0]
 800e1d8:	6918      	ldr	r0, [r3, #16]
 800e1da:	f7ff fcbd 	bl	800db58 <__hi0bits>
 800e1de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1e2:	e7e5      	b.n	800e1b0 <__d2b+0x74>
 800e1e4:	08010735 	.word	0x08010735
 800e1e8:	08010746 	.word	0x08010746

0800e1ec <__ratio>:
 800e1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f0:	4688      	mov	r8, r1
 800e1f2:	4669      	mov	r1, sp
 800e1f4:	4681      	mov	r9, r0
 800e1f6:	f7ff ff57 	bl	800e0a8 <__b2d>
 800e1fa:	a901      	add	r1, sp, #4
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	ec55 4b10 	vmov	r4, r5, d0
 800e202:	f7ff ff51 	bl	800e0a8 <__b2d>
 800e206:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e20a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e20e:	1ad2      	subs	r2, r2, r3
 800e210:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e214:	1a5b      	subs	r3, r3, r1
 800e216:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800e21a:	ec57 6b10 	vmov	r6, r7, d0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	bfd6      	itet	le
 800e222:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e226:	462a      	movgt	r2, r5
 800e228:	463a      	movle	r2, r7
 800e22a:	46ab      	mov	fp, r5
 800e22c:	46a2      	mov	sl, r4
 800e22e:	bfce      	itee	gt
 800e230:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e234:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e238:	ee00 3a90 	vmovle	s1, r3
 800e23c:	ec4b ab17 	vmov	d7, sl, fp
 800e240:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e244:	b003      	add	sp, #12
 800e246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e24a <__copybits>:
 800e24a:	3901      	subs	r1, #1
 800e24c:	b570      	push	{r4, r5, r6, lr}
 800e24e:	1149      	asrs	r1, r1, #5
 800e250:	6914      	ldr	r4, [r2, #16]
 800e252:	3101      	adds	r1, #1
 800e254:	f102 0314 	add.w	r3, r2, #20
 800e258:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e25c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e260:	1f05      	subs	r5, r0, #4
 800e262:	42a3      	cmp	r3, r4
 800e264:	d30c      	bcc.n	800e280 <__copybits+0x36>
 800e266:	1aa3      	subs	r3, r4, r2
 800e268:	3b11      	subs	r3, #17
 800e26a:	f023 0303 	bic.w	r3, r3, #3
 800e26e:	3211      	adds	r2, #17
 800e270:	42a2      	cmp	r2, r4
 800e272:	bf88      	it	hi
 800e274:	2300      	movhi	r3, #0
 800e276:	4418      	add	r0, r3
 800e278:	2300      	movs	r3, #0
 800e27a:	4288      	cmp	r0, r1
 800e27c:	d305      	bcc.n	800e28a <__copybits+0x40>
 800e27e:	bd70      	pop	{r4, r5, r6, pc}
 800e280:	f853 6b04 	ldr.w	r6, [r3], #4
 800e284:	f845 6f04 	str.w	r6, [r5, #4]!
 800e288:	e7eb      	b.n	800e262 <__copybits+0x18>
 800e28a:	f840 3b04 	str.w	r3, [r0], #4
 800e28e:	e7f4      	b.n	800e27a <__copybits+0x30>

0800e290 <__any_on>:
 800e290:	f100 0214 	add.w	r2, r0, #20
 800e294:	6900      	ldr	r0, [r0, #16]
 800e296:	114b      	asrs	r3, r1, #5
 800e298:	4298      	cmp	r0, r3
 800e29a:	b510      	push	{r4, lr}
 800e29c:	db11      	blt.n	800e2c2 <__any_on+0x32>
 800e29e:	dd0a      	ble.n	800e2b6 <__any_on+0x26>
 800e2a0:	f011 011f 	ands.w	r1, r1, #31
 800e2a4:	d007      	beq.n	800e2b6 <__any_on+0x26>
 800e2a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2aa:	fa24 f001 	lsr.w	r0, r4, r1
 800e2ae:	fa00 f101 	lsl.w	r1, r0, r1
 800e2b2:	428c      	cmp	r4, r1
 800e2b4:	d10b      	bne.n	800e2ce <__any_on+0x3e>
 800e2b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d803      	bhi.n	800e2c6 <__any_on+0x36>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	bd10      	pop	{r4, pc}
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	e7f7      	b.n	800e2b6 <__any_on+0x26>
 800e2c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2ca:	2900      	cmp	r1, #0
 800e2cc:	d0f5      	beq.n	800e2ba <__any_on+0x2a>
 800e2ce:	2001      	movs	r0, #1
 800e2d0:	e7f6      	b.n	800e2c0 <__any_on+0x30>

0800e2d2 <sulp>:
 800e2d2:	b570      	push	{r4, r5, r6, lr}
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	460d      	mov	r5, r1
 800e2d8:	4616      	mov	r6, r2
 800e2da:	ec45 4b10 	vmov	d0, r4, r5
 800e2de:	f7ff febd 	bl	800e05c <__ulp>
 800e2e2:	b17e      	cbz	r6, 800e304 <sulp+0x32>
 800e2e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e2e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dd09      	ble.n	800e304 <sulp+0x32>
 800e2f0:	051b      	lsls	r3, r3, #20
 800e2f2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e2fc:	ec41 0b17 	vmov	d7, r0, r1
 800e300:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e304:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e308 <_strtod_l>:
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	ed2d 8b0a 	vpush	{d8-d12}
 800e310:	b097      	sub	sp, #92	@ 0x5c
 800e312:	4688      	mov	r8, r1
 800e314:	920e      	str	r2, [sp, #56]	@ 0x38
 800e316:	2200      	movs	r2, #0
 800e318:	9212      	str	r2, [sp, #72]	@ 0x48
 800e31a:	9005      	str	r0, [sp, #20]
 800e31c:	f04f 0a00 	mov.w	sl, #0
 800e320:	f04f 0b00 	mov.w	fp, #0
 800e324:	460a      	mov	r2, r1
 800e326:	9211      	str	r2, [sp, #68]	@ 0x44
 800e328:	7811      	ldrb	r1, [r2, #0]
 800e32a:	292b      	cmp	r1, #43	@ 0x2b
 800e32c:	d04c      	beq.n	800e3c8 <_strtod_l+0xc0>
 800e32e:	d839      	bhi.n	800e3a4 <_strtod_l+0x9c>
 800e330:	290d      	cmp	r1, #13
 800e332:	d833      	bhi.n	800e39c <_strtod_l+0x94>
 800e334:	2908      	cmp	r1, #8
 800e336:	d833      	bhi.n	800e3a0 <_strtod_l+0x98>
 800e338:	2900      	cmp	r1, #0
 800e33a:	d03c      	beq.n	800e3b6 <_strtod_l+0xae>
 800e33c:	2200      	movs	r2, #0
 800e33e:	9208      	str	r2, [sp, #32]
 800e340:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e342:	782a      	ldrb	r2, [r5, #0]
 800e344:	2a30      	cmp	r2, #48	@ 0x30
 800e346:	f040 80b5 	bne.w	800e4b4 <_strtod_l+0x1ac>
 800e34a:	786a      	ldrb	r2, [r5, #1]
 800e34c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e350:	2a58      	cmp	r2, #88	@ 0x58
 800e352:	d170      	bne.n	800e436 <_strtod_l+0x12e>
 800e354:	9302      	str	r3, [sp, #8]
 800e356:	9b08      	ldr	r3, [sp, #32]
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	ab12      	add	r3, sp, #72	@ 0x48
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	4a8b      	ldr	r2, [pc, #556]	@ (800e58c <_strtod_l+0x284>)
 800e360:	9805      	ldr	r0, [sp, #20]
 800e362:	ab13      	add	r3, sp, #76	@ 0x4c
 800e364:	a911      	add	r1, sp, #68	@ 0x44
 800e366:	f001 f8d9 	bl	800f51c <__gethex>
 800e36a:	f010 060f 	ands.w	r6, r0, #15
 800e36e:	4604      	mov	r4, r0
 800e370:	d005      	beq.n	800e37e <_strtod_l+0x76>
 800e372:	2e06      	cmp	r6, #6
 800e374:	d12a      	bne.n	800e3cc <_strtod_l+0xc4>
 800e376:	3501      	adds	r5, #1
 800e378:	2300      	movs	r3, #0
 800e37a:	9511      	str	r5, [sp, #68]	@ 0x44
 800e37c:	9308      	str	r3, [sp, #32]
 800e37e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e380:	2b00      	cmp	r3, #0
 800e382:	f040 852f 	bne.w	800ede4 <_strtod_l+0xadc>
 800e386:	9b08      	ldr	r3, [sp, #32]
 800e388:	ec4b ab10 	vmov	d0, sl, fp
 800e38c:	b1cb      	cbz	r3, 800e3c2 <_strtod_l+0xba>
 800e38e:	eeb1 0b40 	vneg.f64	d0, d0
 800e392:	b017      	add	sp, #92	@ 0x5c
 800e394:	ecbd 8b0a 	vpop	{d8-d12}
 800e398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39c:	2920      	cmp	r1, #32
 800e39e:	d1cd      	bne.n	800e33c <_strtod_l+0x34>
 800e3a0:	3201      	adds	r2, #1
 800e3a2:	e7c0      	b.n	800e326 <_strtod_l+0x1e>
 800e3a4:	292d      	cmp	r1, #45	@ 0x2d
 800e3a6:	d1c9      	bne.n	800e33c <_strtod_l+0x34>
 800e3a8:	2101      	movs	r1, #1
 800e3aa:	9108      	str	r1, [sp, #32]
 800e3ac:	1c51      	adds	r1, r2, #1
 800e3ae:	9111      	str	r1, [sp, #68]	@ 0x44
 800e3b0:	7852      	ldrb	r2, [r2, #1]
 800e3b2:	2a00      	cmp	r2, #0
 800e3b4:	d1c4      	bne.n	800e340 <_strtod_l+0x38>
 800e3b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3b8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f040 850f 	bne.w	800ede0 <_strtod_l+0xad8>
 800e3c2:	ec4b ab10 	vmov	d0, sl, fp
 800e3c6:	e7e4      	b.n	800e392 <_strtod_l+0x8a>
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	e7ee      	b.n	800e3aa <_strtod_l+0xa2>
 800e3cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e3ce:	b13a      	cbz	r2, 800e3e0 <_strtod_l+0xd8>
 800e3d0:	2135      	movs	r1, #53	@ 0x35
 800e3d2:	a814      	add	r0, sp, #80	@ 0x50
 800e3d4:	f7ff ff39 	bl	800e24a <__copybits>
 800e3d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e3da:	9805      	ldr	r0, [sp, #20]
 800e3dc:	f7ff fb0a 	bl	800d9f4 <_Bfree>
 800e3e0:	1e73      	subs	r3, r6, #1
 800e3e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	d806      	bhi.n	800e3f6 <_strtod_l+0xee>
 800e3e8:	e8df f003 	tbb	[pc, r3]
 800e3ec:	201d0314 	.word	0x201d0314
 800e3f0:	14          	.byte	0x14
 800e3f1:	00          	.byte	0x00
 800e3f2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e3f6:	05e3      	lsls	r3, r4, #23
 800e3f8:	bf48      	it	mi
 800e3fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e3fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e402:	0d1b      	lsrs	r3, r3, #20
 800e404:	051b      	lsls	r3, r3, #20
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1b9      	bne.n	800e37e <_strtod_l+0x76>
 800e40a:	f7fe fba1 	bl	800cb50 <__errno>
 800e40e:	2322      	movs	r3, #34	@ 0x22
 800e410:	6003      	str	r3, [r0, #0]
 800e412:	e7b4      	b.n	800e37e <_strtod_l+0x76>
 800e414:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e418:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e41c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e420:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e424:	e7e7      	b.n	800e3f6 <_strtod_l+0xee>
 800e426:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e594 <_strtod_l+0x28c>
 800e42a:	e7e4      	b.n	800e3f6 <_strtod_l+0xee>
 800e42c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e430:	f04f 3aff 	mov.w	sl, #4294967295
 800e434:	e7df      	b.n	800e3f6 <_strtod_l+0xee>
 800e436:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e438:	1c5a      	adds	r2, r3, #1
 800e43a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e43c:	785b      	ldrb	r3, [r3, #1]
 800e43e:	2b30      	cmp	r3, #48	@ 0x30
 800e440:	d0f9      	beq.n	800e436 <_strtod_l+0x12e>
 800e442:	2b00      	cmp	r3, #0
 800e444:	d09b      	beq.n	800e37e <_strtod_l+0x76>
 800e446:	2301      	movs	r3, #1
 800e448:	2600      	movs	r6, #0
 800e44a:	9307      	str	r3, [sp, #28]
 800e44c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e44e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e450:	46b1      	mov	r9, r6
 800e452:	4635      	mov	r5, r6
 800e454:	220a      	movs	r2, #10
 800e456:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e458:	7804      	ldrb	r4, [r0, #0]
 800e45a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e45e:	b2d9      	uxtb	r1, r3
 800e460:	2909      	cmp	r1, #9
 800e462:	d929      	bls.n	800e4b8 <_strtod_l+0x1b0>
 800e464:	494a      	ldr	r1, [pc, #296]	@ (800e590 <_strtod_l+0x288>)
 800e466:	2201      	movs	r2, #1
 800e468:	f000 ff84 	bl	800f374 <strncmp>
 800e46c:	b378      	cbz	r0, 800e4ce <_strtod_l+0x1c6>
 800e46e:	2000      	movs	r0, #0
 800e470:	4622      	mov	r2, r4
 800e472:	462b      	mov	r3, r5
 800e474:	4607      	mov	r7, r0
 800e476:	9006      	str	r0, [sp, #24]
 800e478:	2a65      	cmp	r2, #101	@ 0x65
 800e47a:	d001      	beq.n	800e480 <_strtod_l+0x178>
 800e47c:	2a45      	cmp	r2, #69	@ 0x45
 800e47e:	d117      	bne.n	800e4b0 <_strtod_l+0x1a8>
 800e480:	b91b      	cbnz	r3, 800e48a <_strtod_l+0x182>
 800e482:	9b07      	ldr	r3, [sp, #28]
 800e484:	4303      	orrs	r3, r0
 800e486:	d096      	beq.n	800e3b6 <_strtod_l+0xae>
 800e488:	2300      	movs	r3, #0
 800e48a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e48e:	f108 0201 	add.w	r2, r8, #1
 800e492:	9211      	str	r2, [sp, #68]	@ 0x44
 800e494:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e498:	2a2b      	cmp	r2, #43	@ 0x2b
 800e49a:	d06b      	beq.n	800e574 <_strtod_l+0x26c>
 800e49c:	2a2d      	cmp	r2, #45	@ 0x2d
 800e49e:	d071      	beq.n	800e584 <_strtod_l+0x27c>
 800e4a0:	f04f 0e00 	mov.w	lr, #0
 800e4a4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e4a8:	2c09      	cmp	r4, #9
 800e4aa:	d979      	bls.n	800e5a0 <_strtod_l+0x298>
 800e4ac:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e4b0:	2400      	movs	r4, #0
 800e4b2:	e094      	b.n	800e5de <_strtod_l+0x2d6>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	e7c7      	b.n	800e448 <_strtod_l+0x140>
 800e4b8:	2d08      	cmp	r5, #8
 800e4ba:	f100 0001 	add.w	r0, r0, #1
 800e4be:	bfd4      	ite	le
 800e4c0:	fb02 3909 	mlale	r9, r2, r9, r3
 800e4c4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	9011      	str	r0, [sp, #68]	@ 0x44
 800e4cc:	e7c3      	b.n	800e456 <_strtod_l+0x14e>
 800e4ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4d0:	1c5a      	adds	r2, r3, #1
 800e4d2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e4d4:	785a      	ldrb	r2, [r3, #1]
 800e4d6:	b375      	cbz	r5, 800e536 <_strtod_l+0x22e>
 800e4d8:	4607      	mov	r7, r0
 800e4da:	462b      	mov	r3, r5
 800e4dc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e4e0:	2909      	cmp	r1, #9
 800e4e2:	d913      	bls.n	800e50c <_strtod_l+0x204>
 800e4e4:	2101      	movs	r1, #1
 800e4e6:	9106      	str	r1, [sp, #24]
 800e4e8:	e7c6      	b.n	800e478 <_strtod_l+0x170>
 800e4ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	9211      	str	r2, [sp, #68]	@ 0x44
 800e4f0:	785a      	ldrb	r2, [r3, #1]
 800e4f2:	3001      	adds	r0, #1
 800e4f4:	2a30      	cmp	r2, #48	@ 0x30
 800e4f6:	d0f8      	beq.n	800e4ea <_strtod_l+0x1e2>
 800e4f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e4fc:	2b08      	cmp	r3, #8
 800e4fe:	f200 8476 	bhi.w	800edee <_strtod_l+0xae6>
 800e502:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e504:	930a      	str	r3, [sp, #40]	@ 0x28
 800e506:	4607      	mov	r7, r0
 800e508:	2000      	movs	r0, #0
 800e50a:	4603      	mov	r3, r0
 800e50c:	3a30      	subs	r2, #48	@ 0x30
 800e50e:	f100 0101 	add.w	r1, r0, #1
 800e512:	d023      	beq.n	800e55c <_strtod_l+0x254>
 800e514:	440f      	add	r7, r1
 800e516:	eb00 0c03 	add.w	ip, r0, r3
 800e51a:	4619      	mov	r1, r3
 800e51c:	240a      	movs	r4, #10
 800e51e:	4561      	cmp	r1, ip
 800e520:	d10b      	bne.n	800e53a <_strtod_l+0x232>
 800e522:	1c5c      	adds	r4, r3, #1
 800e524:	4403      	add	r3, r0
 800e526:	2b08      	cmp	r3, #8
 800e528:	4404      	add	r4, r0
 800e52a:	dc11      	bgt.n	800e550 <_strtod_l+0x248>
 800e52c:	230a      	movs	r3, #10
 800e52e:	fb03 2909 	mla	r9, r3, r9, r2
 800e532:	2100      	movs	r1, #0
 800e534:	e013      	b.n	800e55e <_strtod_l+0x256>
 800e536:	4628      	mov	r0, r5
 800e538:	e7dc      	b.n	800e4f4 <_strtod_l+0x1ec>
 800e53a:	2908      	cmp	r1, #8
 800e53c:	f101 0101 	add.w	r1, r1, #1
 800e540:	dc02      	bgt.n	800e548 <_strtod_l+0x240>
 800e542:	fb04 f909 	mul.w	r9, r4, r9
 800e546:	e7ea      	b.n	800e51e <_strtod_l+0x216>
 800e548:	2910      	cmp	r1, #16
 800e54a:	bfd8      	it	le
 800e54c:	4366      	mulle	r6, r4
 800e54e:	e7e6      	b.n	800e51e <_strtod_l+0x216>
 800e550:	2b0f      	cmp	r3, #15
 800e552:	dcee      	bgt.n	800e532 <_strtod_l+0x22a>
 800e554:	230a      	movs	r3, #10
 800e556:	fb03 2606 	mla	r6, r3, r6, r2
 800e55a:	e7ea      	b.n	800e532 <_strtod_l+0x22a>
 800e55c:	461c      	mov	r4, r3
 800e55e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	9211      	str	r2, [sp, #68]	@ 0x44
 800e564:	785a      	ldrb	r2, [r3, #1]
 800e566:	4608      	mov	r0, r1
 800e568:	4623      	mov	r3, r4
 800e56a:	e7b7      	b.n	800e4dc <_strtod_l+0x1d4>
 800e56c:	2301      	movs	r3, #1
 800e56e:	2700      	movs	r7, #0
 800e570:	9306      	str	r3, [sp, #24]
 800e572:	e786      	b.n	800e482 <_strtod_l+0x17a>
 800e574:	f04f 0e00 	mov.w	lr, #0
 800e578:	f108 0202 	add.w	r2, r8, #2
 800e57c:	9211      	str	r2, [sp, #68]	@ 0x44
 800e57e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e582:	e78f      	b.n	800e4a4 <_strtod_l+0x19c>
 800e584:	f04f 0e01 	mov.w	lr, #1
 800e588:	e7f6      	b.n	800e578 <_strtod_l+0x270>
 800e58a:	bf00      	nop
 800e58c:	080108b8 	.word	0x080108b8
 800e590:	080108a0 	.word	0x080108a0
 800e594:	7ff00000 	.word	0x7ff00000
 800e598:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e59a:	1c54      	adds	r4, r2, #1
 800e59c:	9411      	str	r4, [sp, #68]	@ 0x44
 800e59e:	7852      	ldrb	r2, [r2, #1]
 800e5a0:	2a30      	cmp	r2, #48	@ 0x30
 800e5a2:	d0f9      	beq.n	800e598 <_strtod_l+0x290>
 800e5a4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e5a8:	2c08      	cmp	r4, #8
 800e5aa:	d881      	bhi.n	800e4b0 <_strtod_l+0x1a8>
 800e5ac:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e5b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5b6:	1c51      	adds	r1, r2, #1
 800e5b8:	9111      	str	r1, [sp, #68]	@ 0x44
 800e5ba:	7852      	ldrb	r2, [r2, #1]
 800e5bc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e5c0:	2c09      	cmp	r4, #9
 800e5c2:	d938      	bls.n	800e636 <_strtod_l+0x32e>
 800e5c4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e5c6:	1b0c      	subs	r4, r1, r4
 800e5c8:	2c08      	cmp	r4, #8
 800e5ca:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e5ce:	dc02      	bgt.n	800e5d6 <_strtod_l+0x2ce>
 800e5d0:	4564      	cmp	r4, ip
 800e5d2:	bfa8      	it	ge
 800e5d4:	4664      	movge	r4, ip
 800e5d6:	f1be 0f00 	cmp.w	lr, #0
 800e5da:	d000      	beq.n	800e5de <_strtod_l+0x2d6>
 800e5dc:	4264      	negs	r4, r4
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d14e      	bne.n	800e680 <_strtod_l+0x378>
 800e5e2:	9b07      	ldr	r3, [sp, #28]
 800e5e4:	4318      	orrs	r0, r3
 800e5e6:	f47f aeca 	bne.w	800e37e <_strtod_l+0x76>
 800e5ea:	9b06      	ldr	r3, [sp, #24]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f47f aee2 	bne.w	800e3b6 <_strtod_l+0xae>
 800e5f2:	2a69      	cmp	r2, #105	@ 0x69
 800e5f4:	d027      	beq.n	800e646 <_strtod_l+0x33e>
 800e5f6:	dc24      	bgt.n	800e642 <_strtod_l+0x33a>
 800e5f8:	2a49      	cmp	r2, #73	@ 0x49
 800e5fa:	d024      	beq.n	800e646 <_strtod_l+0x33e>
 800e5fc:	2a4e      	cmp	r2, #78	@ 0x4e
 800e5fe:	f47f aeda 	bne.w	800e3b6 <_strtod_l+0xae>
 800e602:	4997      	ldr	r1, [pc, #604]	@ (800e860 <_strtod_l+0x558>)
 800e604:	a811      	add	r0, sp, #68	@ 0x44
 800e606:	f001 f9ab 	bl	800f960 <__match>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	f43f aed3 	beq.w	800e3b6 <_strtod_l+0xae>
 800e610:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	2b28      	cmp	r3, #40	@ 0x28
 800e616:	d12d      	bne.n	800e674 <_strtod_l+0x36c>
 800e618:	4992      	ldr	r1, [pc, #584]	@ (800e864 <_strtod_l+0x55c>)
 800e61a:	aa14      	add	r2, sp, #80	@ 0x50
 800e61c:	a811      	add	r0, sp, #68	@ 0x44
 800e61e:	f001 f9b3 	bl	800f988 <__hexnan>
 800e622:	2805      	cmp	r0, #5
 800e624:	d126      	bne.n	800e674 <_strtod_l+0x36c>
 800e626:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e628:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e62c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e630:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e634:	e6a3      	b.n	800e37e <_strtod_l+0x76>
 800e636:	240a      	movs	r4, #10
 800e638:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e63c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e640:	e7b8      	b.n	800e5b4 <_strtod_l+0x2ac>
 800e642:	2a6e      	cmp	r2, #110	@ 0x6e
 800e644:	e7db      	b.n	800e5fe <_strtod_l+0x2f6>
 800e646:	4988      	ldr	r1, [pc, #544]	@ (800e868 <_strtod_l+0x560>)
 800e648:	a811      	add	r0, sp, #68	@ 0x44
 800e64a:	f001 f989 	bl	800f960 <__match>
 800e64e:	2800      	cmp	r0, #0
 800e650:	f43f aeb1 	beq.w	800e3b6 <_strtod_l+0xae>
 800e654:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e656:	4985      	ldr	r1, [pc, #532]	@ (800e86c <_strtod_l+0x564>)
 800e658:	3b01      	subs	r3, #1
 800e65a:	a811      	add	r0, sp, #68	@ 0x44
 800e65c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e65e:	f001 f97f 	bl	800f960 <__match>
 800e662:	b910      	cbnz	r0, 800e66a <_strtod_l+0x362>
 800e664:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e666:	3301      	adds	r3, #1
 800e668:	9311      	str	r3, [sp, #68]	@ 0x44
 800e66a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e880 <_strtod_l+0x578>
 800e66e:	f04f 0a00 	mov.w	sl, #0
 800e672:	e684      	b.n	800e37e <_strtod_l+0x76>
 800e674:	487e      	ldr	r0, [pc, #504]	@ (800e870 <_strtod_l+0x568>)
 800e676:	f000 feaf 	bl	800f3d8 <nan>
 800e67a:	ec5b ab10 	vmov	sl, fp, d0
 800e67e:	e67e      	b.n	800e37e <_strtod_l+0x76>
 800e680:	ee07 9a90 	vmov	s15, r9
 800e684:	1be2      	subs	r2, r4, r7
 800e686:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e68a:	2d00      	cmp	r5, #0
 800e68c:	bf08      	it	eq
 800e68e:	461d      	moveq	r5, r3
 800e690:	2b10      	cmp	r3, #16
 800e692:	9209      	str	r2, [sp, #36]	@ 0x24
 800e694:	461a      	mov	r2, r3
 800e696:	bfa8      	it	ge
 800e698:	2210      	movge	r2, #16
 800e69a:	2b09      	cmp	r3, #9
 800e69c:	ec5b ab17 	vmov	sl, fp, d7
 800e6a0:	dc15      	bgt.n	800e6ce <_strtod_l+0x3c6>
 800e6a2:	1be1      	subs	r1, r4, r7
 800e6a4:	2900      	cmp	r1, #0
 800e6a6:	f43f ae6a 	beq.w	800e37e <_strtod_l+0x76>
 800e6aa:	eba4 0107 	sub.w	r1, r4, r7
 800e6ae:	dd72      	ble.n	800e796 <_strtod_l+0x48e>
 800e6b0:	2916      	cmp	r1, #22
 800e6b2:	dc59      	bgt.n	800e768 <_strtod_l+0x460>
 800e6b4:	4b6f      	ldr	r3, [pc, #444]	@ (800e874 <_strtod_l+0x56c>)
 800e6b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6bc:	ed93 7b00 	vldr	d7, [r3]
 800e6c0:	ec4b ab16 	vmov	d6, sl, fp
 800e6c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6c8:	ec5b ab17 	vmov	sl, fp, d7
 800e6cc:	e657      	b.n	800e37e <_strtod_l+0x76>
 800e6ce:	4969      	ldr	r1, [pc, #420]	@ (800e874 <_strtod_l+0x56c>)
 800e6d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e6d4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e6d8:	ee06 6a90 	vmov	s13, r6
 800e6dc:	2b0f      	cmp	r3, #15
 800e6de:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e6e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e6e6:	ec5b ab16 	vmov	sl, fp, d6
 800e6ea:	ddda      	ble.n	800e6a2 <_strtod_l+0x39a>
 800e6ec:	1a9a      	subs	r2, r3, r2
 800e6ee:	1be1      	subs	r1, r4, r7
 800e6f0:	440a      	add	r2, r1
 800e6f2:	2a00      	cmp	r2, #0
 800e6f4:	f340 8094 	ble.w	800e820 <_strtod_l+0x518>
 800e6f8:	f012 000f 	ands.w	r0, r2, #15
 800e6fc:	d00a      	beq.n	800e714 <_strtod_l+0x40c>
 800e6fe:	495d      	ldr	r1, [pc, #372]	@ (800e874 <_strtod_l+0x56c>)
 800e700:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e704:	ed91 7b00 	vldr	d7, [r1]
 800e708:	ec4b ab16 	vmov	d6, sl, fp
 800e70c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e710:	ec5b ab17 	vmov	sl, fp, d7
 800e714:	f032 020f 	bics.w	r2, r2, #15
 800e718:	d073      	beq.n	800e802 <_strtod_l+0x4fa>
 800e71a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e71e:	dd47      	ble.n	800e7b0 <_strtod_l+0x4a8>
 800e720:	2400      	movs	r4, #0
 800e722:	4625      	mov	r5, r4
 800e724:	9407      	str	r4, [sp, #28]
 800e726:	4626      	mov	r6, r4
 800e728:	9a05      	ldr	r2, [sp, #20]
 800e72a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e880 <_strtod_l+0x578>
 800e72e:	2322      	movs	r3, #34	@ 0x22
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	f04f 0a00 	mov.w	sl, #0
 800e736:	9b07      	ldr	r3, [sp, #28]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f43f ae20 	beq.w	800e37e <_strtod_l+0x76>
 800e73e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e740:	9805      	ldr	r0, [sp, #20]
 800e742:	f7ff f957 	bl	800d9f4 <_Bfree>
 800e746:	9805      	ldr	r0, [sp, #20]
 800e748:	4631      	mov	r1, r6
 800e74a:	f7ff f953 	bl	800d9f4 <_Bfree>
 800e74e:	9805      	ldr	r0, [sp, #20]
 800e750:	4629      	mov	r1, r5
 800e752:	f7ff f94f 	bl	800d9f4 <_Bfree>
 800e756:	9907      	ldr	r1, [sp, #28]
 800e758:	9805      	ldr	r0, [sp, #20]
 800e75a:	f7ff f94b 	bl	800d9f4 <_Bfree>
 800e75e:	9805      	ldr	r0, [sp, #20]
 800e760:	4621      	mov	r1, r4
 800e762:	f7ff f947 	bl	800d9f4 <_Bfree>
 800e766:	e60a      	b.n	800e37e <_strtod_l+0x76>
 800e768:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e76c:	1be0      	subs	r0, r4, r7
 800e76e:	4281      	cmp	r1, r0
 800e770:	dbbc      	blt.n	800e6ec <_strtod_l+0x3e4>
 800e772:	4a40      	ldr	r2, [pc, #256]	@ (800e874 <_strtod_l+0x56c>)
 800e774:	f1c3 030f 	rsb	r3, r3, #15
 800e778:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e77c:	ed91 7b00 	vldr	d7, [r1]
 800e780:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e782:	ec4b ab16 	vmov	d6, sl, fp
 800e786:	1acb      	subs	r3, r1, r3
 800e788:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e78c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e790:	ed92 6b00 	vldr	d6, [r2]
 800e794:	e796      	b.n	800e6c4 <_strtod_l+0x3bc>
 800e796:	3116      	adds	r1, #22
 800e798:	dba8      	blt.n	800e6ec <_strtod_l+0x3e4>
 800e79a:	4b36      	ldr	r3, [pc, #216]	@ (800e874 <_strtod_l+0x56c>)
 800e79c:	1b3c      	subs	r4, r7, r4
 800e79e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e7a2:	ed94 7b00 	vldr	d7, [r4]
 800e7a6:	ec4b ab16 	vmov	d6, sl, fp
 800e7aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e7ae:	e78b      	b.n	800e6c8 <_strtod_l+0x3c0>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	ec4b ab17 	vmov	d7, sl, fp
 800e7b6:	4e30      	ldr	r6, [pc, #192]	@ (800e878 <_strtod_l+0x570>)
 800e7b8:	1112      	asrs	r2, r2, #4
 800e7ba:	4601      	mov	r1, r0
 800e7bc:	2a01      	cmp	r2, #1
 800e7be:	dc23      	bgt.n	800e808 <_strtod_l+0x500>
 800e7c0:	b108      	cbz	r0, 800e7c6 <_strtod_l+0x4be>
 800e7c2:	ec5b ab17 	vmov	sl, fp, d7
 800e7c6:	4a2c      	ldr	r2, [pc, #176]	@ (800e878 <_strtod_l+0x570>)
 800e7c8:	482c      	ldr	r0, [pc, #176]	@ (800e87c <_strtod_l+0x574>)
 800e7ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e7ce:	ed92 7b00 	vldr	d7, [r2]
 800e7d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e7d6:	ec4b ab16 	vmov	d6, sl, fp
 800e7da:	4a29      	ldr	r2, [pc, #164]	@ (800e880 <_strtod_l+0x578>)
 800e7dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7e0:	ee17 1a90 	vmov	r1, s15
 800e7e4:	400a      	ands	r2, r1
 800e7e6:	4282      	cmp	r2, r0
 800e7e8:	ec5b ab17 	vmov	sl, fp, d7
 800e7ec:	d898      	bhi.n	800e720 <_strtod_l+0x418>
 800e7ee:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e7f2:	4282      	cmp	r2, r0
 800e7f4:	bf86      	itte	hi
 800e7f6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e884 <_strtod_l+0x57c>
 800e7fa:	f04f 3aff 	movhi.w	sl, #4294967295
 800e7fe:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e802:	2200      	movs	r2, #0
 800e804:	9206      	str	r2, [sp, #24]
 800e806:	e076      	b.n	800e8f6 <_strtod_l+0x5ee>
 800e808:	f012 0f01 	tst.w	r2, #1
 800e80c:	d004      	beq.n	800e818 <_strtod_l+0x510>
 800e80e:	ed96 6b00 	vldr	d6, [r6]
 800e812:	2001      	movs	r0, #1
 800e814:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e818:	3101      	adds	r1, #1
 800e81a:	1052      	asrs	r2, r2, #1
 800e81c:	3608      	adds	r6, #8
 800e81e:	e7cd      	b.n	800e7bc <_strtod_l+0x4b4>
 800e820:	d0ef      	beq.n	800e802 <_strtod_l+0x4fa>
 800e822:	4252      	negs	r2, r2
 800e824:	f012 000f 	ands.w	r0, r2, #15
 800e828:	d00a      	beq.n	800e840 <_strtod_l+0x538>
 800e82a:	4912      	ldr	r1, [pc, #72]	@ (800e874 <_strtod_l+0x56c>)
 800e82c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e830:	ed91 7b00 	vldr	d7, [r1]
 800e834:	ec4b ab16 	vmov	d6, sl, fp
 800e838:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e83c:	ec5b ab17 	vmov	sl, fp, d7
 800e840:	1112      	asrs	r2, r2, #4
 800e842:	d0de      	beq.n	800e802 <_strtod_l+0x4fa>
 800e844:	2a1f      	cmp	r2, #31
 800e846:	dd1f      	ble.n	800e888 <_strtod_l+0x580>
 800e848:	2400      	movs	r4, #0
 800e84a:	4625      	mov	r5, r4
 800e84c:	9407      	str	r4, [sp, #28]
 800e84e:	4626      	mov	r6, r4
 800e850:	9a05      	ldr	r2, [sp, #20]
 800e852:	2322      	movs	r3, #34	@ 0x22
 800e854:	f04f 0a00 	mov.w	sl, #0
 800e858:	f04f 0b00 	mov.w	fp, #0
 800e85c:	6013      	str	r3, [r2, #0]
 800e85e:	e76a      	b.n	800e736 <_strtod_l+0x42e>
 800e860:	0801068d 	.word	0x0801068d
 800e864:	080108a4 	.word	0x080108a4
 800e868:	08010685 	.word	0x08010685
 800e86c:	080106bc 	.word	0x080106bc
 800e870:	08010a4d 	.word	0x08010a4d
 800e874:	080107d8 	.word	0x080107d8
 800e878:	080107b0 	.word	0x080107b0
 800e87c:	7ca00000 	.word	0x7ca00000
 800e880:	7ff00000 	.word	0x7ff00000
 800e884:	7fefffff 	.word	0x7fefffff
 800e888:	f012 0110 	ands.w	r1, r2, #16
 800e88c:	bf18      	it	ne
 800e88e:	216a      	movne	r1, #106	@ 0x6a
 800e890:	9106      	str	r1, [sp, #24]
 800e892:	ec4b ab17 	vmov	d7, sl, fp
 800e896:	49b0      	ldr	r1, [pc, #704]	@ (800eb58 <_strtod_l+0x850>)
 800e898:	2000      	movs	r0, #0
 800e89a:	07d6      	lsls	r6, r2, #31
 800e89c:	d504      	bpl.n	800e8a8 <_strtod_l+0x5a0>
 800e89e:	ed91 6b00 	vldr	d6, [r1]
 800e8a2:	2001      	movs	r0, #1
 800e8a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8a8:	1052      	asrs	r2, r2, #1
 800e8aa:	f101 0108 	add.w	r1, r1, #8
 800e8ae:	d1f4      	bne.n	800e89a <_strtod_l+0x592>
 800e8b0:	b108      	cbz	r0, 800e8b6 <_strtod_l+0x5ae>
 800e8b2:	ec5b ab17 	vmov	sl, fp, d7
 800e8b6:	9a06      	ldr	r2, [sp, #24]
 800e8b8:	b1b2      	cbz	r2, 800e8e8 <_strtod_l+0x5e0>
 800e8ba:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e8be:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e8c2:	2a00      	cmp	r2, #0
 800e8c4:	4658      	mov	r0, fp
 800e8c6:	dd0f      	ble.n	800e8e8 <_strtod_l+0x5e0>
 800e8c8:	2a1f      	cmp	r2, #31
 800e8ca:	dd55      	ble.n	800e978 <_strtod_l+0x670>
 800e8cc:	2a34      	cmp	r2, #52	@ 0x34
 800e8ce:	bfde      	ittt	le
 800e8d0:	f04f 32ff 	movle.w	r2, #4294967295
 800e8d4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e8d8:	408a      	lslle	r2, r1
 800e8da:	f04f 0a00 	mov.w	sl, #0
 800e8de:	bfcc      	ite	gt
 800e8e0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e8e4:	ea02 0b00 	andle.w	fp, r2, r0
 800e8e8:	ec4b ab17 	vmov	d7, sl, fp
 800e8ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f4:	d0a8      	beq.n	800e848 <_strtod_l+0x540>
 800e8f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8f8:	9805      	ldr	r0, [sp, #20]
 800e8fa:	f8cd 9000 	str.w	r9, [sp]
 800e8fe:	462a      	mov	r2, r5
 800e900:	f7ff f8e0 	bl	800dac4 <__s2b>
 800e904:	9007      	str	r0, [sp, #28]
 800e906:	2800      	cmp	r0, #0
 800e908:	f43f af0a 	beq.w	800e720 <_strtod_l+0x418>
 800e90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e90e:	1b3f      	subs	r7, r7, r4
 800e910:	2b00      	cmp	r3, #0
 800e912:	bfb4      	ite	lt
 800e914:	463b      	movlt	r3, r7
 800e916:	2300      	movge	r3, #0
 800e918:	930a      	str	r3, [sp, #40]	@ 0x28
 800e91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e91c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800eb48 <_strtod_l+0x840>
 800e920:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e924:	2400      	movs	r4, #0
 800e926:	930d      	str	r3, [sp, #52]	@ 0x34
 800e928:	4625      	mov	r5, r4
 800e92a:	9b07      	ldr	r3, [sp, #28]
 800e92c:	9805      	ldr	r0, [sp, #20]
 800e92e:	6859      	ldr	r1, [r3, #4]
 800e930:	f7ff f820 	bl	800d974 <_Balloc>
 800e934:	4606      	mov	r6, r0
 800e936:	2800      	cmp	r0, #0
 800e938:	f43f aef6 	beq.w	800e728 <_strtod_l+0x420>
 800e93c:	9b07      	ldr	r3, [sp, #28]
 800e93e:	691a      	ldr	r2, [r3, #16]
 800e940:	ec4b ab19 	vmov	d9, sl, fp
 800e944:	3202      	adds	r2, #2
 800e946:	f103 010c 	add.w	r1, r3, #12
 800e94a:	0092      	lsls	r2, r2, #2
 800e94c:	300c      	adds	r0, #12
 800e94e:	f000 fd33 	bl	800f3b8 <memcpy>
 800e952:	eeb0 0b49 	vmov.f64	d0, d9
 800e956:	9805      	ldr	r0, [sp, #20]
 800e958:	aa14      	add	r2, sp, #80	@ 0x50
 800e95a:	a913      	add	r1, sp, #76	@ 0x4c
 800e95c:	f7ff fbee 	bl	800e13c <__d2b>
 800e960:	9012      	str	r0, [sp, #72]	@ 0x48
 800e962:	2800      	cmp	r0, #0
 800e964:	f43f aee0 	beq.w	800e728 <_strtod_l+0x420>
 800e968:	9805      	ldr	r0, [sp, #20]
 800e96a:	2101      	movs	r1, #1
 800e96c:	f7ff f940 	bl	800dbf0 <__i2b>
 800e970:	4605      	mov	r5, r0
 800e972:	b940      	cbnz	r0, 800e986 <_strtod_l+0x67e>
 800e974:	2500      	movs	r5, #0
 800e976:	e6d7      	b.n	800e728 <_strtod_l+0x420>
 800e978:	f04f 31ff 	mov.w	r1, #4294967295
 800e97c:	fa01 f202 	lsl.w	r2, r1, r2
 800e980:	ea02 0a0a 	and.w	sl, r2, sl
 800e984:	e7b0      	b.n	800e8e8 <_strtod_l+0x5e0>
 800e986:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e988:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e98a:	2f00      	cmp	r7, #0
 800e98c:	bfab      	itete	ge
 800e98e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e990:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e992:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e996:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e99a:	bfac      	ite	ge
 800e99c:	eb07 0903 	addge.w	r9, r7, r3
 800e9a0:	eba3 0807 	sublt.w	r8, r3, r7
 800e9a4:	9b06      	ldr	r3, [sp, #24]
 800e9a6:	1aff      	subs	r7, r7, r3
 800e9a8:	4417      	add	r7, r2
 800e9aa:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e9ae:	4a6b      	ldr	r2, [pc, #428]	@ (800eb5c <_strtod_l+0x854>)
 800e9b0:	3f01      	subs	r7, #1
 800e9b2:	4297      	cmp	r7, r2
 800e9b4:	da51      	bge.n	800ea5a <_strtod_l+0x752>
 800e9b6:	1bd1      	subs	r1, r2, r7
 800e9b8:	291f      	cmp	r1, #31
 800e9ba:	eba3 0301 	sub.w	r3, r3, r1
 800e9be:	f04f 0201 	mov.w	r2, #1
 800e9c2:	dc3e      	bgt.n	800ea42 <_strtod_l+0x73a>
 800e9c4:	408a      	lsls	r2, r1
 800e9c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e9cc:	eb09 0703 	add.w	r7, r9, r3
 800e9d0:	4498      	add	r8, r3
 800e9d2:	9b06      	ldr	r3, [sp, #24]
 800e9d4:	45b9      	cmp	r9, r7
 800e9d6:	4498      	add	r8, r3
 800e9d8:	464b      	mov	r3, r9
 800e9da:	bfa8      	it	ge
 800e9dc:	463b      	movge	r3, r7
 800e9de:	4543      	cmp	r3, r8
 800e9e0:	bfa8      	it	ge
 800e9e2:	4643      	movge	r3, r8
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	bfc2      	ittt	gt
 800e9e8:	1aff      	subgt	r7, r7, r3
 800e9ea:	eba8 0803 	subgt.w	r8, r8, r3
 800e9ee:	eba9 0903 	subgt.w	r9, r9, r3
 800e9f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dd16      	ble.n	800ea26 <_strtod_l+0x71e>
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	9805      	ldr	r0, [sp, #20]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	f7ff f9b7 	bl	800dd70 <__pow5mult>
 800ea02:	4605      	mov	r5, r0
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d0b5      	beq.n	800e974 <_strtod_l+0x66c>
 800ea08:	4601      	mov	r1, r0
 800ea0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ea0c:	9805      	ldr	r0, [sp, #20]
 800ea0e:	f7ff f905 	bl	800dc1c <__multiply>
 800ea12:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ea14:	2800      	cmp	r0, #0
 800ea16:	f43f ae87 	beq.w	800e728 <_strtod_l+0x420>
 800ea1a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ea1c:	9805      	ldr	r0, [sp, #20]
 800ea1e:	f7fe ffe9 	bl	800d9f4 <_Bfree>
 800ea22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea24:	9312      	str	r3, [sp, #72]	@ 0x48
 800ea26:	2f00      	cmp	r7, #0
 800ea28:	dc1b      	bgt.n	800ea62 <_strtod_l+0x75a>
 800ea2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	dd21      	ble.n	800ea74 <_strtod_l+0x76c>
 800ea30:	4631      	mov	r1, r6
 800ea32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ea34:	9805      	ldr	r0, [sp, #20]
 800ea36:	f7ff f99b 	bl	800dd70 <__pow5mult>
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	b9d0      	cbnz	r0, 800ea74 <_strtod_l+0x76c>
 800ea3e:	2600      	movs	r6, #0
 800ea40:	e672      	b.n	800e728 <_strtod_l+0x420>
 800ea42:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ea46:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ea4a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ea4e:	37e2      	adds	r7, #226	@ 0xe2
 800ea50:	fa02 f107 	lsl.w	r1, r2, r7
 800ea54:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ea56:	920c      	str	r2, [sp, #48]	@ 0x30
 800ea58:	e7b8      	b.n	800e9cc <_strtod_l+0x6c4>
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ea5e:	2201      	movs	r2, #1
 800ea60:	e7f9      	b.n	800ea56 <_strtod_l+0x74e>
 800ea62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ea64:	9805      	ldr	r0, [sp, #20]
 800ea66:	463a      	mov	r2, r7
 800ea68:	f7ff f9dc 	bl	800de24 <__lshift>
 800ea6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d1db      	bne.n	800ea2a <_strtod_l+0x722>
 800ea72:	e659      	b.n	800e728 <_strtod_l+0x420>
 800ea74:	f1b8 0f00 	cmp.w	r8, #0
 800ea78:	dd07      	ble.n	800ea8a <_strtod_l+0x782>
 800ea7a:	4631      	mov	r1, r6
 800ea7c:	9805      	ldr	r0, [sp, #20]
 800ea7e:	4642      	mov	r2, r8
 800ea80:	f7ff f9d0 	bl	800de24 <__lshift>
 800ea84:	4606      	mov	r6, r0
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d0d9      	beq.n	800ea3e <_strtod_l+0x736>
 800ea8a:	f1b9 0f00 	cmp.w	r9, #0
 800ea8e:	dd08      	ble.n	800eaa2 <_strtod_l+0x79a>
 800ea90:	4629      	mov	r1, r5
 800ea92:	9805      	ldr	r0, [sp, #20]
 800ea94:	464a      	mov	r2, r9
 800ea96:	f7ff f9c5 	bl	800de24 <__lshift>
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	f43f ae43 	beq.w	800e728 <_strtod_l+0x420>
 800eaa2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	4632      	mov	r2, r6
 800eaa8:	f7ff fa44 	bl	800df34 <__mdiff>
 800eaac:	4604      	mov	r4, r0
 800eaae:	2800      	cmp	r0, #0
 800eab0:	f43f ae3a 	beq.w	800e728 <_strtod_l+0x420>
 800eab4:	2300      	movs	r3, #0
 800eab6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800eaba:	60c3      	str	r3, [r0, #12]
 800eabc:	4629      	mov	r1, r5
 800eabe:	f7ff fa1d 	bl	800defc <__mcmp>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	da4e      	bge.n	800eb64 <_strtod_l+0x85c>
 800eac6:	ea58 080a 	orrs.w	r8, r8, sl
 800eaca:	d174      	bne.n	800ebb6 <_strtod_l+0x8ae>
 800eacc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d170      	bne.n	800ebb6 <_strtod_l+0x8ae>
 800ead4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ead8:	0d1b      	lsrs	r3, r3, #20
 800eada:	051b      	lsls	r3, r3, #20
 800eadc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eae0:	d969      	bls.n	800ebb6 <_strtod_l+0x8ae>
 800eae2:	6963      	ldr	r3, [r4, #20]
 800eae4:	b913      	cbnz	r3, 800eaec <_strtod_l+0x7e4>
 800eae6:	6923      	ldr	r3, [r4, #16]
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	dd64      	ble.n	800ebb6 <_strtod_l+0x8ae>
 800eaec:	4621      	mov	r1, r4
 800eaee:	2201      	movs	r2, #1
 800eaf0:	9805      	ldr	r0, [sp, #20]
 800eaf2:	f7ff f997 	bl	800de24 <__lshift>
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	4604      	mov	r4, r0
 800eafa:	f7ff f9ff 	bl	800defc <__mcmp>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	dd59      	ble.n	800ebb6 <_strtod_l+0x8ae>
 800eb02:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb06:	9a06      	ldr	r2, [sp, #24]
 800eb08:	0d1b      	lsrs	r3, r3, #20
 800eb0a:	051b      	lsls	r3, r3, #20
 800eb0c:	2a00      	cmp	r2, #0
 800eb0e:	d070      	beq.n	800ebf2 <_strtod_l+0x8ea>
 800eb10:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eb14:	d86d      	bhi.n	800ebf2 <_strtod_l+0x8ea>
 800eb16:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800eb1a:	f67f ae99 	bls.w	800e850 <_strtod_l+0x548>
 800eb1e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800eb50 <_strtod_l+0x848>
 800eb22:	ec4b ab16 	vmov	d6, sl, fp
 800eb26:	4b0e      	ldr	r3, [pc, #56]	@ (800eb60 <_strtod_l+0x858>)
 800eb28:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb2c:	ee17 2a90 	vmov	r2, s15
 800eb30:	4013      	ands	r3, r2
 800eb32:	ec5b ab17 	vmov	sl, fp, d7
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	f47f ae01 	bne.w	800e73e <_strtod_l+0x436>
 800eb3c:	9a05      	ldr	r2, [sp, #20]
 800eb3e:	2322      	movs	r3, #34	@ 0x22
 800eb40:	6013      	str	r3, [r2, #0]
 800eb42:	e5fc      	b.n	800e73e <_strtod_l+0x436>
 800eb44:	f3af 8000 	nop.w
 800eb48:	ffc00000 	.word	0xffc00000
 800eb4c:	41dfffff 	.word	0x41dfffff
 800eb50:	00000000 	.word	0x00000000
 800eb54:	39500000 	.word	0x39500000
 800eb58:	080108d0 	.word	0x080108d0
 800eb5c:	fffffc02 	.word	0xfffffc02
 800eb60:	7ff00000 	.word	0x7ff00000
 800eb64:	46d9      	mov	r9, fp
 800eb66:	d15d      	bne.n	800ec24 <_strtod_l+0x91c>
 800eb68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb6c:	f1b8 0f00 	cmp.w	r8, #0
 800eb70:	d02a      	beq.n	800ebc8 <_strtod_l+0x8c0>
 800eb72:	4aab      	ldr	r2, [pc, #684]	@ (800ee20 <_strtod_l+0xb18>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d12a      	bne.n	800ebce <_strtod_l+0x8c6>
 800eb78:	9b06      	ldr	r3, [sp, #24]
 800eb7a:	4652      	mov	r2, sl
 800eb7c:	b1fb      	cbz	r3, 800ebbe <_strtod_l+0x8b6>
 800eb7e:	4ba9      	ldr	r3, [pc, #676]	@ (800ee24 <_strtod_l+0xb1c>)
 800eb80:	ea0b 0303 	and.w	r3, fp, r3
 800eb84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800eb88:	f04f 31ff 	mov.w	r1, #4294967295
 800eb8c:	d81a      	bhi.n	800ebc4 <_strtod_l+0x8bc>
 800eb8e:	0d1b      	lsrs	r3, r3, #20
 800eb90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eb94:	fa01 f303 	lsl.w	r3, r1, r3
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d118      	bne.n	800ebce <_strtod_l+0x8c6>
 800eb9c:	4ba2      	ldr	r3, [pc, #648]	@ (800ee28 <_strtod_l+0xb20>)
 800eb9e:	4599      	cmp	r9, r3
 800eba0:	d102      	bne.n	800eba8 <_strtod_l+0x8a0>
 800eba2:	3201      	adds	r2, #1
 800eba4:	f43f adc0 	beq.w	800e728 <_strtod_l+0x420>
 800eba8:	4b9e      	ldr	r3, [pc, #632]	@ (800ee24 <_strtod_l+0xb1c>)
 800ebaa:	ea09 0303 	and.w	r3, r9, r3
 800ebae:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ebb2:	f04f 0a00 	mov.w	sl, #0
 800ebb6:	9b06      	ldr	r3, [sp, #24]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1b0      	bne.n	800eb1e <_strtod_l+0x816>
 800ebbc:	e5bf      	b.n	800e73e <_strtod_l+0x436>
 800ebbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc2:	e7e9      	b.n	800eb98 <_strtod_l+0x890>
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	e7e7      	b.n	800eb98 <_strtod_l+0x890>
 800ebc8:	ea53 030a 	orrs.w	r3, r3, sl
 800ebcc:	d099      	beq.n	800eb02 <_strtod_l+0x7fa>
 800ebce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebd0:	b1c3      	cbz	r3, 800ec04 <_strtod_l+0x8fc>
 800ebd2:	ea13 0f09 	tst.w	r3, r9
 800ebd6:	d0ee      	beq.n	800ebb6 <_strtod_l+0x8ae>
 800ebd8:	9a06      	ldr	r2, [sp, #24]
 800ebda:	4650      	mov	r0, sl
 800ebdc:	4659      	mov	r1, fp
 800ebde:	f1b8 0f00 	cmp.w	r8, #0
 800ebe2:	d013      	beq.n	800ec0c <_strtod_l+0x904>
 800ebe4:	f7ff fb75 	bl	800e2d2 <sulp>
 800ebe8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ebec:	ec5b ab17 	vmov	sl, fp, d7
 800ebf0:	e7e1      	b.n	800ebb6 <_strtod_l+0x8ae>
 800ebf2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ebf6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ebfa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ebfe:	f04f 3aff 	mov.w	sl, #4294967295
 800ec02:	e7d8      	b.n	800ebb6 <_strtod_l+0x8ae>
 800ec04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec06:	ea13 0f0a 	tst.w	r3, sl
 800ec0a:	e7e4      	b.n	800ebd6 <_strtod_l+0x8ce>
 800ec0c:	f7ff fb61 	bl	800e2d2 <sulp>
 800ec10:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ec14:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ec18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1c:	ec5b ab10 	vmov	sl, fp, d0
 800ec20:	d1c9      	bne.n	800ebb6 <_strtod_l+0x8ae>
 800ec22:	e615      	b.n	800e850 <_strtod_l+0x548>
 800ec24:	4629      	mov	r1, r5
 800ec26:	4620      	mov	r0, r4
 800ec28:	f7ff fae0 	bl	800e1ec <__ratio>
 800ec2c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ec30:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ec34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec38:	d85d      	bhi.n	800ecf6 <_strtod_l+0x9ee>
 800ec3a:	f1b8 0f00 	cmp.w	r8, #0
 800ec3e:	d164      	bne.n	800ed0a <_strtod_l+0xa02>
 800ec40:	f1ba 0f00 	cmp.w	sl, #0
 800ec44:	d14b      	bne.n	800ecde <_strtod_l+0x9d6>
 800ec46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec4a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d160      	bne.n	800ed14 <_strtod_l+0xa0c>
 800ec52:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ec56:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	d401      	bmi.n	800ec64 <_strtod_l+0x95c>
 800ec60:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ec64:	eeb1 ab48 	vneg.f64	d10, d8
 800ec68:	486e      	ldr	r0, [pc, #440]	@ (800ee24 <_strtod_l+0xb1c>)
 800ec6a:	4970      	ldr	r1, [pc, #448]	@ (800ee2c <_strtod_l+0xb24>)
 800ec6c:	ea09 0700 	and.w	r7, r9, r0
 800ec70:	428f      	cmp	r7, r1
 800ec72:	ec53 2b1a 	vmov	r2, r3, d10
 800ec76:	d17d      	bne.n	800ed74 <_strtod_l+0xa6c>
 800ec78:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ec7c:	ec4b ab1c 	vmov	d12, sl, fp
 800ec80:	eeb0 0b4c 	vmov.f64	d0, d12
 800ec84:	f7ff f9ea 	bl	800e05c <__ulp>
 800ec88:	4866      	ldr	r0, [pc, #408]	@ (800ee24 <_strtod_l+0xb1c>)
 800ec8a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ec8e:	ee1c 3a90 	vmov	r3, s25
 800ec92:	4a67      	ldr	r2, [pc, #412]	@ (800ee30 <_strtod_l+0xb28>)
 800ec94:	ea03 0100 	and.w	r1, r3, r0
 800ec98:	4291      	cmp	r1, r2
 800ec9a:	ec5b ab1c 	vmov	sl, fp, d12
 800ec9e:	d93c      	bls.n	800ed1a <_strtod_l+0xa12>
 800eca0:	ee19 2a90 	vmov	r2, s19
 800eca4:	4b60      	ldr	r3, [pc, #384]	@ (800ee28 <_strtod_l+0xb20>)
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d104      	bne.n	800ecb4 <_strtod_l+0x9ac>
 800ecaa:	ee19 3a10 	vmov	r3, s18
 800ecae:	3301      	adds	r3, #1
 800ecb0:	f43f ad3a 	beq.w	800e728 <_strtod_l+0x420>
 800ecb4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ee28 <_strtod_l+0xb20>
 800ecb8:	f04f 3aff 	mov.w	sl, #4294967295
 800ecbc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ecbe:	9805      	ldr	r0, [sp, #20]
 800ecc0:	f7fe fe98 	bl	800d9f4 <_Bfree>
 800ecc4:	9805      	ldr	r0, [sp, #20]
 800ecc6:	4631      	mov	r1, r6
 800ecc8:	f7fe fe94 	bl	800d9f4 <_Bfree>
 800eccc:	9805      	ldr	r0, [sp, #20]
 800ecce:	4629      	mov	r1, r5
 800ecd0:	f7fe fe90 	bl	800d9f4 <_Bfree>
 800ecd4:	9805      	ldr	r0, [sp, #20]
 800ecd6:	4621      	mov	r1, r4
 800ecd8:	f7fe fe8c 	bl	800d9f4 <_Bfree>
 800ecdc:	e625      	b.n	800e92a <_strtod_l+0x622>
 800ecde:	f1ba 0f01 	cmp.w	sl, #1
 800ece2:	d103      	bne.n	800ecec <_strtod_l+0x9e4>
 800ece4:	f1bb 0f00 	cmp.w	fp, #0
 800ece8:	f43f adb2 	beq.w	800e850 <_strtod_l+0x548>
 800ecec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ecf0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ecf4:	e7b8      	b.n	800ec68 <_strtod_l+0x960>
 800ecf6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ecfa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ecfe:	f1b8 0f00 	cmp.w	r8, #0
 800ed02:	d0af      	beq.n	800ec64 <_strtod_l+0x95c>
 800ed04:	eeb0 ab48 	vmov.f64	d10, d8
 800ed08:	e7ae      	b.n	800ec68 <_strtod_l+0x960>
 800ed0a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ed0e:	eeb0 8b4a 	vmov.f64	d8, d10
 800ed12:	e7a9      	b.n	800ec68 <_strtod_l+0x960>
 800ed14:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ed18:	e7a6      	b.n	800ec68 <_strtod_l+0x960>
 800ed1a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ed1e:	9b06      	ldr	r3, [sp, #24]
 800ed20:	46d9      	mov	r9, fp
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1ca      	bne.n	800ecbc <_strtod_l+0x9b4>
 800ed26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed2a:	0d1b      	lsrs	r3, r3, #20
 800ed2c:	051b      	lsls	r3, r3, #20
 800ed2e:	429f      	cmp	r7, r3
 800ed30:	d1c4      	bne.n	800ecbc <_strtod_l+0x9b4>
 800ed32:	ec51 0b18 	vmov	r0, r1, d8
 800ed36:	f7f1 fcff 	bl	8000738 <__aeabi_d2lz>
 800ed3a:	f7f1 fcb7 	bl	80006ac <__aeabi_l2d>
 800ed3e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ed42:	ec41 0b17 	vmov	d7, r0, r1
 800ed46:	ea49 090a 	orr.w	r9, r9, sl
 800ed4a:	ea59 0908 	orrs.w	r9, r9, r8
 800ed4e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ed52:	d03c      	beq.n	800edce <_strtod_l+0xac6>
 800ed54:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ee08 <_strtod_l+0xb00>
 800ed58:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ed5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed60:	f53f aced 	bmi.w	800e73e <_strtod_l+0x436>
 800ed64:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ee10 <_strtod_l+0xb08>
 800ed68:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ed6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed70:	dda4      	ble.n	800ecbc <_strtod_l+0x9b4>
 800ed72:	e4e4      	b.n	800e73e <_strtod_l+0x436>
 800ed74:	9906      	ldr	r1, [sp, #24]
 800ed76:	b1e1      	cbz	r1, 800edb2 <_strtod_l+0xaaa>
 800ed78:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ed7c:	d819      	bhi.n	800edb2 <_strtod_l+0xaaa>
 800ed7e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ed82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed86:	d811      	bhi.n	800edac <_strtod_l+0xaa4>
 800ed88:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ed8c:	ee18 3a10 	vmov	r3, s16
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	bf38      	it	cc
 800ed94:	2301      	movcc	r3, #1
 800ed96:	ee08 3a10 	vmov	s16, r3
 800ed9a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ed9e:	f1b8 0f00 	cmp.w	r8, #0
 800eda2:	d111      	bne.n	800edc8 <_strtod_l+0xac0>
 800eda4:	eeb1 7b48 	vneg.f64	d7, d8
 800eda8:	ec53 2b17 	vmov	r2, r3, d7
 800edac:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800edb0:	1bcb      	subs	r3, r1, r7
 800edb2:	eeb0 0b49 	vmov.f64	d0, d9
 800edb6:	ec43 2b1a 	vmov	d10, r2, r3
 800edba:	f7ff f94f 	bl	800e05c <__ulp>
 800edbe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800edc2:	ec5b ab19 	vmov	sl, fp, d9
 800edc6:	e7aa      	b.n	800ed1e <_strtod_l+0xa16>
 800edc8:	eeb0 7b48 	vmov.f64	d7, d8
 800edcc:	e7ec      	b.n	800eda8 <_strtod_l+0xaa0>
 800edce:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ee18 <_strtod_l+0xb10>
 800edd2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800edd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edda:	f57f af6f 	bpl.w	800ecbc <_strtod_l+0x9b4>
 800edde:	e4ae      	b.n	800e73e <_strtod_l+0x436>
 800ede0:	2300      	movs	r3, #0
 800ede2:	9308      	str	r3, [sp, #32]
 800ede4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ede6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ede8:	6013      	str	r3, [r2, #0]
 800edea:	f7ff bacc 	b.w	800e386 <_strtod_l+0x7e>
 800edee:	2a65      	cmp	r2, #101	@ 0x65
 800edf0:	f43f abbc 	beq.w	800e56c <_strtod_l+0x264>
 800edf4:	2a45      	cmp	r2, #69	@ 0x45
 800edf6:	f43f abb9 	beq.w	800e56c <_strtod_l+0x264>
 800edfa:	2301      	movs	r3, #1
 800edfc:	9306      	str	r3, [sp, #24]
 800edfe:	f7ff bbf0 	b.w	800e5e2 <_strtod_l+0x2da>
 800ee02:	bf00      	nop
 800ee04:	f3af 8000 	nop.w
 800ee08:	94a03595 	.word	0x94a03595
 800ee0c:	3fdfffff 	.word	0x3fdfffff
 800ee10:	35afe535 	.word	0x35afe535
 800ee14:	3fe00000 	.word	0x3fe00000
 800ee18:	94a03595 	.word	0x94a03595
 800ee1c:	3fcfffff 	.word	0x3fcfffff
 800ee20:	000fffff 	.word	0x000fffff
 800ee24:	7ff00000 	.word	0x7ff00000
 800ee28:	7fefffff 	.word	0x7fefffff
 800ee2c:	7fe00000 	.word	0x7fe00000
 800ee30:	7c9fffff 	.word	0x7c9fffff

0800ee34 <_strtod_r>:
 800ee34:	4b01      	ldr	r3, [pc, #4]	@ (800ee3c <_strtod_r+0x8>)
 800ee36:	f7ff ba67 	b.w	800e308 <_strtod_l>
 800ee3a:	bf00      	nop
 800ee3c:	24000070 	.word	0x24000070

0800ee40 <_strtol_l.constprop.0>:
 800ee40:	2b24      	cmp	r3, #36	@ 0x24
 800ee42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee46:	4686      	mov	lr, r0
 800ee48:	4690      	mov	r8, r2
 800ee4a:	d801      	bhi.n	800ee50 <_strtol_l.constprop.0+0x10>
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d106      	bne.n	800ee5e <_strtol_l.constprop.0+0x1e>
 800ee50:	f7fd fe7e 	bl	800cb50 <__errno>
 800ee54:	2316      	movs	r3, #22
 800ee56:	6003      	str	r3, [r0, #0]
 800ee58:	2000      	movs	r0, #0
 800ee5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5e:	4834      	ldr	r0, [pc, #208]	@ (800ef30 <_strtol_l.constprop.0+0xf0>)
 800ee60:	460d      	mov	r5, r1
 800ee62:	462a      	mov	r2, r5
 800ee64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee68:	5d06      	ldrb	r6, [r0, r4]
 800ee6a:	f016 0608 	ands.w	r6, r6, #8
 800ee6e:	d1f8      	bne.n	800ee62 <_strtol_l.constprop.0+0x22>
 800ee70:	2c2d      	cmp	r4, #45	@ 0x2d
 800ee72:	d12d      	bne.n	800eed0 <_strtol_l.constprop.0+0x90>
 800ee74:	782c      	ldrb	r4, [r5, #0]
 800ee76:	2601      	movs	r6, #1
 800ee78:	1c95      	adds	r5, r2, #2
 800ee7a:	f033 0210 	bics.w	r2, r3, #16
 800ee7e:	d109      	bne.n	800ee94 <_strtol_l.constprop.0+0x54>
 800ee80:	2c30      	cmp	r4, #48	@ 0x30
 800ee82:	d12a      	bne.n	800eeda <_strtol_l.constprop.0+0x9a>
 800ee84:	782a      	ldrb	r2, [r5, #0]
 800ee86:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ee8a:	2a58      	cmp	r2, #88	@ 0x58
 800ee8c:	d125      	bne.n	800eeda <_strtol_l.constprop.0+0x9a>
 800ee8e:	786c      	ldrb	r4, [r5, #1]
 800ee90:	2310      	movs	r3, #16
 800ee92:	3502      	adds	r5, #2
 800ee94:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ee98:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	fbbc f9f3 	udiv	r9, ip, r3
 800eea2:	4610      	mov	r0, r2
 800eea4:	fb03 ca19 	mls	sl, r3, r9, ip
 800eea8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800eeac:	2f09      	cmp	r7, #9
 800eeae:	d81b      	bhi.n	800eee8 <_strtol_l.constprop.0+0xa8>
 800eeb0:	463c      	mov	r4, r7
 800eeb2:	42a3      	cmp	r3, r4
 800eeb4:	dd27      	ble.n	800ef06 <_strtol_l.constprop.0+0xc6>
 800eeb6:	1c57      	adds	r7, r2, #1
 800eeb8:	d007      	beq.n	800eeca <_strtol_l.constprop.0+0x8a>
 800eeba:	4581      	cmp	r9, r0
 800eebc:	d320      	bcc.n	800ef00 <_strtol_l.constprop.0+0xc0>
 800eebe:	d101      	bne.n	800eec4 <_strtol_l.constprop.0+0x84>
 800eec0:	45a2      	cmp	sl, r4
 800eec2:	db1d      	blt.n	800ef00 <_strtol_l.constprop.0+0xc0>
 800eec4:	fb00 4003 	mla	r0, r0, r3, r4
 800eec8:	2201      	movs	r2, #1
 800eeca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eece:	e7eb      	b.n	800eea8 <_strtol_l.constprop.0+0x68>
 800eed0:	2c2b      	cmp	r4, #43	@ 0x2b
 800eed2:	bf04      	itt	eq
 800eed4:	782c      	ldrbeq	r4, [r5, #0]
 800eed6:	1c95      	addeq	r5, r2, #2
 800eed8:	e7cf      	b.n	800ee7a <_strtol_l.constprop.0+0x3a>
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1da      	bne.n	800ee94 <_strtol_l.constprop.0+0x54>
 800eede:	2c30      	cmp	r4, #48	@ 0x30
 800eee0:	bf0c      	ite	eq
 800eee2:	2308      	moveq	r3, #8
 800eee4:	230a      	movne	r3, #10
 800eee6:	e7d5      	b.n	800ee94 <_strtol_l.constprop.0+0x54>
 800eee8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eeec:	2f19      	cmp	r7, #25
 800eeee:	d801      	bhi.n	800eef4 <_strtol_l.constprop.0+0xb4>
 800eef0:	3c37      	subs	r4, #55	@ 0x37
 800eef2:	e7de      	b.n	800eeb2 <_strtol_l.constprop.0+0x72>
 800eef4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800eef8:	2f19      	cmp	r7, #25
 800eefa:	d804      	bhi.n	800ef06 <_strtol_l.constprop.0+0xc6>
 800eefc:	3c57      	subs	r4, #87	@ 0x57
 800eefe:	e7d8      	b.n	800eeb2 <_strtol_l.constprop.0+0x72>
 800ef00:	f04f 32ff 	mov.w	r2, #4294967295
 800ef04:	e7e1      	b.n	800eeca <_strtol_l.constprop.0+0x8a>
 800ef06:	1c53      	adds	r3, r2, #1
 800ef08:	d108      	bne.n	800ef1c <_strtol_l.constprop.0+0xdc>
 800ef0a:	2322      	movs	r3, #34	@ 0x22
 800ef0c:	f8ce 3000 	str.w	r3, [lr]
 800ef10:	4660      	mov	r0, ip
 800ef12:	f1b8 0f00 	cmp.w	r8, #0
 800ef16:	d0a0      	beq.n	800ee5a <_strtol_l.constprop.0+0x1a>
 800ef18:	1e69      	subs	r1, r5, #1
 800ef1a:	e006      	b.n	800ef2a <_strtol_l.constprop.0+0xea>
 800ef1c:	b106      	cbz	r6, 800ef20 <_strtol_l.constprop.0+0xe0>
 800ef1e:	4240      	negs	r0, r0
 800ef20:	f1b8 0f00 	cmp.w	r8, #0
 800ef24:	d099      	beq.n	800ee5a <_strtol_l.constprop.0+0x1a>
 800ef26:	2a00      	cmp	r2, #0
 800ef28:	d1f6      	bne.n	800ef18 <_strtol_l.constprop.0+0xd8>
 800ef2a:	f8c8 1000 	str.w	r1, [r8]
 800ef2e:	e794      	b.n	800ee5a <_strtol_l.constprop.0+0x1a>
 800ef30:	080108f9 	.word	0x080108f9

0800ef34 <_strtol_r>:
 800ef34:	f7ff bf84 	b.w	800ee40 <_strtol_l.constprop.0>

0800ef38 <__ssputs_r>:
 800ef38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef3c:	688e      	ldr	r6, [r1, #8]
 800ef3e:	461f      	mov	r7, r3
 800ef40:	42be      	cmp	r6, r7
 800ef42:	680b      	ldr	r3, [r1, #0]
 800ef44:	4682      	mov	sl, r0
 800ef46:	460c      	mov	r4, r1
 800ef48:	4690      	mov	r8, r2
 800ef4a:	d82d      	bhi.n	800efa8 <__ssputs_r+0x70>
 800ef4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef54:	d026      	beq.n	800efa4 <__ssputs_r+0x6c>
 800ef56:	6965      	ldr	r5, [r4, #20]
 800ef58:	6909      	ldr	r1, [r1, #16]
 800ef5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef5e:	eba3 0901 	sub.w	r9, r3, r1
 800ef62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef66:	1c7b      	adds	r3, r7, #1
 800ef68:	444b      	add	r3, r9
 800ef6a:	106d      	asrs	r5, r5, #1
 800ef6c:	429d      	cmp	r5, r3
 800ef6e:	bf38      	it	cc
 800ef70:	461d      	movcc	r5, r3
 800ef72:	0553      	lsls	r3, r2, #21
 800ef74:	d527      	bpl.n	800efc6 <__ssputs_r+0x8e>
 800ef76:	4629      	mov	r1, r5
 800ef78:	f7fe fc70 	bl	800d85c <_malloc_r>
 800ef7c:	4606      	mov	r6, r0
 800ef7e:	b360      	cbz	r0, 800efda <__ssputs_r+0xa2>
 800ef80:	6921      	ldr	r1, [r4, #16]
 800ef82:	464a      	mov	r2, r9
 800ef84:	f000 fa18 	bl	800f3b8 <memcpy>
 800ef88:	89a3      	ldrh	r3, [r4, #12]
 800ef8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef92:	81a3      	strh	r3, [r4, #12]
 800ef94:	6126      	str	r6, [r4, #16]
 800ef96:	6165      	str	r5, [r4, #20]
 800ef98:	444e      	add	r6, r9
 800ef9a:	eba5 0509 	sub.w	r5, r5, r9
 800ef9e:	6026      	str	r6, [r4, #0]
 800efa0:	60a5      	str	r5, [r4, #8]
 800efa2:	463e      	mov	r6, r7
 800efa4:	42be      	cmp	r6, r7
 800efa6:	d900      	bls.n	800efaa <__ssputs_r+0x72>
 800efa8:	463e      	mov	r6, r7
 800efaa:	6820      	ldr	r0, [r4, #0]
 800efac:	4632      	mov	r2, r6
 800efae:	4641      	mov	r1, r8
 800efb0:	f000 f9c6 	bl	800f340 <memmove>
 800efb4:	68a3      	ldr	r3, [r4, #8]
 800efb6:	1b9b      	subs	r3, r3, r6
 800efb8:	60a3      	str	r3, [r4, #8]
 800efba:	6823      	ldr	r3, [r4, #0]
 800efbc:	4433      	add	r3, r6
 800efbe:	6023      	str	r3, [r4, #0]
 800efc0:	2000      	movs	r0, #0
 800efc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efc6:	462a      	mov	r2, r5
 800efc8:	f000 fd8b 	bl	800fae2 <_realloc_r>
 800efcc:	4606      	mov	r6, r0
 800efce:	2800      	cmp	r0, #0
 800efd0:	d1e0      	bne.n	800ef94 <__ssputs_r+0x5c>
 800efd2:	6921      	ldr	r1, [r4, #16]
 800efd4:	4650      	mov	r0, sl
 800efd6:	f7fe fbcd 	bl	800d774 <_free_r>
 800efda:	230c      	movs	r3, #12
 800efdc:	f8ca 3000 	str.w	r3, [sl]
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efe6:	81a3      	strh	r3, [r4, #12]
 800efe8:	f04f 30ff 	mov.w	r0, #4294967295
 800efec:	e7e9      	b.n	800efc2 <__ssputs_r+0x8a>
	...

0800eff0 <_svfiprintf_r>:
 800eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff4:	4698      	mov	r8, r3
 800eff6:	898b      	ldrh	r3, [r1, #12]
 800eff8:	061b      	lsls	r3, r3, #24
 800effa:	b09d      	sub	sp, #116	@ 0x74
 800effc:	4607      	mov	r7, r0
 800effe:	460d      	mov	r5, r1
 800f000:	4614      	mov	r4, r2
 800f002:	d510      	bpl.n	800f026 <_svfiprintf_r+0x36>
 800f004:	690b      	ldr	r3, [r1, #16]
 800f006:	b973      	cbnz	r3, 800f026 <_svfiprintf_r+0x36>
 800f008:	2140      	movs	r1, #64	@ 0x40
 800f00a:	f7fe fc27 	bl	800d85c <_malloc_r>
 800f00e:	6028      	str	r0, [r5, #0]
 800f010:	6128      	str	r0, [r5, #16]
 800f012:	b930      	cbnz	r0, 800f022 <_svfiprintf_r+0x32>
 800f014:	230c      	movs	r3, #12
 800f016:	603b      	str	r3, [r7, #0]
 800f018:	f04f 30ff 	mov.w	r0, #4294967295
 800f01c:	b01d      	add	sp, #116	@ 0x74
 800f01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f022:	2340      	movs	r3, #64	@ 0x40
 800f024:	616b      	str	r3, [r5, #20]
 800f026:	2300      	movs	r3, #0
 800f028:	9309      	str	r3, [sp, #36]	@ 0x24
 800f02a:	2320      	movs	r3, #32
 800f02c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f030:	f8cd 800c 	str.w	r8, [sp, #12]
 800f034:	2330      	movs	r3, #48	@ 0x30
 800f036:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f1d4 <_svfiprintf_r+0x1e4>
 800f03a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f03e:	f04f 0901 	mov.w	r9, #1
 800f042:	4623      	mov	r3, r4
 800f044:	469a      	mov	sl, r3
 800f046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f04a:	b10a      	cbz	r2, 800f050 <_svfiprintf_r+0x60>
 800f04c:	2a25      	cmp	r2, #37	@ 0x25
 800f04e:	d1f9      	bne.n	800f044 <_svfiprintf_r+0x54>
 800f050:	ebba 0b04 	subs.w	fp, sl, r4
 800f054:	d00b      	beq.n	800f06e <_svfiprintf_r+0x7e>
 800f056:	465b      	mov	r3, fp
 800f058:	4622      	mov	r2, r4
 800f05a:	4629      	mov	r1, r5
 800f05c:	4638      	mov	r0, r7
 800f05e:	f7ff ff6b 	bl	800ef38 <__ssputs_r>
 800f062:	3001      	adds	r0, #1
 800f064:	f000 80a7 	beq.w	800f1b6 <_svfiprintf_r+0x1c6>
 800f068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f06a:	445a      	add	r2, fp
 800f06c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f06e:	f89a 3000 	ldrb.w	r3, [sl]
 800f072:	2b00      	cmp	r3, #0
 800f074:	f000 809f 	beq.w	800f1b6 <_svfiprintf_r+0x1c6>
 800f078:	2300      	movs	r3, #0
 800f07a:	f04f 32ff 	mov.w	r2, #4294967295
 800f07e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f082:	f10a 0a01 	add.w	sl, sl, #1
 800f086:	9304      	str	r3, [sp, #16]
 800f088:	9307      	str	r3, [sp, #28]
 800f08a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f08e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f090:	4654      	mov	r4, sl
 800f092:	2205      	movs	r2, #5
 800f094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f098:	484e      	ldr	r0, [pc, #312]	@ (800f1d4 <_svfiprintf_r+0x1e4>)
 800f09a:	f7f1 f921 	bl	80002e0 <memchr>
 800f09e:	9a04      	ldr	r2, [sp, #16]
 800f0a0:	b9d8      	cbnz	r0, 800f0da <_svfiprintf_r+0xea>
 800f0a2:	06d0      	lsls	r0, r2, #27
 800f0a4:	bf44      	itt	mi
 800f0a6:	2320      	movmi	r3, #32
 800f0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0ac:	0711      	lsls	r1, r2, #28
 800f0ae:	bf44      	itt	mi
 800f0b0:	232b      	movmi	r3, #43	@ 0x2b
 800f0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0b6:	f89a 3000 	ldrb.w	r3, [sl]
 800f0ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0bc:	d015      	beq.n	800f0ea <_svfiprintf_r+0xfa>
 800f0be:	9a07      	ldr	r2, [sp, #28]
 800f0c0:	4654      	mov	r4, sl
 800f0c2:	2000      	movs	r0, #0
 800f0c4:	f04f 0c0a 	mov.w	ip, #10
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0ce:	3b30      	subs	r3, #48	@ 0x30
 800f0d0:	2b09      	cmp	r3, #9
 800f0d2:	d94b      	bls.n	800f16c <_svfiprintf_r+0x17c>
 800f0d4:	b1b0      	cbz	r0, 800f104 <_svfiprintf_r+0x114>
 800f0d6:	9207      	str	r2, [sp, #28]
 800f0d8:	e014      	b.n	800f104 <_svfiprintf_r+0x114>
 800f0da:	eba0 0308 	sub.w	r3, r0, r8
 800f0de:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	9304      	str	r3, [sp, #16]
 800f0e6:	46a2      	mov	sl, r4
 800f0e8:	e7d2      	b.n	800f090 <_svfiprintf_r+0xa0>
 800f0ea:	9b03      	ldr	r3, [sp, #12]
 800f0ec:	1d19      	adds	r1, r3, #4
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	9103      	str	r1, [sp, #12]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	bfbb      	ittet	lt
 800f0f6:	425b      	neglt	r3, r3
 800f0f8:	f042 0202 	orrlt.w	r2, r2, #2
 800f0fc:	9307      	strge	r3, [sp, #28]
 800f0fe:	9307      	strlt	r3, [sp, #28]
 800f100:	bfb8      	it	lt
 800f102:	9204      	strlt	r2, [sp, #16]
 800f104:	7823      	ldrb	r3, [r4, #0]
 800f106:	2b2e      	cmp	r3, #46	@ 0x2e
 800f108:	d10a      	bne.n	800f120 <_svfiprintf_r+0x130>
 800f10a:	7863      	ldrb	r3, [r4, #1]
 800f10c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f10e:	d132      	bne.n	800f176 <_svfiprintf_r+0x186>
 800f110:	9b03      	ldr	r3, [sp, #12]
 800f112:	1d1a      	adds	r2, r3, #4
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	9203      	str	r2, [sp, #12]
 800f118:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f11c:	3402      	adds	r4, #2
 800f11e:	9305      	str	r3, [sp, #20]
 800f120:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f1e4 <_svfiprintf_r+0x1f4>
 800f124:	7821      	ldrb	r1, [r4, #0]
 800f126:	2203      	movs	r2, #3
 800f128:	4650      	mov	r0, sl
 800f12a:	f7f1 f8d9 	bl	80002e0 <memchr>
 800f12e:	b138      	cbz	r0, 800f140 <_svfiprintf_r+0x150>
 800f130:	9b04      	ldr	r3, [sp, #16]
 800f132:	eba0 000a 	sub.w	r0, r0, sl
 800f136:	2240      	movs	r2, #64	@ 0x40
 800f138:	4082      	lsls	r2, r0
 800f13a:	4313      	orrs	r3, r2
 800f13c:	3401      	adds	r4, #1
 800f13e:	9304      	str	r3, [sp, #16]
 800f140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f144:	4824      	ldr	r0, [pc, #144]	@ (800f1d8 <_svfiprintf_r+0x1e8>)
 800f146:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f14a:	2206      	movs	r2, #6
 800f14c:	f7f1 f8c8 	bl	80002e0 <memchr>
 800f150:	2800      	cmp	r0, #0
 800f152:	d036      	beq.n	800f1c2 <_svfiprintf_r+0x1d2>
 800f154:	4b21      	ldr	r3, [pc, #132]	@ (800f1dc <_svfiprintf_r+0x1ec>)
 800f156:	bb1b      	cbnz	r3, 800f1a0 <_svfiprintf_r+0x1b0>
 800f158:	9b03      	ldr	r3, [sp, #12]
 800f15a:	3307      	adds	r3, #7
 800f15c:	f023 0307 	bic.w	r3, r3, #7
 800f160:	3308      	adds	r3, #8
 800f162:	9303      	str	r3, [sp, #12]
 800f164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f166:	4433      	add	r3, r6
 800f168:	9309      	str	r3, [sp, #36]	@ 0x24
 800f16a:	e76a      	b.n	800f042 <_svfiprintf_r+0x52>
 800f16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f170:	460c      	mov	r4, r1
 800f172:	2001      	movs	r0, #1
 800f174:	e7a8      	b.n	800f0c8 <_svfiprintf_r+0xd8>
 800f176:	2300      	movs	r3, #0
 800f178:	3401      	adds	r4, #1
 800f17a:	9305      	str	r3, [sp, #20]
 800f17c:	4619      	mov	r1, r3
 800f17e:	f04f 0c0a 	mov.w	ip, #10
 800f182:	4620      	mov	r0, r4
 800f184:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f188:	3a30      	subs	r2, #48	@ 0x30
 800f18a:	2a09      	cmp	r2, #9
 800f18c:	d903      	bls.n	800f196 <_svfiprintf_r+0x1a6>
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d0c6      	beq.n	800f120 <_svfiprintf_r+0x130>
 800f192:	9105      	str	r1, [sp, #20]
 800f194:	e7c4      	b.n	800f120 <_svfiprintf_r+0x130>
 800f196:	fb0c 2101 	mla	r1, ip, r1, r2
 800f19a:	4604      	mov	r4, r0
 800f19c:	2301      	movs	r3, #1
 800f19e:	e7f0      	b.n	800f182 <_svfiprintf_r+0x192>
 800f1a0:	ab03      	add	r3, sp, #12
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	462a      	mov	r2, r5
 800f1a6:	4b0e      	ldr	r3, [pc, #56]	@ (800f1e0 <_svfiprintf_r+0x1f0>)
 800f1a8:	a904      	add	r1, sp, #16
 800f1aa:	4638      	mov	r0, r7
 800f1ac:	f7fc fd70 	bl	800bc90 <_printf_float>
 800f1b0:	1c42      	adds	r2, r0, #1
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	d1d6      	bne.n	800f164 <_svfiprintf_r+0x174>
 800f1b6:	89ab      	ldrh	r3, [r5, #12]
 800f1b8:	065b      	lsls	r3, r3, #25
 800f1ba:	f53f af2d 	bmi.w	800f018 <_svfiprintf_r+0x28>
 800f1be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1c0:	e72c      	b.n	800f01c <_svfiprintf_r+0x2c>
 800f1c2:	ab03      	add	r3, sp, #12
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	462a      	mov	r2, r5
 800f1c8:	4b05      	ldr	r3, [pc, #20]	@ (800f1e0 <_svfiprintf_r+0x1f0>)
 800f1ca:	a904      	add	r1, sp, #16
 800f1cc:	4638      	mov	r0, r7
 800f1ce:	f7fc ffe7 	bl	800c1a0 <_printf_i>
 800f1d2:	e7ed      	b.n	800f1b0 <_svfiprintf_r+0x1c0>
 800f1d4:	080109f9 	.word	0x080109f9
 800f1d8:	08010a03 	.word	0x08010a03
 800f1dc:	0800bc91 	.word	0x0800bc91
 800f1e0:	0800ef39 	.word	0x0800ef39
 800f1e4:	080109ff 	.word	0x080109ff

0800f1e8 <__sflush_r>:
 800f1e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f0:	0716      	lsls	r6, r2, #28
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	460c      	mov	r4, r1
 800f1f6:	d454      	bmi.n	800f2a2 <__sflush_r+0xba>
 800f1f8:	684b      	ldr	r3, [r1, #4]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	dc02      	bgt.n	800f204 <__sflush_r+0x1c>
 800f1fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f200:	2b00      	cmp	r3, #0
 800f202:	dd48      	ble.n	800f296 <__sflush_r+0xae>
 800f204:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f206:	2e00      	cmp	r6, #0
 800f208:	d045      	beq.n	800f296 <__sflush_r+0xae>
 800f20a:	2300      	movs	r3, #0
 800f20c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f210:	682f      	ldr	r7, [r5, #0]
 800f212:	6a21      	ldr	r1, [r4, #32]
 800f214:	602b      	str	r3, [r5, #0]
 800f216:	d030      	beq.n	800f27a <__sflush_r+0x92>
 800f218:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	0759      	lsls	r1, r3, #29
 800f21e:	d505      	bpl.n	800f22c <__sflush_r+0x44>
 800f220:	6863      	ldr	r3, [r4, #4]
 800f222:	1ad2      	subs	r2, r2, r3
 800f224:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f226:	b10b      	cbz	r3, 800f22c <__sflush_r+0x44>
 800f228:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f22a:	1ad2      	subs	r2, r2, r3
 800f22c:	2300      	movs	r3, #0
 800f22e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f230:	6a21      	ldr	r1, [r4, #32]
 800f232:	4628      	mov	r0, r5
 800f234:	47b0      	blx	r6
 800f236:	1c43      	adds	r3, r0, #1
 800f238:	89a3      	ldrh	r3, [r4, #12]
 800f23a:	d106      	bne.n	800f24a <__sflush_r+0x62>
 800f23c:	6829      	ldr	r1, [r5, #0]
 800f23e:	291d      	cmp	r1, #29
 800f240:	d82b      	bhi.n	800f29a <__sflush_r+0xb2>
 800f242:	4a2a      	ldr	r2, [pc, #168]	@ (800f2ec <__sflush_r+0x104>)
 800f244:	410a      	asrs	r2, r1
 800f246:	07d6      	lsls	r6, r2, #31
 800f248:	d427      	bmi.n	800f29a <__sflush_r+0xb2>
 800f24a:	2200      	movs	r2, #0
 800f24c:	6062      	str	r2, [r4, #4]
 800f24e:	04d9      	lsls	r1, r3, #19
 800f250:	6922      	ldr	r2, [r4, #16]
 800f252:	6022      	str	r2, [r4, #0]
 800f254:	d504      	bpl.n	800f260 <__sflush_r+0x78>
 800f256:	1c42      	adds	r2, r0, #1
 800f258:	d101      	bne.n	800f25e <__sflush_r+0x76>
 800f25a:	682b      	ldr	r3, [r5, #0]
 800f25c:	b903      	cbnz	r3, 800f260 <__sflush_r+0x78>
 800f25e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f262:	602f      	str	r7, [r5, #0]
 800f264:	b1b9      	cbz	r1, 800f296 <__sflush_r+0xae>
 800f266:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f26a:	4299      	cmp	r1, r3
 800f26c:	d002      	beq.n	800f274 <__sflush_r+0x8c>
 800f26e:	4628      	mov	r0, r5
 800f270:	f7fe fa80 	bl	800d774 <_free_r>
 800f274:	2300      	movs	r3, #0
 800f276:	6363      	str	r3, [r4, #52]	@ 0x34
 800f278:	e00d      	b.n	800f296 <__sflush_r+0xae>
 800f27a:	2301      	movs	r3, #1
 800f27c:	4628      	mov	r0, r5
 800f27e:	47b0      	blx	r6
 800f280:	4602      	mov	r2, r0
 800f282:	1c50      	adds	r0, r2, #1
 800f284:	d1c9      	bne.n	800f21a <__sflush_r+0x32>
 800f286:	682b      	ldr	r3, [r5, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d0c6      	beq.n	800f21a <__sflush_r+0x32>
 800f28c:	2b1d      	cmp	r3, #29
 800f28e:	d001      	beq.n	800f294 <__sflush_r+0xac>
 800f290:	2b16      	cmp	r3, #22
 800f292:	d11e      	bne.n	800f2d2 <__sflush_r+0xea>
 800f294:	602f      	str	r7, [r5, #0]
 800f296:	2000      	movs	r0, #0
 800f298:	e022      	b.n	800f2e0 <__sflush_r+0xf8>
 800f29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f29e:	b21b      	sxth	r3, r3
 800f2a0:	e01b      	b.n	800f2da <__sflush_r+0xf2>
 800f2a2:	690f      	ldr	r7, [r1, #16]
 800f2a4:	2f00      	cmp	r7, #0
 800f2a6:	d0f6      	beq.n	800f296 <__sflush_r+0xae>
 800f2a8:	0793      	lsls	r3, r2, #30
 800f2aa:	680e      	ldr	r6, [r1, #0]
 800f2ac:	bf08      	it	eq
 800f2ae:	694b      	ldreq	r3, [r1, #20]
 800f2b0:	600f      	str	r7, [r1, #0]
 800f2b2:	bf18      	it	ne
 800f2b4:	2300      	movne	r3, #0
 800f2b6:	eba6 0807 	sub.w	r8, r6, r7
 800f2ba:	608b      	str	r3, [r1, #8]
 800f2bc:	f1b8 0f00 	cmp.w	r8, #0
 800f2c0:	dde9      	ble.n	800f296 <__sflush_r+0xae>
 800f2c2:	6a21      	ldr	r1, [r4, #32]
 800f2c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f2c6:	4643      	mov	r3, r8
 800f2c8:	463a      	mov	r2, r7
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	47b0      	blx	r6
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	dc08      	bgt.n	800f2e4 <__sflush_r+0xfc>
 800f2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2da:	81a3      	strh	r3, [r4, #12]
 800f2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e4:	4407      	add	r7, r0
 800f2e6:	eba8 0800 	sub.w	r8, r8, r0
 800f2ea:	e7e7      	b.n	800f2bc <__sflush_r+0xd4>
 800f2ec:	dfbffffe 	.word	0xdfbffffe

0800f2f0 <_fflush_r>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	690b      	ldr	r3, [r1, #16]
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	b913      	cbnz	r3, 800f300 <_fflush_r+0x10>
 800f2fa:	2500      	movs	r5, #0
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	bd38      	pop	{r3, r4, r5, pc}
 800f300:	b118      	cbz	r0, 800f30a <_fflush_r+0x1a>
 800f302:	6a03      	ldr	r3, [r0, #32]
 800f304:	b90b      	cbnz	r3, 800f30a <_fflush_r+0x1a>
 800f306:	f7fd fb03 	bl	800c910 <__sinit>
 800f30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d0f3      	beq.n	800f2fa <_fflush_r+0xa>
 800f312:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f314:	07d0      	lsls	r0, r2, #31
 800f316:	d404      	bmi.n	800f322 <_fflush_r+0x32>
 800f318:	0599      	lsls	r1, r3, #22
 800f31a:	d402      	bmi.n	800f322 <_fflush_r+0x32>
 800f31c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f31e:	f7fd fc42 	bl	800cba6 <__retarget_lock_acquire_recursive>
 800f322:	4628      	mov	r0, r5
 800f324:	4621      	mov	r1, r4
 800f326:	f7ff ff5f 	bl	800f1e8 <__sflush_r>
 800f32a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f32c:	07da      	lsls	r2, r3, #31
 800f32e:	4605      	mov	r5, r0
 800f330:	d4e4      	bmi.n	800f2fc <_fflush_r+0xc>
 800f332:	89a3      	ldrh	r3, [r4, #12]
 800f334:	059b      	lsls	r3, r3, #22
 800f336:	d4e1      	bmi.n	800f2fc <_fflush_r+0xc>
 800f338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f33a:	f7fd fc35 	bl	800cba8 <__retarget_lock_release_recursive>
 800f33e:	e7dd      	b.n	800f2fc <_fflush_r+0xc>

0800f340 <memmove>:
 800f340:	4288      	cmp	r0, r1
 800f342:	b510      	push	{r4, lr}
 800f344:	eb01 0402 	add.w	r4, r1, r2
 800f348:	d902      	bls.n	800f350 <memmove+0x10>
 800f34a:	4284      	cmp	r4, r0
 800f34c:	4623      	mov	r3, r4
 800f34e:	d807      	bhi.n	800f360 <memmove+0x20>
 800f350:	1e43      	subs	r3, r0, #1
 800f352:	42a1      	cmp	r1, r4
 800f354:	d008      	beq.n	800f368 <memmove+0x28>
 800f356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f35a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f35e:	e7f8      	b.n	800f352 <memmove+0x12>
 800f360:	4402      	add	r2, r0
 800f362:	4601      	mov	r1, r0
 800f364:	428a      	cmp	r2, r1
 800f366:	d100      	bne.n	800f36a <memmove+0x2a>
 800f368:	bd10      	pop	{r4, pc}
 800f36a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f36e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f372:	e7f7      	b.n	800f364 <memmove+0x24>

0800f374 <strncmp>:
 800f374:	b510      	push	{r4, lr}
 800f376:	b16a      	cbz	r2, 800f394 <strncmp+0x20>
 800f378:	3901      	subs	r1, #1
 800f37a:	1884      	adds	r4, r0, r2
 800f37c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f380:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f384:	429a      	cmp	r2, r3
 800f386:	d103      	bne.n	800f390 <strncmp+0x1c>
 800f388:	42a0      	cmp	r0, r4
 800f38a:	d001      	beq.n	800f390 <strncmp+0x1c>
 800f38c:	2a00      	cmp	r2, #0
 800f38e:	d1f5      	bne.n	800f37c <strncmp+0x8>
 800f390:	1ad0      	subs	r0, r2, r3
 800f392:	bd10      	pop	{r4, pc}
 800f394:	4610      	mov	r0, r2
 800f396:	e7fc      	b.n	800f392 <strncmp+0x1e>

0800f398 <_sbrk_r>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	4d06      	ldr	r5, [pc, #24]	@ (800f3b4 <_sbrk_r+0x1c>)
 800f39c:	2300      	movs	r3, #0
 800f39e:	4604      	mov	r4, r0
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	602b      	str	r3, [r5, #0]
 800f3a4:	f7f3 f96a 	bl	800267c <_sbrk>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d102      	bne.n	800f3b2 <_sbrk_r+0x1a>
 800f3ac:	682b      	ldr	r3, [r5, #0]
 800f3ae:	b103      	cbz	r3, 800f3b2 <_sbrk_r+0x1a>
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	24000788 	.word	0x24000788

0800f3b8 <memcpy>:
 800f3b8:	440a      	add	r2, r1
 800f3ba:	4291      	cmp	r1, r2
 800f3bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3c0:	d100      	bne.n	800f3c4 <memcpy+0xc>
 800f3c2:	4770      	bx	lr
 800f3c4:	b510      	push	{r4, lr}
 800f3c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ce:	4291      	cmp	r1, r2
 800f3d0:	d1f9      	bne.n	800f3c6 <memcpy+0xe>
 800f3d2:	bd10      	pop	{r4, pc}
 800f3d4:	0000      	movs	r0, r0
	...

0800f3d8 <nan>:
 800f3d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f3e0 <nan+0x8>
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	00000000 	.word	0x00000000
 800f3e4:	7ff80000 	.word	0x7ff80000

0800f3e8 <__assert_func>:
 800f3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3ea:	4614      	mov	r4, r2
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	4b09      	ldr	r3, [pc, #36]	@ (800f414 <__assert_func+0x2c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4605      	mov	r5, r0
 800f3f4:	68d8      	ldr	r0, [r3, #12]
 800f3f6:	b954      	cbnz	r4, 800f40e <__assert_func+0x26>
 800f3f8:	4b07      	ldr	r3, [pc, #28]	@ (800f418 <__assert_func+0x30>)
 800f3fa:	461c      	mov	r4, r3
 800f3fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f400:	9100      	str	r1, [sp, #0]
 800f402:	462b      	mov	r3, r5
 800f404:	4905      	ldr	r1, [pc, #20]	@ (800f41c <__assert_func+0x34>)
 800f406:	f000 fba7 	bl	800fb58 <fiprintf>
 800f40a:	f000 fbb7 	bl	800fb7c <abort>
 800f40e:	4b04      	ldr	r3, [pc, #16]	@ (800f420 <__assert_func+0x38>)
 800f410:	e7f4      	b.n	800f3fc <__assert_func+0x14>
 800f412:	bf00      	nop
 800f414:	24000020 	.word	0x24000020
 800f418:	08010a4d 	.word	0x08010a4d
 800f41c:	08010a1f 	.word	0x08010a1f
 800f420:	08010a12 	.word	0x08010a12

0800f424 <_calloc_r>:
 800f424:	b570      	push	{r4, r5, r6, lr}
 800f426:	fba1 5402 	umull	r5, r4, r1, r2
 800f42a:	b93c      	cbnz	r4, 800f43c <_calloc_r+0x18>
 800f42c:	4629      	mov	r1, r5
 800f42e:	f7fe fa15 	bl	800d85c <_malloc_r>
 800f432:	4606      	mov	r6, r0
 800f434:	b928      	cbnz	r0, 800f442 <_calloc_r+0x1e>
 800f436:	2600      	movs	r6, #0
 800f438:	4630      	mov	r0, r6
 800f43a:	bd70      	pop	{r4, r5, r6, pc}
 800f43c:	220c      	movs	r2, #12
 800f43e:	6002      	str	r2, [r0, #0]
 800f440:	e7f9      	b.n	800f436 <_calloc_r+0x12>
 800f442:	462a      	mov	r2, r5
 800f444:	4621      	mov	r1, r4
 800f446:	f7fd fb30 	bl	800caaa <memset>
 800f44a:	e7f5      	b.n	800f438 <_calloc_r+0x14>

0800f44c <rshift>:
 800f44c:	6903      	ldr	r3, [r0, #16]
 800f44e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f452:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f456:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f45a:	f100 0414 	add.w	r4, r0, #20
 800f45e:	dd45      	ble.n	800f4ec <rshift+0xa0>
 800f460:	f011 011f 	ands.w	r1, r1, #31
 800f464:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f468:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f46c:	d10c      	bne.n	800f488 <rshift+0x3c>
 800f46e:	f100 0710 	add.w	r7, r0, #16
 800f472:	4629      	mov	r1, r5
 800f474:	42b1      	cmp	r1, r6
 800f476:	d334      	bcc.n	800f4e2 <rshift+0x96>
 800f478:	1a9b      	subs	r3, r3, r2
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	1eea      	subs	r2, r5, #3
 800f47e:	4296      	cmp	r6, r2
 800f480:	bf38      	it	cc
 800f482:	2300      	movcc	r3, #0
 800f484:	4423      	add	r3, r4
 800f486:	e015      	b.n	800f4b4 <rshift+0x68>
 800f488:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f48c:	f1c1 0820 	rsb	r8, r1, #32
 800f490:	40cf      	lsrs	r7, r1
 800f492:	f105 0e04 	add.w	lr, r5, #4
 800f496:	46a1      	mov	r9, r4
 800f498:	4576      	cmp	r6, lr
 800f49a:	46f4      	mov	ip, lr
 800f49c:	d815      	bhi.n	800f4ca <rshift+0x7e>
 800f49e:	1a9a      	subs	r2, r3, r2
 800f4a0:	0092      	lsls	r2, r2, #2
 800f4a2:	3a04      	subs	r2, #4
 800f4a4:	3501      	adds	r5, #1
 800f4a6:	42ae      	cmp	r6, r5
 800f4a8:	bf38      	it	cc
 800f4aa:	2200      	movcc	r2, #0
 800f4ac:	18a3      	adds	r3, r4, r2
 800f4ae:	50a7      	str	r7, [r4, r2]
 800f4b0:	b107      	cbz	r7, 800f4b4 <rshift+0x68>
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	1b1a      	subs	r2, r3, r4
 800f4b6:	42a3      	cmp	r3, r4
 800f4b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4bc:	bf08      	it	eq
 800f4be:	2300      	moveq	r3, #0
 800f4c0:	6102      	str	r2, [r0, #16]
 800f4c2:	bf08      	it	eq
 800f4c4:	6143      	streq	r3, [r0, #20]
 800f4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4ca:	f8dc c000 	ldr.w	ip, [ip]
 800f4ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800f4d2:	ea4c 0707 	orr.w	r7, ip, r7
 800f4d6:	f849 7b04 	str.w	r7, [r9], #4
 800f4da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4de:	40cf      	lsrs	r7, r1
 800f4e0:	e7da      	b.n	800f498 <rshift+0x4c>
 800f4e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f4e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f4ea:	e7c3      	b.n	800f474 <rshift+0x28>
 800f4ec:	4623      	mov	r3, r4
 800f4ee:	e7e1      	b.n	800f4b4 <rshift+0x68>

0800f4f0 <__hexdig_fun>:
 800f4f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f4f4:	2b09      	cmp	r3, #9
 800f4f6:	d802      	bhi.n	800f4fe <__hexdig_fun+0xe>
 800f4f8:	3820      	subs	r0, #32
 800f4fa:	b2c0      	uxtb	r0, r0
 800f4fc:	4770      	bx	lr
 800f4fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f502:	2b05      	cmp	r3, #5
 800f504:	d801      	bhi.n	800f50a <__hexdig_fun+0x1a>
 800f506:	3847      	subs	r0, #71	@ 0x47
 800f508:	e7f7      	b.n	800f4fa <__hexdig_fun+0xa>
 800f50a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f50e:	2b05      	cmp	r3, #5
 800f510:	d801      	bhi.n	800f516 <__hexdig_fun+0x26>
 800f512:	3827      	subs	r0, #39	@ 0x27
 800f514:	e7f1      	b.n	800f4fa <__hexdig_fun+0xa>
 800f516:	2000      	movs	r0, #0
 800f518:	4770      	bx	lr
	...

0800f51c <__gethex>:
 800f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f520:	b085      	sub	sp, #20
 800f522:	468a      	mov	sl, r1
 800f524:	9302      	str	r3, [sp, #8]
 800f526:	680b      	ldr	r3, [r1, #0]
 800f528:	9001      	str	r0, [sp, #4]
 800f52a:	4690      	mov	r8, r2
 800f52c:	1c9c      	adds	r4, r3, #2
 800f52e:	46a1      	mov	r9, r4
 800f530:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f534:	2830      	cmp	r0, #48	@ 0x30
 800f536:	d0fa      	beq.n	800f52e <__gethex+0x12>
 800f538:	eba9 0303 	sub.w	r3, r9, r3
 800f53c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f540:	f7ff ffd6 	bl	800f4f0 <__hexdig_fun>
 800f544:	4605      	mov	r5, r0
 800f546:	2800      	cmp	r0, #0
 800f548:	d168      	bne.n	800f61c <__gethex+0x100>
 800f54a:	49a0      	ldr	r1, [pc, #640]	@ (800f7cc <__gethex+0x2b0>)
 800f54c:	2201      	movs	r2, #1
 800f54e:	4648      	mov	r0, r9
 800f550:	f7ff ff10 	bl	800f374 <strncmp>
 800f554:	4607      	mov	r7, r0
 800f556:	2800      	cmp	r0, #0
 800f558:	d167      	bne.n	800f62a <__gethex+0x10e>
 800f55a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f55e:	4626      	mov	r6, r4
 800f560:	f7ff ffc6 	bl	800f4f0 <__hexdig_fun>
 800f564:	2800      	cmp	r0, #0
 800f566:	d062      	beq.n	800f62e <__gethex+0x112>
 800f568:	4623      	mov	r3, r4
 800f56a:	7818      	ldrb	r0, [r3, #0]
 800f56c:	2830      	cmp	r0, #48	@ 0x30
 800f56e:	4699      	mov	r9, r3
 800f570:	f103 0301 	add.w	r3, r3, #1
 800f574:	d0f9      	beq.n	800f56a <__gethex+0x4e>
 800f576:	f7ff ffbb 	bl	800f4f0 <__hexdig_fun>
 800f57a:	fab0 f580 	clz	r5, r0
 800f57e:	096d      	lsrs	r5, r5, #5
 800f580:	f04f 0b01 	mov.w	fp, #1
 800f584:	464a      	mov	r2, r9
 800f586:	4616      	mov	r6, r2
 800f588:	3201      	adds	r2, #1
 800f58a:	7830      	ldrb	r0, [r6, #0]
 800f58c:	f7ff ffb0 	bl	800f4f0 <__hexdig_fun>
 800f590:	2800      	cmp	r0, #0
 800f592:	d1f8      	bne.n	800f586 <__gethex+0x6a>
 800f594:	498d      	ldr	r1, [pc, #564]	@ (800f7cc <__gethex+0x2b0>)
 800f596:	2201      	movs	r2, #1
 800f598:	4630      	mov	r0, r6
 800f59a:	f7ff feeb 	bl	800f374 <strncmp>
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d13f      	bne.n	800f622 <__gethex+0x106>
 800f5a2:	b944      	cbnz	r4, 800f5b6 <__gethex+0x9a>
 800f5a4:	1c74      	adds	r4, r6, #1
 800f5a6:	4622      	mov	r2, r4
 800f5a8:	4616      	mov	r6, r2
 800f5aa:	3201      	adds	r2, #1
 800f5ac:	7830      	ldrb	r0, [r6, #0]
 800f5ae:	f7ff ff9f 	bl	800f4f0 <__hexdig_fun>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	d1f8      	bne.n	800f5a8 <__gethex+0x8c>
 800f5b6:	1ba4      	subs	r4, r4, r6
 800f5b8:	00a7      	lsls	r7, r4, #2
 800f5ba:	7833      	ldrb	r3, [r6, #0]
 800f5bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f5c0:	2b50      	cmp	r3, #80	@ 0x50
 800f5c2:	d13e      	bne.n	800f642 <__gethex+0x126>
 800f5c4:	7873      	ldrb	r3, [r6, #1]
 800f5c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800f5c8:	d033      	beq.n	800f632 <__gethex+0x116>
 800f5ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800f5cc:	d034      	beq.n	800f638 <__gethex+0x11c>
 800f5ce:	1c71      	adds	r1, r6, #1
 800f5d0:	2400      	movs	r4, #0
 800f5d2:	7808      	ldrb	r0, [r1, #0]
 800f5d4:	f7ff ff8c 	bl	800f4f0 <__hexdig_fun>
 800f5d8:	1e43      	subs	r3, r0, #1
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	2b18      	cmp	r3, #24
 800f5de:	d830      	bhi.n	800f642 <__gethex+0x126>
 800f5e0:	f1a0 0210 	sub.w	r2, r0, #16
 800f5e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5e8:	f7ff ff82 	bl	800f4f0 <__hexdig_fun>
 800f5ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800f5f0:	fa5f fc8c 	uxtb.w	ip, ip
 800f5f4:	f1bc 0f18 	cmp.w	ip, #24
 800f5f8:	f04f 030a 	mov.w	r3, #10
 800f5fc:	d91e      	bls.n	800f63c <__gethex+0x120>
 800f5fe:	b104      	cbz	r4, 800f602 <__gethex+0xe6>
 800f600:	4252      	negs	r2, r2
 800f602:	4417      	add	r7, r2
 800f604:	f8ca 1000 	str.w	r1, [sl]
 800f608:	b1ed      	cbz	r5, 800f646 <__gethex+0x12a>
 800f60a:	f1bb 0f00 	cmp.w	fp, #0
 800f60e:	bf0c      	ite	eq
 800f610:	2506      	moveq	r5, #6
 800f612:	2500      	movne	r5, #0
 800f614:	4628      	mov	r0, r5
 800f616:	b005      	add	sp, #20
 800f618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61c:	2500      	movs	r5, #0
 800f61e:	462c      	mov	r4, r5
 800f620:	e7b0      	b.n	800f584 <__gethex+0x68>
 800f622:	2c00      	cmp	r4, #0
 800f624:	d1c7      	bne.n	800f5b6 <__gethex+0x9a>
 800f626:	4627      	mov	r7, r4
 800f628:	e7c7      	b.n	800f5ba <__gethex+0x9e>
 800f62a:	464e      	mov	r6, r9
 800f62c:	462f      	mov	r7, r5
 800f62e:	2501      	movs	r5, #1
 800f630:	e7c3      	b.n	800f5ba <__gethex+0x9e>
 800f632:	2400      	movs	r4, #0
 800f634:	1cb1      	adds	r1, r6, #2
 800f636:	e7cc      	b.n	800f5d2 <__gethex+0xb6>
 800f638:	2401      	movs	r4, #1
 800f63a:	e7fb      	b.n	800f634 <__gethex+0x118>
 800f63c:	fb03 0002 	mla	r0, r3, r2, r0
 800f640:	e7ce      	b.n	800f5e0 <__gethex+0xc4>
 800f642:	4631      	mov	r1, r6
 800f644:	e7de      	b.n	800f604 <__gethex+0xe8>
 800f646:	eba6 0309 	sub.w	r3, r6, r9
 800f64a:	3b01      	subs	r3, #1
 800f64c:	4629      	mov	r1, r5
 800f64e:	2b07      	cmp	r3, #7
 800f650:	dc0a      	bgt.n	800f668 <__gethex+0x14c>
 800f652:	9801      	ldr	r0, [sp, #4]
 800f654:	f7fe f98e 	bl	800d974 <_Balloc>
 800f658:	4604      	mov	r4, r0
 800f65a:	b940      	cbnz	r0, 800f66e <__gethex+0x152>
 800f65c:	4b5c      	ldr	r3, [pc, #368]	@ (800f7d0 <__gethex+0x2b4>)
 800f65e:	4602      	mov	r2, r0
 800f660:	21e4      	movs	r1, #228	@ 0xe4
 800f662:	485c      	ldr	r0, [pc, #368]	@ (800f7d4 <__gethex+0x2b8>)
 800f664:	f7ff fec0 	bl	800f3e8 <__assert_func>
 800f668:	3101      	adds	r1, #1
 800f66a:	105b      	asrs	r3, r3, #1
 800f66c:	e7ef      	b.n	800f64e <__gethex+0x132>
 800f66e:	f100 0a14 	add.w	sl, r0, #20
 800f672:	2300      	movs	r3, #0
 800f674:	4655      	mov	r5, sl
 800f676:	469b      	mov	fp, r3
 800f678:	45b1      	cmp	r9, r6
 800f67a:	d337      	bcc.n	800f6ec <__gethex+0x1d0>
 800f67c:	f845 bb04 	str.w	fp, [r5], #4
 800f680:	eba5 050a 	sub.w	r5, r5, sl
 800f684:	10ad      	asrs	r5, r5, #2
 800f686:	6125      	str	r5, [r4, #16]
 800f688:	4658      	mov	r0, fp
 800f68a:	f7fe fa65 	bl	800db58 <__hi0bits>
 800f68e:	016d      	lsls	r5, r5, #5
 800f690:	f8d8 6000 	ldr.w	r6, [r8]
 800f694:	1a2d      	subs	r5, r5, r0
 800f696:	42b5      	cmp	r5, r6
 800f698:	dd54      	ble.n	800f744 <__gethex+0x228>
 800f69a:	1bad      	subs	r5, r5, r6
 800f69c:	4629      	mov	r1, r5
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f7fe fdf6 	bl	800e290 <__any_on>
 800f6a4:	4681      	mov	r9, r0
 800f6a6:	b178      	cbz	r0, 800f6c8 <__gethex+0x1ac>
 800f6a8:	1e6b      	subs	r3, r5, #1
 800f6aa:	1159      	asrs	r1, r3, #5
 800f6ac:	f003 021f 	and.w	r2, r3, #31
 800f6b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f6b4:	f04f 0901 	mov.w	r9, #1
 800f6b8:	fa09 f202 	lsl.w	r2, r9, r2
 800f6bc:	420a      	tst	r2, r1
 800f6be:	d003      	beq.n	800f6c8 <__gethex+0x1ac>
 800f6c0:	454b      	cmp	r3, r9
 800f6c2:	dc36      	bgt.n	800f732 <__gethex+0x216>
 800f6c4:	f04f 0902 	mov.w	r9, #2
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f7ff febe 	bl	800f44c <rshift>
 800f6d0:	442f      	add	r7, r5
 800f6d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6d6:	42bb      	cmp	r3, r7
 800f6d8:	da42      	bge.n	800f760 <__gethex+0x244>
 800f6da:	9801      	ldr	r0, [sp, #4]
 800f6dc:	4621      	mov	r1, r4
 800f6de:	f7fe f989 	bl	800d9f4 <_Bfree>
 800f6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	6013      	str	r3, [r2, #0]
 800f6e8:	25a3      	movs	r5, #163	@ 0xa3
 800f6ea:	e793      	b.n	800f614 <__gethex+0xf8>
 800f6ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f6f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800f6f2:	d012      	beq.n	800f71a <__gethex+0x1fe>
 800f6f4:	2b20      	cmp	r3, #32
 800f6f6:	d104      	bne.n	800f702 <__gethex+0x1e6>
 800f6f8:	f845 bb04 	str.w	fp, [r5], #4
 800f6fc:	f04f 0b00 	mov.w	fp, #0
 800f700:	465b      	mov	r3, fp
 800f702:	7830      	ldrb	r0, [r6, #0]
 800f704:	9303      	str	r3, [sp, #12]
 800f706:	f7ff fef3 	bl	800f4f0 <__hexdig_fun>
 800f70a:	9b03      	ldr	r3, [sp, #12]
 800f70c:	f000 000f 	and.w	r0, r0, #15
 800f710:	4098      	lsls	r0, r3
 800f712:	ea4b 0b00 	orr.w	fp, fp, r0
 800f716:	3304      	adds	r3, #4
 800f718:	e7ae      	b.n	800f678 <__gethex+0x15c>
 800f71a:	45b1      	cmp	r9, r6
 800f71c:	d8ea      	bhi.n	800f6f4 <__gethex+0x1d8>
 800f71e:	492b      	ldr	r1, [pc, #172]	@ (800f7cc <__gethex+0x2b0>)
 800f720:	9303      	str	r3, [sp, #12]
 800f722:	2201      	movs	r2, #1
 800f724:	4630      	mov	r0, r6
 800f726:	f7ff fe25 	bl	800f374 <strncmp>
 800f72a:	9b03      	ldr	r3, [sp, #12]
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d1e1      	bne.n	800f6f4 <__gethex+0x1d8>
 800f730:	e7a2      	b.n	800f678 <__gethex+0x15c>
 800f732:	1ea9      	subs	r1, r5, #2
 800f734:	4620      	mov	r0, r4
 800f736:	f7fe fdab 	bl	800e290 <__any_on>
 800f73a:	2800      	cmp	r0, #0
 800f73c:	d0c2      	beq.n	800f6c4 <__gethex+0x1a8>
 800f73e:	f04f 0903 	mov.w	r9, #3
 800f742:	e7c1      	b.n	800f6c8 <__gethex+0x1ac>
 800f744:	da09      	bge.n	800f75a <__gethex+0x23e>
 800f746:	1b75      	subs	r5, r6, r5
 800f748:	4621      	mov	r1, r4
 800f74a:	9801      	ldr	r0, [sp, #4]
 800f74c:	462a      	mov	r2, r5
 800f74e:	f7fe fb69 	bl	800de24 <__lshift>
 800f752:	1b7f      	subs	r7, r7, r5
 800f754:	4604      	mov	r4, r0
 800f756:	f100 0a14 	add.w	sl, r0, #20
 800f75a:	f04f 0900 	mov.w	r9, #0
 800f75e:	e7b8      	b.n	800f6d2 <__gethex+0x1b6>
 800f760:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f764:	42bd      	cmp	r5, r7
 800f766:	dd6f      	ble.n	800f848 <__gethex+0x32c>
 800f768:	1bed      	subs	r5, r5, r7
 800f76a:	42ae      	cmp	r6, r5
 800f76c:	dc34      	bgt.n	800f7d8 <__gethex+0x2bc>
 800f76e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f772:	2b02      	cmp	r3, #2
 800f774:	d022      	beq.n	800f7bc <__gethex+0x2a0>
 800f776:	2b03      	cmp	r3, #3
 800f778:	d024      	beq.n	800f7c4 <__gethex+0x2a8>
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d115      	bne.n	800f7aa <__gethex+0x28e>
 800f77e:	42ae      	cmp	r6, r5
 800f780:	d113      	bne.n	800f7aa <__gethex+0x28e>
 800f782:	2e01      	cmp	r6, #1
 800f784:	d10b      	bne.n	800f79e <__gethex+0x282>
 800f786:	9a02      	ldr	r2, [sp, #8]
 800f788:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f78c:	6013      	str	r3, [r2, #0]
 800f78e:	2301      	movs	r3, #1
 800f790:	6123      	str	r3, [r4, #16]
 800f792:	f8ca 3000 	str.w	r3, [sl]
 800f796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f798:	2562      	movs	r5, #98	@ 0x62
 800f79a:	601c      	str	r4, [r3, #0]
 800f79c:	e73a      	b.n	800f614 <__gethex+0xf8>
 800f79e:	1e71      	subs	r1, r6, #1
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f7fe fd75 	bl	800e290 <__any_on>
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	d1ed      	bne.n	800f786 <__gethex+0x26a>
 800f7aa:	9801      	ldr	r0, [sp, #4]
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	f7fe f921 	bl	800d9f4 <_Bfree>
 800f7b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	6013      	str	r3, [r2, #0]
 800f7b8:	2550      	movs	r5, #80	@ 0x50
 800f7ba:	e72b      	b.n	800f614 <__gethex+0xf8>
 800f7bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1f3      	bne.n	800f7aa <__gethex+0x28e>
 800f7c2:	e7e0      	b.n	800f786 <__gethex+0x26a>
 800f7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d1dd      	bne.n	800f786 <__gethex+0x26a>
 800f7ca:	e7ee      	b.n	800f7aa <__gethex+0x28e>
 800f7cc:	080108a0 	.word	0x080108a0
 800f7d0:	08010735 	.word	0x08010735
 800f7d4:	08010a4e 	.word	0x08010a4e
 800f7d8:	1e6f      	subs	r7, r5, #1
 800f7da:	f1b9 0f00 	cmp.w	r9, #0
 800f7de:	d130      	bne.n	800f842 <__gethex+0x326>
 800f7e0:	b127      	cbz	r7, 800f7ec <__gethex+0x2d0>
 800f7e2:	4639      	mov	r1, r7
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	f7fe fd53 	bl	800e290 <__any_on>
 800f7ea:	4681      	mov	r9, r0
 800f7ec:	117a      	asrs	r2, r7, #5
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f7f4:	f007 071f 	and.w	r7, r7, #31
 800f7f8:	40bb      	lsls	r3, r7
 800f7fa:	4213      	tst	r3, r2
 800f7fc:	4629      	mov	r1, r5
 800f7fe:	4620      	mov	r0, r4
 800f800:	bf18      	it	ne
 800f802:	f049 0902 	orrne.w	r9, r9, #2
 800f806:	f7ff fe21 	bl	800f44c <rshift>
 800f80a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f80e:	1b76      	subs	r6, r6, r5
 800f810:	2502      	movs	r5, #2
 800f812:	f1b9 0f00 	cmp.w	r9, #0
 800f816:	d047      	beq.n	800f8a8 <__gethex+0x38c>
 800f818:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d015      	beq.n	800f84c <__gethex+0x330>
 800f820:	2b03      	cmp	r3, #3
 800f822:	d017      	beq.n	800f854 <__gethex+0x338>
 800f824:	2b01      	cmp	r3, #1
 800f826:	d109      	bne.n	800f83c <__gethex+0x320>
 800f828:	f019 0f02 	tst.w	r9, #2
 800f82c:	d006      	beq.n	800f83c <__gethex+0x320>
 800f82e:	f8da 3000 	ldr.w	r3, [sl]
 800f832:	ea49 0903 	orr.w	r9, r9, r3
 800f836:	f019 0f01 	tst.w	r9, #1
 800f83a:	d10e      	bne.n	800f85a <__gethex+0x33e>
 800f83c:	f045 0510 	orr.w	r5, r5, #16
 800f840:	e032      	b.n	800f8a8 <__gethex+0x38c>
 800f842:	f04f 0901 	mov.w	r9, #1
 800f846:	e7d1      	b.n	800f7ec <__gethex+0x2d0>
 800f848:	2501      	movs	r5, #1
 800f84a:	e7e2      	b.n	800f812 <__gethex+0x2f6>
 800f84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f84e:	f1c3 0301 	rsb	r3, r3, #1
 800f852:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f856:	2b00      	cmp	r3, #0
 800f858:	d0f0      	beq.n	800f83c <__gethex+0x320>
 800f85a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f85e:	f104 0314 	add.w	r3, r4, #20
 800f862:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f866:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f86a:	f04f 0c00 	mov.w	ip, #0
 800f86e:	4618      	mov	r0, r3
 800f870:	f853 2b04 	ldr.w	r2, [r3], #4
 800f874:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f878:	d01b      	beq.n	800f8b2 <__gethex+0x396>
 800f87a:	3201      	adds	r2, #1
 800f87c:	6002      	str	r2, [r0, #0]
 800f87e:	2d02      	cmp	r5, #2
 800f880:	f104 0314 	add.w	r3, r4, #20
 800f884:	d13c      	bne.n	800f900 <__gethex+0x3e4>
 800f886:	f8d8 2000 	ldr.w	r2, [r8]
 800f88a:	3a01      	subs	r2, #1
 800f88c:	42b2      	cmp	r2, r6
 800f88e:	d109      	bne.n	800f8a4 <__gethex+0x388>
 800f890:	1171      	asrs	r1, r6, #5
 800f892:	2201      	movs	r2, #1
 800f894:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f898:	f006 061f 	and.w	r6, r6, #31
 800f89c:	fa02 f606 	lsl.w	r6, r2, r6
 800f8a0:	421e      	tst	r6, r3
 800f8a2:	d13a      	bne.n	800f91a <__gethex+0x3fe>
 800f8a4:	f045 0520 	orr.w	r5, r5, #32
 800f8a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8aa:	601c      	str	r4, [r3, #0]
 800f8ac:	9b02      	ldr	r3, [sp, #8]
 800f8ae:	601f      	str	r7, [r3, #0]
 800f8b0:	e6b0      	b.n	800f614 <__gethex+0xf8>
 800f8b2:	4299      	cmp	r1, r3
 800f8b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8b8:	d8d9      	bhi.n	800f86e <__gethex+0x352>
 800f8ba:	68a3      	ldr	r3, [r4, #8]
 800f8bc:	459b      	cmp	fp, r3
 800f8be:	db17      	blt.n	800f8f0 <__gethex+0x3d4>
 800f8c0:	6861      	ldr	r1, [r4, #4]
 800f8c2:	9801      	ldr	r0, [sp, #4]
 800f8c4:	3101      	adds	r1, #1
 800f8c6:	f7fe f855 	bl	800d974 <_Balloc>
 800f8ca:	4681      	mov	r9, r0
 800f8cc:	b918      	cbnz	r0, 800f8d6 <__gethex+0x3ba>
 800f8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f938 <__gethex+0x41c>)
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	2184      	movs	r1, #132	@ 0x84
 800f8d4:	e6c5      	b.n	800f662 <__gethex+0x146>
 800f8d6:	6922      	ldr	r2, [r4, #16]
 800f8d8:	3202      	adds	r2, #2
 800f8da:	f104 010c 	add.w	r1, r4, #12
 800f8de:	0092      	lsls	r2, r2, #2
 800f8e0:	300c      	adds	r0, #12
 800f8e2:	f7ff fd69 	bl	800f3b8 <memcpy>
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	9801      	ldr	r0, [sp, #4]
 800f8ea:	f7fe f883 	bl	800d9f4 <_Bfree>
 800f8ee:	464c      	mov	r4, r9
 800f8f0:	6923      	ldr	r3, [r4, #16]
 800f8f2:	1c5a      	adds	r2, r3, #1
 800f8f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8f8:	6122      	str	r2, [r4, #16]
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	615a      	str	r2, [r3, #20]
 800f8fe:	e7be      	b.n	800f87e <__gethex+0x362>
 800f900:	6922      	ldr	r2, [r4, #16]
 800f902:	455a      	cmp	r2, fp
 800f904:	dd0b      	ble.n	800f91e <__gethex+0x402>
 800f906:	2101      	movs	r1, #1
 800f908:	4620      	mov	r0, r4
 800f90a:	f7ff fd9f 	bl	800f44c <rshift>
 800f90e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f912:	3701      	adds	r7, #1
 800f914:	42bb      	cmp	r3, r7
 800f916:	f6ff aee0 	blt.w	800f6da <__gethex+0x1be>
 800f91a:	2501      	movs	r5, #1
 800f91c:	e7c2      	b.n	800f8a4 <__gethex+0x388>
 800f91e:	f016 061f 	ands.w	r6, r6, #31
 800f922:	d0fa      	beq.n	800f91a <__gethex+0x3fe>
 800f924:	4453      	add	r3, sl
 800f926:	f1c6 0620 	rsb	r6, r6, #32
 800f92a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f92e:	f7fe f913 	bl	800db58 <__hi0bits>
 800f932:	42b0      	cmp	r0, r6
 800f934:	dbe7      	blt.n	800f906 <__gethex+0x3ea>
 800f936:	e7f0      	b.n	800f91a <__gethex+0x3fe>
 800f938:	08010735 	.word	0x08010735

0800f93c <L_shift>:
 800f93c:	f1c2 0208 	rsb	r2, r2, #8
 800f940:	0092      	lsls	r2, r2, #2
 800f942:	b570      	push	{r4, r5, r6, lr}
 800f944:	f1c2 0620 	rsb	r6, r2, #32
 800f948:	6843      	ldr	r3, [r0, #4]
 800f94a:	6804      	ldr	r4, [r0, #0]
 800f94c:	fa03 f506 	lsl.w	r5, r3, r6
 800f950:	432c      	orrs	r4, r5
 800f952:	40d3      	lsrs	r3, r2
 800f954:	6004      	str	r4, [r0, #0]
 800f956:	f840 3f04 	str.w	r3, [r0, #4]!
 800f95a:	4288      	cmp	r0, r1
 800f95c:	d3f4      	bcc.n	800f948 <L_shift+0xc>
 800f95e:	bd70      	pop	{r4, r5, r6, pc}

0800f960 <__match>:
 800f960:	b530      	push	{r4, r5, lr}
 800f962:	6803      	ldr	r3, [r0, #0]
 800f964:	3301      	adds	r3, #1
 800f966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f96a:	b914      	cbnz	r4, 800f972 <__match+0x12>
 800f96c:	6003      	str	r3, [r0, #0]
 800f96e:	2001      	movs	r0, #1
 800f970:	bd30      	pop	{r4, r5, pc}
 800f972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f976:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f97a:	2d19      	cmp	r5, #25
 800f97c:	bf98      	it	ls
 800f97e:	3220      	addls	r2, #32
 800f980:	42a2      	cmp	r2, r4
 800f982:	d0f0      	beq.n	800f966 <__match+0x6>
 800f984:	2000      	movs	r0, #0
 800f986:	e7f3      	b.n	800f970 <__match+0x10>

0800f988 <__hexnan>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	680b      	ldr	r3, [r1, #0]
 800f98e:	6801      	ldr	r1, [r0, #0]
 800f990:	115e      	asrs	r6, r3, #5
 800f992:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f996:	f013 031f 	ands.w	r3, r3, #31
 800f99a:	b087      	sub	sp, #28
 800f99c:	bf18      	it	ne
 800f99e:	3604      	addne	r6, #4
 800f9a0:	2500      	movs	r5, #0
 800f9a2:	1f37      	subs	r7, r6, #4
 800f9a4:	4682      	mov	sl, r0
 800f9a6:	4690      	mov	r8, r2
 800f9a8:	9301      	str	r3, [sp, #4]
 800f9aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800f9ae:	46b9      	mov	r9, r7
 800f9b0:	463c      	mov	r4, r7
 800f9b2:	9502      	str	r5, [sp, #8]
 800f9b4:	46ab      	mov	fp, r5
 800f9b6:	784a      	ldrb	r2, [r1, #1]
 800f9b8:	1c4b      	adds	r3, r1, #1
 800f9ba:	9303      	str	r3, [sp, #12]
 800f9bc:	b342      	cbz	r2, 800fa10 <__hexnan+0x88>
 800f9be:	4610      	mov	r0, r2
 800f9c0:	9105      	str	r1, [sp, #20]
 800f9c2:	9204      	str	r2, [sp, #16]
 800f9c4:	f7ff fd94 	bl	800f4f0 <__hexdig_fun>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d151      	bne.n	800fa70 <__hexnan+0xe8>
 800f9cc:	9a04      	ldr	r2, [sp, #16]
 800f9ce:	9905      	ldr	r1, [sp, #20]
 800f9d0:	2a20      	cmp	r2, #32
 800f9d2:	d818      	bhi.n	800fa06 <__hexnan+0x7e>
 800f9d4:	9b02      	ldr	r3, [sp, #8]
 800f9d6:	459b      	cmp	fp, r3
 800f9d8:	dd13      	ble.n	800fa02 <__hexnan+0x7a>
 800f9da:	454c      	cmp	r4, r9
 800f9dc:	d206      	bcs.n	800f9ec <__hexnan+0x64>
 800f9de:	2d07      	cmp	r5, #7
 800f9e0:	dc04      	bgt.n	800f9ec <__hexnan+0x64>
 800f9e2:	462a      	mov	r2, r5
 800f9e4:	4649      	mov	r1, r9
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f7ff ffa8 	bl	800f93c <L_shift>
 800f9ec:	4544      	cmp	r4, r8
 800f9ee:	d952      	bls.n	800fa96 <__hexnan+0x10e>
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	f1a4 0904 	sub.w	r9, r4, #4
 800f9f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9fa:	f8cd b008 	str.w	fp, [sp, #8]
 800f9fe:	464c      	mov	r4, r9
 800fa00:	461d      	mov	r5, r3
 800fa02:	9903      	ldr	r1, [sp, #12]
 800fa04:	e7d7      	b.n	800f9b6 <__hexnan+0x2e>
 800fa06:	2a29      	cmp	r2, #41	@ 0x29
 800fa08:	d157      	bne.n	800faba <__hexnan+0x132>
 800fa0a:	3102      	adds	r1, #2
 800fa0c:	f8ca 1000 	str.w	r1, [sl]
 800fa10:	f1bb 0f00 	cmp.w	fp, #0
 800fa14:	d051      	beq.n	800faba <__hexnan+0x132>
 800fa16:	454c      	cmp	r4, r9
 800fa18:	d206      	bcs.n	800fa28 <__hexnan+0xa0>
 800fa1a:	2d07      	cmp	r5, #7
 800fa1c:	dc04      	bgt.n	800fa28 <__hexnan+0xa0>
 800fa1e:	462a      	mov	r2, r5
 800fa20:	4649      	mov	r1, r9
 800fa22:	4620      	mov	r0, r4
 800fa24:	f7ff ff8a 	bl	800f93c <L_shift>
 800fa28:	4544      	cmp	r4, r8
 800fa2a:	d936      	bls.n	800fa9a <__hexnan+0x112>
 800fa2c:	f1a8 0204 	sub.w	r2, r8, #4
 800fa30:	4623      	mov	r3, r4
 800fa32:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa36:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa3a:	429f      	cmp	r7, r3
 800fa3c:	d2f9      	bcs.n	800fa32 <__hexnan+0xaa>
 800fa3e:	1b3b      	subs	r3, r7, r4
 800fa40:	f023 0303 	bic.w	r3, r3, #3
 800fa44:	3304      	adds	r3, #4
 800fa46:	3401      	adds	r4, #1
 800fa48:	3e03      	subs	r6, #3
 800fa4a:	42b4      	cmp	r4, r6
 800fa4c:	bf88      	it	hi
 800fa4e:	2304      	movhi	r3, #4
 800fa50:	4443      	add	r3, r8
 800fa52:	2200      	movs	r2, #0
 800fa54:	f843 2b04 	str.w	r2, [r3], #4
 800fa58:	429f      	cmp	r7, r3
 800fa5a:	d2fb      	bcs.n	800fa54 <__hexnan+0xcc>
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	b91b      	cbnz	r3, 800fa68 <__hexnan+0xe0>
 800fa60:	4547      	cmp	r7, r8
 800fa62:	d128      	bne.n	800fab6 <__hexnan+0x12e>
 800fa64:	2301      	movs	r3, #1
 800fa66:	603b      	str	r3, [r7, #0]
 800fa68:	2005      	movs	r0, #5
 800fa6a:	b007      	add	sp, #28
 800fa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa70:	3501      	adds	r5, #1
 800fa72:	2d08      	cmp	r5, #8
 800fa74:	f10b 0b01 	add.w	fp, fp, #1
 800fa78:	dd06      	ble.n	800fa88 <__hexnan+0x100>
 800fa7a:	4544      	cmp	r4, r8
 800fa7c:	d9c1      	bls.n	800fa02 <__hexnan+0x7a>
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa84:	2501      	movs	r5, #1
 800fa86:	3c04      	subs	r4, #4
 800fa88:	6822      	ldr	r2, [r4, #0]
 800fa8a:	f000 000f 	and.w	r0, r0, #15
 800fa8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fa92:	6020      	str	r0, [r4, #0]
 800fa94:	e7b5      	b.n	800fa02 <__hexnan+0x7a>
 800fa96:	2508      	movs	r5, #8
 800fa98:	e7b3      	b.n	800fa02 <__hexnan+0x7a>
 800fa9a:	9b01      	ldr	r3, [sp, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d0dd      	beq.n	800fa5c <__hexnan+0xd4>
 800faa0:	f1c3 0320 	rsb	r3, r3, #32
 800faa4:	f04f 32ff 	mov.w	r2, #4294967295
 800faa8:	40da      	lsrs	r2, r3
 800faaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800faae:	4013      	ands	r3, r2
 800fab0:	f846 3c04 	str.w	r3, [r6, #-4]
 800fab4:	e7d2      	b.n	800fa5c <__hexnan+0xd4>
 800fab6:	3f04      	subs	r7, #4
 800fab8:	e7d0      	b.n	800fa5c <__hexnan+0xd4>
 800faba:	2004      	movs	r0, #4
 800fabc:	e7d5      	b.n	800fa6a <__hexnan+0xe2>

0800fabe <__ascii_mbtowc>:
 800fabe:	b082      	sub	sp, #8
 800fac0:	b901      	cbnz	r1, 800fac4 <__ascii_mbtowc+0x6>
 800fac2:	a901      	add	r1, sp, #4
 800fac4:	b142      	cbz	r2, 800fad8 <__ascii_mbtowc+0x1a>
 800fac6:	b14b      	cbz	r3, 800fadc <__ascii_mbtowc+0x1e>
 800fac8:	7813      	ldrb	r3, [r2, #0]
 800faca:	600b      	str	r3, [r1, #0]
 800facc:	7812      	ldrb	r2, [r2, #0]
 800face:	1e10      	subs	r0, r2, #0
 800fad0:	bf18      	it	ne
 800fad2:	2001      	movne	r0, #1
 800fad4:	b002      	add	sp, #8
 800fad6:	4770      	bx	lr
 800fad8:	4610      	mov	r0, r2
 800fada:	e7fb      	b.n	800fad4 <__ascii_mbtowc+0x16>
 800fadc:	f06f 0001 	mvn.w	r0, #1
 800fae0:	e7f8      	b.n	800fad4 <__ascii_mbtowc+0x16>

0800fae2 <_realloc_r>:
 800fae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae6:	4680      	mov	r8, r0
 800fae8:	4615      	mov	r5, r2
 800faea:	460c      	mov	r4, r1
 800faec:	b921      	cbnz	r1, 800faf8 <_realloc_r+0x16>
 800faee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faf2:	4611      	mov	r1, r2
 800faf4:	f7fd beb2 	b.w	800d85c <_malloc_r>
 800faf8:	b92a      	cbnz	r2, 800fb06 <_realloc_r+0x24>
 800fafa:	f7fd fe3b 	bl	800d774 <_free_r>
 800fafe:	2400      	movs	r4, #0
 800fb00:	4620      	mov	r0, r4
 800fb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb06:	f000 f840 	bl	800fb8a <_malloc_usable_size_r>
 800fb0a:	4285      	cmp	r5, r0
 800fb0c:	4606      	mov	r6, r0
 800fb0e:	d802      	bhi.n	800fb16 <_realloc_r+0x34>
 800fb10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fb14:	d8f4      	bhi.n	800fb00 <_realloc_r+0x1e>
 800fb16:	4629      	mov	r1, r5
 800fb18:	4640      	mov	r0, r8
 800fb1a:	f7fd fe9f 	bl	800d85c <_malloc_r>
 800fb1e:	4607      	mov	r7, r0
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d0ec      	beq.n	800fafe <_realloc_r+0x1c>
 800fb24:	42b5      	cmp	r5, r6
 800fb26:	462a      	mov	r2, r5
 800fb28:	4621      	mov	r1, r4
 800fb2a:	bf28      	it	cs
 800fb2c:	4632      	movcs	r2, r6
 800fb2e:	f7ff fc43 	bl	800f3b8 <memcpy>
 800fb32:	4621      	mov	r1, r4
 800fb34:	4640      	mov	r0, r8
 800fb36:	f7fd fe1d 	bl	800d774 <_free_r>
 800fb3a:	463c      	mov	r4, r7
 800fb3c:	e7e0      	b.n	800fb00 <_realloc_r+0x1e>

0800fb3e <__ascii_wctomb>:
 800fb3e:	4603      	mov	r3, r0
 800fb40:	4608      	mov	r0, r1
 800fb42:	b141      	cbz	r1, 800fb56 <__ascii_wctomb+0x18>
 800fb44:	2aff      	cmp	r2, #255	@ 0xff
 800fb46:	d904      	bls.n	800fb52 <__ascii_wctomb+0x14>
 800fb48:	228a      	movs	r2, #138	@ 0x8a
 800fb4a:	601a      	str	r2, [r3, #0]
 800fb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb50:	4770      	bx	lr
 800fb52:	700a      	strb	r2, [r1, #0]
 800fb54:	2001      	movs	r0, #1
 800fb56:	4770      	bx	lr

0800fb58 <fiprintf>:
 800fb58:	b40e      	push	{r1, r2, r3}
 800fb5a:	b503      	push	{r0, r1, lr}
 800fb5c:	4601      	mov	r1, r0
 800fb5e:	ab03      	add	r3, sp, #12
 800fb60:	4805      	ldr	r0, [pc, #20]	@ (800fb78 <fiprintf+0x20>)
 800fb62:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb66:	6800      	ldr	r0, [r0, #0]
 800fb68:	9301      	str	r3, [sp, #4]
 800fb6a:	f000 f83f 	bl	800fbec <_vfiprintf_r>
 800fb6e:	b002      	add	sp, #8
 800fb70:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb74:	b003      	add	sp, #12
 800fb76:	4770      	bx	lr
 800fb78:	24000020 	.word	0x24000020

0800fb7c <abort>:
 800fb7c:	b508      	push	{r3, lr}
 800fb7e:	2006      	movs	r0, #6
 800fb80:	f000 fa08 	bl	800ff94 <raise>
 800fb84:	2001      	movs	r0, #1
 800fb86:	f7f2 fd1d 	bl	80025c4 <_exit>

0800fb8a <_malloc_usable_size_r>:
 800fb8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb8e:	1f18      	subs	r0, r3, #4
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	bfbc      	itt	lt
 800fb94:	580b      	ldrlt	r3, [r1, r0]
 800fb96:	18c0      	addlt	r0, r0, r3
 800fb98:	4770      	bx	lr

0800fb9a <__sfputc_r>:
 800fb9a:	6893      	ldr	r3, [r2, #8]
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	b410      	push	{r4}
 800fba2:	6093      	str	r3, [r2, #8]
 800fba4:	da08      	bge.n	800fbb8 <__sfputc_r+0x1e>
 800fba6:	6994      	ldr	r4, [r2, #24]
 800fba8:	42a3      	cmp	r3, r4
 800fbaa:	db01      	blt.n	800fbb0 <__sfputc_r+0x16>
 800fbac:	290a      	cmp	r1, #10
 800fbae:	d103      	bne.n	800fbb8 <__sfputc_r+0x1e>
 800fbb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbb4:	f000 b932 	b.w	800fe1c <__swbuf_r>
 800fbb8:	6813      	ldr	r3, [r2, #0]
 800fbba:	1c58      	adds	r0, r3, #1
 800fbbc:	6010      	str	r0, [r2, #0]
 800fbbe:	7019      	strb	r1, [r3, #0]
 800fbc0:	4608      	mov	r0, r1
 800fbc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <__sfputs_r>:
 800fbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbca:	4606      	mov	r6, r0
 800fbcc:	460f      	mov	r7, r1
 800fbce:	4614      	mov	r4, r2
 800fbd0:	18d5      	adds	r5, r2, r3
 800fbd2:	42ac      	cmp	r4, r5
 800fbd4:	d101      	bne.n	800fbda <__sfputs_r+0x12>
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	e007      	b.n	800fbea <__sfputs_r+0x22>
 800fbda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbde:	463a      	mov	r2, r7
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f7ff ffda 	bl	800fb9a <__sfputc_r>
 800fbe6:	1c43      	adds	r3, r0, #1
 800fbe8:	d1f3      	bne.n	800fbd2 <__sfputs_r+0xa>
 800fbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fbec <_vfiprintf_r>:
 800fbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	460d      	mov	r5, r1
 800fbf2:	b09d      	sub	sp, #116	@ 0x74
 800fbf4:	4614      	mov	r4, r2
 800fbf6:	4698      	mov	r8, r3
 800fbf8:	4606      	mov	r6, r0
 800fbfa:	b118      	cbz	r0, 800fc04 <_vfiprintf_r+0x18>
 800fbfc:	6a03      	ldr	r3, [r0, #32]
 800fbfe:	b90b      	cbnz	r3, 800fc04 <_vfiprintf_r+0x18>
 800fc00:	f7fc fe86 	bl	800c910 <__sinit>
 800fc04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc06:	07d9      	lsls	r1, r3, #31
 800fc08:	d405      	bmi.n	800fc16 <_vfiprintf_r+0x2a>
 800fc0a:	89ab      	ldrh	r3, [r5, #12]
 800fc0c:	059a      	lsls	r2, r3, #22
 800fc0e:	d402      	bmi.n	800fc16 <_vfiprintf_r+0x2a>
 800fc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc12:	f7fc ffc8 	bl	800cba6 <__retarget_lock_acquire_recursive>
 800fc16:	89ab      	ldrh	r3, [r5, #12]
 800fc18:	071b      	lsls	r3, r3, #28
 800fc1a:	d501      	bpl.n	800fc20 <_vfiprintf_r+0x34>
 800fc1c:	692b      	ldr	r3, [r5, #16]
 800fc1e:	b99b      	cbnz	r3, 800fc48 <_vfiprintf_r+0x5c>
 800fc20:	4629      	mov	r1, r5
 800fc22:	4630      	mov	r0, r6
 800fc24:	f000 f938 	bl	800fe98 <__swsetup_r>
 800fc28:	b170      	cbz	r0, 800fc48 <_vfiprintf_r+0x5c>
 800fc2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc2c:	07dc      	lsls	r4, r3, #31
 800fc2e:	d504      	bpl.n	800fc3a <_vfiprintf_r+0x4e>
 800fc30:	f04f 30ff 	mov.w	r0, #4294967295
 800fc34:	b01d      	add	sp, #116	@ 0x74
 800fc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc3a:	89ab      	ldrh	r3, [r5, #12]
 800fc3c:	0598      	lsls	r0, r3, #22
 800fc3e:	d4f7      	bmi.n	800fc30 <_vfiprintf_r+0x44>
 800fc40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc42:	f7fc ffb1 	bl	800cba8 <__retarget_lock_release_recursive>
 800fc46:	e7f3      	b.n	800fc30 <_vfiprintf_r+0x44>
 800fc48:	2300      	movs	r3, #0
 800fc4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc4c:	2320      	movs	r3, #32
 800fc4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc52:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc56:	2330      	movs	r3, #48	@ 0x30
 800fc58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fe08 <_vfiprintf_r+0x21c>
 800fc5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc60:	f04f 0901 	mov.w	r9, #1
 800fc64:	4623      	mov	r3, r4
 800fc66:	469a      	mov	sl, r3
 800fc68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc6c:	b10a      	cbz	r2, 800fc72 <_vfiprintf_r+0x86>
 800fc6e:	2a25      	cmp	r2, #37	@ 0x25
 800fc70:	d1f9      	bne.n	800fc66 <_vfiprintf_r+0x7a>
 800fc72:	ebba 0b04 	subs.w	fp, sl, r4
 800fc76:	d00b      	beq.n	800fc90 <_vfiprintf_r+0xa4>
 800fc78:	465b      	mov	r3, fp
 800fc7a:	4622      	mov	r2, r4
 800fc7c:	4629      	mov	r1, r5
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f7ff ffa2 	bl	800fbc8 <__sfputs_r>
 800fc84:	3001      	adds	r0, #1
 800fc86:	f000 80a7 	beq.w	800fdd8 <_vfiprintf_r+0x1ec>
 800fc8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc8c:	445a      	add	r2, fp
 800fc8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc90:	f89a 3000 	ldrb.w	r3, [sl]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f000 809f 	beq.w	800fdd8 <_vfiprintf_r+0x1ec>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800fca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fca4:	f10a 0a01 	add.w	sl, sl, #1
 800fca8:	9304      	str	r3, [sp, #16]
 800fcaa:	9307      	str	r3, [sp, #28]
 800fcac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fcb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800fcb2:	4654      	mov	r4, sl
 800fcb4:	2205      	movs	r2, #5
 800fcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcba:	4853      	ldr	r0, [pc, #332]	@ (800fe08 <_vfiprintf_r+0x21c>)
 800fcbc:	f7f0 fb10 	bl	80002e0 <memchr>
 800fcc0:	9a04      	ldr	r2, [sp, #16]
 800fcc2:	b9d8      	cbnz	r0, 800fcfc <_vfiprintf_r+0x110>
 800fcc4:	06d1      	lsls	r1, r2, #27
 800fcc6:	bf44      	itt	mi
 800fcc8:	2320      	movmi	r3, #32
 800fcca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcce:	0713      	lsls	r3, r2, #28
 800fcd0:	bf44      	itt	mi
 800fcd2:	232b      	movmi	r3, #43	@ 0x2b
 800fcd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcd8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcde:	d015      	beq.n	800fd0c <_vfiprintf_r+0x120>
 800fce0:	9a07      	ldr	r2, [sp, #28]
 800fce2:	4654      	mov	r4, sl
 800fce4:	2000      	movs	r0, #0
 800fce6:	f04f 0c0a 	mov.w	ip, #10
 800fcea:	4621      	mov	r1, r4
 800fcec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcf0:	3b30      	subs	r3, #48	@ 0x30
 800fcf2:	2b09      	cmp	r3, #9
 800fcf4:	d94b      	bls.n	800fd8e <_vfiprintf_r+0x1a2>
 800fcf6:	b1b0      	cbz	r0, 800fd26 <_vfiprintf_r+0x13a>
 800fcf8:	9207      	str	r2, [sp, #28]
 800fcfa:	e014      	b.n	800fd26 <_vfiprintf_r+0x13a>
 800fcfc:	eba0 0308 	sub.w	r3, r0, r8
 800fd00:	fa09 f303 	lsl.w	r3, r9, r3
 800fd04:	4313      	orrs	r3, r2
 800fd06:	9304      	str	r3, [sp, #16]
 800fd08:	46a2      	mov	sl, r4
 800fd0a:	e7d2      	b.n	800fcb2 <_vfiprintf_r+0xc6>
 800fd0c:	9b03      	ldr	r3, [sp, #12]
 800fd0e:	1d19      	adds	r1, r3, #4
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	9103      	str	r1, [sp, #12]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	bfbb      	ittet	lt
 800fd18:	425b      	neglt	r3, r3
 800fd1a:	f042 0202 	orrlt.w	r2, r2, #2
 800fd1e:	9307      	strge	r3, [sp, #28]
 800fd20:	9307      	strlt	r3, [sp, #28]
 800fd22:	bfb8      	it	lt
 800fd24:	9204      	strlt	r2, [sp, #16]
 800fd26:	7823      	ldrb	r3, [r4, #0]
 800fd28:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd2a:	d10a      	bne.n	800fd42 <_vfiprintf_r+0x156>
 800fd2c:	7863      	ldrb	r3, [r4, #1]
 800fd2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd30:	d132      	bne.n	800fd98 <_vfiprintf_r+0x1ac>
 800fd32:	9b03      	ldr	r3, [sp, #12]
 800fd34:	1d1a      	adds	r2, r3, #4
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	9203      	str	r2, [sp, #12]
 800fd3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd3e:	3402      	adds	r4, #2
 800fd40:	9305      	str	r3, [sp, #20]
 800fd42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fe18 <_vfiprintf_r+0x22c>
 800fd46:	7821      	ldrb	r1, [r4, #0]
 800fd48:	2203      	movs	r2, #3
 800fd4a:	4650      	mov	r0, sl
 800fd4c:	f7f0 fac8 	bl	80002e0 <memchr>
 800fd50:	b138      	cbz	r0, 800fd62 <_vfiprintf_r+0x176>
 800fd52:	9b04      	ldr	r3, [sp, #16]
 800fd54:	eba0 000a 	sub.w	r0, r0, sl
 800fd58:	2240      	movs	r2, #64	@ 0x40
 800fd5a:	4082      	lsls	r2, r0
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	3401      	adds	r4, #1
 800fd60:	9304      	str	r3, [sp, #16]
 800fd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd66:	4829      	ldr	r0, [pc, #164]	@ (800fe0c <_vfiprintf_r+0x220>)
 800fd68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd6c:	2206      	movs	r2, #6
 800fd6e:	f7f0 fab7 	bl	80002e0 <memchr>
 800fd72:	2800      	cmp	r0, #0
 800fd74:	d03f      	beq.n	800fdf6 <_vfiprintf_r+0x20a>
 800fd76:	4b26      	ldr	r3, [pc, #152]	@ (800fe10 <_vfiprintf_r+0x224>)
 800fd78:	bb1b      	cbnz	r3, 800fdc2 <_vfiprintf_r+0x1d6>
 800fd7a:	9b03      	ldr	r3, [sp, #12]
 800fd7c:	3307      	adds	r3, #7
 800fd7e:	f023 0307 	bic.w	r3, r3, #7
 800fd82:	3308      	adds	r3, #8
 800fd84:	9303      	str	r3, [sp, #12]
 800fd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd88:	443b      	add	r3, r7
 800fd8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd8c:	e76a      	b.n	800fc64 <_vfiprintf_r+0x78>
 800fd8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd92:	460c      	mov	r4, r1
 800fd94:	2001      	movs	r0, #1
 800fd96:	e7a8      	b.n	800fcea <_vfiprintf_r+0xfe>
 800fd98:	2300      	movs	r3, #0
 800fd9a:	3401      	adds	r4, #1
 800fd9c:	9305      	str	r3, [sp, #20]
 800fd9e:	4619      	mov	r1, r3
 800fda0:	f04f 0c0a 	mov.w	ip, #10
 800fda4:	4620      	mov	r0, r4
 800fda6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdaa:	3a30      	subs	r2, #48	@ 0x30
 800fdac:	2a09      	cmp	r2, #9
 800fdae:	d903      	bls.n	800fdb8 <_vfiprintf_r+0x1cc>
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d0c6      	beq.n	800fd42 <_vfiprintf_r+0x156>
 800fdb4:	9105      	str	r1, [sp, #20]
 800fdb6:	e7c4      	b.n	800fd42 <_vfiprintf_r+0x156>
 800fdb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e7f0      	b.n	800fda4 <_vfiprintf_r+0x1b8>
 800fdc2:	ab03      	add	r3, sp, #12
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	462a      	mov	r2, r5
 800fdc8:	4b12      	ldr	r3, [pc, #72]	@ (800fe14 <_vfiprintf_r+0x228>)
 800fdca:	a904      	add	r1, sp, #16
 800fdcc:	4630      	mov	r0, r6
 800fdce:	f7fb ff5f 	bl	800bc90 <_printf_float>
 800fdd2:	4607      	mov	r7, r0
 800fdd4:	1c78      	adds	r0, r7, #1
 800fdd6:	d1d6      	bne.n	800fd86 <_vfiprintf_r+0x19a>
 800fdd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdda:	07d9      	lsls	r1, r3, #31
 800fddc:	d405      	bmi.n	800fdea <_vfiprintf_r+0x1fe>
 800fdde:	89ab      	ldrh	r3, [r5, #12]
 800fde0:	059a      	lsls	r2, r3, #22
 800fde2:	d402      	bmi.n	800fdea <_vfiprintf_r+0x1fe>
 800fde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fde6:	f7fc fedf 	bl	800cba8 <__retarget_lock_release_recursive>
 800fdea:	89ab      	ldrh	r3, [r5, #12]
 800fdec:	065b      	lsls	r3, r3, #25
 800fdee:	f53f af1f 	bmi.w	800fc30 <_vfiprintf_r+0x44>
 800fdf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdf4:	e71e      	b.n	800fc34 <_vfiprintf_r+0x48>
 800fdf6:	ab03      	add	r3, sp, #12
 800fdf8:	9300      	str	r3, [sp, #0]
 800fdfa:	462a      	mov	r2, r5
 800fdfc:	4b05      	ldr	r3, [pc, #20]	@ (800fe14 <_vfiprintf_r+0x228>)
 800fdfe:	a904      	add	r1, sp, #16
 800fe00:	4630      	mov	r0, r6
 800fe02:	f7fc f9cd 	bl	800c1a0 <_printf_i>
 800fe06:	e7e4      	b.n	800fdd2 <_vfiprintf_r+0x1e6>
 800fe08:	080109f9 	.word	0x080109f9
 800fe0c:	08010a03 	.word	0x08010a03
 800fe10:	0800bc91 	.word	0x0800bc91
 800fe14:	0800fbc9 	.word	0x0800fbc9
 800fe18:	080109ff 	.word	0x080109ff

0800fe1c <__swbuf_r>:
 800fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1e:	460e      	mov	r6, r1
 800fe20:	4614      	mov	r4, r2
 800fe22:	4605      	mov	r5, r0
 800fe24:	b118      	cbz	r0, 800fe2e <__swbuf_r+0x12>
 800fe26:	6a03      	ldr	r3, [r0, #32]
 800fe28:	b90b      	cbnz	r3, 800fe2e <__swbuf_r+0x12>
 800fe2a:	f7fc fd71 	bl	800c910 <__sinit>
 800fe2e:	69a3      	ldr	r3, [r4, #24]
 800fe30:	60a3      	str	r3, [r4, #8]
 800fe32:	89a3      	ldrh	r3, [r4, #12]
 800fe34:	071a      	lsls	r2, r3, #28
 800fe36:	d501      	bpl.n	800fe3c <__swbuf_r+0x20>
 800fe38:	6923      	ldr	r3, [r4, #16]
 800fe3a:	b943      	cbnz	r3, 800fe4e <__swbuf_r+0x32>
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 f82a 	bl	800fe98 <__swsetup_r>
 800fe44:	b118      	cbz	r0, 800fe4e <__swbuf_r+0x32>
 800fe46:	f04f 37ff 	mov.w	r7, #4294967295
 800fe4a:	4638      	mov	r0, r7
 800fe4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	6922      	ldr	r2, [r4, #16]
 800fe52:	1a98      	subs	r0, r3, r2
 800fe54:	6963      	ldr	r3, [r4, #20]
 800fe56:	b2f6      	uxtb	r6, r6
 800fe58:	4283      	cmp	r3, r0
 800fe5a:	4637      	mov	r7, r6
 800fe5c:	dc05      	bgt.n	800fe6a <__swbuf_r+0x4e>
 800fe5e:	4621      	mov	r1, r4
 800fe60:	4628      	mov	r0, r5
 800fe62:	f7ff fa45 	bl	800f2f0 <_fflush_r>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d1ed      	bne.n	800fe46 <__swbuf_r+0x2a>
 800fe6a:	68a3      	ldr	r3, [r4, #8]
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	60a3      	str	r3, [r4, #8]
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	1c5a      	adds	r2, r3, #1
 800fe74:	6022      	str	r2, [r4, #0]
 800fe76:	701e      	strb	r6, [r3, #0]
 800fe78:	6962      	ldr	r2, [r4, #20]
 800fe7a:	1c43      	adds	r3, r0, #1
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d004      	beq.n	800fe8a <__swbuf_r+0x6e>
 800fe80:	89a3      	ldrh	r3, [r4, #12]
 800fe82:	07db      	lsls	r3, r3, #31
 800fe84:	d5e1      	bpl.n	800fe4a <__swbuf_r+0x2e>
 800fe86:	2e0a      	cmp	r6, #10
 800fe88:	d1df      	bne.n	800fe4a <__swbuf_r+0x2e>
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	f7ff fa2f 	bl	800f2f0 <_fflush_r>
 800fe92:	2800      	cmp	r0, #0
 800fe94:	d0d9      	beq.n	800fe4a <__swbuf_r+0x2e>
 800fe96:	e7d6      	b.n	800fe46 <__swbuf_r+0x2a>

0800fe98 <__swsetup_r>:
 800fe98:	b538      	push	{r3, r4, r5, lr}
 800fe9a:	4b29      	ldr	r3, [pc, #164]	@ (800ff40 <__swsetup_r+0xa8>)
 800fe9c:	4605      	mov	r5, r0
 800fe9e:	6818      	ldr	r0, [r3, #0]
 800fea0:	460c      	mov	r4, r1
 800fea2:	b118      	cbz	r0, 800feac <__swsetup_r+0x14>
 800fea4:	6a03      	ldr	r3, [r0, #32]
 800fea6:	b90b      	cbnz	r3, 800feac <__swsetup_r+0x14>
 800fea8:	f7fc fd32 	bl	800c910 <__sinit>
 800feac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feb0:	0719      	lsls	r1, r3, #28
 800feb2:	d422      	bmi.n	800fefa <__swsetup_r+0x62>
 800feb4:	06da      	lsls	r2, r3, #27
 800feb6:	d407      	bmi.n	800fec8 <__swsetup_r+0x30>
 800feb8:	2209      	movs	r2, #9
 800feba:	602a      	str	r2, [r5, #0]
 800febc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fec0:	81a3      	strh	r3, [r4, #12]
 800fec2:	f04f 30ff 	mov.w	r0, #4294967295
 800fec6:	e033      	b.n	800ff30 <__swsetup_r+0x98>
 800fec8:	0758      	lsls	r0, r3, #29
 800feca:	d512      	bpl.n	800fef2 <__swsetup_r+0x5a>
 800fecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fece:	b141      	cbz	r1, 800fee2 <__swsetup_r+0x4a>
 800fed0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fed4:	4299      	cmp	r1, r3
 800fed6:	d002      	beq.n	800fede <__swsetup_r+0x46>
 800fed8:	4628      	mov	r0, r5
 800feda:	f7fd fc4b 	bl	800d774 <_free_r>
 800fede:	2300      	movs	r3, #0
 800fee0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fee8:	81a3      	strh	r3, [r4, #12]
 800feea:	2300      	movs	r3, #0
 800feec:	6063      	str	r3, [r4, #4]
 800feee:	6923      	ldr	r3, [r4, #16]
 800fef0:	6023      	str	r3, [r4, #0]
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	f043 0308 	orr.w	r3, r3, #8
 800fef8:	81a3      	strh	r3, [r4, #12]
 800fefa:	6923      	ldr	r3, [r4, #16]
 800fefc:	b94b      	cbnz	r3, 800ff12 <__swsetup_r+0x7a>
 800fefe:	89a3      	ldrh	r3, [r4, #12]
 800ff00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff08:	d003      	beq.n	800ff12 <__swsetup_r+0x7a>
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	f000 f883 	bl	8010018 <__smakebuf_r>
 800ff12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff16:	f013 0201 	ands.w	r2, r3, #1
 800ff1a:	d00a      	beq.n	800ff32 <__swsetup_r+0x9a>
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	60a2      	str	r2, [r4, #8]
 800ff20:	6962      	ldr	r2, [r4, #20]
 800ff22:	4252      	negs	r2, r2
 800ff24:	61a2      	str	r2, [r4, #24]
 800ff26:	6922      	ldr	r2, [r4, #16]
 800ff28:	b942      	cbnz	r2, 800ff3c <__swsetup_r+0xa4>
 800ff2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff2e:	d1c5      	bne.n	800febc <__swsetup_r+0x24>
 800ff30:	bd38      	pop	{r3, r4, r5, pc}
 800ff32:	0799      	lsls	r1, r3, #30
 800ff34:	bf58      	it	pl
 800ff36:	6962      	ldrpl	r2, [r4, #20]
 800ff38:	60a2      	str	r2, [r4, #8]
 800ff3a:	e7f4      	b.n	800ff26 <__swsetup_r+0x8e>
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	e7f7      	b.n	800ff30 <__swsetup_r+0x98>
 800ff40:	24000020 	.word	0x24000020

0800ff44 <_raise_r>:
 800ff44:	291f      	cmp	r1, #31
 800ff46:	b538      	push	{r3, r4, r5, lr}
 800ff48:	4605      	mov	r5, r0
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	d904      	bls.n	800ff58 <_raise_r+0x14>
 800ff4e:	2316      	movs	r3, #22
 800ff50:	6003      	str	r3, [r0, #0]
 800ff52:	f04f 30ff 	mov.w	r0, #4294967295
 800ff56:	bd38      	pop	{r3, r4, r5, pc}
 800ff58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff5a:	b112      	cbz	r2, 800ff62 <_raise_r+0x1e>
 800ff5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff60:	b94b      	cbnz	r3, 800ff76 <_raise_r+0x32>
 800ff62:	4628      	mov	r0, r5
 800ff64:	f000 f830 	bl	800ffc8 <_getpid_r>
 800ff68:	4622      	mov	r2, r4
 800ff6a:	4601      	mov	r1, r0
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff72:	f000 b817 	b.w	800ffa4 <_kill_r>
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d00a      	beq.n	800ff90 <_raise_r+0x4c>
 800ff7a:	1c59      	adds	r1, r3, #1
 800ff7c:	d103      	bne.n	800ff86 <_raise_r+0x42>
 800ff7e:	2316      	movs	r3, #22
 800ff80:	6003      	str	r3, [r0, #0]
 800ff82:	2001      	movs	r0, #1
 800ff84:	e7e7      	b.n	800ff56 <_raise_r+0x12>
 800ff86:	2100      	movs	r1, #0
 800ff88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	4798      	blx	r3
 800ff90:	2000      	movs	r0, #0
 800ff92:	e7e0      	b.n	800ff56 <_raise_r+0x12>

0800ff94 <raise>:
 800ff94:	4b02      	ldr	r3, [pc, #8]	@ (800ffa0 <raise+0xc>)
 800ff96:	4601      	mov	r1, r0
 800ff98:	6818      	ldr	r0, [r3, #0]
 800ff9a:	f7ff bfd3 	b.w	800ff44 <_raise_r>
 800ff9e:	bf00      	nop
 800ffa0:	24000020 	.word	0x24000020

0800ffa4 <_kill_r>:
 800ffa4:	b538      	push	{r3, r4, r5, lr}
 800ffa6:	4d07      	ldr	r5, [pc, #28]	@ (800ffc4 <_kill_r+0x20>)
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	4604      	mov	r4, r0
 800ffac:	4608      	mov	r0, r1
 800ffae:	4611      	mov	r1, r2
 800ffb0:	602b      	str	r3, [r5, #0]
 800ffb2:	f7f2 faf7 	bl	80025a4 <_kill>
 800ffb6:	1c43      	adds	r3, r0, #1
 800ffb8:	d102      	bne.n	800ffc0 <_kill_r+0x1c>
 800ffba:	682b      	ldr	r3, [r5, #0]
 800ffbc:	b103      	cbz	r3, 800ffc0 <_kill_r+0x1c>
 800ffbe:	6023      	str	r3, [r4, #0]
 800ffc0:	bd38      	pop	{r3, r4, r5, pc}
 800ffc2:	bf00      	nop
 800ffc4:	24000788 	.word	0x24000788

0800ffc8 <_getpid_r>:
 800ffc8:	f7f2 bae4 	b.w	8002594 <_getpid>

0800ffcc <__swhatbuf_r>:
 800ffcc:	b570      	push	{r4, r5, r6, lr}
 800ffce:	460c      	mov	r4, r1
 800ffd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffd4:	2900      	cmp	r1, #0
 800ffd6:	b096      	sub	sp, #88	@ 0x58
 800ffd8:	4615      	mov	r5, r2
 800ffda:	461e      	mov	r6, r3
 800ffdc:	da0d      	bge.n	800fffa <__swhatbuf_r+0x2e>
 800ffde:	89a3      	ldrh	r3, [r4, #12]
 800ffe0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ffe4:	f04f 0100 	mov.w	r1, #0
 800ffe8:	bf14      	ite	ne
 800ffea:	2340      	movne	r3, #64	@ 0x40
 800ffec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fff0:	2000      	movs	r0, #0
 800fff2:	6031      	str	r1, [r6, #0]
 800fff4:	602b      	str	r3, [r5, #0]
 800fff6:	b016      	add	sp, #88	@ 0x58
 800fff8:	bd70      	pop	{r4, r5, r6, pc}
 800fffa:	466a      	mov	r2, sp
 800fffc:	f000 f848 	bl	8010090 <_fstat_r>
 8010000:	2800      	cmp	r0, #0
 8010002:	dbec      	blt.n	800ffde <__swhatbuf_r+0x12>
 8010004:	9901      	ldr	r1, [sp, #4]
 8010006:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801000a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801000e:	4259      	negs	r1, r3
 8010010:	4159      	adcs	r1, r3
 8010012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010016:	e7eb      	b.n	800fff0 <__swhatbuf_r+0x24>

08010018 <__smakebuf_r>:
 8010018:	898b      	ldrh	r3, [r1, #12]
 801001a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801001c:	079d      	lsls	r5, r3, #30
 801001e:	4606      	mov	r6, r0
 8010020:	460c      	mov	r4, r1
 8010022:	d507      	bpl.n	8010034 <__smakebuf_r+0x1c>
 8010024:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	6123      	str	r3, [r4, #16]
 801002c:	2301      	movs	r3, #1
 801002e:	6163      	str	r3, [r4, #20]
 8010030:	b003      	add	sp, #12
 8010032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010034:	ab01      	add	r3, sp, #4
 8010036:	466a      	mov	r2, sp
 8010038:	f7ff ffc8 	bl	800ffcc <__swhatbuf_r>
 801003c:	9f00      	ldr	r7, [sp, #0]
 801003e:	4605      	mov	r5, r0
 8010040:	4639      	mov	r1, r7
 8010042:	4630      	mov	r0, r6
 8010044:	f7fd fc0a 	bl	800d85c <_malloc_r>
 8010048:	b948      	cbnz	r0, 801005e <__smakebuf_r+0x46>
 801004a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801004e:	059a      	lsls	r2, r3, #22
 8010050:	d4ee      	bmi.n	8010030 <__smakebuf_r+0x18>
 8010052:	f023 0303 	bic.w	r3, r3, #3
 8010056:	f043 0302 	orr.w	r3, r3, #2
 801005a:	81a3      	strh	r3, [r4, #12]
 801005c:	e7e2      	b.n	8010024 <__smakebuf_r+0xc>
 801005e:	89a3      	ldrh	r3, [r4, #12]
 8010060:	6020      	str	r0, [r4, #0]
 8010062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010066:	81a3      	strh	r3, [r4, #12]
 8010068:	9b01      	ldr	r3, [sp, #4]
 801006a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801006e:	b15b      	cbz	r3, 8010088 <__smakebuf_r+0x70>
 8010070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010074:	4630      	mov	r0, r6
 8010076:	f000 f81d 	bl	80100b4 <_isatty_r>
 801007a:	b128      	cbz	r0, 8010088 <__smakebuf_r+0x70>
 801007c:	89a3      	ldrh	r3, [r4, #12]
 801007e:	f023 0303 	bic.w	r3, r3, #3
 8010082:	f043 0301 	orr.w	r3, r3, #1
 8010086:	81a3      	strh	r3, [r4, #12]
 8010088:	89a3      	ldrh	r3, [r4, #12]
 801008a:	431d      	orrs	r5, r3
 801008c:	81a5      	strh	r5, [r4, #12]
 801008e:	e7cf      	b.n	8010030 <__smakebuf_r+0x18>

08010090 <_fstat_r>:
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	4d07      	ldr	r5, [pc, #28]	@ (80100b0 <_fstat_r+0x20>)
 8010094:	2300      	movs	r3, #0
 8010096:	4604      	mov	r4, r0
 8010098:	4608      	mov	r0, r1
 801009a:	4611      	mov	r1, r2
 801009c:	602b      	str	r3, [r5, #0]
 801009e:	f7f2 fac5 	bl	800262c <_fstat>
 80100a2:	1c43      	adds	r3, r0, #1
 80100a4:	d102      	bne.n	80100ac <_fstat_r+0x1c>
 80100a6:	682b      	ldr	r3, [r5, #0]
 80100a8:	b103      	cbz	r3, 80100ac <_fstat_r+0x1c>
 80100aa:	6023      	str	r3, [r4, #0]
 80100ac:	bd38      	pop	{r3, r4, r5, pc}
 80100ae:	bf00      	nop
 80100b0:	24000788 	.word	0x24000788

080100b4 <_isatty_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4d06      	ldr	r5, [pc, #24]	@ (80100d0 <_isatty_r+0x1c>)
 80100b8:	2300      	movs	r3, #0
 80100ba:	4604      	mov	r4, r0
 80100bc:	4608      	mov	r0, r1
 80100be:	602b      	str	r3, [r5, #0]
 80100c0:	f7f2 fac4 	bl	800264c <_isatty>
 80100c4:	1c43      	adds	r3, r0, #1
 80100c6:	d102      	bne.n	80100ce <_isatty_r+0x1a>
 80100c8:	682b      	ldr	r3, [r5, #0]
 80100ca:	b103      	cbz	r3, 80100ce <_isatty_r+0x1a>
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	bd38      	pop	{r3, r4, r5, pc}
 80100d0:	24000788 	.word	0x24000788

080100d4 <asinf>:
 80100d4:	b508      	push	{r3, lr}
 80100d6:	ed2d 8b02 	vpush	{d8}
 80100da:	eeb0 8a40 	vmov.f32	s16, s0
 80100de:	f000 f82f 	bl	8010140 <__ieee754_asinf>
 80100e2:	eeb4 8a48 	vcmp.f32	s16, s16
 80100e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ea:	eef0 8a40 	vmov.f32	s17, s0
 80100ee:	d615      	bvs.n	801011c <asinf+0x48>
 80100f0:	eeb0 0a48 	vmov.f32	s0, s16
 80100f4:	f000 f81c 	bl	8010130 <fabsf>
 80100f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80100fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010104:	dd0a      	ble.n	801011c <asinf+0x48>
 8010106:	f7fc fd23 	bl	800cb50 <__errno>
 801010a:	ecbd 8b02 	vpop	{d8}
 801010e:	2321      	movs	r3, #33	@ 0x21
 8010110:	6003      	str	r3, [r0, #0]
 8010112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010116:	4804      	ldr	r0, [pc, #16]	@ (8010128 <asinf+0x54>)
 8010118:	f7fc bd48 	b.w	800cbac <nanf>
 801011c:	eeb0 0a68 	vmov.f32	s0, s17
 8010120:	ecbd 8b02 	vpop	{d8}
 8010124:	bd08      	pop	{r3, pc}
 8010126:	bf00      	nop
 8010128:	08010a4d 	.word	0x08010a4d

0801012c <atan2f>:
 801012c:	f000 b8ee 	b.w	801030c <__ieee754_atan2f>

08010130 <fabsf>:
 8010130:	ee10 3a10 	vmov	r3, s0
 8010134:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010138:	ee00 3a10 	vmov	s0, r3
 801013c:	4770      	bx	lr
	...

08010140 <__ieee754_asinf>:
 8010140:	b538      	push	{r3, r4, r5, lr}
 8010142:	ee10 5a10 	vmov	r5, s0
 8010146:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801014a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801014e:	ed2d 8b04 	vpush	{d8-d9}
 8010152:	d10c      	bne.n	801016e <__ieee754_asinf+0x2e>
 8010154:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80102cc <__ieee754_asinf+0x18c>
 8010158:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80102d0 <__ieee754_asinf+0x190>
 801015c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010160:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010164:	eeb0 0a67 	vmov.f32	s0, s15
 8010168:	ecbd 8b04 	vpop	{d8-d9}
 801016c:	bd38      	pop	{r3, r4, r5, pc}
 801016e:	d904      	bls.n	801017a <__ieee754_asinf+0x3a>
 8010170:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010174:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010178:	e7f6      	b.n	8010168 <__ieee754_asinf+0x28>
 801017a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801017e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010182:	d20b      	bcs.n	801019c <__ieee754_asinf+0x5c>
 8010184:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010188:	d252      	bcs.n	8010230 <__ieee754_asinf+0xf0>
 801018a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80102d4 <__ieee754_asinf+0x194>
 801018e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010192:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019a:	dce5      	bgt.n	8010168 <__ieee754_asinf+0x28>
 801019c:	f7ff ffc8 	bl	8010130 <fabsf>
 80101a0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80101a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80101a8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80101ac:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80102d8 <__ieee754_asinf+0x198>
 80101b0:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80102dc <__ieee754_asinf+0x19c>
 80101b4:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80102e0 <__ieee754_asinf+0x1a0>
 80101b8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80101bc:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80102e4 <__ieee754_asinf+0x1a4>
 80101c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80101c4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80102e8 <__ieee754_asinf+0x1a8>
 80101c8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80101cc:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80102ec <__ieee754_asinf+0x1ac>
 80101d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80101d4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80102f0 <__ieee754_asinf+0x1b0>
 80101d8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80101dc:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80102f4 <__ieee754_asinf+0x1b4>
 80101e0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80101e4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80102f8 <__ieee754_asinf+0x1b8>
 80101e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80101ec:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80102fc <__ieee754_asinf+0x1bc>
 80101f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80101f4:	eeb0 0a48 	vmov.f32	s0, s16
 80101f8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80101fc:	f000 f9f8 	bl	80105f0 <__ieee754_sqrtf>
 8010200:	4b3f      	ldr	r3, [pc, #252]	@ (8010300 <__ieee754_asinf+0x1c0>)
 8010202:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010206:	429c      	cmp	r4, r3
 8010208:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801020c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010210:	d93d      	bls.n	801028e <__ieee754_asinf+0x14e>
 8010212:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010216:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010304 <__ieee754_asinf+0x1c4>
 801021a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801021e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80102d0 <__ieee754_asinf+0x190>
 8010222:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010226:	2d00      	cmp	r5, #0
 8010228:	bfd8      	it	le
 801022a:	eeb1 0a40 	vnegle.f32	s0, s0
 801022e:	e79b      	b.n	8010168 <__ieee754_asinf+0x28>
 8010230:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010234:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80102dc <__ieee754_asinf+0x19c>
 8010238:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80102d8 <__ieee754_asinf+0x198>
 801023c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80102f0 <__ieee754_asinf+0x1b0>
 8010240:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010244:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80102e4 <__ieee754_asinf+0x1a4>
 8010248:	eee7 6a27 	vfma.f32	s13, s14, s15
 801024c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80102e8 <__ieee754_asinf+0x1a8>
 8010250:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010254:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80102ec <__ieee754_asinf+0x1ac>
 8010258:	eee7 6a27 	vfma.f32	s13, s14, s15
 801025c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80102e0 <__ieee754_asinf+0x1a0>
 8010260:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010264:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80102f4 <__ieee754_asinf+0x1b4>
 8010268:	eee7 6a86 	vfma.f32	s13, s15, s12
 801026c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80102f8 <__ieee754_asinf+0x1b8>
 8010270:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010274:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80102fc <__ieee754_asinf+0x1bc>
 8010278:	eee6 6a27 	vfma.f32	s13, s12, s15
 801027c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010280:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010284:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010288:	eea0 0a27 	vfma.f32	s0, s0, s15
 801028c:	e76c      	b.n	8010168 <__ieee754_asinf+0x28>
 801028e:	ee10 3a10 	vmov	r3, s0
 8010292:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010296:	f023 030f 	bic.w	r3, r3, #15
 801029a:	ee07 3a10 	vmov	s14, r3
 801029e:	eea7 8a47 	vfms.f32	s16, s14, s14
 80102a2:	ee70 5a00 	vadd.f32	s11, s0, s0
 80102a6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80102aa:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80102cc <__ieee754_asinf+0x18c>
 80102ae:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80102b2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8010308 <__ieee754_asinf+0x1c8>
 80102b6:	eee5 7a66 	vfms.f32	s15, s10, s13
 80102ba:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80102be:	eeb0 6a40 	vmov.f32	s12, s0
 80102c2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80102c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80102ca:	e7aa      	b.n	8010222 <__ieee754_asinf+0xe2>
 80102cc:	b33bbd2e 	.word	0xb33bbd2e
 80102d0:	3fc90fdb 	.word	0x3fc90fdb
 80102d4:	7149f2ca 	.word	0x7149f2ca
 80102d8:	3a4f7f04 	.word	0x3a4f7f04
 80102dc:	3811ef08 	.word	0x3811ef08
 80102e0:	3e2aaaab 	.word	0x3e2aaaab
 80102e4:	bd241146 	.word	0xbd241146
 80102e8:	3e4e0aa8 	.word	0x3e4e0aa8
 80102ec:	bea6b090 	.word	0xbea6b090
 80102f0:	3d9dc62e 	.word	0x3d9dc62e
 80102f4:	bf303361 	.word	0xbf303361
 80102f8:	4001572d 	.word	0x4001572d
 80102fc:	c019d139 	.word	0xc019d139
 8010300:	3f799999 	.word	0x3f799999
 8010304:	333bbd2e 	.word	0x333bbd2e
 8010308:	3f490fdb 	.word	0x3f490fdb

0801030c <__ieee754_atan2f>:
 801030c:	ee10 2a90 	vmov	r2, s1
 8010310:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010314:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010318:	b510      	push	{r4, lr}
 801031a:	eef0 7a40 	vmov.f32	s15, s0
 801031e:	d806      	bhi.n	801032e <__ieee754_atan2f+0x22>
 8010320:	ee10 0a10 	vmov	r0, s0
 8010324:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010328:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801032c:	d904      	bls.n	8010338 <__ieee754_atan2f+0x2c>
 801032e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010332:	eeb0 0a67 	vmov.f32	s0, s15
 8010336:	bd10      	pop	{r4, pc}
 8010338:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801033c:	d103      	bne.n	8010346 <__ieee754_atan2f+0x3a>
 801033e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010342:	f000 b881 	b.w	8010448 <atanf>
 8010346:	1794      	asrs	r4, r2, #30
 8010348:	f004 0402 	and.w	r4, r4, #2
 801034c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010350:	b93b      	cbnz	r3, 8010362 <__ieee754_atan2f+0x56>
 8010352:	2c02      	cmp	r4, #2
 8010354:	d05c      	beq.n	8010410 <__ieee754_atan2f+0x104>
 8010356:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8010424 <__ieee754_atan2f+0x118>
 801035a:	2c03      	cmp	r4, #3
 801035c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8010360:	e7e7      	b.n	8010332 <__ieee754_atan2f+0x26>
 8010362:	b939      	cbnz	r1, 8010374 <__ieee754_atan2f+0x68>
 8010364:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8010428 <__ieee754_atan2f+0x11c>
 8010368:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801042c <__ieee754_atan2f+0x120>
 801036c:	2800      	cmp	r0, #0
 801036e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8010372:	e7de      	b.n	8010332 <__ieee754_atan2f+0x26>
 8010374:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010378:	d110      	bne.n	801039c <__ieee754_atan2f+0x90>
 801037a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801037e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010382:	d107      	bne.n	8010394 <__ieee754_atan2f+0x88>
 8010384:	2c02      	cmp	r4, #2
 8010386:	d846      	bhi.n	8010416 <__ieee754_atan2f+0x10a>
 8010388:	4b29      	ldr	r3, [pc, #164]	@ (8010430 <__ieee754_atan2f+0x124>)
 801038a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801038e:	edd3 7a00 	vldr	s15, [r3]
 8010392:	e7ce      	b.n	8010332 <__ieee754_atan2f+0x26>
 8010394:	2c02      	cmp	r4, #2
 8010396:	d841      	bhi.n	801041c <__ieee754_atan2f+0x110>
 8010398:	4b26      	ldr	r3, [pc, #152]	@ (8010434 <__ieee754_atan2f+0x128>)
 801039a:	e7f6      	b.n	801038a <__ieee754_atan2f+0x7e>
 801039c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80103a0:	d0e0      	beq.n	8010364 <__ieee754_atan2f+0x58>
 80103a2:	1a5b      	subs	r3, r3, r1
 80103a4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80103a8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80103ac:	da1a      	bge.n	80103e4 <__ieee754_atan2f+0xd8>
 80103ae:	2a00      	cmp	r2, #0
 80103b0:	da01      	bge.n	80103b6 <__ieee754_atan2f+0xaa>
 80103b2:	313c      	adds	r1, #60	@ 0x3c
 80103b4:	db19      	blt.n	80103ea <__ieee754_atan2f+0xde>
 80103b6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80103ba:	f7ff feb9 	bl	8010130 <fabsf>
 80103be:	f000 f843 	bl	8010448 <atanf>
 80103c2:	eef0 7a40 	vmov.f32	s15, s0
 80103c6:	2c01      	cmp	r4, #1
 80103c8:	d012      	beq.n	80103f0 <__ieee754_atan2f+0xe4>
 80103ca:	2c02      	cmp	r4, #2
 80103cc:	d017      	beq.n	80103fe <__ieee754_atan2f+0xf2>
 80103ce:	2c00      	cmp	r4, #0
 80103d0:	d0af      	beq.n	8010332 <__ieee754_atan2f+0x26>
 80103d2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010438 <__ieee754_atan2f+0x12c>
 80103d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103da:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801043c <__ieee754_atan2f+0x130>
 80103de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103e2:	e7a6      	b.n	8010332 <__ieee754_atan2f+0x26>
 80103e4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010428 <__ieee754_atan2f+0x11c>
 80103e8:	e7ed      	b.n	80103c6 <__ieee754_atan2f+0xba>
 80103ea:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010440 <__ieee754_atan2f+0x134>
 80103ee:	e7ea      	b.n	80103c6 <__ieee754_atan2f+0xba>
 80103f0:	ee17 3a90 	vmov	r3, s15
 80103f4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80103f8:	ee07 3a90 	vmov	s15, r3
 80103fc:	e799      	b.n	8010332 <__ieee754_atan2f+0x26>
 80103fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010438 <__ieee754_atan2f+0x12c>
 8010402:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010406:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801043c <__ieee754_atan2f+0x130>
 801040a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801040e:	e790      	b.n	8010332 <__ieee754_atan2f+0x26>
 8010410:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801043c <__ieee754_atan2f+0x130>
 8010414:	e78d      	b.n	8010332 <__ieee754_atan2f+0x26>
 8010416:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010444 <__ieee754_atan2f+0x138>
 801041a:	e78a      	b.n	8010332 <__ieee754_atan2f+0x26>
 801041c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010440 <__ieee754_atan2f+0x134>
 8010420:	e787      	b.n	8010332 <__ieee754_atan2f+0x26>
 8010422:	bf00      	nop
 8010424:	c0490fdb 	.word	0xc0490fdb
 8010428:	3fc90fdb 	.word	0x3fc90fdb
 801042c:	bfc90fdb 	.word	0xbfc90fdb
 8010430:	08010abc 	.word	0x08010abc
 8010434:	08010ab0 	.word	0x08010ab0
 8010438:	33bbbd2e 	.word	0x33bbbd2e
 801043c:	40490fdb 	.word	0x40490fdb
 8010440:	00000000 	.word	0x00000000
 8010444:	3f490fdb 	.word	0x3f490fdb

08010448 <atanf>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	ee10 5a10 	vmov	r5, s0
 801044e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010452:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010456:	eef0 7a40 	vmov.f32	s15, s0
 801045a:	d30f      	bcc.n	801047c <atanf+0x34>
 801045c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010460:	d904      	bls.n	801046c <atanf+0x24>
 8010462:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010466:	eeb0 0a67 	vmov.f32	s0, s15
 801046a:	bd38      	pop	{r3, r4, r5, pc}
 801046c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80105a4 <atanf+0x15c>
 8010470:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80105a8 <atanf+0x160>
 8010474:	2d00      	cmp	r5, #0
 8010476:	fe77 7a27 	vselgt.f32	s15, s14, s15
 801047a:	e7f4      	b.n	8010466 <atanf+0x1e>
 801047c:	4b4b      	ldr	r3, [pc, #300]	@ (80105ac <atanf+0x164>)
 801047e:	429c      	cmp	r4, r3
 8010480:	d810      	bhi.n	80104a4 <atanf+0x5c>
 8010482:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010486:	d20a      	bcs.n	801049e <atanf+0x56>
 8010488:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80105b0 <atanf+0x168>
 801048c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010494:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801049c:	dce3      	bgt.n	8010466 <atanf+0x1e>
 801049e:	f04f 33ff 	mov.w	r3, #4294967295
 80104a2:	e013      	b.n	80104cc <atanf+0x84>
 80104a4:	f7ff fe44 	bl	8010130 <fabsf>
 80104a8:	4b42      	ldr	r3, [pc, #264]	@ (80105b4 <atanf+0x16c>)
 80104aa:	429c      	cmp	r4, r3
 80104ac:	d84f      	bhi.n	801054e <atanf+0x106>
 80104ae:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80104b2:	429c      	cmp	r4, r3
 80104b4:	d841      	bhi.n	801053a <atanf+0xf2>
 80104b6:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80104ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80104be:	eea0 7a27 	vfma.f32	s14, s0, s15
 80104c2:	2300      	movs	r3, #0
 80104c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80104c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80104cc:	1c5a      	adds	r2, r3, #1
 80104ce:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80104d2:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80105b8 <atanf+0x170>
 80104d6:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80105bc <atanf+0x174>
 80104da:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80105c0 <atanf+0x178>
 80104de:	ee66 6a06 	vmul.f32	s13, s12, s12
 80104e2:	eee6 5a87 	vfma.f32	s11, s13, s14
 80104e6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80105c4 <atanf+0x17c>
 80104ea:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80104ee:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80105c8 <atanf+0x180>
 80104f2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80104f6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80105cc <atanf+0x184>
 80104fa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80104fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80105d0 <atanf+0x188>
 8010502:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010506:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80105d4 <atanf+0x18c>
 801050a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801050e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80105d8 <atanf+0x190>
 8010512:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010516:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80105dc <atanf+0x194>
 801051a:	eea7 5a26 	vfma.f32	s10, s14, s13
 801051e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80105e0 <atanf+0x198>
 8010522:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010526:	ee27 7a26 	vmul.f32	s14, s14, s13
 801052a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801052e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010532:	d121      	bne.n	8010578 <atanf+0x130>
 8010534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010538:	e795      	b.n	8010466 <atanf+0x1e>
 801053a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801053e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010542:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010546:	2301      	movs	r3, #1
 8010548:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801054c:	e7be      	b.n	80104cc <atanf+0x84>
 801054e:	4b25      	ldr	r3, [pc, #148]	@ (80105e4 <atanf+0x19c>)
 8010550:	429c      	cmp	r4, r3
 8010552:	d80b      	bhi.n	801056c <atanf+0x124>
 8010554:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010558:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801055c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010560:	2302      	movs	r3, #2
 8010562:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801056a:	e7af      	b.n	80104cc <atanf+0x84>
 801056c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010570:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010574:	2303      	movs	r3, #3
 8010576:	e7a9      	b.n	80104cc <atanf+0x84>
 8010578:	4a1b      	ldr	r2, [pc, #108]	@ (80105e8 <atanf+0x1a0>)
 801057a:	491c      	ldr	r1, [pc, #112]	@ (80105ec <atanf+0x1a4>)
 801057c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010580:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010584:	edd3 6a00 	vldr	s13, [r3]
 8010588:	ee37 7a66 	vsub.f32	s14, s14, s13
 801058c:	2d00      	cmp	r5, #0
 801058e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010592:	edd2 7a00 	vldr	s15, [r2]
 8010596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801059a:	bfb8      	it	lt
 801059c:	eef1 7a67 	vneglt.f32	s15, s15
 80105a0:	e761      	b.n	8010466 <atanf+0x1e>
 80105a2:	bf00      	nop
 80105a4:	bfc90fdb 	.word	0xbfc90fdb
 80105a8:	3fc90fdb 	.word	0x3fc90fdb
 80105ac:	3edfffff 	.word	0x3edfffff
 80105b0:	7149f2ca 	.word	0x7149f2ca
 80105b4:	3f97ffff 	.word	0x3f97ffff
 80105b8:	3c8569d7 	.word	0x3c8569d7
 80105bc:	3d4bda59 	.word	0x3d4bda59
 80105c0:	bd6ef16b 	.word	0xbd6ef16b
 80105c4:	3d886b35 	.word	0x3d886b35
 80105c8:	3dba2e6e 	.word	0x3dba2e6e
 80105cc:	3e124925 	.word	0x3e124925
 80105d0:	3eaaaaab 	.word	0x3eaaaaab
 80105d4:	bd15a221 	.word	0xbd15a221
 80105d8:	bd9d8795 	.word	0xbd9d8795
 80105dc:	bde38e38 	.word	0xbde38e38
 80105e0:	be4ccccd 	.word	0xbe4ccccd
 80105e4:	401bffff 	.word	0x401bffff
 80105e8:	08010ad8 	.word	0x08010ad8
 80105ec:	08010ac8 	.word	0x08010ac8

080105f0 <__ieee754_sqrtf>:
 80105f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80105f4:	4770      	bx	lr
	...

080105f8 <_init>:
 80105f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105fa:	bf00      	nop
 80105fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105fe:	bc08      	pop	{r3}
 8010600:	469e      	mov	lr, r3
 8010602:	4770      	bx	lr

08010604 <_fini>:
 8010604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010606:	bf00      	nop
 8010608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801060a:	bc08      	pop	{r3}
 801060c:	469e      	mov	lr, r3
 801060e:	4770      	bx	lr
